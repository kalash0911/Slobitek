webpackJsonp([0],[
    /* 0 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var global = __webpack_require__(2);
    var core = __webpack_require__(26);
    var hide = __webpack_require__(14);
    var redefine = __webpack_require__(15);
    var ctx = __webpack_require__(23);
    var PROTOTYPE = 'prototype';
    
    var $export = function (type, name, source) {
      var IS_FORCED = type & $export.F;
      var IS_GLOBAL = type & $export.G;
      var IS_STATIC = type & $export.S;
      var IS_PROTO = type & $export.P;
      var IS_BIND = type & $export.B;
      var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
      var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
      var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
      var key, own, out, exp;
      if (IS_GLOBAL) source = name;
      for (key in source) {
        // contains in native
        own = !IS_FORCED && target && target[key] !== undefined;
        // export native or passed
        out = (own ? target : source)[key];
        // bind timers to global for call from export context
        exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
        // extend global
        if (target) redefine(target, key, out, type & $export.U);
        // export
        if (exports[key] != out) hide(exports, key, exp);
        if (IS_PROTO && expProto[key] != out) expProto[key] = out;
      }
    };
    global.core = core;
    // type bitmap
    $export.F = 1;   // forced
    $export.G = 2;   // global
    $export.S = 4;   // static
    $export.P = 8;   // proto
    $export.B = 16;  // bind
    $export.W = 32;  // wrap
    $export.U = 64;  // safe
    $export.R = 128; // real proto method for `library`
    module.exports = $export;
    
    
    /***/ }),
    /* 1 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var isObject = __webpack_require__(5);
    module.exports = function (it) {
      if (!isObject(it)) throw TypeError(it + ' is not an object!');
      return it;
    };
    
    
    /***/ }),
    /* 2 */
    /***/ (function(module, exports) {
    
    // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
    var global = module.exports = typeof window != 'undefined' && window.Math == Math
      ? window : typeof self != 'undefined' && self.Math == Math ? self
      // eslint-disable-next-line no-new-func
      : Function('return this')();
    if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef
    
    
    /***/ }),
    /* 3 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var _arguments = arguments;
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    /**
     * Commonly used constants and functions.
     *
     * @module Helpers
     */
    
    /**
     * Cache body DOM element.
     *
     * @constant
     * @type {jQuery}
     */
    var $body = exports.$body = $('body');
    
    /**
     * Cache document.
     *
     * @constant
     * @type {jQuery}
     */
    var $document = exports.$document = $(document);
    
    /**
     * Cache window.
     *
     * @constant
     * @type {jQuery}
     */
    var $window = exports.$window = $(window);
    
    /**
     * Cache header.
     *
     * @constant
     * @type {jQuery}
     */
    var $header = exports.$header = $('header');
    
    /**
     * Cache footer.
     *
     * @constant
     * @type {jQuery}
     */
    var $footer = exports.$footer = $('footer');
    
    /**
     * Elements for cross-browser window scroll.
     *
     * @constant
     * @type {jQuery}
     */
    var $scrolledElements = exports.$scrolledElements = $('html, body');
    
    /**
     * Window width.
     *
     * @constant
     * @type {Number}
     */
    var winWidth = exports.winWidth = $window.width();
    
    /**
     * Detect current page.
     *
     * @constant
     * @type {String}
     */
    var currentPage = exports.currentPage = $body.find('main').data('page');
    
    /**
     * Toggle class on specified element on click.
     *
     * @param {jQuery} clickHandler
     * @param {jQuery} element
     * @param {String} [className='active']
     */
    var toggleClass = exports.toggleClass = function toggleClass(clickHandler, element) {
        var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : css.active;
    
        clickHandler.on('click tap', function () {
            return element.toggleClass(className);
        });
    };
    
    /**
     * Check if element is in viewport.
     *
     * @param {jQuery} $element
     * @param {Boolean} [fullyInView = false] - element should be fully in viewport?
     * @param {Number} [offsetTop = 0]
     * @returns {Boolean}
     */
    var isScrolledIntoView = exports.isScrolledIntoView = function isScrolledIntoView($element) {
        var offsetTop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var fullyInView = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    
        var pageTop = $window.scrollTop();
        var pageBottom = pageTop + $window.height();
        var elementTop = $element.offset().top;
        var elementBottom = elementTop + $element.height();
    
        if (fullyInView) return pageTop < elementTop && pageBottom > elementBottom;
    
        return elementTop + offsetTop <= pageBottom && elementBottom >= pageTop;
    };
    
    /**
     * Check specified item to be target of the event.
     *
     * @param {Object} e - Event object.
     * @param {jQuery} item - Item to compare with.
     * @returns {Boolean} - Indicate whether clicked target is the specified item or not.
     */
    var checkClosest = exports.checkClosest = function checkClosest(e, item) {
        return $(e.target).closest(item).length > 0;
    };
    
    /**
     * Match media device indicator.
     */
    
    var Resp = exports.Resp = function () {
        function Resp() {
            _classCallCheck(this, Resp);
        }
    
        _createClass(Resp, null, [{
            key: 'currWidth',
    
            /**
       * Get window's current width.
       *
       * @get
       * @static
       * @return {Number}
       */
            get: function get() {
                return window.innerWidth;
            }
    
            /**
       * Detect touch events.
       *
       * @get
       * @static
       * @return {Boolean}
       */
    
        }, {
            key: 'isTouch',
            get: function get() {
                return 'ontouchstart' in window;
            }
    
            /**
       * Detect desktop large device.
       *
       * @get
       * @static
       * @return {Boolean}
       */
    
        }, {
            key: 'isDeskLg',
            get: function get() {
                return window.matchMedia(resp.deskLg).matches;
            }
    
            /**
       * Detect desktop device.
       *
       * @get
       * @static
       * @return {Boolean}
       */
    
        }, {
            key: 'isDesk',
            get: function get() {
                return window.matchMedia(resp.desk).matches;
            }
    
            /**
       * Detect mac screen size device.
       *
       * @get
       * @static
       * @return {Boolean}
       */
    
        }, {
            key: 'isMac',
            get: function get() {
                return window.matchMedia(resp.mac).matches;
            }
    
            /**
       * Detect tablet device.
       *
       * @get
       * @static
       * @return {Boolean}
       */
    
        }, {
            key: 'isTablet',
            get: function get() {
                return window.matchMedia(resp.tablet).matches;
            }
    
            /**
       * Detect mobile device.
       *
       * @get
       * @static
       * @return {Boolean}
       */
    
        }, {
            key: 'isMobile',
            get: function get() {
                return window.matchMedia(resp.mobile).matches;
            }
    
            /**
       * Detect mobile device.
       *
       * @get
       * @static
       * @return {Boolean}
       */
    
        }, {
            key: 'isNotMobile',
            get: function get() {
                return window.matchMedia(resp.notMobile).matches;
            }
        }]);
    
        return Resp;
    }();
    
    /**
     * Css class names.
     *
     * @constant
     * @type {Object}
     */
    
    
    var css = exports.css = {
        overflow: 'is-overflow',
        active: 'is-active',
        anim: 'has-anim',
        noTouch: 'no-touch',
        small: 'is-small',
        fill: 'is-fill',
        error: 'has-error',
        offTransition: 'transition-off',
        play: 'is-play',
        noEvents: 'no-events',
        init: 'is-init',
        loading: 'is-loading',
        hide: 'is-hide',
        blue: 'is-blue',
        white: 'is-white',
        menuActive: 'menu-active',
        disabled: 'is-disabled',
        animLine: 'anim-line__item'
    };
    
    /**
     * Match media
     *
     * @constant
     * @type {Object}
     */
    var resp = exports.resp = {
        deskLg: '(min-width: 1600px)',
        mac: '(min-width: 1200px) and (max-width: 1599px)',
        desk: '(min-width: 1200px)',
        tablet: '(min-width: 768px) and (max-width: 1200px)',
        mobile: '(max-width: 767px)',
        notDesk: '(max-width: 1199px)',
        notMobile: '(min-width: 768px)'
    };
    
    /**
     * Generate string of random letters.
     *
     * @param {Number} length
     */
    var randomString = exports.randomString = function randomString() {
        var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
        return Math.random().toString(36).substr(2, length > 10 ? length : 10);
    };
    
    /**
     * Returns a function, that, as long as it continues to be invoked, will not be triggered.
     *
     * @param {Function} func
     * @param {Object} context
     * @param {Number} wait
     * @param {Boolean} [immediate]
     * @returns {Function}
     */
    var debounce = exports.debounce = function debounce(func, context, wait, immediate) {
        var timeout = void 0;
    
        return function () {
            var args = _arguments;
    
            var later = function later() {
                timeout = null;
                if (!immediate) func.apply(context, args);
            };
    
            var callNow = immediate && !timeout;
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
            if (callNow) func.apply(context, args);
        };
    };
    
    /**
     * Throttle function.
     *
     * @param {Function} fn
     * @param {Number} [threshold]
     * @param {Object} [scope]
     * @returns {Function}
     */
    var throttle = exports.throttle = function throttle(fn) {
        var threshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 250;
        var scope = arguments[2];
    
        var last = void 0,
            deferTimer = void 0;
    
        return function () {
            var context = scope || this;
            var now = +new Date();
            var args = arguments;
    
            if (last && now < last + threshold) {
                clearTimeout(deferTimer);
                deferTimer = setTimeout(function () {
                    last = now;
                    fn.apply(context, args);
                }, threshold);
            } else {
                last = now;
                fn.apply(context, args);
            }
        };
    };
    
    /**
     * Create html for svg icon
     *
     * @param {String} name
     * @returns {String}
     */
    var svgIcon = exports.svgIcon = function svgIcon(name) {
        return '\n\t\t<svg class="icon icon-' + name + '">\n      <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#icon-' + name + '"></use>\n    </svg>';
    };
    
    /***/ }),
    /* 4 */
    /***/ (function(module, exports) {
    
    module.exports = function (exec) {
      try {
        return !!exec();
      } catch (e) {
        return true;
      }
    };
    
    
    /***/ }),
    /* 5 */
    /***/ (function(module, exports) {
    
    module.exports = function (it) {
      return typeof it === 'object' ? it !== null : typeof it === 'function';
    };
    
    
    /***/ }),
    /* 6 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var store = __webpack_require__(63)('wks');
    var uid = __webpack_require__(41);
    var Symbol = __webpack_require__(2).Symbol;
    var USE_SYMBOL = typeof Symbol == 'function';
    
    var $exports = module.exports = function (name) {
      return store[name] || (store[name] =
        USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
    };
    
    $exports.store = store;
    
    
    /***/ }),
    /* 7 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // Thank's IE8 for his funny defineProperty
    module.exports = !__webpack_require__(4)(function () {
      return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
    });
    
    
    /***/ }),
    /* 8 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var anObject = __webpack_require__(1);
    var IE8_DOM_DEFINE = __webpack_require__(111);
    var toPrimitive = __webpack_require__(27);
    var dP = Object.defineProperty;
    
    exports.f = __webpack_require__(7) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
      anObject(O);
      P = toPrimitive(P, true);
      anObject(Attributes);
      if (IE8_DOM_DEFINE) try {
        return dP(O, P, Attributes);
      } catch (e) { /* empty */ }
      if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
      if ('value' in Attributes) O[P] = Attributes.value;
      return O;
    };
    
    
    /***/ }),
    /* 9 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 7.1.15 ToLength
    var toInteger = __webpack_require__(29);
    var min = Math.min;
    module.exports = function (it) {
      return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
    };
    
    
    /***/ }),
    /* 10 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 7.1.13 ToObject(argument)
    var defined = __webpack_require__(28);
    module.exports = function (it) {
      return Object(defined(it));
    };
    
    
    /***/ }),
    /* 11 */
    /***/ (function(module, exports) {
    
    module.exports = function (it) {
      if (typeof it != 'function') throw TypeError(it + ' is not a function!');
      return it;
    };
    
    
    /***/ }),
    /* 12 */
    /***/ (function(module, exports, __webpack_require__) {
    
    /* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
     * VERSION: 1.20.2
     * DATE: 2017-06-30
     * UPDATES AND DOCS AT: http://greensock.com
     * 
     * Includes all of the following: TweenLite, TweenMax, TimelineLite, TimelineMax, EasePack, CSSPlugin, RoundPropsPlugin, BezierPlugin, AttrPlugin, DirectionalRotationPlugin
     *
     * @license Copyright (c) 2008-2017, GreenSock. All rights reserved.
     * This work is subject to the terms at http://greensock.com/standard-license or for
     * Club GreenSock members, the software agreement that was issued with your membership.
     * 
     * @author: Jack Doyle, jack@greensock.com
     **/
    var _gsScope = (typeof(module) !== "undefined" && module.exports && typeof(global) !== "undefined") ? global : this || window; //helps ensure compatibility with AMD/RequireJS and CommonJS/Node
    (_gsScope._gsQueue || (_gsScope._gsQueue = [])).push( function() {
    
        "use strict";
    
        _gsScope._gsDefine("TweenMax", ["core.Animation","core.SimpleTimeline","TweenLite"], function(Animation, SimpleTimeline, TweenLite) {
    
            var _slice = function(a) { //don't use [].slice because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()
                    var b = [],
                        l = a.length,
                        i;
                    for (i = 0; i !== l; b.push(a[i++]));
                    return b;
                },
                _applyCycle = function(vars, targets, i) {
                    var alt = vars.cycle,
                        p, val;
                    for (p in alt) {
                        val = alt[p];
                        vars[p] = (typeof(val) === "function") ? val(i, targets[i]) : val[i % val.length];
                    }
                    delete vars.cycle;
                },
                TweenMax = function(target, duration, vars) {
                    TweenLite.call(this, target, duration, vars);
                    this._cycle = 0;
                    this._yoyo = (this.vars.yoyo === true || !!this.vars.yoyoEase);
                    this._repeat = this.vars.repeat || 0;
                    this._repeatDelay = this.vars.repeatDelay || 0;
                    this._dirty = true; //ensures that if there is any repeat, the totalDuration will get recalculated to accurately report it.
                    this.render = TweenMax.prototype.render; //speed optimization (avoid prototype lookup on this "hot" method)
                },
                _tinyNum = 0.0000000001,
                TweenLiteInternals = TweenLite._internals,
                _isSelector = TweenLiteInternals.isSelector,
                _isArray = TweenLiteInternals.isArray,
                p = TweenMax.prototype = TweenLite.to({}, 0.1, {}),
                _blankArray = [];
    
            TweenMax.version = "1.20.2";
            p.constructor = TweenMax;
            p.kill()._gc = false;
            TweenMax.killTweensOf = TweenMax.killDelayedCallsTo = TweenLite.killTweensOf;
            TweenMax.getTweensOf = TweenLite.getTweensOf;
            TweenMax.lagSmoothing = TweenLite.lagSmoothing;
            TweenMax.ticker = TweenLite.ticker;
            TweenMax.render = TweenLite.render;
    
            p.invalidate = function() {
                this._yoyo = (this.vars.yoyo === true || !!this.vars.yoyoEase);
                this._repeat = this.vars.repeat || 0;
                this._repeatDelay = this.vars.repeatDelay || 0;
                this._yoyoEase = null;
                this._uncache(true);
                return TweenLite.prototype.invalidate.call(this);
            };
            
            p.updateTo = function(vars, resetDuration) {
                var curRatio = this.ratio,
                    immediate = this.vars.immediateRender || vars.immediateRender,
                    p;
                if (resetDuration && this._startTime < this._timeline._time) {
                    this._startTime = this._timeline._time;
                    this._uncache(false);
                    if (this._gc) {
                        this._enabled(true, false);
                    } else {
                        this._timeline.insert(this, this._startTime - this._delay); //ensures that any necessary re-sequencing of Animations in the timeline occurs to make sure the rendering order is correct.
                    }
                }
                for (p in vars) {
                    this.vars[p] = vars[p];
                }
                if (this._initted || immediate) {
                    if (resetDuration) {
                        this._initted = false;
                        if (immediate) {
                            this.render(0, true, true);
                        }
                    } else {
                        if (this._gc) {
                            this._enabled(true, false);
                        }
                        if (this._notifyPluginsOfEnabled && this._firstPT) {
                            TweenLite._onPluginEvent("_onDisable", this); //in case a plugin like MotionBlur must perform some cleanup tasks
                        }
                        if (this._time / this._duration > 0.998) { //if the tween has finished (or come extremely close to finishing), we just need to rewind it to 0 and then render it again at the end which forces it to re-initialize (parsing the new vars). We allow tweens that are close to finishing (but haven't quite finished) to work this way too because otherwise, the values are so small when determining where to project the starting values that binary math issues creep in and can make the tween appear to render incorrectly when run backwards. 
                            var prevTime = this._totalTime;
                            this.render(0, true, false);
                            this._initted = false;
                            this.render(prevTime, true, false);
                        } else {
                            this._initted = false;
                            this._init();
                            if (this._time > 0 || immediate) {
                                var inv = 1 / (1 - curRatio),
                                    pt = this._firstPT, endValue;
                                while (pt) {
                                    endValue = pt.s + pt.c;
                                    pt.c *= inv;
                                    pt.s = endValue - pt.c;
                                    pt = pt._next;
                                }
                            }
                        }
                    }
                }
                return this;
            };
                    
            p.render = function(time, suppressEvents, force) {
                if (!this._initted) if (this._duration === 0 && this.vars.repeat) { //zero duration tweens that render immediately have render() called from TweenLite's constructor, before TweenMax's constructor has finished setting _repeat, _repeatDelay, and _yoyo which are critical in determining totalDuration() so we need to call invalidate() which is a low-kb way to get those set properly.
                    this.invalidate();
                }
                var totalDur = (!this._dirty) ? this._totalDuration : this.totalDuration(),
                    prevTime = this._time,
                    prevTotalTime = this._totalTime, 
                    prevCycle = this._cycle,
                    duration = this._duration,
                    prevRawPrevTime = this._rawPrevTime,
                    isComplete, callback, pt, cycleDuration, r, type, pow, rawPrevTime, yoyoEase;
                if (time >= totalDur - 0.0000001 && time >= 0) { //to work around occasional floating point math artifacts.
                    this._totalTime = totalDur;
                    this._cycle = this._repeat;
                    if (this._yoyo && (this._cycle & 1) !== 0) {
                        this._time = 0;
                        this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;
                    } else {
                        this._time = duration;
                        this.ratio = this._ease._calcEnd ? this._ease.getRatio(1) : 1;
                    }
                    if (!this._reversed) {
                        isComplete = true;
                        callback = "onComplete";
                        force = (force || this._timeline.autoRemoveChildren); //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.
                    }
                    if (duration === 0) if (this._initted || !this.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the "playhead" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's "playhead" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.
                        if (this._startTime === this._timeline._duration) { //if a zero-duration tween is at the VERY end of a timeline and that timeline renders at its end, it will typically add a tiny bit of cushion to the render time to prevent rounding errors from getting in the way of tweens rendering their VERY end. If we then reverse() that timeline, the zero-duration tween will trigger its onReverseComplete even though technically the playhead didn't pass over it again. It's a very specific edge case we must accommodate.
                            time = 0;
                        }
                        if (prevRawPrevTime < 0 || (time <= 0 && time >= -0.0000001) || (prevRawPrevTime === _tinyNum && this.data !== "isPause")) if (prevRawPrevTime !== time) { //note: when this.data is "isPause", it's a callback added by addPause() on a timeline that we should not be triggered when LEAVING its exact start time. In other words, tl.addPause(1).play(1) shouldn't pause.
                            force = true;
                            if (prevRawPrevTime > _tinyNum) {
                                callback = "onReverseComplete";
                            }
                        }
                        this._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                    }
                    
                } else if (time < 0.0000001) { //to work around occasional floating point math artifacts, round super small values to 0.
                    this._totalTime = this._time = this._cycle = 0;
                    this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;
                    if (prevTotalTime !== 0 || (duration === 0 && prevRawPrevTime > 0)) {
                        callback = "onReverseComplete";
                        isComplete = this._reversed;
                    }
                    if (time < 0) {
                        this._active = false;
                        if (duration === 0) if (this._initted || !this.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the "playhead" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's "playhead" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.
                            if (prevRawPrevTime >= 0) {
                                force = true;
                            }
                            this._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                        }
                    }
                    if (!this._initted) { //if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.
                        force = true;
                    }
                } else {
                    this._totalTime = this._time = time;
                    if (this._repeat !== 0) {
                        cycleDuration = duration + this._repeatDelay;
                        this._cycle = (this._totalTime / cycleDuration) >> 0; //originally _totalTime % cycleDuration but floating point errors caused problems, so I normalized it. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)
                        if (this._cycle !== 0) if (this._cycle === this._totalTime / cycleDuration && prevTotalTime <= time) {
                            this._cycle--; //otherwise when rendered exactly at the end time, it will act as though it is repeating (at the beginning)
                        }
                        this._time = this._totalTime - (this._cycle * cycleDuration);
                        if (this._yoyo) if ((this._cycle & 1) !== 0) {
                            this._time = duration - this._time;
                            yoyoEase = this._yoyoEase || this.vars.yoyoEase; //note: we don't set this._yoyoEase in _init() like we do other properties because it's TweenMax-specific and doing it here allows us to optimize performance (most tweens don't have a yoyoEase). Note that we also must skip the this.ratio calculation further down right after we _init() in this function, because we're doing it here.
                            if (yoyoEase) {
                                if (!this._yoyoEase) {
                                    if (yoyoEase === true && !this._initted) { //if it's not initted and yoyoEase is true, this._ease won't have been populated yet so we must discern it here.
                                        yoyoEase = this.vars.ease;
                                        this._yoyoEase = yoyoEase = !yoyoEase ? TweenLite.defaultEase : (yoyoEase instanceof Ease) ? yoyoEase : (typeof(yoyoEase) === "function") ? new Ease(yoyoEase, this.vars.easeParams) : Ease.map[yoyoEase] || TweenLite.defaultEase;
                                    } else {
                                        this._yoyoEase = yoyoEase = (yoyoEase === true) ? this._ease : (yoyoEase instanceof Ease) ? yoyoEase : Ease.map[yoyoEase];
                                    }
                                }
                                this.ratio = yoyoEase ? 1 - yoyoEase.getRatio((duration - this._time) / duration) : 0;
                            }
                        }
                        if (this._time > duration) {
                            this._time = duration;
                        } else if (this._time < 0) {
                            this._time = 0;
                        }
                    }
    
                    if (this._easeType && !yoyoEase) {
                        r = this._time / duration;
                        type = this._easeType;
                        pow = this._easePower;
                        if (type === 1 || (type === 3 && r >= 0.5)) {
                            r = 1 - r;
                        }
                        if (type === 3) {
                            r *= 2;
                        }
                        if (pow === 1) {
                            r *= r;
                        } else if (pow === 2) {
                            r *= r * r;
                        } else if (pow === 3) {
                            r *= r * r * r;
                        } else if (pow === 4) {
                            r *= r * r * r * r;
                        }
    
                        if (type === 1) {
                            this.ratio = 1 - r;
                        } else if (type === 2) {
                            this.ratio = r;
                        } else if (this._time / duration < 0.5) {
                            this.ratio = r / 2;
                        } else {
                            this.ratio = 1 - (r / 2);
                        }
    
                    } else if (!yoyoEase) {
                        this.ratio = this._ease.getRatio(this._time / duration);
                    }
                    
                }
                    
                if (prevTime === this._time && !force && prevCycle === this._cycle) {
                    if (prevTotalTime !== this._totalTime) if (this._onUpdate) if (!suppressEvents) { //so that onUpdate fires even during the repeatDelay - as long as the totalTime changed, we should trigger onUpdate.
                        this._callback("onUpdate");
                    }
                    return;
                } else if (!this._initted) {
                    this._init();
                    if (!this._initted || this._gc) { //immediateRender tweens typically won't initialize until the playhead advances (_time is greater than 0) in order to ensure that overwriting occurs properly. Also, if all of the tweening properties have been overwritten (which would cause _gc to be true, as set in _init()), we shouldn't continue otherwise an onStart callback could be called for example.
                        return;
                    } else if (!force && this._firstPT && ((this.vars.lazy !== false && this._duration) || (this.vars.lazy && !this._duration))) { //we stick it in the queue for rendering at the very end of the tick - this is a performance optimization because browsers invalidate styles and force a recalculation if you read, write, and then read style data (so it's better to read/read/read/write/write/write than read/write/read/write/read/write). The down side, of course, is that usually you WANT things to render immediately because you may have code running right after that which depends on the change. Like imagine running TweenLite.set(...) and then immediately after that, creating a nother tween that animates the same property to another value; the starting values of that 2nd tween wouldn't be accurate if lazy is true.
                        this._time = prevTime;
                        this._totalTime = prevTotalTime;
                        this._rawPrevTime = prevRawPrevTime;
                        this._cycle = prevCycle;
                        TweenLiteInternals.lazyTweens.push(this);
                        this._lazy = [time, suppressEvents];
                        return;
                    }
                    //_ease is initially set to defaultEase, so now that init() has run, _ease is set properly and we need to recalculate the ratio. Overall this is faster than using conditional logic earlier in the method to avoid having to set ratio twice because we only init() once but renderTime() gets called VERY frequently.
                    if (this._time && !isComplete && !yoyoEase) {
                        this.ratio = this._ease.getRatio(this._time / duration);
                    } else if (isComplete && this._ease._calcEnd && !yoyoEase) {
                        this.ratio = this._ease.getRatio((this._time === 0) ? 0 : 1);
                    }
                }
                if (this._lazy !== false) {
                    this._lazy = false;
                }
    
                if (!this._active) if (!this._paused && this._time !== prevTime && time >= 0) {
                    this._active = true; //so that if the user renders a tween (as opposed to the timeline rendering it), the timeline is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the tween already finished but the user manually re-renders it as halfway done.
                }
                if (prevTotalTime === 0) {
                    if (this._initted === 2 && time > 0) {
                        //this.invalidate();
                        this._init(); //will just apply overwriting since _initted of (2) means it was a from() tween that had immediateRender:true
                    }
                    if (this._startAt) {
                        if (time >= 0) {
                            this._startAt.render(time, suppressEvents, force);
                        } else if (!callback) {
                            callback = "_dummyGS"; //if no callback is defined, use a dummy value just so that the condition at the end evaluates as true because _startAt should render AFTER the normal render loop when the time is negative. We could handle this in a more intuitive way, of course, but the render loop is the MOST important thing to optimize, so this technique allows us to avoid adding extra conditional logic in a high-frequency area.
                        }
                    }
                    if (this.vars.onStart) if (this._totalTime !== 0 || duration === 0) if (!suppressEvents) {
                        this._callback("onStart");
                    }
                }
                
                pt = this._firstPT;
                while (pt) {
                    if (pt.f) {
                        pt.t[pt.p](pt.c * this.ratio + pt.s);
                    } else {
                        pt.t[pt.p] = pt.c * this.ratio + pt.s;
                    }
                    pt = pt._next;
                }
                
                if (this._onUpdate) {
                    if (time < 0) if (this._startAt && this._startTime) { //if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.
                        this._startAt.render(time, suppressEvents, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.
                    }
                    if (!suppressEvents) if (this._totalTime !== prevTotalTime || callback) {
                        this._callback("onUpdate");
                    }
                }
                if (this._cycle !== prevCycle) if (!suppressEvents) if (!this._gc) if (this.vars.onRepeat) {
                    this._callback("onRepeat");
                }
                if (callback) if (!this._gc || force) { //check gc because there's a chance that kill() could be called in an onUpdate
                    if (time < 0 && this._startAt && !this._onUpdate && this._startTime) { //if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.
                        this._startAt.render(time, suppressEvents, force);
                    }
                    if (isComplete) {
                        if (this._timeline.autoRemoveChildren) {
                            this._enabled(false, false);
                        }
                        this._active = false;
                    }
                    if (!suppressEvents && this.vars[callback]) {
                        this._callback(callback);
                    }
                    if (duration === 0 && this._rawPrevTime === _tinyNum && rawPrevTime !== _tinyNum) { //the onComplete or onReverseComplete could trigger movement of the playhead and for zero-duration tweens (which must discern direction) that land directly back on their start time, we don't want to fire again on the next render. Think of several addPause()'s in a timeline that forces the playhead to a certain spot, but what if it's already paused and another tween is tweening the "time" of the timeline? Each time it moves [forward] past that spot, it would move back, and since suppressEvents is true, it'd reset _rawPrevTime to _tinyNum so that when it begins again, the callback would fire (so ultimately it could bounce back and forth during that tween). Again, this is a very uncommon scenario, but possible nonetheless.
                        this._rawPrevTime = 0;
                    }
                }
            };
            
    //---- STATIC FUNCTIONS -----------------------------------------------------------------------------------------------------------
            
            TweenMax.to = function(target, duration, vars) {
                return new TweenMax(target, duration, vars);
            };
            
            TweenMax.from = function(target, duration, vars) {
                vars.runBackwards = true;
                vars.immediateRender = (vars.immediateRender != false);
                return new TweenMax(target, duration, vars);
            };
            
            TweenMax.fromTo = function(target, duration, fromVars, toVars) {
                toVars.startAt = fromVars;
                toVars.immediateRender = (toVars.immediateRender != false && fromVars.immediateRender != false);
                return new TweenMax(target, duration, toVars);
            };
            
            TweenMax.staggerTo = TweenMax.allTo = function(targets, duration, vars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
                stagger = stagger || 0;
                var delay = 0,
                    a = [],
                    finalComplete = function() {
                        if (vars.onComplete) {
                            vars.onComplete.apply(vars.onCompleteScope || this, arguments);
                        }
                        onCompleteAll.apply(onCompleteAllScope || vars.callbackScope || this, onCompleteAllParams || _blankArray);
                    },
                    cycle = vars.cycle,
                    fromCycle = (vars.startAt && vars.startAt.cycle),
                    l, copy, i, p;
                if (!_isArray(targets)) {
                    if (typeof(targets) === "string") {
                        targets = TweenLite.selector(targets) || targets;
                    }
                    if (_isSelector(targets)) {
                        targets = _slice(targets);
                    }
                }
                targets = targets || [];
                if (stagger < 0) {
                    targets = _slice(targets);
                    targets.reverse();
                    stagger *= -1;
                }
                l = targets.length - 1;
                for (i = 0; i <= l; i++) {
                    copy = {};
                    for (p in vars) {
                        copy[p] = vars[p];
                    }
                    if (cycle) {
                        _applyCycle(copy, targets, i);
                        if (copy.duration != null) {
                            duration = copy.duration;
                            delete copy.duration;
                        }
                    }
                    if (fromCycle) {
                        fromCycle = copy.startAt = {};
                        for (p in vars.startAt) {
                            fromCycle[p] = vars.startAt[p];
                        }
                        _applyCycle(copy.startAt, targets, i);
                    }
                    copy.delay = delay + (copy.delay || 0);
                    if (i === l && onCompleteAll) {
                        copy.onComplete = finalComplete;
                    }
                    a[i] = new TweenMax(targets[i], duration, copy);
                    delay += stagger;
                }
                return a;
            };
            
            TweenMax.staggerFrom = TweenMax.allFrom = function(targets, duration, vars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
                vars.runBackwards = true;
                vars.immediateRender = (vars.immediateRender != false);
                return TweenMax.staggerTo(targets, duration, vars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope);
            };
            
            TweenMax.staggerFromTo = TweenMax.allFromTo = function(targets, duration, fromVars, toVars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
                toVars.startAt = fromVars;
                toVars.immediateRender = (toVars.immediateRender != false && fromVars.immediateRender != false);
                return TweenMax.staggerTo(targets, duration, toVars, stagger, onCompleteAll, onCompleteAllParams, onCompleteAllScope);
            };
                    
            TweenMax.delayedCall = function(delay, callback, params, scope, useFrames) {
                return new TweenMax(callback, 0, {delay:delay, onComplete:callback, onCompleteParams:params, callbackScope:scope, onReverseComplete:callback, onReverseCompleteParams:params, immediateRender:false, useFrames:useFrames, overwrite:0});
            };
            
            TweenMax.set = function(target, vars) {
                return new TweenMax(target, 0, vars);
            };
            
            TweenMax.isTweening = function(target) {
                return (TweenLite.getTweensOf(target, true).length > 0);
            };
            
            var _getChildrenOf = function(timeline, includeTimelines) {
                    var a = [],
                        cnt = 0,
                        tween = timeline._first;
                    while (tween) {
                        if (tween instanceof TweenLite) {
                            a[cnt++] = tween;
                        } else {
                            if (includeTimelines) {
                                a[cnt++] = tween;
                            }
                            a = a.concat(_getChildrenOf(tween, includeTimelines));
                            cnt = a.length;
                        }
                        tween = tween._next;
                    }
                    return a;
                }, 
                getAllTweens = TweenMax.getAllTweens = function(includeTimelines) {
                    return _getChildrenOf(Animation._rootTimeline, includeTimelines).concat( _getChildrenOf(Animation._rootFramesTimeline, includeTimelines) );
                };
            
            TweenMax.killAll = function(complete, tweens, delayedCalls, timelines) {
                if (tweens == null) {
                    tweens = true;
                }
                if (delayedCalls == null) {
                    delayedCalls = true;
                }
                var a = getAllTweens((timelines != false)),
                    l = a.length,
                    allTrue = (tweens && delayedCalls && timelines),
                    isDC, tween, i;
                for (i = 0; i < l; i++) {
                    tween = a[i];
                    if (allTrue || (tween instanceof SimpleTimeline) || ((isDC = (tween.target === tween.vars.onComplete)) && delayedCalls) || (tweens && !isDC)) {
                        if (complete) {
                            tween.totalTime(tween._reversed ? 0 : tween.totalDuration());
                        } else {
                            tween._enabled(false, false);
                        }
                    }
                }
            };
            
            TweenMax.killChildTweensOf = function(parent, complete) {
                if (parent == null) {
                    return;
                }
                var tl = TweenLiteInternals.tweenLookup,
                    a, curParent, p, i, l;
                if (typeof(parent) === "string") {
                    parent = TweenLite.selector(parent) || parent;
                }
                if (_isSelector(parent)) {
                    parent = _slice(parent);
                }
                if (_isArray(parent)) {
                    i = parent.length;
                    while (--i > -1) {
                        TweenMax.killChildTweensOf(parent[i], complete);
                    }
                    return;
                }
                a = [];
                for (p in tl) {
                    curParent = tl[p].target.parentNode;
                    while (curParent) {
                        if (curParent === parent) {
                            a = a.concat(tl[p].tweens);
                        }
                        curParent = curParent.parentNode;
                    }
                }
                l = a.length;
                for (i = 0; i < l; i++) {
                    if (complete) {
                        a[i].totalTime(a[i].totalDuration());
                    }
                    a[i]._enabled(false, false);
                }
            };
    
            var _changePause = function(pause, tweens, delayedCalls, timelines) {
                tweens = (tweens !== false);
                delayedCalls = (delayedCalls !== false);
                timelines = (timelines !== false);
                var a = getAllTweens(timelines),
                    allTrue = (tweens && delayedCalls && timelines),
                    i = a.length,
                    isDC, tween;
                while (--i > -1) {
                    tween = a[i];
                    if (allTrue || (tween instanceof SimpleTimeline) || ((isDC = (tween.target === tween.vars.onComplete)) && delayedCalls) || (tweens && !isDC)) {
                        tween.paused(pause);
                    }
                }
            };
            
            TweenMax.pauseAll = function(tweens, delayedCalls, timelines) {
                _changePause(true, tweens, delayedCalls, timelines);
            };
            
            TweenMax.resumeAll = function(tweens, delayedCalls, timelines) {
                _changePause(false, tweens, delayedCalls, timelines);
            };
    
            TweenMax.globalTimeScale = function(value) {
                var tl = Animation._rootTimeline,
                    t = TweenLite.ticker.time;
                if (!arguments.length) {
                    return tl._timeScale;
                }
                value = value || _tinyNum; //can't allow zero because it'll throw the math off
                tl._startTime = t - ((t - tl._startTime) * tl._timeScale / value);
                tl = Animation._rootFramesTimeline;
                t = TweenLite.ticker.frame;
                tl._startTime = t - ((t - tl._startTime) * tl._timeScale / value);
                tl._timeScale = Animation._rootTimeline._timeScale = value;
                return value;
            };
            
        
    //---- GETTERS / SETTERS ----------------------------------------------------------------------------------------------------------
            
            p.progress = function(value, suppressEvents) {
                return (!arguments.length) ? this._time / this.duration() : this.totalTime( this.duration() * ((this._yoyo && (this._cycle & 1) !== 0) ? 1 - value : value) + (this._cycle * (this._duration + this._repeatDelay)), suppressEvents);
            };
            
            p.totalProgress = function(value, suppressEvents) {
                return (!arguments.length) ? this._totalTime / this.totalDuration() : this.totalTime( this.totalDuration() * value, suppressEvents);
            };
            
            p.time = function(value, suppressEvents) {
                if (!arguments.length) {
                    return this._time;
                }
                if (this._dirty) {
                    this.totalDuration();
                }
                if (value > this._duration) {
                    value = this._duration;
                }
                if (this._yoyo && (this._cycle & 1) !== 0) {
                    value = (this._duration - value) + (this._cycle * (this._duration + this._repeatDelay));
                } else if (this._repeat !== 0) {
                    value += this._cycle * (this._duration + this._repeatDelay);
                }
                return this.totalTime(value, suppressEvents);
            };
    
            p.duration = function(value) {
                if (!arguments.length) {
                    return this._duration; //don't set _dirty = false because there could be repeats that haven't been factored into the _totalDuration yet. Otherwise, if you create a repeated TweenMax and then immediately check its duration(), it would cache the value and the totalDuration would not be correct, thus repeats wouldn't take effect.
                }
                return Animation.prototype.duration.call(this, value);
            };
    
            p.totalDuration = function(value) {
                if (!arguments.length) {
                    if (this._dirty) {
                        //instead of Infinity, we use 999999999999 so that we can accommodate reverses
                        this._totalDuration = (this._repeat === -1) ? 999999999999 : this._duration * (this._repeat + 1) + (this._repeatDelay * this._repeat);
                        this._dirty = false;
                    }
                    return this._totalDuration;
                }
                return (this._repeat === -1) ? this : this.duration( (value - (this._repeat * this._repeatDelay)) / (this._repeat + 1) );
            };
            
            p.repeat = function(value) {
                if (!arguments.length) {
                    return this._repeat;
                }
                this._repeat = value;
                return this._uncache(true);
            };
            
            p.repeatDelay = function(value) {
                if (!arguments.length) {
                    return this._repeatDelay;
                }
                this._repeatDelay = value;
                return this._uncache(true);
            };
            
            p.yoyo = function(value) {
                if (!arguments.length) {
                    return this._yoyo;
                }
                this._yoyo = value;
                return this;
            };
            
            
            return TweenMax;
            
        }, true);
    
    
    
    
    
    
    
    
    /*
     * ----------------------------------------------------------------
     * TimelineLite
     * ----------------------------------------------------------------
     */
        _gsScope._gsDefine("TimelineLite", ["core.Animation","core.SimpleTimeline","TweenLite"], function(Animation, SimpleTimeline, TweenLite) {
    
            var TimelineLite = function(vars) {
                    SimpleTimeline.call(this, vars);
                    this._labels = {};
                    this.autoRemoveChildren = (this.vars.autoRemoveChildren === true);
                    this.smoothChildTiming = (this.vars.smoothChildTiming === true);
                    this._sortChildren = true;
                    this._onUpdate = this.vars.onUpdate;
                    var v = this.vars,
                        val, p;
                    for (p in v) {
                        val = v[p];
                        if (_isArray(val)) if (val.join("").indexOf("{self}") !== -1) {
                            v[p] = this._swapSelfInParams(val);
                        }
                    }
                    if (_isArray(v.tweens)) {
                        this.add(v.tweens, 0, v.align, v.stagger);
                    }
                },
                _tinyNum = 0.0000000001,
                TweenLiteInternals = TweenLite._internals,
                _internals = TimelineLite._internals = {},
                _isSelector = TweenLiteInternals.isSelector,
                _isArray = TweenLiteInternals.isArray,
                _lazyTweens = TweenLiteInternals.lazyTweens,
                _lazyRender = TweenLiteInternals.lazyRender,
                _globals = _gsScope._gsDefine.globals,
                _copy = function(vars) {
                    var copy = {}, p;
                    for (p in vars) {
                        copy[p] = vars[p];
                    }
                    return copy;
                },
                _applyCycle = function(vars, targets, i) {
                    var alt = vars.cycle,
                        p, val;
                    for (p in alt) {
                        val = alt[p];
                        vars[p] = (typeof(val) === "function") ? val(i, targets[i]) : val[i % val.length];
                    }
                    delete vars.cycle;
                },
                _pauseCallback = _internals.pauseCallback = function() {},
                _slice = function(a) { //don't use [].slice because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()
                    var b = [],
                        l = a.length,
                        i;
                    for (i = 0; i !== l; b.push(a[i++]));
                    return b;
                },
                p = TimelineLite.prototype = new SimpleTimeline();
    
            TimelineLite.version = "1.20.2";
            p.constructor = TimelineLite;
            p.kill()._gc = p._forcingPlayhead = p._hasPause = false;
    
            /* might use later...
            //translates a local time inside an animation to the corresponding time on the root/global timeline, factoring in all nesting and timeScales.
            function localToGlobal(time, animation) {
                while (animation) {
                    time = (time / animation._timeScale) + animation._startTime;
                    animation = animation.timeline;
                }
                return time;
            }
    
            //translates the supplied time on the root/global timeline into the corresponding local time inside a particular animation, factoring in all nesting and timeScales
            function globalToLocal(time, animation) {
                var scale = 1;
                time -= localToGlobal(0, animation);
                while (animation) {
                    scale *= animation._timeScale;
                    animation = animation.timeline;
                }
                return time * scale;
            }
            */
    
            p.to = function(target, duration, vars, position) {
                var Engine = (vars.repeat && _globals.TweenMax) || TweenLite;
                return duration ? this.add( new Engine(target, duration, vars), position) : this.set(target, vars, position);
            };
    
            p.from = function(target, duration, vars, position) {
                return this.add( ((vars.repeat && _globals.TweenMax) || TweenLite).from(target, duration, vars), position);
            };
    
            p.fromTo = function(target, duration, fromVars, toVars, position) {
                var Engine = (toVars.repeat && _globals.TweenMax) || TweenLite;
                return duration ? this.add( Engine.fromTo(target, duration, fromVars, toVars), position) : this.set(target, toVars, position);
            };
    
            p.staggerTo = function(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
                var tl = new TimelineLite({onComplete:onCompleteAll, onCompleteParams:onCompleteAllParams, callbackScope:onCompleteAllScope, smoothChildTiming:this.smoothChildTiming}),
                    cycle = vars.cycle,
                    copy, i;
                if (typeof(targets) === "string") {
                    targets = TweenLite.selector(targets) || targets;
                }
                targets = targets || [];
                if (_isSelector(targets)) { //senses if the targets object is a selector. If it is, we should translate it into an array.
                    targets = _slice(targets);
                }
                stagger = stagger || 0;
                if (stagger < 0) {
                    targets = _slice(targets);
                    targets.reverse();
                    stagger *= -1;
                }
                for (i = 0; i < targets.length; i++) {
                    copy = _copy(vars);
                    if (copy.startAt) {
                        copy.startAt = _copy(copy.startAt);
                        if (copy.startAt.cycle) {
                            _applyCycle(copy.startAt, targets, i);
                        }
                    }
                    if (cycle) {
                        _applyCycle(copy, targets, i);
                        if (copy.duration != null) {
                            duration = copy.duration;
                            delete copy.duration;
                        }
                    }
                    tl.to(targets[i], duration, copy, i * stagger);
                }
                return this.add(tl, position);
            };
    
            p.staggerFrom = function(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
                vars.immediateRender = (vars.immediateRender != false);
                vars.runBackwards = true;
                return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope);
            };
    
            p.staggerFromTo = function(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
                toVars.startAt = fromVars;
                toVars.immediateRender = (toVars.immediateRender != false && fromVars.immediateRender != false);
                return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope);
            };
    
            p.call = function(callback, params, scope, position) {
                return this.add( TweenLite.delayedCall(0, callback, params, scope), position);
            };
    
            p.set = function(target, vars, position) {
                position = this._parseTimeOrLabel(position, 0, true);
                if (vars.immediateRender == null) {
                    vars.immediateRender = (position === this._time && !this._paused);
                }
                return this.add( new TweenLite(target, 0, vars), position);
            };
    
            TimelineLite.exportRoot = function(vars, ignoreDelayedCalls) {
                vars = vars || {};
                if (vars.smoothChildTiming == null) {
                    vars.smoothChildTiming = true;
                }
                var tl = new TimelineLite(vars),
                    root = tl._timeline,
                    tween, next;
                if (ignoreDelayedCalls == null) {
                    ignoreDelayedCalls = true;
                }
                root._remove(tl, true);
                tl._startTime = 0;
                tl._rawPrevTime = tl._time = tl._totalTime = root._time;
                tween = root._first;
                while (tween) {
                    next = tween._next;
                    if (!ignoreDelayedCalls || !(tween instanceof TweenLite && tween.target === tween.vars.onComplete)) {
                        tl.add(tween, tween._startTime - tween._delay);
                    }
                    tween = next;
                }
                root.add(tl, 0);
                return tl;
            };
    
            p.add = function(value, position, align, stagger) {
                var curTime, l, i, child, tl, beforeRawTime;
                if (typeof(position) !== "number") {
                    position = this._parseTimeOrLabel(position, 0, true, value);
                }
                if (!(value instanceof Animation)) {
                    if ((value instanceof Array) || (value && value.push && _isArray(value))) {
                        align = align || "normal";
                        stagger = stagger || 0;
                        curTime = position;
                        l = value.length;
                        for (i = 0; i < l; i++) {
                            if (_isArray(child = value[i])) {
                                child = new TimelineLite({tweens:child});
                            }
                            this.add(child, curTime);
                            if (typeof(child) !== "string" && typeof(child) !== "function") {
                                if (align === "sequence") {
                                    curTime = child._startTime + (child.totalDuration() / child._timeScale);
                                } else if (align === "start") {
                                    child._startTime -= child.delay();
                                }
                            }
                            curTime += stagger;
                        }
                        return this._uncache(true);
                    } else if (typeof(value) === "string") {
                        return this.addLabel(value, position);
                    } else if (typeof(value) === "function") {
                        value = TweenLite.delayedCall(0, value);
                    } else {
                        throw("Cannot add " + value + " into the timeline; it is not a tween, timeline, function, or string.");
                    }
                }
    
                SimpleTimeline.prototype.add.call(this, value, position);
    
                if (value._time) { //in case, for example, the _startTime is moved on a tween that has already rendered. Imagine it's at its end state, then the startTime is moved WAY later (after the end of this timeline), it should render at its beginning.
                    value.render((this.rawTime() - value._startTime) * value._timeScale, false, false);
                }
    
                //if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.
                if (this._gc || this._time === this._duration) if (!this._paused) if (this._duration < this.duration()) {
                    //in case any of the ancestors had completed but should now be enabled...
                    tl = this;
                    beforeRawTime = (tl.rawTime() > value._startTime); //if the tween is placed on the timeline so that it starts BEFORE the current rawTime, we should align the playhead (move the timeline). This is because sometimes users will create a timeline, let it finish, and much later append a tween and expect it to run instead of jumping to its end state. While technically one could argue that it should jump to its end state, that's not what users intuitively expect.
                    while (tl._timeline) {
                        if (beforeRawTime && tl._timeline.smoothChildTiming) {
                            tl.totalTime(tl._totalTime, true); //moves the timeline (shifts its startTime) if necessary, and also enables it.
                        } else if (tl._gc) {
                            tl._enabled(true, false);
                        }
                        tl = tl._timeline;
                    }
                }
    
                return this;
            };
    
            p.remove = function(value) {
                if (value instanceof Animation) {
                    this._remove(value, false);
                    var tl = value._timeline = value.vars.useFrames ? Animation._rootFramesTimeline : Animation._rootTimeline; //now that it's removed, default it to the root timeline so that if it gets played again, it doesn't jump back into this timeline.
                    value._startTime = (value._paused ? value._pauseTime : tl._time) - ((!value._reversed ? value._totalTime : value.totalDuration() - value._totalTime) / value._timeScale); //ensure that if it gets played again, the timing is correct.
                    return this;
                } else if (value instanceof Array || (value && value.push && _isArray(value))) {
                    var i = value.length;
                    while (--i > -1) {
                        this.remove(value[i]);
                    }
                    return this;
                } else if (typeof(value) === "string") {
                    return this.removeLabel(value);
                }
                return this.kill(null, value);
            };
    
            p._remove = function(tween, skipDisable) {
                SimpleTimeline.prototype._remove.call(this, tween, skipDisable);
                var last = this._last;
                if (!last) {
                    this._time = this._totalTime = this._duration = this._totalDuration = 0;
                } else if (this._time > this.duration()) {
                    this._time = this._duration;
                    this._totalTime = this._totalDuration;
                }
                return this;
            };
    
            p.append = function(value, offsetOrLabel) {
                return this.add(value, this._parseTimeOrLabel(null, offsetOrLabel, true, value));
            };
    
            p.insert = p.insertMultiple = function(value, position, align, stagger) {
                return this.add(value, position || 0, align, stagger);
            };
    
            p.appendMultiple = function(tweens, offsetOrLabel, align, stagger) {
                return this.add(tweens, this._parseTimeOrLabel(null, offsetOrLabel, true, tweens), align, stagger);
            };
    
            p.addLabel = function(label, position) {
                this._labels[label] = this._parseTimeOrLabel(position);
                return this;
            };
    
            p.addPause = function(position, callback, params, scope) {
                var t = TweenLite.delayedCall(0, _pauseCallback, params, scope || this);
                t.vars.onComplete = t.vars.onReverseComplete = callback;
                t.data = "isPause";
                this._hasPause = true;
                return this.add(t, position);
            };
    
            p.removeLabel = function(label) {
                delete this._labels[label];
                return this;
            };
    
            p.getLabelTime = function(label) {
                return (this._labels[label] != null) ? this._labels[label] : -1;
            };
    
            p._parseTimeOrLabel = function(timeOrLabel, offsetOrLabel, appendIfAbsent, ignore) {
                var clippedDuration, i;
                //if we're about to add a tween/timeline (or an array of them) that's already a child of this timeline, we should remove it first so that it doesn't contaminate the duration().
                if (ignore instanceof Animation && ignore.timeline === this) {
                    this.remove(ignore);
                } else if (ignore && ((ignore instanceof Array) || (ignore.push && _isArray(ignore)))) {
                    i = ignore.length;
                    while (--i > -1) {
                        if (ignore[i] instanceof Animation && ignore[i].timeline === this) {
                            this.remove(ignore[i]);
                        }
                    }
                }
                clippedDuration = (this.duration() > 99999999999) ? this.recent().endTime(false) : this._duration; //in case there's a child that infinitely repeats, users almost never intend for the insertion point of a new child to be based on a SUPER long value like that so we clip it and assume the most recently-added child's endTime should be used instead.
                if (typeof(offsetOrLabel) === "string") {
                    return this._parseTimeOrLabel(offsetOrLabel, (appendIfAbsent && typeof(timeOrLabel) === "number" && this._labels[offsetOrLabel] == null) ? timeOrLabel - clippedDuration : 0, appendIfAbsent);
                }
                offsetOrLabel = offsetOrLabel || 0;
                if (typeof(timeOrLabel) === "string" && (isNaN(timeOrLabel) || this._labels[timeOrLabel] != null)) { //if the string is a number like "1", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).
                    i = timeOrLabel.indexOf("=");
                    if (i === -1) {
                        if (this._labels[timeOrLabel] == null) {
                            return appendIfAbsent ? (this._labels[timeOrLabel] = clippedDuration + offsetOrLabel) : offsetOrLabel;
                        }
                        return this._labels[timeOrLabel] + offsetOrLabel;
                    }
                    offsetOrLabel = parseInt(timeOrLabel.charAt(i-1) + "1", 10) * Number(timeOrLabel.substr(i+1));
                    timeOrLabel = (i > 1) ? this._parseTimeOrLabel(timeOrLabel.substr(0, i-1), 0, appendIfAbsent) : clippedDuration;
                } else if (timeOrLabel == null) {
                    timeOrLabel = clippedDuration;
                }
                return Number(timeOrLabel) + offsetOrLabel;
            };
    
            p.seek = function(position, suppressEvents) {
                return this.totalTime((typeof(position) === "number") ? position : this._parseTimeOrLabel(position), (suppressEvents !== false));
            };
    
            p.stop = function() {
                return this.paused(true);
            };
    
            p.gotoAndPlay = function(position, suppressEvents) {
                return this.play(position, suppressEvents);
            };
    
            p.gotoAndStop = function(position, suppressEvents) {
                return this.pause(position, suppressEvents);
            };
    
            p.render = function(time, suppressEvents, force) {
                if (this._gc) {
                    this._enabled(true, false);
                }
                var totalDur = (!this._dirty) ? this._totalDuration : this.totalDuration(),
                    prevTime = this._time,
                    prevStart = this._startTime,
                    prevTimeScale = this._timeScale,
                    prevPaused = this._paused,
                    tween, isComplete, next, callback, internalForce, pauseTween, curTime;
                if (time >= totalDur - 0.0000001 && time >= 0) { //to work around occasional floating point math artifacts.
                    this._totalTime = this._time = totalDur;
                    if (!this._reversed) if (!this._hasPausedChild()) {
                        isComplete = true;
                        callback = "onComplete";
                        internalForce = !!this._timeline.autoRemoveChildren; //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.
                        if (this._duration === 0) if ((time <= 0 && time >= -0.0000001) || this._rawPrevTime < 0 || this._rawPrevTime === _tinyNum) if (this._rawPrevTime !== time && this._first) {
                            internalForce = true;
                            if (this._rawPrevTime > _tinyNum) {
                                callback = "onReverseComplete";
                            }
                        }
                    }
                    this._rawPrevTime = (this._duration || !suppressEvents || time || this._rawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                    time = totalDur + 0.0001; //to avoid occasional floating point rounding errors - sometimes child tweens/timelines were not being fully completed (their progress might be 0.999999999999998 instead of 1 because when _time - tween._startTime is performed, floating point errors would return a value that was SLIGHTLY off). Try (999999999999.7 - 999999999999) * 1 = 0.699951171875 instead of 0.7.
    
                } else if (time < 0.0000001) { //to work around occasional floating point math artifacts, round super small values to 0.
                    this._totalTime = this._time = 0;
                    if (prevTime !== 0 || (this._duration === 0 && this._rawPrevTime !== _tinyNum && (this._rawPrevTime > 0 || (time < 0 && this._rawPrevTime >= 0)))) {
                        callback = "onReverseComplete";
                        isComplete = this._reversed;
                    }
                    if (time < 0) {
                        this._active = false;
                        if (this._timeline.autoRemoveChildren && this._reversed) { //ensures proper GC if a timeline is resumed after it's finished reversing.
                            internalForce = isComplete = true;
                            callback = "onReverseComplete";
                        } else if (this._rawPrevTime >= 0 && this._first) { //when going back beyond the start, force a render so that zero-duration tweens that sit at the very beginning render their start values properly. Otherwise, if the parent timeline's playhead lands exactly at this timeline's startTime, and then moves backwards, the zero-duration tweens at the beginning would still be at their end state.
                            internalForce = true;
                        }
                        this._rawPrevTime = time;
                    } else {
                        this._rawPrevTime = (this._duration || !suppressEvents || time || this._rawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                        if (time === 0 && isComplete) { //if there's a zero-duration tween at the very beginning of a timeline and the playhead lands EXACTLY at time 0, that tween will correctly render its end values, but we need to keep the timeline alive for one more render so that the beginning values render properly as the parent's playhead keeps moving beyond the begining. Imagine obj.x starts at 0 and then we do tl.set(obj, {x:100}).to(obj, 1, {x:200}) and then later we tl.reverse()...the goal is to have obj.x revert to 0. If the playhead happens to land on exactly 0, without this chunk of code, it'd complete the timeline and remove it from the rendering queue (not good).
                            tween = this._first;
                            while (tween && tween._startTime === 0) {
                                if (!tween._duration) {
                                    isComplete = false;
                                }
                                tween = tween._next;
                            }
                        }
                        time = 0; //to avoid occasional floating point rounding errors (could cause problems especially with zero-duration tweens at the very beginning of the timeline)
                        if (!this._initted) {
                            internalForce = true;
                        }
                    }
    
                } else {
    
                    if (this._hasPause && !this._forcingPlayhead && !suppressEvents) {
                        if (time >= prevTime) {
                            tween = this._first;
                            while (tween && tween._startTime <= time && !pauseTween) {
                                if (!tween._duration) if (tween.data === "isPause" && !tween.ratio && !(tween._startTime === 0 && this._rawPrevTime === 0)) {
                                    pauseTween = tween;
                                }
                                tween = tween._next;
                            }
                        } else {
                            tween = this._last;
                            while (tween && tween._startTime >= time && !pauseTween) {
                                if (!tween._duration) if (tween.data === "isPause" && tween._rawPrevTime > 0) {
                                    pauseTween = tween;
                                }
                                tween = tween._prev;
                            }
                        }
                        if (pauseTween) {
                            this._time = time = pauseTween._startTime;
                            this._totalTime = time + (this._cycle * (this._totalDuration + this._repeatDelay));
                        }
                    }
    
                    this._totalTime = this._time = this._rawPrevTime = time;
                }
                if ((this._time === prevTime || !this._first) && !force && !internalForce && !pauseTween) {
                    return;
                } else if (!this._initted) {
                    this._initted = true;
                }
    
                if (!this._active) if (!this._paused && this._time !== prevTime && time > 0) {
                    this._active = true;  //so that if the user renders the timeline (as opposed to the parent timeline rendering it), it is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the timeline already finished but the user manually re-renders it as halfway done, for example.
                }
    
                if (prevTime === 0) if (this.vars.onStart) if (this._time !== 0 || !this._duration) if (!suppressEvents) {
                    this._callback("onStart");
                }
    
                curTime = this._time;
                if (curTime >= prevTime) {
                    tween = this._first;
                    while (tween) {
                        next = tween._next; //record it here because the value could change after rendering...
                        if (curTime !== this._time || (this._paused && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
                            break;
                        } else if (tween._active || (tween._startTime <= curTime && !tween._paused && !tween._gc)) {
                            if (pauseTween === tween) {
                                this.pause();
                            }
                            if (!tween._reversed) {
                                tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
                            } else {
                                tween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);
                            }
                        }
                        tween = next;
                    }
                } else {
                    tween = this._last;
                    while (tween) {
                        next = tween._prev; //record it here because the value could change after rendering...
                        if (curTime !== this._time || (this._paused && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
                            break;
                        } else if (tween._active || (tween._startTime <= prevTime && !tween._paused && !tween._gc)) {
                            if (pauseTween === tween) {
                                pauseTween = tween._prev; //the linked list is organized by _startTime, thus it's possible that a tween could start BEFORE the pause and end after it, in which case it would be positioned before the pause tween in the linked list, but we should render it before we pause() the timeline and cease rendering. This is only a concern when going in reverse.
                                while (pauseTween && pauseTween.endTime() > this._time) {
                                    pauseTween.render( (pauseTween._reversed ? pauseTween.totalDuration() - ((time - pauseTween._startTime) * pauseTween._timeScale) : (time - pauseTween._startTime) * pauseTween._timeScale), suppressEvents, force);
                                    pauseTween = pauseTween._prev;
                                }
                                pauseTween = null;
                                this.pause();
                            }
                            if (!tween._reversed) {
                                tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
                            } else {
                                tween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);
                            }
                        }
                        tween = next;
                    }
                }
    
                if (this._onUpdate) if (!suppressEvents) {
                    if (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.
                        _lazyRender();
                    }
                    this._callback("onUpdate");
                }
    
                if (callback) if (!this._gc) if (prevStart === this._startTime || prevTimeScale !== this._timeScale) if (this._time === 0 || totalDur >= this.totalDuration()) { //if one of the tweens that was rendered altered this timeline's startTime (like if an onComplete reversed the timeline), it probably isn't complete. If it is, don't worry, because whatever call altered the startTime would complete if it was necessary at the new time. The only exception is the timeScale property. Also check _gc because there's a chance that kill() could be called in an onUpdate
                    if (isComplete) {
                        if (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onComplete on a timeline that reports/checks tweened values.
                            _lazyRender();
                        }
                        if (this._timeline.autoRemoveChildren) {
                            this._enabled(false, false);
                        }
                        this._active = false;
                    }
                    if (!suppressEvents && this.vars[callback]) {
                        this._callback(callback);
                    }
                }
            };
    
            p._hasPausedChild = function() {
                var tween = this._first;
                while (tween) {
                    if (tween._paused || ((tween instanceof TimelineLite) && tween._hasPausedChild())) {
                        return true;
                    }
                    tween = tween._next;
                }
                return false;
            };
    
            p.getChildren = function(nested, tweens, timelines, ignoreBeforeTime) {
                ignoreBeforeTime = ignoreBeforeTime || -9999999999;
                var a = [],
                    tween = this._first,
                    cnt = 0;
                while (tween) {
                    if (tween._startTime < ignoreBeforeTime) {
                        //do nothing
                    } else if (tween instanceof TweenLite) {
                        if (tweens !== false) {
                            a[cnt++] = tween;
                        }
                    } else {
                        if (timelines !== false) {
                            a[cnt++] = tween;
                        }
                        if (nested !== false) {
                            a = a.concat(tween.getChildren(true, tweens, timelines));
                            cnt = a.length;
                        }
                    }
                    tween = tween._next;
                }
                return a;
            };
    
            p.getTweensOf = function(target, nested) {
                var disabled = this._gc,
                    a = [],
                    cnt = 0,
                    tweens, i;
                if (disabled) {
                    this._enabled(true, true); //getTweensOf() filters out disabled tweens, and we have to mark them as _gc = true when the timeline completes in order to allow clean garbage collection, so temporarily re-enable the timeline here.
                }
                tweens = TweenLite.getTweensOf(target);
                i = tweens.length;
                while (--i > -1) {
                    if (tweens[i].timeline === this || (nested && this._contains(tweens[i]))) {
                        a[cnt++] = tweens[i];
                    }
                }
                if (disabled) {
                    this._enabled(false, true);
                }
                return a;
            };
    
            p.recent = function() {
                return this._recent;
            };
    
            p._contains = function(tween) {
                var tl = tween.timeline;
                while (tl) {
                    if (tl === this) {
                        return true;
                    }
                    tl = tl.timeline;
                }
                return false;
            };
    
            p.shiftChildren = function(amount, adjustLabels, ignoreBeforeTime) {
                ignoreBeforeTime = ignoreBeforeTime || 0;
                var tween = this._first,
                    labels = this._labels,
                    p;
                while (tween) {
                    if (tween._startTime >= ignoreBeforeTime) {
                        tween._startTime += amount;
                    }
                    tween = tween._next;
                }
                if (adjustLabels) {
                    for (p in labels) {
                        if (labels[p] >= ignoreBeforeTime) {
                            labels[p] += amount;
                        }
                    }
                }
                return this._uncache(true);
            };
    
            p._kill = function(vars, target) {
                if (!vars && !target) {
                    return this._enabled(false, false);
                }
                var tweens = (!target) ? this.getChildren(true, true, false) : this.getTweensOf(target),
                    i = tweens.length,
                    changed = false;
                while (--i > -1) {
                    if (tweens[i]._kill(vars, target)) {
                        changed = true;
                    }
                }
                return changed;
            };
    
            p.clear = function(labels) {
                var tweens = this.getChildren(false, true, true),
                    i = tweens.length;
                this._time = this._totalTime = 0;
                while (--i > -1) {
                    tweens[i]._enabled(false, false);
                }
                if (labels !== false) {
                    this._labels = {};
                }
                return this._uncache(true);
            };
    
            p.invalidate = function() {
                var tween = this._first;
                while (tween) {
                    tween.invalidate();
                    tween = tween._next;
                }
                return Animation.prototype.invalidate.call(this);;
            };
    
            p._enabled = function(enabled, ignoreTimeline) {
                if (enabled === this._gc) {
                    var tween = this._first;
                    while (tween) {
                        tween._enabled(enabled, true);
                        tween = tween._next;
                    }
                }
                return SimpleTimeline.prototype._enabled.call(this, enabled, ignoreTimeline);
            };
    
            p.totalTime = function(time, suppressEvents, uncapped) {
                this._forcingPlayhead = true;
                var val = Animation.prototype.totalTime.apply(this, arguments);
                this._forcingPlayhead = false;
                return val;
            };
    
            p.duration = function(value) {
                if (!arguments.length) {
                    if (this._dirty) {
                        this.totalDuration(); //just triggers recalculation
                    }
                    return this._duration;
                }
                if (this.duration() !== 0 && value !== 0) {
                    this.timeScale(this._duration / value);
                }
                return this;
            };
    
            p.totalDuration = function(value) {
                if (!arguments.length) {
                    if (this._dirty) {
                        var max = 0,
                            tween = this._last,
                            prevStart = 999999999999,
                            prev, end;
                        while (tween) {
                            prev = tween._prev; //record it here in case the tween changes position in the sequence...
                            if (tween._dirty) {
                                tween.totalDuration(); //could change the tween._startTime, so make sure the tween's cache is clean before analyzing it.
                            }
                            if (tween._startTime > prevStart && this._sortChildren && !tween._paused) { //in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence
                                this.add(tween, tween._startTime - tween._delay);
                            } else {
                                prevStart = tween._startTime;
                            }
                            if (tween._startTime < 0 && !tween._paused) { //children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.
                                max -= tween._startTime;
                                if (this._timeline.smoothChildTiming) {
                                    this._startTime += tween._startTime / this._timeScale;
                                }
                                this.shiftChildren(-tween._startTime, false, -9999999999);
                                prevStart = 0;
                            }
                            end = tween._startTime + (tween._totalDuration / tween._timeScale);
                            if (end > max) {
                                max = end;
                            }
                            tween = prev;
                        }
                        this._duration = this._totalDuration = max;
                        this._dirty = false;
                    }
                    return this._totalDuration;
                }
                return (value && this.totalDuration()) ? this.timeScale(this._totalDuration / value) : this;
            };
    
            p.paused = function(value) {
                if (!value) { //if there's a pause directly at the spot from where we're unpausing, skip it.
                    var tween = this._first,
                        time = this._time;
                    while (tween) {
                        if (tween._startTime === time && tween.data === "isPause") {
                            tween._rawPrevTime = 0; //remember, _rawPrevTime is how zero-duration tweens/callbacks sense directionality and determine whether or not to fire. If _rawPrevTime is the same as _startTime on the next render, it won't fire.
                        }
                        tween = tween._next;
                    }
                }
                return Animation.prototype.paused.apply(this, arguments);
            };
    
            p.usesFrames = function() {
                var tl = this._timeline;
                while (tl._timeline) {
                    tl = tl._timeline;
                }
                return (tl === Animation._rootFramesTimeline);
            };
    
            p.rawTime = function(wrapRepeats) {
                return (wrapRepeats && (this._paused || (this._repeat && this.time() > 0 && this.totalProgress() < 1))) ? this._totalTime % (this._duration + this._repeatDelay) : this._paused ? this._totalTime : (this._timeline.rawTime(wrapRepeats) - this._startTime) * this._timeScale;
            };
    
            return TimelineLite;
    
        }, true);
    
    
    
    
    
    
    
    
        
        
        
        
        
    /*
     * ----------------------------------------------------------------
     * TimelineMax
     * ----------------------------------------------------------------
     */
        _gsScope._gsDefine("TimelineMax", ["TimelineLite","TweenLite","easing.Ease"], function(TimelineLite, TweenLite, Ease) {
    
            var TimelineMax = function(vars) {
                    TimelineLite.call(this, vars);
                    this._repeat = this.vars.repeat || 0;
                    this._repeatDelay = this.vars.repeatDelay || 0;
                    this._cycle = 0;
                    this._yoyo = (this.vars.yoyo === true);
                    this._dirty = true;
                },
                _tinyNum = 0.0000000001,
                TweenLiteInternals = TweenLite._internals,
                _lazyTweens = TweenLiteInternals.lazyTweens,
                _lazyRender = TweenLiteInternals.lazyRender,
                _globals = _gsScope._gsDefine.globals,
                _easeNone = new Ease(null, null, 1, 0),
                p = TimelineMax.prototype = new TimelineLite();
    
            p.constructor = TimelineMax;
            p.kill()._gc = false;
            TimelineMax.version = "1.20.2";
    
            p.invalidate = function() {
                this._yoyo = (this.vars.yoyo === true);
                this._repeat = this.vars.repeat || 0;
                this._repeatDelay = this.vars.repeatDelay || 0;
                this._uncache(true);
                return TimelineLite.prototype.invalidate.call(this);
            };
    
            p.addCallback = function(callback, position, params, scope) {
                return this.add( TweenLite.delayedCall(0, callback, params, scope), position);
            };
    
            p.removeCallback = function(callback, position) {
                if (callback) {
                    if (position == null) {
                        this._kill(null, callback);
                    } else {
                        var a = this.getTweensOf(callback, false),
                            i = a.length,
                            time = this._parseTimeOrLabel(position);
                        while (--i > -1) {
                            if (a[i]._startTime === time) {
                                a[i]._enabled(false, false);
                            }
                        }
                    }
                }
                return this;
            };
    
            p.removePause = function(position) {
                return this.removeCallback(TimelineLite._internals.pauseCallback, position);
            };
    
            p.tweenTo = function(position, vars) {
                vars = vars || {};
                var copy = {ease:_easeNone, useFrames:this.usesFrames(), immediateRender:false},
                    Engine = (vars.repeat && _globals.TweenMax) || TweenLite,
                    duration, p, t;
                for (p in vars) {
                    copy[p] = vars[p];
                }
                copy.time = this._parseTimeOrLabel(position);
                duration = (Math.abs(Number(copy.time) - this._time) / this._timeScale) || 0.001;
                t = new Engine(this, duration, copy);
                copy.onStart = function() {
                    t.target.paused(true);
                    if (t.vars.time !== t.target.time() && duration === t.duration()) { //don't make the duration zero - if it's supposed to be zero, don't worry because it's already initting the tween and will complete immediately, effectively making the duration zero anyway. If we make duration zero, the tween won't run at all.
                        t.duration( Math.abs( t.vars.time - t.target.time()) / t.target._timeScale );
                    }
                    if (vars.onStart) { //in case the user had an onStart in the vars - we don't want to overwrite it.
                        vars.onStart.apply(vars.onStartScope || vars.callbackScope || t, vars.onStartParams || []); //don't use t._callback("onStart") or it'll point to the copy.onStart and we'll get a recursion error.
                    }
                };
                return t;
            };
    
            p.tweenFromTo = function(fromPosition, toPosition, vars) {
                vars = vars || {};
                fromPosition = this._parseTimeOrLabel(fromPosition);
                vars.startAt = {onComplete:this.seek, onCompleteParams:[fromPosition], callbackScope:this};
                vars.immediateRender = (vars.immediateRender !== false);
                var t = this.tweenTo(toPosition, vars);
                return t.duration((Math.abs( t.vars.time - fromPosition) / this._timeScale) || 0.001);
            };
    
            p.render = function(time, suppressEvents, force) {
                if (this._gc) {
                    this._enabled(true, false);
                }
                var totalDur = (!this._dirty) ? this._totalDuration : this.totalDuration(),
                    dur = this._duration,
                    prevTime = this._time,
                    prevTotalTime = this._totalTime,
                    prevStart = this._startTime,
                    prevTimeScale = this._timeScale,
                    prevRawPrevTime = this._rawPrevTime,
                    prevPaused = this._paused,
                    prevCycle = this._cycle,
                    tween, isComplete, next, callback, internalForce, cycleDuration, pauseTween, curTime;
                if (time >= totalDur - 0.0000001 && time >= 0) { //to work around occasional floating point math artifacts.
                    if (!this._locked) {
                        this._totalTime = totalDur;
                        this._cycle = this._repeat;
                    }
                    if (!this._reversed) if (!this._hasPausedChild()) {
                        isComplete = true;
                        callback = "onComplete";
                        internalForce = !!this._timeline.autoRemoveChildren; //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.
                        if (this._duration === 0) if ((time <= 0 && time >= -0.0000001) || prevRawPrevTime < 0 || prevRawPrevTime === _tinyNum) if (prevRawPrevTime !== time && this._first) {
                            internalForce = true;
                            if (prevRawPrevTime > _tinyNum) {
                                callback = "onReverseComplete";
                            }
                        }
                    }
                    this._rawPrevTime = (this._duration || !suppressEvents || time || this._rawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                    if (this._yoyo && (this._cycle & 1) !== 0) {
                        this._time = time = 0;
                    } else {
                        this._time = dur;
                        time = dur + 0.0001; //to avoid occasional floating point rounding errors - sometimes child tweens/timelines were not being fully completed (their progress might be 0.999999999999998 instead of 1 because when _time - tween._startTime is performed, floating point errors would return a value that was SLIGHTLY off). Try (999999999999.7 - 999999999999) * 1 = 0.699951171875 instead of 0.7. We cannot do less then 0.0001 because the same issue can occur when the duration is extremely large like 999999999999 in which case adding 0.00000001, for example, causes it to act like nothing was added.
                    }
    
                } else if (time < 0.0000001) { //to work around occasional floating point math artifacts, round super small values to 0.
                    if (!this._locked) {
                        this._totalTime = this._cycle = 0;
                    }
                    this._time = 0;
                    if (prevTime !== 0 || (dur === 0 && prevRawPrevTime !== _tinyNum && (prevRawPrevTime > 0 || (time < 0 && prevRawPrevTime >= 0)) && !this._locked)) { //edge case for checking time < 0 && prevRawPrevTime >= 0: a zero-duration fromTo() tween inside a zero-duration timeline (yeah, very rare)
                        callback = "onReverseComplete";
                        isComplete = this._reversed;
                    }
                    if (time < 0) {
                        this._active = false;
                        if (this._timeline.autoRemoveChildren && this._reversed) {
                            internalForce = isComplete = true;
                            callback = "onReverseComplete";
                        } else if (prevRawPrevTime >= 0 && this._first) { //when going back beyond the start, force a render so that zero-duration tweens that sit at the very beginning render their start values properly. Otherwise, if the parent timeline's playhead lands exactly at this timeline's startTime, and then moves backwards, the zero-duration tweens at the beginning would still be at their end state.
                            internalForce = true;
                        }
                        this._rawPrevTime = time;
                    } else {
                        this._rawPrevTime = (dur || !suppressEvents || time || this._rawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                        if (time === 0 && isComplete) { //if there's a zero-duration tween at the very beginning of a timeline and the playhead lands EXACTLY at time 0, that tween will correctly render its end values, but we need to keep the timeline alive for one more render so that the beginning values render properly as the parent's playhead keeps moving beyond the begining. Imagine obj.x starts at 0 and then we do tl.set(obj, {x:100}).to(obj, 1, {x:200}) and then later we tl.reverse()...the goal is to have obj.x revert to 0. If the playhead happens to land on exactly 0, without this chunk of code, it'd complete the timeline and remove it from the rendering queue (not good).
                            tween = this._first;
                            while (tween && tween._startTime === 0) {
                                if (!tween._duration) {
                                    isComplete = false;
                                }
                                tween = tween._next;
                            }
                        }
                        time = 0; //to avoid occasional floating point rounding errors (could cause problems especially with zero-duration tweens at the very beginning of the timeline)
                        if (!this._initted) {
                            internalForce = true;
                        }
                    }
    
                } else {
                    if (dur === 0 && prevRawPrevTime < 0) { //without this, zero-duration repeating timelines (like with a simple callback nested at the very beginning and a repeatDelay) wouldn't render the first time through.
                        internalForce = true;
                    }
                    this._time = this._rawPrevTime = time;
                    if (!this._locked) {
                        this._totalTime = time;
                        if (this._repeat !== 0) {
                            cycleDuration = dur + this._repeatDelay;
                            this._cycle = (this._totalTime / cycleDuration) >> 0; //originally _totalTime % cycleDuration but floating point errors caused problems, so I normalized it. (4 % 0.8 should be 0 but it gets reported as 0.79999999!)
                            if (this._cycle !== 0) if (this._cycle === this._totalTime / cycleDuration && prevTotalTime <= time) {
                                this._cycle--; //otherwise when rendered exactly at the end time, it will act as though it is repeating (at the beginning)
                            }
                            this._time = this._totalTime - (this._cycle * cycleDuration);
                            if (this._yoyo) if ((this._cycle & 1) !== 0) {
                                this._time = dur - this._time;
                            }
                            if (this._time > dur) {
                                this._time = dur;
                                time = dur + 0.0001; //to avoid occasional floating point rounding error
                            } else if (this._time < 0) {
                                this._time = time = 0;
                            } else {
                                time = this._time;
                            }
                        }
                    }
    
                    if (this._hasPause && !this._forcingPlayhead && !suppressEvents) {
                        time = this._time;
                        if (time >= prevTime || (this._repeat && prevCycle !== this._cycle)) {
                            tween = this._first;
                            while (tween && tween._startTime <= time && !pauseTween) {
                                if (!tween._duration) if (tween.data === "isPause" && !tween.ratio && !(tween._startTime === 0 && this._rawPrevTime === 0)) {
                                    pauseTween = tween;
                                }
                                tween = tween._next;
                            }
                        } else {
                            tween = this._last;
                            while (tween && tween._startTime >= time && !pauseTween) {
                                if (!tween._duration) if (tween.data === "isPause" && tween._rawPrevTime > 0) {
                                    pauseTween = tween;
                                }
                                tween = tween._prev;
                            }
                        }
                        if (pauseTween && pauseTween._startTime < dur) {
                            this._time = time = pauseTween._startTime;
                            this._totalTime = time + (this._cycle * (this._totalDuration + this._repeatDelay));
                        }
                    }
    
                }
    
                if (this._cycle !== prevCycle) if (!this._locked) {
                    /*
                    make sure children at the end/beginning of the timeline are rendered properly. If, for example,
                    a 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which
                    would get transated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there
                    could be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So
                    we need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must
                    ensure that zero-duration tweens at the very beginning or end of the TimelineMax work.
                    */
                    var backwards = (this._yoyo && (prevCycle & 1) !== 0),
                        wrap = (backwards === (this._yoyo && (this._cycle & 1) !== 0)),
                        recTotalTime = this._totalTime,
                        recCycle = this._cycle,
                        recRawPrevTime = this._rawPrevTime,
                        recTime = this._time;
    
                    this._totalTime = prevCycle * dur;
                    if (this._cycle < prevCycle) {
                        backwards = !backwards;
                    } else {
                        this._totalTime += dur;
                    }
                    this._time = prevTime; //temporarily revert _time so that render() renders the children in the correct order. Without this, tweens won't rewind correctly. We could arhictect things in a "cleaner" way by splitting out the rendering queue into a separate method but for performance reasons, we kept it all inside this method.
    
                    this._rawPrevTime = (dur === 0) ? prevRawPrevTime - 0.0001 : prevRawPrevTime;
                    this._cycle = prevCycle;
                    this._locked = true; //prevents changes to totalTime and skips repeat/yoyo behavior when we recursively call render()
                    prevTime = (backwards) ? 0 : dur;
                    this.render(prevTime, suppressEvents, (dur === 0));
                    if (!suppressEvents) if (!this._gc) {
                        if (this.vars.onRepeat) {
                            this._cycle = recCycle; //in case the onRepeat alters the playhead or invalidates(), we shouldn't stay locked or use the previous cycle.
                            this._locked = false;
                            this._callback("onRepeat");
                        }
                    }
                    if (prevTime !== this._time) { //in case there's a callback like onComplete in a nested tween/timeline that changes the playhead position, like via seek(), we should just abort.
                        return;
                    }
                    if (wrap) {
                        this._cycle = prevCycle; //if there's an onRepeat, we reverted this above, so make sure it's set properly again. We also unlocked in that scenario, so reset that too.
                        this._locked = true;
                        prevTime = (backwards) ? dur + 0.0001 : -0.0001;
                        this.render(prevTime, true, false);
                    }
                    this._locked = false;
                    if (this._paused && !prevPaused) { //if the render() triggered callback that paused this timeline, we should abort (very rare, but possible)
                        return;
                    }
                    this._time = recTime;
                    this._totalTime = recTotalTime;
                    this._cycle = recCycle;
                    this._rawPrevTime = recRawPrevTime;
                }
    
                if ((this._time === prevTime || !this._first) && !force && !internalForce && !pauseTween) {
                    if (prevTotalTime !== this._totalTime) if (this._onUpdate) if (!suppressEvents) { //so that onUpdate fires even during the repeatDelay - as long as the totalTime changed, we should trigger onUpdate.
                        this._callback("onUpdate");
                    }
                    return;
                } else if (!this._initted) {
                    this._initted = true;
                }
    
                if (!this._active) if (!this._paused && this._totalTime !== prevTotalTime && time > 0) {
                    this._active = true;  //so that if the user renders the timeline (as opposed to the parent timeline rendering it), it is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the timeline already finished but the user manually re-renders it as halfway done, for example.
                }
    
                if (prevTotalTime === 0) if (this.vars.onStart) if (this._totalTime !== 0 || !this._totalDuration) if (!suppressEvents) {
                    this._callback("onStart");
                }
    
                curTime = this._time;
                if (curTime >= prevTime) {
                    tween = this._first;
                    while (tween) {
                        next = tween._next; //record it here because the value could change after rendering...
                        if (curTime !== this._time || (this._paused && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
                            break;
                        } else if (tween._active || (tween._startTime <= this._time && !tween._paused && !tween._gc)) {
                            if (pauseTween === tween) {
                                this.pause();
                            }
                            if (!tween._reversed) {
                                tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
                            } else {
                                tween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);
                            }
                        }
                        tween = next;
                    }
                } else {
                    tween = this._last;
                    while (tween) {
                        next = tween._prev; //record it here because the value could change after rendering...
                        if (curTime !== this._time || (this._paused && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
                            break;
                        } else if (tween._active || (tween._startTime <= prevTime && !tween._paused && !tween._gc)) {
                            if (pauseTween === tween) {
                                pauseTween = tween._prev; //the linked list is organized by _startTime, thus it's possible that a tween could start BEFORE the pause and end after it, in which case it would be positioned before the pause tween in the linked list, but we should render it before we pause() the timeline and cease rendering. This is only a concern when going in reverse.
                                while (pauseTween && pauseTween.endTime() > this._time) {
                                    pauseTween.render( (pauseTween._reversed ? pauseTween.totalDuration() - ((time - pauseTween._startTime) * pauseTween._timeScale) : (time - pauseTween._startTime) * pauseTween._timeScale), suppressEvents, force);
                                    pauseTween = pauseTween._prev;
                                }
                                pauseTween = null;
                                this.pause();
                            }
                            if (!tween._reversed) {
                                tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
                            } else {
                                tween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);
                            }
                        }
                        tween = next;
                    }
                }
    
                if (this._onUpdate) if (!suppressEvents) {
                    if (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.
                        _lazyRender();
                    }
                    this._callback("onUpdate");
                }
                if (callback) if (!this._locked) if (!this._gc) if (prevStart === this._startTime || prevTimeScale !== this._timeScale) if (this._time === 0 || totalDur >= this.totalDuration()) { //if one of the tweens that was rendered altered this timeline's startTime (like if an onComplete reversed the timeline), it probably isn't complete. If it is, don't worry, because whatever call altered the startTime would complete if it was necessary at the new time. The only exception is the timeScale property. Also check _gc because there's a chance that kill() could be called in an onUpdate
                    if (isComplete) {
                        if (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onComplete on a timeline that reports/checks tweened values.
                            _lazyRender();
                        }
                        if (this._timeline.autoRemoveChildren) {
                            this._enabled(false, false);
                        }
                        this._active = false;
                    }
                    if (!suppressEvents && this.vars[callback]) {
                        this._callback(callback);
                    }
                }
            };
    
            p.getActive = function(nested, tweens, timelines) {
                if (nested == null) {
                    nested = true;
                }
                if (tweens == null) {
                    tweens = true;
                }
                if (timelines == null) {
                    timelines = false;
                }
                var a = [],
                    all = this.getChildren(nested, tweens, timelines),
                    cnt = 0,
                    l = all.length,
                    i, tween;
                for (i = 0; i < l; i++) {
                    tween = all[i];
                    if (tween.isActive()) {
                        a[cnt++] = tween;
                    }
                }
                return a;
            };
    
    
            p.getLabelAfter = function(time) {
                if (!time) if (time !== 0) { //faster than isNan()
                    time = this._time;
                }
                var labels = this.getLabelsArray(),
                    l = labels.length,
                    i;
                for (i = 0; i < l; i++) {
                    if (labels[i].time > time) {
                        return labels[i].name;
                    }
                }
                return null;
            };
    
            p.getLabelBefore = function(time) {
                if (time == null) {
                    time = this._time;
                }
                var labels = this.getLabelsArray(),
                    i = labels.length;
                while (--i > -1) {
                    if (labels[i].time < time) {
                        return labels[i].name;
                    }
                }
                return null;
            };
    
            p.getLabelsArray = function() {
                var a = [],
                    cnt = 0,
                    p;
                for (p in this._labels) {
                    a[cnt++] = {time:this._labels[p], name:p};
                }
                a.sort(function(a,b) {
                    return a.time - b.time;
                });
                return a;
            };
    
            p.invalidate = function() {
                this._locked = false; //unlock and set cycle in case invalidate() is called from inside an onRepeat
                return TimelineLite.prototype.invalidate.call(this);
            };
    
    
    //---- GETTERS / SETTERS -------------------------------------------------------------------------------------------------------
    
            p.progress = function(value, suppressEvents) {
                return (!arguments.length) ? (this._time / this.duration()) || 0 : this.totalTime( this.duration() * ((this._yoyo && (this._cycle & 1) !== 0) ? 1 - value : value) + (this._cycle * (this._duration + this._repeatDelay)), suppressEvents);
            };
    
            p.totalProgress = function(value, suppressEvents) {
                return (!arguments.length) ? (this._totalTime / this.totalDuration()) || 0 : this.totalTime( this.totalDuration() * value, suppressEvents);
            };
    
            p.totalDuration = function(value) {
                if (!arguments.length) {
                    if (this._dirty) {
                        TimelineLite.prototype.totalDuration.call(this); //just forces refresh
                        //Instead of Infinity, we use 999999999999 so that we can accommodate reverses.
                        this._totalDuration = (this._repeat === -1) ? 999999999999 : this._duration * (this._repeat + 1) + (this._repeatDelay * this._repeat);
                    }
                    return this._totalDuration;
                }
                return (this._repeat === -1 || !value) ? this : this.timeScale( this.totalDuration() / value );
            };
    
            p.time = function(value, suppressEvents) {
                if (!arguments.length) {
                    return this._time;
                }
                if (this._dirty) {
                    this.totalDuration();
                }
                if (value > this._duration) {
                    value = this._duration;
                }
                if (this._yoyo && (this._cycle & 1) !== 0) {
                    value = (this._duration - value) + (this._cycle * (this._duration + this._repeatDelay));
                } else if (this._repeat !== 0) {
                    value += this._cycle * (this._duration + this._repeatDelay);
                }
                return this.totalTime(value, suppressEvents);
            };
    
            p.repeat = function(value) {
                if (!arguments.length) {
                    return this._repeat;
                }
                this._repeat = value;
                return this._uncache(true);
            };
    
            p.repeatDelay = function(value) {
                if (!arguments.length) {
                    return this._repeatDelay;
                }
                this._repeatDelay = value;
                return this._uncache(true);
            };
    
            p.yoyo = function(value) {
                if (!arguments.length) {
                    return this._yoyo;
                }
                this._yoyo = value;
                return this;
            };
    
            p.currentLabel = function(value) {
                if (!arguments.length) {
                    return this.getLabelBefore(this._time + 0.00000001);
                }
                return this.seek(value, true);
            };
    
            return TimelineMax;
    
        }, true);
        
    
    
    
    
        
        
        
        
        
        
        
    /*
     * ----------------------------------------------------------------
     * BezierPlugin
     * ----------------------------------------------------------------
     */
        (function() {
    
            var _RAD2DEG = 180 / Math.PI,
                _r1 = [],
                _r2 = [],
                _r3 = [],
                _corProps = {},
                _globals = _gsScope._gsDefine.globals,
                Segment = function(a, b, c, d) {
                    if (c === d) { //if c and d match, the final autoRotate value could lock at -90 degrees, so differentiate them slightly.
                        c = d - (d - b) / 1000000;
                    }
                    if (a === b) { //if a and b match, the starting autoRotate value could lock at -90 degrees, so differentiate them slightly.
                        b = a + (c - a) / 1000000;
                    }
                    this.a = a;
                    this.b = b;
                    this.c = c;
                    this.d = d;
                    this.da = d - a;
                    this.ca = c - a;
                    this.ba = b - a;
                },
                _correlate = ",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,",
                cubicToQuadratic = function(a, b, c, d) {
                    var q1 = {a:a},
                        q2 = {},
                        q3 = {},
                        q4 = {c:d},
                        mab = (a + b) / 2,
                        mbc = (b + c) / 2,
                        mcd = (c + d) / 2,
                        mabc = (mab + mbc) / 2,
                        mbcd = (mbc + mcd) / 2,
                        m8 = (mbcd - mabc) / 8;
                    q1.b = mab + (a - mab) / 4;
                    q2.b = mabc + m8;
                    q1.c = q2.a = (q1.b + q2.b) / 2;
                    q2.c = q3.a = (mabc + mbcd) / 2;
                    q3.b = mbcd - m8;
                    q4.b = mcd + (d - mcd) / 4;
                    q3.c = q4.a = (q3.b + q4.b) / 2;
                    return [q1, q2, q3, q4];
                },
                _calculateControlPoints = function(a, curviness, quad, basic, correlate) {
                    var l = a.length - 1,
                        ii = 0,
                        cp1 = a[0].a,
                        i, p1, p2, p3, seg, m1, m2, mm, cp2, qb, r1, r2, tl;
                    for (i = 0; i < l; i++) {
                        seg = a[ii];
                        p1 = seg.a;
                        p2 = seg.d;
                        p3 = a[ii+1].d;
    
                        if (correlate) {
                            r1 = _r1[i];
                            r2 = _r2[i];
                            tl = ((r2 + r1) * curviness * 0.25) / (basic ? 0.5 : _r3[i] || 0.5);
                            m1 = p2 - (p2 - p1) * (basic ? curviness * 0.5 : (r1 !== 0 ? tl / r1 : 0));
                            m2 = p2 + (p3 - p2) * (basic ? curviness * 0.5 : (r2 !== 0 ? tl / r2 : 0));
                            mm = p2 - (m1 + (((m2 - m1) * ((r1 * 3 / (r1 + r2)) + 0.5) / 4) || 0));
                        } else {
                            m1 = p2 - (p2 - p1) * curviness * 0.5;
                            m2 = p2 + (p3 - p2) * curviness * 0.5;
                            mm = p2 - (m1 + m2) / 2;
                        }
                        m1 += mm;
                        m2 += mm;
    
                        seg.c = cp2 = m1;
                        if (i !== 0) {
                            seg.b = cp1;
                        } else {
                            seg.b = cp1 = seg.a + (seg.c - seg.a) * 0.6; //instead of placing b on a exactly, we move it inline with c so that if the user specifies an ease like Back.easeIn or Elastic.easeIn which goes BEYOND the beginning, it will do so smoothly.
                        }
    
                        seg.da = p2 - p1;
                        seg.ca = cp2 - p1;
                        seg.ba = cp1 - p1;
    
                        if (quad) {
                            qb = cubicToQuadratic(p1, cp1, cp2, p2);
                            a.splice(ii, 1, qb[0], qb[1], qb[2], qb[3]);
                            ii += 4;
                        } else {
                            ii++;
                        }
    
                        cp1 = m2;
                    }
                    seg = a[ii];
                    seg.b = cp1;
                    seg.c = cp1 + (seg.d - cp1) * 0.4; //instead of placing c on d exactly, we move it inline with b so that if the user specifies an ease like Back.easeOut or Elastic.easeOut which goes BEYOND the end, it will do so smoothly.
                    seg.da = seg.d - seg.a;
                    seg.ca = seg.c - seg.a;
                    seg.ba = cp1 - seg.a;
                    if (quad) {
                        qb = cubicToQuadratic(seg.a, cp1, seg.c, seg.d);
                        a.splice(ii, 1, qb[0], qb[1], qb[2], qb[3]);
                    }
                },
                _parseAnchors = function(values, p, correlate, prepend) {
                    var a = [],
                        l, i, p1, p2, p3, tmp;
                    if (prepend) {
                        values = [prepend].concat(values);
                        i = values.length;
                        while (--i > -1) {
                            if (typeof( (tmp = values[i][p]) ) === "string") if (tmp.charAt(1) === "=") {
                                values[i][p] = prepend[p] + Number(tmp.charAt(0) + tmp.substr(2)); //accommodate relative values. Do it inline instead of breaking it out into a function for speed reasons
                            }
                        }
                    }
                    l = values.length - 2;
                    if (l < 0) {
                        a[0] = new Segment(values[0][p], 0, 0, values[0][p]);
                        return a;
                    }
                    for (i = 0; i < l; i++) {
                        p1 = values[i][p];
                        p2 = values[i+1][p];
                        a[i] = new Segment(p1, 0, 0, p2);
                        if (correlate) {
                            p3 = values[i+2][p];
                            _r1[i] = (_r1[i] || 0) + (p2 - p1) * (p2 - p1);
                            _r2[i] = (_r2[i] || 0) + (p3 - p2) * (p3 - p2);
                        }
                    }
                    a[i] = new Segment(values[i][p], 0, 0, values[i+1][p]);
                    return a;
                },
                bezierThrough = function(values, curviness, quadratic, basic, correlate, prepend) {
                    var obj = {},
                        props = [],
                        first = prepend || values[0],
                        i, p, a, j, r, l, seamless, last;
                    correlate = (typeof(correlate) === "string") ? ","+correlate+"," : _correlate;
                    if (curviness == null) {
                        curviness = 1;
                    }
                    for (p in values[0]) {
                        props.push(p);
                    }
                    //check to see if the last and first values are identical (well, within 0.05). If so, make seamless by appending the second element to the very end of the values array and the 2nd-to-last element to the very beginning (we'll remove those segments later)
                    if (values.length > 1) {
                        last = values[values.length - 1];
                        seamless = true;
                        i = props.length;
                        while (--i > -1) {
                            p = props[i];
                            if (Math.abs(first[p] - last[p]) > 0.05) { //build in a tolerance of +/-0.05 to accommodate rounding errors.
                                seamless = false;
                                break;
                            }
                        }
                        if (seamless) {
                            values = values.concat(); //duplicate the array to avoid contaminating the original which the user may be reusing for other tweens
                            if (prepend) {
                                values.unshift(prepend);
                            }
                            values.push(values[1]);
                            prepend = values[values.length - 3];
                        }
                    }
                    _r1.length = _r2.length = _r3.length = 0;
                    i = props.length;
                    while (--i > -1) {
                        p = props[i];
                        _corProps[p] = (correlate.indexOf(","+p+",") !== -1);
                        obj[p] = _parseAnchors(values, p, _corProps[p], prepend);
                    }
                    i = _r1.length;
                    while (--i > -1) {
                        _r1[i] = Math.sqrt(_r1[i]);
                        _r2[i] = Math.sqrt(_r2[i]);
                    }
                    if (!basic) {
                        i = props.length;
                        while (--i > -1) {
                            if (_corProps[p]) {
                                a = obj[props[i]];
                                l = a.length - 1;
                                for (j = 0; j < l; j++) {
                                    r = (a[j+1].da / _r2[j] + a[j].da / _r1[j]) || 0;
                                    _r3[j] = (_r3[j] || 0) + r * r;
                                }
                            }
                        }
                        i = _r3.length;
                        while (--i > -1) {
                            _r3[i] = Math.sqrt(_r3[i]);
                        }
                    }
                    i = props.length;
                    j = quadratic ? 4 : 1;
                    while (--i > -1) {
                        p = props[i];
                        a = obj[p];
                        _calculateControlPoints(a, curviness, quadratic, basic, _corProps[p]); //this method requires that _parseAnchors() and _setSegmentRatios() ran first so that _r1, _r2, and _r3 values are populated for all properties
                        if (seamless) {
                            a.splice(0, j);
                            a.splice(a.length - j, j);
                        }
                    }
                    return obj;
                },
                _parseBezierData = function(values, type, prepend) {
                    type = type || "soft";
                    var obj = {},
                        inc = (type === "cubic") ? 3 : 2,
                        soft = (type === "soft"),
                        props = [],
                        a, b, c, d, cur, i, j, l, p, cnt, tmp;
                    if (soft && prepend) {
                        values = [prepend].concat(values);
                    }
                    if (values == null || values.length < inc + 1) { throw "invalid Bezier data"; }
                    for (p in values[0]) {
                        props.push(p);
                    }
                    i = props.length;
                    while (--i > -1) {
                        p = props[i];
                        obj[p] = cur = [];
                        cnt = 0;
                        l = values.length;
                        for (j = 0; j < l; j++) {
                            a = (prepend == null) ? values[j][p] : (typeof( (tmp = values[j][p]) ) === "string" && tmp.charAt(1) === "=") ? prepend[p] + Number(tmp.charAt(0) + tmp.substr(2)) : Number(tmp);
                            if (soft) if (j > 1) if (j < l - 1) {
                                cur[cnt++] = (a + cur[cnt-2]) / 2;
                            }
                            cur[cnt++] = a;
                        }
                        l = cnt - inc + 1;
                        cnt = 0;
                        for (j = 0; j < l; j += inc) {
                            a = cur[j];
                            b = cur[j+1];
                            c = cur[j+2];
                            d = (inc === 2) ? 0 : cur[j+3];
                            cur[cnt++] = tmp = (inc === 3) ? new Segment(a, b, c, d) : new Segment(a, (2 * b + a) / 3, (2 * b + c) / 3, c);
                        }
                        cur.length = cnt;
                    }
                    return obj;
                },
                _addCubicLengths = function(a, steps, resolution) {
                    var inc = 1 / resolution,
                        j = a.length,
                        d, d1, s, da, ca, ba, p, i, inv, bez, index;
                    while (--j > -1) {
                        bez = a[j];
                        s = bez.a;
                        da = bez.d - s;
                        ca = bez.c - s;
                        ba = bez.b - s;
                        d = d1 = 0;
                        for (i = 1; i <= resolution; i++) {
                            p = inc * i;
                            inv = 1 - p;
                            d = d1 - (d1 = (p * p * da + 3 * inv * (p * ca + inv * ba)) * p);
                            index = j * resolution + i - 1;
                            steps[index] = (steps[index] || 0) + d * d;
                        }
                    }
                },
                _parseLengthData = function(obj, resolution) {
                    resolution = resolution >> 0 || 6;
                    var a = [],
                        lengths = [],
                        d = 0,
                        total = 0,
                        threshold = resolution - 1,
                        segments = [],
                        curLS = [], //current length segments array
                        p, i, l, index;
                    for (p in obj) {
                        _addCubicLengths(obj[p], a, resolution);
                    }
                    l = a.length;
                    for (i = 0; i < l; i++) {
                        d += Math.sqrt(a[i]);
                        index = i % resolution;
                        curLS[index] = d;
                        if (index === threshold) {
                            total += d;
                            index = (i / resolution) >> 0;
                            segments[index] = curLS;
                            lengths[index] = total;
                            d = 0;
                            curLS = [];
                        }
                    }
                    return {length:total, lengths:lengths, segments:segments};
                },
    
    
    
                BezierPlugin = _gsScope._gsDefine.plugin({
                        propName: "bezier",
                        priority: -1,
                        version: "1.3.8",
                        API: 2,
                        global:true,
    
                        //gets called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.
                        init: function(target, vars, tween) {
                            this._target = target;
                            if (vars instanceof Array) {
                                vars = {values:vars};
                            }
                            this._func = {};
                            this._mod = {};
                            this._props = [];
                            this._timeRes = (vars.timeResolution == null) ? 6 : parseInt(vars.timeResolution, 10);
                            var values = vars.values || [],
                                first = {},
                                second = values[0],
                                autoRotate = vars.autoRotate || tween.vars.orientToBezier,
                                p, isFunc, i, j, prepend;
    
                            this._autoRotate = autoRotate ? (autoRotate instanceof Array) ? autoRotate : [["x","y","rotation",((autoRotate === true) ? 0 : Number(autoRotate) || 0)]] : null;
                            for (p in second) {
                                this._props.push(p);
                            }
    
                            i = this._props.length;
                            while (--i > -1) {
                                p = this._props[i];
    
                                this._overwriteProps.push(p);
                                isFunc = this._func[p] = (typeof(target[p]) === "function");
                                first[p] = (!isFunc) ? parseFloat(target[p]) : target[ ((p.indexOf("set") || typeof(target["get" + p.substr(3)]) !== "function") ? p : "get" + p.substr(3)) ]();
                                if (!prepend) if (first[p] !== values[0][p]) {
                                    prepend = first;
                                }
                            }
                            this._beziers = (vars.type !== "cubic" && vars.type !== "quadratic" && vars.type !== "soft") ? bezierThrough(values, isNaN(vars.curviness) ? 1 : vars.curviness, false, (vars.type === "thruBasic"), vars.correlate, prepend) : _parseBezierData(values, vars.type, first);
                            this._segCount = this._beziers[p].length;
    
                            if (this._timeRes) {
                                var ld = _parseLengthData(this._beziers, this._timeRes);
                                this._length = ld.length;
                                this._lengths = ld.lengths;
                                this._segments = ld.segments;
                                this._l1 = this._li = this._s1 = this._si = 0;
                                this._l2 = this._lengths[0];
                                this._curSeg = this._segments[0];
                                this._s2 = this._curSeg[0];
                                this._prec = 1 / this._curSeg.length;
                            }
    
                            if ((autoRotate = this._autoRotate)) {
                                this._initialRotations = [];
                                if (!(autoRotate[0] instanceof Array)) {
                                    this._autoRotate = autoRotate = [autoRotate];
                                }
                                i = autoRotate.length;
                                while (--i > -1) {
                                    for (j = 0; j < 3; j++) {
                                        p = autoRotate[i][j];
                                        this._func[p] = (typeof(target[p]) === "function") ? target[ ((p.indexOf("set") || typeof(target["get" + p.substr(3)]) !== "function") ? p : "get" + p.substr(3)) ] : false;
                                    }
                                    p = autoRotate[i][2];
                                    this._initialRotations[i] = (this._func[p] ? this._func[p].call(this._target) : this._target[p]) || 0;
                                    this._overwriteProps.push(p);
                                }
                            }
                            this._startRatio = tween.vars.runBackwards ? 1 : 0; //we determine the starting ratio when the tween inits which is always 0 unless the tween has runBackwards:true (indicating it's a from() tween) in which case it's 1.
                            return true;
                        },
    
                        //called each time the values should be updated, and the ratio gets passed as the only parameter (typically it's a value between 0 and 1, but it can exceed those when using an ease like Elastic.easeOut or Back.easeOut, etc.)
                        set: function(v) {
                            var segments = this._segCount,
                                func = this._func,
                                target = this._target,
                                notStart = (v !== this._startRatio),
                                curIndex, inv, i, p, b, t, val, l, lengths, curSeg;
                            if (!this._timeRes) {
                                curIndex = (v < 0) ? 0 : (v >= 1) ? segments - 1 : (segments * v) >> 0;
                                t = (v - (curIndex * (1 / segments))) * segments;
                            } else {
                                lengths = this._lengths;
                                curSeg = this._curSeg;
                                v *= this._length;
                                i = this._li;
                                //find the appropriate segment (if the currently cached one isn't correct)
                                if (v > this._l2 && i < segments - 1) {
                                    l = segments - 1;
                                    while (i < l && (this._l2 = lengths[++i]) <= v) {	}
                                    this._l1 = lengths[i-1];
                                    this._li = i;
                                    this._curSeg = curSeg = this._segments[i];
                                    this._s2 = curSeg[(this._s1 = this._si = 0)];
                                } else if (v < this._l1 && i > 0) {
                                    while (i > 0 && (this._l1 = lengths[--i]) >= v) { }
                                    if (i === 0 && v < this._l1) {
                                        this._l1 = 0;
                                    } else {
                                        i++;
                                    }
                                    this._l2 = lengths[i];
                                    this._li = i;
                                    this._curSeg = curSeg = this._segments[i];
                                    this._s1 = curSeg[(this._si = curSeg.length - 1) - 1] || 0;
                                    this._s2 = curSeg[this._si];
                                }
                                curIndex = i;
                                //now find the appropriate sub-segment (we split it into the number of pieces that was defined by "precision" and measured each one)
                                v -= this._l1;
                                i = this._si;
                                if (v > this._s2 && i < curSeg.length - 1) {
                                    l = curSeg.length - 1;
                                    while (i < l && (this._s2 = curSeg[++i]) <= v) {	}
                                    this._s1 = curSeg[i-1];
                                    this._si = i;
                                } else if (v < this._s1 && i > 0) {
                                    while (i > 0 && (this._s1 = curSeg[--i]) >= v) {	}
                                    if (i === 0 && v < this._s1) {
                                        this._s1 = 0;
                                    } else {
                                        i++;
                                    }
                                    this._s2 = curSeg[i];
                                    this._si = i;
                                }
                                t = ((i + (v - this._s1) / (this._s2 - this._s1)) * this._prec) || 0;
                            }
                            inv = 1 - t;
    
                            i = this._props.length;
                            while (--i > -1) {
                                p = this._props[i];
                                b = this._beziers[p][curIndex];
                                val = (t * t * b.da + 3 * inv * (t * b.ca + inv * b.ba)) * t + b.a;
                                if (this._mod[p]) {
                                    val = this._mod[p](val, target);
                                }
                                if (func[p]) {
                                    target[p](val);
                                } else {
                                    target[p] = val;
                                }
                            }
    
                            if (this._autoRotate) {
                                var ar = this._autoRotate,
                                    b2, x1, y1, x2, y2, add, conv;
                                i = ar.length;
                                while (--i > -1) {
                                    p = ar[i][2];
                                    add = ar[i][3] || 0;
                                    conv = (ar[i][4] === true) ? 1 : _RAD2DEG;
                                    b = this._beziers[ar[i][0]];
                                    b2 = this._beziers[ar[i][1]];
    
                                    if (b && b2) { //in case one of the properties got overwritten.
                                        b = b[curIndex];
                                        b2 = b2[curIndex];
    
                                        x1 = b.a + (b.b - b.a) * t;
                                        x2 = b.b + (b.c - b.b) * t;
                                        x1 += (x2 - x1) * t;
                                        x2 += ((b.c + (b.d - b.c) * t) - x2) * t;
    
                                        y1 = b2.a + (b2.b - b2.a) * t;
                                        y2 = b2.b + (b2.c - b2.b) * t;
                                        y1 += (y2 - y1) * t;
                                        y2 += ((b2.c + (b2.d - b2.c) * t) - y2) * t;
    
                                        val = notStart ? Math.atan2(y2 - y1, x2 - x1) * conv + add : this._initialRotations[i];
    
                                        if (this._mod[p]) {
                                            val = this._mod[p](val, target); //for modProps
                                        }
    
                                        if (func[p]) {
                                            target[p](val);
                                        } else {
                                            target[p] = val;
                                        }
                                    }
                                }
                            }
                        }
                }),
                p = BezierPlugin.prototype;
    
    
            BezierPlugin.bezierThrough = bezierThrough;
            BezierPlugin.cubicToQuadratic = cubicToQuadratic;
            BezierPlugin._autoCSS = true; //indicates that this plugin can be inserted into the "css" object using the autoCSS feature of TweenLite
            BezierPlugin.quadraticToCubic = function(a, b, c) {
                return new Segment(a, (2 * b + a) / 3, (2 * b + c) / 3, c);
            };
    
            BezierPlugin._cssRegister = function() {
                var CSSPlugin = _globals.CSSPlugin;
                if (!CSSPlugin) {
                    return;
                }
                var _internals = CSSPlugin._internals,
                    _parseToProxy = _internals._parseToProxy,
                    _setPluginRatio = _internals._setPluginRatio,
                    CSSPropTween = _internals.CSSPropTween;
                _internals._registerComplexSpecialProp("bezier", {parser:function(t, e, prop, cssp, pt, plugin) {
                    if (e instanceof Array) {
                        e = {values:e};
                    }
                    plugin = new BezierPlugin();
                    var values = e.values,
                        l = values.length - 1,
                        pluginValues = [],
                        v = {},
                        i, p, data;
                    if (l < 0) {
                        return pt;
                    }
                    for (i = 0; i <= l; i++) {
                        data = _parseToProxy(t, values[i], cssp, pt, plugin, (l !== i));
                        pluginValues[i] = data.end;
                    }
                    for (p in e) {
                        v[p] = e[p]; //duplicate the vars object because we need to alter some things which would cause problems if the user plans to reuse the same vars object for another tween.
                    }
                    v.values = pluginValues;
                    pt = new CSSPropTween(t, "bezier", 0, 0, data.pt, 2);
                    pt.data = data;
                    pt.plugin = plugin;
                    pt.setRatio = _setPluginRatio;
                    if (v.autoRotate === 0) {
                        v.autoRotate = true;
                    }
                    if (v.autoRotate && !(v.autoRotate instanceof Array)) {
                        i = (v.autoRotate === true) ? 0 : Number(v.autoRotate);
                        v.autoRotate = (data.end.left != null) ? [["left","top","rotation",i,false]] : (data.end.x != null) ? [["x","y","rotation",i,false]] : false;
                    }
                    if (v.autoRotate) {
                        if (!cssp._transform) {
                            cssp._enableTransforms(false);
                        }
                        data.autoRotate = cssp._target._gsTransform;
                        data.proxy.rotation = data.autoRotate.rotation || 0;
                        cssp._overwriteProps.push("rotation");
                    }
                    plugin._onInitTween(data.proxy, v, cssp._tween);
                    return pt;
                }});
            };
    
            p._mod = function(lookup) {
                var op = this._overwriteProps,
                    i = op.length,
                    val;
                while (--i > -1) {
                    val = lookup[op[i]];
                    if (val && typeof(val) === "function") {
                        this._mod[op[i]] = val;
                    }
                }
            };
    
            p._kill = function(lookup) {
                var a = this._props,
                    p, i;
                for (p in this._beziers) {
                    if (p in lookup) {
                        delete this._beziers[p];
                        delete this._func[p];
                        i = a.length;
                        while (--i > -1) {
                            if (a[i] === p) {
                                a.splice(i, 1);
                            }
                        }
                    }
                }
                a = this._autoRotate;
                if (a) {
                    i = a.length;
                    while (--i > -1) {
                        if (lookup[a[i][2]]) {
                            a.splice(i, 1);
                        }
                    }
                }
                return this._super._kill.call(this, lookup);
            };
    
        }());
    
    
    
    
    
    
        
        
        
        
        
        
        
        
    /*
     * ----------------------------------------------------------------
     * CSSPlugin
     * ----------------------------------------------------------------
     */
        _gsScope._gsDefine("plugins.CSSPlugin", ["plugins.TweenPlugin","TweenLite"], function(TweenPlugin, TweenLite) {
    
            /** @constructor **/
            var CSSPlugin = function() {
                    TweenPlugin.call(this, "css");
                    this._overwriteProps.length = 0;
                    this.setRatio = CSSPlugin.prototype.setRatio; //speed optimization (avoid prototype lookup on this "hot" method)
                },
                _globals = _gsScope._gsDefine.globals,
                _hasPriority, //turns true whenever a CSSPropTween instance is created that has a priority other than 0. This helps us discern whether or not we should spend the time organizing the linked list or not after a CSSPlugin's _onInitTween() method is called.
                _suffixMap, //we set this in _onInitTween() each time as a way to have a persistent variable we can use in other methods like _parse() without having to pass it around as a parameter and we keep _parse() decoupled from a particular CSSPlugin instance
                _cs, //computed style (we store this in a shared variable to conserve memory and make minification tighter
                _overwriteProps, //alias to the currently instantiating CSSPlugin's _overwriteProps array. We use this closure in order to avoid having to pass a reference around from method to method and aid in minification.
                _specialProps = {},
                p = CSSPlugin.prototype = new TweenPlugin("css");
    
            p.constructor = CSSPlugin;
            CSSPlugin.version = "1.20.0";
            CSSPlugin.API = 2;
            CSSPlugin.defaultTransformPerspective = 0;
            CSSPlugin.defaultSkewType = "compensated";
            CSSPlugin.defaultSmoothOrigin = true;
            p = "px"; //we'll reuse the "p" variable to keep file size down
            CSSPlugin.suffixMap = {top:p, right:p, bottom:p, left:p, width:p, height:p, fontSize:p, padding:p, margin:p, perspective:p, lineHeight:""};
    
    
            var _numExp = /(?:\-|\.|\b)(\d|\.|e\-)+/g,
                _relNumExp = /(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g,
                _valuesExp = /(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi, //finds all the values that begin with numbers or += or -= and then a number. Includes suffixes. We use this to split complex values apart like "1px 5px 20px rgb(255,102,51)"
                _NaNExp = /(?![+-]?\d*\.?\d+|[+-]|e[+-]\d+)[^0-9]/g, //also allows scientific notation and doesn't kill the leading -/+ in -= and +=
                _suffixExp = /(?:\d|\-|\+|=|#|\.)*/g,
                _opacityExp = /opacity *= *([^)]*)/i,
                _opacityValExp = /opacity:([^;]*)/i,
                _alphaFilterExp = /alpha\(opacity *=.+?\)/i,
                _rgbhslExp = /^(rgb|hsl)/,
                _capsExp = /([A-Z])/g,
                _camelExp = /-([a-z])/gi,
                _urlExp = /(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi, //for pulling out urls from url(...) or url("...") strings (some browsers wrap urls in quotes, some don't when reporting things like backgroundImage)
                _camelFunc = function(s, g) { return g.toUpperCase(); },
                _horizExp = /(?:Left|Right|Width)/i,
                _ieGetMatrixExp = /(M11|M12|M21|M22)=[\d\-\.e]+/gi,
                _ieSetMatrixExp = /progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i,
                _commasOutsideParenExp = /,(?=[^\)]*(?:\(|$))/gi, //finds any commas that are not within parenthesis
                _complexExp = /[\s,\(]/i, //for testing a string to find if it has a space, comma, or open parenthesis (clues that it's a complex value)
                _DEG2RAD = Math.PI / 180,
                _RAD2DEG = 180 / Math.PI,
                _forcePT = {},
                _dummyElement = {style:{}},
                _doc = _gsScope.document || {createElement: function() {return _dummyElement;}},
                _createElement = function(type, ns) {
                    return _doc.createElementNS ? _doc.createElementNS(ns || "http://www.w3.org/1999/xhtml", type) : _doc.createElement(type);
                },
                _tempDiv = _createElement("div"),
                _tempImg = _createElement("img"),
                _internals = CSSPlugin._internals = {_specialProps:_specialProps}, //provides a hook to a few internal methods that we need to access from inside other plugins
                _agent = (_gsScope.navigator || {}).userAgent || "",
                _autoRound,
                _reqSafariFix, //we won't apply the Safari transform fix until we actually come across a tween that affects a transform property (to maintain best performance).
    
                _isSafari,
                _isFirefox, //Firefox has a bug that causes 3D transformed elements to randomly disappear unless a repaint is forced after each update on each element.
                _isSafariLT6, //Safari (and Android 4 which uses a flavor of Safari) has a bug that prevents changes to "top" and "left" properties from rendering properly if changed on the same frame as a transform UNLESS we set the element's WebkitBackfaceVisibility to hidden (weird, I know). Doing this for Android 3 and earlier seems to actually cause other problems, though (fun!)
                _ieVers,
                _supportsOpacity = (function() { //we set _isSafari, _ieVers, _isFirefox, and _supportsOpacity all in one function here to reduce file size slightly, especially in the minified version.
                    var i = _agent.indexOf("Android"),
                        a = _createElement("a");
                    _isSafari = (_agent.indexOf("Safari") !== -1 && _agent.indexOf("Chrome") === -1 && (i === -1 || parseFloat(_agent.substr(i+8, 2)) > 3));
                    _isSafariLT6 = (_isSafari && (parseFloat(_agent.substr(_agent.indexOf("Version/")+8, 2)) < 6));
                    _isFirefox = (_agent.indexOf("Firefox") !== -1);
                    if ((/MSIE ([0-9]{1,}[\.0-9]{0,})/).exec(_agent) || (/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/).exec(_agent)) {
                        _ieVers = parseFloat( RegExp.$1 );
                    }
                    if (!a) {
                        return false;
                    }
                    a.style.cssText = "top:1px;opacity:.55;";
                    return /^0.55/.test(a.style.opacity);
                }()),
                _getIEOpacity = function(v) {
                    return (_opacityExp.test( ((typeof(v) === "string") ? v : (v.currentStyle ? v.currentStyle.filter : v.style.filter) || "") ) ? ( parseFloat( RegExp.$1 ) / 100 ) : 1);
                },
                _log = function(s) {//for logging messages, but in a way that won't throw errors in old versions of IE.
                    if (_gsScope.console) {
                        console.log(s);
                    }
                },
                _target, //when initting a CSSPlugin, we set this variable so that we can access it from within many other functions without having to pass it around as params
                _index, //when initting a CSSPlugin, we set this variable so that we can access it from within many other functions without having to pass it around as params
    
                _prefixCSS = "", //the non-camelCase vendor prefix like "-o-", "-moz-", "-ms-", or "-webkit-"
                _prefix = "", //camelCase vendor prefix like "O", "ms", "Webkit", or "Moz".
    
                // @private feed in a camelCase property name like "transform" and it will check to see if it is valid as-is or if it needs a vendor prefix. It returns the corrected camelCase property name (i.e. "WebkitTransform" or "MozTransform" or "transform" or null if no such property is found, like if the browser is IE8 or before, "transform" won't be found at all)
                _checkPropPrefix = function(p, e) {
                    e = e || _tempDiv;
                    var s = e.style,
                        a, i;
                    if (s[p] !== undefined) {
                        return p;
                    }
                    p = p.charAt(0).toUpperCase() + p.substr(1);
                    a = ["O","Moz","ms","Ms","Webkit"];
                    i = 5;
                    while (--i > -1 && s[a[i]+p] === undefined) { }
                    if (i >= 0) {
                        _prefix = (i === 3) ? "ms" : a[i];
                        _prefixCSS = "-" + _prefix.toLowerCase() + "-";
                        return _prefix + p;
                    }
                    return null;
                },
    
                _getComputedStyle = _doc.defaultView ? _doc.defaultView.getComputedStyle : function() {},
    
                /**
                 * @private Returns the css style for a particular property of an element. For example, to get whatever the current "left" css value for an element with an ID of "myElement", you could do:
                 * var currentLeft = CSSPlugin.getStyle( document.getElementById("myElement"), "left");
                 *
                 * @param {!Object} t Target element whose style property you want to query
                 * @param {!string} p Property name (like "left" or "top" or "marginTop", etc.)
                 * @param {Object=} cs Computed style object. This just provides a way to speed processing if you're going to get several properties on the same element in quick succession - you can reuse the result of the getComputedStyle() call.
                 * @param {boolean=} calc If true, the value will not be read directly from the element's "style" property (if it exists there), but instead the getComputedStyle() result will be used. This can be useful when you want to ensure that the browser itself is interpreting the value.
                 * @param {string=} dflt Default value that should be returned in the place of null, "none", "auto" or "auto auto".
                 * @return {?string} The current property value
                 */
                _getStyle = CSSPlugin.getStyle = function(t, p, cs, calc, dflt) {
                    var rv;
                    if (!_supportsOpacity) if (p === "opacity") { //several versions of IE don't use the standard "opacity" property - they use things like filter:alpha(opacity=50), so we parse that here.
                        return _getIEOpacity(t);
                    }
                    if (!calc && t.style[p]) {
                        rv = t.style[p];
                    } else if ((cs = cs || _getComputedStyle(t))) {
                        rv = cs[p] || cs.getPropertyValue(p) || cs.getPropertyValue(p.replace(_capsExp, "-$1").toLowerCase());
                    } else if (t.currentStyle) {
                        rv = t.currentStyle[p];
                    }
                    return (dflt != null && (!rv || rv === "none" || rv === "auto" || rv === "auto auto")) ? dflt : rv;
                },
    
                /**
                 * @private Pass the target element, the property name, the numeric value, and the suffix (like "%", "em", "px", etc.) and it will spit back the equivalent pixel number.
                 * @param {!Object} t Target element
                 * @param {!string} p Property name (like "left", "top", "marginLeft", etc.)
                 * @param {!number} v Value
                 * @param {string=} sfx Suffix (like "px" or "%" or "em")
                 * @param {boolean=} recurse If true, the call is a recursive one. In some browsers (like IE7/8), occasionally the value isn't accurately reported initially, but if we run the function again it will take effect.
                 * @return {number} value in pixels
                 */
                _convertToPixels = _internals.convertToPixels = function(t, p, v, sfx, recurse) {
                    if (sfx === "px" || (!sfx && p !== "lineHeight")) { return v; }
                    if (sfx === "auto" || !v) { return 0; }
                    var horiz = _horizExp.test(p),
                        node = t,
                        style = _tempDiv.style,
                        neg = (v < 0),
                        precise = (v === 1),
                        pix, cache, time;
                    if (neg) {
                        v = -v;
                    }
                    if (precise) {
                        v *= 100;
                    }
                    if (p === "lineHeight" && !sfx) { //special case of when a simple lineHeight (without a unit) is used. Set it to the value, read back the computed value, and then revert.
                        cache = _getComputedStyle(t).lineHeight;
                        t.style.lineHeight = v;
                        pix = parseFloat(_getComputedStyle(t).lineHeight);
                        t.style.lineHeight = cache;
                    } else if (sfx === "%" && p.indexOf("border") !== -1) {
                        pix = (v / 100) * (horiz ? t.clientWidth : t.clientHeight);
                    } else {
                        style.cssText = "border:0 solid red;position:" + _getStyle(t, "position") + ";line-height:0;";
                        if (sfx === "%" || !node.appendChild || sfx.charAt(0) === "v" || sfx === "rem") {
                            node = t.parentNode || _doc.body;
                            if (_getStyle(node, "display").indexOf("flex") !== -1) { //Edge and IE11 have a bug that causes offsetWidth to report as 0 if the container has display:flex and the child is position:relative. Switching to position: absolute solves it.
                                style.position = "absolute";
                            }
                            cache = node._gsCache;
                            time = TweenLite.ticker.frame;
                            if (cache && horiz && cache.time === time) { //performance optimization: we record the width of elements along with the ticker frame so that we can quickly get it again on the same tick (seems relatively safe to assume it wouldn't change on the same tick)
                                return cache.width * v / 100;
                            }
                            style[(horiz ? "width" : "height")] = v + sfx;
                        } else {
                            style[(horiz ? "borderLeftWidth" : "borderTopWidth")] = v + sfx;
                        }
                        node.appendChild(_tempDiv);
                        pix = parseFloat(_tempDiv[(horiz ? "offsetWidth" : "offsetHeight")]);
                        node.removeChild(_tempDiv);
                        if (horiz && sfx === "%" && CSSPlugin.cacheWidths !== false) {
                            cache = node._gsCache = node._gsCache || {};
                            cache.time = time;
                            cache.width = pix / v * 100;
                        }
                        if (pix === 0 && !recurse) {
                            pix = _convertToPixels(t, p, v, sfx, true);
                        }
                    }
                    if (precise) {
                        pix /= 100;
                    }
                    return neg ? -pix : pix;
                },
                _calculateOffset = _internals.calculateOffset = function(t, p, cs) { //for figuring out "top" or "left" in px when it's "auto". We need to factor in margin with the offsetLeft/offsetTop
                    if (_getStyle(t, "position", cs) !== "absolute") { return 0; }
                    var dim = ((p === "left") ? "Left" : "Top"),
                        v = _getStyle(t, "margin" + dim, cs);
                    return t["offset" + dim] - (_convertToPixels(t, p, parseFloat(v), v.replace(_suffixExp, "")) || 0);
                },
    
                // @private returns at object containing ALL of the style properties in camelCase and their associated values.
                _getAllStyles = function(t, cs) {
                    var s = {},
                        i, tr, p;
                    if ((cs = cs || _getComputedStyle(t, null))) {
                        if ((i = cs.length)) {
                            while (--i > -1) {
                                p = cs[i];
                                if (p.indexOf("-transform") === -1 || _transformPropCSS === p) { //Some webkit browsers duplicate transform values, one non-prefixed and one prefixed ("transform" and "WebkitTransform"), so we must weed out the extra one here.
                                    s[p.replace(_camelExp, _camelFunc)] = cs.getPropertyValue(p);
                                }
                            }
                        } else { //some browsers behave differently - cs.length is always 0, so we must do a for...in loop.
                            for (i in cs) {
                                if (i.indexOf("Transform") === -1 || _transformProp === i) { //Some webkit browsers duplicate transform values, one non-prefixed and one prefixed ("transform" and "WebkitTransform"), so we must weed out the extra one here.
                                    s[i] = cs[i];
                                }
                            }
                        }
                    } else if ((cs = t.currentStyle || t.style)) {
                        for (i in cs) {
                            if (typeof(i) === "string" && s[i] === undefined) {
                                s[i.replace(_camelExp, _camelFunc)] = cs[i];
                            }
                        }
                    }
                    if (!_supportsOpacity) {
                        s.opacity = _getIEOpacity(t);
                    }
                    tr = _getTransform(t, cs, false);
                    s.rotation = tr.rotation;
                    s.skewX = tr.skewX;
                    s.scaleX = tr.scaleX;
                    s.scaleY = tr.scaleY;
                    s.x = tr.x;
                    s.y = tr.y;
                    if (_supports3D) {
                        s.z = tr.z;
                        s.rotationX = tr.rotationX;
                        s.rotationY = tr.rotationY;
                        s.scaleZ = tr.scaleZ;
                    }
                    if (s.filters) {
                        delete s.filters;
                    }
                    return s;
                },
    
                // @private analyzes two style objects (as returned by _getAllStyles()) and only looks for differences between them that contain tweenable values (like a number or color). It returns an object with a "difs" property which refers to an object containing only those isolated properties and values for tweening, and a "firstMPT" property which refers to the first MiniPropTween instance in a linked list that recorded all the starting values of the different properties so that we can revert to them at the end or beginning of the tween - we don't want the cascading to get messed up. The forceLookup parameter is an optional generic object with properties that should be forced into the results - this is necessary for className tweens that are overwriting others because imagine a scenario where a rollover/rollout adds/removes a class and the user swipes the mouse over the target SUPER fast, thus nothing actually changed yet and the subsequent comparison of the properties would indicate they match (especially when px rounding is taken into consideration), thus no tweening is necessary even though it SHOULD tween and remove those properties after the tween (otherwise the inline styles will contaminate things). See the className SpecialProp code for details.
                _cssDif = function(t, s1, s2, vars, forceLookup) {
                    var difs = {},
                        style = t.style,
                        val, p, mpt;
                    for (p in s2) {
                        if (p !== "cssText") if (p !== "length") if (isNaN(p)) if (s1[p] !== (val = s2[p]) || (forceLookup && forceLookup[p])) if (p.indexOf("Origin") === -1) if (typeof(val) === "number" || typeof(val) === "string") {
                            difs[p] = (val === "auto" && (p === "left" || p === "top")) ? _calculateOffset(t, p) : ((val === "" || val === "auto" || val === "none") && typeof(s1[p]) === "string" && s1[p].replace(_NaNExp, "") !== "") ? 0 : val; //if the ending value is defaulting ("" or "auto"), we check the starting value and if it can be parsed into a number (a string which could have a suffix too, like 700px), then we swap in 0 for "" or "auto" so that things actually tween.
                            if (style[p] !== undefined) { //for className tweens, we must remember which properties already existed inline - the ones that didn't should be removed when the tween isn't in progress because they were only introduced to facilitate the transition between classes.
                                mpt = new MiniPropTween(style, p, style[p], mpt);
                            }
                        }
                    }
                    if (vars) {
                        for (p in vars) { //copy properties (except className)
                            if (p !== "className") {
                                difs[p] = vars[p];
                            }
                        }
                    }
                    return {difs:difs, firstMPT:mpt};
                },
                _dimensions = {width:["Left","Right"], height:["Top","Bottom"]},
                _margins = ["marginLeft","marginRight","marginTop","marginBottom"],
    
                /**
                 * @private Gets the width or height of an element
                 * @param {!Object} t Target element
                 * @param {!string} p Property name ("width" or "height")
                 * @param {Object=} cs Computed style object (if one exists). Just a speed optimization.
                 * @return {number} Dimension (in pixels)
                 */
                _getDimension = function(t, p, cs) {
                    if ((t.nodeName + "").toLowerCase() === "svg") { //Chrome no longer supports offsetWidth/offsetHeight on SVG elements.
                        return (cs || _getComputedStyle(t))[p] || 0;
                    } else if (t.getCTM && _isSVG(t)) {
                        return t.getBBox()[p] || 0;
                    }
                    var v = parseFloat((p === "width") ? t.offsetWidth : t.offsetHeight),
                        a = _dimensions[p],
                        i = a.length;
                    cs = cs || _getComputedStyle(t, null);
                    while (--i > -1) {
                        v -= parseFloat( _getStyle(t, "padding" + a[i], cs, true) ) || 0;
                        v -= parseFloat( _getStyle(t, "border" + a[i] + "Width", cs, true) ) || 0;
                    }
                    return v;
                },
    
                // @private Parses position-related complex strings like "top left" or "50px 10px" or "70% 20%", etc. which are used for things like transformOrigin or backgroundPosition. Optionally decorates a supplied object (recObj) with the following properties: "ox" (offsetX), "oy" (offsetY), "oxp" (if true, "ox" is a percentage not a pixel value), and "oxy" (if true, "oy" is a percentage not a pixel value)
                _parsePosition = function(v, recObj) {
                    if (v === "contain" || v === "auto" || v === "auto auto") { //note: Firefox uses "auto auto" as default whereas Chrome uses "auto".
                        return v + " ";
                    }
                    if (v == null || v === "") {
                        v = "0 0";
                    }
                    var a = v.split(" "),
                        x = (v.indexOf("left") !== -1) ? "0%" : (v.indexOf("right") !== -1) ? "100%" : a[0],
                        y = (v.indexOf("top") !== -1) ? "0%" : (v.indexOf("bottom") !== -1) ? "100%" : a[1],
                        i;
                    if (a.length > 3 && !recObj) { //multiple positions
                        a = v.split(", ").join(",").split(",");
                        v = [];
                        for (i = 0; i < a.length; i++) {
                            v.push(_parsePosition(a[i]));
                        }
                        return v.join(",");
                    }
                    if (y == null) {
                        y = (x === "center") ? "50%" : "0";
                    } else if (y === "center") {
                        y = "50%";
                    }
                    if (x === "center" || (isNaN(parseFloat(x)) && (x + "").indexOf("=") === -1)) { //remember, the user could flip-flop the values and say "bottom center" or "center bottom", etc. "center" is ambiguous because it could be used to describe horizontal or vertical, hence the isNaN(). If there's an "=" sign in the value, it's relative.
                        x = "50%";
                    }
                    v = x + " " + y + ((a.length > 2) ? " " + a[2] : "");
                    if (recObj) {
                        recObj.oxp = (x.indexOf("%") !== -1);
                        recObj.oyp = (y.indexOf("%") !== -1);
                        recObj.oxr = (x.charAt(1) === "=");
                        recObj.oyr = (y.charAt(1) === "=");
                        recObj.ox = parseFloat(x.replace(_NaNExp, ""));
                        recObj.oy = parseFloat(y.replace(_NaNExp, ""));
                        recObj.v = v;
                    }
                    return recObj || v;
                },
    
                /**
                 * @private Takes an ending value (typically a string, but can be a number) and a starting value and returns the change between the two, looking for relative value indicators like += and -= and it also ignores suffixes (but make sure the ending value starts with a number or +=/-= and that the starting value is a NUMBER!)
                 * @param {(number|string)} e End value which is typically a string, but could be a number
                 * @param {(number|string)} b Beginning value which is typically a string but could be a number
                 * @return {number} Amount of change between the beginning and ending values (relative values that have a "+=" or "-=" are recognized)
                 */
                _parseChange = function(e, b) {
                    if (typeof(e) === "function") {
                        e = e(_index, _target);
                    }
                    return (typeof(e) === "string" && e.charAt(1) === "=") ? parseInt(e.charAt(0) + "1", 10) * parseFloat(e.substr(2)) : (parseFloat(e) - parseFloat(b)) || 0;
                },
    
                /**
                 * @private Takes a value and a default number, checks if the value is relative, null, or numeric and spits back a normalized number accordingly. Primarily used in the _parseTransform() function.
                 * @param {Object} v Value to be parsed
                 * @param {!number} d Default value (which is also used for relative calculations if "+=" or "-=" is found in the first parameter)
                 * @return {number} Parsed value
                 */
                _parseVal = function(v, d) {
                    if (typeof(v) === "function") {
                        v = v(_index, _target);
                    }
                    return (v == null) ? d : (typeof(v) === "string" && v.charAt(1) === "=") ? parseInt(v.charAt(0) + "1", 10) * parseFloat(v.substr(2)) + d : parseFloat(v) || 0;
                },
    
                /**
                 * @private Translates strings like "40deg" or "40" or 40rad" or "+=40deg" or "270_short" or "-90_cw" or "+=45_ccw" to a numeric radian angle. Of course a starting/default value must be fed in too so that relative values can be calculated properly.
                 * @param {Object} v Value to be parsed
                 * @param {!number} d Default value (which is also used for relative calculations if "+=" or "-=" is found in the first parameter)
                 * @param {string=} p property name for directionalEnd (optional - only used when the parsed value is directional ("_short", "_cw", or "_ccw" suffix). We need a way to store the uncompensated value so that at the end of the tween, we set it to exactly what was requested with no directional compensation). Property name would be "rotation", "rotationX", or "rotationY"
                 * @param {Object=} directionalEnd An object that will store the raw end values for directional angles ("_short", "_cw", or "_ccw" suffix). We need a way to store the uncompensated value so that at the end of the tween, we set it to exactly what was requested with no directional compensation.
                 * @return {number} parsed angle in radians
                 */
                _parseAngle = function(v, d, p, directionalEnd) {
                    var min = 0.000001,
                        cap, split, dif, result, isRelative;
                    if (typeof(v) === "function") {
                        v = v(_index, _target);
                    }
                    if (v == null) {
                        result = d;
                    } else if (typeof(v) === "number") {
                        result = v;
                    } else {
                        cap = 360;
                        split = v.split("_");
                        isRelative = (v.charAt(1) === "=");
                        dif = (isRelative ? parseInt(v.charAt(0) + "1", 10) * parseFloat(split[0].substr(2)) : parseFloat(split[0])) * ((v.indexOf("rad") === -1) ? 1 : _RAD2DEG) - (isRelative ? 0 : d);
                        if (split.length) {
                            if (directionalEnd) {
                                directionalEnd[p] = d + dif;
                            }
                            if (v.indexOf("short") !== -1) {
                                dif = dif % cap;
                                if (dif !== dif % (cap / 2)) {
                                    dif = (dif < 0) ? dif + cap : dif - cap;
                                }
                            }
                            if (v.indexOf("_cw") !== -1 && dif < 0) {
                                dif = ((dif + cap * 9999999999) % cap) - ((dif / cap) | 0) * cap;
                            } else if (v.indexOf("ccw") !== -1 && dif > 0) {
                                dif = ((dif - cap * 9999999999) % cap) - ((dif / cap) | 0) * cap;
                            }
                        }
                        result = d + dif;
                    }
                    if (result < min && result > -min) {
                        result = 0;
                    }
                    return result;
                },
    
                _colorLookup = {aqua:[0,255,255],
                    lime:[0,255,0],
                    silver:[192,192,192],
                    black:[0,0,0],
                    maroon:[128,0,0],
                    teal:[0,128,128],
                    blue:[0,0,255],
                    navy:[0,0,128],
                    white:[255,255,255],
                    fuchsia:[255,0,255],
                    olive:[128,128,0],
                    yellow:[255,255,0],
                    orange:[255,165,0],
                    gray:[128,128,128],
                    purple:[128,0,128],
                    green:[0,128,0],
                    red:[255,0,0],
                    pink:[255,192,203],
                    cyan:[0,255,255],
                    transparent:[255,255,255,0]},
    
                _hue = function(h, m1, m2) {
                    h = (h < 0) ? h + 1 : (h > 1) ? h - 1 : h;
                    return ((((h * 6 < 1) ? m1 + (m2 - m1) * h * 6 : (h < 0.5) ? m2 : (h * 3 < 2) ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * 255) + 0.5) | 0;
                },
    
                /**
                 * @private Parses a color (like #9F0, #FF9900, rgb(255,51,153) or hsl(108, 50%, 10%)) into an array with 3 elements for red, green, and blue or if toHSL parameter is true, it will populate the array with hue, saturation, and lightness values. If a relative value is found in an hsl() or hsla() string, it will preserve those relative prefixes and all the values in the array will be strings instead of numbers (in all other cases it will be populated with numbers).
                 * @param {(string|number)} v The value the should be parsed which could be a string like #9F0 or rgb(255,102,51) or rgba(255,0,0,0.5) or it could be a number like 0xFF00CC or even a named color like red, blue, purple, etc.
                 * @param {(boolean)} toHSL If true, an hsl() or hsla() value will be returned instead of rgb() or rgba()
                 * @return {Array.<number>} An array containing red, green, and blue (and optionally alpha) in that order, or if the toHSL parameter was true, the array will contain hue, saturation and lightness (and optionally alpha) in that order. Always numbers unless there's a relative prefix found in an hsl() or hsla() string and toHSL is true.
                 */
                _parseColor = CSSPlugin.parseColor = function(v, toHSL) {
                    var a, r, g, b, h, s, l, max, min, d, wasHSL;
                    if (!v) {
                        a = _colorLookup.black;
                    } else if (typeof(v) === "number") {
                        a = [v >> 16, (v >> 8) & 255, v & 255];
                    } else {
                        if (v.charAt(v.length - 1) === ",") { //sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)" - in this example "blue," has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.
                            v = v.substr(0, v.length - 1);
                        }
                        if (_colorLookup[v]) {
                            a = _colorLookup[v];
                        } else if (v.charAt(0) === "#") {
                            if (v.length === 4) { //for shorthand like #9F0
                                r = v.charAt(1);
                                g = v.charAt(2);
                                b = v.charAt(3);
                                v = "#" + r + r + g + g + b + b;
                            }
                            v = parseInt(v.substr(1), 16);
                            a = [v >> 16, (v >> 8) & 255, v & 255];
                        } else if (v.substr(0, 3) === "hsl") {
                            a = wasHSL = v.match(_numExp);
                            if (!toHSL) {
                                h = (Number(a[0]) % 360) / 360;
                                s = Number(a[1]) / 100;
                                l = Number(a[2]) / 100;
                                g = (l <= 0.5) ? l * (s + 1) : l + s - l * s;
                                r = l * 2 - g;
                                if (a.length > 3) {
                                    a[3] = Number(v[3]);
                                }
                                a[0] = _hue(h + 1 / 3, r, g);
                                a[1] = _hue(h, r, g);
                                a[2] = _hue(h - 1 / 3, r, g);
                            } else if (v.indexOf("=") !== -1) { //if relative values are found, just return the raw strings with the relative prefixes in place.
                                return v.match(_relNumExp);
                            }
                        } else {
                            a = v.match(_numExp) || _colorLookup.transparent;
                        }
                        a[0] = Number(a[0]);
                        a[1] = Number(a[1]);
                        a[2] = Number(a[2]);
                        if (a.length > 3) {
                            a[3] = Number(a[3]);
                        }
                    }
                    if (toHSL && !wasHSL) {
                        r = a[0] / 255;
                        g = a[1] / 255;
                        b = a[2] / 255;
                        max = Math.max(r, g, b);
                        min = Math.min(r, g, b);
                        l = (max + min) / 2;
                        if (max === min) {
                            h = s = 0;
                        } else {
                            d = max - min;
                            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
                            h = (max === r) ? (g - b) / d + (g < b ? 6 : 0) : (max === g) ? (b - r) / d + 2 : (r - g) / d + 4;
                            h *= 60;
                        }
                        a[0] = (h + 0.5) | 0;
                        a[1] = (s * 100 + 0.5) | 0;
                        a[2] = (l * 100 + 0.5) | 0;
                    }
                    return a;
                },
                _formatColors = function(s, toHSL) {
                    var colors = s.match(_colorExp) || [],
                        charIndex = 0,
                        parsed = "",
                        i, color, temp;
                    if (!colors.length) {
                        return s;
                    }
                    for (i = 0; i < colors.length; i++) {
                        color = colors[i];
                        temp = s.substr(charIndex, s.indexOf(color, charIndex)-charIndex);
                        charIndex += temp.length + color.length;
                        color = _parseColor(color, toHSL);
                        if (color.length === 3) {
                            color.push(1);
                        }
                        parsed += temp + (toHSL ? "hsla(" + color[0] + "," + color[1] + "%," + color[2] + "%," + color[3] : "rgba(" + color.join(",")) + ")";
                    }
                    return parsed + s.substr(charIndex);
                },
                _colorExp = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b"; //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.
    
            for (p in _colorLookup) {
                _colorExp += "|" + p + "\\b";
            }
            _colorExp = new RegExp(_colorExp+")", "gi");
    
            CSSPlugin.colorStringFilter = function(a) {
                var combined = a[0] + " " + a[1],
                    toHSL;
                if (_colorExp.test(combined)) {
                    toHSL = (combined.indexOf("hsl(") !== -1 || combined.indexOf("hsla(") !== -1);
                    a[0] = _formatColors(a[0], toHSL);
                    a[1] = _formatColors(a[1], toHSL);
                }
                _colorExp.lastIndex = 0;
            };
    
            if (!TweenLite.defaultStringFilter) {
                TweenLite.defaultStringFilter = CSSPlugin.colorStringFilter;
            }
    
            /**
             * @private Returns a formatter function that handles taking a string (or number in some cases) and returning a consistently formatted one in terms of delimiters, quantity of values, etc. For example, we may get boxShadow values defined as "0px red" or "0px 0px 10px rgb(255,0,0)" or "0px 0px 20px 20px #F00" and we need to ensure that what we get back is described with 4 numbers and a color. This allows us to feed it into the _parseComplex() method and split the values up appropriately. The neat thing about this _getFormatter() function is that the dflt defines a pattern as well as a default, so for example, _getFormatter("0px 0px 0px 0px #777", true) not only sets the default as 0px for all distances and #777 for the color, but also sets the pattern such that 4 numbers and a color will always get returned.
             * @param {!string} dflt The default value and pattern to follow. So "0px 0px 0px 0px #777" will ensure that 4 numbers and a color will always get returned.
             * @param {boolean=} clr If true, the values should be searched for color-related data. For example, boxShadow values typically contain a color whereas borderRadius don't.
             * @param {boolean=} collapsible If true, the value is a top/left/right/bottom style one that acts like margin or padding, where if only one value is received, it's used for all 4; if 2 are received, the first is duplicated for 3rd (bottom) and the 2nd is duplicated for the 4th spot (left), etc.
             * @return {Function} formatter function
             */
            var _getFormatter = function(dflt, clr, collapsible, multi) {
                    if (dflt == null) {
                        return function(v) {return v;};
                    }
                    var dColor = clr ? (dflt.match(_colorExp) || [""])[0] : "",
                        dVals = dflt.split(dColor).join("").match(_valuesExp) || [],
                        pfx = dflt.substr(0, dflt.indexOf(dVals[0])),
                        sfx = (dflt.charAt(dflt.length - 1) === ")") ? ")" : "",
                        delim = (dflt.indexOf(" ") !== -1) ? " " : ",",
                        numVals = dVals.length,
                        dSfx = (numVals > 0) ? dVals[0].replace(_numExp, "") : "",
                        formatter;
                    if (!numVals) {
                        return function(v) {return v;};
                    }
                    if (clr) {
                        formatter = function(v) {
                            var color, vals, i, a;
                            if (typeof(v) === "number") {
                                v += dSfx;
                            } else if (multi && _commasOutsideParenExp.test(v)) {
                                a = v.replace(_commasOutsideParenExp, "|").split("|");
                                for (i = 0; i < a.length; i++) {
                                    a[i] = formatter(a[i]);
                                }
                                return a.join(",");
                            }
                            color = (v.match(_colorExp) || [dColor])[0];
                            vals = v.split(color).join("").match(_valuesExp) || [];
                            i = vals.length;
                            if (numVals > i--) {
                                while (++i < numVals) {
                                    vals[i] = collapsible ? vals[(((i - 1) / 2) | 0)] : dVals[i];
                                }
                            }
                            return pfx + vals.join(delim) + delim + color + sfx + (v.indexOf("inset") !== -1 ? " inset" : "");
                        };
                        return formatter;
    
                    }
                    formatter = function(v) {
                        var vals, a, i;
                        if (typeof(v) === "number") {
                            v += dSfx;
                        } else if (multi && _commasOutsideParenExp.test(v)) {
                            a = v.replace(_commasOutsideParenExp, "|").split("|");
                            for (i = 0; i < a.length; i++) {
                                a[i] = formatter(a[i]);
                            }
                            return a.join(",");
                        }
                        vals = v.match(_valuesExp) || [];
                        i = vals.length;
                        if (numVals > i--) {
                            while (++i < numVals) {
                                vals[i] = collapsible ? vals[(((i - 1) / 2) | 0)] : dVals[i];
                            }
                        }
                        return pfx + vals.join(delim) + sfx;
                    };
                    return formatter;
                },
    
                /**
                 * @private returns a formatter function that's used for edge-related values like marginTop, marginLeft, paddingBottom, paddingRight, etc. Just pass a comma-delimited list of property names related to the edges.
                 * @param {!string} props a comma-delimited list of property names in order from top to left, like "marginTop,marginRight,marginBottom,marginLeft"
                 * @return {Function} a formatter function
                 */
                _getEdgeParser = function(props) {
                    props = props.split(",");
                    return function(t, e, p, cssp, pt, plugin, vars) {
                        var a = (e + "").split(" "),
                            i;
                        vars = {};
                        for (i = 0; i < 4; i++) {
                            vars[props[i]] = a[i] = a[i] || a[(((i - 1) / 2) >> 0)];
                        }
                        return cssp.parse(t, vars, pt, plugin);
                    };
                },
    
                // @private used when other plugins must tween values first, like BezierPlugin or ThrowPropsPlugin, etc. That plugin's setRatio() gets called first so that the values are updated, and then we loop through the MiniPropTweens which handle copying the values into their appropriate slots so that they can then be applied correctly in the main CSSPlugin setRatio() method. Remember, we typically create a proxy object that has a bunch of uniquely-named properties that we feed to the sub-plugin and it does its magic normally, and then we must interpret those values and apply them to the css because often numbers must get combined/concatenated, suffixes added, etc. to work with css, like boxShadow could have 4 values plus a color.
                _setPluginRatio = _internals._setPluginRatio = function(v) {
                    this.plugin.setRatio(v);
                    var d = this.data,
                        proxy = d.proxy,
                        mpt = d.firstMPT,
                        min = 0.000001,
                        val, pt, i, str, p;
                    while (mpt) {
                        val = proxy[mpt.v];
                        if (mpt.r) {
                            val = Math.round(val);
                        } else if (val < min && val > -min) {
                            val = 0;
                        }
                        mpt.t[mpt.p] = val;
                        mpt = mpt._next;
                    }
                    if (d.autoRotate) {
                        d.autoRotate.rotation = d.mod ? d.mod(proxy.rotation, this.t) : proxy.rotation; //special case for ModifyPlugin to hook into an auto-rotating bezier
                    }
                    //at the end, we must set the CSSPropTween's "e" (end) value dynamically here because that's what is used in the final setRatio() method. Same for "b" at the beginning.
                    if (v === 1 || v === 0) {
                        mpt = d.firstMPT;
                        p = (v === 1) ? "e" : "b";
                        while (mpt) {
                            pt = mpt.t;
                            if (!pt.type) {
                                pt[p] = pt.s + pt.xs0;
                            } else if (pt.type === 1) {
                                str = pt.xs0 + pt.s + pt.xs1;
                                for (i = 1; i < pt.l; i++) {
                                    str += pt["xn"+i] + pt["xs"+(i+1)];
                                }
                                pt[p] = str;
                            }
                            mpt = mpt._next;
                        }
                    }
                },
    
                /**
                 * @private @constructor Used by a few SpecialProps to hold important values for proxies. For example, _parseToProxy() creates a MiniPropTween instance for each property that must get tweened on the proxy, and we record the original property name as well as the unique one we create for the proxy, plus whether or not the value needs to be rounded plus the original value.
                 * @param {!Object} t target object whose property we're tweening (often a CSSPropTween)
                 * @param {!string} p property name
                 * @param {(number|string|object)} v value
                 * @param {MiniPropTween=} next next MiniPropTween in the linked list
                 * @param {boolean=} r if true, the tweened value should be rounded to the nearest integer
                 */
                MiniPropTween = function(t, p, v, next, r) {
                    this.t = t;
                    this.p = p;
                    this.v = v;
                    this.r = r;
                    if (next) {
                        next._prev = this;
                        this._next = next;
                    }
                },
    
                /**
                 * @private Most other plugins (like BezierPlugin and ThrowPropsPlugin and others) can only tween numeric values, but CSSPlugin must accommodate special values that have a bunch of extra data (like a suffix or strings between numeric values, etc.). For example, boxShadow has values like "10px 10px 20px 30px rgb(255,0,0)" which would utterly confuse other plugins. This method allows us to split that data apart and grab only the numeric data and attach it to uniquely-named properties of a generic proxy object ({}) so that we can feed that to virtually any plugin to have the numbers tweened. However, we must also keep track of which properties from the proxy go with which CSSPropTween values and instances. So we create a linked list of MiniPropTweens. Each one records a target (the original CSSPropTween), property (like "s" or "xn1" or "xn2") that we're tweening and the unique property name that was used for the proxy (like "boxShadow_xn1" and "boxShadow_xn2") and whether or not they need to be rounded. That way, in the _setPluginRatio() method we can simply copy the values over from the proxy to the CSSPropTween instance(s). Then, when the main CSSPlugin setRatio() method runs and applies the CSSPropTween values accordingly, they're updated nicely. So the external plugin tweens the numbers, _setPluginRatio() copies them over, and setRatio() acts normally, applying css-specific values to the element.
                 * This method returns an object that has the following properties:
                 *  - proxy: a generic object containing the starting values for all the properties that will be tweened by the external plugin.  This is what we feed to the external _onInitTween() as the target
                 *  - end: a generic object containing the ending values for all the properties that will be tweened by the external plugin. This is what we feed to the external plugin's _onInitTween() as the destination values
                 *  - firstMPT: the first MiniPropTween in the linked list
                 *  - pt: the first CSSPropTween in the linked list that was created when parsing. If shallow is true, this linked list will NOT attach to the one passed into the _parseToProxy() as the "pt" (4th) parameter.
                 * @param {!Object} t target object to be tweened
                 * @param {!(Object|string)} vars the object containing the information about the tweening values (typically the end/destination values) that should be parsed
                 * @param {!CSSPlugin} cssp The CSSPlugin instance
                 * @param {CSSPropTween=} pt the next CSSPropTween in the linked list
                 * @param {TweenPlugin=} plugin the external TweenPlugin instance that will be handling tweening the numeric values
                 * @param {boolean=} shallow if true, the resulting linked list from the parse will NOT be attached to the CSSPropTween that was passed in as the "pt" (4th) parameter.
                 * @return An object containing the following properties: proxy, end, firstMPT, and pt (see above for descriptions)
                 */
                _parseToProxy = _internals._parseToProxy = function(t, vars, cssp, pt, plugin, shallow) {
                    var bpt = pt,
                        start = {},
                        end = {},
                        transform = cssp._transform,
                        oldForce = _forcePT,
                        i, p, xp, mpt, firstPT;
                    cssp._transform = null;
                    _forcePT = vars;
                    pt = firstPT = cssp.parse(t, vars, pt, plugin);
                    _forcePT = oldForce;
                    //break off from the linked list so the new ones are isolated.
                    if (shallow) {
                        cssp._transform = transform;
                        if (bpt) {
                            bpt._prev = null;
                            if (bpt._prev) {
                                bpt._prev._next = null;
                            }
                        }
                    }
                    while (pt && pt !== bpt) {
                        if (pt.type <= 1) {
                            p = pt.p;
                            end[p] = pt.s + pt.c;
                            start[p] = pt.s;
                            if (!shallow) {
                                mpt = new MiniPropTween(pt, "s", p, mpt, pt.r);
                                pt.c = 0;
                            }
                            if (pt.type === 1) {
                                i = pt.l;
                                while (--i > 0) {
                                    xp = "xn" + i;
                                    p = pt.p + "_" + xp;
                                    end[p] = pt.data[xp];
                                    start[p] = pt[xp];
                                    if (!shallow) {
                                        mpt = new MiniPropTween(pt, xp, p, mpt, pt.rxp[xp]);
                                    }
                                }
                            }
                        }
                        pt = pt._next;
                    }
                    return {proxy:start, end:end, firstMPT:mpt, pt:firstPT};
                },
    
    
    
                /**
                 * @constructor Each property that is tweened has at least one CSSPropTween associated with it. These instances store important information like the target, property, starting value, amount of change, etc. They can also optionally have a number of "extra" strings and numeric values named xs1, xn1, xs2, xn2, xs3, xn3, etc. where "s" indicates string and "n" indicates number. These can be pieced together in a complex-value tween (type:1) that has alternating types of data like a string, number, string, number, etc. For example, boxShadow could be "5px 5px 8px rgb(102, 102, 51)". In that value, there are 6 numbers that may need to tween and then pieced back together into a string again with spaces, suffixes, etc. xs0 is special in that it stores the suffix for standard (type:0) tweens, -OR- the first string (prefix) in a complex-value (type:1) CSSPropTween -OR- it can be the non-tweening value in a type:-1 CSSPropTween. We do this to conserve memory.
                 * CSSPropTweens have the following optional properties as well (not defined through the constructor):
                 *  - l: Length in terms of the number of extra properties that the CSSPropTween has (default: 0). For example, for a boxShadow we may need to tween 5 numbers in which case l would be 5; Keep in mind that the start/end values for the first number that's tweened are always stored in the s and c properties to conserve memory. All additional values thereafter are stored in xn1, xn2, etc.
                 *  - xfirst: The first instance of any sub-CSSPropTweens that are tweening properties of this instance. For example, we may split up a boxShadow tween so that there's a main CSSPropTween of type:1 that has various xs* and xn* values associated with the h-shadow, v-shadow, blur, color, etc. Then we spawn a CSSPropTween for each of those that has a higher priority and runs BEFORE the main CSSPropTween so that the values are all set by the time it needs to re-assemble them. The xfirst gives us an easy way to identify the first one in that chain which typically ends at the main one (because they're all prepende to the linked list)
                 *  - plugin: The TweenPlugin instance that will handle the tweening of any complex values. For example, sometimes we don't want to use normal subtweens (like xfirst refers to) to tween the values - we might want ThrowPropsPlugin or BezierPlugin some other plugin to do the actual tweening, so we create a plugin instance and store a reference here. We need this reference so that if we get a request to round values or disable a tween, we can pass along that request.
                 *  - data: Arbitrary data that needs to be stored with the CSSPropTween. Typically if we're going to have a plugin handle the tweening of a complex-value tween, we create a generic object that stores the END values that we're tweening to and the CSSPropTween's xs1, xs2, etc. have the starting values. We store that object as data. That way, we can simply pass that object to the plugin and use the CSSPropTween as the target.
                 *  - setRatio: Only used for type:2 tweens that require custom functionality. In this case, we call the CSSPropTween's setRatio() method and pass the ratio each time the tween updates. This isn't quite as efficient as doing things directly in the CSSPlugin's setRatio() method, but it's very convenient and flexible.
                 * @param {!Object} t Target object whose property will be tweened. Often a DOM element, but not always. It could be anything.
                 * @param {string} p Property to tween (name). For example, to tween element.width, p would be "width".
                 * @param {number} s Starting numeric value
                 * @param {number} c Change in numeric value over the course of the entire tween. For example, if element.width starts at 5 and should end at 100, c would be 95.
                 * @param {CSSPropTween=} next The next CSSPropTween in the linked list. If one is defined, we will define its _prev as the new instance, and the new instance's _next will be pointed at it.
                 * @param {number=} type The type of CSSPropTween where -1 = a non-tweening value, 0 = a standard simple tween, 1 = a complex value (like one that has multiple numbers in a comma- or space-delimited string like border:"1px solid red"), and 2 = one that uses a custom setRatio function that does all of the work of applying the values on each update.
                 * @param {string=} n Name of the property that should be used for overwriting purposes which is typically the same as p but not always. For example, we may need to create a subtween for the 2nd part of a "clip:rect(...)" tween in which case "p" might be xs1 but "n" is still "clip"
                 * @param {boolean=} r If true, the value(s) should be rounded
                 * @param {number=} pr Priority in the linked list order. Higher priority CSSPropTweens will be updated before lower priority ones. The default priority is 0.
                 * @param {string=} b Beginning value. We store this to ensure that it is EXACTLY what it was when the tween began without any risk of interpretation issues.
                 * @param {string=} e Ending value. We store this to ensure that it is EXACTLY what the user defined at the end of the tween without any risk of interpretation issues.
                 */
                CSSPropTween = _internals.CSSPropTween = function(t, p, s, c, next, type, n, r, pr, b, e) {
                    this.t = t; //target
                    this.p = p; //property
                    this.s = s; //starting value
                    this.c = c; //change value
                    this.n = n || p; //name that this CSSPropTween should be associated to (usually the same as p, but not always - n is what overwriting looks at)
                    if (!(t instanceof CSSPropTween)) {
                        _overwriteProps.push(this.n);
                    }
                    this.r = r; //round (boolean)
                    this.type = type || 0; //0 = normal tween, -1 = non-tweening (in which case xs0 will be applied to the target's property, like tp.t[tp.p] = tp.xs0), 1 = complex-value SpecialProp, 2 = custom setRatio() that does all the work
                    if (pr) {
                        this.pr = pr;
                        _hasPriority = true;
                    }
                    this.b = (b === undefined) ? s : b;
                    this.e = (e === undefined) ? s + c : e;
                    if (next) {
                        this._next = next;
                        next._prev = this;
                    }
                },
    
                _addNonTweeningNumericPT = function(target, prop, start, end, next, overwriteProp) { //cleans up some code redundancies and helps minification. Just a fast way to add a NUMERIC non-tweening CSSPropTween
                    var pt = new CSSPropTween(target, prop, start, end - start, next, -1, overwriteProp);
                    pt.b = start;
                    pt.e = pt.xs0 = end;
                    return pt;
                },
    
                /**
                 * Takes a target, the beginning value and ending value (as strings) and parses them into a CSSPropTween (possibly with child CSSPropTweens) that accommodates multiple numbers, colors, comma-delimited values, etc. For example:
                 * sp.parseComplex(element, "boxShadow", "5px 10px 20px rgb(255,102,51)", "0px 0px 0px red", true, "0px 0px 0px rgb(0,0,0,0)", pt);
                 * It will walk through the beginning and ending values (which should be in the same format with the same number and type of values) and figure out which parts are numbers, what strings separate the numeric/tweenable values, and then create the CSSPropTweens accordingly. If a plugin is defined, no child CSSPropTweens will be created. Instead, the ending values will be stored in the "data" property of the returned CSSPropTween like: {s:-5, xn1:-10, xn2:-20, xn3:255, xn4:0, xn5:0} so that it can be fed to any other plugin and it'll be plain numeric tweens but the recomposition of the complex value will be handled inside CSSPlugin's setRatio().
                 * If a setRatio is defined, the type of the CSSPropTween will be set to 2 and recomposition of the values will be the responsibility of that method.
                 *
                 * @param {!Object} t Target whose property will be tweened
                 * @param {!string} p Property that will be tweened (its name, like "left" or "backgroundColor" or "boxShadow")
                 * @param {string} b Beginning value
                 * @param {string} e Ending value
                 * @param {boolean} clrs If true, the value could contain a color value like "rgb(255,0,0)" or "#F00" or "red". The default is false, so no colors will be recognized (a performance optimization)
                 * @param {(string|number|Object)} dflt The default beginning value that should be used if no valid beginning value is defined or if the number of values inside the complex beginning and ending values don't match
                 * @param {?CSSPropTween} pt CSSPropTween instance that is the current head of the linked list (we'll prepend to this).
                 * @param {number=} pr Priority in the linked list order. Higher priority properties will be updated before lower priority ones. The default priority is 0.
                 * @param {TweenPlugin=} plugin If a plugin should handle the tweening of extra properties, pass the plugin instance here. If one is defined, then NO subtweens will be created for any extra properties (the properties will be created - just not additional CSSPropTween instances to tween them) because the plugin is expected to do so. However, the end values WILL be populated in the "data" property, like {s:100, xn1:50, xn2:300}
                 * @param {function(number)=} setRatio If values should be set in a custom function instead of being pieced together in a type:1 (complex-value) CSSPropTween, define that custom function here.
                 * @return {CSSPropTween} The first CSSPropTween in the linked list which includes the new one(s) added by the parseComplex() call.
                 */
                _parseComplex = CSSPlugin.parseComplex = function(t, p, b, e, clrs, dflt, pt, pr, plugin, setRatio) {
                    //DEBUG: _log("parseComplex: "+p+", b: "+b+", e: "+e);
                    b = b || dflt || "";
                    if (typeof(e) === "function") {
                        e = e(_index, _target);
                    }
                    pt = new CSSPropTween(t, p, 0, 0, pt, (setRatio ? 2 : 1), null, false, pr, b, e);
                    e += ""; //ensures it's a string
                    if (clrs && _colorExp.test(e + b)) { //if colors are found, normalize the formatting to rgba() or hsla().
                        e = [b, e];
                        CSSPlugin.colorStringFilter(e);
                        b = e[0];
                        e = e[1];
                    }
                    var ba = b.split(", ").join(",").split(" "), //beginning array
                        ea = e.split(", ").join(",").split(" "), //ending array
                        l = ba.length,
                        autoRound = (_autoRound !== false),
                        i, xi, ni, bv, ev, bnums, enums, bn, hasAlpha, temp, cv, str, useHSL;
                    if (e.indexOf(",") !== -1 || b.indexOf(",") !== -1) {
                        ba = ba.join(" ").replace(_commasOutsideParenExp, ", ").split(" ");
                        ea = ea.join(" ").replace(_commasOutsideParenExp, ", ").split(" ");
                        l = ba.length;
                    }
                    if (l !== ea.length) {
                        //DEBUG: _log("mismatched formatting detected on " + p + " (" + b + " vs " + e + ")");
                        ba = (dflt || "").split(" ");
                        l = ba.length;
                    }
                    pt.plugin = plugin;
                    pt.setRatio = setRatio;
                    _colorExp.lastIndex = 0;
                    for (i = 0; i < l; i++) {
                        bv = ba[i];
                        ev = ea[i];
                        bn = parseFloat(bv);
                        //if the value begins with a number (most common). It's fine if it has a suffix like px
                        if (bn || bn === 0) {
                            pt.appendXtra("", bn, _parseChange(ev, bn), ev.replace(_relNumExp, ""), (autoRound && ev.indexOf("px") !== -1), true);
    
                        //if the value is a color
                        } else if (clrs && _colorExp.test(bv)) {
                            str = ev.indexOf(")") + 1;
                            str = ")" + (str ? ev.substr(str) : ""); //if there's a comma or ) at the end, retain it.
                            useHSL = (ev.indexOf("hsl") !== -1 && _supportsOpacity);
                            temp = ev; //original string value so we can look for any prefix later.
                            bv = _parseColor(bv, useHSL);
                            ev = _parseColor(ev, useHSL);
                            hasAlpha = (bv.length + ev.length > 6);
                            if (hasAlpha && !_supportsOpacity && ev[3] === 0) { //older versions of IE don't support rgba(), so if the destination alpha is 0, just use "transparent" for the end color
                                pt["xs" + pt.l] += pt.l ? " transparent" : "transparent";
                                pt.e = pt.e.split(ea[i]).join("transparent");
                            } else {
                                if (!_supportsOpacity) { //old versions of IE don't support rgba().
                                    hasAlpha = false;
                                }
                                if (useHSL) {
                                    pt.appendXtra(temp.substr(0, temp.indexOf("hsl")) + (hasAlpha ? "hsla(" : "hsl("), bv[0], _parseChange(ev[0], bv[0]), ",", false, true)
                                        .appendXtra("", bv[1], _parseChange(ev[1], bv[1]), "%,", false)
                                        .appendXtra("", bv[2], _parseChange(ev[2], bv[2]), (hasAlpha ? "%," : "%" + str), false);
                                } else {
                                    pt.appendXtra(temp.substr(0, temp.indexOf("rgb")) + (hasAlpha ? "rgba(" : "rgb("), bv[0], ev[0] - bv[0], ",", true, true)
                                        .appendXtra("", bv[1], ev[1] - bv[1], ",", true)
                                        .appendXtra("", bv[2], ev[2] - bv[2], (hasAlpha ? "," : str), true);
                                }
    
                                if (hasAlpha) {
                                    bv = (bv.length < 4) ? 1 : bv[3];
                                    pt.appendXtra("", bv, ((ev.length < 4) ? 1 : ev[3]) - bv, str, false);
                                }
                            }
                            _colorExp.lastIndex = 0; //otherwise the test() on the RegExp could move the lastIndex and taint future results.
    
                        } else {
                            bnums = bv.match(_numExp); //gets each group of numbers in the beginning value string and drops them into an array
    
                            //if no number is found, treat it as a non-tweening value and just append the string to the current xs.
                            if (!bnums) {
                                pt["xs" + pt.l] += (pt.l || pt["xs" + pt.l]) ? " " + ev : ev;
    
                            //loop through all the numbers that are found and construct the extra values on the pt.
                            } else {
                                enums = ev.match(_relNumExp); //get each group of numbers in the end value string and drop them into an array. We allow relative values too, like +=50 or -=.5
                                if (!enums || enums.length !== bnums.length) {
                                    //DEBUG: _log("mismatched formatting detected on " + p + " (" + b + " vs " + e + ")");
                                    return pt;
                                }
                                ni = 0;
                                for (xi = 0; xi < bnums.length; xi++) {
                                    cv = bnums[xi];
                                    temp = bv.indexOf(cv, ni);
                                    pt.appendXtra(bv.substr(ni, temp - ni), Number(cv), _parseChange(enums[xi], cv), "", (autoRound && bv.substr(temp + cv.length, 2) === "px"), (xi === 0));
                                    ni = temp + cv.length;
                                }
                                pt["xs" + pt.l] += bv.substr(ni);
                            }
                        }
                    }
                    //if there are relative values ("+=" or "-=" prefix), we need to adjust the ending value to eliminate the prefixes and combine the values properly.
                    if (e.indexOf("=") !== -1) if (pt.data) {
                        str = pt.xs0 + pt.data.s;
                        for (i = 1; i < pt.l; i++) {
                            str += pt["xs" + i] + pt.data["xn" + i];
                        }
                        pt.e = str + pt["xs" + i];
                    }
                    if (!pt.l) {
                        pt.type = -1;
                        pt.xs0 = pt.e;
                    }
                    return pt.xfirst || pt;
                },
                i = 9;
    
    
            p = CSSPropTween.prototype;
            p.l = p.pr = 0; //length (number of extra properties like xn1, xn2, xn3, etc.
            while (--i > 0) {
                p["xn" + i] = 0;
                p["xs" + i] = "";
            }
            p.xs0 = "";
            p._next = p._prev = p.xfirst = p.data = p.plugin = p.setRatio = p.rxp = null;
    
    
            /**
             * Appends and extra tweening value to a CSSPropTween and automatically manages any prefix and suffix strings. The first extra value is stored in the s and c of the main CSSPropTween instance, but thereafter any extras are stored in the xn1, xn2, xn3, etc. The prefixes and suffixes are stored in the xs0, xs1, xs2, etc. properties. For example, if I walk through a clip value like "rect(10px, 5px, 0px, 20px)", the values would be stored like this:
             * xs0:"rect(", s:10, xs1:"px, ", xn1:5, xs2:"px, ", xn2:0, xs3:"px, ", xn3:20, xn4:"px)"
             * And they'd all get joined together when the CSSPlugin renders (in the setRatio() method).
             * @param {string=} pfx Prefix (if any)
             * @param {!number} s Starting value
             * @param {!number} c Change in numeric value over the course of the entire tween. For example, if the start is 5 and the end is 100, the change would be 95.
             * @param {string=} sfx Suffix (if any)
             * @param {boolean=} r Round (if true).
             * @param {boolean=} pad If true, this extra value should be separated by the previous one by a space. If there is no previous extra and pad is true, it will automatically drop the space.
             * @return {CSSPropTween} returns itself so that multiple methods can be chained together.
             */
            p.appendXtra = function(pfx, s, c, sfx, r, pad) {
                var pt = this,
                    l = pt.l;
                pt["xs" + l] += (pad && (l || pt["xs" + l])) ? " " + pfx : pfx || "";
                if (!c) if (l !== 0 && !pt.plugin) { //typically we'll combine non-changing values right into the xs to optimize performance, but we don't combine them when there's a plugin that will be tweening the values because it may depend on the values being split apart, like for a bezier, if a value doesn't change between the first and second iteration but then it does on the 3rd, we'll run into trouble because there's no xn slot for that value!
                    pt["xs" + l] += s + (sfx || "");
                    return pt;
                }
                pt.l++;
                pt.type = pt.setRatio ? 2 : 1;
                pt["xs" + pt.l] = sfx || "";
                if (l > 0) {
                    pt.data["xn" + l] = s + c;
                    pt.rxp["xn" + l] = r; //round extra property (we need to tap into this in the _parseToProxy() method)
                    pt["xn" + l] = s;
                    if (!pt.plugin) {
                        pt.xfirst = new CSSPropTween(pt, "xn" + l, s, c, pt.xfirst || pt, 0, pt.n, r, pt.pr);
                        pt.xfirst.xs0 = 0; //just to ensure that the property stays numeric which helps modern browsers speed up processing. Remember, in the setRatio() method, we do pt.t[pt.p] = val + pt.xs0 so if pt.xs0 is "" (the default), it'll cast the end value as a string. When a property is a number sometimes and a string sometimes, it prevents the compiler from locking in the data type, slowing things down slightly.
                    }
                    return pt;
                }
                pt.data = {s:s + c};
                pt.rxp = {};
                pt.s = s;
                pt.c = c;
                pt.r = r;
                return pt;
            };
    
            /**
             * @constructor A SpecialProp is basically a css property that needs to be treated in a non-standard way, like if it may contain a complex value like boxShadow:"5px 10px 15px rgb(255, 102, 51)" or if it is associated with another plugin like ThrowPropsPlugin or BezierPlugin. Every SpecialProp is associated with a particular property name like "boxShadow" or "throwProps" or "bezier" and it will intercept those values in the vars object that's passed to the CSSPlugin and handle them accordingly.
             * @param {!string} p Property name (like "boxShadow" or "throwProps")
             * @param {Object=} options An object containing any of the following configuration options:
             *                      - defaultValue: the default value
             *                      - parser: A function that should be called when the associated property name is found in the vars. This function should return a CSSPropTween instance and it should ensure that it is properly inserted into the linked list. It will receive 4 paramters: 1) The target, 2) The value defined in the vars, 3) The CSSPlugin instance (whose _firstPT should be used for the linked list), and 4) A computed style object if one was calculated (this is a speed optimization that allows retrieval of starting values quicker)
             *                      - formatter: a function that formats any value received for this special property (for example, boxShadow could take "5px 5px red" and format it to "5px 5px 0px 0px red" so that both the beginning and ending values have a common order and quantity of values.)
             *                      - prefix: if true, we'll determine whether or not this property requires a vendor prefix (like Webkit or Moz or ms or O)
             *                      - color: set this to true if the value for this SpecialProp may contain color-related values like rgb(), rgba(), etc.
             *                      - priority: priority in the linked list order. Higher priority SpecialProps will be updated before lower priority ones. The default priority is 0.
             *                      - multi: if true, the formatter should accommodate a comma-delimited list of values, like boxShadow could have multiple boxShadows listed out.
             *                      - collapsible: if true, the formatter should treat the value like it's a top/right/bottom/left value that could be collapsed, like "5px" would apply to all, "5px, 10px" would use 5px for top/bottom and 10px for right/left, etc.
             *                      - keyword: a special keyword that can [optionally] be found inside the value (like "inset" for boxShadow). This allows us to validate beginning/ending values to make sure they match (if the keyword is found in one, it'll be added to the other for consistency by default).
             */
            var SpecialProp = function(p, options) {
                    options = options || {};
                    this.p = options.prefix ? _checkPropPrefix(p) || p : p;
                    _specialProps[p] = _specialProps[this.p] = this;
                    this.format = options.formatter || _getFormatter(options.defaultValue, options.color, options.collapsible, options.multi);
                    if (options.parser) {
                        this.parse = options.parser;
                    }
                    this.clrs = options.color;
                    this.multi = options.multi;
                    this.keyword = options.keyword;
                    this.dflt = options.defaultValue;
                    this.pr = options.priority || 0;
                },
    
                //shortcut for creating a new SpecialProp that can accept multiple properties as a comma-delimited list (helps minification). dflt can be an array for multiple values (we don't do a comma-delimited list because the default value may contain commas, like rect(0px,0px,0px,0px)). We attach this method to the SpecialProp class/object instead of using a private _createSpecialProp() method so that we can tap into it externally if necessary, like from another plugin.
                _registerComplexSpecialProp = _internals._registerComplexSpecialProp = function(p, options, defaults) {
                    if (typeof(options) !== "object") {
                        options = {parser:defaults}; //to make backwards compatible with older versions of BezierPlugin and ThrowPropsPlugin
                    }
                    var a = p.split(","),
                        d = options.defaultValue,
                        i, temp;
                    defaults = defaults || [d];
                    for (i = 0; i < a.length; i++) {
                        options.prefix = (i === 0 && options.prefix);
                        options.defaultValue = defaults[i] || d;
                        temp = new SpecialProp(a[i], options);
                    }
                },
    
                //creates a placeholder special prop for a plugin so that the property gets caught the first time a tween of it is attempted, and at that time it makes the plugin register itself, thus taking over for all future tweens of that property. This allows us to not mandate that things load in a particular order and it also allows us to log() an error that informs the user when they attempt to tween an external plugin-related property without loading its .js file.
                _registerPluginProp = _internals._registerPluginProp = function(p) {
                    if (!_specialProps[p]) {
                        var pluginName = p.charAt(0).toUpperCase() + p.substr(1) + "Plugin";
                        _registerComplexSpecialProp(p, {parser:function(t, e, p, cssp, pt, plugin, vars) {
                            var pluginClass = _globals.com.greensock.plugins[pluginName];
                            if (!pluginClass) {
                                _log("Error: " + pluginName + " js file not loaded.");
                                return pt;
                            }
                            pluginClass._cssRegister();
                            return _specialProps[p].parse(t, e, p, cssp, pt, plugin, vars);
                        }});
                    }
                };
    
    
            p = SpecialProp.prototype;
    
            /**
             * Alias for _parseComplex() that automatically plugs in certain values for this SpecialProp, like its property name, whether or not colors should be sensed, the default value, and priority. It also looks for any keyword that the SpecialProp defines (like "inset" for boxShadow) and ensures that the beginning and ending values have the same number of values for SpecialProps where multi is true (like boxShadow and textShadow can have a comma-delimited list)
             * @param {!Object} t target element
             * @param {(string|number|object)} b beginning value
             * @param {(string|number|object)} e ending (destination) value
             * @param {CSSPropTween=} pt next CSSPropTween in the linked list
             * @param {TweenPlugin=} plugin If another plugin will be tweening the complex value, that TweenPlugin instance goes here.
             * @param {function=} setRatio If a custom setRatio() method should be used to handle this complex value, that goes here.
             * @return {CSSPropTween=} First CSSPropTween in the linked list
             */
            p.parseComplex = function(t, b, e, pt, plugin, setRatio) {
                var kwd = this.keyword,
                    i, ba, ea, l, bi, ei;
                //if this SpecialProp's value can contain a comma-delimited list of values (like boxShadow or textShadow), we must parse them in a special way, and look for a keyword (like "inset" for boxShadow) and ensure that the beginning and ending BOTH have it if the end defines it as such. We also must ensure that there are an equal number of values specified (we can't tween 1 boxShadow to 3 for example)
                if (this.multi) if (_commasOutsideParenExp.test(e) || _commasOutsideParenExp.test(b)) {
                    ba = b.replace(_commasOutsideParenExp, "|").split("|");
                    ea = e.replace(_commasOutsideParenExp, "|").split("|");
                } else if (kwd) {
                    ba = [b];
                    ea = [e];
                }
                if (ea) {
                    l = (ea.length > ba.length) ? ea.length : ba.length;
                    for (i = 0; i < l; i++) {
                        b = ba[i] = ba[i] || this.dflt;
                        e = ea[i] = ea[i] || this.dflt;
                        if (kwd) {
                            bi = b.indexOf(kwd);
                            ei = e.indexOf(kwd);
                            if (bi !== ei) {
                                if (ei === -1) { //if the keyword isn't in the end value, remove it from the beginning one.
                                    ba[i] = ba[i].split(kwd).join("");
                                } else if (bi === -1) { //if the keyword isn't in the beginning, add it.
                                    ba[i] += " " + kwd;
                                }
                            }
                        }
                    }
                    b = ba.join(", ");
                    e = ea.join(", ");
                }
                return _parseComplex(t, this.p, b, e, this.clrs, this.dflt, pt, this.pr, plugin, setRatio);
            };
    
            /**
             * Accepts a target and end value and spits back a CSSPropTween that has been inserted into the CSSPlugin's linked list and conforms with all the conventions we use internally, like type:-1, 0, 1, or 2, setting up any extra property tweens, priority, etc. For example, if we have a boxShadow SpecialProp and call:
             * this._firstPT = sp.parse(element, "5px 10px 20px rgb(2550,102,51)", "boxShadow", this);
             * It should figure out the starting value of the element's boxShadow, compare it to the provided end value and create all the necessary CSSPropTweens of the appropriate types to tween the boxShadow. The CSSPropTween that gets spit back should already be inserted into the linked list (the 4th parameter is the current head, so prepend to that).
             * @param {!Object} t Target object whose property is being tweened
             * @param {Object} e End value as provided in the vars object (typically a string, but not always - like a throwProps would be an object).
             * @param {!string} p Property name
             * @param {!CSSPlugin} cssp The CSSPlugin instance that should be associated with this tween.
             * @param {?CSSPropTween} pt The CSSPropTween that is the current head of the linked list (we'll prepend to it)
             * @param {TweenPlugin=} plugin If a plugin will be used to tween the parsed value, this is the plugin instance.
             * @param {Object=} vars Original vars object that contains the data for parsing.
             * @return {CSSPropTween} The first CSSPropTween in the linked list which includes the new one(s) added by the parse() call.
             */
            p.parse = function(t, e, p, cssp, pt, plugin, vars) {
                return this.parseComplex(t.style, this.format(_getStyle(t, this.p, _cs, false, this.dflt)), this.format(e), pt, plugin);
            };
    
            /**
             * Registers a special property that should be intercepted from any "css" objects defined in tweens. This allows you to handle them however you want without CSSPlugin doing it for you. The 2nd parameter should be a function that accepts 3 parameters:
             *  1) Target object whose property should be tweened (typically a DOM element)
             *  2) The end/destination value (could be a string, number, object, or whatever you want)
             *  3) The tween instance (you probably don't need to worry about this, but it can be useful for looking up information like the duration)
             *
             * Then, your function should return a function which will be called each time the tween gets rendered, passing a numeric "ratio" parameter to your function that indicates the change factor (usually between 0 and 1). For example:
             *
             * CSSPlugin.registerSpecialProp("myCustomProp", function(target, value, tween) {
             *      var start = target.style.width;
             *      return function(ratio) {
             *              target.style.width = (start + value * ratio) + "px";
             *              console.log("set width to " + target.style.width);
             *          }
             * }, 0);
             *
             * Then, when I do this tween, it will trigger my special property:
             *
             * TweenLite.to(element, 1, {css:{myCustomProp:100}});
             *
             * In the example, of course, we're just changing the width, but you can do anything you want.
             *
             * @param {!string} name Property name (or comma-delimited list of property names) that should be intercepted and handled by your function. For example, if I define "myCustomProp", then it would handle that portion of the following tween: TweenLite.to(element, 1, {css:{myCustomProp:100}})
             * @param {!function(Object, Object, Object, string):function(number)} onInitTween The function that will be called when a tween of this special property is performed. The function will receive 4 parameters: 1) Target object that should be tweened, 2) Value that was passed to the tween, 3) The tween instance itself (rarely used), and 4) The property name that's being tweened. Your function should return a function that should be called on every update of the tween. That function will receive a single parameter that is a "change factor" value (typically between 0 and 1) indicating the amount of change as a ratio. You can use this to determine how to set the values appropriately in your function.
             * @param {number=} priority Priority that helps the engine determine the order in which to set the properties (default: 0). Higher priority properties will be updated before lower priority ones.
             */
            CSSPlugin.registerSpecialProp = function(name, onInitTween, priority) {
                _registerComplexSpecialProp(name, {parser:function(t, e, p, cssp, pt, plugin, vars) {
                    var rv = new CSSPropTween(t, p, 0, 0, pt, 2, p, false, priority);
                    rv.plugin = plugin;
                    rv.setRatio = onInitTween(t, e, cssp._tween, p);
                    return rv;
                }, priority:priority});
            };
    
    
    
    
    
    
            //transform-related methods and properties
            CSSPlugin.useSVGTransformAttr = true; //Safari and Firefox both have some rendering bugs when applying CSS transforms to SVG elements, so default to using the "transform" attribute instead (users can override this).
            var _transformProps = ("scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent").split(","),
                _transformProp = _checkPropPrefix("transform"), //the Javascript (camelCase) transform property, like msTransform, WebkitTransform, MozTransform, or OTransform.
                _transformPropCSS = _prefixCSS + "transform",
                _transformOriginProp = _checkPropPrefix("transformOrigin"),
                _supports3D = (_checkPropPrefix("perspective") !== null),
                Transform = _internals.Transform = function() {
                    this.perspective = parseFloat(CSSPlugin.defaultTransformPerspective) || 0;
                    this.force3D = (CSSPlugin.defaultForce3D === false || !_supports3D) ? false : CSSPlugin.defaultForce3D || "auto";
                },
                _SVGElement = _gsScope.SVGElement,
                _useSVGTransformAttr,
                //Some browsers (like Firefox and IE) don't honor transform-origin properly in SVG elements, so we need to manually adjust the matrix accordingly. We feature detect here rather than always doing the conversion for certain browsers because they may fix the problem at some point in the future.
    
                _createSVG = function(type, container, attributes) {
                    var element = _doc.createElementNS("http://www.w3.org/2000/svg", type),
                        reg = /([a-z])([A-Z])/g,
                        p;
                    for (p in attributes) {
                        element.setAttributeNS(null, p.replace(reg, "$1-$2").toLowerCase(), attributes[p]);
                    }
                    container.appendChild(element);
                    return element;
                },
                _docElement = _doc.documentElement || {},
                _forceSVGTransformAttr = (function() {
                    //IE and Android stock don't support CSS transforms on SVG elements, so we must write them to the "transform" attribute. We populate this variable in the _parseTransform() method, and only if/when we come across an SVG element
                    var force = _ieVers || (/Android/i.test(_agent) && !_gsScope.chrome),
                        svg, rect, width;
                    if (_doc.createElementNS && !force) { //IE8 and earlier doesn't support SVG anyway
                        svg = _createSVG("svg", _docElement);
                        rect = _createSVG("rect", svg, {width:100, height:50, x:100});
                        width = rect.getBoundingClientRect().width;
                        rect.style[_transformOriginProp] = "50% 50%";
                        rect.style[_transformProp] = "scaleX(0.5)";
                        force = (width === rect.getBoundingClientRect().width && !(_isFirefox && _supports3D)); //note: Firefox fails the test even though it does support CSS transforms in 3D. Since we can't push 3D stuff into the transform attribute, we force Firefox to pass the test here (as long as it does truly support 3D).
                        _docElement.removeChild(svg);
                    }
                    return force;
                })(),
                _parseSVGOrigin = function(e, local, decoratee, absolute, smoothOrigin, skipRecord) {
                    var tm = e._gsTransform,
                        m = _getMatrix(e, true),
                        v, x, y, xOrigin, yOrigin, a, b, c, d, tx, ty, determinant, xOriginOld, yOriginOld;
                    if (tm) {
                        xOriginOld = tm.xOrigin; //record the original values before we alter them.
                        yOriginOld = tm.yOrigin;
                    }
                    if (!absolute || (v = absolute.split(" ")).length < 2) {
                        b = e.getBBox();
                        if (b.x === 0 && b.y === 0 && b.width + b.height === 0) { //some browsers (like Firefox) misreport the bounds if the element has zero width and height (it just assumes it's at x:0, y:0), thus we need to manually grab the position in that case.
                            b = {x: parseFloat(e.hasAttribute("x") ? e.getAttribute("x") : e.hasAttribute("cx") ? e.getAttribute("cx") : 0) || 0, y: parseFloat(e.hasAttribute("y") ? e.getAttribute("y") : e.hasAttribute("cy") ? e.getAttribute("cy") : 0) || 0, width:0, height:0};
                        }
                        local = _parsePosition(local).split(" ");
                        v = [(local[0].indexOf("%") !== -1 ? parseFloat(local[0]) / 100 * b.width : parseFloat(local[0])) + b.x,
                             (local[1].indexOf("%") !== -1 ? parseFloat(local[1]) / 100 * b.height : parseFloat(local[1])) + b.y];
                    }
                    decoratee.xOrigin = xOrigin = parseFloat(v[0]);
                    decoratee.yOrigin = yOrigin = parseFloat(v[1]);
                    if (absolute && m !== _identity2DMatrix) { //if svgOrigin is being set, we must invert the matrix and determine where the absolute point is, factoring in the current transforms. Otherwise, the svgOrigin would be based on the element's non-transformed position on the canvas.
                        a = m[0];
                        b = m[1];
                        c = m[2];
                        d = m[3];
                        tx = m[4];
                        ty = m[5];
                        determinant = (a * d - b * c);
                        if (determinant) { //if it's zero (like if scaleX and scaleY are zero), skip it to avoid errors with dividing by zero.
                            x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + ((c * ty - d * tx) / determinant);
                            y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - ((a * ty - b * tx) / determinant);
                            xOrigin = decoratee.xOrigin = v[0] = x;
                            yOrigin = decoratee.yOrigin = v[1] = y;
                        }
                    }
                    if (tm) { //avoid jump when transformOrigin is changed - adjust the x/y values accordingly
                        if (skipRecord) {
                            decoratee.xOffset = tm.xOffset;
                            decoratee.yOffset = tm.yOffset;
                            tm = decoratee;
                        }
                        if (smoothOrigin || (smoothOrigin !== false && CSSPlugin.defaultSmoothOrigin !== false)) {
                            x = xOrigin - xOriginOld;
                            y = yOrigin - yOriginOld;
                            //originally, we simply adjusted the x and y values, but that would cause problems if, for example, you created a rotational tween part-way through an x/y tween. Managing the offset in a separate variable gives us ultimate flexibility.
                            //tm.x -= x - (x * m[0] + y * m[2]);
                            //tm.y -= y - (x * m[1] + y * m[3]);
                            tm.xOffset += (x * m[0] + y * m[2]) - x;
                            tm.yOffset += (x * m[1] + y * m[3]) - y;
                        } else {
                            tm.xOffset = tm.yOffset = 0;
                        }
                    }
                    if (!skipRecord) {
                        e.setAttribute("data-svg-origin", v.join(" "));
                    }
                },
                _getBBoxHack = function(swapIfPossible) { //works around issues in some browsers (like Firefox) that don't correctly report getBBox() on SVG elements inside a <defs> element and/or <mask>. We try creating an SVG, adding it to the documentElement and toss the element in there so that it's definitely part of the rendering tree, then grab the bbox and if it works, we actually swap out the original getBBox() method for our own that does these extra steps whenever getBBox is needed. This helps ensure that performance is optimal (only do all these extra steps when absolutely necessary...most elements don't need it).
                    var svg = _createElement("svg", this.ownerSVGElement.getAttribute("xmlns") || "http://www.w3.org/2000/svg"),
                        oldParent = this.parentNode,
                        oldSibling = this.nextSibling,
                        oldCSS = this.style.cssText,
                        bbox;
                    _docElement.appendChild(svg);
                    svg.appendChild(this);
                    this.style.display = "block";
                    if (swapIfPossible) {
                        try {
                            bbox = this.getBBox();
                            this._originalGetBBox = this.getBBox;
                            this.getBBox = _getBBoxHack;
                        } catch (e) { }
                    } else if (this._originalGetBBox) {
                        bbox = this._originalGetBBox();
                    }
                    if (oldSibling) {
                        oldParent.insertBefore(this, oldSibling);
                    } else {
                        oldParent.appendChild(this);
                    }
                    _docElement.removeChild(svg);
                    this.style.cssText = oldCSS;
                    return bbox;
                },
                _getBBox = function(e) {
                    try {
                        return e.getBBox(); //Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118
                    } catch (error) {
                        return _getBBoxHack.call(e, true);
                    }
                },
                _isSVG = function(e) { //reports if the element is an SVG on which getBBox() actually works
                    return !!(_SVGElement && e.getCTM && _getBBox(e) && (!e.parentNode || e.ownerSVGElement));
                },
                _identity2DMatrix = [1,0,0,1,0,0],
                _getMatrix = function(e, force2D) {
                    var tm = e._gsTransform || new Transform(),
                        rnd = 100000,
                        style = e.style,
                        isDefault, s, m, n, dec, none;
                    if (_transformProp) {
                        s = _getStyle(e, _transformPropCSS, null, true);
                    } else if (e.currentStyle) {
                        //for older versions of IE, we need to interpret the filter portion that is in the format: progid:DXImageTransform.Microsoft.Matrix(M11=6.123233995736766e-17, M12=-1, M21=1, M22=6.123233995736766e-17, sizingMethod='auto expand') Notice that we need to swap b and c compared to a normal matrix.
                        s = e.currentStyle.filter.match(_ieGetMatrixExp);
                        s = (s && s.length === 4) ? [s[0].substr(4), Number(s[2].substr(4)), Number(s[1].substr(4)), s[3].substr(4), (tm.x || 0), (tm.y || 0)].join(",") : "";
                    }
                    isDefault = (!s || s === "none" || s === "matrix(1, 0, 0, 1, 0, 0)");
                    if (_transformProp && ((none = (_getComputedStyle(e).display === "none")) || !e.parentNode)) {
                        if (none) { //browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not "none". Firefox and Microsoft browsers have a partial bug where they'll report transforms even if display:none BUT not any percentage-based values like translate(-50%, 8px) will be reported as if it's translate(0, 8px).
                            n = style.display;
                            style.display = "block";
                        }
                        if (!e.parentNode) {
                            dec = 1; //flag
                            _docElement.appendChild(e);
                        }
                        s = _getStyle(e, _transformPropCSS, null, true);
                        isDefault = (!s || s === "none" || s === "matrix(1, 0, 0, 1, 0, 0)");
                        if (n) {
                            style.display = n;
                        } else if (none) {
                            _removeProp(style, "display");
                        }
                        if (dec) {
                            _docElement.removeChild(e);
                        }
                    }
                    if (tm.svg || (e.getCTM && _isSVG(e))) {
                        if (isDefault && (style[_transformProp] + "").indexOf("matrix") !== -1) { //some browsers (like Chrome 40) don't correctly report transforms that are applied inline on an SVG element (they don't get included in the computed style), so we double-check here and accept matrix values
                            s = style[_transformProp];
                            isDefault = 0;
                        }
                        m = e.getAttribute("transform");
                        if (isDefault && m) {
                            if (m.indexOf("matrix") !== -1) { //just in case there's a "transform" value specified as an attribute instead of CSS style. Accept either a matrix() or simple translate() value though.
                                s = m;
                                isDefault = 0;
                            } else if (m.indexOf("translate") !== -1) {
                                s = "matrix(1,0,0,1," + m.match(/(?:\-|\b)[\d\-\.e]+\b/gi).join(",") + ")";
                                isDefault = 0;
                            }
                        }
                    }
                    if (isDefault) {
                        return _identity2DMatrix;
                    }
                    //split the matrix values out into an array (m for matrix)
                    m = (s || "").match(_numExp) || [];
                    i = m.length;
                    while (--i > -1) {
                        n = Number(m[i]);
                        m[i] = (dec = n - (n |= 0)) ? ((dec * rnd + (dec < 0 ? -0.5 : 0.5)) | 0) / rnd + n : n; //convert strings to Numbers and round to 5 decimal places to avoid issues with tiny numbers. Roughly 20x faster than Number.toFixed(). We also must make sure to round before dividing so that values like 0.9999999999 become 1 to avoid glitches in browser rendering and interpretation of flipped/rotated 3D matrices. And don't just multiply the number by rnd, floor it, and then divide by rnd because the bitwise operations max out at a 32-bit signed integer, thus it could get clipped at a relatively low value (like 22,000.00000 for example).
                    }
                    return (force2D && m.length > 6) ? [m[0], m[1], m[4], m[5], m[12], m[13]] : m;
                },
    
                /**
                 * Parses the transform values for an element, returning an object with x, y, z, scaleX, scaleY, scaleZ, rotation, rotationX, rotationY, skewX, and skewY properties. Note: by default (for performance reasons), all skewing is combined into skewX and rotation but skewY still has a place in the transform object so that we can record how much of the skew is attributed to skewX vs skewY. Remember, a skewY of 10 looks the same as a rotation of 10 and skewX of -10.
                 * @param {!Object} t target element
                 * @param {Object=} cs computed style object (optional)
                 * @param {boolean=} rec if true, the transform values will be recorded to the target element's _gsTransform object, like target._gsTransform = {x:0, y:0, z:0, scaleX:1...}
                 * @param {boolean=} parse if true, we'll ignore any _gsTransform values that already exist on the element, and force a reparsing of the css (calculated style)
                 * @return {object} object containing all of the transform properties/values like {x:0, y:0, z:0, scaleX:1...}
                 */
                _getTransform = _internals.getTransform = function(t, cs, rec, parse) {
                    if (t._gsTransform && rec && !parse) {
                        return t._gsTransform; //if the element already has a _gsTransform, use that. Note: some browsers don't accurately return the calculated style for the transform (particularly for SVG), so it's almost always safest to just use the values we've already applied rather than re-parsing things.
                    }
                    var tm = rec ? t._gsTransform || new Transform() : new Transform(),
                        invX = (tm.scaleX < 0), //in order to interpret things properly, we need to know if the user applied a negative scaleX previously so that we can adjust the rotation and skewX accordingly. Otherwise, if we always interpret a flipped matrix as affecting scaleY and the user only wants to tween the scaleX on multiple sequential tweens, it would keep the negative scaleY without that being the user's intent.
                        min = 0.00002,
                        rnd = 100000,
                        zOrigin = _supports3D ? parseFloat(_getStyle(t, _transformOriginProp, cs, false, "0 0 0").split(" ")[2]) || tm.zOrigin  || 0 : 0,
                        defaultTransformPerspective = parseFloat(CSSPlugin.defaultTransformPerspective) || 0,
                        m, i, scaleX, scaleY, rotation, skewX;
    
                    tm.svg = !!(t.getCTM && _isSVG(t));
                    if (tm.svg) {
                        _parseSVGOrigin(t, _getStyle(t, _transformOriginProp, cs, false, "50% 50%") + "", tm, t.getAttribute("data-svg-origin"));
                        _useSVGTransformAttr = CSSPlugin.useSVGTransformAttr || _forceSVGTransformAttr;
                    }
                    m = _getMatrix(t);
                    if (m !== _identity2DMatrix) {
    
                        if (m.length === 16) {
                            //we'll only look at these position-related 6 variables first because if x/y/z all match, it's relatively safe to assume we don't need to re-parse everything which risks losing important rotational information (like rotationX:180 plus rotationY:180 would look the same as rotation:180 - there's no way to know for sure which direction was taken based solely on the matrix3d() values)
                            var a11 = m[0], a21 = m[1], a31 = m[2], a41 = m[3],
                                a12 = m[4], a22 = m[5], a32 = m[6], a42 = m[7],
                                a13 = m[8], a23 = m[9], a33 = m[10],
                                a14 = m[12], a24 = m[13], a34 = m[14],
                                a43 = m[11],
                                angle = Math.atan2(a32, a33),
                                t1, t2, t3, t4, cos, sin;
                            //we manually compensate for non-zero z component of transformOrigin to work around bugs in Safari
                            if (tm.zOrigin) {
                                a34 = -tm.zOrigin;
                                a14 = a13*a34-m[12];
                                a24 = a23*a34-m[13];
                                a34 = a33*a34+tm.zOrigin-m[14];
                            }
                            //note for possible future consolidation: rotationX: Math.atan2(a32, a33), rotationY: Math.atan2(-a31, Math.sqrt(a33 * a33 + a32 * a32)), rotation: Math.atan2(a21, a11), skew: Math.atan2(a12, a22). However, it doesn't seem to be quite as reliable as the full-on backwards rotation procedure.
                            tm.rotationX = angle * _RAD2DEG;
                            //rotationX
                            if (angle) {
                                cos = Math.cos(-angle);
                                sin = Math.sin(-angle);
                                t1 = a12*cos+a13*sin;
                                t2 = a22*cos+a23*sin;
                                t3 = a32*cos+a33*sin;
                                a13 = a12*-sin+a13*cos;
                                a23 = a22*-sin+a23*cos;
                                a33 = a32*-sin+a33*cos;
                                a43 = a42*-sin+a43*cos;
                                a12 = t1;
                                a22 = t2;
                                a32 = t3;
                            }
                            //rotationY
                            angle = Math.atan2(-a31, a33);
                            tm.rotationY = angle * _RAD2DEG;
                            if (angle) {
                                cos = Math.cos(-angle);
                                sin = Math.sin(-angle);
                                t1 = a11*cos-a13*sin;
                                t2 = a21*cos-a23*sin;
                                t3 = a31*cos-a33*sin;
                                a23 = a21*sin+a23*cos;
                                a33 = a31*sin+a33*cos;
                                a43 = a41*sin+a43*cos;
                                a11 = t1;
                                a21 = t2;
                                a31 = t3;
                            }
                            //rotationZ
                            angle = Math.atan2(a21, a11);
                            tm.rotation = angle * _RAD2DEG;
                            if (angle) {
                                cos = Math.cos(angle);
                                sin = Math.sin(angle);
                                t1 = a11*cos+a21*sin;
                                t2 = a12*cos+a22*sin;
                                t3 = a13*cos+a23*sin;
                                a21 = a21*cos-a11*sin;
                                a22 = a22*cos-a12*sin;
                                a23 = a23*cos-a13*sin;
                                a11 = t1;
                                a12 = t2;
                                a13 = t3;
                            }
    
                            if (tm.rotationX && Math.abs(tm.rotationX) + Math.abs(tm.rotation) > 359.9) { //when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.
                                tm.rotationX = tm.rotation = 0;
                                tm.rotationY = 180 - tm.rotationY;
                            }
    
                            //skewX
                            angle = Math.atan2(a12, a22);
    
                            //scales
                            tm.scaleX = ((Math.sqrt(a11 * a11 + a21 * a21 + a31 * a31) * rnd + 0.5) | 0) / rnd;
                            tm.scaleY = ((Math.sqrt(a22 * a22 + a32 * a32) * rnd + 0.5) | 0) / rnd;
                            tm.scaleZ = ((Math.sqrt(a13 * a13 + a23 * a23 + a33 * a33) * rnd + 0.5) | 0) / rnd;
                            a11 /= tm.scaleX;
                            a12 /= tm.scaleY;
                            a21 /= tm.scaleX;
                            a22 /= tm.scaleY;
                            if (Math.abs(angle) > min) {
                                tm.skewX = angle * _RAD2DEG;
                                a12 = 0; //unskews
                                if (tm.skewType !== "simple") {
                                    tm.scaleY *= 1 / Math.cos(angle); //by default, we compensate the scale based on the skew so that the element maintains a similar proportion when skewed, so we have to alter the scaleY here accordingly to match the default (non-adjusted) skewing that CSS does (stretching more and more as it skews).
                                }
    
                            } else {
                                tm.skewX = 0;
                            }
    
                            /* //for testing purposes
                            var transform = "matrix3d(",
                                comma = ",",
                                zero = "0";
                            a13 /= tm.scaleZ;
                            a23 /= tm.scaleZ;
                            a31 /= tm.scaleX;
                            a32 /= tm.scaleY;
                            a33 /= tm.scaleZ;
                            transform += ((a11 < min && a11 > -min) ? zero : a11) + comma + ((a21 < min && a21 > -min) ? zero : a21) + comma + ((a31 < min && a31 > -min) ? zero : a31);
                            transform += comma + ((a41 < min && a41 > -min) ? zero : a41) + comma + ((a12 < min && a12 > -min) ? zero : a12) + comma + ((a22 < min && a22 > -min) ? zero : a22);
                            transform += comma + ((a32 < min && a32 > -min) ? zero : a32) + comma + ((a42 < min && a42 > -min) ? zero : a42) + comma + ((a13 < min && a13 > -min) ? zero : a13);
                            transform += comma + ((a23 < min && a23 > -min) ? zero : a23) + comma + ((a33 < min && a33 > -min) ? zero : a33) + comma + ((a43 < min && a43 > -min) ? zero : a43) + comma;
                            transform += a14 + comma + a24 + comma + a34 + comma + (tm.perspective ? (1 + (-a34 / tm.perspective)) : 1) + ")";
                            console.log(transform);
                            document.querySelector(".test").style[_transformProp] = transform;
                            */
    
                            tm.perspective = a43 ? 1 / ((a43 < 0) ? -a43 : a43) : 0;
                            tm.x = a14;
                            tm.y = a24;
                            tm.z = a34;
                            if (tm.svg) {
                                tm.x -= tm.xOrigin - (tm.xOrigin * a11 - tm.yOrigin * a12);
                                tm.y -= tm.yOrigin - (tm.yOrigin * a21 - tm.xOrigin * a22);
                            }
    
                        } else if ((!_supports3D || parse || !m.length || tm.x !== m[4] || tm.y !== m[5] || (!tm.rotationX && !tm.rotationY))) { //sometimes a 6-element matrix is returned even when we performed 3D transforms, like if rotationX and rotationY are 180. In cases like this, we still need to honor the 3D transforms. If we just rely on the 2D info, it could affect how the data is interpreted, like scaleY might get set to -1 or rotation could get offset by 180 degrees. For example, do a TweenLite.to(element, 1, {css:{rotationX:180, rotationY:180}}) and then later, TweenLite.to(element, 1, {css:{rotationX:0}}) and without this conditional logic in place, it'd jump to a state of being unrotated when the 2nd tween starts. Then again, we need to honor the fact that the user COULD alter the transforms outside of CSSPlugin, like by manually applying new css, so we try to sense that by looking at x and y because if those changed, we know the changes were made outside CSSPlugin and we force a reinterpretation of the matrix values. Also, in Webkit browsers, if the element's "display" is "none", its calculated style value will always return empty, so if we've already recorded the values in the _gsTransform object, we'll just rely on those.
                            var k = (m.length >= 6),
                                a = k ? m[0] : 1,
                                b = m[1] || 0,
                                c = m[2] || 0,
                                d = k ? m[3] : 1;
                            tm.x = m[4] || 0;
                            tm.y = m[5] || 0;
                            scaleX = Math.sqrt(a * a + b * b);
                            scaleY = Math.sqrt(d * d + c * c);
                            rotation = (a || b) ? Math.atan2(b, a) * _RAD2DEG : tm.rotation || 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).
                            skewX = (c || d) ? Math.atan2(c, d) * _RAD2DEG + rotation : tm.skewX || 0;
                            tm.scaleX = scaleX;
                            tm.scaleY = scaleY;
                            tm.rotation = rotation;
                            tm.skewX = skewX;
                            if (_supports3D) {
                                tm.rotationX = tm.rotationY = tm.z = 0;
                                tm.perspective = defaultTransformPerspective;
                                tm.scaleZ = 1;
                            }
                            if (tm.svg) {
                                tm.x -= tm.xOrigin - (tm.xOrigin * a + tm.yOrigin * c);
                                tm.y -= tm.yOrigin - (tm.xOrigin * b + tm.yOrigin * d);
                            }
                        }
                        if (Math.abs(tm.skewX) > 90 && Math.abs(tm.skewX) < 270) {
                            if (invX) {
                                tm.scaleX *= -1;
                                tm.skewX += (tm.rotation <= 0) ? 180 : -180;
                                tm.rotation += (tm.rotation <= 0) ? 180 : -180;
                            } else {
                                tm.scaleY *= -1;
                                tm.skewX += (tm.skewX <= 0) ? 180 : -180;
                            }
                        }
                        tm.zOrigin = zOrigin;
                        //some browsers have a hard time with very small values like 2.4492935982947064e-16 (notice the "e-" towards the end) and would render the object slightly off. So we round to 0 in these cases. The conditional logic here is faster than calling Math.abs(). Also, browsers tend to render a SLIGHTLY rotated object in a fuzzy way, so we need to snap to exactly 0 when appropriate.
                        for (i in tm) {
                            if (tm[i] < min) if (tm[i] > -min) {
                                tm[i] = 0;
                            }
                        }
                    }
                    //DEBUG: _log("parsed rotation of " + t.getAttribute("id")+": "+(tm.rotationX)+", "+(tm.rotationY)+", "+(tm.rotation)+", scale: "+tm.scaleX+", "+tm.scaleY+", "+tm.scaleZ+", position: "+tm.x+", "+tm.y+", "+tm.z+", perspective: "+tm.perspective+ ", origin: "+ tm.xOrigin+ ","+ tm.yOrigin);
                    if (rec) {
                        t._gsTransform = tm; //record to the object's _gsTransform which we use so that tweens can control individual properties independently (we need all the properties to accurately recompose the matrix in the setRatio() method)
                        if (tm.svg) { //if we're supposed to apply transforms to the SVG element's "transform" attribute, make sure there aren't any CSS transforms applied or they'll override the attribute ones. Also clear the transform attribute if we're using CSS, just to be clean.
                            if (_useSVGTransformAttr && t.style[_transformProp]) {
                                TweenLite.delayedCall(0.001, function(){ //if we apply this right away (before anything has rendered), we risk there being no transforms for a brief moment and it also interferes with adjusting the transformOrigin in a tween with immediateRender:true (it'd try reading the matrix and it wouldn't have the appropriate data in place because we just removed it).
                                    _removeProp(t.style, _transformProp);
                                });
                            } else if (!_useSVGTransformAttr && t.getAttribute("transform")) {
                                TweenLite.delayedCall(0.001, function(){
                                    t.removeAttribute("transform");
                                });
                            }
                        }
                    }
                    return tm;
                },
    
                //for setting 2D transforms in IE6, IE7, and IE8 (must use a "filter" to emulate the behavior of modern day browser transforms)
                _setIETransformRatio = function(v) {
                    var t = this.data, //refers to the element's _gsTransform object
                        ang = -t.rotation * _DEG2RAD,
                        skew = ang + t.skewX * _DEG2RAD,
                        rnd = 100000,
                        a = ((Math.cos(ang) * t.scaleX * rnd) | 0) / rnd,
                        b = ((Math.sin(ang) * t.scaleX * rnd) | 0) / rnd,
                        c = ((Math.sin(skew) * -t.scaleY * rnd) | 0) / rnd,
                        d = ((Math.cos(skew) * t.scaleY * rnd) | 0) / rnd,
                        style = this.t.style,
                        cs = this.t.currentStyle,
                        filters, val;
                    if (!cs) {
                        return;
                    }
                    val = b; //just for swapping the variables an inverting them (reused "val" to avoid creating another variable in memory). IE's filter matrix uses a non-standard matrix configuration (angle goes the opposite way, and b and c are reversed and inverted)
                    b = -c;
                    c = -val;
                    filters = cs.filter;
                    style.filter = ""; //remove filters so that we can accurately measure offsetWidth/offsetHeight
                    var w = this.t.offsetWidth,
                        h = this.t.offsetHeight,
                        clip = (cs.position !== "absolute"),
                        m = "progid:DXImageTransform.Microsoft.Matrix(M11=" + a + ", M12=" + b + ", M21=" + c + ", M22=" + d,
                        ox = t.x + (w * t.xPercent / 100),
                        oy = t.y + (h * t.yPercent / 100),
                        dx, dy;
    
                    //if transformOrigin is being used, adjust the offset x and y
                    if (t.ox != null) {
                        dx = ((t.oxp) ? w * t.ox * 0.01 : t.ox) - w / 2;
                        dy = ((t.oyp) ? h * t.oy * 0.01 : t.oy) - h / 2;
                        ox += dx - (dx * a + dy * b);
                        oy += dy - (dx * c + dy * d);
                    }
    
                    if (!clip) {
                        m += ", sizingMethod='auto expand')";
                    } else {
                        dx = (w / 2);
                        dy = (h / 2);
                        //translate to ensure that transformations occur around the correct origin (default is center).
                        m += ", Dx=" + (dx - (dx * a + dy * b) + ox) + ", Dy=" + (dy - (dx * c + dy * d) + oy) + ")";
                    }
                    if (filters.indexOf("DXImageTransform.Microsoft.Matrix(") !== -1) {
                        style.filter = filters.replace(_ieSetMatrixExp, m);
                    } else {
                        style.filter = m + " " + filters; //we must always put the transform/matrix FIRST (before alpha(opacity=xx)) to avoid an IE bug that slices part of the object when rotation is applied with alpha.
                    }
    
                    //at the end or beginning of the tween, if the matrix is normal (1, 0, 0, 1) and opacity is 100 (or doesn't exist), remove the filter to improve browser performance.
                    if (v === 0 || v === 1) if (a === 1) if (b === 0) if (c === 0) if (d === 1) if (!clip || m.indexOf("Dx=0, Dy=0") !== -1) if (!_opacityExp.test(filters) || parseFloat(RegExp.$1) === 100) if (filters.indexOf("gradient(" && filters.indexOf("Alpha")) === -1) {
                        style.removeAttribute("filter");
                    }
    
                    //we must set the margins AFTER applying the filter in order to avoid some bugs in IE8 that could (in rare scenarios) cause them to be ignored intermittently (vibration).
                    if (!clip) {
                        var mult = (_ieVers < 8) ? 1 : -1, //in Internet Explorer 7 and before, the box model is broken, causing the browser to treat the width/height of the actual rotated filtered image as the width/height of the box itself, but Microsoft corrected that in IE8. We must use a negative offset in IE8 on the right/bottom
                            marg, prop, dif;
                        dx = t.ieOffsetX || 0;
                        dy = t.ieOffsetY || 0;
                        t.ieOffsetX = Math.round((w - ((a < 0 ? -a : a) * w + (b < 0 ? -b : b) * h)) / 2 + ox);
                        t.ieOffsetY = Math.round((h - ((d < 0 ? -d : d) * h + (c < 0 ? -c : c) * w)) / 2 + oy);
                        for (i = 0; i < 4; i++) {
                            prop = _margins[i];
                            marg = cs[prop];
                            //we need to get the current margin in case it is being tweened separately (we want to respect that tween's changes)
                            val = (marg.indexOf("px") !== -1) ? parseFloat(marg) : _convertToPixels(this.t, prop, parseFloat(marg), marg.replace(_suffixExp, "")) || 0;
                            if (val !== t[prop]) {
                                dif = (i < 2) ? -t.ieOffsetX : -t.ieOffsetY; //if another tween is controlling a margin, we cannot only apply the difference in the ieOffsets, so we essentially zero-out the dx and dy here in that case. We record the margin(s) later so that we can keep comparing them, making this code very flexible.
                            } else {
                                dif = (i < 2) ? dx - t.ieOffsetX : dy - t.ieOffsetY;
                            }
                            style[prop] = (t[prop] = Math.round( val - dif * ((i === 0 || i === 2) ? 1 : mult) )) + "px";
                        }
                    }
                },
    
                /* translates a super small decimal to a string WITHOUT scientific notation
                _safeDecimal = function(n) {
                    var s = (n < 0 ? -n : n) + "",
                        a = s.split("e-");
                    return (n < 0 ? "-0." : "0.") + new Array(parseInt(a[1], 10) || 0).join("0") + a[0].split(".").join("");
                },
                */
    
                _setTransformRatio = _internals.set3DTransformRatio = _internals.setTransformRatio = function(v) {
                    var t = this.data, //refers to the element's _gsTransform object
                        style = this.t.style,
                        angle = t.rotation,
                        rotationX = t.rotationX,
                        rotationY = t.rotationY,
                        sx = t.scaleX,
                        sy = t.scaleY,
                        sz = t.scaleZ,
                        x = t.x,
                        y = t.y,
                        z = t.z,
                        isSVG = t.svg,
                        perspective = t.perspective,
                        force3D = t.force3D,
                        skewY = t.skewY,
                        skewX = t.skewX,
                        t1,	a11, a12, a13, a21, a22, a23, a31, a32, a33, a41, a42, a43,
                        zOrigin, min, cos, sin, t2, transform, comma, zero, skew, rnd;
                    if (skewY) { //for performance reasons, we combine all skewing into the skewX and rotation values. Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of 10 degrees.
                        skewX += skewY;
                        angle += skewY;
                    }
    
                    //check to see if we should render as 2D (and SVGs must use 2D when _useSVGTransformAttr is true)
                    if (((((v === 1 || v === 0) && force3D === "auto" && (this.tween._totalTime === this.tween._totalDuration || !this.tween._totalTime)) || !force3D) && !z && !perspective && !rotationY && !rotationX && sz === 1) || (_useSVGTransformAttr && isSVG) || !_supports3D) { //on the final render (which could be 0 for a from tween), if there are no 3D aspects, render in 2D to free up memory and improve performance especially on mobile devices. Check the tween's totalTime/totalDuration too in order to make sure it doesn't happen between repeats if it's a repeating tween.
    
                        //2D
                        if (angle || skewX || isSVG) {
                            angle *= _DEG2RAD;
                            skew = skewX * _DEG2RAD;
                            rnd = 100000;
                            a11 = Math.cos(angle) * sx;
                            a21 = Math.sin(angle) * sx;
                            a12 = Math.sin(angle - skew) * -sy;
                            a22 = Math.cos(angle - skew) * sy;
                            if (skew && t.skewType === "simple") { //by default, we compensate skewing on the other axis to make it look more natural, but you can set the skewType to "simple" to use the uncompensated skewing that CSS does
                                t1 = Math.tan(skew - skewY * _DEG2RAD);
                                t1 = Math.sqrt(1 + t1 * t1);
                                a12 *= t1;
                                a22 *= t1;
                                if (skewY) {
                                    t1 = Math.tan(skewY * _DEG2RAD);
                                    t1 = Math.sqrt(1 + t1 * t1);
                                    a11 *= t1;
                                    a21 *= t1;
                                }
                            }
                            if (isSVG) {
                                x += t.xOrigin - (t.xOrigin * a11 + t.yOrigin * a12) + t.xOffset;
                                y += t.yOrigin - (t.xOrigin * a21 + t.yOrigin * a22) + t.yOffset;
                                if (_useSVGTransformAttr && (t.xPercent || t.yPercent)) { //The SVG spec doesn't support percentage-based translation in the "transform" attribute, so we merge it into the matrix to simulate it.
                                    min = this.t.getBBox();
                                    x += t.xPercent * 0.01 * min.width;
                                    y += t.yPercent * 0.01 * min.height;
                                }
                                min = 0.000001;
                                if (x < min) if (x > -min) {
                                    x = 0;
                                }
                                if (y < min) if (y > -min) {
                                    y = 0;
                                }
                            }
                            transform = (((a11 * rnd) | 0) / rnd) + "," + (((a21 * rnd) | 0) / rnd) + "," + (((a12 * rnd) | 0) / rnd) + "," + (((a22 * rnd) | 0) / rnd) + "," + x + "," + y + ")";
                            if (isSVG && _useSVGTransformAttr) {
                                this.t.setAttribute("transform", "matrix(" + transform);
                            } else {
                                //some browsers have a hard time with very small values like 2.4492935982947064e-16 (notice the "e-" towards the end) and would render the object slightly off. So we round to 5 decimal places.
                                style[_transformProp] = ((t.xPercent || t.yPercent) ? "translate(" + t.xPercent + "%," + t.yPercent + "%) matrix(" : "matrix(") + transform;
                            }
                        } else {
                            style[_transformProp] = ((t.xPercent || t.yPercent) ? "translate(" + t.xPercent + "%," + t.yPercent + "%) matrix(" : "matrix(") + sx + ",0,0," + sy + "," + x + "," + y + ")";
                        }
                        return;
    
                    }
                    if (_isFirefox) { //Firefox has a bug (at least in v25) that causes it to render the transparent part of 32-bit PNG images as black when displayed inside an iframe and the 3D scale is very small and doesn't change sufficiently enough between renders (like if you use a Power4.easeInOut to scale from 0 to 1 where the beginning values only change a tiny amount to begin the tween before accelerating). In this case, we force the scale to be 0.00002 instead which is visually the same but works around the Firefox issue.
                        min = 0.0001;
                        if (sx < min && sx > -min) {
                            sx = sz = 0.00002;
                        }
                        if (sy < min && sy > -min) {
                            sy = sz = 0.00002;
                        }
                        if (perspective && !t.z && !t.rotationX && !t.rotationY) { //Firefox has a bug that causes elements to have an odd super-thin, broken/dotted black border on elements that have a perspective set but aren't utilizing 3D space (no rotationX, rotationY, or z).
                            perspective = 0;
                        }
                    }
                    if (angle || skewX) {
                        angle *= _DEG2RAD;
                        cos = a11 = Math.cos(angle);
                        sin = a21 = Math.sin(angle);
                        if (skewX) {
                            angle -= skewX * _DEG2RAD;
                            cos = Math.cos(angle);
                            sin = Math.sin(angle);
                            if (t.skewType === "simple") { //by default, we compensate skewing on the other axis to make it look more natural, but you can set the skewType to "simple" to use the uncompensated skewing that CSS does
                                t1 = Math.tan((skewX - skewY) * _DEG2RAD);
                                t1 = Math.sqrt(1 + t1 * t1);
                                cos *= t1;
                                sin *= t1;
                                if (t.skewY) {
                                    t1 = Math.tan(skewY * _DEG2RAD);
                                    t1 = Math.sqrt(1 + t1 * t1);
                                    a11 *= t1;
                                    a21 *= t1;
                                }
                            }
                        }
                        a12 = -sin;
                        a22 = cos;
    
                    } else if (!rotationY && !rotationX && sz === 1 && !perspective && !isSVG) { //if we're only translating and/or 2D scaling, this is faster...
                        style[_transformProp] = ((t.xPercent || t.yPercent) ? "translate(" + t.xPercent + "%," + t.yPercent + "%) translate3d(" : "translate3d(") + x + "px," + y + "px," + z +"px)" + ((sx !== 1 || sy !== 1) ? " scale(" + sx + "," + sy + ")" : "");
                        return;
                    } else {
                        a11 = a22 = 1;
                        a12 = a21 = 0;
                    }
                    // KEY  INDEX   AFFECTS a[row][column]
                    // a11  0       rotation, rotationY, scaleX
                    // a21  1       rotation, rotationY, scaleX
                    // a31  2       rotationY, scaleX
                    // a41  3       rotationY, scaleX
                    // a12  4       rotation, skewX, rotationX, scaleY
                    // a22  5       rotation, skewX, rotationX, scaleY
                    // a32  6       rotationX, scaleY
                    // a42  7       rotationX, scaleY
                    // a13  8       rotationY, rotationX, scaleZ
                    // a23  9       rotationY, rotationX, scaleZ
                    // a33  10      rotationY, rotationX, scaleZ
                    // a43  11      rotationY, rotationX, perspective, scaleZ
                    // a14  12      x, zOrigin, svgOrigin
                    // a24  13      y, zOrigin, svgOrigin
                    // a34  14      z, zOrigin
                    // a44  15
                    // rotation: Math.atan2(a21, a11)
                    // rotationY: Math.atan2(a13, a33) (or Math.atan2(a13, a11))
                    // rotationX: Math.atan2(a32, a33)
                    a33 = 1;
                    a13 = a23 = a31 = a32 = a41 = a42 = 0;
                    a43 = (perspective) ? -1 / perspective : 0;
                    zOrigin = t.zOrigin;
                    min = 0.000001; //threshold below which browsers use scientific notation which won't work.
                    comma = ",";
                    zero = "0";
                    angle = rotationY * _DEG2RAD;
                    if (angle) {
                        cos = Math.cos(angle);
                        sin = Math.sin(angle);
                        a31 = -sin;
                        a41 = a43*-sin;
                        a13 = a11*sin;
                        a23 = a21*sin;
                        a33 = cos;
                        a43 *= cos;
                        a11 *= cos;
                        a21 *= cos;
                    }
                    angle = rotationX * _DEG2RAD;
                    if (angle) {
                        cos = Math.cos(angle);
                        sin = Math.sin(angle);
                        t1 = a12*cos+a13*sin;
                        t2 = a22*cos+a23*sin;
                        a32 = a33*sin;
                        a42 = a43*sin;
                        a13 = a12*-sin+a13*cos;
                        a23 = a22*-sin+a23*cos;
                        a33 = a33*cos;
                        a43 = a43*cos;
                        a12 = t1;
                        a22 = t2;
                    }
                    if (sz !== 1) {
                        a13*=sz;
                        a23*=sz;
                        a33*=sz;
                        a43*=sz;
                    }
                    if (sy !== 1) {
                        a12*=sy;
                        a22*=sy;
                        a32*=sy;
                        a42*=sy;
                    }
                    if (sx !== 1) {
                        a11*=sx;
                        a21*=sx;
                        a31*=sx;
                        a41*=sx;
                    }
    
                    if (zOrigin || isSVG) {
                        if (zOrigin) {
                            x += a13*-zOrigin;
                            y += a23*-zOrigin;
                            z += a33*-zOrigin+zOrigin;
                        }
                        if (isSVG) { //due to bugs in some browsers, we need to manage the transform-origin of SVG manually
                            x += t.xOrigin - (t.xOrigin * a11 + t.yOrigin * a12) + t.xOffset;
                            y += t.yOrigin - (t.xOrigin * a21 + t.yOrigin * a22) + t.yOffset;
                        }
                        if (x < min && x > -min) {
                            x = zero;
                        }
                        if (y < min && y > -min) {
                            y = zero;
                        }
                        if (z < min && z > -min) {
                            z = 0; //don't use string because we calculate perspective later and need the number.
                        }
                    }
    
                    //optimized way of concatenating all the values into a string. If we do it all in one shot, it's slower because of the way browsers have to create temp strings and the way it affects memory. If we do it piece-by-piece with +=, it's a bit slower too. We found that doing it in these sized chunks works best overall:
                    transform = ((t.xPercent || t.yPercent) ? "translate(" + t.xPercent + "%," + t.yPercent + "%) matrix3d(" : "matrix3d(");
                    transform += ((a11 < min && a11 > -min) ? zero : a11) + comma + ((a21 < min && a21 > -min) ? zero : a21) + comma + ((a31 < min && a31 > -min) ? zero : a31);
                    transform += comma + ((a41 < min && a41 > -min) ? zero : a41) + comma + ((a12 < min && a12 > -min) ? zero : a12) + comma + ((a22 < min && a22 > -min) ? zero : a22);
                    if (rotationX || rotationY || sz !== 1) { //performance optimization (often there's no rotationX or rotationY, so we can skip these calculations)
                        transform += comma + ((a32 < min && a32 > -min) ? zero : a32) + comma + ((a42 < min && a42 > -min) ? zero : a42) + comma + ((a13 < min && a13 > -min) ? zero : a13);
                        transform += comma + ((a23 < min && a23 > -min) ? zero : a23) + comma + ((a33 < min && a33 > -min) ? zero : a33) + comma + ((a43 < min && a43 > -min) ? zero : a43) + comma;
                    } else {
                        transform += ",0,0,0,0,1,0,";
                    }
                    transform += x + comma + y + comma + z + comma + (perspective ? (1 + (-z / perspective)) : 1) + ")";
    
                    style[_transformProp] = transform;
                };
    
            p = Transform.prototype;
            p.x = p.y = p.z = p.skewX = p.skewY = p.rotation = p.rotationX = p.rotationY = p.zOrigin = p.xPercent = p.yPercent = p.xOffset = p.yOffset = 0;
            p.scaleX = p.scaleY = p.scaleZ = 1;
    
            _registerComplexSpecialProp("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin", {parser:function(t, e, parsingProp, cssp, pt, plugin, vars) {
                if (cssp._lastParsedTransform === vars) { return pt; } //only need to parse the transform once, and only if the browser supports it.
                cssp._lastParsedTransform = vars;
                var scaleFunc = (vars.scale && typeof(vars.scale) === "function") ? vars.scale : 0, //if there's a function-based "scale" value, swap in the resulting numeric value temporarily. Otherwise, if it's called for both scaleX and scaleY independently, they may not match (like if the function uses Math.random()).
                    swapFunc;
                if (typeof(vars[parsingProp]) === "function") { //whatever property triggers the initial parsing might be a function-based value in which case it already got called in parse(), thus we don't want to call it again in here. The most efficient way to avoid this is to temporarily swap the value directly into the vars object, and then after we do all our parsing in this function, we'll swap it back again.
                    swapFunc = vars[parsingProp];
                    vars[parsingProp] = e;
                }
                if (scaleFunc) {
                    vars.scale = scaleFunc(_index, t);
                }
                var originalGSTransform = t._gsTransform,
                    style = t.style,
                    min = 0.000001,
                    i = _transformProps.length,
                    v = vars,
                    endRotations = {},
                    transformOriginString = "transformOrigin",
                    m1 = _getTransform(t, _cs, true, v.parseTransform),
                    orig = v.transform && ((typeof(v.transform) === "function") ? v.transform(_index, _target) : v.transform),
                    m2, copy, has3D, hasChange, dr, x, y, matrix, p;
                m1.skewType = v.skewType || m1.skewType || CSSPlugin.defaultSkewType;
                cssp._transform = m1;
                if (orig && typeof(orig) === "string" && _transformProp) { //for values like transform:"rotate(60deg) scale(0.5, 0.8)"
                    copy = _tempDiv.style; //don't use the original target because it might be SVG in which case some browsers don't report computed style correctly.
                    copy[_transformProp] = orig;
                    copy.display = "block"; //if display is "none", the browser often refuses to report the transform properties correctly.
                    copy.position = "absolute";
                    _doc.body.appendChild(_tempDiv);
                    m2 = _getTransform(_tempDiv, null, false);
                    if (m1.skewType === "simple") { //the default _getTransform() reports the skewX/scaleY as if skewType is "compensated", thus we need to adjust that here if skewType is "simple".
                        m2.scaleY *= Math.cos(m2.skewX * _DEG2RAD);
                    }
                    if (m1.svg) { //if it's an SVG element, x/y part of the matrix will be affected by whatever we use as the origin and the offsets, so compensate here...
                        x = m1.xOrigin;
                        y = m1.yOrigin;
                        m2.x -= m1.xOffset;
                        m2.y -= m1.yOffset;
                        if (v.transformOrigin || v.svgOrigin) { //if this tween is altering the origin, we must factor that in here. The actual work of recording the transformOrigin values and setting up the PropTween is done later (still inside this function) so we cannot leave the changes intact here - we only want to update the x/y accordingly.
                            orig = {};
                            _parseSVGOrigin(t, _parsePosition(v.transformOrigin), orig, v.svgOrigin, v.smoothOrigin, true);
                            x = orig.xOrigin;
                            y = orig.yOrigin;
                            m2.x -= orig.xOffset - m1.xOffset;
                            m2.y -= orig.yOffset - m1.yOffset;
                        }
                        if (x || y) {
                            matrix = _getMatrix(_tempDiv, true);
                            m2.x -= x - (x * matrix[0] + y * matrix[2]);
                            m2.y -= y - (x * matrix[1] + y * matrix[3]);
                        }
                    }
                    _doc.body.removeChild(_tempDiv);
                    if (!m2.perspective) {
                        m2.perspective = m1.perspective; //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.
                    }
                    if (v.xPercent != null) {
                        m2.xPercent = _parseVal(v.xPercent, m1.xPercent);
                    }
                    if (v.yPercent != null) {
                        m2.yPercent = _parseVal(v.yPercent, m1.yPercent);
                    }
                } else if (typeof(v) === "object") { //for values like scaleX, scaleY, rotation, x, y, skewX, and skewY or transform:{...} (object)
                    m2 = {scaleX:_parseVal((v.scaleX != null) ? v.scaleX : v.scale, m1.scaleX),
                        scaleY:_parseVal((v.scaleY != null) ? v.scaleY : v.scale, m1.scaleY),
                        scaleZ:_parseVal(v.scaleZ, m1.scaleZ),
                        x:_parseVal(v.x, m1.x),
                        y:_parseVal(v.y, m1.y),
                        z:_parseVal(v.z, m1.z),
                        xPercent:_parseVal(v.xPercent, m1.xPercent),
                        yPercent:_parseVal(v.yPercent, m1.yPercent),
                        perspective:_parseVal(v.transformPerspective, m1.perspective)};
                    dr = v.directionalRotation;
                    if (dr != null) {
                        if (typeof(dr) === "object") {
                            for (copy in dr) {
                                v[copy] = dr[copy];
                            }
                        } else {
                            v.rotation = dr;
                        }
                    }
                    if (typeof(v.x) === "string" && v.x.indexOf("%") !== -1) {
                        m2.x = 0;
                        m2.xPercent = _parseVal(v.x, m1.xPercent);
                    }
                    if (typeof(v.y) === "string" && v.y.indexOf("%") !== -1) {
                        m2.y = 0;
                        m2.yPercent = _parseVal(v.y, m1.yPercent);
                    }
    
                    m2.rotation = _parseAngle(("rotation" in v) ? v.rotation : ("shortRotation" in v) ? v.shortRotation + "_short" : ("rotationZ" in v) ? v.rotationZ : m1.rotation, m1.rotation, "rotation", endRotations);
                    if (_supports3D) {
                        m2.rotationX = _parseAngle(("rotationX" in v) ? v.rotationX : ("shortRotationX" in v) ? v.shortRotationX + "_short" : m1.rotationX || 0, m1.rotationX, "rotationX", endRotations);
                        m2.rotationY = _parseAngle(("rotationY" in v) ? v.rotationY : ("shortRotationY" in v) ? v.shortRotationY + "_short" : m1.rotationY || 0, m1.rotationY, "rotationY", endRotations);
                    }
                    m2.skewX = _parseAngle(v.skewX, m1.skewX);
                    m2.skewY = _parseAngle(v.skewY, m1.skewY);
                }
                if (_supports3D && v.force3D != null) {
                    m1.force3D = v.force3D;
                    hasChange = true;
                }
    
                has3D = (m1.force3D || m1.z || m1.rotationX || m1.rotationY || m2.z || m2.rotationX || m2.rotationY || m2.perspective);
                if (!has3D && v.scale != null) {
                    m2.scaleZ = 1; //no need to tween scaleZ.
                }
    
                while (--i > -1) {
                    p = _transformProps[i];
                    orig = m2[p] - m1[p];
                    if (orig > min || orig < -min || v[p] != null || _forcePT[p] != null) {
                        hasChange = true;
                        pt = new CSSPropTween(m1, p, m1[p], orig, pt);
                        if (p in endRotations) {
                            pt.e = endRotations[p]; //directional rotations typically have compensated values during the tween, but we need to make sure they end at exactly what the user requested
                        }
                        pt.xs0 = 0; //ensures the value stays numeric in setRatio()
                        pt.plugin = plugin;
                        cssp._overwriteProps.push(pt.n);
                    }
                }
    
                orig = v.transformOrigin;
                if (m1.svg && (orig || v.svgOrigin)) {
                    x = m1.xOffset; //when we change the origin, in order to prevent things from jumping we adjust the x/y so we must record those here so that we can create PropTweens for them and flip them at the same time as the origin
                    y = m1.yOffset;
                    _parseSVGOrigin(t, _parsePosition(orig), m2, v.svgOrigin, v.smoothOrigin);
                    pt = _addNonTweeningNumericPT(m1, "xOrigin", (originalGSTransform ? m1 : m2).xOrigin, m2.xOrigin, pt, transformOriginString); //note: if there wasn't a transformOrigin defined yet, just start with the destination one; it's wasteful otherwise, and it causes problems with fromTo() tweens. For example, TweenLite.to("#wheel", 3, {rotation:180, transformOrigin:"50% 50%", delay:1}); TweenLite.fromTo("#wheel", 3, {scale:0.5, transformOrigin:"50% 50%"}, {scale:1, delay:2}); would cause a jump when the from values revert at the beginning of the 2nd tween.
                    pt = _addNonTweeningNumericPT(m1, "yOrigin", (originalGSTransform ? m1 : m2).yOrigin, m2.yOrigin, pt, transformOriginString);
                    if (x !== m1.xOffset || y !== m1.yOffset) {
                        pt = _addNonTweeningNumericPT(m1, "xOffset", (originalGSTransform ? x : m1.xOffset), m1.xOffset, pt, transformOriginString);
                        pt = _addNonTweeningNumericPT(m1, "yOffset", (originalGSTransform ? y : m1.yOffset), m1.yOffset, pt, transformOriginString);
                    }
                    orig = "0px 0px"; //certain browsers (like firefox) completely botch transform-origin, so we must remove it to prevent it from contaminating transforms. We manage it ourselves with xOrigin and yOrigin
                }
                if (orig || (_supports3D && has3D && m1.zOrigin)) { //if anything 3D is happening and there's a transformOrigin with a z component that's non-zero, we must ensure that the transformOrigin's z-component is set to 0 so that we can manually do those calculations to get around Safari bugs. Even if the user didn't specifically define a "transformOrigin" in this particular tween (maybe they did it via css directly).
                    if (_transformProp) {
                        hasChange = true;
                        p = _transformOriginProp;
                        orig = (orig || _getStyle(t, p, _cs, false, "50% 50%")) + ""; //cast as string to avoid errors
                        pt = new CSSPropTween(style, p, 0, 0, pt, -1, transformOriginString);
                        pt.b = style[p];
                        pt.plugin = plugin;
                        if (_supports3D) {
                            copy = m1.zOrigin;
                            orig = orig.split(" ");
                            m1.zOrigin = ((orig.length > 2 && !(copy !== 0 && orig[2] === "0px")) ? parseFloat(orig[2]) : copy) || 0; //Safari doesn't handle the z part of transformOrigin correctly, so we'll manually handle it in the _set3DTransformRatio() method.
                            pt.xs0 = pt.e = orig[0] + " " + (orig[1] || "50%") + " 0px"; //we must define a z value of 0px specifically otherwise iOS 5 Safari will stick with the old one (if one was defined)!
                            pt = new CSSPropTween(m1, "zOrigin", 0, 0, pt, -1, pt.n); //we must create a CSSPropTween for the _gsTransform.zOrigin so that it gets reset properly at the beginning if the tween runs backward (as opposed to just setting m1.zOrigin here)
                            pt.b = copy;
                            pt.xs0 = pt.e = m1.zOrigin;
                        } else {
                            pt.xs0 = pt.e = orig;
                        }
    
                        //for older versions of IE (6-8), we need to manually calculate things inside the setRatio() function. We record origin x and y (ox and oy) and whether or not the values are percentages (oxp and oyp).
                    } else {
                        _parsePosition(orig + "", m1);
                    }
                }
                if (hasChange) {
                    cssp._transformType = (!(m1.svg && _useSVGTransformAttr) && (has3D || this._transformType === 3)) ? 3 : 2; //quicker than calling cssp._enableTransforms();
                }
                if (swapFunc) {
                    vars[parsingProp] = swapFunc;
                }
                if (scaleFunc) {
                    vars.scale = scaleFunc;
                }
                return pt;
            }, prefix:true});
    
            _registerComplexSpecialProp("boxShadow", {defaultValue:"0px 0px 0px 0px #999", prefix:true, color:true, multi:true, keyword:"inset"});
    
            _registerComplexSpecialProp("borderRadius", {defaultValue:"0px", parser:function(t, e, p, cssp, pt, plugin) {
                e = this.format(e);
                var props = ["borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius"],
                    style = t.style,
                    ea1, i, es2, bs2, bs, es, bn, en, w, h, esfx, bsfx, rel, hn, vn, em;
                w = parseFloat(t.offsetWidth);
                h = parseFloat(t.offsetHeight);
                ea1 = e.split(" ");
                for (i = 0; i < props.length; i++) { //if we're dealing with percentages, we must convert things separately for the horizontal and vertical axis!
                    if (this.p.indexOf("border")) { //older browsers used a prefix
                        props[i] = _checkPropPrefix(props[i]);
                    }
                    bs = bs2 = _getStyle(t, props[i], _cs, false, "0px");
                    if (bs.indexOf(" ") !== -1) {
                        bs2 = bs.split(" ");
                        bs = bs2[0];
                        bs2 = bs2[1];
                    }
                    es = es2 = ea1[i];
                    bn = parseFloat(bs);
                    bsfx = bs.substr((bn + "").length);
                    rel = (es.charAt(1) === "=");
                    if (rel) {
                        en = parseInt(es.charAt(0)+"1", 10);
                        es = es.substr(2);
                        en *= parseFloat(es);
                        esfx = es.substr((en + "").length - (en < 0 ? 1 : 0)) || "";
                    } else {
                        en = parseFloat(es);
                        esfx = es.substr((en + "").length);
                    }
                    if (esfx === "") {
                        esfx = _suffixMap[p] || bsfx;
                    }
                    if (esfx !== bsfx) {
                        hn = _convertToPixels(t, "borderLeft", bn, bsfx); //horizontal number (we use a bogus "borderLeft" property just because the _convertToPixels() method searches for the keywords "Left", "Right", "Top", and "Bottom" to determine of it's a horizontal or vertical property, and we need "border" in the name so that it knows it should measure relative to the element itself, not its parent.
                        vn = _convertToPixels(t, "borderTop", bn, bsfx); //vertical number
                        if (esfx === "%") {
                            bs = (hn / w * 100) + "%";
                            bs2 = (vn / h * 100) + "%";
                        } else if (esfx === "em") {
                            em = _convertToPixels(t, "borderLeft", 1, "em");
                            bs = (hn / em) + "em";
                            bs2 = (vn / em) + "em";
                        } else {
                            bs = hn + "px";
                            bs2 = vn + "px";
                        }
                        if (rel) {
                            es = (parseFloat(bs) + en) + esfx;
                            es2 = (parseFloat(bs2) + en) + esfx;
                        }
                    }
                    pt = _parseComplex(style, props[i], bs + " " + bs2, es + " " + es2, false, "0px", pt);
                }
                return pt;
            }, prefix:true, formatter:_getFormatter("0px 0px 0px 0px", false, true)});
            _registerComplexSpecialProp("borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius", {defaultValue:"0px", parser:function(t, e, p, cssp, pt, plugin) {
                return _parseComplex(t.style, p, this.format(_getStyle(t, p, _cs, false, "0px 0px")), this.format(e), false, "0px", pt);
            }, prefix:true, formatter:_getFormatter("0px 0px", false, true)});
            _registerComplexSpecialProp("backgroundPosition", {defaultValue:"0 0", parser:function(t, e, p, cssp, pt, plugin) {
                var bp = "background-position",
                    cs = (_cs || _getComputedStyle(t, null)),
                    bs = this.format( ((cs) ? _ieVers ? cs.getPropertyValue(bp + "-x") + " " + cs.getPropertyValue(bp + "-y") : cs.getPropertyValue(bp) : t.currentStyle.backgroundPositionX + " " + t.currentStyle.backgroundPositionY) || "0 0"), //Internet Explorer doesn't report background-position correctly - we must query background-position-x and background-position-y and combine them (even in IE10). Before IE9, we must do the same with the currentStyle object and use camelCase
                    es = this.format(e),
                    ba, ea, i, pct, overlap, src;
                if ((bs.indexOf("%") !== -1) !== (es.indexOf("%") !== -1) && es.split(",").length < 2) {
                    src = _getStyle(t, "backgroundImage").replace(_urlExp, "");
                    if (src && src !== "none") {
                        ba = bs.split(" ");
                        ea = es.split(" ");
                        _tempImg.setAttribute("src", src); //set the temp IMG's src to the background-image so that we can measure its width/height
                        i = 2;
                        while (--i > -1) {
                            bs = ba[i];
                            pct = (bs.indexOf("%") !== -1);
                            if (pct !== (ea[i].indexOf("%") !== -1)) {
                                overlap = (i === 0) ? t.offsetWidth - _tempImg.width : t.offsetHeight - _tempImg.height;
                                ba[i] = pct ? (parseFloat(bs) / 100 * overlap) + "px" : (parseFloat(bs) / overlap * 100) + "%";
                            }
                        }
                        bs = ba.join(" ");
                    }
                }
                return this.parseComplex(t.style, bs, es, pt, plugin);
            }, formatter:_parsePosition});
            _registerComplexSpecialProp("backgroundSize", {defaultValue:"0 0", formatter:function(v) {
                v += ""; //ensure it's a string
                return _parsePosition(v.indexOf(" ") === -1 ? v + " " + v : v); //if set to something like "100% 100%", Safari typically reports the computed style as just "100%" (no 2nd value), but we should ensure that there are two values, so copy the first one. Otherwise, it'd be interpreted as "100% 0" (wrong).
            }});
            _registerComplexSpecialProp("perspective", {defaultValue:"0px", prefix:true});
            _registerComplexSpecialProp("perspectiveOrigin", {defaultValue:"50% 50%", prefix:true});
            _registerComplexSpecialProp("transformStyle", {prefix:true});
            _registerComplexSpecialProp("backfaceVisibility", {prefix:true});
            _registerComplexSpecialProp("userSelect", {prefix:true});
            _registerComplexSpecialProp("margin", {parser:_getEdgeParser("marginTop,marginRight,marginBottom,marginLeft")});
            _registerComplexSpecialProp("padding", {parser:_getEdgeParser("paddingTop,paddingRight,paddingBottom,paddingLeft")});
            _registerComplexSpecialProp("clip", {defaultValue:"rect(0px,0px,0px,0px)", parser:function(t, e, p, cssp, pt, plugin){
                var b, cs, delim;
                if (_ieVers < 9) { //IE8 and earlier don't report a "clip" value in the currentStyle - instead, the values are split apart into clipTop, clipRight, clipBottom, and clipLeft. Also, in IE7 and earlier, the values inside rect() are space-delimited, not comma-delimited.
                    cs = t.currentStyle;
                    delim = _ieVers < 8 ? " " : ",";
                    b = "rect(" + cs.clipTop + delim + cs.clipRight + delim + cs.clipBottom + delim + cs.clipLeft + ")";
                    e = this.format(e).split(",").join(delim);
                } else {
                    b = this.format(_getStyle(t, this.p, _cs, false, this.dflt));
                    e = this.format(e);
                }
                return this.parseComplex(t.style, b, e, pt, plugin);
            }});
            _registerComplexSpecialProp("textShadow", {defaultValue:"0px 0px 0px #999", color:true, multi:true});
            _registerComplexSpecialProp("autoRound,strictUnits", {parser:function(t, e, p, cssp, pt) {return pt;}}); //just so that we can ignore these properties (not tween them)
            _registerComplexSpecialProp("border", {defaultValue:"0px solid #000", parser:function(t, e, p, cssp, pt, plugin) {
                var bw = _getStyle(t, "borderTopWidth", _cs, false, "0px"),
                    end = this.format(e).split(" "),
                    esfx = end[0].replace(_suffixExp, "");
                if (esfx !== "px") { //if we're animating to a non-px value, we need to convert the beginning width to that unit.
                    bw = (parseFloat(bw) / _convertToPixels(t, "borderTopWidth", 1, esfx)) + esfx;
                }
                return this.parseComplex(t.style, this.format(bw + " " + _getStyle(t, "borderTopStyle", _cs, false, "solid") + " " + _getStyle(t, "borderTopColor", _cs, false, "#000")), end.join(" "), pt, plugin);
                }, color:true, formatter:function(v) {
                    var a = v.split(" ");
                    return a[0] + " " + (a[1] || "solid") + " " + (v.match(_colorExp) || ["#000"])[0];
                }});
            _registerComplexSpecialProp("borderWidth", {parser:_getEdgeParser("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth")}); //Firefox doesn't pick up on borderWidth set in style sheets (only inline).
            _registerComplexSpecialProp("float,cssFloat,styleFloat", {parser:function(t, e, p, cssp, pt, plugin) {
                var s = t.style,
                    prop = ("cssFloat" in s) ? "cssFloat" : "styleFloat";
                return new CSSPropTween(s, prop, 0, 0, pt, -1, p, false, 0, s[prop], e);
            }});
    
            //opacity-related
            var _setIEOpacityRatio = function(v) {
                    var t = this.t, //refers to the element's style property
                        filters = t.filter || _getStyle(this.data, "filter") || "",
                        val = (this.s + this.c * v) | 0,
                        skip;
                    if (val === 100) { //for older versions of IE that need to use a filter to apply opacity, we should remove the filter if opacity hits 1 in order to improve performance, but make sure there isn't a transform (matrix) or gradient in the filters.
                        if (filters.indexOf("atrix(") === -1 && filters.indexOf("radient(") === -1 && filters.indexOf("oader(") === -1) {
                            t.removeAttribute("filter");
                            skip = (!_getStyle(this.data, "filter")); //if a class is applied that has an alpha filter, it will take effect (we don't want that), so re-apply our alpha filter in that case. We must first remove it and then check.
                        } else {
                            t.filter = filters.replace(_alphaFilterExp, "");
                            skip = true;
                        }
                    }
                    if (!skip) {
                        if (this.xn1) {
                            t.filter = filters = filters || ("alpha(opacity=" + val + ")"); //works around bug in IE7/8 that prevents changes to "visibility" from being applied properly if the filter is changed to a different alpha on the same frame.
                        }
                        if (filters.indexOf("pacity") === -1) { //only used if browser doesn't support the standard opacity style property (IE 7 and 8). We omit the "O" to avoid case-sensitivity issues
                            if (val !== 0 || !this.xn1) { //bugs in IE7/8 won't render the filter properly if opacity is ADDED on the same frame/render as "visibility" changes (this.xn1 is 1 if this tween is an "autoAlpha" tween)
                                t.filter = filters + " alpha(opacity=" + val + ")"; //we round the value because otherwise, bugs in IE7/8 can prevent "visibility" changes from being applied properly.
                            }
                        } else {
                            t.filter = filters.replace(_opacityExp, "opacity=" + val);
                        }
                    }
                };
            _registerComplexSpecialProp("opacity,alpha,autoAlpha", {defaultValue:"1", parser:function(t, e, p, cssp, pt, plugin) {
                var b = parseFloat(_getStyle(t, "opacity", _cs, false, "1")),
                    style = t.style,
                    isAutoAlpha = (p === "autoAlpha");
                if (typeof(e) === "string" && e.charAt(1) === "=") {
                    e = ((e.charAt(0) === "-") ? -1 : 1) * parseFloat(e.substr(2)) + b;
                }
                if (isAutoAlpha && b === 1 && _getStyle(t, "visibility", _cs) === "hidden" && e !== 0) { //if visibility is initially set to "hidden", we should interpret that as intent to make opacity 0 (a convenience)
                    b = 0;
                }
                if (_supportsOpacity) {
                    pt = new CSSPropTween(style, "opacity", b, e - b, pt);
                } else {
                    pt = new CSSPropTween(style, "opacity", b * 100, (e - b) * 100, pt);
                    pt.xn1 = isAutoAlpha ? 1 : 0; //we need to record whether or not this is an autoAlpha so that in the setRatio(), we know to duplicate the setting of the alpha in order to work around a bug in IE7 and IE8 that prevents changes to "visibility" from taking effect if the filter is changed to a different alpha(opacity) at the same time. Setting it to the SAME value first, then the new value works around the IE7/8 bug.
                    style.zoom = 1; //helps correct an IE issue.
                    pt.type = 2;
                    pt.b = "alpha(opacity=" + pt.s + ")";
                    pt.e = "alpha(opacity=" + (pt.s + pt.c) + ")";
                    pt.data = t;
                    pt.plugin = plugin;
                    pt.setRatio = _setIEOpacityRatio;
                }
                if (isAutoAlpha) { //we have to create the "visibility" PropTween after the opacity one in the linked list so that they run in the order that works properly in IE8 and earlier
                    pt = new CSSPropTween(style, "visibility", 0, 0, pt, -1, null, false, 0, ((b !== 0) ? "inherit" : "hidden"), ((e === 0) ? "hidden" : "inherit"));
                    pt.xs0 = "inherit";
                    cssp._overwriteProps.push(pt.n);
                    cssp._overwriteProps.push(p);
                }
                return pt;
            }});
    
    
            var _removeProp = function(s, p) {
                    if (p) {
                        if (s.removeProperty) {
                            if (p.substr(0,2) === "ms" || p.substr(0,6) === "webkit") { //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be "ms-transform" instead of "-ms-transform" for IE9, for example)
                                p = "-" + p;
                            }
                            s.removeProperty(p.replace(_capsExp, "-$1").toLowerCase());
                        } else { //note: old versions of IE use "removeAttribute()" instead of "removeProperty()"
                            s.removeAttribute(p);
                        }
                    }
                },
                _setClassNameRatio = function(v) {
                    this.t._gsClassPT = this;
                    if (v === 1 || v === 0) {
                        this.t.setAttribute("class", (v === 0) ? this.b : this.e);
                        var mpt = this.data, //first MiniPropTween
                            s = this.t.style;
                        while (mpt) {
                            if (!mpt.v) {
                                _removeProp(s, mpt.p);
                            } else {
                                s[mpt.p] = mpt.v;
                            }
                            mpt = mpt._next;
                        }
                        if (v === 1 && this.t._gsClassPT === this) {
                            this.t._gsClassPT = null;
                        }
                    } else if (this.t.getAttribute("class") !== this.e) {
                        this.t.setAttribute("class", this.e);
                    }
                };
            _registerComplexSpecialProp("className", {parser:function(t, e, p, cssp, pt, plugin, vars) {
                var b = t.getAttribute("class") || "", //don't use t.className because it doesn't work consistently on SVG elements; getAttribute("class") and setAttribute("class", value") is more reliable.
                    cssText = t.style.cssText,
                    difData, bs, cnpt, cnptLookup, mpt;
                pt = cssp._classNamePT = new CSSPropTween(t, p, 0, 0, pt, 2);
                pt.setRatio = _setClassNameRatio;
                pt.pr = -11;
                _hasPriority = true;
                pt.b = b;
                bs = _getAllStyles(t, _cs);
                //if there's a className tween already operating on the target, force it to its end so that the necessary inline styles are removed and the class name is applied before we determine the end state (we don't want inline styles interfering that were there just for class-specific values)
                cnpt = t._gsClassPT;
                if (cnpt) {
                    cnptLookup = {};
                    mpt = cnpt.data; //first MiniPropTween which stores the inline styles - we need to force these so that the inline styles don't contaminate things. Otherwise, there's a small chance that a tween could start and the inline values match the destination values and they never get cleaned.
                    while (mpt) {
                        cnptLookup[mpt.p] = 1;
                        mpt = mpt._next;
                    }
                    cnpt.setRatio(1);
                }
                t._gsClassPT = pt;
                pt.e = (e.charAt(1) !== "=") ? e : b.replace(new RegExp("(?:\\s|^)" + e.substr(2) + "(?![\\w-])"), "") + ((e.charAt(0) === "+") ? " " + e.substr(2) : "");
                t.setAttribute("class", pt.e);
                difData = _cssDif(t, bs, _getAllStyles(t), vars, cnptLookup);
                t.setAttribute("class", b);
                pt.data = difData.firstMPT;
                t.style.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).
                pt = pt.xfirst = cssp.parse(t, difData.difs, pt, plugin); //we record the CSSPropTween as the xfirst so that we can handle overwriting propertly (if "className" gets overwritten, we must kill all the properties associated with the className part of the tween, so we can loop through from xfirst to the pt itself)
                return pt;
            }});
    
    
            var _setClearPropsRatio = function(v) {
                if (v === 1 || v === 0) if (this.data._totalTime === this.data._totalDuration && this.data.data !== "isFromStart") { //this.data refers to the tween. Only clear at the END of the tween (remember, from() tweens make the ratio go from 1 to 0, so we can't just check that and if the tween is the zero-duration one that's created internally to render the starting values in a from() tween, ignore that because otherwise, for example, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in).
                    var s = this.t.style,
                        transformParse = _specialProps.transform.parse,
                        a, p, i, clearTransform, transform;
                    if (this.e === "all") {
                        s.cssText = "";
                        clearTransform = true;
                    } else {
                        a = this.e.split(" ").join("").split(",");
                        i = a.length;
                        while (--i > -1) {
                            p = a[i];
                            if (_specialProps[p]) {
                                if (_specialProps[p].parse === transformParse) {
                                    clearTransform = true;
                                } else {
                                    p = (p === "transformOrigin") ? _transformOriginProp : _specialProps[p].p; //ensures that special properties use the proper browser-specific property name, like "scaleX" might be "-webkit-transform" or "boxShadow" might be "-moz-box-shadow"
                                }
                            }
                            _removeProp(s, p);
                        }
                    }
                    if (clearTransform) {
                        _removeProp(s, _transformProp);
                        transform = this.t._gsTransform;
                        if (transform) {
                            if (transform.svg) {
                                this.t.removeAttribute("data-svg-origin");
                                this.t.removeAttribute("transform");
                            }
                            delete this.t._gsTransform;
                        }
                    }
    
                }
            };
            _registerComplexSpecialProp("clearProps", {parser:function(t, e, p, cssp, pt) {
                pt = new CSSPropTween(t, p, 0, 0, pt, 2);
                pt.setRatio = _setClearPropsRatio;
                pt.e = e;
                pt.pr = -10;
                pt.data = cssp._tween;
                _hasPriority = true;
                return pt;
            }});
    
            p = "bezier,throwProps,physicsProps,physics2D".split(",");
            i = p.length;
            while (i--) {
                _registerPluginProp(p[i]);
            }
    
    
    
    
    
    
    
    
            p = CSSPlugin.prototype;
            p._firstPT = p._lastParsedTransform = p._transform = null;
    
            //gets called when the tween renders for the first time. This kicks everything off, recording start/end values, etc.
            p._onInitTween = function(target, vars, tween, index) {
                if (!target.nodeType) { //css is only for dom elements
                    return false;
                }
                this._target = _target = target;
                this._tween = tween;
                this._vars = vars;
                _index = index;
                _autoRound = vars.autoRound;
                _hasPriority = false;
                _suffixMap = vars.suffixMap || CSSPlugin.suffixMap;
                _cs = _getComputedStyle(target, "");
                _overwriteProps = this._overwriteProps;
                var style = target.style,
                    v, pt, pt2, first, last, next, zIndex, tpt, threeD;
                if (_reqSafariFix) if (style.zIndex === "") {
                    v = _getStyle(target, "zIndex", _cs);
                    if (v === "auto" || v === "") {
                        //corrects a bug in [non-Android] Safari that prevents it from repainting elements in their new positions if they don't have a zIndex set. We also can't just apply this inside _parseTransform() because anything that's moved in any way (like using "left" or "top" instead of transforms like "x" and "y") can be affected, so it is best to ensure that anything that's tweening has a z-index. Setting "WebkitPerspective" to a non-zero value worked too except that on iOS Safari things would flicker randomly. Plus zIndex is less memory-intensive.
                        this._addLazySet(style, "zIndex", 0);
                    }
                }
    
                if (typeof(vars) === "string") {
                    first = style.cssText;
                    v = _getAllStyles(target, _cs);
                    style.cssText = first + ";" + vars;
                    v = _cssDif(target, v, _getAllStyles(target)).difs;
                    if (!_supportsOpacity && _opacityValExp.test(vars)) {
                        v.opacity = parseFloat( RegExp.$1 );
                    }
                    vars = v;
                    style.cssText = first;
                }
    
                if (vars.className) { //className tweens will combine any differences they find in the css with the vars that are passed in, so {className:"myClass", scale:0.5, left:20} would work.
                    this._firstPT = pt = _specialProps.className.parse(target, vars.className, "className", this, null, null, vars);
                } else {
                    this._firstPT = pt = this.parse(target, vars, null);
                }
    
                if (this._transformType) {
                    threeD = (this._transformType === 3);
                    if (!_transformProp) {
                        style.zoom = 1; //helps correct an IE issue.
                    } else if (_isSafari) {
                        _reqSafariFix = true;
                        //if zIndex isn't set, iOS Safari doesn't repaint things correctly sometimes (seemingly at random).
                        if (style.zIndex === "") {
                            zIndex = _getStyle(target, "zIndex", _cs);
                            if (zIndex === "auto" || zIndex === "") {
                                this._addLazySet(style, "zIndex", 0);
                            }
                        }
                        //Setting WebkitBackfaceVisibility corrects 3 bugs:
                        // 1) [non-Android] Safari skips rendering changes to "top" and "left" that are made on the same frame/render as a transform update.
                        // 2) iOS Safari sometimes neglects to repaint elements in their new positions. Setting "WebkitPerspective" to a non-zero value worked too except that on iOS Safari things would flicker randomly.
                        // 3) Safari sometimes displayed odd artifacts when tweening the transform (or WebkitTransform) property, like ghosts of the edges of the element remained. Definitely a browser bug.
                        //Note: we allow the user to override the auto-setting by defining WebkitBackfaceVisibility in the vars of the tween.
                        if (_isSafariLT6) {
                            this._addLazySet(style, "WebkitBackfaceVisibility", this._vars.WebkitBackfaceVisibility || (threeD ? "visible" : "hidden"));
                        }
                    }
                    pt2 = pt;
                    while (pt2 && pt2._next) {
                        pt2 = pt2._next;
                    }
                    tpt = new CSSPropTween(target, "transform", 0, 0, null, 2);
                    this._linkCSSP(tpt, null, pt2);
                    tpt.setRatio = _transformProp ? _setTransformRatio : _setIETransformRatio;
                    tpt.data = this._transform || _getTransform(target, _cs, true);
                    tpt.tween = tween;
                    tpt.pr = -1; //ensures that the transforms get applied after the components are updated.
                    _overwriteProps.pop(); //we don't want to force the overwrite of all "transform" tweens of the target - we only care about individual transform properties like scaleX, rotation, etc. The CSSPropTween constructor automatically adds the property to _overwriteProps which is why we need to pop() here.
                }
    
                if (_hasPriority) {
                    //reorders the linked list in order of pr (priority)
                    while (pt) {
                        next = pt._next;
                        pt2 = first;
                        while (pt2 && pt2.pr > pt.pr) {
                            pt2 = pt2._next;
                        }
                        if ((pt._prev = pt2 ? pt2._prev : last)) {
                            pt._prev._next = pt;
                        } else {
                            first = pt;
                        }
                        if ((pt._next = pt2)) {
                            pt2._prev = pt;
                        } else {
                            last = pt;
                        }
                        pt = next;
                    }
                    this._firstPT = first;
                }
                return true;
            };
    
    
            p.parse = function(target, vars, pt, plugin) {
                var style = target.style,
                    p, sp, bn, en, bs, es, bsfx, esfx, isStr, rel;
                for (p in vars) {
                    es = vars[p]; //ending value string
                    if (typeof(es) === "function") {
                        es = es(_index, _target);
                    }
                    sp = _specialProps[p]; //SpecialProp lookup.
                    if (sp) {
                        pt = sp.parse(target, es, p, this, pt, plugin, vars);
                    } else if (p.substr(0,2) === "--") { //for tweening CSS variables (which always start with "--"). To maximize performance and simplicity, we bypass CSSPlugin altogether and just add a normal property tween to the tween instance itself.
                        this._tween._propLookup[p] = this._addTween.call(this._tween, target.style, "setProperty", _getComputedStyle(target).getPropertyValue(p) + "", es + "", p, false, p);
                        continue;
                    } else {
                        bs = _getStyle(target, p, _cs) + "";
                        isStr = (typeof(es) === "string");
                        if (p === "color" || p === "fill" || p === "stroke" || p.indexOf("Color") !== -1 || (isStr && _rgbhslExp.test(es))) { //Opera uses background: to define color sometimes in addition to backgroundColor:
                            if (!isStr) {
                                es = _parseColor(es);
                                es = ((es.length > 3) ? "rgba(" : "rgb(") + es.join(",") + ")";
                            }
                            pt = _parseComplex(style, p, bs, es, true, "transparent", pt, 0, plugin);
    
                        } else if (isStr && _complexExp.test(es)) {
                            pt = _parseComplex(style, p, bs, es, true, null, pt, 0, plugin);
    
                        } else {
                            bn = parseFloat(bs);
                            bsfx = (bn || bn === 0) ? bs.substr((bn + "").length) : ""; //remember, bs could be non-numeric like "normal" for fontWeight, so we should default to a blank suffix in that case.
    
                            if (bs === "" || bs === "auto") {
                                if (p === "width" || p === "height") {
                                    bn = _getDimension(target, p, _cs);
                                    bsfx = "px";
                                } else if (p === "left" || p === "top") {
                                    bn = _calculateOffset(target, p, _cs);
                                    bsfx = "px";
                                } else {
                                    bn = (p !== "opacity") ? 0 : 1;
                                    bsfx = "";
                                }
                            }
    
                            rel = (isStr && es.charAt(1) === "=");
                            if (rel) {
                                en = parseInt(es.charAt(0) + "1", 10);
                                es = es.substr(2);
                                en *= parseFloat(es);
                                esfx = es.replace(_suffixExp, "");
                            } else {
                                en = parseFloat(es);
                                esfx = isStr ? es.replace(_suffixExp, "") : "";
                            }
    
                            if (esfx === "") {
                                esfx = (p in _suffixMap) ? _suffixMap[p] : bsfx; //populate the end suffix, prioritizing the map, then if none is found, use the beginning suffix.
                            }
    
                            es = (en || en === 0) ? (rel ? en + bn : en) + esfx : vars[p]; //ensures that any += or -= prefixes are taken care of. Record the end value before normalizing the suffix because we always want to end the tween on exactly what they intended even if it doesn't match the beginning value's suffix.
                            //if the beginning/ending suffixes don't match, normalize them...
                            if (bsfx !== esfx) if (esfx !== "" || p === "lineHeight") if (en || en === 0) if (bn) { //note: if the beginning value (bn) is 0, we don't need to convert units!
                                bn = _convertToPixels(target, p, bn, bsfx);
                                if (esfx === "%") {
                                    bn /= _convertToPixels(target, p, 100, "%") / 100;
                                    if (vars.strictUnits !== true) { //some browsers report only "px" values instead of allowing "%" with getComputedStyle(), so we assume that if we're tweening to a %, we should start there too unless strictUnits:true is defined. This approach is particularly useful for responsive designs that use from() tweens.
                                        bs = bn + "%";
                                    }
    
                                } else if (esfx === "em" || esfx === "rem" || esfx === "vw" || esfx === "vh") {
                                    bn /= _convertToPixels(target, p, 1, esfx);
    
                                //otherwise convert to pixels.
                                } else if (esfx !== "px") {
                                    en = _convertToPixels(target, p, en, esfx);
                                    esfx = "px"; //we don't use bsfx after this, so we don't need to set it to px too.
                                }
                                if (rel) if (en || en === 0) {
                                    es = (en + bn) + esfx; //the changes we made affect relative calculations, so adjust the end value here.
                                }
                            }
    
                            if (rel) {
                                en += bn;
                            }
    
                            if ((bn || bn === 0) && (en || en === 0)) { //faster than isNaN(). Also, previously we required en !== bn but that doesn't really gain much performance and it prevents _parseToProxy() from working properly if beginning and ending values match but need to get tweened by an external plugin anyway. For example, a bezier tween where the target starts at left:0 and has these points: [{left:50},{left:0}] wouldn't work properly because when parsing the last point, it'd match the first (current) one and a non-tweening CSSPropTween would be recorded when we actually need a normal tween (type:0) so that things get updated during the tween properly.
                                pt = new CSSPropTween(style, p, bn, en - bn, pt, 0, p, (_autoRound !== false && (esfx === "px" || p === "zIndex")), 0, bs, es);
                                pt.xs0 = esfx;
                                //DEBUG: _log("tween "+p+" from "+pt.b+" ("+bn+esfx+") to "+pt.e+" with suffix: "+pt.xs0);
                            } else if (style[p] === undefined || !es && (es + "" === "NaN" || es == null)) {
                                _log("invalid " + p + " tween value: " + vars[p]);
                            } else {
                                pt = new CSSPropTween(style, p, en || bn || 0, 0, pt, -1, p, false, 0, bs, es);
                                pt.xs0 = (es === "none" && (p === "display" || p.indexOf("Style") !== -1)) ? bs : es; //intermediate value should typically be set immediately (end value) except for "display" or things like borderTopStyle, borderBottomStyle, etc. which should use the beginning value during the tween.
                                //DEBUG: _log("non-tweening value "+p+": "+pt.xs0);
                            }
                        }
                    }
                    if (plugin) if (pt && !pt.plugin) {
                        pt.plugin = plugin;
                    }
                }
                return pt;
            };
    
    
            //gets called every time the tween updates, passing the new ratio (typically a value between 0 and 1, but not always (for example, if an Elastic.easeOut is used, the value can jump above 1 mid-tween). It will always start and 0 and end at 1.
            p.setRatio = function(v) {
                var pt = this._firstPT,
                    min = 0.000001,
                    val, str, i;
                //at the end of the tween, we set the values to exactly what we received in order to make sure non-tweening values (like "position" or "float" or whatever) are set and so that if the beginning/ending suffixes (units) didn't match and we normalized to px, the value that the user passed in is used here. We check to see if the tween is at its beginning in case it's a from() tween in which case the ratio will actually go from 1 to 0 over the course of the tween (backwards).
                if (v === 1 && (this._tween._time === this._tween._duration || this._tween._time === 0)) {
                    while (pt) {
                        if (pt.type !== 2) {
                            if (pt.r && pt.type !== -1) {
                                val = Math.round(pt.s + pt.c);
                                if (!pt.type) {
                                    pt.t[pt.p] = val + pt.xs0;
                                } else if (pt.type === 1) { //complex value (one that typically has multiple numbers inside a string, like "rect(5px,10px,20px,25px)"
                                    i = pt.l;
                                    str = pt.xs0 + val + pt.xs1;
                                    for (i = 1; i < pt.l; i++) {
                                        str += pt["xn"+i] + pt["xs"+(i+1)];
                                    }
                                    pt.t[pt.p] = str;
                                }
                            } else {
                                pt.t[pt.p] = pt.e;
                            }
                        } else {
                            pt.setRatio(v);
                        }
                        pt = pt._next;
                    }
    
                } else if (v || !(this._tween._time === this._tween._duration || this._tween._time === 0) || this._tween._rawPrevTime === -0.000001) {
                    while (pt) {
                        val = pt.c * v + pt.s;
                        if (pt.r) {
                            val = Math.round(val);
                        } else if (val < min) if (val > -min) {
                            val = 0;
                        }
                        if (!pt.type) {
                            pt.t[pt.p] = val + pt.xs0;
                        } else if (pt.type === 1) { //complex value (one that typically has multiple numbers inside a string, like "rect(5px,10px,20px,25px)"
                            i = pt.l;
                            if (i === 2) {
                                pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2;
                            } else if (i === 3) {
                                pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3;
                            } else if (i === 4) {
                                pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3 + pt.xn3 + pt.xs4;
                            } else if (i === 5) {
                                pt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3 + pt.xn3 + pt.xs4 + pt.xn4 + pt.xs5;
                            } else {
                                str = pt.xs0 + val + pt.xs1;
                                for (i = 1; i < pt.l; i++) {
                                    str += pt["xn"+i] + pt["xs"+(i+1)];
                                }
                                pt.t[pt.p] = str;
                            }
    
                        } else if (pt.type === -1) { //non-tweening value
                            pt.t[pt.p] = pt.xs0;
    
                        } else if (pt.setRatio) { //custom setRatio() for things like SpecialProps, external plugins, etc.
                            pt.setRatio(v);
                        }
                        pt = pt._next;
                    }
    
                //if the tween is reversed all the way back to the beginning, we need to restore the original values which may have different units (like % instead of px or em or whatever).
                } else {
                    while (pt) {
                        if (pt.type !== 2) {
                            pt.t[pt.p] = pt.b;
                        } else {
                            pt.setRatio(v);
                        }
                        pt = pt._next;
                    }
                }
            };
    
            /**
             * @private
             * Forces rendering of the target's transforms (rotation, scale, etc.) whenever the CSSPlugin's setRatio() is called.
             * Basically, this tells the CSSPlugin to create a CSSPropTween (type 2) after instantiation that runs last in the linked
             * list and calls the appropriate (3D or 2D) rendering function. We separate this into its own method so that we can call
             * it from other plugins like BezierPlugin if, for example, it needs to apply an autoRotation and this CSSPlugin
             * doesn't have any transform-related properties of its own. You can call this method as many times as you
             * want and it won't create duplicate CSSPropTweens.
             *
             * @param {boolean} threeD if true, it should apply 3D tweens (otherwise, just 2D ones are fine and typically faster)
             */
            p._enableTransforms = function(threeD) {
                this._transform = this._transform || _getTransform(this._target, _cs, true); //ensures that the element has a _gsTransform property with the appropriate values.
                this._transformType = (!(this._transform.svg && _useSVGTransformAttr) && (threeD || this._transformType === 3)) ? 3 : 2;
            };
    
            var lazySet = function(v) {
                this.t[this.p] = this.e;
                this.data._linkCSSP(this, this._next, null, true); //we purposefully keep this._next even though it'd make sense to null it, but this is a performance optimization, as this happens during the while (pt) {} loop in setRatio() at the bottom of which it sets pt = pt._next, so if we null it, the linked list will be broken in that loop.
            };
            /** @private Gives us a way to set a value on the first render (and only the first render). **/
            p._addLazySet = function(t, p, v) {
                var pt = this._firstPT = new CSSPropTween(t, p, 0, 0, this._firstPT, 2);
                pt.e = v;
                pt.setRatio = lazySet;
                pt.data = this;
            };
    
            /** @private **/
            p._linkCSSP = function(pt, next, prev, remove) {
                if (pt) {
                    if (next) {
                        next._prev = pt;
                    }
                    if (pt._next) {
                        pt._next._prev = pt._prev;
                    }
                    if (pt._prev) {
                        pt._prev._next = pt._next;
                    } else if (this._firstPT === pt) {
                        this._firstPT = pt._next;
                        remove = true; //just to prevent resetting this._firstPT 5 lines down in case pt._next is null. (optimized for speed)
                    }
                    if (prev) {
                        prev._next = pt;
                    } else if (!remove && this._firstPT === null) {
                        this._firstPT = pt;
                    }
                    pt._next = next;
                    pt._prev = prev;
                }
                return pt;
            };
    
            p._mod = function(lookup) {
                var pt = this._firstPT;
                while (pt) {
                    if (typeof(lookup[pt.p]) === "function" && lookup[pt.p] === Math.round) { //only gets called by RoundPropsPlugin (ModifyPlugin manages all the rendering internally for CSSPlugin properties that need modification). Remember, we handle rounding a bit differently in this plugin for performance reasons, leveraging "r" as an indicator that the value should be rounded internally..
                        pt.r = 1;
                    }
                    pt = pt._next;
                }
            };
    
            //we need to make sure that if alpha or autoAlpha is killed, opacity is too. And autoAlpha affects the "visibility" property.
            p._kill = function(lookup) {
                var copy = lookup,
                    pt, p, xfirst;
                if (lookup.autoAlpha || lookup.alpha) {
                    copy = {};
                    for (p in lookup) { //copy the lookup so that we're not changing the original which may be passed elsewhere.
                        copy[p] = lookup[p];
                    }
                    copy.opacity = 1;
                    if (copy.autoAlpha) {
                        copy.visibility = 1;
                    }
                }
                if (lookup.className && (pt = this._classNamePT)) { //for className tweens, we need to kill any associated CSSPropTweens too; a linked list starts at the className's "xfirst".
                    xfirst = pt.xfirst;
                    if (xfirst && xfirst._prev) {
                        this._linkCSSP(xfirst._prev, pt._next, xfirst._prev._prev); //break off the prev
                    } else if (xfirst === this._firstPT) {
                        this._firstPT = pt._next;
                    }
                    if (pt._next) {
                        this._linkCSSP(pt._next, pt._next._next, xfirst._prev);
                    }
                    this._classNamePT = null;
                }
                pt = this._firstPT;
                while (pt) {
                    if (pt.plugin && pt.plugin !== p && pt.plugin._kill) { //for plugins that are registered with CSSPlugin, we should notify them of the kill.
                        pt.plugin._kill(lookup);
                        p = pt.plugin;
                    }
                    pt = pt._next;
                }
                return TweenPlugin.prototype._kill.call(this, copy);
            };
    
    
    
            //used by cascadeTo() for gathering all the style properties of each child element into an array for comparison.
            var _getChildStyles = function(e, props, targets) {
                    var children, i, child, type;
                    if (e.slice) {
                        i = e.length;
                        while (--i > -1) {
                            _getChildStyles(e[i], props, targets);
                        }
                        return;
                    }
                    children = e.childNodes;
                    i = children.length;
                    while (--i > -1) {
                        child = children[i];
                        type = child.type;
                        if (child.style) {
                            props.push(_getAllStyles(child));
                            if (targets) {
                                targets.push(child);
                            }
                        }
                        if ((type === 1 || type === 9 || type === 11) && child.childNodes.length) {
                            _getChildStyles(child, props, targets);
                        }
                    }
                };
    
            /**
             * Typically only useful for className tweens that may affect child elements, this method creates a TweenLite
             * and then compares the style properties of all the target's child elements at the tween's start and end, and
             * if any are different, it also creates tweens for those and returns an array containing ALL of the resulting
             * tweens (so that you can easily add() them to a TimelineLite, for example). The reason this functionality is
             * wrapped into a separate static method of CSSPlugin instead of being integrated into all regular className tweens
             * is because it creates entirely new tweens that may have completely different targets than the original tween,
             * so if they were all lumped into the original tween instance, it would be inconsistent with the rest of the API
             * and it would create other problems. For example:
             *  - If I create a tween of elementA, that tween instance may suddenly change its target to include 50 other elements (unintuitive if I specifically defined the target I wanted)
             *  - We can't just create new independent tweens because otherwise, what happens if the original/parent tween is reversed or pause or dropped into a TimelineLite for tight control? You'd expect that tween's behavior to affect all the others.
             *  - Analyzing every style property of every child before and after the tween is an expensive operation when there are many children, so this behavior shouldn't be imposed on all className tweens by default, especially since it's probably rare that this extra functionality is needed.
             *
             * @param {Object} target object to be tweened
             * @param {number} Duration in seconds (or frames for frames-based tweens)
             * @param {Object} Object containing the end values, like {className:"newClass", ease:Linear.easeNone}
             * @return {Array} An array of TweenLite instances
             */
            CSSPlugin.cascadeTo = function(target, duration, vars) {
                var tween = TweenLite.to(target, duration, vars),
                    results = [tween],
                    b = [],
                    e = [],
                    targets = [],
                    _reservedProps = TweenLite._internals.reservedProps,
                    i, difs, p, from;
                target = tween._targets || tween.target;
                _getChildStyles(target, b, targets);
                tween.render(duration, true, true);
                _getChildStyles(target, e);
                tween.render(0, true, true);
                tween._enabled(true);
                i = targets.length;
                while (--i > -1) {
                    difs = _cssDif(targets[i], b[i], e[i]);
                    if (difs.firstMPT) {
                        difs = difs.difs;
                        for (p in vars) {
                            if (_reservedProps[p]) {
                                difs[p] = vars[p];
                            }
                        }
                        from = {};
                        for (p in difs) {
                            from[p] = b[i][p];
                        }
                        results.push(TweenLite.fromTo(targets[i], duration, from, difs));
                    }
                }
                return results;
            };
    
            TweenPlugin.activate([CSSPlugin]);
            return CSSPlugin;
    
        }, true);
    
        
        
        
        
        
        
        
        
        
        
    /*
     * ----------------------------------------------------------------
     * RoundPropsPlugin
     * ----------------------------------------------------------------
     */
        (function() {
    
            var RoundPropsPlugin = _gsScope._gsDefine.plugin({
                    propName: "roundProps",
                    version: "1.6.0",
                    priority: -1,
                    API: 2,
    
                    //called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.
                    init: function(target, value, tween) {
                        this._tween = tween;
                        return true;
                    }
    
                }),
                _roundLinkedList = function(node) {
                    while (node) {
                        if (!node.f && !node.blob) {
                            node.m = Math.round;
                        }
                        node = node._next;
                    }
                },
                p = RoundPropsPlugin.prototype;
    
            p._onInitAllProps = function() {
                var tween = this._tween,
                    rp = (tween.vars.roundProps.join) ? tween.vars.roundProps : tween.vars.roundProps.split(","),
                    i = rp.length,
                    lookup = {},
                    rpt = tween._propLookup.roundProps,
                    prop, pt, next;
                while (--i > -1) {
                    lookup[rp[i]] = Math.round;
                }
                i = rp.length;
                while (--i > -1) {
                    prop = rp[i];
                    pt = tween._firstPT;
                    while (pt) {
                        next = pt._next; //record here, because it may get removed
                        if (pt.pg) {
                            pt.t._mod(lookup);
                        } else if (pt.n === prop) {
                            if (pt.f === 2 && pt.t) { //a blob (text containing multiple numeric values)
                                _roundLinkedList(pt.t._firstPT);
                            } else {
                                this._add(pt.t, prop, pt.s, pt.c);
                                //remove from linked list
                                if (next) {
                                    next._prev = pt._prev;
                                }
                                if (pt._prev) {
                                    pt._prev._next = next;
                                } else if (tween._firstPT === pt) {
                                    tween._firstPT = next;
                                }
                                pt._next = pt._prev = null;
                                tween._propLookup[prop] = rpt;
                            }
                        }
                        pt = next;
                    }
                }
                return false;
            };
    
            p._add = function(target, p, s, c) {
                this._addTween(target, p, s, s + c, p, Math.round);
                this._overwriteProps.push(p);
            };
    
        }());
    
    
    
    
    
    
    
    
    
    
    /*
     * ----------------------------------------------------------------
     * AttrPlugin
     * ----------------------------------------------------------------
     */
    
        (function() {
    
            _gsScope._gsDefine.plugin({
                propName: "attr",
                API: 2,
                version: "0.6.1",
    
                //called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.
                init: function(target, value, tween, index) {
                    var p, end;
                    if (typeof(target.setAttribute) !== "function") {
                        return false;
                    }
                    for (p in value) {
                        end = value[p];
                        if (typeof(end) === "function") {
                            end = end(index, target);
                        }
                        this._addTween(target, "setAttribute", target.getAttribute(p) + "", end + "", p, false, p);
                        this._overwriteProps.push(p);
                    }
                    return true;
                }
    
            });
    
        }());
    
    
    
    
    
    
    
    
    
    
    /*
     * ----------------------------------------------------------------
     * DirectionalRotationPlugin
     * ----------------------------------------------------------------
     */
        _gsScope._gsDefine.plugin({
            propName: "directionalRotation",
            version: "0.3.1",
            API: 2,
    
            //called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.
            init: function(target, value, tween, index) {
                if (typeof(value) !== "object") {
                    value = {rotation:value};
                }
                this.finals = {};
                var cap = (value.useRadians === true) ? Math.PI * 2 : 360,
                    min = 0.000001,
                    p, v, start, end, dif, split;
                for (p in value) {
                    if (p !== "useRadians") {
                        end = value[p];
                        if (typeof(end) === "function") {
                            end = end(index, target);
                        }
                        split = (end + "").split("_");
                        v = split[0];
                        start = parseFloat( (typeof(target[p]) !== "function") ? target[p] : target[ ((p.indexOf("set") || typeof(target["get" + p.substr(3)]) !== "function") ? p : "get" + p.substr(3)) ]() );
                        end = this.finals[p] = (typeof(v) === "string" && v.charAt(1) === "=") ? start + parseInt(v.charAt(0) + "1", 10) * Number(v.substr(2)) : Number(v) || 0;
                        dif = end - start;
                        if (split.length) {
                            v = split.join("_");
                            if (v.indexOf("short") !== -1) {
                                dif = dif % cap;
                                if (dif !== dif % (cap / 2)) {
                                    dif = (dif < 0) ? dif + cap : dif - cap;
                                }
                            }
                            if (v.indexOf("_cw") !== -1 && dif < 0) {
                                dif = ((dif + cap * 9999999999) % cap) - ((dif / cap) | 0) * cap;
                            } else if (v.indexOf("ccw") !== -1 && dif > 0) {
                                dif = ((dif - cap * 9999999999) % cap) - ((dif / cap) | 0) * cap;
                            }
                        }
                        if (dif > min || dif < -min) {
                            this._addTween(target, p, start, start + dif, p);
                            this._overwriteProps.push(p);
                        }
                    }
                }
                return true;
            },
    
            //called each time the values should be updated, and the ratio gets passed as the only parameter (typically it's a value between 0 and 1, but it can exceed those when using an ease like Elastic.easeOut or Back.easeOut, etc.)
            set: function(ratio) {
                var pt;
                if (ratio !== 1) {
                    this._super.setRatio.call(this, ratio);
                } else {
                    pt = this._firstPT;
                    while (pt) {
                        if (pt.f) {
                            pt.t[pt.p](this.finals[pt.p]);
                        } else {
                            pt.t[pt.p] = this.finals[pt.p];
                        }
                        pt = pt._next;
                    }
                }
            }
    
        })._autoCSS = true;
    
    
    
    
    
    
    
        
        
        
        
    /*
     * ----------------------------------------------------------------
     * EasePack
     * ----------------------------------------------------------------
     */
        _gsScope._gsDefine("easing.Back", ["easing.Ease"], function(Ease) {
            
            var w = (_gsScope.GreenSockGlobals || _gsScope),
                gs = w.com.greensock,
                _2PI = Math.PI * 2,
                _HALF_PI = Math.PI / 2,
                _class = gs._class,
                _create = function(n, f) {
                    var C = _class("easing." + n, function(){}, true),
                        p = C.prototype = new Ease();
                    p.constructor = C;
                    p.getRatio = f;
                    return C;
                },
                _easeReg = Ease.register || function(){}, //put an empty function in place just as a safety measure in case someone loads an OLD version of TweenLite.js where Ease.register doesn't exist.
                _wrap = function(name, EaseOut, EaseIn, EaseInOut, aliases) {
                    var C = _class("easing."+name, {
                        easeOut:new EaseOut(),
                        easeIn:new EaseIn(),
                        easeInOut:new EaseInOut()
                    }, true);
                    _easeReg(C, name);
                    return C;
                },
                EasePoint = function(time, value, next) {
                    this.t = time;
                    this.v = value;
                    if (next) {
                        this.next = next;
                        next.prev = this;
                        this.c = next.v - value;
                        this.gap = next.t - time;
                    }
                },
    
                //Back
                _createBack = function(n, f) {
                    var C = _class("easing." + n, function(overshoot) {
                            this._p1 = (overshoot || overshoot === 0) ? overshoot : 1.70158;
                            this._p2 = this._p1 * 1.525;
                        }, true),
                        p = C.prototype = new Ease();
                    p.constructor = C;
                    p.getRatio = f;
                    p.config = function(overshoot) {
                        return new C(overshoot);
                    };
                    return C;
                },
    
                Back = _wrap("Back",
                    _createBack("BackOut", function(p) {
                        return ((p = p - 1) * p * ((this._p1 + 1) * p + this._p1) + 1);
                    }),
                    _createBack("BackIn", function(p) {
                        return p * p * ((this._p1 + 1) * p - this._p1);
                    }),
                    _createBack("BackInOut", function(p) {
                        return ((p *= 2) < 1) ? 0.5 * p * p * ((this._p2 + 1) * p - this._p2) : 0.5 * ((p -= 2) * p * ((this._p2 + 1) * p + this._p2) + 2);
                    })
                ),
    
    
                //SlowMo
                SlowMo = _class("easing.SlowMo", function(linearRatio, power, yoyoMode) {
                    power = (power || power === 0) ? power : 0.7;
                    if (linearRatio == null) {
                        linearRatio = 0.7;
                    } else if (linearRatio > 1) {
                        linearRatio = 1;
                    }
                    this._p = (linearRatio !== 1) ? power : 0;
                    this._p1 = (1 - linearRatio) / 2;
                    this._p2 = linearRatio;
                    this._p3 = this._p1 + this._p2;
                    this._calcEnd = (yoyoMode === true);
                }, true),
                p = SlowMo.prototype = new Ease(),
                SteppedEase, RoughEase, _createElastic;
    
            p.constructor = SlowMo;
            p.getRatio = function(p) {
                var r = p + (0.5 - p) * this._p;
                if (p < this._p1) {
                    return this._calcEnd ? 1 - ((p = 1 - (p / this._p1)) * p) : r - ((p = 1 - (p / this._p1)) * p * p * p * r);
                } else if (p > this._p3) {
                    return this._calcEnd ? 1 - (p = (p - this._p3) / this._p1) * p : r + ((p - r) * (p = (p - this._p3) / this._p1) * p * p * p);
                }
                return this._calcEnd ? 1 : r;
            };
            SlowMo.ease = new SlowMo(0.7, 0.7);
    
            p.config = SlowMo.config = function(linearRatio, power, yoyoMode) {
                return new SlowMo(linearRatio, power, yoyoMode);
            };
    
    
            //SteppedEase
            SteppedEase = _class("easing.SteppedEase", function(steps, immediateStart) {
                    steps = steps || 1;
                    this._p1 = 1 / steps;
                    this._p2 = steps + (immediateStart ? 0 : 1);
                    this._p3 = immediateStart ? 1 : 0;
                }, true);
            p = SteppedEase.prototype = new Ease();
            p.constructor = SteppedEase;
            p.getRatio = function(p) {
                if (p < 0) {
                    p = 0;
                } else if (p >= 1) {
                    p = 0.999999999;
                }
                return (((this._p2 * p) | 0) + this._p3) * this._p1;
            };
            p.config = SteppedEase.config = function(steps, immediateStart) {
                return new SteppedEase(steps, immediateStart);
            };
    
    
            //RoughEase
            RoughEase = _class("easing.RoughEase", function(vars) {
                vars = vars || {};
                var taper = vars.taper || "none",
                    a = [],
                    cnt = 0,
                    points = (vars.points || 20) | 0,
                    i = points,
                    randomize = (vars.randomize !== false),
                    clamp = (vars.clamp === true),
                    template = (vars.template instanceof Ease) ? vars.template : null,
                    strength = (typeof(vars.strength) === "number") ? vars.strength * 0.4 : 0.4,
                    x, y, bump, invX, obj, pnt;
                while (--i > -1) {
                    x = randomize ? Math.random() : (1 / points) * i;
                    y = template ? template.getRatio(x) : x;
                    if (taper === "none") {
                        bump = strength;
                    } else if (taper === "out") {
                        invX = 1 - x;
                        bump = invX * invX * strength;
                    } else if (taper === "in") {
                        bump = x * x * strength;
                    } else if (x < 0.5) {  //"both" (start)
                        invX = x * 2;
                        bump = invX * invX * 0.5 * strength;
                    } else {				//"both" (end)
                        invX = (1 - x) * 2;
                        bump = invX * invX * 0.5 * strength;
                    }
                    if (randomize) {
                        y += (Math.random() * bump) - (bump * 0.5);
                    } else if (i % 2) {
                        y += bump * 0.5;
                    } else {
                        y -= bump * 0.5;
                    }
                    if (clamp) {
                        if (y > 1) {
                            y = 1;
                        } else if (y < 0) {
                            y = 0;
                        }
                    }
                    a[cnt++] = {x:x, y:y};
                }
                a.sort(function(a, b) {
                    return a.x - b.x;
                });
    
                pnt = new EasePoint(1, 1, null);
                i = points;
                while (--i > -1) {
                    obj = a[i];
                    pnt = new EasePoint(obj.x, obj.y, pnt);
                }
    
                this._prev = new EasePoint(0, 0, (pnt.t !== 0) ? pnt : pnt.next);
            }, true);
            p = RoughEase.prototype = new Ease();
            p.constructor = RoughEase;
            p.getRatio = function(p) {
                var pnt = this._prev;
                if (p > pnt.t) {
                    while (pnt.next && p >= pnt.t) {
                        pnt = pnt.next;
                    }
                    pnt = pnt.prev;
                } else {
                    while (pnt.prev && p <= pnt.t) {
                        pnt = pnt.prev;
                    }
                }
                this._prev = pnt;
                return (pnt.v + ((p - pnt.t) / pnt.gap) * pnt.c);
            };
            p.config = function(vars) {
                return new RoughEase(vars);
            };
            RoughEase.ease = new RoughEase();
    
    
            //Bounce
            _wrap("Bounce",
                _create("BounceOut", function(p) {
                    if (p < 1 / 2.75) {
                        return 7.5625 * p * p;
                    } else if (p < 2 / 2.75) {
                        return 7.5625 * (p -= 1.5 / 2.75) * p + 0.75;
                    } else if (p < 2.5 / 2.75) {
                        return 7.5625 * (p -= 2.25 / 2.75) * p + 0.9375;
                    }
                    return 7.5625 * (p -= 2.625 / 2.75) * p + 0.984375;
                }),
                _create("BounceIn", function(p) {
                    if ((p = 1 - p) < 1 / 2.75) {
                        return 1 - (7.5625 * p * p);
                    } else if (p < 2 / 2.75) {
                        return 1 - (7.5625 * (p -= 1.5 / 2.75) * p + 0.75);
                    } else if (p < 2.5 / 2.75) {
                        return 1 - (7.5625 * (p -= 2.25 / 2.75) * p + 0.9375);
                    }
                    return 1 - (7.5625 * (p -= 2.625 / 2.75) * p + 0.984375);
                }),
                _create("BounceInOut", function(p) {
                    var invert = (p < 0.5);
                    if (invert) {
                        p = 1 - (p * 2);
                    } else {
                        p = (p * 2) - 1;
                    }
                    if (p < 1 / 2.75) {
                        p = 7.5625 * p * p;
                    } else if (p < 2 / 2.75) {
                        p = 7.5625 * (p -= 1.5 / 2.75) * p + 0.75;
                    } else if (p < 2.5 / 2.75) {
                        p = 7.5625 * (p -= 2.25 / 2.75) * p + 0.9375;
                    } else {
                        p = 7.5625 * (p -= 2.625 / 2.75) * p + 0.984375;
                    }
                    return invert ? (1 - p) * 0.5 : p * 0.5 + 0.5;
                })
            );
    
    
            //CIRC
            _wrap("Circ",
                _create("CircOut", function(p) {
                    return Math.sqrt(1 - (p = p - 1) * p);
                }),
                _create("CircIn", function(p) {
                    return -(Math.sqrt(1 - (p * p)) - 1);
                }),
                _create("CircInOut", function(p) {
                    return ((p*=2) < 1) ? -0.5 * (Math.sqrt(1 - p * p) - 1) : 0.5 * (Math.sqrt(1 - (p -= 2) * p) + 1);
                })
            );
    
    
            //Elastic
            _createElastic = function(n, f, def) {
                var C = _class("easing." + n, function(amplitude, period) {
                        this._p1 = (amplitude >= 1) ? amplitude : 1; //note: if amplitude is < 1, we simply adjust the period for a more natural feel. Otherwise the math doesn't work right and the curve starts at 1.
                        this._p2 = (period || def) / (amplitude < 1 ? amplitude : 1);
                        this._p3 = this._p2 / _2PI * (Math.asin(1 / this._p1) || 0);
                        this._p2 = _2PI / this._p2; //precalculate to optimize
                    }, true),
                    p = C.prototype = new Ease();
                p.constructor = C;
                p.getRatio = f;
                p.config = function(amplitude, period) {
                    return new C(amplitude, period);
                };
                return C;
            };
            _wrap("Elastic",
                _createElastic("ElasticOut", function(p) {
                    return this._p1 * Math.pow(2, -10 * p) * Math.sin( (p - this._p3) * this._p2 ) + 1;
                }, 0.3),
                _createElastic("ElasticIn", function(p) {
                    return -(this._p1 * Math.pow(2, 10 * (p -= 1)) * Math.sin( (p - this._p3) * this._p2 ));
                }, 0.3),
                _createElastic("ElasticInOut", function(p) {
                    return ((p *= 2) < 1) ? -0.5 * (this._p1 * Math.pow(2, 10 * (p -= 1)) * Math.sin( (p - this._p3) * this._p2)) : this._p1 * Math.pow(2, -10 *(p -= 1)) * Math.sin( (p - this._p3) * this._p2 ) * 0.5 + 1;
                }, 0.45)
            );
    
    
            //Expo
            _wrap("Expo",
                _create("ExpoOut", function(p) {
                    return 1 - Math.pow(2, -10 * p);
                }),
                _create("ExpoIn", function(p) {
                    return Math.pow(2, 10 * (p - 1)) - 0.001;
                }),
                _create("ExpoInOut", function(p) {
                    return ((p *= 2) < 1) ? 0.5 * Math.pow(2, 10 * (p - 1)) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));
                })
            );
    
    
            //Sine
            _wrap("Sine",
                _create("SineOut", function(p) {
                    return Math.sin(p * _HALF_PI);
                }),
                _create("SineIn", function(p) {
                    return -Math.cos(p * _HALF_PI) + 1;
                }),
                _create("SineInOut", function(p) {
                    return -0.5 * (Math.cos(Math.PI * p) - 1);
                })
            );
    
            _class("easing.EaseLookup", {
                    find:function(s) {
                        return Ease.map[s];
                    }
                }, true);
    
            //register the non-standard eases
            _easeReg(w.SlowMo, "SlowMo", "ease,");
            _easeReg(RoughEase, "RoughEase", "ease,");
            _easeReg(SteppedEase, "SteppedEase", "ease,");
    
            return Back;
            
        }, true);
    
    
    });
    
    if (_gsScope._gsDefine) { _gsScope._gsQueue.pop()(); } //necessary in case TweenLite was already loaded separately.
    
    
    
    
    
    
    
    
    
    
    
    /*
     * ----------------------------------------------------------------
     * Base classes like TweenLite, SimpleTimeline, Ease, Ticker, etc.
     * ----------------------------------------------------------------
     */
    (function(window, moduleName) {
    
            "use strict";
            var _exports = {},
                _doc = window.document,
                _globals = window.GreenSockGlobals = window.GreenSockGlobals || window;
            if (_globals.TweenLite) {
                return; //in case the core set of classes is already loaded, don't instantiate twice.
            }
            var _namespace = function(ns) {
                    var a = ns.split("."),
                        p = _globals, i;
                    for (i = 0; i < a.length; i++) {
                        p[a[i]] = p = p[a[i]] || {};
                    }
                    return p;
                },
                gs = _namespace("com.greensock"),
                _tinyNum = 0.0000000001,
                _slice = function(a) { //don't use Array.prototype.slice.call(target, 0) because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()
                    var b = [],
                        l = a.length,
                        i;
                    for (i = 0; i !== l; b.push(a[i++])) {}
                    return b;
                },
                _emptyFunc = function() {},
                _isArray = (function() { //works around issues in iframe environments where the Array global isn't shared, thus if the object originates in a different window/iframe, "(obj instanceof Array)" will evaluate false. We added some speed optimizations to avoid Object.prototype.toString.call() unless it's absolutely necessary because it's VERY slow (like 20x slower)
                    var toString = Object.prototype.toString,
                        array = toString.call([]);
                    return function(obj) {
                        return obj != null && (obj instanceof Array || (typeof(obj) === "object" && !!obj.push && toString.call(obj) === array));
                    };
                }()),
                a, i, p, _ticker, _tickerActive,
                _defLookup = {},
    
                /**
                 * @constructor
                 * Defines a GreenSock class, optionally with an array of dependencies that must be instantiated first and passed into the definition.
                 * This allows users to load GreenSock JS files in any order even if they have interdependencies (like CSSPlugin extends TweenPlugin which is
                 * inside TweenLite.js, but if CSSPlugin is loaded first, it should wait to run its code until TweenLite.js loads and instantiates TweenPlugin
                 * and then pass TweenPlugin to CSSPlugin's definition). This is all done automatically and internally.
                 *
                 * Every definition will be added to a "com.greensock" global object (typically window, but if a window.GreenSockGlobals object is found,
                 * it will go there as of v1.7). For example, TweenLite will be found at window.com.greensock.TweenLite and since it's a global class that should be available anywhere,
                 * it is ALSO referenced at window.TweenLite. However some classes aren't considered global, like the base com.greensock.core.Animation class, so
                 * those will only be at the package like window.com.greensock.core.Animation. Again, if you define a GreenSockGlobals object on the window, everything
                 * gets tucked neatly inside there instead of on the window directly. This allows you to do advanced things like load multiple versions of GreenSock
                 * files and put them into distinct objects (imagine a banner ad uses a newer version but the main site uses an older one). In that case, you could
                 * sandbox the banner one like:
                 *
                 * <script>
                 *     var gs = window.GreenSockGlobals = {}; //the newer version we're about to load could now be referenced in a "gs" object, like gs.TweenLite.to(...). Use whatever alias you want as long as it's unique, "gs" or "banner" or whatever.
                 * </script>
                 * <script src="js/greensock/v1.7/TweenMax.js"></script>
                 * <script>
                 *     window.GreenSockGlobals = window._gsQueue = window._gsDefine = null; //reset it back to null (along with the special _gsQueue variable) so that the next load of TweenMax affects the window and we can reference things directly like TweenLite.to(...)
                 * </script>
                 * <script src="js/greensock/v1.6/TweenMax.js"></script>
                 * <script>
                 *     gs.TweenLite.to(...); //would use v1.7
                 *     TweenLite.to(...); //would use v1.6
                 * </script>
                 *
                 * @param {!string} ns The namespace of the class definition, leaving off "com.greensock." as that's assumed. For example, "TweenLite" or "plugins.CSSPlugin" or "easing.Back".
                 * @param {!Array.<string>} dependencies An array of dependencies (described as their namespaces minus "com.greensock." prefix). For example ["TweenLite","plugins.TweenPlugin","core.Animation"]
                 * @param {!function():Object} func The function that should be called and passed the resolved dependencies which will return the actual class for this definition.
                 * @param {boolean=} global If true, the class will be added to the global scope (typically window unless you define a window.GreenSockGlobals object)
                 */
                Definition = function(ns, dependencies, func, global) {
                    this.sc = (_defLookup[ns]) ? _defLookup[ns].sc : []; //subclasses
                    _defLookup[ns] = this;
                    this.gsClass = null;
                    this.func = func;
                    var _classes = [];
                    this.check = function(init) {
                        var i = dependencies.length,
                            missing = i,
                            cur, a, n, cl;
                        while (--i > -1) {
                            if ((cur = _defLookup[dependencies[i]] || new Definition(dependencies[i], [])).gsClass) {
                                _classes[i] = cur.gsClass;
                                missing--;
                            } else if (init) {
                                cur.sc.push(this);
                            }
                        }
                        if (missing === 0 && func) {
                            a = ("com.greensock." + ns).split(".");
                            n = a.pop();
                            cl = _namespace(a.join("."))[n] = this.gsClass = func.apply(func, _classes);
    
                            //exports to multiple environments
                            if (global) {
                                _globals[n] = _exports[n] = cl; //provides a way to avoid global namespace pollution. By default, the main classes like TweenLite, Power1, Strong, etc. are added to window unless a GreenSockGlobals is defined. So if you want to have things added to a custom object instead, just do something like window.GreenSockGlobals = {} before loading any GreenSock files. You can even set up an alias like window.GreenSockGlobals = windows.gs = {} so that you can access everything like gs.TweenLite. Also remember that ALL classes are added to the window.com.greensock object (in their respective packages, like com.greensock.easing.Power1, com.greensock.TweenLite, etc.)
                                if (typeof(module) !== "undefined" && module.exports) { //node
                                    if (ns === moduleName) {
                                        module.exports = _exports[moduleName] = cl;
                                        for (i in _exports) {
                                            cl[i] = _exports[i];
                                        }
                                    } else if (_exports[moduleName]) {
                                        _exports[moduleName][n] = cl;
                                    }
                                } else if (true){ //AMD
                                    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() { return cl; }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
                    __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                                }
                            }
                            for (i = 0; i < this.sc.length; i++) {
                                this.sc[i].check();
                            }
                        }
                    };
                    this.check(true);
                },
    
                //used to create Definition instances (which basically registers a class that has dependencies).
                _gsDefine = window._gsDefine = function(ns, dependencies, func, global) {
                    return new Definition(ns, dependencies, func, global);
                },
    
                //a quick way to create a class that doesn't have any dependencies. Returns the class, but first registers it in the GreenSock namespace so that other classes can grab it (other classes might be dependent on the class).
                _class = gs._class = function(ns, func, global) {
                    func = func || function() {};
                    _gsDefine(ns, [], function(){ return func; }, global);
                    return func;
                };
    
            _gsDefine.globals = _globals;
    
    
    
    /*
     * ----------------------------------------------------------------
     * Ease
     * ----------------------------------------------------------------
     */
            var _baseParams = [0, 0, 1, 1],
                Ease = _class("easing.Ease", function(func, extraParams, type, power) {
                    this._func = func;
                    this._type = type || 0;
                    this._power = power || 0;
                    this._params = extraParams ? _baseParams.concat(extraParams) : _baseParams;
                }, true),
                _easeMap = Ease.map = {},
                _easeReg = Ease.register = function(ease, names, types, create) {
                    var na = names.split(","),
                        i = na.length,
                        ta = (types || "easeIn,easeOut,easeInOut").split(","),
                        e, name, j, type;
                    while (--i > -1) {
                        name = na[i];
                        e = create ? _class("easing."+name, null, true) : gs.easing[name] || {};
                        j = ta.length;
                        while (--j > -1) {
                            type = ta[j];
                            _easeMap[name + "." + type] = _easeMap[type + name] = e[type] = ease.getRatio ? ease : ease[type] || new ease();
                        }
                    }
                };
    
            p = Ease.prototype;
            p._calcEnd = false;
            p.getRatio = function(p) {
                if (this._func) {
                    this._params[0] = p;
                    return this._func.apply(null, this._params);
                }
                var t = this._type,
                    pw = this._power,
                    r = (t === 1) ? 1 - p : (t === 2) ? p : (p < 0.5) ? p * 2 : (1 - p) * 2;
                if (pw === 1) {
                    r *= r;
                } else if (pw === 2) {
                    r *= r * r;
                } else if (pw === 3) {
                    r *= r * r * r;
                } else if (pw === 4) {
                    r *= r * r * r * r;
                }
                return (t === 1) ? 1 - r : (t === 2) ? r : (p < 0.5) ? r / 2 : 1 - (r / 2);
            };
    
            //create all the standard eases like Linear, Quad, Cubic, Quart, Quint, Strong, Power0, Power1, Power2, Power3, and Power4 (each with easeIn, easeOut, and easeInOut)
            a = ["Linear","Quad","Cubic","Quart","Quint,Strong"];
            i = a.length;
            while (--i > -1) {
                p = a[i]+",Power"+i;
                _easeReg(new Ease(null,null,1,i), p, "easeOut", true);
                _easeReg(new Ease(null,null,2,i), p, "easeIn" + ((i === 0) ? ",easeNone" : ""));
                _easeReg(new Ease(null,null,3,i), p, "easeInOut");
            }
            _easeMap.linear = gs.easing.Linear.easeIn;
            _easeMap.swing = gs.easing.Quad.easeInOut; //for jQuery folks
    
    
    /*
     * ----------------------------------------------------------------
     * EventDispatcher
     * ----------------------------------------------------------------
     */
            var EventDispatcher = _class("events.EventDispatcher", function(target) {
                this._listeners = {};
                this._eventTarget = target || this;
            });
            p = EventDispatcher.prototype;
    
            p.addEventListener = function(type, callback, scope, useParam, priority) {
                priority = priority || 0;
                var list = this._listeners[type],
                    index = 0,
                    listener, i;
                if (this === _ticker && !_tickerActive) {
                    _ticker.wake();
                }
                if (list == null) {
                    this._listeners[type] = list = [];
                }
                i = list.length;
                while (--i > -1) {
                    listener = list[i];
                    if (listener.c === callback && listener.s === scope) {
                        list.splice(i, 1);
                    } else if (index === 0 && listener.pr < priority) {
                        index = i + 1;
                    }
                }
                list.splice(index, 0, {c:callback, s:scope, up:useParam, pr:priority});
            };
    
            p.removeEventListener = function(type, callback) {
                var list = this._listeners[type], i;
                if (list) {
                    i = list.length;
                    while (--i > -1) {
                        if (list[i].c === callback) {
                            list.splice(i, 1);
                            return;
                        }
                    }
                }
            };
    
            p.dispatchEvent = function(type) {
                var list = this._listeners[type],
                    i, t, listener;
                if (list) {
                    i = list.length;
                    if (i > 1) {
                        list = list.slice(0); //in case addEventListener() is called from within a listener/callback (otherwise the index could change, resulting in a skip)
                    }
                    t = this._eventTarget;
                    while (--i > -1) {
                        listener = list[i];
                        if (listener) {
                            if (listener.up) {
                                listener.c.call(listener.s || t, {type:type, target:t});
                            } else {
                                listener.c.call(listener.s || t);
                            }
                        }
                    }
                }
            };
    
    
    /*
     * ----------------------------------------------------------------
     * Ticker
     * ----------------------------------------------------------------
     */
             var _reqAnimFrame = window.requestAnimationFrame,
                _cancelAnimFrame = window.cancelAnimationFrame,
                _getTime = Date.now || function() {return new Date().getTime();},
                _lastUpdate = _getTime();
    
            //now try to determine the requestAnimationFrame and cancelAnimationFrame functions and if none are found, we'll use a setTimeout()/clearTimeout() polyfill.
            a = ["ms","moz","webkit","o"];
            i = a.length;
            while (--i > -1 && !_reqAnimFrame) {
                _reqAnimFrame = window[a[i] + "RequestAnimationFrame"];
                _cancelAnimFrame = window[a[i] + "CancelAnimationFrame"] || window[a[i] + "CancelRequestAnimationFrame"];
            }
    
            _class("Ticker", function(fps, useRAF) {
                var _self = this,
                    _startTime = _getTime(),
                    _useRAF = (useRAF !== false && _reqAnimFrame) ? "auto" : false,
                    _lagThreshold = 500,
                    _adjustedLag = 33,
                    _tickWord = "tick", //helps reduce gc burden
                    _fps, _req, _id, _gap, _nextTime,
                    _tick = function(manual) {
                        var elapsed = _getTime() - _lastUpdate,
                            overlap, dispatch;
                        if (elapsed > _lagThreshold) {
                            _startTime += elapsed - _adjustedLag;
                        }
                        _lastUpdate += elapsed;
                        _self.time = (_lastUpdate - _startTime) / 1000;
                        overlap = _self.time - _nextTime;
                        if (!_fps || overlap > 0 || manual === true) {
                            _self.frame++;
                            _nextTime += overlap + (overlap >= _gap ? 0.004 : _gap - overlap);
                            dispatch = true;
                        }
                        if (manual !== true) { //make sure the request is made before we dispatch the "tick" event so that timing is maintained. Otherwise, if processing the "tick" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.
                            _id = _req(_tick);
                        }
                        if (dispatch) {
                            _self.dispatchEvent(_tickWord);
                        }
                    };
    
                EventDispatcher.call(_self);
                _self.time = _self.frame = 0;
                _self.tick = function() {
                    _tick(true);
                };
    
                _self.lagSmoothing = function(threshold, adjustedLag) {
                    _lagThreshold = threshold || (1 / _tinyNum); //zero should be interpreted as basically unlimited
                    _adjustedLag = Math.min(adjustedLag, _lagThreshold, 0);
                };
    
                _self.sleep = function() {
                    if (_id == null) {
                        return;
                    }
                    if (!_useRAF || !_cancelAnimFrame) {
                        clearTimeout(_id);
                    } else {
                        _cancelAnimFrame(_id);
                    }
                    _req = _emptyFunc;
                    _id = null;
                    if (_self === _ticker) {
                        _tickerActive = false;
                    }
                };
    
                _self.wake = function(seamless) {
                    if (_id !== null) {
                        _self.sleep();
                    } else if (seamless) {
                        _startTime += -_lastUpdate + (_lastUpdate = _getTime());
                    } else if (_self.frame > 10) { //don't trigger lagSmoothing if we're just waking up, and make sure that at least 10 frames have elapsed because of the iOS bug that we work around below with the 1.5-second setTimout().
                        _lastUpdate = _getTime() - _lagThreshold + 5;
                    }
                    _req = (_fps === 0) ? _emptyFunc : (!_useRAF || !_reqAnimFrame) ? function(f) { return setTimeout(f, ((_nextTime - _self.time) * 1000 + 1) | 0); } : _reqAnimFrame;
                    if (_self === _ticker) {
                        _tickerActive = true;
                    }
                    _tick(2);
                };
    
                _self.fps = function(value) {
                    if (!arguments.length) {
                        return _fps;
                    }
                    _fps = value;
                    _gap = 1 / (_fps || 60);
                    _nextTime = this.time + _gap;
                    _self.wake();
                };
    
                _self.useRAF = function(value) {
                    if (!arguments.length) {
                        return _useRAF;
                    }
                    _self.sleep();
                    _useRAF = value;
                    _self.fps(_fps);
                };
                _self.fps(fps);
    
                //a bug in iOS 6 Safari occasionally prevents the requestAnimationFrame from working initially, so we use a 1.5-second timeout that automatically falls back to setTimeout() if it senses this condition.
                setTimeout(function() {
                    if (_useRAF === "auto" && _self.frame < 5 && _doc.visibilityState !== "hidden") {
                        _self.useRAF(false);
                    }
                }, 1500);
            });
    
            p = gs.Ticker.prototype = new gs.events.EventDispatcher();
            p.constructor = gs.Ticker;
    
    
    /*
     * ----------------------------------------------------------------
     * Animation
     * ----------------------------------------------------------------
     */
            var Animation = _class("core.Animation", function(duration, vars) {
                    this.vars = vars = vars || {};
                    this._duration = this._totalDuration = duration || 0;
                    this._delay = Number(vars.delay) || 0;
                    this._timeScale = 1;
                    this._active = (vars.immediateRender === true);
                    this.data = vars.data;
                    this._reversed = (vars.reversed === true);
    
                    if (!_rootTimeline) {
                        return;
                    }
                    if (!_tickerActive) { //some browsers (like iOS 6 Safari) shut down JavaScript execution when the tab is disabled and they [occasionally] neglect to start up requestAnimationFrame again when returning - this code ensures that the engine starts up again properly.
                        _ticker.wake();
                    }
    
                    var tl = this.vars.useFrames ? _rootFramesTimeline : _rootTimeline;
                    tl.add(this, tl._time);
    
                    if (this.vars.paused) {
                        this.paused(true);
                    }
                });
    
            _ticker = Animation.ticker = new gs.Ticker();
            p = Animation.prototype;
            p._dirty = p._gc = p._initted = p._paused = false;
            p._totalTime = p._time = 0;
            p._rawPrevTime = -1;
            p._next = p._last = p._onUpdate = p._timeline = p.timeline = null;
            p._paused = false;
    
    
            //some browsers (like iOS) occasionally drop the requestAnimationFrame event when the user switches to a different tab and then comes back again, so we use a 2-second setTimeout() to sense if/when that condition occurs and then wake() the ticker.
            var _checkTimeout = function() {
                    if (_tickerActive && _getTime() - _lastUpdate > 2000 && _doc.visibilityState !== "hidden") {
                        _ticker.wake();
                    }
                    var t = setTimeout(_checkTimeout, 2000);
                    if (t.unref) {
                        // allows a node process to exit even if the timeout’s callback hasn't been invoked. Without it, the node process could hang as this function is called every two seconds.
                        t.unref();
                    }
                };
            _checkTimeout();
    
    
            p.play = function(from, suppressEvents) {
                if (from != null) {
                    this.seek(from, suppressEvents);
                }
                return this.reversed(false).paused(false);
            };
    
            p.pause = function(atTime, suppressEvents) {
                if (atTime != null) {
                    this.seek(atTime, suppressEvents);
                }
                return this.paused(true);
            };
    
            p.resume = function(from, suppressEvents) {
                if (from != null) {
                    this.seek(from, suppressEvents);
                }
                return this.paused(false);
            };
    
            p.seek = function(time, suppressEvents) {
                return this.totalTime(Number(time), suppressEvents !== false);
            };
    
            p.restart = function(includeDelay, suppressEvents) {
                return this.reversed(false).paused(false).totalTime(includeDelay ? -this._delay : 0, (suppressEvents !== false), true);
            };
    
            p.reverse = function(from, suppressEvents) {
                if (from != null) {
                    this.seek((from || this.totalDuration()), suppressEvents);
                }
                return this.reversed(true).paused(false);
            };
    
            p.render = function(time, suppressEvents, force) {
                //stub - we override this method in subclasses.
            };
    
            p.invalidate = function() {
                this._time = this._totalTime = 0;
                this._initted = this._gc = false;
                this._rawPrevTime = -1;
                if (this._gc || !this.timeline) {
                    this._enabled(true);
                }
                return this;
            };
    
            p.isActive = function() {
                var tl = this._timeline, //the 2 root timelines won't have a _timeline; they're always active.
                    startTime = this._startTime,
                    rawTime;
                return (!tl || (!this._gc && !this._paused && tl.isActive() && (rawTime = tl.rawTime(true)) >= startTime && rawTime < startTime + this.totalDuration() / this._timeScale - 0.0000001));
            };
    
            p._enabled = function (enabled, ignoreTimeline) {
                if (!_tickerActive) {
                    _ticker.wake();
                }
                this._gc = !enabled;
                this._active = this.isActive();
                if (ignoreTimeline !== true) {
                    if (enabled && !this.timeline) {
                        this._timeline.add(this, this._startTime - this._delay);
                    } else if (!enabled && this.timeline) {
                        this._timeline._remove(this, true);
                    }
                }
                return false;
            };
    
    
            p._kill = function(vars, target) {
                return this._enabled(false, false);
            };
    
            p.kill = function(vars, target) {
                this._kill(vars, target);
                return this;
            };
    
            p._uncache = function(includeSelf) {
                var tween = includeSelf ? this : this.timeline;
                while (tween) {
                    tween._dirty = true;
                    tween = tween.timeline;
                }
                return this;
            };
    
            p._swapSelfInParams = function(params) {
                var i = params.length,
                    copy = params.concat();
                while (--i > -1) {
                    if (params[i] === "{self}") {
                        copy[i] = this;
                    }
                }
                return copy;
            };
    
            p._callback = function(type) {
                var v = this.vars,
                    callback = v[type],
                    params = v[type + "Params"],
                    scope = v[type + "Scope"] || v.callbackScope || this,
                    l = params ? params.length : 0;
                switch (l) { //speed optimization; call() is faster than apply() so use it when there are only a few parameters (which is by far most common). Previously we simply did var v = this.vars; v[type].apply(v[type + "Scope"] || v.callbackScope || this, v[type + "Params"] || _blankArray);
                    case 0: callback.call(scope); break;
                    case 1: callback.call(scope, params[0]); break;
                    case 2: callback.call(scope, params[0], params[1]); break;
                    default: callback.apply(scope, params);
                }
            };
    
    //----Animation getters/setters --------------------------------------------------------
    
            p.eventCallback = function(type, callback, params, scope) {
                if ((type || "").substr(0,2) === "on") {
                    var v = this.vars;
                    if (arguments.length === 1) {
                        return v[type];
                    }
                    if (callback == null) {
                        delete v[type];
                    } else {
                        v[type] = callback;
                        v[type + "Params"] = (_isArray(params) && params.join("").indexOf("{self}") !== -1) ? this._swapSelfInParams(params) : params;
                        v[type + "Scope"] = scope;
                    }
                    if (type === "onUpdate") {
                        this._onUpdate = callback;
                    }
                }
                return this;
            };
    
            p.delay = function(value) {
                if (!arguments.length) {
                    return this._delay;
                }
                if (this._timeline.smoothChildTiming) {
                    this.startTime( this._startTime + value - this._delay );
                }
                this._delay = value;
                return this;
            };
    
            p.duration = function(value) {
                if (!arguments.length) {
                    this._dirty = false;
                    return this._duration;
                }
                this._duration = this._totalDuration = value;
                this._uncache(true); //true in case it's a TweenMax or TimelineMax that has a repeat - we'll need to refresh the totalDuration.
                if (this._timeline.smoothChildTiming) if (this._time > 0) if (this._time < this._duration) if (value !== 0) {
                    this.totalTime(this._totalTime * (value / this._duration), true);
                }
                return this;
            };
    
            p.totalDuration = function(value) {
                this._dirty = false;
                return (!arguments.length) ? this._totalDuration : this.duration(value);
            };
    
            p.time = function(value, suppressEvents) {
                if (!arguments.length) {
                    return this._time;
                }
                if (this._dirty) {
                    this.totalDuration();
                }
                return this.totalTime((value > this._duration) ? this._duration : value, suppressEvents);
            };
    
            p.totalTime = function(time, suppressEvents, uncapped) {
                if (!_tickerActive) {
                    _ticker.wake();
                }
                if (!arguments.length) {
                    return this._totalTime;
                }
                if (this._timeline) {
                    if (time < 0 && !uncapped) {
                        time += this.totalDuration();
                    }
                    if (this._timeline.smoothChildTiming) {
                        if (this._dirty) {
                            this.totalDuration();
                        }
                        var totalDuration = this._totalDuration,
                            tl = this._timeline;
                        if (time > totalDuration && !uncapped) {
                            time = totalDuration;
                        }
                        this._startTime = (this._paused ? this._pauseTime : tl._time) - ((!this._reversed ? time : totalDuration - time) / this._timeScale);
                        if (!tl._dirty) { //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.
                            this._uncache(false);
                        }
                        //in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The startTime of that child would get pushed out, but one of the ancestors may have completed.
                        if (tl._timeline) {
                            while (tl._timeline) {
                                if (tl._timeline._time !== (tl._startTime + tl._totalTime) / tl._timeScale) {
                                    tl.totalTime(tl._totalTime, true);
                                }
                                tl = tl._timeline;
                            }
                        }
                    }
                    if (this._gc) {
                        this._enabled(true, false);
                    }
                    if (this._totalTime !== time || this._duration === 0) {
                        if (_lazyTweens.length) {
                            _lazyRender();
                        }
                        this.render(time, suppressEvents, false);
                        if (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.
                            _lazyRender();
                        }
                    }
                }
                return this;
            };
    
            p.progress = p.totalProgress = function(value, suppressEvents) {
                var duration = this.duration();
                return (!arguments.length) ? (duration ? this._time / duration : this.ratio) : this.totalTime(duration * value, suppressEvents);
            };
    
            p.startTime = function(value) {
                if (!arguments.length) {
                    return this._startTime;
                }
                if (value !== this._startTime) {
                    this._startTime = value;
                    if (this.timeline) if (this.timeline._sortChildren) {
                        this.timeline.add(this, value - this._delay); //ensures that any necessary re-sequencing of Animations in the timeline occurs to make sure the rendering order is correct.
                    }
                }
                return this;
            };
    
            p.endTime = function(includeRepeats) {
                return this._startTime + ((includeRepeats != false) ? this.totalDuration() : this.duration()) / this._timeScale;
            };
    
            p.timeScale = function(value) {
                if (!arguments.length) {
                    return this._timeScale;
                }
                value = value || _tinyNum; //can't allow zero because it'll throw the math off
                if (this._timeline && this._timeline.smoothChildTiming) {
                    var pauseTime = this._pauseTime,
                        t = (pauseTime || pauseTime === 0) ? pauseTime : this._timeline.totalTime();
                    this._startTime = t - ((t - this._startTime) * this._timeScale / value);
                }
                this._timeScale = value;
                return this._uncache(false);
            };
    
            p.reversed = function(value) {
                if (!arguments.length) {
                    return this._reversed;
                }
                if (value != this._reversed) {
                    this._reversed = value;
                    this.totalTime(((this._timeline && !this._timeline.smoothChildTiming) ? this.totalDuration() - this._totalTime : this._totalTime), true);
                }
                return this;
            };
    
            p.paused = function(value) {
                if (!arguments.length) {
                    return this._paused;
                }
                var tl = this._timeline,
                    raw, elapsed;
                if (value != this._paused) if (tl) {
                    if (!_tickerActive && !value) {
                        _ticker.wake();
                    }
                    raw = tl.rawTime();
                    elapsed = raw - this._pauseTime;
                    if (!value && tl.smoothChildTiming) {
                        this._startTime += elapsed;
                        this._uncache(false);
                    }
                    this._pauseTime = value ? raw : null;
                    this._paused = value;
                    this._active = this.isActive();
                    if (!value && elapsed !== 0 && this._initted && this.duration()) {
                        raw = tl.smoothChildTiming ? this._totalTime : (raw - this._startTime) / this._timeScale;
                        this.render(raw, (raw === this._totalTime), true); //in case the target's properties changed via some other tween or manual update by the user, we should force a render.
                    }
                }
                if (this._gc && !value) {
                    this._enabled(true, false);
                }
                return this;
            };
    
    
    /*
     * ----------------------------------------------------------------
     * SimpleTimeline
     * ----------------------------------------------------------------
     */
            var SimpleTimeline = _class("core.SimpleTimeline", function(vars) {
                Animation.call(this, 0, vars);
                this.autoRemoveChildren = this.smoothChildTiming = true;
            });
    
            p = SimpleTimeline.prototype = new Animation();
            p.constructor = SimpleTimeline;
            p.kill()._gc = false;
            p._first = p._last = p._recent = null;
            p._sortChildren = false;
    
            p.add = p.insert = function(child, position, align, stagger) {
                var prevTween, st;
                child._startTime = Number(position || 0) + child._delay;
                if (child._paused) if (this !== child._timeline) { //we only adjust the _pauseTime if it wasn't in this timeline already. Remember, sometimes a tween will be inserted again into the same timeline when its startTime is changed so that the tweens in the TimelineLite/Max are re-ordered properly in the linked list (so everything renders in the proper order).
                    child._pauseTime = child._startTime + ((this.rawTime() - child._startTime) / child._timeScale);
                }
                if (child.timeline) {
                    child.timeline._remove(child, true); //removes from existing timeline so that it can be properly added to this one.
                }
                child.timeline = child._timeline = this;
                if (child._gc) {
                    child._enabled(true, true);
                }
                prevTween = this._last;
                if (this._sortChildren) {
                    st = child._startTime;
                    while (prevTween && prevTween._startTime > st) {
                        prevTween = prevTween._prev;
                    }
                }
                if (prevTween) {
                    child._next = prevTween._next;
                    prevTween._next = child;
                } else {
                    child._next = this._first;
                    this._first = child;
                }
                if (child._next) {
                    child._next._prev = child;
                } else {
                    this._last = child;
                }
                child._prev = prevTween;
                this._recent = child;
                if (this._timeline) {
                    this._uncache(true);
                }
                return this;
            };
    
            p._remove = function(tween, skipDisable) {
                if (tween.timeline === this) {
                    if (!skipDisable) {
                        tween._enabled(false, true);
                    }
    
                    if (tween._prev) {
                        tween._prev._next = tween._next;
                    } else if (this._first === tween) {
                        this._first = tween._next;
                    }
                    if (tween._next) {
                        tween._next._prev = tween._prev;
                    } else if (this._last === tween) {
                        this._last = tween._prev;
                    }
                    tween._next = tween._prev = tween.timeline = null;
                    if (tween === this._recent) {
                        this._recent = this._last;
                    }
    
                    if (this._timeline) {
                        this._uncache(true);
                    }
                }
                return this;
            };
    
            p.render = function(time, suppressEvents, force) {
                var tween = this._first,
                    next;
                this._totalTime = this._time = this._rawPrevTime = time;
                while (tween) {
                    next = tween._next; //record it here because the value could change after rendering...
                    if (tween._active || (time >= tween._startTime && !tween._paused && !tween._gc)) {
                        if (!tween._reversed) {
                            tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
                        } else {
                            tween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);
                        }
                    }
                    tween = next;
                }
            };
    
            p.rawTime = function() {
                if (!_tickerActive) {
                    _ticker.wake();
                }
                return this._totalTime;
            };
    
    /*
     * ----------------------------------------------------------------
     * TweenLite
     * ----------------------------------------------------------------
     */
            var TweenLite = _class("TweenLite", function(target, duration, vars) {
                    Animation.call(this, duration, vars);
                    this.render = TweenLite.prototype.render; //speed optimization (avoid prototype lookup on this "hot" method)
    
                    if (target == null) {
                        throw "Cannot tween a null target.";
                    }
    
                    this.target = target = (typeof(target) !== "string") ? target : TweenLite.selector(target) || target;
    
                    var isSelector = (target.jquery || (target.length && target !== window && target[0] && (target[0] === window || (target[0].nodeType && target[0].style && !target.nodeType)))),
                        overwrite = this.vars.overwrite,
                        i, targ, targets;
    
                    this._overwrite = overwrite = (overwrite == null) ? _overwriteLookup[TweenLite.defaultOverwrite] : (typeof(overwrite) === "number") ? overwrite >> 0 : _overwriteLookup[overwrite];
    
                    if ((isSelector || target instanceof Array || (target.push && _isArray(target))) && typeof(target[0]) !== "number") {
                        this._targets = targets = _slice(target);  //don't use Array.prototype.slice.call(target, 0) because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()
                        this._propLookup = [];
                        this._siblings = [];
                        for (i = 0; i < targets.length; i++) {
                            targ = targets[i];
                            if (!targ) {
                                targets.splice(i--, 1);
                                continue;
                            } else if (typeof(targ) === "string") {
                                targ = targets[i--] = TweenLite.selector(targ); //in case it's an array of strings
                                if (typeof(targ) === "string") {
                                    targets.splice(i+1, 1); //to avoid an endless loop (can't imagine why the selector would return a string, but just in case)
                                }
                                continue;
                            } else if (targ.length && targ !== window && targ[0] && (targ[0] === window || (targ[0].nodeType && targ[0].style && !targ.nodeType))) { //in case the user is passing in an array of selector objects (like jQuery objects), we need to check one more level and pull things out if necessary. Also note that <select> elements pass all the criteria regarding length and the first child having style, so we must also check to ensure the target isn't an HTML node itself.
                                targets.splice(i--, 1);
                                this._targets = targets = targets.concat(_slice(targ));
                                continue;
                            }
                            this._siblings[i] = _register(targ, this, false);
                            if (overwrite === 1) if (this._siblings[i].length > 1) {
                                _applyOverwrite(targ, this, null, 1, this._siblings[i]);
                            }
                        }
    
                    } else {
                        this._propLookup = {};
                        this._siblings = _register(target, this, false);
                        if (overwrite === 1) if (this._siblings.length > 1) {
                            _applyOverwrite(target, this, null, 1, this._siblings);
                        }
                    }
                    if (this.vars.immediateRender || (duration === 0 && this._delay === 0 && this.vars.immediateRender !== false)) {
                        this._time = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)
                        this.render(Math.min(0, -this._delay)); //in case delay is negative
                    }
                }, true),
                _isSelector = function(v) {
                    return (v && v.length && v !== window && v[0] && (v[0] === window || (v[0].nodeType && v[0].style && !v.nodeType))); //we cannot check "nodeType" if the target is window from within an iframe, otherwise it will trigger a security error in some browsers like Firefox.
                },
                _autoCSS = function(vars, target) {
                    var css = {},
                        p;
                    for (p in vars) {
                        if (!_reservedProps[p] && (!(p in target) || p === "transform" || p === "x" || p === "y" || p === "width" || p === "height" || p === "className" || p === "border") && (!_plugins[p] || (_plugins[p] && _plugins[p]._autoCSS))) { //note: <img> elements contain read-only "x" and "y" properties. We should also prioritize editing css width/height rather than the element's properties.
                            css[p] = vars[p];
                            delete vars[p];
                        }
                    }
                    vars.css = css;
                };
    
            p = TweenLite.prototype = new Animation();
            p.constructor = TweenLite;
            p.kill()._gc = false;
    
    //----TweenLite defaults, overwrite management, and root updates ----------------------------------------------------
    
            p.ratio = 0;
            p._firstPT = p._targets = p._overwrittenProps = p._startAt = null;
            p._notifyPluginsOfEnabled = p._lazy = false;
    
            TweenLite.version = "1.20.2";
            TweenLite.defaultEase = p._ease = new Ease(null, null, 1, 1);
            TweenLite.defaultOverwrite = "auto";
            TweenLite.ticker = _ticker;
            TweenLite.autoSleep = 120;
            TweenLite.lagSmoothing = function(threshold, adjustedLag) {
                _ticker.lagSmoothing(threshold, adjustedLag);
            };
    
            TweenLite.selector = window.$ || window.jQuery || function(e) {
                var selector = window.$ || window.jQuery;
                if (selector) {
                    TweenLite.selector = selector;
                    return selector(e);
                }
                return (typeof(_doc) === "undefined") ? e : (_doc.querySelectorAll ? _doc.querySelectorAll(e) : _doc.getElementById((e.charAt(0) === "#") ? e.substr(1) : e));
            };
    
            var _lazyTweens = [],
                _lazyLookup = {},
                _numbersExp = /(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/ig,
                _relExp = /[\+-]=-?[\.\d]/,
                //_nonNumbersExp = /(?:([\-+](?!(\d|=)))|[^\d\-+=e]|(e(?![\-+][\d])))+/ig,
                _setRatio = function(v) {
                    var pt = this._firstPT,
                        min = 0.000001,
                        val;
                    while (pt) {
                        val = !pt.blob ? pt.c * v + pt.s : (v === 1 && this.end) ? this.end : v ? this.join("") : this.start;
                        if (pt.m) {
                            val = pt.m(val, this._target || pt.t);
                        } else if (val < min) if (val > -min && !pt.blob) { //prevents issues with converting very small numbers to strings in the browser
                            val = 0;
                        }
                        if (!pt.f) {
                            pt.t[pt.p] = val;
                        } else if (pt.fp) {
                            pt.t[pt.p](pt.fp, val);
                        } else {
                            pt.t[pt.p](val);
                        }
                        pt = pt._next;
                    }
                },
                //compares two strings (start/end), finds the numbers that are different and spits back an array representing the whole value but with the changing values isolated as elements. For example, "rgb(0,0,0)" and "rgb(100,50,0)" would become ["rgb(", 0, ",", 50, ",0)"]. Notice it merges the parts that are identical (performance optimization). The array also has a linked list of PropTweens attached starting with _firstPT that contain the tweening data (t, p, s, c, f, etc.). It also stores the starting value as a "start" property so that we can revert to it if/when necessary, like when a tween rewinds fully. If the quantity of numbers differs between the start and end, it will always prioritize the end value(s). The pt parameter is optional - it's for a PropTween that will be appended to the end of the linked list and is typically for actually setting the value after all of the elements have been updated (with array.join("")).
                _blobDif = function(start, end, filter, pt) {
                    var a = [],
                        charIndex = 0,
                        s = "",
                        color = 0,
                        startNums, endNums, num, i, l, nonNumbers, currentNum;
                    a.start = start;
                    a.end = end;
                    start = a[0] = start + ""; //ensure values are strings
                    end = a[1] = end + "";
                    if (filter) {
                        filter(a); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.
                        start = a[0];
                        end = a[1];
                    }
                    a.length = 0;
                    startNums = start.match(_numbersExp) || [];
                    endNums = end.match(_numbersExp) || [];
                    if (pt) {
                        pt._next = null;
                        pt.blob = 1;
                        a._firstPT = a._applyPT = pt; //apply last in the linked list (which means inserting it first)
                    }
                    l = endNums.length;
                    for (i = 0; i < l; i++) {
                        currentNum = endNums[i];
                        nonNumbers = end.substr(charIndex, end.indexOf(currentNum, charIndex)-charIndex);
                        s += (nonNumbers || !i) ? nonNumbers : ","; //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
                        charIndex += nonNumbers.length;
                        if (color) { //sense rgba() values and round them.
                            color = (color + 1) % 5;
                        } else if (nonNumbers.substr(-5) === "rgba(") {
                            color = 1;
                        }
                        if (currentNum === startNums[i] || startNums.length <= i) {
                            s += currentNum;
                        } else {
                            if (s) {
                                a.push(s);
                                s = "";
                            }
                            num = parseFloat(startNums[i]);
                            a.push(num);
                            a._firstPT = {_next: a._firstPT, t:a, p: a.length-1, s:num, c:((currentNum.charAt(1) === "=") ? parseInt(currentNum.charAt(0) + "1", 10) * parseFloat(currentNum.substr(2)) : (parseFloat(currentNum) - num)) || 0, f:0, m:(color && color < 4) ? Math.round : 0};
                            //note: we don't set _prev because we'll never need to remove individual PropTweens from this list.
                        }
                        charIndex += currentNum.length;
                    }
                    s += end.substr(charIndex);
                    if (s) {
                        a.push(s);
                    }
                    a.setRatio = _setRatio;
                    if (_relExp.test(end)) { //if the end string contains relative values, delete it so that on the final render (in _setRatio()), we don't actually set it to the string with += or -= characters (forces it to use the calculated value).
                        a.end = 0;
                    }
                    return a;
                },
                //note: "funcParam" is only necessary for function-based getters/setters that require an extra parameter like getAttribute("width") and setAttribute("width", value). In this example, funcParam would be "width". Used by AttrPlugin for example.
                _addPropTween = function(target, prop, start, end, overwriteProp, mod, funcParam, stringFilter, index) {
                    if (typeof(end) === "function") {
                        end = end(index || 0, target);
                    }
                    var type = typeof(target[prop]),
                        getterName = (type !== "function") ? "" : ((prop.indexOf("set") || typeof(target["get" + prop.substr(3)]) !== "function") ? prop : "get" + prop.substr(3)),
                        s = (start !== "get") ? start : !getterName ? target[prop] : funcParam ? target[getterName](funcParam) : target[getterName](),
                        isRelative = (typeof(end) === "string" && end.charAt(1) === "="),
                        pt = {t:target, p:prop, s:s, f:(type === "function"), pg:0, n:overwriteProp || prop, m:(!mod ? 0 : (typeof(mod) === "function") ? mod : Math.round), pr:0, c:isRelative ? parseInt(end.charAt(0) + "1", 10) * parseFloat(end.substr(2)) : (parseFloat(end) - s) || 0},
                        blob;
    
                    if (typeof(s) !== "number" || (typeof(end) !== "number" && !isRelative)) {
                        if (funcParam || isNaN(s) || (!isRelative && isNaN(end)) || typeof(s) === "boolean" || typeof(end) === "boolean") {
                            //a blob (string that has multiple numbers in it)
                            pt.fp = funcParam;
                            blob = _blobDif(s, (isRelative ? parseFloat(pt.s) + pt.c : end), stringFilter || TweenLite.defaultStringFilter, pt);
                            pt = {t: blob, p: "setRatio", s: 0, c: 1, f: 2, pg: 0, n: overwriteProp || prop, pr: 0, m: 0}; //"2" indicates it's a Blob property tween. Needed for RoundPropsPlugin for example.
                        } else {
                            pt.s = parseFloat(s);
                            if (!isRelative) {
                                pt.c = (parseFloat(end) - pt.s) || 0;
                            }
                        }
                    }
                    if (pt.c) { //only add it to the linked list if there's a change.
                        if ((pt._next = this._firstPT)) {
                            pt._next._prev = pt;
                        }
                        this._firstPT = pt;
                        return pt;
                    }
                },
                _internals = TweenLite._internals = {isArray:_isArray, isSelector:_isSelector, lazyTweens:_lazyTweens, blobDif:_blobDif}, //gives us a way to expose certain private values to other GreenSock classes without contaminating tha main TweenLite object.
                _plugins = TweenLite._plugins = {},
                _tweenLookup = _internals.tweenLookup = {},
                _tweenLookupNum = 0,
                _reservedProps = _internals.reservedProps = {ease:1, delay:1, overwrite:1, onComplete:1, onCompleteParams:1, onCompleteScope:1, useFrames:1, runBackwards:1, startAt:1, onUpdate:1, onUpdateParams:1, onUpdateScope:1, onStart:1, onStartParams:1, onStartScope:1, onReverseComplete:1, onReverseCompleteParams:1, onReverseCompleteScope:1, onRepeat:1, onRepeatParams:1, onRepeatScope:1, easeParams:1, yoyo:1, immediateRender:1, repeat:1, repeatDelay:1, data:1, paused:1, reversed:1, autoCSS:1, lazy:1, onOverwrite:1, callbackScope:1, stringFilter:1, id:1, yoyoEase:1},
                _overwriteLookup = {none:0, all:1, auto:2, concurrent:3, allOnStart:4, preexisting:5, "true":1, "false":0},
                _rootFramesTimeline = Animation._rootFramesTimeline = new SimpleTimeline(),
                _rootTimeline = Animation._rootTimeline = new SimpleTimeline(),
                _nextGCFrame = 30,
                _lazyRender = _internals.lazyRender = function() {
                    var i = _lazyTweens.length,
                        tween;
                    _lazyLookup = {};
                    while (--i > -1) {
                        tween = _lazyTweens[i];
                        if (tween && tween._lazy !== false) {
                            tween.render(tween._lazy[0], tween._lazy[1], true);
                            tween._lazy = false;
                        }
                    }
                    _lazyTweens.length = 0;
                };
    
            _rootTimeline._startTime = _ticker.time;
            _rootFramesTimeline._startTime = _ticker.frame;
            _rootTimeline._active = _rootFramesTimeline._active = true;
            setTimeout(_lazyRender, 1); //on some mobile devices, there isn't a "tick" before code runs which means any lazy renders wouldn't run before the next official "tick".
    
            Animation._updateRoot = TweenLite.render = function() {
                    var i, a, p;
                    if (_lazyTweens.length) { //if code is run outside of the requestAnimationFrame loop, there may be tweens queued AFTER the engine refreshed, so we need to ensure any pending renders occur before we refresh again.
                        _lazyRender();
                    }
                    _rootTimeline.render((_ticker.time - _rootTimeline._startTime) * _rootTimeline._timeScale, false, false);
                    _rootFramesTimeline.render((_ticker.frame - _rootFramesTimeline._startTime) * _rootFramesTimeline._timeScale, false, false);
                    if (_lazyTweens.length) {
                        _lazyRender();
                    }
                    if (_ticker.frame >= _nextGCFrame) { //dump garbage every 120 frames or whatever the user sets TweenLite.autoSleep to
                        _nextGCFrame = _ticker.frame + (parseInt(TweenLite.autoSleep, 10) || 120);
                        for (p in _tweenLookup) {
                            a = _tweenLookup[p].tweens;
                            i = a.length;
                            while (--i > -1) {
                                if (a[i]._gc) {
                                    a.splice(i, 1);
                                }
                            }
                            if (a.length === 0) {
                                delete _tweenLookup[p];
                            }
                        }
                        //if there are no more tweens in the root timelines, or if they're all paused, make the _timer sleep to reduce load on the CPU slightly
                        p = _rootTimeline._first;
                        if (!p || p._paused) if (TweenLite.autoSleep && !_rootFramesTimeline._first && _ticker._listeners.tick.length === 1) {
                            while (p && p._paused) {
                                p = p._next;
                            }
                            if (!p) {
                                _ticker.sleep();
                            }
                        }
                    }
                };
    
            _ticker.addEventListener("tick", Animation._updateRoot);
    
            var _register = function(target, tween, scrub) {
                    var id = target._gsTweenID, a, i;
                    if (!_tweenLookup[id || (target._gsTweenID = id = "t" + (_tweenLookupNum++))]) {
                        _tweenLookup[id] = {target:target, tweens:[]};
                    }
                    if (tween) {
                        a = _tweenLookup[id].tweens;
                        a[(i = a.length)] = tween;
                        if (scrub) {
                            while (--i > -1) {
                                if (a[i] === tween) {
                                    a.splice(i, 1);
                                }
                            }
                        }
                    }
                    return _tweenLookup[id].tweens;
                },
                _onOverwrite = function(overwrittenTween, overwritingTween, target, killedProps) {
                    var func = overwrittenTween.vars.onOverwrite, r1, r2;
                    if (func) {
                        r1 = func(overwrittenTween, overwritingTween, target, killedProps);
                    }
                    func = TweenLite.onOverwrite;
                    if (func) {
                        r2 = func(overwrittenTween, overwritingTween, target, killedProps);
                    }
                    return (r1 !== false && r2 !== false);
                },
                _applyOverwrite = function(target, tween, props, mode, siblings) {
                    var i, changed, curTween, l;
                    if (mode === 1 || mode >= 4) {
                        l = siblings.length;
                        for (i = 0; i < l; i++) {
                            if ((curTween = siblings[i]) !== tween) {
                                if (!curTween._gc) {
                                    if (curTween._kill(null, target, tween)) {
                                        changed = true;
                                    }
                                }
                            } else if (mode === 5) {
                                break;
                            }
                        }
                        return changed;
                    }
                    //NOTE: Add 0.0000000001 to overcome floating point errors that can cause the startTime to be VERY slightly off (when a tween's time() is set for example)
                    var startTime = tween._startTime + _tinyNum,
                        overlaps = [],
                        oCount = 0,
                        zeroDur = (tween._duration === 0),
                        globalStart;
                    i = siblings.length;
                    while (--i > -1) {
                        if ((curTween = siblings[i]) === tween || curTween._gc || curTween._paused) {
                            //ignore
                        } else if (curTween._timeline !== tween._timeline) {
                            globalStart = globalStart || _checkOverlap(tween, 0, zeroDur);
                            if (_checkOverlap(curTween, globalStart, zeroDur) === 0) {
                                overlaps[oCount++] = curTween;
                            }
                        } else if (curTween._startTime <= startTime) if (curTween._startTime + curTween.totalDuration() / curTween._timeScale > startTime) if (!((zeroDur || !curTween._initted) && startTime - curTween._startTime <= 0.0000000002)) {
                            overlaps[oCount++] = curTween;
                        }
                    }
    
                    i = oCount;
                    while (--i > -1) {
                        curTween = overlaps[i];
                        if (mode === 2) if (curTween._kill(props, target, tween)) {
                            changed = true;
                        }
                        if (mode !== 2 || (!curTween._firstPT && curTween._initted)) {
                            if (mode !== 2 && !_onOverwrite(curTween, tween)) {
                                continue;
                            }
                            if (curTween._enabled(false, false)) { //if all property tweens have been overwritten, kill the tween.
                                changed = true;
                            }
                        }
                    }
                    return changed;
                },
                _checkOverlap = function(tween, reference, zeroDur) {
                    var tl = tween._timeline,
                        ts = tl._timeScale,
                        t = tween._startTime;
                    while (tl._timeline) {
                        t += tl._startTime;
                        ts *= tl._timeScale;
                        if (tl._paused) {
                            return -100;
                        }
                        tl = tl._timeline;
                    }
                    t /= ts;
                    return (t > reference) ? t - reference : ((zeroDur && t === reference) || (!tween._initted && t - reference < 2 * _tinyNum)) ? _tinyNum : ((t += tween.totalDuration() / tween._timeScale / ts) > reference + _tinyNum) ? 0 : t - reference - _tinyNum;
                };
    
    
    //---- TweenLite instance methods -----------------------------------------------------------------------------
    
            p._init = function() {
                var v = this.vars,
                    op = this._overwrittenProps,
                    dur = this._duration,
                    immediate = !!v.immediateRender,
                    ease = v.ease,
                    i, initPlugins, pt, p, startVars, l;
                if (v.startAt) {
                    if (this._startAt) {
                        this._startAt.render(-1, true); //if we've run a startAt previously (when the tween instantiated), we should revert it so that the values re-instantiate correctly particularly for relative tweens. Without this, a TweenLite.fromTo(obj, 1, {x:"+=100"}, {x:"-=100"}), for example, would actually jump to +=200 because the startAt would run twice, doubling the relative change.
                        this._startAt.kill();
                    }
                    startVars = {};
                    for (p in v.startAt) { //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, 1, from, to).fromTo(e, 1, to, from);
                        startVars[p] = v.startAt[p];
                    }
                    startVars.overwrite = false;
                    startVars.immediateRender = true;
                    startVars.lazy = (immediate && v.lazy !== false);
                    startVars.startAt = startVars.delay = null; //no nesting of startAt objects allowed (otherwise it could cause an infinite loop).
                    startVars.onUpdate = v.onUpdate;
                    startVars.onUpdateScope = v.onUpdateScope || v.callbackScope || this;
                    this._startAt = TweenLite.to(this.target, 0, startVars);
                    if (immediate) {
                        if (this._time > 0) {
                            this._startAt = null; //tweens that render immediately (like most from() and fromTo() tweens) shouldn't revert when their parent timeline's playhead goes backward past the startTime because the initial render could have happened anytime and it shouldn't be directly correlated to this tween's startTime. Imagine setting up a complex animation where the beginning states of various objects are rendered immediately but the tween doesn't happen for quite some time - if we revert to the starting values as soon as the playhead goes backward past the tween's startTime, it will throw things off visually. Reversion should only happen in TimelineLite/Max instances where immediateRender was false (which is the default in the convenience methods like from()).
                        } else if (dur !== 0) {
                            return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a TimelineLite or TimelineMax, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.
                        }
                    }
                } else if (v.runBackwards && dur !== 0) {
                    //from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)
                    if (this._startAt) {
                        this._startAt.render(-1, true);
                        this._startAt.kill();
                        this._startAt = null;
                    } else {
                        if (this._time !== 0) { //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0
                            immediate = false;
                        }
                        pt = {};
                        for (p in v) { //copy props into a new object and skip any reserved props, otherwise onComplete or onUpdate or onStart could fire. We should, however, permit autoCSS to go through.
                            if (!_reservedProps[p] || p === "autoCSS") {
                                pt[p] = v[p];
                            }
                        }
                        pt.overwrite = 0;
                        pt.data = "isFromStart"; //we tag the tween with as "isFromStart" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a "from()" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.
                        pt.lazy = (immediate && v.lazy !== false);
                        pt.immediateRender = immediate; //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)
                        this._startAt = TweenLite.to(this.target, 0, pt);
                        if (!immediate) {
                            this._startAt._init(); //ensures that the initial values are recorded
                            this._startAt._enabled(false); //no need to have the tween render on the next cycle. Disable it because we'll always manually control the renders of the _startAt tween.
                            if (this.vars.immediateRender) {
                                this._startAt = null;
                            }
                        } else if (this._time === 0) {
                            return;
                        }
                    }
                }
                this._ease = ease = (!ease) ? TweenLite.defaultEase : (ease instanceof Ease) ? ease : (typeof(ease) === "function") ? new Ease(ease, v.easeParams) : _easeMap[ease] || TweenLite.defaultEase;
                if (v.easeParams instanceof Array && ease.config) {
                    this._ease = ease.config.apply(ease, v.easeParams);
                }
                this._easeType = this._ease._type;
                this._easePower = this._ease._power;
                this._firstPT = null;
    
                if (this._targets) {
                    l = this._targets.length;
                    for (i = 0; i < l; i++) {
                        if ( this._initProps( this._targets[i], (this._propLookup[i] = {}), this._siblings[i], (op ? op[i] : null), i) ) {
                            initPlugins = true;
                        }
                    }
                } else {
                    initPlugins = this._initProps(this.target, this._propLookup, this._siblings, op, 0);
                }
    
                if (initPlugins) {
                    TweenLite._onPluginEvent("_onInitAllProps", this); //reorders the array in order of priority. Uses a static TweenPlugin method in order to minimize file size in TweenLite
                }
                if (op) if (!this._firstPT) if (typeof(this.target) !== "function") { //if all tweening properties have been overwritten, kill the tween. If the target is a function, it's probably a delayedCall so let it live.
                    this._enabled(false, false);
                }
                if (v.runBackwards) {
                    pt = this._firstPT;
                    while (pt) {
                        pt.s += pt.c;
                        pt.c = -pt.c;
                        pt = pt._next;
                    }
                }
                this._onUpdate = v.onUpdate;
                this._initted = true;
            };
    
            p._initProps = function(target, propLookup, siblings, overwrittenProps, index) {
                var p, i, initPlugins, plugin, pt, v;
                if (target == null) {
                    return false;
                }
    
                if (_lazyLookup[target._gsTweenID]) {
                    _lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)
                }
    
                if (!this.vars.css) if (target.style) if (target !== window && target.nodeType) if (_plugins.css) if (this.vars.autoCSS !== false) { //it's so common to use TweenLite/Max to animate the css of DOM elements, we assume that if the target is a DOM element, that's what is intended (a convenience so that users don't have to wrap things in css:{}, although we still recommend it for a slight performance boost and better specificity). Note: we cannot check "nodeType" on the window inside an iframe.
                    _autoCSS(this.vars, target);
                }
                for (p in this.vars) {
                    v = this.vars[p];
                    if (_reservedProps[p]) {
                        if (v) if ((v instanceof Array) || (v.push && _isArray(v))) if (v.join("").indexOf("{self}") !== -1) {
                            this.vars[p] = v = this._swapSelfInParams(v, this);
                        }
    
                    } else if (_plugins[p] && (plugin = new _plugins[p]())._onInitTween(target, this.vars[p], this, index)) {
    
                        //t - target 		[object]
                        //p - property 		[string]
                        //s - start			[number]
                        //c - change		[number]
                        //f - isFunction	[boolean]
                        //n - name			[string]
                        //pg - isPlugin 	[boolean]
                        //pr - priority		[number]
                        //m - mod           [function | 0]
                        this._firstPT = pt = {_next:this._firstPT, t:plugin, p:"setRatio", s:0, c:1, f:1, n:p, pg:1, pr:plugin._priority, m:0};
                        i = plugin._overwriteProps.length;
                        while (--i > -1) {
                            propLookup[plugin._overwriteProps[i]] = this._firstPT;
                        }
                        if (plugin._priority || plugin._onInitAllProps) {
                            initPlugins = true;
                        }
                        if (plugin._onDisable || plugin._onEnable) {
                            this._notifyPluginsOfEnabled = true;
                        }
                        if (pt._next) {
                            pt._next._prev = pt;
                        }
    
                    } else {
                        propLookup[p] = _addPropTween.call(this, target, p, "get", v, p, 0, null, this.vars.stringFilter, index);
                    }
                }
    
                if (overwrittenProps) if (this._kill(overwrittenProps, target)) { //another tween may have tried to overwrite properties of this tween before init() was called (like if two tweens start at the same time, the one created second will run first)
                    return this._initProps(target, propLookup, siblings, overwrittenProps, index);
                }
                if (this._overwrite > 1) if (this._firstPT) if (siblings.length > 1) if (_applyOverwrite(target, this, propLookup, this._overwrite, siblings)) {
                    this._kill(propLookup, target);
                    return this._initProps(target, propLookup, siblings, overwrittenProps, index);
                }
                if (this._firstPT) if ((this.vars.lazy !== false && this._duration) || (this.vars.lazy && !this._duration)) { //zero duration tweens don't lazy render by default; everything else does.
                    _lazyLookup[target._gsTweenID] = true;
                }
                return initPlugins;
            };
    
            p.render = function(time, suppressEvents, force) {
                var prevTime = this._time,
                    duration = this._duration,
                    prevRawPrevTime = this._rawPrevTime,
                    isComplete, callback, pt, rawPrevTime;
                if (time >= duration - 0.0000001 && time >= 0) { //to work around occasional floating point math artifacts.
                    this._totalTime = this._time = duration;
                    this.ratio = this._ease._calcEnd ? this._ease.getRatio(1) : 1;
                    if (!this._reversed ) {
                        isComplete = true;
                        callback = "onComplete";
                        force = (force || this._timeline.autoRemoveChildren); //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.
                    }
                    if (duration === 0) if (this._initted || !this.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the "playhead" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's "playhead" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.
                        if (this._startTime === this._timeline._duration) { //if a zero-duration tween is at the VERY end of a timeline and that timeline renders at its end, it will typically add a tiny bit of cushion to the render time to prevent rounding errors from getting in the way of tweens rendering their VERY end. If we then reverse() that timeline, the zero-duration tween will trigger its onReverseComplete even though technically the playhead didn't pass over it again. It's a very specific edge case we must accommodate.
                            time = 0;
                        }
                        if (prevRawPrevTime < 0 || (time <= 0 && time >= -0.0000001) || (prevRawPrevTime === _tinyNum && this.data !== "isPause")) if (prevRawPrevTime !== time) { //note: when this.data is "isPause", it's a callback added by addPause() on a timeline that we should not be triggered when LEAVING its exact start time. In other words, tl.addPause(1).play(1) shouldn't pause.
                            force = true;
                            if (prevRawPrevTime > _tinyNum) {
                                callback = "onReverseComplete";
                            }
                        }
                        this._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                    }
    
                } else if (time < 0.0000001) { //to work around occasional floating point math artifacts, round super small values to 0.
                    this._totalTime = this._time = 0;
                    this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;
                    if (prevTime !== 0 || (duration === 0 && prevRawPrevTime > 0)) {
                        callback = "onReverseComplete";
                        isComplete = this._reversed;
                    }
                    if (time < 0) {
                        this._active = false;
                        if (duration === 0) if (this._initted || !this.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the "playhead" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's "playhead" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.
                            if (prevRawPrevTime >= 0 && !(prevRawPrevTime === _tinyNum && this.data === "isPause")) {
                                force = true;
                            }
                            this._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                        }
                    }
                    if (!this._initted || (this._startAt && this._startAt.progress())) { //if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately. Also, we check progress() because if startAt has already rendered at its end, we should force a render at its beginning. Otherwise, if you put the playhead directly on top of where a fromTo({immediateRender:false}) starts, and then move it backwards, the from() won't revert its values.
                        force = true;
                    }
                } else {
                    this._totalTime = this._time = time;
    
                    if (this._easeType) {
                        var r = time / duration, type = this._easeType, pow = this._easePower;
                        if (type === 1 || (type === 3 && r >= 0.5)) {
                            r = 1 - r;
                        }
                        if (type === 3) {
                            r *= 2;
                        }
                        if (pow === 1) {
                            r *= r;
                        } else if (pow === 2) {
                            r *= r * r;
                        } else if (pow === 3) {
                            r *= r * r * r;
                        } else if (pow === 4) {
                            r *= r * r * r * r;
                        }
    
                        if (type === 1) {
                            this.ratio = 1 - r;
                        } else if (type === 2) {
                            this.ratio = r;
                        } else if (time / duration < 0.5) {
                            this.ratio = r / 2;
                        } else {
                            this.ratio = 1 - (r / 2);
                        }
    
                    } else {
                        this.ratio = this._ease.getRatio(time / duration);
                    }
                }
    
                if (this._time === prevTime && !force) {
                    return;
                } else if (!this._initted) {
                    this._init();
                    if (!this._initted || this._gc) { //immediateRender tweens typically won't initialize until the playhead advances (_time is greater than 0) in order to ensure that overwriting occurs properly. Also, if all of the tweening properties have been overwritten (which would cause _gc to be true, as set in _init()), we shouldn't continue otherwise an onStart callback could be called for example.
                        return;
                    } else if (!force && this._firstPT && ((this.vars.lazy !== false && this._duration) || (this.vars.lazy && !this._duration))) {
                        this._time = this._totalTime = prevTime;
                        this._rawPrevTime = prevRawPrevTime;
                        _lazyTweens.push(this);
                        this._lazy = [time, suppressEvents];
                        return;
                    }
                    //_ease is initially set to defaultEase, so now that init() has run, _ease is set properly and we need to recalculate the ratio. Overall this is faster than using conditional logic earlier in the method to avoid having to set ratio twice because we only init() once but renderTime() gets called VERY frequently.
                    if (this._time && !isComplete) {
                        this.ratio = this._ease.getRatio(this._time / duration);
                    } else if (isComplete && this._ease._calcEnd) {
                        this.ratio = this._ease.getRatio((this._time === 0) ? 0 : 1);
                    }
                }
                if (this._lazy !== false) { //in case a lazy render is pending, we should flush it because the new render is occurring now (imagine a lazy tween instantiating and then immediately the user calls tween.seek(tween.duration()), skipping to the end - the end render would be forced, and then if we didn't flush the lazy render, it'd fire AFTER the seek(), rendering it at the wrong time.
                    this._lazy = false;
                }
                if (!this._active) if (!this._paused && this._time !== prevTime && time >= 0) {
                    this._active = true;  //so that if the user renders a tween (as opposed to the timeline rendering it), the timeline is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the tween already finished but the user manually re-renders it as halfway done.
                }
                if (prevTime === 0) {
                    if (this._startAt) {
                        if (time >= 0) {
                            this._startAt.render(time, suppressEvents, force);
                        } else if (!callback) {
                            callback = "_dummyGS"; //if no callback is defined, use a dummy value just so that the condition at the end evaluates as true because _startAt should render AFTER the normal render loop when the time is negative. We could handle this in a more intuitive way, of course, but the render loop is the MOST important thing to optimize, so this technique allows us to avoid adding extra conditional logic in a high-frequency area.
                        }
                    }
                    if (this.vars.onStart) if (this._time !== 0 || duration === 0) if (!suppressEvents) {
                        this._callback("onStart");
                    }
                }
                pt = this._firstPT;
                while (pt) {
                    if (pt.f) {
                        pt.t[pt.p](pt.c * this.ratio + pt.s);
                    } else {
                        pt.t[pt.p] = pt.c * this.ratio + pt.s;
                    }
                    pt = pt._next;
                }
    
                if (this._onUpdate) {
                    if (time < 0) if (this._startAt && time !== -0.0001) { //if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.
                        this._startAt.render(time, suppressEvents, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.
                    }
                    if (!suppressEvents) if (this._time !== prevTime || isComplete || force) {
                        this._callback("onUpdate");
                    }
                }
                if (callback) if (!this._gc || force) { //check _gc because there's a chance that kill() could be called in an onUpdate
                    if (time < 0 && this._startAt && !this._onUpdate && time !== -0.0001) { //-0.0001 is a special value that we use when looping back to the beginning of a repeated TimelineMax, in which case we shouldn't render the _startAt values.
                        this._startAt.render(time, suppressEvents, force);
                    }
                    if (isComplete) {
                        if (this._timeline.autoRemoveChildren) {
                            this._enabled(false, false);
                        }
                        this._active = false;
                    }
                    if (!suppressEvents && this.vars[callback]) {
                        this._callback(callback);
                    }
                    if (duration === 0 && this._rawPrevTime === _tinyNum && rawPrevTime !== _tinyNum) { //the onComplete or onReverseComplete could trigger movement of the playhead and for zero-duration tweens (which must discern direction) that land directly back on their start time, we don't want to fire again on the next render. Think of several addPause()'s in a timeline that forces the playhead to a certain spot, but what if it's already paused and another tween is tweening the "time" of the timeline? Each time it moves [forward] past that spot, it would move back, and since suppressEvents is true, it'd reset _rawPrevTime to _tinyNum so that when it begins again, the callback would fire (so ultimately it could bounce back and forth during that tween). Again, this is a very uncommon scenario, but possible nonetheless.
                        this._rawPrevTime = 0;
                    }
                }
            };
    
            p._kill = function(vars, target, overwritingTween) {
                if (vars === "all") {
                    vars = null;
                }
                if (vars == null) if (target == null || target === this.target) {
                    this._lazy = false;
                    return this._enabled(false, false);
                }
                target = (typeof(target) !== "string") ? (target || this._targets || this.target) : TweenLite.selector(target) || target;
                var simultaneousOverwrite = (overwritingTween && this._time && overwritingTween._startTime === this._startTime && this._timeline === overwritingTween._timeline),
                    i, overwrittenProps, p, pt, propLookup, changed, killProps, record, killed;
                if ((_isArray(target) || _isSelector(target)) && typeof(target[0]) !== "number") {
                    i = target.length;
                    while (--i > -1) {
                        if (this._kill(vars, target[i], overwritingTween)) {
                            changed = true;
                        }
                    }
                } else {
                    if (this._targets) {
                        i = this._targets.length;
                        while (--i > -1) {
                            if (target === this._targets[i]) {
                                propLookup = this._propLookup[i] || {};
                                this._overwrittenProps = this._overwrittenProps || [];
                                overwrittenProps = this._overwrittenProps[i] = vars ? this._overwrittenProps[i] || {} : "all";
                                break;
                            }
                        }
                    } else if (target !== this.target) {
                        return false;
                    } else {
                        propLookup = this._propLookup;
                        overwrittenProps = this._overwrittenProps = vars ? this._overwrittenProps || {} : "all";
                    }
    
                    if (propLookup) {
                        killProps = vars || propLookup;
                        record = (vars !== overwrittenProps && overwrittenProps !== "all" && vars !== propLookup && (typeof(vars) !== "object" || !vars._tempKill)); //_tempKill is a super-secret way to delete a particular tweening property but NOT have it remembered as an official overwritten property (like in BezierPlugin)
                        if (overwritingTween && (TweenLite.onOverwrite || this.vars.onOverwrite)) {
                            for (p in killProps) {
                                if (propLookup[p]) {
                                    if (!killed) {
                                        killed = [];
                                    }
                                    killed.push(p);
                                }
                            }
                            if ((killed || !vars) && !_onOverwrite(this, overwritingTween, target, killed)) { //if the onOverwrite returned false, that means the user wants to override the overwriting (cancel it).
                                return false;
                            }
                        }
    
                        for (p in killProps) {
                            if ((pt = propLookup[p])) {
                                if (simultaneousOverwrite) { //if another tween overwrites this one and they both start at exactly the same time, yet this tween has already rendered once (for example, at 0.001) because it's first in the queue, we should revert the values to where they were at 0 so that the starting values aren't contaminated on the overwriting tween.
                                    if (pt.f) {
                                        pt.t[pt.p](pt.s);
                                    } else {
                                        pt.t[pt.p] = pt.s;
                                    }
                                    changed = true;
                                }
                                if (pt.pg && pt.t._kill(killProps)) {
                                    changed = true; //some plugins need to be notified so they can perform cleanup tasks first
                                }
                                if (!pt.pg || pt.t._overwriteProps.length === 0) {
                                    if (pt._prev) {
                                        pt._prev._next = pt._next;
                                    } else if (pt === this._firstPT) {
                                        this._firstPT = pt._next;
                                    }
                                    if (pt._next) {
                                        pt._next._prev = pt._prev;
                                    }
                                    pt._next = pt._prev = null;
                                }
                                delete propLookup[p];
                            }
                            if (record) {
                                overwrittenProps[p] = 1;
                            }
                        }
                        if (!this._firstPT && this._initted) { //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.
                            this._enabled(false, false);
                        }
                    }
                }
                return changed;
            };
    
            p.invalidate = function() {
                if (this._notifyPluginsOfEnabled) {
                    TweenLite._onPluginEvent("_onDisable", this);
                }
                this._firstPT = this._overwrittenProps = this._startAt = this._onUpdate = null;
                this._notifyPluginsOfEnabled = this._active = this._lazy = false;
                this._propLookup = (this._targets) ? {} : [];
                Animation.prototype.invalidate.call(this);
                if (this.vars.immediateRender) {
                    this._time = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)
                    this.render(Math.min(0, -this._delay)); //in case delay is negative.
                }
                return this;
            };
    
            p._enabled = function(enabled, ignoreTimeline) {
                if (!_tickerActive) {
                    _ticker.wake();
                }
                if (enabled && this._gc) {
                    var targets = this._targets,
                        i;
                    if (targets) {
                        i = targets.length;
                        while (--i > -1) {
                            this._siblings[i] = _register(targets[i], this, true);
                        }
                    } else {
                        this._siblings = _register(this.target, this, true);
                    }
                }
                Animation.prototype._enabled.call(this, enabled, ignoreTimeline);
                if (this._notifyPluginsOfEnabled) if (this._firstPT) {
                    return TweenLite._onPluginEvent((enabled ? "_onEnable" : "_onDisable"), this);
                }
                return false;
            };
    
    
    //----TweenLite static methods -----------------------------------------------------
    
            TweenLite.to = function(target, duration, vars) {
                return new TweenLite(target, duration, vars);
            };
    
            TweenLite.from = function(target, duration, vars) {
                vars.runBackwards = true;
                vars.immediateRender = (vars.immediateRender != false);
                return new TweenLite(target, duration, vars);
            };
    
            TweenLite.fromTo = function(target, duration, fromVars, toVars) {
                toVars.startAt = fromVars;
                toVars.immediateRender = (toVars.immediateRender != false && fromVars.immediateRender != false);
                return new TweenLite(target, duration, toVars);
            };
    
            TweenLite.delayedCall = function(delay, callback, params, scope, useFrames) {
                return new TweenLite(callback, 0, {delay:delay, onComplete:callback, onCompleteParams:params, callbackScope:scope, onReverseComplete:callback, onReverseCompleteParams:params, immediateRender:false, lazy:false, useFrames:useFrames, overwrite:0});
            };
    
            TweenLite.set = function(target, vars) {
                return new TweenLite(target, 0, vars);
            };
    
            TweenLite.getTweensOf = function(target, onlyActive) {
                if (target == null) { return []; }
                target = (typeof(target) !== "string") ? target : TweenLite.selector(target) || target;
                var i, a, j, t;
                if ((_isArray(target) || _isSelector(target)) && typeof(target[0]) !== "number") {
                    i = target.length;
                    a = [];
                    while (--i > -1) {
                        a = a.concat(TweenLite.getTweensOf(target[i], onlyActive));
                    }
                    i = a.length;
                    //now get rid of any duplicates (tweens of arrays of objects could cause duplicates)
                    while (--i > -1) {
                        t = a[i];
                        j = i;
                        while (--j > -1) {
                            if (t === a[j]) {
                                a.splice(i, 1);
                            }
                        }
                    }
                } else if (target._gsTweenID) {
                    a = _register(target).concat();
                    i = a.length;
                    while (--i > -1) {
                        if (a[i]._gc || (onlyActive && !a[i].isActive())) {
                            a.splice(i, 1);
                        }
                    }
                }
                return a || [];
            };
    
            TweenLite.killTweensOf = TweenLite.killDelayedCallsTo = function(target, onlyActive, vars) {
                if (typeof(onlyActive) === "object") {
                    vars = onlyActive; //for backwards compatibility (before "onlyActive" parameter was inserted)
                    onlyActive = false;
                }
                var a = TweenLite.getTweensOf(target, onlyActive),
                    i = a.length;
                while (--i > -1) {
                    a[i]._kill(vars, target);
                }
            };
    
    
    
    /*
     * ----------------------------------------------------------------
     * TweenPlugin   (could easily be split out as a separate file/class, but included for ease of use (so that people don't need to include another script call before loading plugins which is easy to forget)
     * ----------------------------------------------------------------
     */
            var TweenPlugin = _class("plugins.TweenPlugin", function(props, priority) {
                        this._overwriteProps = (props || "").split(",");
                        this._propName = this._overwriteProps[0];
                        this._priority = priority || 0;
                        this._super = TweenPlugin.prototype;
                    }, true);
    
            p = TweenPlugin.prototype;
            TweenPlugin.version = "1.19.0";
            TweenPlugin.API = 2;
            p._firstPT = null;
            p._addTween = _addPropTween;
            p.setRatio = _setRatio;
    
            p._kill = function(lookup) {
                var a = this._overwriteProps,
                    pt = this._firstPT,
                    i;
                if (lookup[this._propName] != null) {
                    this._overwriteProps = [];
                } else {
                    i = a.length;
                    while (--i > -1) {
                        if (lookup[a[i]] != null) {
                            a.splice(i, 1);
                        }
                    }
                }
                while (pt) {
                    if (lookup[pt.n] != null) {
                        if (pt._next) {
                            pt._next._prev = pt._prev;
                        }
                        if (pt._prev) {
                            pt._prev._next = pt._next;
                            pt._prev = null;
                        } else if (this._firstPT === pt) {
                            this._firstPT = pt._next;
                        }
                    }
                    pt = pt._next;
                }
                return false;
            };
    
            p._mod = p._roundProps = function(lookup) {
                var pt = this._firstPT,
                    val;
                while (pt) {
                    val = lookup[this._propName] || (pt.n != null && lookup[ pt.n.split(this._propName + "_").join("") ]);
                    if (val && typeof(val) === "function") { //some properties that are very plugin-specific add a prefix named after the _propName plus an underscore, so we need to ignore that extra stuff here.
                        if (pt.f === 2) {
                            pt.t._applyPT.m = val;
                        } else {
                            pt.m = val;
                        }
                    }
                    pt = pt._next;
                }
            };
    
            TweenLite._onPluginEvent = function(type, tween) {
                var pt = tween._firstPT,
                    changed, pt2, first, last, next;
                if (type === "_onInitAllProps") {
                    //sorts the PropTween linked list in order of priority because some plugins need to render earlier/later than others, like MotionBlurPlugin applies its effects after all x/y/alpha tweens have rendered on each frame.
                    while (pt) {
                        next = pt._next;
                        pt2 = first;
                        while (pt2 && pt2.pr > pt.pr) {
                            pt2 = pt2._next;
                        }
                        if ((pt._prev = pt2 ? pt2._prev : last)) {
                            pt._prev._next = pt;
                        } else {
                            first = pt;
                        }
                        if ((pt._next = pt2)) {
                            pt2._prev = pt;
                        } else {
                            last = pt;
                        }
                        pt = next;
                    }
                    pt = tween._firstPT = first;
                }
                while (pt) {
                    if (pt.pg) if (typeof(pt.t[type]) === "function") if (pt.t[type]()) {
                        changed = true;
                    }
                    pt = pt._next;
                }
                return changed;
            };
    
            TweenPlugin.activate = function(plugins) {
                var i = plugins.length;
                while (--i > -1) {
                    if (plugins[i].API === TweenPlugin.API) {
                        _plugins[(new plugins[i]())._propName] = plugins[i];
                    }
                }
                return true;
            };
    
            //provides a more concise way to define plugins that have no dependencies besides TweenPlugin and TweenLite, wrapping common boilerplate stuff into one function (added in 1.9.0). You don't NEED to use this to define a plugin - the old way still works and can be useful in certain (rare) situations.
            _gsDefine.plugin = function(config) {
                if (!config || !config.propName || !config.init || !config.API) { throw "illegal plugin definition."; }
                var propName = config.propName,
                    priority = config.priority || 0,
                    overwriteProps = config.overwriteProps,
                    map = {init:"_onInitTween", set:"setRatio", kill:"_kill", round:"_mod", mod:"_mod", initAll:"_onInitAllProps"},
                    Plugin = _class("plugins." + propName.charAt(0).toUpperCase() + propName.substr(1) + "Plugin",
                        function() {
                            TweenPlugin.call(this, propName, priority);
                            this._overwriteProps = overwriteProps || [];
                        }, (config.global === true)),
                    p = Plugin.prototype = new TweenPlugin(propName),
                    prop;
                p.constructor = Plugin;
                Plugin.API = config.API;
                for (prop in map) {
                    if (typeof(config[prop]) === "function") {
                        p[map[prop]] = config[prop];
                    }
                }
                Plugin.version = config.version;
                TweenPlugin.activate([Plugin]);
                return Plugin;
            };
    
    
            //now run through all the dependencies discovered and if any are missing, log that to the console as a warning. This is why it's best to have TweenLite load last - it can check all the dependencies for you.
            a = window._gsQueue;
            if (a) {
                for (i = 0; i < a.length; i++) {
                    a[i]();
                }
                for (p in _defLookup) {
                    if (!_defLookup[p].func) {
                        window.console.log("GSAP encountered missing dependency: " + p);
                    }
                }
            }
    
            _tickerActive = false; //ensures that the first official animation forces a ticker.tick() to update the time when it is instantiated
    
    })((typeof(module) !== "undefined" && module.exports && typeof(global) !== "undefined") ? global : this || window, "TweenMax");
    /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(22)))
    
    /***/ }),
    /* 13 */
    /***/ (function(module, exports) {
    
    var hasOwnProperty = {}.hasOwnProperty;
    module.exports = function (it, key) {
      return hasOwnProperty.call(it, key);
    };
    
    
    /***/ }),
    /* 14 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var dP = __webpack_require__(8);
    var createDesc = __webpack_require__(40);
    module.exports = __webpack_require__(7) ? function (object, key, value) {
      return dP.f(object, key, createDesc(1, value));
    } : function (object, key, value) {
      object[key] = value;
      return object;
    };
    
    
    /***/ }),
    /* 15 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var global = __webpack_require__(2);
    var hide = __webpack_require__(14);
    var has = __webpack_require__(13);
    var SRC = __webpack_require__(41)('src');
    var TO_STRING = 'toString';
    var $toString = Function[TO_STRING];
    var TPL = ('' + $toString).split(TO_STRING);
    
    __webpack_require__(26).inspectSource = function (it) {
      return $toString.call(it);
    };
    
    (module.exports = function (O, key, val, safe) {
      var isFunction = typeof val == 'function';
      if (isFunction) has(val, 'name') || hide(val, 'name', key);
      if (O[key] === val) return;
      if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
      if (O === global) {
        O[key] = val;
      } else if (!safe) {
        delete O[key];
        hide(O, key, val);
      } else if (O[key]) {
        O[key] = val;
      } else {
        hide(O, key, val);
      }
    // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
    })(Function.prototype, TO_STRING, function toString() {
      return typeof this == 'function' && this[SRC] || $toString.call(this);
    });
    
    
    /***/ }),
    /* 16 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var $export = __webpack_require__(0);
    var fails = __webpack_require__(4);
    var defined = __webpack_require__(28);
    var quot = /"/g;
    // B.2.3.2.1 CreateHTML(string, tag, attribute, value)
    var createHTML = function (string, tag, attribute, value) {
      var S = String(defined(string));
      var p1 = '<' + tag;
      if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
      return p1 + '>' + S + '</' + tag + '>';
    };
    module.exports = function (NAME, exec) {
      var O = {};
      O[NAME] = exec(createHTML);
      $export($export.P + $export.F * fails(function () {
        var test = ''[NAME]('"');
        return test !== test.toLowerCase() || test.split('"').length > 3;
      }), 'String', O);
    };
    
    
    /***/ }),
    /* 17 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // to indexed object, toObject with fallback for non-array-like ES3 strings
    var IObject = __webpack_require__(58);
    var defined = __webpack_require__(28);
    module.exports = function (it) {
      return IObject(defined(it));
    };
    
    
    /***/ }),
    /* 18 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var pIE = __webpack_require__(59);
    var createDesc = __webpack_require__(40);
    var toIObject = __webpack_require__(17);
    var toPrimitive = __webpack_require__(27);
    var has = __webpack_require__(13);
    var IE8_DOM_DEFINE = __webpack_require__(111);
    var gOPD = Object.getOwnPropertyDescriptor;
    
    exports.f = __webpack_require__(7) ? gOPD : function getOwnPropertyDescriptor(O, P) {
      O = toIObject(O);
      P = toPrimitive(P, true);
      if (IE8_DOM_DEFINE) try {
        return gOPD(O, P);
      } catch (e) { /* empty */ }
      if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
    };
    
    
    /***/ }),
    /* 19 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
    var has = __webpack_require__(13);
    var toObject = __webpack_require__(10);
    var IE_PROTO = __webpack_require__(84)('IE_PROTO');
    var ObjectProto = Object.prototype;
    
    module.exports = Object.getPrototypeOf || function (O) {
      O = toObject(O);
      if (has(O, IE_PROTO)) return O[IE_PROTO];
      if (typeof O.constructor == 'function' && O instanceof O.constructor) {
        return O.constructor.prototype;
      } return O instanceof Object ? ObjectProto : null;
    };
    
    
    /***/ }),
    /* 20 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    var _ = __webpack_require__(38);
    var defaultSettings = __webpack_require__(362);
    var dom = __webpack_require__(51);
    var EventManager = __webpack_require__(363);
    var guid = __webpack_require__(364);
    
    var instances = {};
    
    function Instance(element, userSettings) {
      var i = this;
    
      i.settings = defaultSettings();
      for (var key in userSettings) {
        i.settings[key] = userSettings[key];
      }
    
      i.containerWidth = null;
      i.containerHeight = null;
      i.contentWidth = null;
      i.contentHeight = null;
    
      i.isRtl = dom.css(element, 'direction') === "rtl";
      i.isNegativeScroll = (function () {
        var originalScrollLeft = element.scrollLeft;
        var result = null;
        element.scrollLeft = -1;
        result = element.scrollLeft < 0;
        element.scrollLeft = originalScrollLeft;
        return result;
      })();
      i.negativeScrollAdjustment = i.isNegativeScroll ? element.scrollWidth - element.clientWidth : 0;
      i.event = new EventManager();
      i.ownerDocument = element.ownerDocument || document;
    
      function focus() {
        element.classList.add('ps--focus');
      }
    
      function blur() {
        element.classList.remove('ps--focus');
      }
    
      i.scrollbarXRail = dom.appendTo(dom.create('div', 'ps__scrollbar-x-rail'), element);
      i.scrollbarX = dom.appendTo(dom.create('div', 'ps__scrollbar-x'), i.scrollbarXRail);
      i.scrollbarX.setAttribute('tabindex', 0);
      i.event.bind(i.scrollbarX, 'focus', focus);
      i.event.bind(i.scrollbarX, 'blur', blur);
      i.scrollbarXActive = null;
      i.scrollbarXWidth = null;
      i.scrollbarXLeft = null;
      i.scrollbarXBottom = _.toInt(dom.css(i.scrollbarXRail, 'bottom'));
      i.isScrollbarXUsingBottom = i.scrollbarXBottom === i.scrollbarXBottom; // !isNaN
      i.scrollbarXTop = i.isScrollbarXUsingBottom ? null : _.toInt(dom.css(i.scrollbarXRail, 'top'));
      i.railBorderXWidth = _.toInt(dom.css(i.scrollbarXRail, 'borderLeftWidth')) + _.toInt(dom.css(i.scrollbarXRail, 'borderRightWidth'));
      // Set rail to display:block to calculate margins
      dom.css(i.scrollbarXRail, 'display', 'block');
      i.railXMarginWidth = _.toInt(dom.css(i.scrollbarXRail, 'marginLeft')) + _.toInt(dom.css(i.scrollbarXRail, 'marginRight'));
      dom.css(i.scrollbarXRail, 'display', '');
      i.railXWidth = null;
      i.railXRatio = null;
    
      i.scrollbarYRail = dom.appendTo(dom.create('div', 'ps__scrollbar-y-rail'), element);
      i.scrollbarY = dom.appendTo(dom.create('div', 'ps__scrollbar-y'), i.scrollbarYRail);
      i.scrollbarY.setAttribute('tabindex', 0);
      i.event.bind(i.scrollbarY, 'focus', focus);
      i.event.bind(i.scrollbarY, 'blur', blur);
      i.scrollbarYActive = null;
      i.scrollbarYHeight = null;
      i.scrollbarYTop = null;
      i.scrollbarYRight = _.toInt(dom.css(i.scrollbarYRail, 'right'));
      i.isScrollbarYUsingRight = i.scrollbarYRight === i.scrollbarYRight; // !isNaN
      i.scrollbarYLeft = i.isScrollbarYUsingRight ? null : _.toInt(dom.css(i.scrollbarYRail, 'left'));
      i.scrollbarYOuterWidth = i.isRtl ? _.outerWidth(i.scrollbarY) : null;
      i.railBorderYWidth = _.toInt(dom.css(i.scrollbarYRail, 'borderTopWidth')) + _.toInt(dom.css(i.scrollbarYRail, 'borderBottomWidth'));
      dom.css(i.scrollbarYRail, 'display', 'block');
      i.railYMarginHeight = _.toInt(dom.css(i.scrollbarYRail, 'marginTop')) + _.toInt(dom.css(i.scrollbarYRail, 'marginBottom'));
      dom.css(i.scrollbarYRail, 'display', '');
      i.railYHeight = null;
      i.railYRatio = null;
    }
    
    function getId(element) {
      return element.getAttribute('data-ps-id');
    }
    
    function setId(element, id) {
      element.setAttribute('data-ps-id', id);
    }
    
    function removeId(element) {
      element.removeAttribute('data-ps-id');
    }
    
    exports.add = function (element, userSettings) {
      var newId = guid();
      setId(element, newId);
      instances[newId] = new Instance(element, userSettings);
      return instances[newId];
    };
    
    exports.remove = function (element) {
      delete instances[getId(element)];
      removeId(element);
    };
    
    exports.get = function (element) {
      return instances[getId(element)];
    };
    
    
    /***/ }),
    /* 21 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _gsap = __webpack_require__(12);
    
    __webpack_require__(52);
    
    var _enquire = __webpack_require__(145);
    
    var _enquire2 = _interopRequireDefault(_enquire);
    
    var _helpers = __webpack_require__(3);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var Link = function () {
        function Link(el) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    
            _classCallCheck(this, Link);
    
            this.$el = el;
            this.type = options.type || 'circle';
            this.state = options.state || false;
    
            this.init();
        }
    
        _createClass(Link, [{
            key: 'init',
            value: function init() {
                switch (this.type) {
                    case 'circle':
                        this.initLinkBtn();
                        break;
                    case 'multiple':
                        this.initLinkCircleBtn(3, false);
                        break;
                    case 'single':
                        this.initLinkCircleBtn(1, false);
                        break;
                    case 'single-reverse':
                        this.initLinkCircleBtn(1, true);
                        break;
                    case 'close':
                        this.initCloseBtn();
                        break;
                    case 'menu':
                        this.initMenuBtn();
                        break;
                    case 'vertical':
                        this.initVerticalBtn();
                        break;
                    default:
                        return;
                }
            }
        }, {
            key: 'initLinkBtn',
            value: function initLinkBtn() {
                var _this = this;
    
                var iconContainer = '<div class="icon-w"></div>';
                var icon = '\n\t\t\t<div class="icon icon-circle">\n\t\t\t\t<svg viewBox="0 0 12 12">\n\t        <path d="M6,2c2.2,0,4,1.8,4,4s-1.8,4-4,4S2,8.2,2,6S3.8,2,6,2"></path>\n\t      </svg>\n\t\t\t</div>';
    
                this.$el.each(function (index, el) {
                    var $el = $(el);
                    var $iconContainer = $(iconContainer);
                    var $icon = $(icon);
                    var $path = $icon.find('path');
                    var tl = new _gsap.TimelineMax({ paused: true });
    
                    $iconContainer.appendTo($el);
                    $icon.appendTo($iconContainer);
                    _enquire2.default.register(_helpers.resp.mobile, function () {
                        Link.prepareAnimLinkBtn($path);
                    });
                    _enquire2.default.register(_helpers.resp.tablet, function () {
                        Link.prepareAnimLinkBtn($path);
                    });
                    _enquire2.default.register(_helpers.resp.desk, function () {
                        Link.prepareAnimLinkBtn($path);
                    });
                    _this.animLinkBtn($el, $path, tl);
                });
            }
        }, {
            key: 'animLinkBtn',
            value: function animLinkBtn($el, $path, tl) {
                tl.to($path, 0.3, {
                    drawSVG: '0% 100%',
                    ease: Power2.easeIn
                }).set($path, {
                    rotation: 140,
                    transformOrigin: 'center center'
                }).to($path, 0.3, {
                    drawSVG: '66.666% 100%',
                    ease: Power2.easeOut
                });
    
                if (this.state === 'header') {
                    var sleep = false;
    
                    $el.parent().on('mouseenter', function (e) {
                        $(e.currentTarget).on('mouseleave', function () {
                            sleep = true;
                        });
    
                        setTimeout(function () {
                            if (!sleep) {
                                if ($(e.currentTarget).hasClass(_helpers.css.active)) return;
                                tl.progress(0, false).play();
                                $(e.currentTarget).addClass(_helpers.css.active);
                            }
    
                            sleep = false;
                        }, 100);
                        sleep = false;
                    });
                } else {
                    $el.on('mouseenter', function () {
                        tl.progress(0, false).play();
                    });
                }
    
                if (this.state !== 'header') {
                    $el.on('mouseleave', function () {
                        tl.pause();
                        _gsap.TweenMax.to($path, 0.3, {
                            drawSVG: '100% 100%',
                            ease: Power2.easeInOut
                        });
                    });
                }
            }
        }, {
            key: 'initLinkCircleBtn',
            value: function initLinkCircleBtn(n, reverse) {
                var iconContainer = '<div class="icons-w"></div>';
                var icon = '\n\t\t\t<div class="icon icon-circle">\n\t\t\t\t<svg viewBox="0 0 12 12">\n\t        <path d="M6,2c2.2,0,4,1.8,4,4s-1.8,4-4,4S2,8.2,2,6S3.8,2,6,2"></path>\n\t      </svg>\n\t\t\t</div>';
                var N = n;
    
                this.$el.each(function (index, el) {
                    var $el = $(el);
                    var $iconContainer = $(iconContainer);
                    var $icon = $(icon);
                    var tl = new _gsap.TimelineMax({ paused: true });
    
                    reverse ? $iconContainer.prependTo($el) : $iconContainer.appendTo($el);
                    for (var i = 0; i < N; i++) {
                        $icon.clone().appendTo($iconContainer);
                        // $icon.clone().appendTo($iconContainer);
                        // reverse ? $icon.clone().prependTo($iconContainer) : $icon.clone().appendTo($iconContainer);
                    }
    
                    var $path = $iconContainer.find('path');
                    _enquire2.default.register(_helpers.resp.mobile, function () {
                        Link.prepareAnimLinkCircleBtn($path);
                    });
                    _enquire2.default.register(_helpers.resp.tablet, function () {
                        Link.prepareAnimLinkCircleBtn($path);
                    });
                    _enquire2.default.register(_helpers.resp.desk, function () {
                        Link.prepareAnimLinkCircleBtn($path);
                    });
                    Link.animLinkCircleBtn($el, $path, tl);
                });
            }
        }, {
            key: 'initCloseBtn',
            value: function initCloseBtn() {
                var iconContainer = '<div class="icon-w"></div>';
                var icon = '\n\t\t\t<div class="icon icon_top">\n\t\t\t\t<svg viewBox="0 0 28 28">\n\t        <circle cx="14" cy="14" r="10"/>\n\t      </svg>\n\t\t\t</div>\n\t\t\t<div class="icon icon_bot">\n\t\t\t\t<svg viewBox="0 0 28 28">\n\t        <circle cx="14" cy="14" r="10"/>\n\t      </svg>\n\t\t\t</div>';
    
                this.$el.each(function (index, el) {
                    var $el = $(el);
                    var $iconContainer = $(iconContainer);
                    var $icon = $(icon);
                    var tl = new _gsap.TimelineMax({ paused: true });
    
                    $iconContainer.appendTo($el);
                    $icon.appendTo($iconContainer);
    
                    var $iconTop = $iconContainer.find('.icon_top');
                    var $iconBot = $iconContainer.find('.icon_bot');
                    var $circleTop = $iconTop.find('circle');
                    var $circleBot = $iconBot.find('circle');
    
                    _enquire2.default.register(_helpers.resp.mobile, function () {
                        Link.prepareCloseBtnTop($circleTop);
                        Link.prepareCloseBtnBot($circleBot);
                    });
                    _enquire2.default.register(_helpers.resp.tablet, function () {
                        Link.prepareCloseBtnTop($circleTop);
                        Link.prepareCloseBtnBot($circleBot);
                    });
                    _enquire2.default.register(_helpers.resp.desk, function () {
                        Link.prepareCloseBtnTop($circleTop);
                        Link.prepareCloseBtnBot($circleBot);
                    });
                    Link.animCloseBtn($el, $iconTop, $iconBot, $circleTop, $circleBot, tl);
                });
            }
        }, {
            key: 'initMenuBtn',
            value: function initMenuBtn() {
                var iconContainer = '<div class="icon-w"></div>';
                var icon = '\n\t\t\t<div class="icon icon_top">\n\t\t\t\t<svg viewBox="0 0 28 28">\n\t        <circle cx="14" cy="14" r="10"/>\n\t      </svg>\n\t\t\t</div><div class="icon icon_mid">\n\t\t\t\t<svg viewBox="0 0 28 28">\n\t        <circle cx="14" cy="14" r="10"/>\n\t      </svg>\n\t\t\t</div><div class="icon icon_bot">\n\t\t\t\t<svg viewBox="0 0 28 28">\n\t        <circle cx="14" cy="14" r="10"/>\n\t      </svg>\n\t\t\t</div>';
    
                this.$el.each(function (index, el) {
                    var $el = $(el);
                    var $iconContainer = $(iconContainer);
                    var $icon = $(icon);
                    var tl = new _gsap.TimelineMax({ paused: true });
                    var tlReverse = new _gsap.TimelineMax({ paused: true });
    
                    $iconContainer.appendTo($el);
                    $icon.appendTo($iconContainer);
    
                    var $circle = $icon.find('circle');
    
                    _enquire2.default.register(_helpers.resp.mobile, function () {
                        Link.prepareMenuBtn($circle);
                    });
                    _enquire2.default.register(_helpers.resp.tablet, function () {
                        Link.prepareMenuBtn($circle);
                    });
                    _enquire2.default.register(_helpers.resp.desk, function () {
                        Link.prepareMenuBtn($circle);
                    });
                    Link.animMenuBtn($el, $icon, $circle, tl);
                });
            }
        }, {
            key: 'initVerticalBtn',
            value: function initVerticalBtn() {
                var iconContainer = '<div class="icons-w"></div>';
                var icon = '\n\t\t\t<div class="icon icon-circle">\n\t\t\t\t<svg viewBox="0 0 12 12">\n\t        <path d="M6,2c2.2,0,4,1.8,4,4s-1.8,4-4,4S2,8.2,2,6S3.8,2,6,2"></path>\n\t      </svg>\n\t\t\t</div>';
                var N = 3;
    
                this.$el.each(function (index, el) {
                    var $el = $(el);
                    var $iconContainer = $(iconContainer);
                    var $icon = $(icon);
                    var tl = new _gsap.TimelineMax({ paused: true });
    
                    $iconContainer.prependTo($el);
                    for (var i = 0; i < N; i++) {
                        $icon.clone().appendTo($iconContainer);
                    }
    
                    var $path = $iconContainer.find('path');
                    _enquire2.default.register(_helpers.resp.mobile, function () {
                        Link.prepareVerticalBtn($path);
                    });
                    _enquire2.default.register(_helpers.resp.tablet, function () {
                        Link.prepareVerticalBtn($path);
                    });
                    _enquire2.default.register(_helpers.resp.desk, function () {
                        Link.prepareVerticalBtn($path);
                    });
                    Link.animVerticalBtn($el, $path, tl);
                });
            }
        }], [{
            key: 'prepareAnimLinkBtn',
            value: function prepareAnimLinkBtn($path) {
                _gsap.TweenMax.set($path, {
                    clearProps: 'all'
                });
                _gsap.TweenMax.set($path, {
                    drawSVG: '0%',
                    rotation: 30,
                    transformOrigin: 'center center'
                });
            }
        }, {
            key: 'prepareAnimLinkCircleBtn',
            value: function prepareAnimLinkCircleBtn($path) {
                _gsap.TweenMax.set($path, {
                    clearProps: 'all'
                });
                _gsap.TweenMax.set($path, {
                    drawSVG: '66.666% 100%',
                    rotation: 140,
                    transformOrigin: 'center center'
                });
            }
        }, {
            key: 'animLinkCircleBtn',
            value: function animLinkCircleBtn($el, $path, tl) {
                tl.to($path, 0.6, {
                    rotation: 500,
                    transformOrigin: 'center center',
                    ease: Power1.easeInOut
                });
                if (!$el.hasClass('filters__item__link')) {
                    $el.on('mouseenter', function () {
                        tl.progress(0, false).play();
                    });
                }
            }
        }, {
            key: 'prepareCloseBtnTop',
            value: function prepareCloseBtnTop($path) {
                _gsap.TweenMax.set($path, {
                    clearProps: 'all'
                });
                _gsap.TweenMax.set($path, {
                    drawSVG: '75% 100%',
                    rotation: 133,
                    transformOrigin: 'center center'
                });
            }
        }, {
            key: 'prepareCloseBtnBot',
            value: function prepareCloseBtnBot($path) {
                _gsap.TweenMax.set($path, {
                    clearProps: 'all'
                });
                _gsap.TweenMax.set($path, {
                    drawSVG: '75% 100%',
                    rotation: -47,
                    transformOrigin: 'center center'
                });
            }
        }, {
            key: 'animCloseBtn',
            value: function animCloseBtn($el, $iconTop, $iconBot, $pathTop, $pathBot, tl) {
                tl.to($pathTop, 0.4, {
                    drawSVG: '0% 100%',
                    rotation: 270,
                    transformOrigin: 'center center',
                    ease: Power1.easeInOut
                }, 0).to($pathBot, 0.4, {
                    drawSVG: '0% 100%',
                    rotation: 90,
                    transformOrigin: 'center center',
                    ease: Power1.easeInOut
                }, 0).add('next').to($iconTop, 0.4, {
                    y: 12,
                    ease: Power1.easeInOut
                }, 'next').to($iconBot, 0.4, {
                    y: -12,
                    ease: Power1.easeInOut
                }, 'next').set($iconBot, { alpha: 0 });
                $el.on('mouseenter', function () {
                    tl.pause();
                    tl.play();
                });
                $el.on('mouseleave', function () {
                    tl.pause();
                    tl.reverse();
                });
            }
        }, {
            key: 'prepareMenuBtn',
            value: function prepareMenuBtn($path) {
                _gsap.TweenMax.set($path, {
                    clearProps: 'all'
                });
                _gsap.TweenMax.set($path, {
                    drawSVG: '75% 100%',
                    rotation: -47,
                    transformOrigin: 'center center'
                });
            }
        }, {
            key: 'animMenuBtn',
            value: function animMenuBtn($el, $icon, $path, tl) {
                _gsap.TweenMax.set($icon, { y: 0 });
                tl.to($path, 0.4, {
                    drawSVG: '0% 100%',
                    rotation: 270,
                    transformOrigin: 'center center',
                    ease: Power1.easeInOut
                }, 0).to($icon, 0.4, {
                    y: -8,
                    ease: Power1.easeInOut
                }, 0).addLabel('next').to($icon.eq(0), 0.4, {
                    y: 4,
                    ease: Power1.easeInOut
                }, 'next').to($icon.eq(1), 0.4, {
                    y: -8,
                    ease: Power1.easeInOut
                }, 'next').to($icon.eq(2), 0.4, {
                    y: -20,
                    ease: Power1.easeInOut
                }, 'next').set($icon.eq(0), { alpha: 0 }, '-=0.1').set($icon.eq(2), { alpha: 0 }, '-=0.1');
    
                $el.on('mouseenter', function () {
                    tl.pause();
                    tl.play();
                });
                $el.on('mouseleave', function () {
                    tl.pause();
                    tl.reverse();
                });
            }
        }, {
            key: 'prepareVerticalBtn',
            value: function prepareVerticalBtn($path) {
                _gsap.TweenMax.set($path, {
                    clearProps: 'all'
                });
                _gsap.TweenMax.set($path, {
                    drawSVG: '66.666% 100%',
                    rotation: 320,
                    transformOrigin: 'center center'
                });
            }
        }, {
            key: 'animVerticalBtn',
            value: function animVerticalBtn($el, $path, tl) {
                tl.to($path, 0.6, {
                    rotation: 680,
                    transformOrigin: 'center center',
                    ease: Power1.easeInOut
                });
                setInterval(function () {
                    if ($el.hasClass(_helpers.css.active)) return;
    
                    tl.progress(0, false).play();
                }, 3000);
            }
        }]);
    
        return Link;
    }();
    
    // export const LinkAPI = new Link();
    
    
    exports.default = Link;
    
    /***/ }),
    /* 22 */,
    /* 23 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // optional / simple context binding
    var aFunction = __webpack_require__(11);
    module.exports = function (fn, that, length) {
      aFunction(fn);
      if (that === undefined) return fn;
      switch (length) {
        case 1: return function (a) {
          return fn.call(that, a);
        };
        case 2: return function (a, b) {
          return fn.call(that, a, b);
        };
        case 3: return function (a, b, c) {
          return fn.call(that, a, b, c);
        };
      }
      return function (/* ...args */) {
        return fn.apply(that, arguments);
      };
    };
    
    
    /***/ }),
    /* 24 */
    /***/ (function(module, exports) {
    
    var toString = {}.toString;
    
    module.exports = function (it) {
      return toString.call(it).slice(8, -1);
    };
    
    
    /***/ }),
    /* 25 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var fails = __webpack_require__(4);
    
    module.exports = function (method, arg) {
      return !!method && fails(function () {
        // eslint-disable-next-line no-useless-call
        arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
      });
    };
    
    
    /***/ }),
    /* 26 */
    /***/ (function(module, exports) {
    
    var core = module.exports = { version: '2.5.1' };
    if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef
    
    
    /***/ }),
    /* 27 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 7.1.1 ToPrimitive(input [, PreferredType])
    var isObject = __webpack_require__(5);
    // instead of the ES6 spec version, we didn't implement @@toPrimitive case
    // and the second argument - flag - preferred type is a string
    module.exports = function (it, S) {
      if (!isObject(it)) return it;
      var fn, val;
      if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
      if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
      if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
      throw TypeError("Can't convert object to primitive value");
    };
    
    
    /***/ }),
    /* 28 */
    /***/ (function(module, exports) {
    
    // 7.2.1 RequireObjectCoercible(argument)
    module.exports = function (it) {
      if (it == undefined) throw TypeError("Can't call method on  " + it);
      return it;
    };
    
    
    /***/ }),
    /* 29 */
    /***/ (function(module, exports) {
    
    // 7.1.4 ToInteger
    var ceil = Math.ceil;
    var floor = Math.floor;
    module.exports = function (it) {
      return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
    };
    
    
    /***/ }),
    /* 30 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // most Object methods by ES6 should accept primitives
    var $export = __webpack_require__(0);
    var core = __webpack_require__(26);
    var fails = __webpack_require__(4);
    module.exports = function (KEY, exec) {
      var fn = (core.Object || {})[KEY] || Object[KEY];
      var exp = {};
      exp[KEY] = exec(fn);
      $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
    };
    
    
    /***/ }),
    /* 31 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 0 -> Array#forEach
    // 1 -> Array#map
    // 2 -> Array#filter
    // 3 -> Array#some
    // 4 -> Array#every
    // 5 -> Array#find
    // 6 -> Array#findIndex
    var ctx = __webpack_require__(23);
    var IObject = __webpack_require__(58);
    var toObject = __webpack_require__(10);
    var toLength = __webpack_require__(9);
    var asc = __webpack_require__(101);
    module.exports = function (TYPE, $create) {
      var IS_MAP = TYPE == 1;
      var IS_FILTER = TYPE == 2;
      var IS_SOME = TYPE == 3;
      var IS_EVERY = TYPE == 4;
      var IS_FIND_INDEX = TYPE == 6;
      var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
      var create = $create || asc;
      return function ($this, callbackfn, that) {
        var O = toObject($this);
        var self = IObject(O);
        var f = ctx(callbackfn, that, 3);
        var length = toLength(self.length);
        var index = 0;
        var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
        var val, res;
        for (;length > index; index++) if (NO_HOLES || index in self) {
          val = self[index];
          res = f(val, index, O);
          if (TYPE) {
            if (IS_MAP) result[index] = res;   // map
            else if (res) switch (TYPE) {
              case 3: return true;             // some
              case 5: return val;              // find
              case 6: return index;            // findIndex
              case 2: result.push(val);        // filter
            } else if (IS_EVERY) return false; // every
          }
        }
        return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
      };
    };
    
    
    /***/ }),
    /* 32 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    if (__webpack_require__(7)) {
      var LIBRARY = __webpack_require__(42);
      var global = __webpack_require__(2);
      var fails = __webpack_require__(4);
      var $export = __webpack_require__(0);
      var $typed = __webpack_require__(73);
      var $buffer = __webpack_require__(107);
      var ctx = __webpack_require__(23);
      var anInstance = __webpack_require__(48);
      var propertyDesc = __webpack_require__(40);
      var hide = __webpack_require__(14);
      var redefineAll = __webpack_require__(50);
      var toInteger = __webpack_require__(29);
      var toLength = __webpack_require__(9);
      var toIndex = __webpack_require__(137);
      var toAbsoluteIndex = __webpack_require__(44);
      var toPrimitive = __webpack_require__(27);
      var has = __webpack_require__(13);
      var classof = __webpack_require__(60);
      var isObject = __webpack_require__(5);
      var toObject = __webpack_require__(10);
      var isArrayIter = __webpack_require__(98);
      var create = __webpack_require__(45);
      var getPrototypeOf = __webpack_require__(19);
      var gOPN = __webpack_require__(46).f;
      var getIterFn = __webpack_require__(100);
      var uid = __webpack_require__(41);
      var wks = __webpack_require__(6);
      var createArrayMethod = __webpack_require__(31);
      var createArrayIncludes = __webpack_require__(64);
      var speciesConstructor = __webpack_require__(71);
      var ArrayIterators = __webpack_require__(103);
      var Iterators = __webpack_require__(55);
      var $iterDetect = __webpack_require__(68);
      var setSpecies = __webpack_require__(47);
      var arrayFill = __webpack_require__(102);
      var arrayCopyWithin = __webpack_require__(127);
      var $DP = __webpack_require__(8);
      var $GOPD = __webpack_require__(18);
      var dP = $DP.f;
      var gOPD = $GOPD.f;
      var RangeError = global.RangeError;
      var TypeError = global.TypeError;
      var Uint8Array = global.Uint8Array;
      var ARRAY_BUFFER = 'ArrayBuffer';
      var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
      var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
      var PROTOTYPE = 'prototype';
      var ArrayProto = Array[PROTOTYPE];
      var $ArrayBuffer = $buffer.ArrayBuffer;
      var $DataView = $buffer.DataView;
      var arrayForEach = createArrayMethod(0);
      var arrayFilter = createArrayMethod(2);
      var arraySome = createArrayMethod(3);
      var arrayEvery = createArrayMethod(4);
      var arrayFind = createArrayMethod(5);
      var arrayFindIndex = createArrayMethod(6);
      var arrayIncludes = createArrayIncludes(true);
      var arrayIndexOf = createArrayIncludes(false);
      var arrayValues = ArrayIterators.values;
      var arrayKeys = ArrayIterators.keys;
      var arrayEntries = ArrayIterators.entries;
      var arrayLastIndexOf = ArrayProto.lastIndexOf;
      var arrayReduce = ArrayProto.reduce;
      var arrayReduceRight = ArrayProto.reduceRight;
      var arrayJoin = ArrayProto.join;
      var arraySort = ArrayProto.sort;
      var arraySlice = ArrayProto.slice;
      var arrayToString = ArrayProto.toString;
      var arrayToLocaleString = ArrayProto.toLocaleString;
      var ITERATOR = wks('iterator');
      var TAG = wks('toStringTag');
      var TYPED_CONSTRUCTOR = uid('typed_constructor');
      var DEF_CONSTRUCTOR = uid('def_constructor');
      var ALL_CONSTRUCTORS = $typed.CONSTR;
      var TYPED_ARRAY = $typed.TYPED;
      var VIEW = $typed.VIEW;
      var WRONG_LENGTH = 'Wrong length!';
    
      var $map = createArrayMethod(1, function (O, length) {
        return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
      });
    
      var LITTLE_ENDIAN = fails(function () {
        // eslint-disable-next-line no-undef
        return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
      });
    
      var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
        new Uint8Array(1).set({});
      });
    
      var toOffset = function (it, BYTES) {
        var offset = toInteger(it);
        if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
        return offset;
      };
    
      var validate = function (it) {
        if (isObject(it) && TYPED_ARRAY in it) return it;
        throw TypeError(it + ' is not a typed array!');
      };
    
      var allocate = function (C, length) {
        if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
          throw TypeError('It is not a typed array constructor!');
        } return new C(length);
      };
    
      var speciesFromList = function (O, list) {
        return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
      };
    
      var fromList = function (C, list) {
        var index = 0;
        var length = list.length;
        var result = allocate(C, length);
        while (length > index) result[index] = list[index++];
        return result;
      };
    
      var addGetter = function (it, key, internal) {
        dP(it, key, { get: function () { return this._d[internal]; } });
      };
    
      var $from = function from(source /* , mapfn, thisArg */) {
        var O = toObject(source);
        var aLen = arguments.length;
        var mapfn = aLen > 1 ? arguments[1] : undefined;
        var mapping = mapfn !== undefined;
        var iterFn = getIterFn(O);
        var i, length, values, result, step, iterator;
        if (iterFn != undefined && !isArrayIter(iterFn)) {
          for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
            values.push(step.value);
          } O = values;
        }
        if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
        for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
          result[i] = mapping ? mapfn(O[i], i) : O[i];
        }
        return result;
      };
    
      var $of = function of(/* ...items */) {
        var index = 0;
        var length = arguments.length;
        var result = allocate(this, length);
        while (length > index) result[index] = arguments[index++];
        return result;
      };
    
      // iOS Safari 6.x fails here
      var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });
    
      var $toLocaleString = function toLocaleString() {
        return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
      };
    
      var proto = {
        copyWithin: function copyWithin(target, start /* , end */) {
          return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
        },
        every: function every(callbackfn /* , thisArg */) {
          return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        },
        fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars
          return arrayFill.apply(validate(this), arguments);
        },
        filter: function filter(callbackfn /* , thisArg */) {
          return speciesFromList(this, arrayFilter(validate(this), callbackfn,
            arguments.length > 1 ? arguments[1] : undefined));
        },
        find: function find(predicate /* , thisArg */) {
          return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
        },
        findIndex: function findIndex(predicate /* , thisArg */) {
          return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
        },
        forEach: function forEach(callbackfn /* , thisArg */) {
          arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        },
        indexOf: function indexOf(searchElement /* , fromIndex */) {
          return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
        },
        includes: function includes(searchElement /* , fromIndex */) {
          return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
        },
        join: function join(separator) { // eslint-disable-line no-unused-vars
          return arrayJoin.apply(validate(this), arguments);
        },
        lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars
          return arrayLastIndexOf.apply(validate(this), arguments);
        },
        map: function map(mapfn /* , thisArg */) {
          return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
        },
        reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
          return arrayReduce.apply(validate(this), arguments);
        },
        reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
          return arrayReduceRight.apply(validate(this), arguments);
        },
        reverse: function reverse() {
          var that = this;
          var length = validate(that).length;
          var middle = Math.floor(length / 2);
          var index = 0;
          var value;
          while (index < middle) {
            value = that[index];
            that[index++] = that[--length];
            that[length] = value;
          } return that;
        },
        some: function some(callbackfn /* , thisArg */) {
          return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        },
        sort: function sort(comparefn) {
          return arraySort.call(validate(this), comparefn);
        },
        subarray: function subarray(begin, end) {
          var O = validate(this);
          var length = O.length;
          var $begin = toAbsoluteIndex(begin, length);
          return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
            O.buffer,
            O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
            toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)
          );
        }
      };
    
      var $slice = function slice(start, end) {
        return speciesFromList(this, arraySlice.call(validate(this), start, end));
      };
    
      var $set = function set(arrayLike /* , offset */) {
        validate(this);
        var offset = toOffset(arguments[1], 1);
        var length = this.length;
        var src = toObject(arrayLike);
        var len = toLength(src.length);
        var index = 0;
        if (len + offset > length) throw RangeError(WRONG_LENGTH);
        while (index < len) this[offset + index] = src[index++];
      };
    
      var $iterators = {
        entries: function entries() {
          return arrayEntries.call(validate(this));
        },
        keys: function keys() {
          return arrayKeys.call(validate(this));
        },
        values: function values() {
          return arrayValues.call(validate(this));
        }
      };
    
      var isTAIndex = function (target, key) {
        return isObject(target)
          && target[TYPED_ARRAY]
          && typeof key != 'symbol'
          && key in target
          && String(+key) == String(key);
      };
      var $getDesc = function getOwnPropertyDescriptor(target, key) {
        return isTAIndex(target, key = toPrimitive(key, true))
          ? propertyDesc(2, target[key])
          : gOPD(target, key);
      };
      var $setDesc = function defineProperty(target, key, desc) {
        if (isTAIndex(target, key = toPrimitive(key, true))
          && isObject(desc)
          && has(desc, 'value')
          && !has(desc, 'get')
          && !has(desc, 'set')
          // TODO: add validation descriptor w/o calling accessors
          && !desc.configurable
          && (!has(desc, 'writable') || desc.writable)
          && (!has(desc, 'enumerable') || desc.enumerable)
        ) {
          target[key] = desc.value;
          return target;
        } return dP(target, key, desc);
      };
    
      if (!ALL_CONSTRUCTORS) {
        $GOPD.f = $getDesc;
        $DP.f = $setDesc;
      }
    
      $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
        getOwnPropertyDescriptor: $getDesc,
        defineProperty: $setDesc
      });
    
      if (fails(function () { arrayToString.call({}); })) {
        arrayToString = arrayToLocaleString = function toString() {
          return arrayJoin.call(this);
        };
      }
    
      var $TypedArrayPrototype$ = redefineAll({}, proto);
      redefineAll($TypedArrayPrototype$, $iterators);
      hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
      redefineAll($TypedArrayPrototype$, {
        slice: $slice,
        set: $set,
        constructor: function () { /* noop */ },
        toString: arrayToString,
        toLocaleString: $toLocaleString
      });
      addGetter($TypedArrayPrototype$, 'buffer', 'b');
      addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
      addGetter($TypedArrayPrototype$, 'byteLength', 'l');
      addGetter($TypedArrayPrototype$, 'length', 'e');
      dP($TypedArrayPrototype$, TAG, {
        get: function () { return this[TYPED_ARRAY]; }
      });
    
      // eslint-disable-next-line max-statements
      module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
        CLAMPED = !!CLAMPED;
        var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
        var GETTER = 'get' + KEY;
        var SETTER = 'set' + KEY;
        var TypedArray = global[NAME];
        var Base = TypedArray || {};
        var TAC = TypedArray && getPrototypeOf(TypedArray);
        var FORCED = !TypedArray || !$typed.ABV;
        var O = {};
        var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
        var getter = function (that, index) {
          var data = that._d;
          return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
        };
        var setter = function (that, index, value) {
          var data = that._d;
          if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
          data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
        };
        var addElement = function (that, index) {
          dP(that, index, {
            get: function () {
              return getter(this, index);
            },
            set: function (value) {
              return setter(this, index, value);
            },
            enumerable: true
          });
        };
        if (FORCED) {
          TypedArray = wrapper(function (that, data, $offset, $length) {
            anInstance(that, TypedArray, NAME, '_d');
            var index = 0;
            var offset = 0;
            var buffer, byteLength, length, klass;
            if (!isObject(data)) {
              length = toIndex(data);
              byteLength = length * BYTES;
              buffer = new $ArrayBuffer(byteLength);
            } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
              buffer = data;
              offset = toOffset($offset, BYTES);
              var $len = data.byteLength;
              if ($length === undefined) {
                if ($len % BYTES) throw RangeError(WRONG_LENGTH);
                byteLength = $len - offset;
                if (byteLength < 0) throw RangeError(WRONG_LENGTH);
              } else {
                byteLength = toLength($length) * BYTES;
                if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
              }
              length = byteLength / BYTES;
            } else if (TYPED_ARRAY in data) {
              return fromList(TypedArray, data);
            } else {
              return $from.call(TypedArray, data);
            }
            hide(that, '_d', {
              b: buffer,
              o: offset,
              l: byteLength,
              e: length,
              v: new $DataView(buffer)
            });
            while (index < length) addElement(that, index++);
          });
          TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
          hide(TypedArrayPrototype, 'constructor', TypedArray);
        } else if (!fails(function () {
          TypedArray(1);
        }) || !fails(function () {
          new TypedArray(-1); // eslint-disable-line no-new
        }) || !$iterDetect(function (iter) {
          new TypedArray(); // eslint-disable-line no-new
          new TypedArray(null); // eslint-disable-line no-new
          new TypedArray(1.5); // eslint-disable-line no-new
          new TypedArray(iter); // eslint-disable-line no-new
        }, true)) {
          TypedArray = wrapper(function (that, data, $offset, $length) {
            anInstance(that, TypedArray, NAME);
            var klass;
            // `ws` module bug, temporarily remove validation length for Uint8Array
            // https://github.com/websockets/ws/pull/645
            if (!isObject(data)) return new Base(toIndex(data));
            if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
              return $length !== undefined
                ? new Base(data, toOffset($offset, BYTES), $length)
                : $offset !== undefined
                  ? new Base(data, toOffset($offset, BYTES))
                  : new Base(data);
            }
            if (TYPED_ARRAY in data) return fromList(TypedArray, data);
            return $from.call(TypedArray, data);
          });
          arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
            if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
          });
          TypedArray[PROTOTYPE] = TypedArrayPrototype;
          if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
        }
        var $nativeIterator = TypedArrayPrototype[ITERATOR];
        var CORRECT_ITER_NAME = !!$nativeIterator
          && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
        var $iterator = $iterators.values;
        hide(TypedArray, TYPED_CONSTRUCTOR, true);
        hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
        hide(TypedArrayPrototype, VIEW, true);
        hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);
    
        if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
          dP(TypedArrayPrototype, TAG, {
            get: function () { return NAME; }
          });
        }
    
        O[NAME] = TypedArray;
    
        $export($export.G + $export.W + $export.F * (TypedArray != Base), O);
    
        $export($export.S, NAME, {
          BYTES_PER_ELEMENT: BYTES
        });
    
        $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {
          from: $from,
          of: $of
        });
    
        if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);
    
        $export($export.P, NAME, proto);
    
        setSpecies(NAME);
    
        $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });
    
        $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);
    
        if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;
    
        $export($export.P + $export.F * fails(function () {
          new TypedArray(1).slice();
        }), NAME, { slice: $slice });
    
        $export($export.P + $export.F * (fails(function () {
          return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
        }) || !fails(function () {
          TypedArrayPrototype.toLocaleString.call([1, 2]);
        })), NAME, { toLocaleString: $toLocaleString });
    
        Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
        if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
      };
    } else module.exports = function () { /* empty */ };
    
    
    /***/ }),
    /* 33 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var Map = __webpack_require__(132);
    var $export = __webpack_require__(0);
    var shared = __webpack_require__(63)('metadata');
    var store = shared.store || (shared.store = new (__webpack_require__(135))());
    
    var getOrCreateMetadataMap = function (target, targetKey, create) {
      var targetMetadata = store.get(target);
      if (!targetMetadata) {
        if (!create) return undefined;
        store.set(target, targetMetadata = new Map());
      }
      var keyMetadata = targetMetadata.get(targetKey);
      if (!keyMetadata) {
        if (!create) return undefined;
        targetMetadata.set(targetKey, keyMetadata = new Map());
      } return keyMetadata;
    };
    var ordinaryHasOwnMetadata = function (MetadataKey, O, P) {
      var metadataMap = getOrCreateMetadataMap(O, P, false);
      return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
    };
    var ordinaryGetOwnMetadata = function (MetadataKey, O, P) {
      var metadataMap = getOrCreateMetadataMap(O, P, false);
      return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
    };
    var ordinaryDefineOwnMetadata = function (MetadataKey, MetadataValue, O, P) {
      getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
    };
    var ordinaryOwnMetadataKeys = function (target, targetKey) {
      var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
      var keys = [];
      if (metadataMap) metadataMap.forEach(function (_, key) { keys.push(key); });
      return keys;
    };
    var toMetaKey = function (it) {
      return it === undefined || typeof it == 'symbol' ? it : String(it);
    };
    var exp = function (O) {
      $export($export.S, 'Reflect', O);
    };
    
    module.exports = {
      store: store,
      map: getOrCreateMetadataMap,
      has: ordinaryHasOwnMetadata,
      get: ordinaryGetOwnMetadata,
      set: ordinaryDefineOwnMetadata,
      keys: ordinaryOwnMetadataKeys,
      key: toMetaKey,
      exp: exp
    };
    
    
    /***/ }),
    /* 34 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    var _ = __webpack_require__(38);
    var dom = __webpack_require__(51);
    var instances = __webpack_require__(20);
    var updateScroll = __webpack_require__(39);
    
    function getThumbSize(i, thumbSize) {
      if (i.settings.minScrollbarLength) {
        thumbSize = Math.max(thumbSize, i.settings.minScrollbarLength);
      }
      if (i.settings.maxScrollbarLength) {
        thumbSize = Math.min(thumbSize, i.settings.maxScrollbarLength);
      }
      return thumbSize;
    }
    
    function updateCss(element, i) {
      var xRailOffset = {width: i.railXWidth};
      if (i.isRtl) {
        xRailOffset.left = i.negativeScrollAdjustment + element.scrollLeft + i.containerWidth - i.contentWidth;
      } else {
        xRailOffset.left = element.scrollLeft;
      }
      if (i.isScrollbarXUsingBottom) {
        xRailOffset.bottom = i.scrollbarXBottom - element.scrollTop;
      } else {
        xRailOffset.top = i.scrollbarXTop + element.scrollTop;
      }
      dom.css(i.scrollbarXRail, xRailOffset);
    
      var yRailOffset = {top: element.scrollTop, height: i.railYHeight};
      if (i.isScrollbarYUsingRight) {
        if (i.isRtl) {
          yRailOffset.right = i.contentWidth - (i.negativeScrollAdjustment + element.scrollLeft) - i.scrollbarYRight - i.scrollbarYOuterWidth;
        } else {
          yRailOffset.right = i.scrollbarYRight - element.scrollLeft;
        }
      } else {
        if (i.isRtl) {
          yRailOffset.left = i.negativeScrollAdjustment + element.scrollLeft + i.containerWidth * 2 - i.contentWidth - i.scrollbarYLeft - i.scrollbarYOuterWidth;
        } else {
          yRailOffset.left = i.scrollbarYLeft + element.scrollLeft;
        }
      }
      dom.css(i.scrollbarYRail, yRailOffset);
    
      dom.css(i.scrollbarX, {left: i.scrollbarXLeft, width: i.scrollbarXWidth - i.railBorderXWidth});
      dom.css(i.scrollbarY, {top: i.scrollbarYTop, height: i.scrollbarYHeight - i.railBorderYWidth});
    }
    
    module.exports = function (element) {
      var i = instances.get(element);
    
      i.containerWidth = element.clientWidth;
      i.containerHeight = element.clientHeight;
      i.contentWidth = element.scrollWidth;
      i.contentHeight = element.scrollHeight;
    
      var existingRails;
      if (!element.contains(i.scrollbarXRail)) {
        existingRails = dom.queryChildren(element, '.ps__scrollbar-x-rail');
        if (existingRails.length > 0) {
          existingRails.forEach(function (rail) {
            dom.remove(rail);
          });
        }
        dom.appendTo(i.scrollbarXRail, element);
      }
      if (!element.contains(i.scrollbarYRail)) {
        existingRails = dom.queryChildren(element, '.ps__scrollbar-y-rail');
        if (existingRails.length > 0) {
          existingRails.forEach(function (rail) {
            dom.remove(rail);
          });
        }
        dom.appendTo(i.scrollbarYRail, element);
      }
    
      if (!i.settings.suppressScrollX && i.containerWidth + i.settings.scrollXMarginOffset < i.contentWidth) {
        i.scrollbarXActive = true;
        i.railXWidth = i.containerWidth - i.railXMarginWidth;
        i.railXRatio = i.containerWidth / i.railXWidth;
        i.scrollbarXWidth = getThumbSize(i, _.toInt(i.railXWidth * i.containerWidth / i.contentWidth));
        i.scrollbarXLeft = _.toInt((i.negativeScrollAdjustment + element.scrollLeft) * (i.railXWidth - i.scrollbarXWidth) / (i.contentWidth - i.containerWidth));
      } else {
        i.scrollbarXActive = false;
      }
    
      if (!i.settings.suppressScrollY && i.containerHeight + i.settings.scrollYMarginOffset < i.contentHeight) {
        i.scrollbarYActive = true;
        i.railYHeight = i.containerHeight - i.railYMarginHeight;
        i.railYRatio = i.containerHeight / i.railYHeight;
        i.scrollbarYHeight = getThumbSize(i, _.toInt(i.railYHeight * i.containerHeight / i.contentHeight));
        i.scrollbarYTop = _.toInt(element.scrollTop * (i.railYHeight - i.scrollbarYHeight) / (i.contentHeight - i.containerHeight));
      } else {
        i.scrollbarYActive = false;
      }
    
      if (i.scrollbarXLeft >= i.railXWidth - i.scrollbarXWidth) {
        i.scrollbarXLeft = i.railXWidth - i.scrollbarXWidth;
      }
      if (i.scrollbarYTop >= i.railYHeight - i.scrollbarYHeight) {
        i.scrollbarYTop = i.railYHeight - i.scrollbarYHeight;
      }
    
      updateCss(element, i);
    
      if (i.scrollbarXActive) {
        element.classList.add('ps--active-x');
      } else {
        element.classList.remove('ps--active-x');
        i.scrollbarXWidth = 0;
        i.scrollbarXLeft = 0;
        updateScroll(element, 'left', 0);
      }
      if (i.scrollbarYActive) {
        element.classList.add('ps--active-y');
      } else {
        element.classList.remove('ps--active-y');
        i.scrollbarYHeight = 0;
        i.scrollbarYTop = 0;
        updateScroll(element, 'top', 0);
      }
    };
    
    
    /***/ }),
    /* 35 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
     * ScrollMagic v2.0.5 (2015-04-29)
     * The javascript library for magical scroll interactions.
     * (c) 2015 Jan Paepke (@janpaepke)
     * Project Website: http://scrollmagic.io
     * 
     * @version 2.0.5
     * @license Dual licensed under MIT license and GPL.
     * @author Jan Paepke - e-mail@janpaepke.de
     *
     * @file ScrollMagic main library.
     */
    /**
     * @namespace ScrollMagic
     */
    (function (root, factory) {
        if (true) {
            // AMD. Register as an anonymous module.
            !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
                    __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
                    (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
                    __WEBPACK_AMD_DEFINE_FACTORY__),
                    __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        } else if (typeof exports === 'object') {
            // CommonJS
            module.exports = factory();
        } else {
            // Browser global
            root.ScrollMagic = factory();
        }
    }(this, function () {
        "use strict";
    
        var ScrollMagic = function () {
            _util.log(2, '(COMPATIBILITY NOTICE) -> As of ScrollMagic 2.0.0 you need to use \'new ScrollMagic.Controller()\' to create a new controller instance. Use \'new ScrollMagic.Scene()\' to instance a scene.');
        };
    
        ScrollMagic.version = "2.0.5";
    
        // TODO: temporary workaround for chrome's scroll jitter bug
        window.addEventListener("mousewheel", function () {});
    
        // global const
        var PIN_SPACER_ATTRIBUTE = "data-scrollmagic-pin-spacer";
    
        /**
         * The main class that is needed once per scroll container.
         *
         * @class
         *
         * @example
         * // basic initialization
         * var controller = new ScrollMagic.Controller();
         *
         * // passing options
         * var controller = new ScrollMagic.Controller({container: "#myContainer", loglevel: 3});
         *
         * @param {object} [options] - An object containing one or more options for the controller.
         * @param {(string|object)} [options.container=window] - A selector, DOM object that references the main container for scrolling.
         * @param {boolean} [options.vertical=true] - Sets the scroll mode to vertical (`true`) or horizontal (`false`) scrolling.
         * @param {object} [options.globalSceneOptions={}] - These options will be passed to every Scene that is added to the controller using the addScene method. For more information on Scene options see {@link ScrollMagic.Scene}.
         * @param {number} [options.loglevel=2] Loglevel for debugging. Note that logging is disabled in the minified version of ScrollMagic.
         ** `0` => silent
         ** `1` => errors
         ** `2` => errors, warnings
         ** `3` => errors, warnings, debuginfo
         * @param {boolean} [options.refreshInterval=100] - Some changes don't call events by default, like changing the container size or moving a scene trigger element.  
         This interval polls these parameters to fire the necessary events.  
         If you don't use custom containers, trigger elements or have static layouts, where the positions of the trigger elements don't change, you can set this to 0 disable interval checking and improve performance.
         *
         */
        ScrollMagic.Controller = function (options) {
    /*
         * ----------------------------------------------------------------
         * settings
         * ----------------------------------------------------------------
         */
            var
            NAMESPACE = 'ScrollMagic.Controller',
                SCROLL_DIRECTION_FORWARD = 'FORWARD',
                SCROLL_DIRECTION_REVERSE = 'REVERSE',
                SCROLL_DIRECTION_PAUSED = 'PAUSED',
                DEFAULT_OPTIONS = CONTROLLER_OPTIONS.defaults;
    
    /*
         * ----------------------------------------------------------------
         * private vars
         * ----------------------------------------------------------------
         */
            var
            Controller = this,
                _options = _util.extend({}, DEFAULT_OPTIONS, options),
                _sceneObjects = [],
                _updateScenesOnNextCycle = false,
                // can be boolean (true => all scenes) or an array of scenes to be updated
                _scrollPos = 0,
                _scrollDirection = SCROLL_DIRECTION_PAUSED,
                _isDocument = true,
                _viewPortSize = 0,
                _enabled = true,
                _updateTimeout, _refreshTimeout;
    
    /*
         * ----------------------------------------------------------------
         * private functions
         * ----------------------------------------------------------------
         */
    
            /**
             * Internal constructor function of the ScrollMagic Controller
             * @private
             */
            var construct = function () {
                for (var key in _options) {
                    if (!DEFAULT_OPTIONS.hasOwnProperty(key)) {
                        log(2, "WARNING: Unknown option \"" + key + "\"");
                        delete _options[key];
                    }
                }
                _options.container = _util.get.elements(_options.container)[0];
                // check ScrollContainer
                if (!_options.container) {
                    log(1, "ERROR creating object " + NAMESPACE + ": No valid scroll container supplied");
                    throw NAMESPACE + " init failed."; // cancel
                }
                _isDocument = _options.container === window || _options.container === document.body || !document.body.contains(_options.container);
                // normalize to window
                if (_isDocument) {
                    _options.container = window;
                }
                // update container size immediately
                _viewPortSize = getViewportSize();
                // set event handlers
                _options.container.addEventListener("resize", onChange);
                _options.container.addEventListener("scroll", onChange);
    
                _options.refreshInterval = parseInt(_options.refreshInterval) || DEFAULT_OPTIONS.refreshInterval;
                scheduleRefresh();
    
                log(3, "added new " + NAMESPACE + " controller (v" + ScrollMagic.version + ")");
            };
    
            /**
             * Schedule the next execution of the refresh function
             * @private
             */
            var scheduleRefresh = function () {
                if (_options.refreshInterval > 0) {
                    _refreshTimeout = window.setTimeout(refresh, _options.refreshInterval);
                }
            };
    
            /**
             * Default function to get scroll pos - overwriteable using `Controller.scrollPos(newFunction)`
             * @private
             */
            var getScrollPos = function () {
                return _options.vertical ? _util.get.scrollTop(_options.container) : _util.get.scrollLeft(_options.container);
            };
    
            /**
             * Returns the current viewport Size (width vor horizontal, height for vertical)
             * @private
             */
            var getViewportSize = function () {
                return _options.vertical ? _util.get.height(_options.container) : _util.get.width(_options.container);
            };
    
            /**
             * Default function to set scroll pos - overwriteable using `Controller.scrollTo(newFunction)`
             * Make available publicly for pinned mousewheel workaround.
             * @private
             */
            var setScrollPos = this._setScrollPos = function (pos) {
                if (_options.vertical) {
                    if (_isDocument) {
                        window.scrollTo(_util.get.scrollLeft(), pos);
                    } else {
                        _options.container.scrollTop = pos;
                    }
                } else {
                    if (_isDocument) {
                        window.scrollTo(pos, _util.get.scrollTop());
                    } else {
                        _options.container.scrollLeft = pos;
                    }
                }
            };
    
            /**
             * Handle updates in cycles instead of on scroll (performance)
             * @private
             */
            var updateScenes = function () {
                if (_enabled && _updateScenesOnNextCycle) {
                    // determine scenes to update
                    var scenesToUpdate = _util.type.Array(_updateScenesOnNextCycle) ? _updateScenesOnNextCycle : _sceneObjects.slice(0);
                    // reset scenes
                    _updateScenesOnNextCycle = false;
                    var oldScrollPos = _scrollPos;
                    // update scroll pos now instead of onChange, as it might have changed since scheduling (i.e. in-browser smooth scroll)
                    _scrollPos = Controller.scrollPos();
                    var deltaScroll = _scrollPos - oldScrollPos;
                    if (deltaScroll !== 0) { // scroll position changed?
                        _scrollDirection = (deltaScroll > 0) ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_REVERSE;
                    }
                    // reverse order of scenes if scrolling reverse
                    if (_scrollDirection === SCROLL_DIRECTION_REVERSE) {
                        scenesToUpdate.reverse();
                    }
                    // update scenes
                    scenesToUpdate.forEach(function (scene, index) {
                        log(3, "updating Scene " + (index + 1) + "/" + scenesToUpdate.length + " (" + _sceneObjects.length + " total)");
                        scene.update(true);
                    });
                    if (scenesToUpdate.length === 0 && _options.loglevel >= 3) {
                        log(3, "updating 0 Scenes (nothing added to controller)");
                    }
                }
            };
    
            /**
             * Initializes rAF callback
             * @private
             */
            var debounceUpdate = function () {
                _updateTimeout = _util.rAF(updateScenes);
            };
    
            /**
             * Handles Container changes
             * @private
             */
            var onChange = function (e) {
                log(3, "event fired causing an update:", e.type);
                if (e.type == "resize") {
                    // resize
                    _viewPortSize = getViewportSize();
                    _scrollDirection = SCROLL_DIRECTION_PAUSED;
                }
                // schedule update
                if (_updateScenesOnNextCycle !== true) {
                    _updateScenesOnNextCycle = true;
                    debounceUpdate();
                }
            };
    
            var refresh = function () {
                if (!_isDocument) {
                    // simulate resize event. Only works for viewport relevant param (performance)
                    if (_viewPortSize != getViewportSize()) {
                        var resizeEvent;
                        try {
                            resizeEvent = new Event('resize', {
                                bubbles: false,
                                cancelable: false
                            });
                        } catch (e) { // stupid IE
                            resizeEvent = document.createEvent("Event");
                            resizeEvent.initEvent("resize", false, false);
                        }
                        _options.container.dispatchEvent(resizeEvent);
                    }
                }
                _sceneObjects.forEach(function (scene, index) { // refresh all scenes
                    scene.refresh();
                });
                scheduleRefresh();
            };
    
            /**
             * Send a debug message to the console.
             * provided publicly with _log for plugins
             * @private
             *
             * @param {number} loglevel - The loglevel required to initiate output for the message.
             * @param {...mixed} output - One or more variables that should be passed to the console.
             */
            var log = this._log = function (loglevel, output) {
                if (_options.loglevel >= loglevel) {
                    Array.prototype.splice.call(arguments, 1, 0, "(" + NAMESPACE + ") ->");
                    _util.log.apply(window, arguments);
                }
            };
            // for scenes we have getters for each option, but for the controller we don't, so we need to make it available externally for plugins
            this._options = _options;
    
            /**
             * Sort scenes in ascending order of their start offset.
             * @private
             *
             * @param {array} ScenesArray - an array of ScrollMagic Scenes that should be sorted
             * @return {array} The sorted array of Scenes.
             */
            var sortScenes = function (ScenesArray) {
                if (ScenesArray.length <= 1) {
                    return ScenesArray;
                } else {
                    var scenes = ScenesArray.slice(0);
                    scenes.sort(function (a, b) {
                        return a.scrollOffset() > b.scrollOffset() ? 1 : -1;
                    });
                    return scenes;
                }
            };
    
            /**
             * ----------------------------------------------------------------
             * public functions
             * ----------------------------------------------------------------
             */
    
            /**
             * Add one ore more scene(s) to the controller.  
             * This is the equivalent to `Scene.addTo(controller)`.
             * @public
             * @example
             * // with a previously defined scene
             * controller.addScene(scene);
             *
             * // with a newly created scene.
             * controller.addScene(new ScrollMagic.Scene({duration : 0}));
             *
             * // adding multiple scenes
             * controller.addScene([scene, scene2, new ScrollMagic.Scene({duration : 0})]);
             *
             * @param {(ScrollMagic.Scene|array)} newScene - ScrollMagic Scene or Array of Scenes to be added to the controller.
             * @return {Controller} Parent object for chaining.
             */
            this.addScene = function (newScene) {
                if (_util.type.Array(newScene)) {
                    newScene.forEach(function (scene, index) {
                        Controller.addScene(scene);
                    });
                } else if (newScene instanceof ScrollMagic.Scene) {
                    if (newScene.controller() !== Controller) {
                        newScene.addTo(Controller);
                    } else if (_sceneObjects.indexOf(newScene) < 0) {
                        // new scene
                        _sceneObjects.push(newScene); // add to array
                        _sceneObjects = sortScenes(_sceneObjects); // sort
                        newScene.on("shift.controller_sort", function () { // resort whenever scene moves
                            _sceneObjects = sortScenes(_sceneObjects);
                        });
                        // insert Global defaults.
                        for (var key in _options.globalSceneOptions) {
                            if (newScene[key]) {
                                newScene[key].call(newScene, _options.globalSceneOptions[key]);
                            }
                        }
                        log(3, "adding Scene (now " + _sceneObjects.length + " total)");
                    }
                } else {
                    log(1, "ERROR: invalid argument supplied for '.addScene()'");
                }
                return Controller;
            };
    
            /**
             * Remove one ore more scene(s) from the controller.  
             * This is the equivalent to `Scene.remove()`.
             * @public
             * @example
             * // remove a scene from the controller
             * controller.removeScene(scene);
             *
             * // remove multiple scenes from the controller
             * controller.removeScene([scene, scene2, scene3]);
             *
             * @param {(ScrollMagic.Scene|array)} Scene - ScrollMagic Scene or Array of Scenes to be removed from the controller.
             * @returns {Controller} Parent object for chaining.
             */
            this.removeScene = function (Scene) {
                if (_util.type.Array(Scene)) {
                    Scene.forEach(function (scene, index) {
                        Controller.removeScene(scene);
                    });
                } else {
                    var index = _sceneObjects.indexOf(Scene);
                    if (index > -1) {
                        Scene.off("shift.controller_sort");
                        _sceneObjects.splice(index, 1);
                        log(3, "removing Scene (now " + _sceneObjects.length + " left)");
                        Scene.remove();
                    }
                }
                return Controller;
            };
    
            /**
             * Update one ore more scene(s) according to the scroll position of the container.  
             * This is the equivalent to `Scene.update()`.  
             * The update method calculates the scene's start and end position (based on the trigger element, trigger hook, duration and offset) and checks it against the current scroll position of the container.  
             * It then updates the current scene state accordingly (or does nothing, if the state is already correct) – Pins will be set to their correct position and tweens will be updated to their correct progress.  
             * _**Note:** This method gets called constantly whenever Controller detects a change. The only application for you is if you change something outside of the realm of ScrollMagic, like moving the trigger or changing tween parameters._
             * @public
             * @example
             * // update a specific scene on next cycle
             * controller.updateScene(scene);
             *
             * // update a specific scene immediately
             * controller.updateScene(scene, true);
             *
             * // update multiple scenes scene on next cycle
             * controller.updateScene([scene1, scene2, scene3]);
             *
             * @param {ScrollMagic.Scene} Scene - ScrollMagic Scene or Array of Scenes that is/are supposed to be updated.
             * @param {boolean} [immediately=false] - If `true` the update will be instant, if `false` it will wait until next update cycle.  
             This is useful when changing multiple properties of the scene - this way it will only be updated once all new properties are set (updateScenes).
             * @return {Controller} Parent object for chaining.
             */
            this.updateScene = function (Scene, immediately) {
                if (_util.type.Array(Scene)) {
                    Scene.forEach(function (scene, index) {
                        Controller.updateScene(scene, immediately);
                    });
                } else {
                    if (immediately) {
                        Scene.update(true);
                    } else if (_updateScenesOnNextCycle !== true && Scene instanceof ScrollMagic.Scene) { // if _updateScenesOnNextCycle is true, all connected scenes are already scheduled for update
                        // prep array for next update cycle
                        _updateScenesOnNextCycle = _updateScenesOnNextCycle || [];
                        if (_updateScenesOnNextCycle.indexOf(Scene) == -1) {
                            _updateScenesOnNextCycle.push(Scene);
                        }
                        _updateScenesOnNextCycle = sortScenes(_updateScenesOnNextCycle); // sort
                        debounceUpdate();
                    }
                }
                return Controller;
            };
    
            /**
             * Updates the controller params and calls updateScene on every scene, that is attached to the controller.  
             * See `Controller.updateScene()` for more information about what this means.  
             * In most cases you will not need this function, as it is called constantly, whenever ScrollMagic detects a state change event, like resize or scroll.  
             * The only application for this method is when ScrollMagic fails to detect these events.  
             * One application is with some external scroll libraries (like iScroll) that move an internal container to a negative offset instead of actually scrolling. In this case the update on the controller needs to be called whenever the child container's position changes.
             * For this case there will also be the need to provide a custom function to calculate the correct scroll position. See `Controller.scrollPos()` for details.
             * @public
             * @example
             * // update the controller on next cycle (saves performance due to elimination of redundant updates)
             * controller.update();
             *
             * // update the controller immediately
             * controller.update(true);
             *
             * @param {boolean} [immediately=false] - If `true` the update will be instant, if `false` it will wait until next update cycle (better performance)
             * @return {Controller} Parent object for chaining.
             */
            this.update = function (immediately) {
                onChange({
                    type: "resize"
                }); // will update size and set _updateScenesOnNextCycle to true
                if (immediately) {
                    updateScenes();
                }
                return Controller;
            };
    
            /**
             * Scroll to a numeric scroll offset, a DOM element, the start of a scene or provide an alternate method for scrolling.  
             * For vertical controllers it will change the top scroll offset and for horizontal applications it will change the left offset.
             * @public
             *
             * @since 1.1.0
             * @example
             * // scroll to an offset of 100
             * controller.scrollTo(100);
             *
             * // scroll to a DOM element
             * controller.scrollTo("#anchor");
             *
             * // scroll to the beginning of a scene
             * var scene = new ScrollMagic.Scene({offset: 200});
             * controller.scrollTo(scene);
             *
             * // define a new scroll position modification function (jQuery animate instead of jump)
             * controller.scrollTo(function (newScrollPos) {
             *	$("html, body").animate({scrollTop: newScrollPos});
             * });
             * controller.scrollTo(100); // call as usual, but the new function will be used instead
             *
             * // define a new scroll function with an additional parameter
             * controller.scrollTo(function (newScrollPos, message) {
             *  console.log(message);
             *	$(this).animate({scrollTop: newScrollPos});
             * });
             * // call as usual, but supply an extra parameter to the defined custom function
             * controller.scrollTo(100, "my message");
             *
             * // define a new scroll function with an additional parameter containing multiple variables
             * controller.scrollTo(function (newScrollPos, options) {
             *  someGlobalVar = options.a + options.b;
             *	$(this).animate({scrollTop: newScrollPos});
             * });
             * // call as usual, but supply an extra parameter containing multiple options
             * controller.scrollTo(100, {a: 1, b: 2});
             *
             * // define a new scroll function with a callback supplied as an additional parameter
             * controller.scrollTo(function (newScrollPos, callback) {
             *	$(this).animate({scrollTop: newScrollPos}, 400, "swing", callback);
             * });
             * // call as usual, but supply an extra parameter, which is used as a callback in the previously defined custom scroll function
             * controller.scrollTo(100, function() {
             *	console.log("scroll has finished.");
             * });
             *
             * @param {mixed} scrollTarget - The supplied argument can be one of these types:
             * 1. `number` -> The container will scroll to this new scroll offset.
             * 2. `string` or `object` -> Can be a selector or a DOM object.  
             *  The container will scroll to the position of this element.
             * 3. `ScrollMagic Scene` -> The container will scroll to the start of this scene.
             * 4. `function` -> This function will be used for future scroll position modifications.  
             *  This provides a way for you to change the behaviour of scrolling and adding new behaviour like animation. The function receives the new scroll position as a parameter and a reference to the container element using `this`.  
             *  It may also optionally receive an optional additional parameter (see below)  
             *  _**NOTE:**  
             *  All other options will still work as expected, using the new function to scroll._
             * @param {mixed} [additionalParameter] - If a custom scroll function was defined (see above 4.), you may want to supply additional parameters to it, when calling it. You can do this using this parameter – see examples for details. Please note, that this parameter will have no effect, if you use the default scrolling function.
             * @returns {Controller} Parent object for chaining.
             */
            this.scrollTo = function (scrollTarget, additionalParameter) {
                if (_util.type.Number(scrollTarget)) { // excecute
                    setScrollPos.call(_options.container, scrollTarget, additionalParameter);
                } else if (scrollTarget instanceof ScrollMagic.Scene) { // scroll to scene
                    if (scrollTarget.controller() === Controller) { // check if the controller is associated with this scene
                        Controller.scrollTo(scrollTarget.scrollOffset(), additionalParameter);
                    } else {
                        log(2, "scrollTo(): The supplied scene does not belong to this controller. Scroll cancelled.", scrollTarget);
                    }
                } else if (_util.type.Function(scrollTarget)) { // assign new scroll function
                    setScrollPos = scrollTarget;
                } else { // scroll to element
                    var elem = _util.get.elements(scrollTarget)[0];
                    if (elem) {
                        // if parent is pin spacer, use spacer position instead so correct start position is returned for pinned elements.
                        while (elem.parentNode.hasAttribute(PIN_SPACER_ATTRIBUTE)) {
                            elem = elem.parentNode;
                        }
    
                        var
                        param = _options.vertical ? "top" : "left",
                            // which param is of interest ?
                            containerOffset = _util.get.offset(_options.container),
                            // container position is needed because element offset is returned in relation to document, not in relation to container.
                            elementOffset = _util.get.offset(elem);
    
                        if (!_isDocument) { // container is not the document root, so substract scroll Position to get correct trigger element position relative to scrollcontent
                            containerOffset[param] -= Controller.scrollPos();
                        }
    
                        Controller.scrollTo(elementOffset[param] - containerOffset[param], additionalParameter);
                    } else {
                        log(2, "scrollTo(): The supplied argument is invalid. Scroll cancelled.", scrollTarget);
                    }
                }
                return Controller;
            };
    
            /**
             * **Get** the current scrollPosition or **Set** a new method to calculate it.  
             * -> **GET**:
             * When used as a getter this function will return the current scroll position.  
             * To get a cached value use Controller.info("scrollPos"), which will be updated in the update cycle.  
             * For vertical controllers it will return the top scroll offset and for horizontal applications it will return the left offset.
             *
             * -> **SET**:
             * When used as a setter this method prodes a way to permanently overwrite the controller's scroll position calculation.  
             * A typical usecase is when the scroll position is not reflected by the containers scrollTop or scrollLeft values, but for example by the inner offset of a child container.  
             * Moving a child container inside a parent is a commonly used method for several scrolling frameworks, including iScroll.  
             * By providing an alternate calculation function you can make sure ScrollMagic receives the correct scroll position.  
             * Please also bear in mind that your function should return y values for vertical scrolls an x for horizontals.
             *
             * To change the current scroll position please use `Controller.scrollTo()`.
             * @public
             *
             * @example
             * // get the current scroll Position
             * var scrollPos = controller.scrollPos();
             *
             * // set a new scroll position calculation method
             * controller.scrollPos(function () {
             *	return this.info("vertical") ? -mychildcontainer.y : -mychildcontainer.x
             * });
             *
             * @param {function} [scrollPosMethod] - The function to be used for the scroll position calculation of the container.
             * @returns {(number|Controller)} Current scroll position or parent object for chaining.
             */
            this.scrollPos = function (scrollPosMethod) {
                if (!arguments.length) { // get
                    return getScrollPos.call(Controller);
                } else { // set
                    if (_util.type.Function(scrollPosMethod)) {
                        getScrollPos = scrollPosMethod;
                    } else {
                        log(2, "Provided value for method 'scrollPos' is not a function. To change the current scroll position use 'scrollTo()'.");
                    }
                }
                return Controller;
            };
    
            /**
             * **Get** all infos or one in particular about the controller.
             * @public
             * @example
             * // returns the current scroll position (number)
             * var scrollPos = controller.info("scrollPos");
             *
             * // returns all infos as an object
             * var infos = controller.info();
             *
             * @param {string} [about] - If passed only this info will be returned instead of an object containing all.  
             Valid options are:
             ** `"size"` => the current viewport size of the container
             ** `"vertical"` => true if vertical scrolling, otherwise false
             ** `"scrollPos"` => the current scroll position
             ** `"scrollDirection"` => the last known direction of the scroll
             ** `"container"` => the container element
             ** `"isDocument"` => true if container element is the document.
             * @returns {(mixed|object)} The requested info(s).
             */
            this.info = function (about) {
                var values = {
                    size: _viewPortSize,
                    // contains height or width (in regard to orientation);
                    vertical: _options.vertical,
                    scrollPos: _scrollPos,
                    scrollDirection: _scrollDirection,
                    container: _options.container,
                    isDocument: _isDocument
                };
                if (!arguments.length) { // get all as an object
                    return values;
                } else if (values[about] !== undefined) {
                    return values[about];
                } else {
                    log(1, "ERROR: option \"" + about + "\" is not available");
                    return;
                }
            };
    
            /**
             * **Get** or **Set** the current loglevel option value.
             * @public
             *
             * @example
             * // get the current value
             * var loglevel = controller.loglevel();
             *
             * // set a new value
             * controller.loglevel(3);
             *
             * @param {number} [newLoglevel] - The new loglevel setting of the Controller. `[0-3]`
             * @returns {(number|Controller)} Current loglevel or parent object for chaining.
             */
            this.loglevel = function (newLoglevel) {
                if (!arguments.length) { // get
                    return _options.loglevel;
                } else if (_options.loglevel != newLoglevel) { // set
                    _options.loglevel = newLoglevel;
                }
                return Controller;
            };
    
            /**
             * **Get** or **Set** the current enabled state of the controller.  
             * This can be used to disable all Scenes connected to the controller without destroying or removing them.
             * @public
             *
             * @example
             * // get the current value
             * var enabled = controller.enabled();
             *
             * // disable the controller
             * controller.enabled(false);
             *
             * @param {boolean} [newState] - The new enabled state of the controller `true` or `false`.
             * @returns {(boolean|Controller)} Current enabled state or parent object for chaining.
             */
            this.enabled = function (newState) {
                if (!arguments.length) { // get
                    return _enabled;
                } else if (_enabled != newState) { // set
                    _enabled = !! newState;
                    Controller.updateScene(_sceneObjects, true);
                }
                return Controller;
            };
    
            /**
             * Destroy the Controller, all Scenes and everything.
             * @public
             *
             * @example
             * // without resetting the scenes
             * controller = controller.destroy();
             *
             * // with scene reset
             * controller = controller.destroy(true);
             *
             * @param {boolean} [resetScenes=false] - If `true` the pins and tweens (if existent) of all scenes will be reset.
             * @returns {null} Null to unset handler variables.
             */
            this.destroy = function (resetScenes) {
                window.clearTimeout(_refreshTimeout);
                var i = _sceneObjects.length;
                while (i--) {
                    _sceneObjects[i].destroy(resetScenes);
                }
                _options.container.removeEventListener("resize", onChange);
                _options.container.removeEventListener("scroll", onChange);
                _util.cAF(_updateTimeout);
                log(3, "destroyed " + NAMESPACE + " (reset: " + (resetScenes ? "true" : "false") + ")");
                return null;
            };
    
            // INIT
            construct();
            return Controller;
        };
    
        // store pagewide controller options
        var CONTROLLER_OPTIONS = {
            defaults: {
                container: window,
                vertical: true,
                globalSceneOptions: {},
                loglevel: 2,
                refreshInterval: 100
            }
        };
    /*
     * method used to add an option to ScrollMagic Scenes.
     */
        ScrollMagic.Controller.addOption = function (name, defaultValue) {
            CONTROLLER_OPTIONS.defaults[name] = defaultValue;
        };
        // instance extension function for plugins
        ScrollMagic.Controller.extend = function (extension) {
            var oldClass = this;
            ScrollMagic.Controller = function () {
                oldClass.apply(this, arguments);
                this.$super = _util.extend({}, this); // copy parent state
                return extension.apply(this, arguments) || this;
            };
            _util.extend(ScrollMagic.Controller, oldClass); // copy properties
            ScrollMagic.Controller.prototype = oldClass.prototype; // copy prototype
            ScrollMagic.Controller.prototype.constructor = ScrollMagic.Controller; // restore constructor
        };
    
    
        /**
         * A Scene defines where the controller should react and how.
         *
         * @class
         *
         * @example
         * // create a standard scene and add it to a controller
         * new ScrollMagic.Scene()
         *		.addTo(controller);
         *
         * // create a scene with custom options and assign a handler to it.
         * var scene = new ScrollMagic.Scene({
         * 		duration: 100,
         *		offset: 200,
         *		triggerHook: "onEnter",
         *		reverse: false
         * });
         *
         * @param {object} [options] - Options for the Scene. The options can be updated at any time.  
         Instead of setting the options for each scene individually you can also set them globally in the controller as the controllers `globalSceneOptions` option. The object accepts the same properties as the ones below.  
         When a scene is added to the controller the options defined using the Scene constructor will be overwritten by those set in `globalSceneOptions`.
         * @param {(number|function)} [options.duration=0] - The duration of the scene. 
         If `0` tweens will auto-play when reaching the scene start point, pins will be pinned indefinetly starting at the start position.  
         A function retuning the duration value is also supported. Please see `Scene.duration()` for details.
         * @param {number} [options.offset=0] - Offset Value for the Trigger Position. If no triggerElement is defined this will be the scroll distance from the start of the page, after which the scene will start.
         * @param {(string|object)} [options.triggerElement=null] - Selector or DOM object that defines the start of the scene. If undefined the scene will start right at the start of the page (unless an offset is set).
         * @param {(number|string)} [options.triggerHook="onCenter"] - Can be a number between 0 and 1 defining the position of the trigger Hook in relation to the viewport.  
         Can also be defined using a string:
         ** `"onEnter"` => `1`
         ** `"onCenter"` => `0.5`
         ** `"onLeave"` => `0`
         * @param {boolean} [options.reverse=true] - Should the scene reverse, when scrolling up?
         * @param {number} [options.loglevel=2] - Loglevel for debugging. Note that logging is disabled in the minified version of ScrollMagic.
         ** `0` => silent
         ** `1` => errors
         ** `2` => errors, warnings
         ** `3` => errors, warnings, debuginfo
         * 
         */
        ScrollMagic.Scene = function (options) {
    
    /*
         * ----------------------------------------------------------------
         * settings
         * ----------------------------------------------------------------
         */
    
            var
            NAMESPACE = 'ScrollMagic.Scene',
                SCENE_STATE_BEFORE = 'BEFORE',
                SCENE_STATE_DURING = 'DURING',
                SCENE_STATE_AFTER = 'AFTER',
                DEFAULT_OPTIONS = SCENE_OPTIONS.defaults;
    
    /*
         * ----------------------------------------------------------------
         * private vars
         * ----------------------------------------------------------------
         */
    
            var
            Scene = this,
                _options = _util.extend({}, DEFAULT_OPTIONS, options),
                _state = SCENE_STATE_BEFORE,
                _progress = 0,
                _scrollOffset = {
                    start: 0,
                    end: 0
                },
                // reflects the controllers's scroll position for the start and end of the scene respectively
                _triggerPos = 0,
                _enabled = true,
                _durationUpdateMethod, _controller;
    
            /**
             * Internal constructor function of the ScrollMagic Scene
             * @private
             */
            var construct = function () {
                for (var key in _options) { // check supplied options
                    if (!DEFAULT_OPTIONS.hasOwnProperty(key)) {
                        log(2, "WARNING: Unknown option \"" + key + "\"");
                        delete _options[key];
                    }
                }
                // add getters/setters for all possible options
                for (var optionName in DEFAULT_OPTIONS) {
                    addSceneOption(optionName);
                }
                // validate all options
                validateOption();
            };
    
    /*
     * ----------------------------------------------------------------
     * Event Management
     * ----------------------------------------------------------------
     */
    
            var _listeners = {};
            /**
             * Scene start event.  
             * Fires whenever the scroll position its the starting point of the scene.  
             * It will also fire when scrolling back up going over the start position of the scene. If you want something to happen only when scrolling down/right, use the scrollDirection parameter passed to the callback.
             *
             * For details on this event and the order in which it is fired, please review the {@link Scene.progress} method.
             *
             * @event ScrollMagic.Scene#start
             *
             * @example
             * scene.on("start", function (event) {
             * 	console.log("Hit start point of scene.");
             * });
             *
             * @property {object} event - The event Object passed to each callback
             * @property {string} event.type - The name of the event
             * @property {Scene} event.target - The Scene object that triggered this event
             * @property {number} event.progress - Reflects the current progress of the scene
             * @property {string} event.state - The current state of the scene `"BEFORE"` or `"DURING"`
             * @property {string} event.scrollDirection - Indicates which way we are scrolling `"PAUSED"`, `"FORWARD"` or `"REVERSE"`
             */
            /**
             * Scene end event.  
             * Fires whenever the scroll position its the ending point of the scene.  
             * It will also fire when scrolling back up from after the scene and going over its end position. If you want something to happen only when scrolling down/right, use the scrollDirection parameter passed to the callback.
             *
             * For details on this event and the order in which it is fired, please review the {@link Scene.progress} method.
             *
             * @event ScrollMagic.Scene#end
             *
             * @example
             * scene.on("end", function (event) {
             * 	console.log("Hit end point of scene.");
             * });
             *
             * @property {object} event - The event Object passed to each callback
             * @property {string} event.type - The name of the event
             * @property {Scene} event.target - The Scene object that triggered this event
             * @property {number} event.progress - Reflects the current progress of the scene
             * @property {string} event.state - The current state of the scene `"DURING"` or `"AFTER"`
             * @property {string} event.scrollDirection - Indicates which way we are scrolling `"PAUSED"`, `"FORWARD"` or `"REVERSE"`
             */
            /**
             * Scene enter event.  
             * Fires whenever the scene enters the "DURING" state.  
             * Keep in mind that it doesn't matter if the scene plays forward or backward: This event always fires when the scene enters its active scroll timeframe, regardless of the scroll-direction.
             *
             * For details on this event and the order in which it is fired, please review the {@link Scene.progress} method.
             *
             * @event ScrollMagic.Scene#enter
             *
             * @example
             * scene.on("enter", function (event) {
             * 	console.log("Scene entered.");
             * });
             *
             * @property {object} event - The event Object passed to each callback
             * @property {string} event.type - The name of the event
             * @property {Scene} event.target - The Scene object that triggered this event
             * @property {number} event.progress - Reflects the current progress of the scene
             * @property {string} event.state - The current state of the scene - always `"DURING"`
             * @property {string} event.scrollDirection - Indicates which way we are scrolling `"PAUSED"`, `"FORWARD"` or `"REVERSE"`
             */
            /**
             * Scene leave event.  
             * Fires whenever the scene's state goes from "DURING" to either "BEFORE" or "AFTER".  
             * Keep in mind that it doesn't matter if the scene plays forward or backward: This event always fires when the scene leaves its active scroll timeframe, regardless of the scroll-direction.
             *
             * For details on this event and the order in which it is fired, please review the {@link Scene.progress} method.
             *
             * @event ScrollMagic.Scene#leave
             *
             * @example
             * scene.on("leave", function (event) {
             * 	console.log("Scene left.");
             * });
             *
             * @property {object} event - The event Object passed to each callback
             * @property {string} event.type - The name of the event
             * @property {Scene} event.target - The Scene object that triggered this event
             * @property {number} event.progress - Reflects the current progress of the scene
             * @property {string} event.state - The current state of the scene `"BEFORE"` or `"AFTER"`
             * @property {string} event.scrollDirection - Indicates which way we are scrolling `"PAUSED"`, `"FORWARD"` or `"REVERSE"`
             */
            /**
             * Scene update event.  
             * Fires whenever the scene is updated (but not necessarily changes the progress).
             *
             * @event ScrollMagic.Scene#update
             *
             * @example
             * scene.on("update", function (event) {
             * 	console.log("Scene updated.");
             * });
             *
             * @property {object} event - The event Object passed to each callback
             * @property {string} event.type - The name of the event
             * @property {Scene} event.target - The Scene object that triggered this event
             * @property {number} event.startPos - The starting position of the scene (in relation to the conainer)
             * @property {number} event.endPos - The ending position of the scene (in relation to the conainer)
             * @property {number} event.scrollPos - The current scroll position of the container
             */
            /**
             * Scene progress event.  
             * Fires whenever the progress of the scene changes.
             *
             * For details on this event and the order in which it is fired, please review the {@link Scene.progress} method.
             *
             * @event ScrollMagic.Scene#progress
             *
             * @example
             * scene.on("progress", function (event) {
             * 	console.log("Scene progress changed to " + event.progress);
             * });
             *
             * @property {object} event - The event Object passed to each callback
             * @property {string} event.type - The name of the event
             * @property {Scene} event.target - The Scene object that triggered this event
             * @property {number} event.progress - Reflects the current progress of the scene
             * @property {string} event.state - The current state of the scene `"BEFORE"`, `"DURING"` or `"AFTER"`
             * @property {string} event.scrollDirection - Indicates which way we are scrolling `"PAUSED"`, `"FORWARD"` or `"REVERSE"`
             */
            /**
             * Scene change event.  
             * Fires whenvever a property of the scene is changed.
             *
             * @event ScrollMagic.Scene#change
             *
             * @example
             * scene.on("change", function (event) {
             * 	console.log("Scene Property \"" + event.what + "\" changed to " + event.newval);
             * });
             *
             * @property {object} event - The event Object passed to each callback
             * @property {string} event.type - The name of the event
             * @property {Scene} event.target - The Scene object that triggered this event
             * @property {string} event.what - Indicates what value has been changed
             * @property {mixed} event.newval - The new value of the changed property
             */
            /**
             * Scene shift event.  
             * Fires whenvever the start or end **scroll offset** of the scene change.
             * This happens explicitely, when one of these values change: `offset`, `duration` or `triggerHook`.
             * It will fire implicitly when the `triggerElement` changes, if the new element has a different position (most cases).
             * It will also fire implicitly when the size of the container changes and the triggerHook is anything other than `onLeave`.
             *
             * @event ScrollMagic.Scene#shift
             * @since 1.1.0
             *
             * @example
             * scene.on("shift", function (event) {
             * 	console.log("Scene moved, because the " + event.reason + " has changed.)");
             * });
             *
             * @property {object} event - The event Object passed to each callback
             * @property {string} event.type - The name of the event
             * @property {Scene} event.target - The Scene object that triggered this event
             * @property {string} event.reason - Indicates why the scene has shifted
             */
            /**
             * Scene destroy event.  
             * Fires whenvever the scene is destroyed.
             * This can be used to tidy up custom behaviour used in events.
             *
             * @event ScrollMagic.Scene#destroy
             * @since 1.1.0
             *
             * @example
             * scene.on("enter", function (event) {
             *        // add custom action
             *        $("#my-elem").left("200");
             *      })
             *      .on("destroy", function (event) {
             *        // reset my element to start position
             *        if (event.reset) {
             *          $("#my-elem").left("0");
             *        }
             *      });
             *
             * @property {object} event - The event Object passed to each callback
             * @property {string} event.type - The name of the event
             * @property {Scene} event.target - The Scene object that triggered this event
             * @property {boolean} event.reset - Indicates if the destroy method was called with reset `true` or `false`.
             */
            /**
             * Scene add event.  
             * Fires when the scene is added to a controller.
             * This is mostly used by plugins to know that change might be due.
             *
             * @event ScrollMagic.Scene#add
             * @since 2.0.0
             *
             * @example
             * scene.on("add", function (event) {
             * 	console.log('Scene was added to a new controller.');
             * });
             *
             * @property {object} event - The event Object passed to each callback
             * @property {string} event.type - The name of the event
             * @property {Scene} event.target - The Scene object that triggered this event
             * @property {boolean} event.controller - The controller object the scene was added to.
             */
            /**
             * Scene remove event.  
             * Fires when the scene is removed from a controller.
             * This is mostly used by plugins to know that change might be due.
             *
             * @event ScrollMagic.Scene#remove
             * @since 2.0.0
             *
             * @example
             * scene.on("remove", function (event) {
             * 	console.log('Scene was removed from its controller.');
             * });
             *
             * @property {object} event - The event Object passed to each callback
             * @property {string} event.type - The name of the event
             * @property {Scene} event.target - The Scene object that triggered this event
             */
    
            /**
             * Add one ore more event listener.  
             * The callback function will be fired at the respective event, and an object containing relevant data will be passed to the callback.
             * @method ScrollMagic.Scene#on
             *
             * @example
             * function callback (event) {
             * 		console.log("Event fired! (" + event.type + ")");
             * }
             * // add listeners
             * scene.on("change update progress start end enter leave", callback);
             *
             * @param {string} names - The name or names of the event the callback should be attached to.
             * @param {function} callback - A function that should be executed, when the event is dispatched. An event object will be passed to the callback.
             * @returns {Scene} Parent object for chaining.
             */
            this.on = function (names, callback) {
                if (_util.type.Function(callback)) {
                    names = names.trim().split(' ');
                    names.forEach(function (fullname) {
                        var
                        nameparts = fullname.split('.'),
                            eventname = nameparts[0],
                            namespace = nameparts[1];
                        if (eventname != "*") { // disallow wildcards
                            if (!_listeners[eventname]) {
                                _listeners[eventname] = [];
                            }
                            _listeners[eventname].push({
                                namespace: namespace || '',
                                callback: callback
                            });
                        }
                    });
                } else {
                    log(1, "ERROR when calling '.on()': Supplied callback for '" + names + "' is not a valid function!");
                }
                return Scene;
            };
    
            /**
             * Remove one or more event listener.
             * @method ScrollMagic.Scene#off
             *
             * @example
             * function callback (event) {
             * 		console.log("Event fired! (" + event.type + ")");
             * }
             * // add listeners
             * scene.on("change update", callback);
             * // remove listeners
             * scene.off("change update", callback);
             *
             * @param {string} names - The name or names of the event that should be removed.
             * @param {function} [callback] - A specific callback function that should be removed. If none is passed all callbacks to the event listener will be removed.
             * @returns {Scene} Parent object for chaining.
             */
            this.off = function (names, callback) {
                if (!names) {
                    log(1, "ERROR: Invalid event name supplied.");
                    return Scene;
                }
                names = names.trim().split(' ');
                names.forEach(function (fullname, key) {
                    var
                    nameparts = fullname.split('.'),
                        eventname = nameparts[0],
                        namespace = nameparts[1] || '',
                        removeList = eventname === '*' ? Object.keys(_listeners) : [eventname];
                    removeList.forEach(function (remove) {
                        var
                        list = _listeners[remove] || [],
                            i = list.length;
                        while (i--) {
                            var listener = list[i];
                            if (listener && (namespace === listener.namespace || namespace === '*') && (!callback || callback == listener.callback)) {
                                list.splice(i, 1);
                            }
                        }
                        if (!list.length) {
                            delete _listeners[remove];
                        }
                    });
                });
                return Scene;
            };
    
            /**
             * Trigger an event.
             * @method ScrollMagic.Scene#trigger
             *
             * @example
             * this.trigger("change");
             *
             * @param {string} name - The name of the event that should be triggered.
             * @param {object} [vars] - An object containing info that should be passed to the callback.
             * @returns {Scene} Parent object for chaining.
             */
            this.trigger = function (name, vars) {
                if (name) {
                    var
                    nameparts = name.trim().split('.'),
                        eventname = nameparts[0],
                        namespace = nameparts[1],
                        listeners = _listeners[eventname];
                    log(3, 'event fired:', eventname, vars ? "->" : '', vars || '');
                    if (listeners) {
                        listeners.forEach(function (listener, key) {
                            if (!namespace || namespace === listener.namespace) {
                                listener.callback.call(Scene, new ScrollMagic.Event(eventname, listener.namespace, Scene, vars));
                            }
                        });
                    }
                } else {
                    log(1, "ERROR: Invalid event name supplied.");
                }
                return Scene;
            };
    
            // set event listeners
            Scene.on("change.internal", function (e) {
                if (e.what !== "loglevel" && e.what !== "tweenChanges") { // no need for a scene update scene with these options...
                    if (e.what === "triggerElement") {
                        updateTriggerElementPosition();
                    } else if (e.what === "reverse") { // the only property left that may have an impact on the current scene state. Everything else is handled by the shift event.
                        Scene.update();
                    }
                }
            }).on("shift.internal", function (e) {
                updateScrollOffset();
                Scene.update(); // update scene to reflect new position
            });
    
            /**
             * Send a debug message to the console.
             * @private
             * but provided publicly with _log for plugins
             *
             * @param {number} loglevel - The loglevel required to initiate output for the message.
             * @param {...mixed} output - One or more variables that should be passed to the console.
             */
            var log = this._log = function (loglevel, output) {
                if (_options.loglevel >= loglevel) {
                    Array.prototype.splice.call(arguments, 1, 0, "(" + NAMESPACE + ") ->");
                    _util.log.apply(window, arguments);
                }
            };
    
            /**
             * Add the scene to a controller.  
             * This is the equivalent to `Controller.addScene(scene)`.
             * @method ScrollMagic.Scene#addTo
             *
             * @example
             * // add a scene to a ScrollMagic Controller
             * scene.addTo(controller);
             *
             * @param {ScrollMagic.Controller} controller - The controller to which the scene should be added.
             * @returns {Scene} Parent object for chaining.
             */
            this.addTo = function (controller) {
                if (!(controller instanceof ScrollMagic.Controller)) {
                    log(1, "ERROR: supplied argument of 'addTo()' is not a valid ScrollMagic Controller");
                } else if (_controller != controller) {
                    // new controller
                    if (_controller) { // was associated to a different controller before, so remove it...
                        _controller.removeScene(Scene);
                    }
                    _controller = controller;
                    validateOption();
                    updateDuration(true);
                    updateTriggerElementPosition(true);
                    updateScrollOffset();
                    _controller.info("container").addEventListener('resize', onContainerResize);
                    controller.addScene(Scene);
                    Scene.trigger("add", {
                        controller: _controller
                    });
                    log(3, "added " + NAMESPACE + " to controller");
                    Scene.update();
                }
                return Scene;
            };
    
            /**
             * **Get** or **Set** the current enabled state of the scene.  
             * This can be used to disable this scene without removing or destroying it.
             * @method ScrollMagic.Scene#enabled
             *
             * @example
             * // get the current value
             * var enabled = scene.enabled();
             *
             * // disable the scene
             * scene.enabled(false);
             *
             * @param {boolean} [newState] - The new enabled state of the scene `true` or `false`.
             * @returns {(boolean|Scene)} Current enabled state or parent object for chaining.
             */
            this.enabled = function (newState) {
                if (!arguments.length) { // get
                    return _enabled;
                } else if (_enabled != newState) { // set
                    _enabled = !! newState;
                    Scene.update(true);
                }
                return Scene;
            };
    
            /**
             * Remove the scene from the controller.  
             * This is the equivalent to `Controller.removeScene(scene)`.
             * The scene will not be updated anymore until you readd it to a controller.
             * To remove the pin or the tween you need to call removeTween() or removePin() respectively.
             * @method ScrollMagic.Scene#remove
             * @example
             * // remove the scene from its controller
             * scene.remove();
             *
             * @returns {Scene} Parent object for chaining.
             */
            this.remove = function () {
                if (_controller) {
                    _controller.info("container").removeEventListener('resize', onContainerResize);
                    var tmpParent = _controller;
                    _controller = undefined;
                    tmpParent.removeScene(Scene);
                    Scene.trigger("remove");
                    log(3, "removed " + NAMESPACE + " from controller");
                }
                return Scene;
            };
    
            /**
             * Destroy the scene and everything.
             * @method ScrollMagic.Scene#destroy
             * @example
             * // destroy the scene without resetting the pin and tween to their initial positions
             * scene = scene.destroy();
             *
             * // destroy the scene and reset the pin and tween
             * scene = scene.destroy(true);
             *
             * @param {boolean} [reset=false] - If `true` the pin and tween (if existent) will be reset.
             * @returns {null} Null to unset handler variables.
             */
            this.destroy = function (reset) {
                Scene.trigger("destroy", {
                    reset: reset
                });
                Scene.remove();
                Scene.off("*.*");
                log(3, "destroyed " + NAMESPACE + " (reset: " + (reset ? "true" : "false") + ")");
                return null;
            };
    
    
            /**
             * Updates the Scene to reflect the current state.  
             * This is the equivalent to `Controller.updateScene(scene, immediately)`.  
             * The update method calculates the scene's start and end position (based on the trigger element, trigger hook, duration and offset) and checks it against the current scroll position of the container.  
             * It then updates the current scene state accordingly (or does nothing, if the state is already correct) – Pins will be set to their correct position and tweens will be updated to their correct progress.
             * This means an update doesn't necessarily result in a progress change. The `progress` event will be fired if the progress has indeed changed between this update and the last.  
             * _**NOTE:** This method gets called constantly whenever ScrollMagic detects a change. The only application for you is if you change something outside of the realm of ScrollMagic, like moving the trigger or changing tween parameters._
             * @method ScrollMagic.Scene#update
             * @example
             * // update the scene on next tick
             * scene.update();
             *
             * // update the scene immediately
             * scene.update(true);
             *
             * @fires Scene.update
             *
             * @param {boolean} [immediately=false] - If `true` the update will be instant, if `false` it will wait until next update cycle (better performance).
             * @returns {Scene} Parent object for chaining.
             */
            this.update = function (immediately) {
                if (_controller) {
                    if (immediately) {
                        if (_controller.enabled() && _enabled) {
                            var
                            scrollPos = _controller.info("scrollPos"),
                                newProgress;
    
                            if (_options.duration > 0) {
                                newProgress = (scrollPos - _scrollOffset.start) / (_scrollOffset.end - _scrollOffset.start);
                            } else {
                                newProgress = scrollPos >= _scrollOffset.start ? 1 : 0;
                            }
    
                            Scene.trigger("update", {
                                startPos: _scrollOffset.start,
                                endPos: _scrollOffset.end,
                                scrollPos: scrollPos
                            });
    
                            Scene.progress(newProgress);
                        } else if (_pin && _state === SCENE_STATE_DURING) {
                            updatePinState(true); // unpin in position
                        }
                    } else {
                        _controller.updateScene(Scene, false);
                    }
                }
                return Scene;
            };
    
            /**
             * Updates dynamic scene variables like the trigger element position or the duration.
             * This method is automatically called in regular intervals from the controller. See {@link ScrollMagic.Controller} option `refreshInterval`.
             * 
             * You can call it to minimize lag, for example when you intentionally change the position of the triggerElement.
             * If you don't it will simply be updated in the next refresh interval of the container, which is usually sufficient.
             *
             * @method ScrollMagic.Scene#refresh
             * @since 1.1.0
             * @example
             * scene = new ScrollMagic.Scene({triggerElement: "#trigger"});
             * 
             * // change the position of the trigger
             * $("#trigger").css("top", 500);
             * // immediately let the scene know of this change
             * scene.refresh();
             *
             * @fires {@link Scene.shift}, if the trigger element position or the duration changed
             * @fires {@link Scene.change}, if the duration changed
             *
             * @returns {Scene} Parent object for chaining.
             */
            this.refresh = function () {
                updateDuration();
                updateTriggerElementPosition();
                // update trigger element position
                return Scene;
            };
    
            /**
             * **Get** or **Set** the scene's progress.  
             * Usually it shouldn't be necessary to use this as a setter, as it is set automatically by scene.update().  
             * The order in which the events are fired depends on the duration of the scene:
             *  1. Scenes with `duration == 0`:  
             *  Scenes that have no duration by definition have no ending. Thus the `end` event will never be fired.  
             *  When the trigger position of the scene is passed the events are always fired in this order:  
             *  `enter`, `start`, `progress` when scrolling forward  
             *  and  
             *  `progress`, `start`, `leave` when scrolling in reverse
             *  2. Scenes with `duration > 0`:  
             *  Scenes with a set duration have a defined start and end point.  
             *  When scrolling past the start position of the scene it will fire these events in this order:  
             *  `enter`, `start`, `progress`  
             *  When continuing to scroll and passing the end point it will fire these events:  
             *  `progress`, `end`, `leave`  
             *  When reversing through the end point these events are fired:  
             *  `enter`, `end`, `progress`  
             *  And when continuing to scroll past the start position in reverse it will fire:  
             *  `progress`, `start`, `leave`  
             *  In between start and end the `progress` event will be called constantly, whenever the progress changes.
             * 
             * In short:  
             * `enter` events will always trigger **before** the progress update and `leave` envents will trigger **after** the progress update.  
             * `start` and `end` will always trigger at their respective position.
             * 
             * Please review the event descriptions for details on the events and the event object that is passed to the callback.
             * 
             * @method ScrollMagic.Scene#progress
             * @example
             * // get the current scene progress
             * var progress = scene.progress();
             *
             * // set new scene progress
             * scene.progress(0.3);
             *
             * @fires {@link Scene.enter}, when used as setter
             * @fires {@link Scene.start}, when used as setter
             * @fires {@link Scene.progress}, when used as setter
             * @fires {@link Scene.end}, when used as setter
             * @fires {@link Scene.leave}, when used as setter
             *
             * @param {number} [progress] - The new progress value of the scene `[0-1]`.
             * @returns {number} `get` -  Current scene progress.
             * @returns {Scene} `set` -  Parent object for chaining.
             */
            this.progress = function (progress) {
                if (!arguments.length) { // get
                    return _progress;
                } else { // set
                    var
                    doUpdate = false,
                        oldState = _state,
                        scrollDirection = _controller ? _controller.info("scrollDirection") : 'PAUSED',
                        reverseOrForward = _options.reverse || progress >= _progress;
                    if (_options.duration === 0) {
                        // zero duration scenes
                        doUpdate = _progress != progress;
                        _progress = progress < 1 && reverseOrForward ? 0 : 1;
                        _state = _progress === 0 ? SCENE_STATE_BEFORE : SCENE_STATE_DURING;
                    } else {
                        // scenes with start and end
                        if (progress < 0 && _state !== SCENE_STATE_BEFORE && reverseOrForward) {
                            // go back to initial state
                            _progress = 0;
                            _state = SCENE_STATE_BEFORE;
                            doUpdate = true;
                        } else if (progress >= 0 && progress < 1 && reverseOrForward) {
                            _progress = progress;
                            _state = SCENE_STATE_DURING;
                            doUpdate = true;
                        } else if (progress >= 1 && _state !== SCENE_STATE_AFTER) {
                            _progress = 1;
                            _state = SCENE_STATE_AFTER;
                            doUpdate = true;
                        } else if (_state === SCENE_STATE_DURING && !reverseOrForward) {
                            updatePinState(); // in case we scrolled backwards mid-scene and reverse is disabled => update the pin position, so it doesn't move back as well.
                        }
                    }
                    if (doUpdate) {
                        // fire events
                        var
                        eventVars = {
                            progress: _progress,
                            state: _state,
                            scrollDirection: scrollDirection
                        },
                            stateChanged = _state != oldState;
    
                        var trigger = function (eventName) { // tmp helper to simplify code
                            Scene.trigger(eventName, eventVars);
                        };
    
                        if (stateChanged) { // enter events
                            if (oldState !== SCENE_STATE_DURING) {
                                trigger("enter");
                                trigger(oldState === SCENE_STATE_BEFORE ? "start" : "end");
                            }
                        }
                        trigger("progress");
                        if (stateChanged) { // leave events
                            if (_state !== SCENE_STATE_DURING) {
                                trigger(_state === SCENE_STATE_BEFORE ? "start" : "end");
                                trigger("leave");
                            }
                        }
                    }
    
                    return Scene;
                }
            };
    
    
            /**
             * Update the start and end scrollOffset of the container.
             * The positions reflect what the controller's scroll position will be at the start and end respectively.
             * Is called, when:
             *   - Scene event "change" is called with: offset, triggerHook, duration 
             *   - scroll container event "resize" is called
             *   - the position of the triggerElement changes
             *   - the controller changes -> addTo()
             * @private
             */
            var updateScrollOffset = function () {
                _scrollOffset = {
                    start: _triggerPos + _options.offset
                };
                if (_controller && _options.triggerElement) {
                    // take away triggerHook portion to get relative to top
                    _scrollOffset.start -= _controller.info("size") * _options.triggerHook;
                }
                _scrollOffset.end = _scrollOffset.start + _options.duration;
            };
    
            /**
             * Updates the duration if set to a dynamic function.
             * This method is called when the scene is added to a controller and in regular intervals from the controller through scene.refresh().
             * 
             * @fires {@link Scene.change}, if the duration changed
             * @fires {@link Scene.shift}, if the duration changed
             *
             * @param {boolean} [suppressEvents=false] - If true the shift event will be suppressed.
             * @private
             */
            var updateDuration = function (suppressEvents) {
                // update duration
                if (_durationUpdateMethod) {
                    var varname = "duration";
                    if (changeOption(varname, _durationUpdateMethod.call(Scene)) && !suppressEvents) { // set
                        Scene.trigger("change", {
                            what: varname,
                            newval: _options[varname]
                        });
                        Scene.trigger("shift", {
                            reason: varname
                        });
                    }
                }
            };
    
            /**
             * Updates the position of the triggerElement, if present.
             * This method is called ...
             *  - ... when the triggerElement is changed
             *  - ... when the scene is added to a (new) controller
             *  - ... in regular intervals from the controller through scene.refresh().
             * 
             * @fires {@link Scene.shift}, if the position changed
             *
             * @param {boolean} [suppressEvents=false] - If true the shift event will be suppressed.
             * @private
             */
            var updateTriggerElementPosition = function (suppressEvents) {
                var
                elementPos = 0,
                    telem = _options.triggerElement;
                if (_controller && telem) {
                    var
                    controllerInfo = _controller.info(),
                        containerOffset = _util.get.offset(controllerInfo.container),
                        // container position is needed because element offset is returned in relation to document, not in relation to container.
                        param = controllerInfo.vertical ? "top" : "left"; // which param is of interest ?
                    // if parent is spacer, use spacer position instead so correct start position is returned for pinned elements.
                    while (telem.parentNode.hasAttribute(PIN_SPACER_ATTRIBUTE)) {
                        telem = telem.parentNode;
                    }
    
                    var elementOffset = _util.get.offset(telem);
    
                    if (!controllerInfo.isDocument) { // container is not the document root, so substract scroll Position to get correct trigger element position relative to scrollcontent
                        containerOffset[param] -= _controller.scrollPos();
                    }
    
                    elementPos = elementOffset[param] - containerOffset[param];
                }
                var changed = elementPos != _triggerPos;
                _triggerPos = elementPos;
                if (changed && !suppressEvents) {
                    Scene.trigger("shift", {
                        reason: "triggerElementPosition"
                    });
                }
            };
    
            /**
             * Trigger a shift event, when the container is resized and the triggerHook is > 1.
             * @private
             */
            var onContainerResize = function (e) {
                if (_options.triggerHook > 0) {
                    Scene.trigger("shift", {
                        reason: "containerResize"
                    });
                }
            };
    
            var _validate = _util.extend(SCENE_OPTIONS.validate, {
                // validation for duration handled internally for reference to private var _durationMethod
                duration: function (val) {
                    if (_util.type.String(val) && val.match(/^(\.|\d)*\d+%$/)) {
                        // percentage value
                        var perc = parseFloat(val) / 100;
                        val = function () {
                            return _controller ? _controller.info("size") * perc : 0;
                        };
                    }
                    if (_util.type.Function(val)) {
                        // function
                        _durationUpdateMethod = val;
                        try {
                            val = parseFloat(_durationUpdateMethod());
                        } catch (e) {
                            val = -1; // will cause error below
                        }
                    }
                    // val has to be float
                    val = parseFloat(val);
                    if (!_util.type.Number(val) || val < 0) {
                        if (_durationUpdateMethod) {
                            _durationUpdateMethod = undefined;
                            throw ["Invalid return value of supplied function for option \"duration\":", val];
                        } else {
                            throw ["Invalid value for option \"duration\":", val];
                        }
                    }
                    return val;
                }
            });
    
            /**
             * Checks the validity of a specific or all options and reset to default if neccessary.
             * @private
             */
            var validateOption = function (check) {
                check = arguments.length ? [check] : Object.keys(_validate);
                check.forEach(function (optionName, key) {
                    var value;
                    if (_validate[optionName]) { // there is a validation method for this option
                        try { // validate value
                            value = _validate[optionName](_options[optionName]);
                        } catch (e) { // validation failed -> reset to default
                            value = DEFAULT_OPTIONS[optionName];
                            var logMSG = _util.type.String(e) ? [e] : e;
                            if (_util.type.Array(logMSG)) {
                                logMSG[0] = "ERROR: " + logMSG[0];
                                logMSG.unshift(1); // loglevel 1 for error msg
                                log.apply(this, logMSG);
                            } else {
                                log(1, "ERROR: Problem executing validation callback for option '" + optionName + "':", e.message);
                            }
                        } finally {
                            _options[optionName] = value;
                        }
                    }
                });
            };
    
            /**
             * Helper used by the setter/getters for scene options
             * @private
             */
            var changeOption = function (varname, newval) {
                var
                changed = false,
                    oldval = _options[varname];
                if (_options[varname] != newval) {
                    _options[varname] = newval;
                    validateOption(varname); // resets to default if necessary
                    changed = oldval != _options[varname];
                }
                return changed;
            };
    
            // generate getters/setters for all options
            var addSceneOption = function (optionName) {
                if (!Scene[optionName]) {
                    Scene[optionName] = function (newVal) {
                        if (!arguments.length) { // get
                            return _options[optionName];
                        } else {
                            if (optionName === "duration") { // new duration is set, so any previously set function must be unset
                                _durationUpdateMethod = undefined;
                            }
                            if (changeOption(optionName, newVal)) { // set
                                Scene.trigger("change", {
                                    what: optionName,
                                    newval: _options[optionName]
                                });
                                if (SCENE_OPTIONS.shifts.indexOf(optionName) > -1) {
                                    Scene.trigger("shift", {
                                        reason: optionName
                                    });
                                }
                            }
                        }
                        return Scene;
                    };
                }
            };
    
            /**
             * **Get** or **Set** the duration option value.
             * As a setter it also accepts a function returning a numeric value.  
             * This is particularly useful for responsive setups.
             *
             * The duration is updated using the supplied function every time `Scene.refresh()` is called, which happens periodically from the controller (see ScrollMagic.Controller option `refreshInterval`).  
             * _**NOTE:** Be aware that it's an easy way to kill performance, if you supply a function that has high CPU demand.  
             * Even for size and position calculations it is recommended to use a variable to cache the value. (see example)  
             * This counts double if you use the same function for multiple scenes._
             *
             * @method ScrollMagic.Scene#duration
             * @example
             * // get the current duration value
             * var duration = scene.duration();
             *
             * // set a new duration
             * scene.duration(300);
             *
             * // use a function to automatically adjust the duration to the window height.
             * var durationValueCache;
             * function getDuration () {
             *   return durationValueCache;
             * }
             * function updateDuration (e) {
             *   durationValueCache = window.innerHeight;
             * }
             * $(window).on("resize", updateDuration); // update the duration when the window size changes
             * $(window).triggerHandler("resize"); // set to initial value
             * scene.duration(getDuration); // supply duration method
             *
             * @fires {@link Scene.change}, when used as setter
             * @fires {@link Scene.shift}, when used as setter
             * @param {(number|function)} [newDuration] - The new duration of the scene.
             * @returns {number} `get` -  Current scene duration.
             * @returns {Scene} `set` -  Parent object for chaining.
             */
    
            /**
             * **Get** or **Set** the offset option value.
             * @method ScrollMagic.Scene#offset
             * @example
             * // get the current offset
             * var offset = scene.offset();
             *
             * // set a new offset
             * scene.offset(100);
             *
             * @fires {@link Scene.change}, when used as setter
             * @fires {@link Scene.shift}, when used as setter
             * @param {number} [newOffset] - The new offset of the scene.
             * @returns {number} `get` -  Current scene offset.
             * @returns {Scene} `set` -  Parent object for chaining.
             */
    
            /**
             * **Get** or **Set** the triggerElement option value.
             * Does **not** fire `Scene.shift`, because changing the trigger Element doesn't necessarily mean the start position changes. This will be determined in `Scene.refresh()`, which is automatically triggered.
             * @method ScrollMagic.Scene#triggerElement
             * @example
             * // get the current triggerElement
             * var triggerElement = scene.triggerElement();
             *
             * // set a new triggerElement using a selector
             * scene.triggerElement("#trigger");
             * // set a new triggerElement using a DOM object
             * scene.triggerElement(document.getElementById("trigger"));
             *
             * @fires {@link Scene.change}, when used as setter
             * @param {(string|object)} [newTriggerElement] - The new trigger element for the scene.
             * @returns {(string|object)} `get` -  Current triggerElement.
             * @returns {Scene} `set` -  Parent object for chaining.
             */
    
            /**
             * **Get** or **Set** the triggerHook option value.
             * @method ScrollMagic.Scene#triggerHook
             * @example
             * // get the current triggerHook value
             * var triggerHook = scene.triggerHook();
             *
             * // set a new triggerHook using a string
             * scene.triggerHook("onLeave");
             * // set a new triggerHook using a number
             * scene.triggerHook(0.7);
             *
             * @fires {@link Scene.change}, when used as setter
             * @fires {@link Scene.shift}, when used as setter
             * @param {(number|string)} [newTriggerHook] - The new triggerHook of the scene. See {@link Scene} parameter description for value options.
             * @returns {number} `get` -  Current triggerHook (ALWAYS numerical).
             * @returns {Scene} `set` -  Parent object for chaining.
             */
    
            /**
             * **Get** or **Set** the reverse option value.
             * @method ScrollMagic.Scene#reverse
             * @example
             * // get the current reverse option
             * var reverse = scene.reverse();
             *
             * // set new reverse option
             * scene.reverse(false);
             *
             * @fires {@link Scene.change}, when used as setter
             * @param {boolean} [newReverse] - The new reverse setting of the scene.
             * @returns {boolean} `get` -  Current reverse option value.
             * @returns {Scene} `set` -  Parent object for chaining.
             */
    
            /**
             * **Get** or **Set** the loglevel option value.
             * @method ScrollMagic.Scene#loglevel
             * @example
             * // get the current loglevel
             * var loglevel = scene.loglevel();
             *
             * // set new loglevel
             * scene.loglevel(3);
             *
             * @fires {@link Scene.change}, when used as setter
             * @param {number} [newLoglevel] - The new loglevel setting of the scene. `[0-3]`
             * @returns {number} `get` -  Current loglevel.
             * @returns {Scene} `set` -  Parent object for chaining.
             */
    
            /**
             * **Get** the associated controller.
             * @method ScrollMagic.Scene#controller
             * @example
             * // get the controller of a scene
             * var controller = scene.controller();
             *
             * @returns {ScrollMagic.Controller} Parent controller or `undefined`
             */
            this.controller = function () {
                return _controller;
            };
    
            /**
             * **Get** the current state.
             * @method ScrollMagic.Scene#state
             * @example
             * // get the current state
             * var state = scene.state();
             *
             * @returns {string} `"BEFORE"`, `"DURING"` or `"AFTER"`
             */
            this.state = function () {
                return _state;
            };
    
            /**
             * **Get** the current scroll offset for the start of the scene.  
             * Mind, that the scrollOffset is related to the size of the container, if `triggerHook` is bigger than `0` (or `"onLeave"`).  
             * This means, that resizing the container or changing the `triggerHook` will influence the scene's start offset.
             * @method ScrollMagic.Scene#scrollOffset
             * @example
             * // get the current scroll offset for the start and end of the scene.
             * var start = scene.scrollOffset();
             * var end = scene.scrollOffset() + scene.duration();
             * console.log("the scene starts at", start, "and ends at", end);
             *
             * @returns {number} The scroll offset (of the container) at which the scene will trigger. Y value for vertical and X value for horizontal scrolls.
             */
            this.scrollOffset = function () {
                return _scrollOffset.start;
            };
    
            /**
             * **Get** the trigger position of the scene (including the value of the `offset` option).  
             * @method ScrollMagic.Scene#triggerPosition
             * @example
             * // get the scene's trigger position
             * var triggerPosition = scene.triggerPosition();
             *
             * @returns {number} Start position of the scene. Top position value for vertical and left position value for horizontal scrolls.
             */
            this.triggerPosition = function () {
                var pos = _options.offset; // the offset is the basis
                if (_controller) {
                    // get the trigger position
                    if (_options.triggerElement) {
                        // Element as trigger
                        pos += _triggerPos;
                    } else {
                        // return the height of the triggerHook to start at the beginning
                        pos += _controller.info("size") * Scene.triggerHook();
                    }
                }
                return pos;
            };
    
            var
            _pin, _pinOptions;
    
            Scene.on("shift.internal", function (e) {
                var durationChanged = e.reason === "duration";
                if ((_state === SCENE_STATE_AFTER && durationChanged) || (_state === SCENE_STATE_DURING && _options.duration === 0)) {
                    // if [duration changed after a scene (inside scene progress updates pin position)] or [duration is 0, we are in pin phase and some other value changed].
                    updatePinState();
                }
                if (durationChanged) {
                    updatePinDimensions();
                }
            }).on("progress.internal", function (e) {
                updatePinState();
            }).on("add.internal", function (e) {
                updatePinDimensions();
            }).on("destroy.internal", function (e) {
                Scene.removePin(e.reset);
            });
            /**
             * Update the pin state.
             * @private
             */
            var updatePinState = function (forceUnpin) {
                if (_pin && _controller) {
                    var
                    containerInfo = _controller.info(),
                        pinTarget = _pinOptions.spacer.firstChild; // may be pin element or another spacer, if cascading pins
                    if (!forceUnpin && _state === SCENE_STATE_DURING) { // during scene or if duration is 0 and we are past the trigger
                        // pinned state
                        if (_util.css(pinTarget, "position") != "fixed") {
                            // change state before updating pin spacer (position changes due to fixed collapsing might occur.)
                            _util.css(pinTarget, {
                                "position": "fixed"
                            });
                            // update pin spacer
                            updatePinDimensions();
                        }
    
                        var
                        fixedPos = _util.get.offset(_pinOptions.spacer, true),
                            // get viewport position of spacer
                            scrollDistance = _options.reverse || _options.duration === 0 ? containerInfo.scrollPos - _scrollOffset.start // quicker
                            : Math.round(_progress * _options.duration * 10) / 10; // if no reverse and during pin the position needs to be recalculated using the progress
                        // add scrollDistance
                        fixedPos[containerInfo.vertical ? "top" : "left"] += scrollDistance;
    
                        // set new values
                        _util.css(_pinOptions.spacer.firstChild, {
                            top: fixedPos.top,
                            left: fixedPos.left
                        });
                    } else {
                        // unpinned state
                        var
                        newCSS = {
                            position: _pinOptions.inFlow ? "relative" : "absolute",
                            top: 0,
                            left: 0
                        },
                            change = _util.css(pinTarget, "position") != newCSS.position;
    
                        if (!_pinOptions.pushFollowers) {
                            newCSS[containerInfo.vertical ? "top" : "left"] = _options.duration * _progress;
                        } else if (_options.duration > 0) { // only concerns scenes with duration
                            if (_state === SCENE_STATE_AFTER && parseFloat(_util.css(_pinOptions.spacer, "padding-top")) === 0) {
                                change = true; // if in after state but havent updated spacer yet (jumped past pin)
                            } else if (_state === SCENE_STATE_BEFORE && parseFloat(_util.css(_pinOptions.spacer, "padding-bottom")) === 0) { // before
                                change = true; // jumped past fixed state upward direction
                            }
                        }
                        // set new values
                        _util.css(pinTarget, newCSS);
                        if (change) {
                            // update pin spacer if state changed
                            updatePinDimensions();
                        }
                    }
                }
            };
    
            /**
             * Update the pin spacer and/or element size.
             * The size of the spacer needs to be updated whenever the duration of the scene changes, if it is to push down following elements.
             * @private
             */
            var updatePinDimensions = function () {
                if (_pin && _controller && _pinOptions.inFlow) { // no spacerresize, if original position is absolute
                    var
                    after = (_state === SCENE_STATE_AFTER),
                        before = (_state === SCENE_STATE_BEFORE),
                        during = (_state === SCENE_STATE_DURING),
                        vertical = _controller.info("vertical"),
                        pinTarget = _pinOptions.spacer.firstChild,
                        // usually the pined element but can also be another spacer (cascaded pins)
                        marginCollapse = _util.isMarginCollapseType(_util.css(_pinOptions.spacer, "display")),
                        css = {};
    
                    // set new size
                    // if relsize: spacer -> pin | else: pin -> spacer
                    if (_pinOptions.relSize.width || _pinOptions.relSize.autoFullWidth) {
                        if (during) {
                            _util.css(_pin, {
                                "width": _util.get.width(_pinOptions.spacer)
                            });
                        } else {
                            _util.css(_pin, {
                                "width": "100%"
                            });
                        }
                    } else {
                        // minwidth is needed for cascaded pins.
                        css["min-width"] = _util.get.width(vertical ? _pin : pinTarget, true, true);
                        css.width = during ? css["min-width"] : "auto";
                    }
                    if (_pinOptions.relSize.height) {
                        if (during) {
                            // the only padding the spacer should ever include is the duration (if pushFollowers = true), so we need to substract that.
                            _util.css(_pin, {
                                "height": _util.get.height(_pinOptions.spacer) - (_pinOptions.pushFollowers ? _options.duration : 0)
                            });
                        } else {
                            _util.css(_pin, {
                                "height": "100%"
                            });
                        }
                    } else {
                        // margin is only included if it's a cascaded pin to resolve an IE9 bug
                        css["min-height"] = _util.get.height(vertical ? pinTarget : _pin, true, !marginCollapse); // needed for cascading pins
                        css.height = during ? css["min-height"] : "auto";
                    }
    
                    // add space for duration if pushFollowers is true
                    if (_pinOptions.pushFollowers) {
                        css["padding" + (vertical ? "Top" : "Left")] = _options.duration * _progress;
                        css["padding" + (vertical ? "Bottom" : "Right")] = _options.duration * (1 - _progress);
                    }
                    _util.css(_pinOptions.spacer, css);
                }
            };
    
            /**
             * Updates the Pin state (in certain scenarios)
             * If the controller container is not the document and we are mid-pin-phase scrolling or resizing the main document can result to wrong pin positions.
             * So this function is called on resize and scroll of the document.
             * @private
             */
            var updatePinInContainer = function () {
                if (_controller && _pin && _state === SCENE_STATE_DURING && !_controller.info("isDocument")) {
                    updatePinState();
                }
            };
    
            /**
             * Updates the Pin spacer size state (in certain scenarios)
             * If container is resized during pin and relatively sized the size of the pin might need to be updated...
             * So this function is called on resize of the container.
             * @private
             */
            var updateRelativePinSpacer = function () {
                if (_controller && _pin && // well, duh
                _state === SCENE_STATE_DURING && // element in pinned state?
                ( // is width or height relatively sized, but not in relation to body? then we need to recalc.
                ((_pinOptions.relSize.width || _pinOptions.relSize.autoFullWidth) && _util.get.width(window) != _util.get.width(_pinOptions.spacer.parentNode)) || (_pinOptions.relSize.height && _util.get.height(window) != _util.get.height(_pinOptions.spacer.parentNode)))) {
                    updatePinDimensions();
                }
            };
    
            /**
             * Is called, when the mousewhel is used while over a pinned element inside a div container.
             * If the scene is in fixed state scroll events would be counted towards the body. This forwards the event to the scroll container.
             * @private
             */
            var onMousewheelOverPin = function (e) {
                if (_controller && _pin && _state === SCENE_STATE_DURING && !_controller.info("isDocument")) { // in pin state
                    e.preventDefault();
                    _controller._setScrollPos(_controller.info("scrollPos") - ((e.wheelDelta || e[_controller.info("vertical") ? "wheelDeltaY" : "wheelDeltaX"]) / 3 || -e.detail * 30));
                }
            };
    
            /**
             * Pin an element for the duration of the tween.  
             * If the scene duration is 0 the element will only be unpinned, if the user scrolls back past the start position.  
             * Make sure only one pin is applied to an element at the same time.
             * An element can be pinned multiple times, but only successively.
             * _**NOTE:** The option `pushFollowers` has no effect, when the scene duration is 0._
             * @method ScrollMagic.Scene#setPin
             * @example
             * // pin element and push all following elements down by the amount of the pin duration.
             * scene.setPin("#pin");
             *
             * // pin element and keeping all following elements in their place. The pinned element will move past them.
             * scene.setPin("#pin", {pushFollowers: false});
             *
             * @param {(string|object)} element - A Selector targeting an element or a DOM object that is supposed to be pinned.
             * @param {object} [settings] - settings for the pin
             * @param {boolean} [settings.pushFollowers=true] - If `true` following elements will be "pushed" down for the duration of the pin, if `false` the pinned element will just scroll past them.  
             Ignored, when duration is `0`.
             * @param {string} [settings.spacerClass="scrollmagic-pin-spacer"] - Classname of the pin spacer element, which is used to replace the element.
             *
             * @returns {Scene} Parent object for chaining.
             */
            this.setPin = function (element, settings) {
                var
                defaultSettings = {
                    pushFollowers: true,
                    spacerClass: "scrollmagic-pin-spacer"
                };
                settings = _util.extend({}, defaultSettings, settings);
    
                // validate Element
                element = _util.get.elements(element)[0];
                if (!element) {
                    log(1, "ERROR calling method 'setPin()': Invalid pin element supplied.");
                    return Scene; // cancel
                } else if (_util.css(element, "position") === "fixed") {
                    log(1, "ERROR calling method 'setPin()': Pin does not work with elements that are positioned 'fixed'.");
                    return Scene; // cancel
                }
    
                if (_pin) { // preexisting pin?
                    if (_pin === element) {
                        // same pin we already have -> do nothing
                        return Scene; // cancel
                    } else {
                        // kill old pin
                        Scene.removePin();
                    }
    
                }
                _pin = element;
    
                var
                parentDisplay = _pin.parentNode.style.display,
                    boundsParams = ["top", "left", "bottom", "right", "margin", "marginLeft", "marginRight", "marginTop", "marginBottom"];
    
                _pin.parentNode.style.display = 'none'; // hack start to force css to return stylesheet values instead of calculated px values.
                var
                inFlow = _util.css(_pin, "position") != "absolute",
                    pinCSS = _util.css(_pin, boundsParams.concat(["display"])),
                    sizeCSS = _util.css(_pin, ["width", "height"]);
                _pin.parentNode.style.display = parentDisplay; // hack end.
                if (!inFlow && settings.pushFollowers) {
                    log(2, "WARNING: If the pinned element is positioned absolutely pushFollowers will be disabled.");
                    settings.pushFollowers = false;
                }
                window.setTimeout(function () { // wait until all finished, because with responsive duration it will only be set after scene is added to controller
                    if (_pin && _options.duration === 0 && settings.pushFollowers) {
                        log(2, "WARNING: pushFollowers =", true, "has no effect, when scene duration is 0.");
                    }
                }, 0);
    
                // create spacer and insert
                var
                spacer = _pin.parentNode.insertBefore(document.createElement('div'), _pin),
                    spacerCSS = _util.extend(pinCSS, {
                        position: inFlow ? "relative" : "absolute",
                        boxSizing: "content-box",
                        mozBoxSizing: "content-box",
                        webkitBoxSizing: "content-box"
                    });
    
                if (!inFlow) { // copy size if positioned absolutely, to work for bottom/right positioned elements.
                    _util.extend(spacerCSS, _util.css(_pin, ["width", "height"]));
                }
    
                _util.css(spacer, spacerCSS);
                spacer.setAttribute(PIN_SPACER_ATTRIBUTE, "");
                _util.addClass(spacer, settings.spacerClass);
    
                // set the pin Options
                _pinOptions = {
                    spacer: spacer,
                    relSize: { // save if size is defined using % values. if so, handle spacer resize differently...
                        width: sizeCSS.width.slice(-1) === "%",
                        height: sizeCSS.height.slice(-1) === "%",
                        autoFullWidth: sizeCSS.width === "auto" && inFlow && _util.isMarginCollapseType(pinCSS.display)
                    },
                    pushFollowers: settings.pushFollowers,
                    inFlow: inFlow,
                    // stores if the element takes up space in the document flow
                };
    
                if (!_pin.___origStyle) {
                    _pin.___origStyle = {};
                    var
                    pinInlineCSS = _pin.style,
                        copyStyles = boundsParams.concat(["width", "height", "position", "boxSizing", "mozBoxSizing", "webkitBoxSizing"]);
                    copyStyles.forEach(function (val) {
                        _pin.___origStyle[val] = pinInlineCSS[val] || "";
                    });
                }
    
                // if relative size, transfer it to spacer and make pin calculate it...
                if (_pinOptions.relSize.width) {
                    _util.css(spacer, {
                        width: sizeCSS.width
                    });
                }
                if (_pinOptions.relSize.height) {
                    _util.css(spacer, {
                        height: sizeCSS.height
                    });
                }
    
                // now place the pin element inside the spacer	
                spacer.appendChild(_pin);
                // and set new css
                _util.css(_pin, {
                    position: inFlow ? "relative" : "absolute",
                    margin: "auto",
                    top: "auto",
                    left: "auto",
                    bottom: "auto",
                    right: "auto"
                });
    
                if (_pinOptions.relSize.width || _pinOptions.relSize.autoFullWidth) {
                    _util.css(_pin, {
                        boxSizing: "border-box",
                        mozBoxSizing: "border-box",
                        webkitBoxSizing: "border-box"
                    });
                }
    
                // add listener to document to update pin position in case controller is not the document.
                window.addEventListener('scroll', updatePinInContainer);
                window.addEventListener('resize', updatePinInContainer);
                window.addEventListener('resize', updateRelativePinSpacer);
                // add mousewheel listener to catch scrolls over fixed elements
                _pin.addEventListener("mousewheel", onMousewheelOverPin);
                _pin.addEventListener("DOMMouseScroll", onMousewheelOverPin);
    
                log(3, "added pin");
    
                // finally update the pin to init
                updatePinState();
    
                return Scene;
            };
    
            /**
             * Remove the pin from the scene.
             * @method ScrollMagic.Scene#removePin
             * @example
             * // remove the pin from the scene without resetting it (the spacer is not removed)
             * scene.removePin();
             *
             * // remove the pin from the scene and reset the pin element to its initial position (spacer is removed)
             * scene.removePin(true);
             *
             * @param {boolean} [reset=false] - If `false` the spacer will not be removed and the element's position will not be reset.
             * @returns {Scene} Parent object for chaining.
             */
            this.removePin = function (reset) {
                if (_pin) {
                    if (_state === SCENE_STATE_DURING) {
                        updatePinState(true); // force unpin at position
                    }
                    if (reset || !_controller) { // if there's no controller no progress was made anyway...
                        var pinTarget = _pinOptions.spacer.firstChild; // usually the pin element, but may be another spacer (cascaded pins)...
                        if (pinTarget.hasAttribute(PIN_SPACER_ATTRIBUTE)) { // copy margins to child spacer
                            var
                            style = _pinOptions.spacer.style,
                                values = ["margin", "marginLeft", "marginRight", "marginTop", "marginBottom"];
                            margins = {};
                            values.forEach(function (val) {
                                margins[val] = style[val] || "";
                            });
                            _util.css(pinTarget, margins);
                        }
                        _pinOptions.spacer.parentNode.insertBefore(pinTarget, _pinOptions.spacer);
                        _pinOptions.spacer.parentNode.removeChild(_pinOptions.spacer);
                        if (!_pin.parentNode.hasAttribute(PIN_SPACER_ATTRIBUTE)) { // if it's the last pin for this element -> restore inline styles
                            // TODO: only correctly set for first pin (when cascading) - how to fix?
                            _util.css(_pin, _pin.___origStyle);
                            delete _pin.___origStyle;
                        }
                    }
                    window.removeEventListener('scroll', updatePinInContainer);
                    window.removeEventListener('resize', updatePinInContainer);
                    window.removeEventListener('resize', updateRelativePinSpacer);
                    _pin.removeEventListener("mousewheel", onMousewheelOverPin);
                    _pin.removeEventListener("DOMMouseScroll", onMousewheelOverPin);
                    _pin = undefined;
                    log(3, "removed pin (reset: " + (reset ? "true" : "false") + ")");
                }
                return Scene;
            };
    
    
            var
            _cssClasses, _cssClassElems = [];
    
            Scene.on("destroy.internal", function (e) {
                Scene.removeClassToggle(e.reset);
            });
            /**
             * Define a css class modification while the scene is active.  
             * When the scene triggers the classes will be added to the supplied element and removed, when the scene is over.
             * If the scene duration is 0 the classes will only be removed if the user scrolls back past the start position.
             * @method ScrollMagic.Scene#setClassToggle
             * @example
             * // add the class 'myclass' to the element with the id 'my-elem' for the duration of the scene
             * scene.setClassToggle("#my-elem", "myclass");
             *
             * // add multiple classes to multiple elements defined by the selector '.classChange'
             * scene.setClassToggle(".classChange", "class1 class2 class3");
             *
             * @param {(string|object)} element - A Selector targeting one or more elements or a DOM object that is supposed to be modified.
             * @param {string} classes - One or more Classnames (separated by space) that should be added to the element during the scene.
             *
             * @returns {Scene} Parent object for chaining.
             */
            this.setClassToggle = function (element, classes) {
                var elems = _util.get.elements(element);
                if (elems.length === 0 || !_util.type.String(classes)) {
                    log(1, "ERROR calling method 'setClassToggle()': Invalid " + (elems.length === 0 ? "element" : "classes") + " supplied.");
                    return Scene;
                }
                if (_cssClassElems.length > 0) {
                    // remove old ones
                    Scene.removeClassToggle();
                }
                _cssClasses = classes;
                _cssClassElems = elems;
                Scene.on("enter.internal_class leave.internal_class", function (e) {
                    var toggle = e.type === "enter" ? _util.addClass : _util.removeClass;
                    _cssClassElems.forEach(function (elem, key) {
                        toggle(elem, _cssClasses);
                    });
                });
                return Scene;
            };
    
            /**
             * Remove the class binding from the scene.
             * @method ScrollMagic.Scene#removeClassToggle
             * @example
             * // remove class binding from the scene without reset
             * scene.removeClassToggle();
             *
             * // remove class binding and remove the changes it caused
             * scene.removeClassToggle(true);
             *
             * @param {boolean} [reset=false] - If `false` and the classes are currently active, they will remain on the element. If `true` they will be removed.
             * @returns {Scene} Parent object for chaining.
             */
            this.removeClassToggle = function (reset) {
                if (reset) {
                    _cssClassElems.forEach(function (elem, key) {
                        _util.removeClass(elem, _cssClasses);
                    });
                }
                Scene.off("start.internal_class end.internal_class");
                _cssClasses = undefined;
                _cssClassElems = [];
                return Scene;
            };
    
            // INIT
            construct();
            return Scene;
        };
    
        // store pagewide scene options
        var SCENE_OPTIONS = {
            defaults: {
                duration: 0,
                offset: 0,
                triggerElement: undefined,
                triggerHook: 0.5,
                reverse: true,
                loglevel: 2
            },
            validate: {
                offset: function (val) {
                    val = parseFloat(val);
                    if (!_util.type.Number(val)) {
                        throw ["Invalid value for option \"offset\":", val];
                    }
                    return val;
                },
                triggerElement: function (val) {
                    val = val || undefined;
                    if (val) {
                        var elem = _util.get.elements(val)[0];
                        if (elem) {
                            val = elem;
                        } else {
                            throw ["Element defined in option \"triggerElement\" was not found:", val];
                        }
                    }
                    return val;
                },
                triggerHook: function (val) {
                    var translate = {
                        "onCenter": 0.5,
                        "onEnter": 1,
                        "onLeave": 0
                    };
                    if (_util.type.Number(val)) {
                        val = Math.max(0, Math.min(parseFloat(val), 1)); //  make sure its betweeen 0 and 1
                    } else if (val in translate) {
                        val = translate[val];
                    } else {
                        throw ["Invalid value for option \"triggerHook\": ", val];
                    }
                    return val;
                },
                reverse: function (val) {
                    return !!val; // force boolean
                },
                loglevel: function (val) {
                    val = parseInt(val);
                    if (!_util.type.Number(val) || val < 0 || val > 3) {
                        throw ["Invalid value for option \"loglevel\":", val];
                    }
                    return val;
                }
            },
            // holder for  validation methods. duration validation is handled in 'getters-setters.js'
            shifts: ["duration", "offset", "triggerHook"],
            // list of options that trigger a `shift` event
        };
    /*
     * method used to add an option to ScrollMagic Scenes.
     * TODO: DOC (private for dev)
     */
        ScrollMagic.Scene.addOption = function (name, defaultValue, validationCallback, shifts) {
            if (!(name in SCENE_OPTIONS.defaults)) {
                SCENE_OPTIONS.defaults[name] = defaultValue;
                SCENE_OPTIONS.validate[name] = validationCallback;
                if (shifts) {
                    SCENE_OPTIONS.shifts.push(name);
                }
            } else {
                ScrollMagic._util.log(1, "[static] ScrollMagic.Scene -> Cannot add Scene option '" + name + "', because it already exists.");
            }
        };
        // instance extension function for plugins
        // TODO: DOC (private for dev)
        ScrollMagic.Scene.extend = function (extension) {
            var oldClass = this;
            ScrollMagic.Scene = function () {
                oldClass.apply(this, arguments);
                this.$super = _util.extend({}, this); // copy parent state
                return extension.apply(this, arguments) || this;
            };
            _util.extend(ScrollMagic.Scene, oldClass); // copy properties
            ScrollMagic.Scene.prototype = oldClass.prototype; // copy prototype
            ScrollMagic.Scene.prototype.constructor = ScrollMagic.Scene; // restore constructor
        };
    
    
        /**
         * TODO: DOCS (private for dev)
         * @class
         * @private
         */
    
        ScrollMagic.Event = function (type, namespace, target, vars) {
            vars = vars || {};
            for (var key in vars) {
                this[key] = vars[key];
            }
            this.type = type;
            this.target = this.currentTarget = target;
            this.namespace = namespace || '';
            this.timeStamp = this.timestamp = Date.now();
            return this;
        };
    
    /*
     * TODO: DOCS (private for dev)
     */
    
        var _util = ScrollMagic._util = (function (window) {
            var U = {},
                i;
    
            /**
             * ------------------------------
             * internal helpers
             * ------------------------------
             */
    
            // parse float and fall back to 0.
            var floatval = function (number) {
                return parseFloat(number) || 0;
            };
            // get current style IE safe (otherwise IE would return calculated values for 'auto')
            var _getComputedStyle = function (elem) {
                return elem.currentStyle ? elem.currentStyle : window.getComputedStyle(elem);
            };
    
            // get element dimension (width or height)
            var _dimension = function (which, elem, outer, includeMargin) {
                elem = (elem === document) ? window : elem;
                if (elem === window) {
                    includeMargin = false;
                } else if (!_type.DomElement(elem)) {
                    return 0;
                }
                which = which.charAt(0).toUpperCase() + which.substr(1).toLowerCase();
                var dimension = (outer ? elem['offset' + which] || elem['outer' + which] : elem['client' + which] || elem['inner' + which]) || 0;
                if (outer && includeMargin) {
                    var style = _getComputedStyle(elem);
                    dimension += which === 'Height' ? floatval(style.marginTop) + floatval(style.marginBottom) : floatval(style.marginLeft) + floatval(style.marginRight);
                }
                return dimension;
            };
            // converts 'margin-top' into 'marginTop'
            var _camelCase = function (str) {
                return str.replace(/^[^a-z]+([a-z])/g, '$1').replace(/-([a-z])/g, function (g) {
                    return g[1].toUpperCase();
                });
            };
    
            /**
             * ------------------------------
             * external helpers
             * ------------------------------
             */
    
            // extend obj – same as jQuery.extend({}, objA, objB)
            U.extend = function (obj) {
                obj = obj || {};
                for (i = 1; i < arguments.length; i++) {
                    if (!arguments[i]) {
                        continue;
                    }
                    for (var key in arguments[i]) {
                        if (arguments[i].hasOwnProperty(key)) {
                            obj[key] = arguments[i][key];
                        }
                    }
                }
                return obj;
            };
    
            // check if a css display type results in margin-collapse or not
            U.isMarginCollapseType = function (str) {
                return ["block", "flex", "list-item", "table", "-webkit-box"].indexOf(str) > -1;
            };
    
            // implementation of requestAnimationFrame
            // based on https://gist.github.com/paulirish/1579671
            var
            lastTime = 0,
                vendors = ['ms', 'moz', 'webkit', 'o'];
            var _requestAnimationFrame = window.requestAnimationFrame;
            var _cancelAnimationFrame = window.cancelAnimationFrame;
            // try vendor prefixes if the above doesn't work
            for (i = 0; !_requestAnimationFrame && i < vendors.length; ++i) {
                _requestAnimationFrame = window[vendors[i] + 'RequestAnimationFrame'];
                _cancelAnimationFrame = window[vendors[i] + 'CancelAnimationFrame'] || window[vendors[i] + 'CancelRequestAnimationFrame'];
            }
    
            // fallbacks
            if (!_requestAnimationFrame) {
                _requestAnimationFrame = function (callback) {
                    var
                    currTime = new Date().getTime(),
                        timeToCall = Math.max(0, 16 - (currTime - lastTime)),
                        id = window.setTimeout(function () {
                            callback(currTime + timeToCall);
                        }, timeToCall);
                    lastTime = currTime + timeToCall;
                    return id;
                };
            }
            if (!_cancelAnimationFrame) {
                _cancelAnimationFrame = function (id) {
                    window.clearTimeout(id);
                };
            }
            U.rAF = _requestAnimationFrame.bind(window);
            U.cAF = _cancelAnimationFrame.bind(window);
    
            var
            loglevels = ["error", "warn", "log"],
                console = window.console || {};
    
            console.log = console.log ||
            function () {}; // no console log, well - do nothing then...
            // make sure methods for all levels exist.
            for (i = 0; i < loglevels.length; i++) {
                var method = loglevels[i];
                if (!console[method]) {
                    console[method] = console.log; // prefer .log over nothing
                }
            }
            U.log = function (loglevel) {
                if (loglevel > loglevels.length || loglevel <= 0) loglevel = loglevels.length;
                var now = new Date(),
                    time = ("0" + now.getHours()).slice(-2) + ":" + ("0" + now.getMinutes()).slice(-2) + ":" + ("0" + now.getSeconds()).slice(-2) + ":" + ("00" + now.getMilliseconds()).slice(-3),
                    method = loglevels[loglevel - 1],
                    args = Array.prototype.splice.call(arguments, 1),
                    func = Function.prototype.bind.call(console[method], console);
                args.unshift(time);
                func.apply(console, args);
            };
    
            /**
             * ------------------------------
             * type testing
             * ------------------------------
             */
    
            var _type = U.type = function (v) {
                return Object.prototype.toString.call(v).replace(/^\[object (.+)\]$/, "$1").toLowerCase();
            };
            _type.String = function (v) {
                return _type(v) === 'string';
            };
            _type.Function = function (v) {
                return _type(v) === 'function';
            };
            _type.Array = function (v) {
                return Array.isArray(v);
            };
            _type.Number = function (v) {
                return !_type.Array(v) && (v - parseFloat(v) + 1) >= 0;
            };
            _type.DomElement = function (o) {
                return (
                typeof HTMLElement === "object" ? o instanceof HTMLElement : //DOM2
                o && typeof o === "object" && o !== null && o.nodeType === 1 && typeof o.nodeName === "string");
            };
    
            /**
             * ------------------------------
             * DOM Element info
             * ------------------------------
             */
            // always returns a list of matching DOM elements, from a selector, a DOM element or an list of elements or even an array of selectors
            var _get = U.get = {};
            _get.elements = function (selector) {
                var arr = [];
                if (_type.String(selector)) {
                    try {
                        selector = document.querySelectorAll(selector);
                    } catch (e) { // invalid selector
                        return arr;
                    }
                }
                if (_type(selector) === 'nodelist' || _type.Array(selector)) {
                    for (var i = 0, ref = arr.length = selector.length; i < ref; i++) { // list of elements
                        var elem = selector[i];
                        arr[i] = _type.DomElement(elem) ? elem : _get.elements(elem); // if not an element, try to resolve recursively
                    }
                } else if (_type.DomElement(selector) || selector === document || selector === window) {
                    arr = [selector]; // only the element
                }
                return arr;
            };
            // get scroll top value
            _get.scrollTop = function (elem) {
                return (elem && typeof elem.scrollTop === 'number') ? elem.scrollTop : window.pageYOffset || 0;
            };
            // get scroll left value
            _get.scrollLeft = function (elem) {
                return (elem && typeof elem.scrollLeft === 'number') ? elem.scrollLeft : window.pageXOffset || 0;
            };
            // get element height
            _get.width = function (elem, outer, includeMargin) {
                return _dimension('width', elem, outer, includeMargin);
            };
            // get element width
            _get.height = function (elem, outer, includeMargin) {
                return _dimension('height', elem, outer, includeMargin);
            };
    
            // get element position (optionally relative to viewport)
            _get.offset = function (elem, relativeToViewport) {
                var offset = {
                    top: 0,
                    left: 0
                };
                if (elem && elem.getBoundingClientRect) { // check if available
                    var rect = elem.getBoundingClientRect();
                    offset.top = rect.top;
                    offset.left = rect.left;
                    if (!relativeToViewport) { // clientRect is by default relative to viewport...
                        offset.top += _get.scrollTop();
                        offset.left += _get.scrollLeft();
                    }
                }
                return offset;
            };
    
            /**
             * ------------------------------
             * DOM Element manipulation
             * ------------------------------
             */
    
            U.addClass = function (elem, classname) {
                if (classname) {
                    if (elem.classList) elem.classList.add(classname);
                    else elem.className += ' ' + classname;
                }
            };
            U.removeClass = function (elem, classname) {
                if (classname) {
                    if (elem.classList) elem.classList.remove(classname);
                    else elem.className = elem.className.replace(new RegExp('(^|\\b)' + classname.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
                }
            };
            // if options is string -> returns css value
            // if options is array -> returns object with css value pairs
            // if options is object -> set new css values
            U.css = function (elem, options) {
                if (_type.String(options)) {
                    return _getComputedStyle(elem)[_camelCase(options)];
                } else if (_type.Array(options)) {
                    var
                    obj = {},
                        style = _getComputedStyle(elem);
                    options.forEach(function (option, key) {
                        obj[option] = style[_camelCase(option)];
                    });
                    return obj;
                } else {
                    for (var option in options) {
                        var val = options[option];
                        if (val == parseFloat(val)) { // assume pixel for seemingly numerical values
                            val += 'px';
                        }
                        elem.style[_camelCase(option)] = val;
                    }
                }
            };
    
            return U;
        }(window || {}));
    
        ScrollMagic.Scene.prototype.addIndicators = function () {
            ScrollMagic._util.log(1, '(ScrollMagic.Scene) -> ERROR calling addIndicators() due to missing Plugin \'debug.addIndicators\'. Please make sure to include plugins/debug.addIndicators.js');
            return this;
        }
        ScrollMagic.Scene.prototype.removeIndicators = function () {
            ScrollMagic._util.log(1, '(ScrollMagic.Scene) -> ERROR calling removeIndicators() due to missing Plugin \'debug.addIndicators\'. Please make sure to include plugins/debug.addIndicators.js');
            return this;
        }
        ScrollMagic.Scene.prototype.setTween = function () {
            ScrollMagic._util.log(1, '(ScrollMagic.Scene) -> ERROR calling setTween() due to missing Plugin \'animation.gsap\'. Please make sure to include plugins/animation.gsap.js');
            return this;
        }
        ScrollMagic.Scene.prototype.removeTween = function () {
            ScrollMagic._util.log(1, '(ScrollMagic.Scene) -> ERROR calling removeTween() due to missing Plugin \'animation.gsap\'. Please make sure to include plugins/animation.gsap.js');
            return this;
        }
        ScrollMagic.Scene.prototype.setVelocity = function () {
            ScrollMagic._util.log(1, '(ScrollMagic.Scene) -> ERROR calling setVelocity() due to missing Plugin \'animation.velocity\'. Please make sure to include plugins/animation.velocity.js');
            return this;
        }
        ScrollMagic.Scene.prototype.removeVelocity = function () {
            ScrollMagic._util.log(1, '(ScrollMagic.Scene) -> ERROR calling removeVelocity() due to missing Plugin \'animation.velocity\'. Please make sure to include plugins/animation.velocity.js');
            return this;
        }
    
        return ScrollMagic;
    }));
    
    /***/ }),
    /* 36 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var META = __webpack_require__(41)('meta');
    var isObject = __webpack_require__(5);
    var has = __webpack_require__(13);
    var setDesc = __webpack_require__(8).f;
    var id = 0;
    var isExtensible = Object.isExtensible || function () {
      return true;
    };
    var FREEZE = !__webpack_require__(4)(function () {
      return isExtensible(Object.preventExtensions({}));
    });
    var setMeta = function (it) {
      setDesc(it, META, { value: {
        i: 'O' + ++id, // object ID
        w: {}          // weak collections IDs
      } });
    };
    var fastKey = function (it, create) {
      // return primitive with prefix
      if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
      if (!has(it, META)) {
        // can't set metadata to uncaught frozen object
        if (!isExtensible(it)) return 'F';
        // not necessary to add metadata
        if (!create) return 'E';
        // add missing metadata
        setMeta(it);
      // return object ID
      } return it[META].i;
    };
    var getWeak = function (it, create) {
      if (!has(it, META)) {
        // can't set metadata to uncaught frozen object
        if (!isExtensible(it)) return true;
        // not necessary to add metadata
        if (!create) return false;
        // add missing metadata
        setMeta(it);
      // return hash weak collections IDs
      } return it[META].w;
    };
    // add metadata on freeze-family methods calling
    var onFreeze = function (it) {
      if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
      return it;
    };
    var meta = module.exports = {
      KEY: META,
      NEED: false,
      fastKey: fastKey,
      getWeak: getWeak,
      onFreeze: onFreeze
    };
    
    
    /***/ }),
    /* 37 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 22.1.3.31 Array.prototype[@@unscopables]
    var UNSCOPABLES = __webpack_require__(6)('unscopables');
    var ArrayProto = Array.prototype;
    if (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(14)(ArrayProto, UNSCOPABLES, {});
    module.exports = function (key) {
      ArrayProto[UNSCOPABLES][key] = true;
    };
    
    
    /***/ }),
    /* 38 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    var dom = __webpack_require__(51);
    
    var toInt = exports.toInt = function (x) {
      return parseInt(x, 10) || 0;
    };
    
    exports.isEditable = function (el) {
      return dom.matches(el, "input,[contenteditable]") ||
             dom.matches(el, "select,[contenteditable]") ||
             dom.matches(el, "textarea,[contenteditable]") ||
             dom.matches(el, "button,[contenteditable]");
    };
    
    exports.removePsClasses = function (element) {
      for (var i = 0; i < element.classList.length; i++) {
        var className = element.classList[i];
        if (className.indexOf('ps-') === 0) {
          element.classList.remove(className);
        }
      }
    };
    
    exports.outerWidth = function (element) {
      return toInt(dom.css(element, 'width')) +
             toInt(dom.css(element, 'paddingLeft')) +
             toInt(dom.css(element, 'paddingRight')) +
             toInt(dom.css(element, 'borderLeftWidth')) +
             toInt(dom.css(element, 'borderRightWidth'));
    };
    
    function psClasses(axis) {
      var classes = ['ps--in-scrolling'];
      var axisClasses;
      if (typeof axis === 'undefined') {
        axisClasses = ['ps--x', 'ps--y'];
      } else {
        axisClasses = ['ps--' + axis];
      }
      return classes.concat(axisClasses);
    }
    
    exports.startScrolling = function (element, axis) {
      var classes = psClasses(axis);
      for (var i = 0; i < classes.length; i++) {
        element.classList.add(classes[i]);
      }
    };
    
    exports.stopScrolling = function (element, axis) {
      var classes = psClasses(axis);
      for (var i = 0; i < classes.length; i++) {
        element.classList.remove(classes[i]);
      }
    };
    
    exports.env = {
      isWebKit: typeof document !== 'undefined' && 'WebkitAppearance' in document.documentElement.style,
      supportsTouch: typeof window !== 'undefined' && (('ontouchstart' in window) || window.DocumentTouch && document instanceof window.DocumentTouch),
      supportsIePointer: typeof window !== 'undefined' && window.navigator.msMaxTouchPoints !== null
    };
    
    
    /***/ }),
    /* 39 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    var instances = __webpack_require__(20);
    
    var createDOMEvent = function (name) {
      var event = document.createEvent("Event");
      event.initEvent(name, true, true);
      return event;
    };
    
    module.exports = function (element, axis, value) {
      if (typeof element === 'undefined') {
        throw 'You must provide an element to the update-scroll function';
      }
    
      if (typeof axis === 'undefined') {
        throw 'You must provide an axis to the update-scroll function';
      }
    
      if (typeof value === 'undefined') {
        throw 'You must provide a value to the update-scroll function';
      }
    
      if (axis === 'top' && value <= 0) {
        element.scrollTop = value = 0; // don't allow negative scroll
        element.dispatchEvent(createDOMEvent('ps-y-reach-start'));
      }
    
      if (axis === 'left' && value <= 0) {
        element.scrollLeft = value = 0; // don't allow negative scroll
        element.dispatchEvent(createDOMEvent('ps-x-reach-start'));
      }
    
      var i = instances.get(element);
    
      if (axis === 'top' && value >= i.contentHeight - i.containerHeight) {
        // don't allow scroll past container
        value = i.contentHeight - i.containerHeight;
        if (value - element.scrollTop <= 2) {
          // mitigates rounding errors on non-subpixel scroll values
          value = element.scrollTop;
        } else {
          element.scrollTop = value;
        }
        element.dispatchEvent(createDOMEvent('ps-y-reach-end'));
      }
    
      if (axis === 'left' && value >= i.contentWidth - i.containerWidth) {
        // don't allow scroll past container
        value = i.contentWidth - i.containerWidth;
        if (value - element.scrollLeft <= 2) {
          // mitigates rounding errors on non-subpixel scroll values
          value = element.scrollLeft;
        } else {
          element.scrollLeft = value;
        }
        element.dispatchEvent(createDOMEvent('ps-x-reach-end'));
      }
    
      if (i.lastTop === undefined) {
        i.lastTop = element.scrollTop;
      }
    
      if (i.lastLeft === undefined) {
        i.lastLeft = element.scrollLeft;
      }
    
      if (axis === 'top' && value < i.lastTop) {
        element.dispatchEvent(createDOMEvent('ps-scroll-up'));
      }
    
      if (axis === 'top' && value > i.lastTop) {
        element.dispatchEvent(createDOMEvent('ps-scroll-down'));
      }
    
      if (axis === 'left' && value < i.lastLeft) {
        element.dispatchEvent(createDOMEvent('ps-scroll-left'));
      }
    
      if (axis === 'left' && value > i.lastLeft) {
        element.dispatchEvent(createDOMEvent('ps-scroll-right'));
      }
    
      if (axis === 'top' && value !== i.lastTop) {
        element.scrollTop = i.lastTop = value;
        element.dispatchEvent(createDOMEvent('ps-scroll-y'));
      }
    
      if (axis === 'left' && value !== i.lastLeft) {
        element.scrollLeft = i.lastLeft = value;
        element.dispatchEvent(createDOMEvent('ps-scroll-x'));
      }
    
    };
    
    
    /***/ }),
    /* 40 */
    /***/ (function(module, exports) {
    
    module.exports = function (bitmap, value) {
      return {
        enumerable: !(bitmap & 1),
        configurable: !(bitmap & 2),
        writable: !(bitmap & 4),
        value: value
      };
    };
    
    
    /***/ }),
    /* 41 */
    /***/ (function(module, exports) {
    
    var id = 0;
    var px = Math.random();
    module.exports = function (key) {
      return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
    };
    
    
    /***/ }),
    /* 42 */
    /***/ (function(module, exports) {
    
    module.exports = false;
    
    
    /***/ }),
    /* 43 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 19.1.2.14 / 15.2.3.14 Object.keys(O)
    var $keys = __webpack_require__(113);
    var enumBugKeys = __webpack_require__(85);
    
    module.exports = Object.keys || function keys(O) {
      return $keys(O, enumBugKeys);
    };
    
    
    /***/ }),
    /* 44 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var toInteger = __webpack_require__(29);
    var max = Math.max;
    var min = Math.min;
    module.exports = function (index, length) {
      index = toInteger(index);
      return index < 0 ? max(index + length, 0) : min(index, length);
    };
    
    
    /***/ }),
    /* 45 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
    var anObject = __webpack_require__(1);
    var dPs = __webpack_require__(114);
    var enumBugKeys = __webpack_require__(85);
    var IE_PROTO = __webpack_require__(84)('IE_PROTO');
    var Empty = function () { /* empty */ };
    var PROTOTYPE = 'prototype';
    
    // Create object with fake `null` prototype: use iframe Object with cleared prototype
    var createDict = function () {
      // Thrash, waste and sodomy: IE GC bug
      var iframe = __webpack_require__(82)('iframe');
      var i = enumBugKeys.length;
      var lt = '<';
      var gt = '>';
      var iframeDocument;
      iframe.style.display = 'none';
      __webpack_require__(86).appendChild(iframe);
      iframe.src = 'javascript:'; // eslint-disable-line no-script-url
      // createDict = iframe.contentWindow.Object;
      // html.removeChild(iframe);
      iframeDocument = iframe.contentWindow.document;
      iframeDocument.open();
      iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
      iframeDocument.close();
      createDict = iframeDocument.F;
      while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
      return createDict();
    };
    
    module.exports = Object.create || function create(O, Properties) {
      var result;
      if (O !== null) {
        Empty[PROTOTYPE] = anObject(O);
        result = new Empty();
        Empty[PROTOTYPE] = null;
        // add "__proto__" for Object.getPrototypeOf polyfill
        result[IE_PROTO] = O;
      } else result = createDict();
      return Properties === undefined ? result : dPs(result, Properties);
    };
    
    
    /***/ }),
    /* 46 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
    var $keys = __webpack_require__(113);
    var hiddenKeys = __webpack_require__(85).concat('length', 'prototype');
    
    exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
      return $keys(O, hiddenKeys);
    };
    
    
    /***/ }),
    /* 47 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var global = __webpack_require__(2);
    var dP = __webpack_require__(8);
    var DESCRIPTORS = __webpack_require__(7);
    var SPECIES = __webpack_require__(6)('species');
    
    module.exports = function (KEY) {
      var C = global[KEY];
      if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
        configurable: true,
        get: function () { return this; }
      });
    };
    
    
    /***/ }),
    /* 48 */
    /***/ (function(module, exports) {
    
    module.exports = function (it, Constructor, name, forbiddenField) {
      if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
        throw TypeError(name + ': incorrect invocation!');
      } return it;
    };
    
    
    /***/ }),
    /* 49 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var ctx = __webpack_require__(23);
    var call = __webpack_require__(125);
    var isArrayIter = __webpack_require__(98);
    var anObject = __webpack_require__(1);
    var toLength = __webpack_require__(9);
    var getIterFn = __webpack_require__(100);
    var BREAK = {};
    var RETURN = {};
    var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
      var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
      var f = ctx(fn, that, entries ? 2 : 1);
      var index = 0;
      var length, step, iterator, result;
      if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
      // fast case for arrays with default iterator
      if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
        result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
        if (result === BREAK || result === RETURN) return result;
      } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
        result = call(iterator, f, step.value, entries);
        if (result === BREAK || result === RETURN) return result;
      }
    };
    exports.BREAK = BREAK;
    exports.RETURN = RETURN;
    
    
    /***/ }),
    /* 50 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var redefine = __webpack_require__(15);
    module.exports = function (target, src, safe) {
      for (var key in src) redefine(target, key, src[key], safe);
      return target;
    };
    
    
    /***/ }),
    /* 51 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    var DOM = {};
    
    DOM.create = function (tagName, className) {
      var element = document.createElement(tagName);
      element.className = className;
      return element;
    };
    
    DOM.appendTo = function (child, parent) {
      parent.appendChild(child);
      return child;
    };
    
    function cssGet(element, styleName) {
      return window.getComputedStyle(element)[styleName];
    }
    
    function cssSet(element, styleName, styleValue) {
      if (typeof styleValue === 'number') {
        styleValue = styleValue.toString() + 'px';
      }
      element.style[styleName] = styleValue;
      return element;
    }
    
    function cssMultiSet(element, obj) {
      for (var key in obj) {
        var val = obj[key];
        if (typeof val === 'number') {
          val = val.toString() + 'px';
        }
        element.style[key] = val;
      }
      return element;
    }
    
    DOM.css = function (element, styleNameOrObject, styleValue) {
      if (typeof styleNameOrObject === 'object') {
        // multiple set with object
        return cssMultiSet(element, styleNameOrObject);
      } else {
        if (typeof styleValue === 'undefined') {
          return cssGet(element, styleNameOrObject);
        } else {
          return cssSet(element, styleNameOrObject, styleValue);
        }
      }
    };
    
    DOM.matches = function (element, query) {
      if (typeof element.matches !== 'undefined') {
        return element.matches(query);
      } else {
        // must be IE11 and Edge
        return element.msMatchesSelector(query);
      }
    };
    
    DOM.remove = function (element) {
      if (typeof element.remove !== 'undefined') {
        element.remove();
      } else {
        if (element.parentNode) {
          element.parentNode.removeChild(element);
        }
      }
    };
    
    DOM.queryChildren = function (element, selector) {
      return Array.prototype.filter.call(element.childNodes, function (child) {
        return DOM.matches(child, selector);
      });
    };
    
    module.exports = DOM;
    
    
    /***/ }),
    /* 52 */
    /***/ (function(module, exports, __webpack_require__) {
    
    /* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
     * VERSION: 0.1.4
     * DATE: 2017-06-19
     * UPDATES AND DOCS AT: http://greensock.com
     *
     * @license Copyright (c) 2008-2017, GreenSock. All rights reserved.
     * DrawSVGPlugin is a Club GreenSock membership benefit; You must have a valid membership to use
     * this code without violating the terms of use. Visit http://greensock.com/club/ to sign up or get more details.
     * This work is subject to the software agreement that was issued with your membership.
     * 
     * @author: Jack Doyle, jack@greensock.com
     */
    var _gsScope = (typeof(module) !== "undefined" && module.exports && typeof(global) !== "undefined") ? global : this || window; //helps ensure compatibility with AMD/RequireJS and CommonJS/Node
    (_gsScope._gsQueue || (_gsScope._gsQueue = [])).push( function() {
    
        "use strict";
    
        var _doc = _gsScope.document,
            _getComputedStyle = _doc.defaultView ? _doc.defaultView.getComputedStyle : function() {},
            _numbersExp = /(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/ig,
            _isEdge = (((_gsScope.navigator || {}).userAgent || "").indexOf("Edge") !== -1), //Microsoft Edge has a bug that causes it not to redraw the path correctly if the stroke-linecap is anything other than "butt" (like "round") and it doesn't match the stroke-linejoin. A way to trigger it is to change the stroke-miterlimit, so we'll only do that if/when we have to (to maximize performance)
            DrawSVGPlugin;
    
        function getDistance(x1, y1, x2, y2, scaleX, scaleY) {
            x2 = (parseFloat(x2 || 0) - parseFloat(x1 || 0)) * scaleX;
            y2 = (parseFloat(y2 || 0) - parseFloat(y1 || 0)) * scaleY;
            return Math.sqrt(x2 * x2 + y2 * y2);
        }
    
        function unwrap(element) {
            if (typeof(element) === "string" || !element.nodeType) {
                element = _gsScope.TweenLite.selector(element);
                if (element.length) {
                    element = element[0];
                }
            }
            return element;
        }
    
        //accepts values like "100%" or "20% 80%" or "20 50" and parses it into an absolute start and end position on the line/stroke based on its length. Returns an an array with the start and end values, like [0, 243]
        function parse(value, length, defaultStart) {
            var i = value.indexOf(" "),
                s, e;
            if (i === -1) {
                s = defaultStart !== undefined ? defaultStart + "" : value;
                e = value;
            } else {
                s = value.substr(0, i);
                e = value.substr(i+1);
            }
            s = (s.indexOf("%") !== -1) ? (parseFloat(s) / 100) * length : parseFloat(s);
            e = (e.indexOf("%") !== -1) ? (parseFloat(e) / 100) * length : parseFloat(e);
            return (s > e) ? [e, s] : [s, e];
        }
    
        function getLength(element) {
            if (!element) {
                return 0;
            }
            element = unwrap(element);
            var type = element.tagName.toLowerCase(),
                scaleX = 1,
                scaleY = 1,
                length, bbox, points, prevPoint, i, rx, ry;
            if (element.getAttribute("vector-effect") === "non-scaling-stroke") { //non-scaling-stroke basically scales the shape and then strokes it at the screen-level (after transforms), thus we need to adjust the length accordingly.
                scaleY = element.getScreenCTM();
                scaleX = scaleY.a;
                scaleY = scaleY.d;
            }
            try { //IE bug: calling <path>.getTotalLength() locks the repaint area of the stroke to whatever its current dimensions are on that frame/tick. To work around that, we must call getBBox() to force IE to recalculate things.
                bbox = element.getBBox(); //solely for fixing bug in IE - we don't actually use the bbox.
            } catch (e) {
                //firefox has a bug that throws an error if the element isn't visible.
            }
            if ((!bbox || (!bbox.width && !bbox.height)) && (type === "rect" || type === "circle" || type === "ellipse")) { //if the element isn't visible, try to discern width/height using its attributes.
                bbox = {
                    width: parseFloat( element.getAttribute( (type === "rect") ? "width" : (type === "circle") ? "r" : "rx")),
                    height: parseFloat( element.getAttribute( (type === "rect") ? "height" : (type === "circle") ? "r" : "ry") )
                };
                if (type !== "rect") {
                    bbox.width *= 2;
                    bbox.height *= 2;
                }
            }
            if (type === "path") {
                prevPoint = element.style.strokeDasharray;
                element.style.strokeDasharray = "none";
                length = element.getTotalLength() || 0;
                if (scaleX !== scaleY) {
                    console.log("Warning: <path> length cannot be measured accurately when vector-effect is non-scaling-stroke and the element isn't proportionally scaled.");
                }
                length *= (scaleX + scaleY) / 2;
                element.style.strokeDasharray = prevPoint;
            } else if (type === "rect") {
                length = bbox.width * 2 * scaleX + bbox.height * 2 * scaleY;
            } else if (type === "line") {
                length = getDistance(element.getAttribute("x1"), element.getAttribute("y1"), element.getAttribute("x2"), element.getAttribute("y2"), scaleX, scaleY);
            } else if (type === "polyline" || type === "polygon") {
                points = element.getAttribute("points").match(_numbersExp) || [];
                if (type === "polygon") {
                    points.push(points[0], points[1]);
                }
                length = 0;
                for (i = 2; i < points.length; i+=2) {
                    length += getDistance(points[i-2], points[i-1], points[i], points[i+1], scaleX, scaleY) || 0;
                }
            } else if (type === "circle" || type === "ellipse") {
                rx = (bbox.width / 2) * scaleX;
                ry = (bbox.height / 2) * scaleY;
                length = Math.PI * ( 3 * (rx + ry) - Math.sqrt((3 * rx + ry) * (rx + 3 * ry)) );
            }
            return length || 0;
        }
    
        function getPosition(element, length) {
            if (!element) {
                return [0, 0];
            }
            element = unwrap(element);
            length = length || (getLength(element) + 1);
            var cs = _getComputedStyle(element),
                dash = cs.strokeDasharray || "",
                offset = parseFloat(cs.strokeDashoffset),
                i = dash.indexOf(",");
            if (i < 0) {
                i = dash.indexOf(" ");
            }
            dash = (i < 0) ? length : parseFloat(dash.substr(0, i)) || 0.00001;
            if (dash > length) {
                dash = length;
            }
            return [Math.max(0, -offset), Math.max(0, dash - offset)];
        }
    
        DrawSVGPlugin = _gsScope._gsDefine.plugin({
            propName: "drawSVG",
            API: 2,
            version: "0.1.4",
            global: true,
            overwriteProps: ["drawSVG"],
    
            init: function(target, value, tween, index) {
                if (!target.getBBox) {
                    return false;
                }
                var length = getLength(target) + 1,
                    start, end, overage, cs;
                this._style = target.style;
                if (typeof(value) === "function") {
                    value = value(index, target);
                }
                if (value === true || value === "true") {
                    value = "0 100%";
                } else if (!value) {
                    value = "0 0";
                } else if ((value + "").indexOf(" ") === -1) {
                    value = "0 " + value;
                }
                start = getPosition(target, length);
                end = parse(value, length, start[0]);
                this._length = length + 10;
                if (start[0] === 0 && end[0] === 0) {
                    overage = Math.max(0.00001, end[1] - length); //allow people to go past the end, like values of 105% because for some paths, Firefox doesn't return an accurate getTotalLength(), so it could end up coming up short.
                    this._dash = length + overage;
                    this._offset = length - start[1] + overage;
                    this._addTween(this, "_offset", this._offset, length - end[1] + overage, "drawSVG");
                } else {
                    this._dash = (start[1] - start[0]) || 0.000001; //some browsers render artifacts if dash is 0, so we use a very small number in that case.
                    this._offset = -start[0];
                    this._addTween(this, "_dash", this._dash, (end[1] - end[0]) || 0.00001, "drawSVG");
                    this._addTween(this, "_offset", this._offset, -end[0], "drawSVG");
                }
                if (_isEdge) { //to work around a bug in Microsoft Edge, animate the stroke-miterlimit by 0.0001 just to trigger the repaint (only necessary if stroke-linecap isn't "butt"; also unnecessary if it's "round" and stroke-linejoin is also "round"). Imperceptible, relatively high-performance, and effective. Another option was to set the "d" <path> attribute to its current value on every tick, but that seems like it'd be much less performant.
                    cs = _getComputedStyle(target);
                    end = cs.strokeLinecap;
                    if (end !== "butt" && end !== cs.strokeLinejoin) {
                        end = parseFloat(cs.strokeMiterlimit);
                        this._addTween(target.style, "strokeMiterlimit", end, end + 0.0001, "strokeMiterlimit");
                    }
                }
                return true;
            },
    
            //called each time the values should be updated, and the ratio gets passed as the only parameter (typically it's a value between 0 and 1, but it can exceed those when using an ease like Elastic.easeOut or Back.easeOut, etc.)
            set: function(ratio) {
                if (this._firstPT) {
                    this._super.setRatio.call(this, ratio);
                    this._style.strokeDashoffset = this._offset;
                    if (ratio === 1 || ratio === 0) {
                        this._style.strokeDasharray = (this._offset < 0.001 && this._length - this._dash <= 10) ? "none" : (this._offset === this._dash) ? "0px, 999999px" : this._dash + "px," + this._length + "px";
                    } else {
                        this._style.strokeDasharray = this._dash + "px," + this._length + "px";
                    }
                }
            }
    
        });
    
        DrawSVGPlugin.getLength = getLength;
        DrawSVGPlugin.getPosition = getPosition;
    
    }); if (_gsScope._gsDefine) { _gsScope._gsQueue.pop()(); }
    //export to AMD/RequireJS and CommonJS/Node (precursor to full modular build system coming at a later date)
    (function(name) {
        "use strict";
        var getGlobal = function() {
            return (_gsScope.GreenSockGlobals || _gsScope)[name];
        };
        if (typeof(module) !== "undefined" && module.exports) { //node
            __webpack_require__(57);
            module.exports = getGlobal();
        } else if (true) { //AMD
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(57)], __WEBPACK_AMD_DEFINE_FACTORY__ = (getGlobal),
                    __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
                    (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
                    __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }
    }("DrawSVGPlugin"));
    /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(22)))
    
    /***/ }),
    /* 53 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var def = __webpack_require__(8).f;
    var has = __webpack_require__(13);
    var TAG = __webpack_require__(6)('toStringTag');
    
    module.exports = function (it, tag, stat) {
      if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
    };
    
    
    /***/ }),
    /* 54 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var $export = __webpack_require__(0);
    var defined = __webpack_require__(28);
    var fails = __webpack_require__(4);
    var spaces = __webpack_require__(88);
    var space = '[' + spaces + ']';
    var non = '\u200b\u0085';
    var ltrim = RegExp('^' + space + space + '*');
    var rtrim = RegExp(space + space + '*$');
    
    var exporter = function (KEY, exec, ALIAS) {
      var exp = {};
      var FORCE = fails(function () {
        return !!spaces[KEY]() || non[KEY]() != non;
      });
      var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
      if (ALIAS) exp[ALIAS] = fn;
      $export($export.P + $export.F * FORCE, 'String', exp);
    };
    
    // 1 -> String#trimLeft
    // 2 -> String#trimRight
    // 3 -> String#trim
    var trim = exporter.trim = function (string, TYPE) {
      string = String(defined(string));
      if (TYPE & 1) string = string.replace(ltrim, '');
      if (TYPE & 2) string = string.replace(rtrim, '');
      return string;
    };
    
    module.exports = exporter;
    
    
    /***/ }),
    /* 55 */
    /***/ (function(module, exports) {
    
    module.exports = {};
    
    
    /***/ }),
    /* 56 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var isObject = __webpack_require__(5);
    module.exports = function (it, TYPE) {
      if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
      return it;
    };
    
    
    /***/ }),
    /* 57 */
    /***/ (function(module, exports, __webpack_require__) {
    
    /* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
     * VERSION: 1.20.2
     * DATE: 2017-06-30
     * UPDATES AND DOCS AT: http://greensock.com
     *
     * @license Copyright (c) 2008-2017, GreenSock. All rights reserved.
     * This work is subject to the terms at http://greensock.com/standard-license or for
     * Club GreenSock members, the software agreement that was issued with your membership.
     * 
     * @author: Jack Doyle, jack@greensock.com
     */
    (function(window, moduleName) {
    
            "use strict";
            var _exports = {},
                _doc = window.document,
                _globals = window.GreenSockGlobals = window.GreenSockGlobals || window;
            if (_globals.TweenLite) {
                return; //in case the core set of classes is already loaded, don't instantiate twice.
            }
            var _namespace = function(ns) {
                    var a = ns.split("."),
                        p = _globals, i;
                    for (i = 0; i < a.length; i++) {
                        p[a[i]] = p = p[a[i]] || {};
                    }
                    return p;
                },
                gs = _namespace("com.greensock"),
                _tinyNum = 0.0000000001,
                _slice = function(a) { //don't use Array.prototype.slice.call(target, 0) because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()
                    var b = [],
                        l = a.length,
                        i;
                    for (i = 0; i !== l; b.push(a[i++])) {}
                    return b;
                },
                _emptyFunc = function() {},
                _isArray = (function() { //works around issues in iframe environments where the Array global isn't shared, thus if the object originates in a different window/iframe, "(obj instanceof Array)" will evaluate false. We added some speed optimizations to avoid Object.prototype.toString.call() unless it's absolutely necessary because it's VERY slow (like 20x slower)
                    var toString = Object.prototype.toString,
                        array = toString.call([]);
                    return function(obj) {
                        return obj != null && (obj instanceof Array || (typeof(obj) === "object" && !!obj.push && toString.call(obj) === array));
                    };
                }()),
                a, i, p, _ticker, _tickerActive,
                _defLookup = {},
    
                /**
                 * @constructor
                 * Defines a GreenSock class, optionally with an array of dependencies that must be instantiated first and passed into the definition.
                 * This allows users to load GreenSock JS files in any order even if they have interdependencies (like CSSPlugin extends TweenPlugin which is
                 * inside TweenLite.js, but if CSSPlugin is loaded first, it should wait to run its code until TweenLite.js loads and instantiates TweenPlugin
                 * and then pass TweenPlugin to CSSPlugin's definition). This is all done automatically and internally.
                 *
                 * Every definition will be added to a "com.greensock" global object (typically window, but if a window.GreenSockGlobals object is found,
                 * it will go there as of v1.7). For example, TweenLite will be found at window.com.greensock.TweenLite and since it's a global class that should be available anywhere,
                 * it is ALSO referenced at window.TweenLite. However some classes aren't considered global, like the base com.greensock.core.Animation class, so
                 * those will only be at the package like window.com.greensock.core.Animation. Again, if you define a GreenSockGlobals object on the window, everything
                 * gets tucked neatly inside there instead of on the window directly. This allows you to do advanced things like load multiple versions of GreenSock
                 * files and put them into distinct objects (imagine a banner ad uses a newer version but the main site uses an older one). In that case, you could
                 * sandbox the banner one like:
                 *
                 * <script>
                 *     var gs = window.GreenSockGlobals = {}; //the newer version we're about to load could now be referenced in a "gs" object, like gs.TweenLite.to(...). Use whatever alias you want as long as it's unique, "gs" or "banner" or whatever.
                 * </script>
                 * <script src="js/greensock/v1.7/TweenMax.js"></script>
                 * <script>
                 *     window.GreenSockGlobals = window._gsQueue = window._gsDefine = null; //reset it back to null (along with the special _gsQueue variable) so that the next load of TweenMax affects the window and we can reference things directly like TweenLite.to(...)
                 * </script>
                 * <script src="js/greensock/v1.6/TweenMax.js"></script>
                 * <script>
                 *     gs.TweenLite.to(...); //would use v1.7
                 *     TweenLite.to(...); //would use v1.6
                 * </script>
                 *
                 * @param {!string} ns The namespace of the class definition, leaving off "com.greensock." as that's assumed. For example, "TweenLite" or "plugins.CSSPlugin" or "easing.Back".
                 * @param {!Array.<string>} dependencies An array of dependencies (described as their namespaces minus "com.greensock." prefix). For example ["TweenLite","plugins.TweenPlugin","core.Animation"]
                 * @param {!function():Object} func The function that should be called and passed the resolved dependencies which will return the actual class for this definition.
                 * @param {boolean=} global If true, the class will be added to the global scope (typically window unless you define a window.GreenSockGlobals object)
                 */
                Definition = function(ns, dependencies, func, global) {
                    this.sc = (_defLookup[ns]) ? _defLookup[ns].sc : []; //subclasses
                    _defLookup[ns] = this;
                    this.gsClass = null;
                    this.func = func;
                    var _classes = [];
                    this.check = function(init) {
                        var i = dependencies.length,
                            missing = i,
                            cur, a, n, cl;
                        while (--i > -1) {
                            if ((cur = _defLookup[dependencies[i]] || new Definition(dependencies[i], [])).gsClass) {
                                _classes[i] = cur.gsClass;
                                missing--;
                            } else if (init) {
                                cur.sc.push(this);
                            }
                        }
                        if (missing === 0 && func) {
                            a = ("com.greensock." + ns).split(".");
                            n = a.pop();
                            cl = _namespace(a.join("."))[n] = this.gsClass = func.apply(func, _classes);
    
                            //exports to multiple environments
                            if (global) {
                                _globals[n] = _exports[n] = cl; //provides a way to avoid global namespace pollution. By default, the main classes like TweenLite, Power1, Strong, etc. are added to window unless a GreenSockGlobals is defined. So if you want to have things added to a custom object instead, just do something like window.GreenSockGlobals = {} before loading any GreenSock files. You can even set up an alias like window.GreenSockGlobals = windows.gs = {} so that you can access everything like gs.TweenLite. Also remember that ALL classes are added to the window.com.greensock object (in their respective packages, like com.greensock.easing.Power1, com.greensock.TweenLite, etc.)
                                if (typeof(module) !== "undefined" && module.exports) { //node
                                    if (ns === moduleName) {
                                        module.exports = _exports[moduleName] = cl;
                                        for (i in _exports) {
                                            cl[i] = _exports[i];
                                        }
                                    } else if (_exports[moduleName]) {
                                        _exports[moduleName][n] = cl;
                                    }
                                } else if (true){ //AMD
                                    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() { return cl; }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
                    __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                                }
                            }
                            for (i = 0; i < this.sc.length; i++) {
                                this.sc[i].check();
                            }
                        }
                    };
                    this.check(true);
                },
    
                //used to create Definition instances (which basically registers a class that has dependencies).
                _gsDefine = window._gsDefine = function(ns, dependencies, func, global) {
                    return new Definition(ns, dependencies, func, global);
                },
    
                //a quick way to create a class that doesn't have any dependencies. Returns the class, but first registers it in the GreenSock namespace so that other classes can grab it (other classes might be dependent on the class).
                _class = gs._class = function(ns, func, global) {
                    func = func || function() {};
                    _gsDefine(ns, [], function(){ return func; }, global);
                    return func;
                };
    
            _gsDefine.globals = _globals;
    
    
    
    /*
     * ----------------------------------------------------------------
     * Ease
     * ----------------------------------------------------------------
     */
            var _baseParams = [0, 0, 1, 1],
                Ease = _class("easing.Ease", function(func, extraParams, type, power) {
                    this._func = func;
                    this._type = type || 0;
                    this._power = power || 0;
                    this._params = extraParams ? _baseParams.concat(extraParams) : _baseParams;
                }, true),
                _easeMap = Ease.map = {},
                _easeReg = Ease.register = function(ease, names, types, create) {
                    var na = names.split(","),
                        i = na.length,
                        ta = (types || "easeIn,easeOut,easeInOut").split(","),
                        e, name, j, type;
                    while (--i > -1) {
                        name = na[i];
                        e = create ? _class("easing."+name, null, true) : gs.easing[name] || {};
                        j = ta.length;
                        while (--j > -1) {
                            type = ta[j];
                            _easeMap[name + "." + type] = _easeMap[type + name] = e[type] = ease.getRatio ? ease : ease[type] || new ease();
                        }
                    }
                };
    
            p = Ease.prototype;
            p._calcEnd = false;
            p.getRatio = function(p) {
                if (this._func) {
                    this._params[0] = p;
                    return this._func.apply(null, this._params);
                }
                var t = this._type,
                    pw = this._power,
                    r = (t === 1) ? 1 - p : (t === 2) ? p : (p < 0.5) ? p * 2 : (1 - p) * 2;
                if (pw === 1) {
                    r *= r;
                } else if (pw === 2) {
                    r *= r * r;
                } else if (pw === 3) {
                    r *= r * r * r;
                } else if (pw === 4) {
                    r *= r * r * r * r;
                }
                return (t === 1) ? 1 - r : (t === 2) ? r : (p < 0.5) ? r / 2 : 1 - (r / 2);
            };
    
            //create all the standard eases like Linear, Quad, Cubic, Quart, Quint, Strong, Power0, Power1, Power2, Power3, and Power4 (each with easeIn, easeOut, and easeInOut)
            a = ["Linear","Quad","Cubic","Quart","Quint,Strong"];
            i = a.length;
            while (--i > -1) {
                p = a[i]+",Power"+i;
                _easeReg(new Ease(null,null,1,i), p, "easeOut", true);
                _easeReg(new Ease(null,null,2,i), p, "easeIn" + ((i === 0) ? ",easeNone" : ""));
                _easeReg(new Ease(null,null,3,i), p, "easeInOut");
            }
            _easeMap.linear = gs.easing.Linear.easeIn;
            _easeMap.swing = gs.easing.Quad.easeInOut; //for jQuery folks
    
    
    /*
     * ----------------------------------------------------------------
     * EventDispatcher
     * ----------------------------------------------------------------
     */
            var EventDispatcher = _class("events.EventDispatcher", function(target) {
                this._listeners = {};
                this._eventTarget = target || this;
            });
            p = EventDispatcher.prototype;
    
            p.addEventListener = function(type, callback, scope, useParam, priority) {
                priority = priority || 0;
                var list = this._listeners[type],
                    index = 0,
                    listener, i;
                if (this === _ticker && !_tickerActive) {
                    _ticker.wake();
                }
                if (list == null) {
                    this._listeners[type] = list = [];
                }
                i = list.length;
                while (--i > -1) {
                    listener = list[i];
                    if (listener.c === callback && listener.s === scope) {
                        list.splice(i, 1);
                    } else if (index === 0 && listener.pr < priority) {
                        index = i + 1;
                    }
                }
                list.splice(index, 0, {c:callback, s:scope, up:useParam, pr:priority});
            };
    
            p.removeEventListener = function(type, callback) {
                var list = this._listeners[type], i;
                if (list) {
                    i = list.length;
                    while (--i > -1) {
                        if (list[i].c === callback) {
                            list.splice(i, 1);
                            return;
                        }
                    }
                }
            };
    
            p.dispatchEvent = function(type) {
                var list = this._listeners[type],
                    i, t, listener;
                if (list) {
                    i = list.length;
                    if (i > 1) { 
                        list = list.slice(0); //in case addEventListener() is called from within a listener/callback (otherwise the index could change, resulting in a skip)
                    }
                    t = this._eventTarget;
                    while (--i > -1) {
                        listener = list[i];
                        if (listener) {
                            if (listener.up) {
                                listener.c.call(listener.s || t, {type:type, target:t});
                            } else {
                                listener.c.call(listener.s || t);
                            }
                        }
                    }
                }
            };
    
    
    /*
     * ----------------------------------------------------------------
     * Ticker
     * ----------------------------------------------------------------
     */
             var _reqAnimFrame = window.requestAnimationFrame,
                _cancelAnimFrame = window.cancelAnimationFrame,
                _getTime = Date.now || function() {return new Date().getTime();},
                _lastUpdate = _getTime();
    
            //now try to determine the requestAnimationFrame and cancelAnimationFrame functions and if none are found, we'll use a setTimeout()/clearTimeout() polyfill.
            a = ["ms","moz","webkit","o"];
            i = a.length;
            while (--i > -1 && !_reqAnimFrame) {
                _reqAnimFrame = window[a[i] + "RequestAnimationFrame"];
                _cancelAnimFrame = window[a[i] + "CancelAnimationFrame"] || window[a[i] + "CancelRequestAnimationFrame"];
            }
    
            _class("Ticker", function(fps, useRAF) {
                var _self = this,
                    _startTime = _getTime(),
                    _useRAF = (useRAF !== false && _reqAnimFrame) ? "auto" : false,
                    _lagThreshold = 500,
                    _adjustedLag = 33,
                    _tickWord = "tick", //helps reduce gc burden
                    _fps, _req, _id, _gap, _nextTime,
                    _tick = function(manual) {
                        var elapsed = _getTime() - _lastUpdate,
                            overlap, dispatch;
                        if (elapsed > _lagThreshold) {
                            _startTime += elapsed - _adjustedLag;
                        }
                        _lastUpdate += elapsed;
                        _self.time = (_lastUpdate - _startTime) / 1000;
                        overlap = _self.time - _nextTime;
                        if (!_fps || overlap > 0 || manual === true) {
                            _self.frame++;
                            _nextTime += overlap + (overlap >= _gap ? 0.004 : _gap - overlap);
                            dispatch = true;
                        }
                        if (manual !== true) { //make sure the request is made before we dispatch the "tick" event so that timing is maintained. Otherwise, if processing the "tick" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.
                            _id = _req(_tick);
                        }
                        if (dispatch) {
                            _self.dispatchEvent(_tickWord);
                        }
                    };
    
                EventDispatcher.call(_self);
                _self.time = _self.frame = 0;
                _self.tick = function() {
                    _tick(true);
                };
    
                _self.lagSmoothing = function(threshold, adjustedLag) {
                    _lagThreshold = threshold || (1 / _tinyNum); //zero should be interpreted as basically unlimited
                    _adjustedLag = Math.min(adjustedLag, _lagThreshold, 0);
                };
    
                _self.sleep = function() {
                    if (_id == null) {
                        return;
                    }
                    if (!_useRAF || !_cancelAnimFrame) {
                        clearTimeout(_id);
                    } else {
                        _cancelAnimFrame(_id);
                    }
                    _req = _emptyFunc;
                    _id = null;
                    if (_self === _ticker) {
                        _tickerActive = false;
                    }
                };
    
                _self.wake = function(seamless) {
                    if (_id !== null) {
                        _self.sleep();
                    } else if (seamless) {
                        _startTime += -_lastUpdate + (_lastUpdate = _getTime());
                    } else if (_self.frame > 10) { //don't trigger lagSmoothing if we're just waking up, and make sure that at least 10 frames have elapsed because of the iOS bug that we work around below with the 1.5-second setTimout().
                        _lastUpdate = _getTime() - _lagThreshold + 5;
                    }
                    _req = (_fps === 0) ? _emptyFunc : (!_useRAF || !_reqAnimFrame) ? function(f) { return setTimeout(f, ((_nextTime - _self.time) * 1000 + 1) | 0); } : _reqAnimFrame;
                    if (_self === _ticker) {
                        _tickerActive = true;
                    }
                    _tick(2);
                };
    
                _self.fps = function(value) {
                    if (!arguments.length) {
                        return _fps;
                    }
                    _fps = value;
                    _gap = 1 / (_fps || 60);
                    _nextTime = this.time + _gap;
                    _self.wake();
                };
    
                _self.useRAF = function(value) {
                    if (!arguments.length) {
                        return _useRAF;
                    }
                    _self.sleep();
                    _useRAF = value;
                    _self.fps(_fps);
                };
                _self.fps(fps);
    
                //a bug in iOS 6 Safari occasionally prevents the requestAnimationFrame from working initially, so we use a 1.5-second timeout that automatically falls back to setTimeout() if it senses this condition.
                setTimeout(function() {
                    if (_useRAF === "auto" && _self.frame < 5 && _doc.visibilityState !== "hidden") {
                        _self.useRAF(false);
                    }
                }, 1500);
            });
    
            p = gs.Ticker.prototype = new gs.events.EventDispatcher();
            p.constructor = gs.Ticker;
    
    
    /*
     * ----------------------------------------------------------------
     * Animation
     * ----------------------------------------------------------------
     */
            var Animation = _class("core.Animation", function(duration, vars) {
                    this.vars = vars = vars || {};
                    this._duration = this._totalDuration = duration || 0;
                    this._delay = Number(vars.delay) || 0;
                    this._timeScale = 1;
                    this._active = (vars.immediateRender === true);
                    this.data = vars.data;
                    this._reversed = (vars.reversed === true);
    
                    if (!_rootTimeline) {
                        return;
                    }
                    if (!_tickerActive) { //some browsers (like iOS 6 Safari) shut down JavaScript execution when the tab is disabled and they [occasionally] neglect to start up requestAnimationFrame again when returning - this code ensures that the engine starts up again properly.
                        _ticker.wake();
                    }
    
                    var tl = this.vars.useFrames ? _rootFramesTimeline : _rootTimeline;
                    tl.add(this, tl._time);
    
                    if (this.vars.paused) {
                        this.paused(true);
                    }
                });
    
            _ticker = Animation.ticker = new gs.Ticker();
            p = Animation.prototype;
            p._dirty = p._gc = p._initted = p._paused = false;
            p._totalTime = p._time = 0;
            p._rawPrevTime = -1;
            p._next = p._last = p._onUpdate = p._timeline = p.timeline = null;
            p._paused = false;
    
    
            //some browsers (like iOS) occasionally drop the requestAnimationFrame event when the user switches to a different tab and then comes back again, so we use a 2-second setTimeout() to sense if/when that condition occurs and then wake() the ticker.
            var _checkTimeout = function() {
                    if (_tickerActive && _getTime() - _lastUpdate > 2000 && _doc.visibilityState !== "hidden") {
                        _ticker.wake();
                    }
                    var t = setTimeout(_checkTimeout, 2000);
                    if (t.unref) {
                        // allows a node process to exit even if the timeout’s callback hasn't been invoked. Without it, the node process could hang as this function is called every two seconds.
                        t.unref();
                    }
                };
            _checkTimeout();
    
    
            p.play = function(from, suppressEvents) {
                if (from != null) {
                    this.seek(from, suppressEvents);
                }
                return this.reversed(false).paused(false);
            };
    
            p.pause = function(atTime, suppressEvents) {
                if (atTime != null) {
                    this.seek(atTime, suppressEvents);
                }
                return this.paused(true);
            };
    
            p.resume = function(from, suppressEvents) {
                if (from != null) {
                    this.seek(from, suppressEvents);
                }
                return this.paused(false);
            };
    
            p.seek = function(time, suppressEvents) {
                return this.totalTime(Number(time), suppressEvents !== false);
            };
    
            p.restart = function(includeDelay, suppressEvents) {
                return this.reversed(false).paused(false).totalTime(includeDelay ? -this._delay : 0, (suppressEvents !== false), true);
            };
    
            p.reverse = function(from, suppressEvents) {
                if (from != null) {
                    this.seek((from || this.totalDuration()), suppressEvents);
                }
                return this.reversed(true).paused(false);
            };
    
            p.render = function(time, suppressEvents, force) {
                //stub - we override this method in subclasses.
            };
    
            p.invalidate = function() {
                this._time = this._totalTime = 0;
                this._initted = this._gc = false;
                this._rawPrevTime = -1;
                if (this._gc || !this.timeline) {
                    this._enabled(true);
                }
                return this;
            };
    
            p.isActive = function() {
                var tl = this._timeline, //the 2 root timelines won't have a _timeline; they're always active.
                    startTime = this._startTime,
                    rawTime;
                return (!tl || (!this._gc && !this._paused && tl.isActive() && (rawTime = tl.rawTime(true)) >= startTime && rawTime < startTime + this.totalDuration() / this._timeScale - 0.0000001));
            };
    
            p._enabled = function (enabled, ignoreTimeline) {
                if (!_tickerActive) {
                    _ticker.wake();
                }
                this._gc = !enabled;
                this._active = this.isActive();
                if (ignoreTimeline !== true) {
                    if (enabled && !this.timeline) {
                        this._timeline.add(this, this._startTime - this._delay);
                    } else if (!enabled && this.timeline) {
                        this._timeline._remove(this, true);
                    }
                }
                return false;
            };
    
    
            p._kill = function(vars, target) {
                return this._enabled(false, false);
            };
    
            p.kill = function(vars, target) {
                this._kill(vars, target);
                return this;
            };
    
            p._uncache = function(includeSelf) {
                var tween = includeSelf ? this : this.timeline;
                while (tween) {
                    tween._dirty = true;
                    tween = tween.timeline;
                }
                return this;
            };
    
            p._swapSelfInParams = function(params) {
                var i = params.length,
                    copy = params.concat();
                while (--i > -1) {
                    if (params[i] === "{self}") {
                        copy[i] = this;
                    }
                }
                return copy;
            };
    
            p._callback = function(type) {
                var v = this.vars,
                    callback = v[type],
                    params = v[type + "Params"],
                    scope = v[type + "Scope"] || v.callbackScope || this,
                    l = params ? params.length : 0;
                switch (l) { //speed optimization; call() is faster than apply() so use it when there are only a few parameters (which is by far most common). Previously we simply did var v = this.vars; v[type].apply(v[type + "Scope"] || v.callbackScope || this, v[type + "Params"] || _blankArray);
                    case 0: callback.call(scope); break;
                    case 1: callback.call(scope, params[0]); break;
                    case 2: callback.call(scope, params[0], params[1]); break;
                    default: callback.apply(scope, params);
                }
            };
    
    //----Animation getters/setters --------------------------------------------------------
    
            p.eventCallback = function(type, callback, params, scope) {
                if ((type || "").substr(0,2) === "on") {
                    var v = this.vars;
                    if (arguments.length === 1) {
                        return v[type];
                    }
                    if (callback == null) {
                        delete v[type];
                    } else {
                        v[type] = callback;
                        v[type + "Params"] = (_isArray(params) && params.join("").indexOf("{self}") !== -1) ? this._swapSelfInParams(params) : params;
                        v[type + "Scope"] = scope;
                    }
                    if (type === "onUpdate") {
                        this._onUpdate = callback;
                    }
                }
                return this;
            };
    
            p.delay = function(value) {
                if (!arguments.length) {
                    return this._delay;
                }
                if (this._timeline.smoothChildTiming) {
                    this.startTime( this._startTime + value - this._delay );
                }
                this._delay = value;
                return this;
            };
    
            p.duration = function(value) {
                if (!arguments.length) {
                    this._dirty = false;
                    return this._duration;
                }
                this._duration = this._totalDuration = value;
                this._uncache(true); //true in case it's a TweenMax or TimelineMax that has a repeat - we'll need to refresh the totalDuration.
                if (this._timeline.smoothChildTiming) if (this._time > 0) if (this._time < this._duration) if (value !== 0) {
                    this.totalTime(this._totalTime * (value / this._duration), true);
                }
                return this;
            };
    
            p.totalDuration = function(value) {
                this._dirty = false;
                return (!arguments.length) ? this._totalDuration : this.duration(value);
            };
    
            p.time = function(value, suppressEvents) {
                if (!arguments.length) {
                    return this._time;
                }
                if (this._dirty) {
                    this.totalDuration();
                }
                return this.totalTime((value > this._duration) ? this._duration : value, suppressEvents);
            };
    
            p.totalTime = function(time, suppressEvents, uncapped) {
                if (!_tickerActive) {
                    _ticker.wake();
                }
                if (!arguments.length) {
                    return this._totalTime;
                }
                if (this._timeline) {
                    if (time < 0 && !uncapped) {
                        time += this.totalDuration();
                    }
                    if (this._timeline.smoothChildTiming) {
                        if (this._dirty) {
                            this.totalDuration();
                        }
                        var totalDuration = this._totalDuration,
                            tl = this._timeline;
                        if (time > totalDuration && !uncapped) {
                            time = totalDuration;
                        }
                        this._startTime = (this._paused ? this._pauseTime : tl._time) - ((!this._reversed ? time : totalDuration - time) / this._timeScale);
                        if (!tl._dirty) { //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.
                            this._uncache(false);
                        }
                        //in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The startTime of that child would get pushed out, but one of the ancestors may have completed.
                        if (tl._timeline) {
                            while (tl._timeline) {
                                if (tl._timeline._time !== (tl._startTime + tl._totalTime) / tl._timeScale) {
                                    tl.totalTime(tl._totalTime, true);
                                }
                                tl = tl._timeline;
                            }
                        }
                    }
                    if (this._gc) {
                        this._enabled(true, false);
                    }
                    if (this._totalTime !== time || this._duration === 0) {
                        if (_lazyTweens.length) {
                            _lazyRender();
                        }
                        this.render(time, suppressEvents, false);
                        if (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.
                            _lazyRender();
                        }
                    }
                }
                return this;
            };
    
            p.progress = p.totalProgress = function(value, suppressEvents) {
                var duration = this.duration();
                return (!arguments.length) ? (duration ? this._time / duration : this.ratio) : this.totalTime(duration * value, suppressEvents);
            };
    
            p.startTime = function(value) {
                if (!arguments.length) {
                    return this._startTime;
                }
                if (value !== this._startTime) {
                    this._startTime = value;
                    if (this.timeline) if (this.timeline._sortChildren) {
                        this.timeline.add(this, value - this._delay); //ensures that any necessary re-sequencing of Animations in the timeline occurs to make sure the rendering order is correct.
                    }
                }
                return this;
            };
    
            p.endTime = function(includeRepeats) {
                return this._startTime + ((includeRepeats != false) ? this.totalDuration() : this.duration()) / this._timeScale;
            };
    
            p.timeScale = function(value) {
                if (!arguments.length) {
                    return this._timeScale;
                }
                value = value || _tinyNum; //can't allow zero because it'll throw the math off
                if (this._timeline && this._timeline.smoothChildTiming) {
                    var pauseTime = this._pauseTime,
                        t = (pauseTime || pauseTime === 0) ? pauseTime : this._timeline.totalTime();
                    this._startTime = t - ((t - this._startTime) * this._timeScale / value);
                }
                this._timeScale = value;
                return this._uncache(false);
            };
    
            p.reversed = function(value) {
                if (!arguments.length) {
                    return this._reversed;
                }
                if (value != this._reversed) {
                    this._reversed = value;
                    this.totalTime(((this._timeline && !this._timeline.smoothChildTiming) ? this.totalDuration() - this._totalTime : this._totalTime), true);
                }
                return this;
            };
    
            p.paused = function(value) {
                if (!arguments.length) {
                    return this._paused;
                }
                var tl = this._timeline,
                    raw, elapsed;
                if (value != this._paused) if (tl) {
                    if (!_tickerActive && !value) {
                        _ticker.wake();
                    }
                    raw = tl.rawTime();
                    elapsed = raw - this._pauseTime;
                    if (!value && tl.smoothChildTiming) {
                        this._startTime += elapsed;
                        this._uncache(false);
                    }
                    this._pauseTime = value ? raw : null;
                    this._paused = value;
                    this._active = this.isActive();
                    if (!value && elapsed !== 0 && this._initted && this.duration()) {
                        raw = tl.smoothChildTiming ? this._totalTime : (raw - this._startTime) / this._timeScale;
                        this.render(raw, (raw === this._totalTime), true); //in case the target's properties changed via some other tween or manual update by the user, we should force a render.
                    }
                }
                if (this._gc && !value) {
                    this._enabled(true, false);
                }
                return this;
            };
    
    
    /*
     * ----------------------------------------------------------------
     * SimpleTimeline
     * ----------------------------------------------------------------
     */
            var SimpleTimeline = _class("core.SimpleTimeline", function(vars) {
                Animation.call(this, 0, vars);
                this.autoRemoveChildren = this.smoothChildTiming = true;
            });
    
            p = SimpleTimeline.prototype = new Animation();
            p.constructor = SimpleTimeline;
            p.kill()._gc = false;
            p._first = p._last = p._recent = null;
            p._sortChildren = false;
    
            p.add = p.insert = function(child, position, align, stagger) {
                var prevTween, st;
                child._startTime = Number(position || 0) + child._delay;
                if (child._paused) if (this !== child._timeline) { //we only adjust the _pauseTime if it wasn't in this timeline already. Remember, sometimes a tween will be inserted again into the same timeline when its startTime is changed so that the tweens in the TimelineLite/Max are re-ordered properly in the linked list (so everything renders in the proper order).
                    child._pauseTime = child._startTime + ((this.rawTime() - child._startTime) / child._timeScale);
                }
                if (child.timeline) {
                    child.timeline._remove(child, true); //removes from existing timeline so that it can be properly added to this one.
                }
                child.timeline = child._timeline = this;
                if (child._gc) {
                    child._enabled(true, true);
                }
                prevTween = this._last;
                if (this._sortChildren) {
                    st = child._startTime;
                    while (prevTween && prevTween._startTime > st) {
                        prevTween = prevTween._prev;
                    }
                }
                if (prevTween) {
                    child._next = prevTween._next;
                    prevTween._next = child;
                } else {
                    child._next = this._first;
                    this._first = child;
                }
                if (child._next) {
                    child._next._prev = child;
                } else {
                    this._last = child;
                }
                child._prev = prevTween;
                this._recent = child;
                if (this._timeline) {
                    this._uncache(true);
                }
                return this;
            };
    
            p._remove = function(tween, skipDisable) {
                if (tween.timeline === this) {
                    if (!skipDisable) {
                        tween._enabled(false, true);
                    }
    
                    if (tween._prev) {
                        tween._prev._next = tween._next;
                    } else if (this._first === tween) {
                        this._first = tween._next;
                    }
                    if (tween._next) {
                        tween._next._prev = tween._prev;
                    } else if (this._last === tween) {
                        this._last = tween._prev;
                    }
                    tween._next = tween._prev = tween.timeline = null;
                    if (tween === this._recent) {
                        this._recent = this._last;
                    }
    
                    if (this._timeline) {
                        this._uncache(true);
                    }
                }
                return this;
            };
    
            p.render = function(time, suppressEvents, force) {
                var tween = this._first,
                    next;
                this._totalTime = this._time = this._rawPrevTime = time;
                while (tween) {
                    next = tween._next; //record it here because the value could change after rendering...
                    if (tween._active || (time >= tween._startTime && !tween._paused && !tween._gc)) {
                        if (!tween._reversed) {
                            tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
                        } else {
                            tween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);
                        }
                    }
                    tween = next;
                }
            };
    
            p.rawTime = function() {
                if (!_tickerActive) {
                    _ticker.wake();
                }
                return this._totalTime;
            };
    
    /*
     * ----------------------------------------------------------------
     * TweenLite
     * ----------------------------------------------------------------
     */
            var TweenLite = _class("TweenLite", function(target, duration, vars) {
                    Animation.call(this, duration, vars);
                    this.render = TweenLite.prototype.render; //speed optimization (avoid prototype lookup on this "hot" method)
    
                    if (target == null) {
                        throw "Cannot tween a null target.";
                    }
    
                    this.target = target = (typeof(target) !== "string") ? target : TweenLite.selector(target) || target;
    
                    var isSelector = (target.jquery || (target.length && target !== window && target[0] && (target[0] === window || (target[0].nodeType && target[0].style && !target.nodeType)))),
                        overwrite = this.vars.overwrite,
                        i, targ, targets;
    
                    this._overwrite = overwrite = (overwrite == null) ? _overwriteLookup[TweenLite.defaultOverwrite] : (typeof(overwrite) === "number") ? overwrite >> 0 : _overwriteLookup[overwrite];
    
                    if ((isSelector || target instanceof Array || (target.push && _isArray(target))) && typeof(target[0]) !== "number") {
                        this._targets = targets = _slice(target);  //don't use Array.prototype.slice.call(target, 0) because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()
                        this._propLookup = [];
                        this._siblings = [];
                        for (i = 0; i < targets.length; i++) {
                            targ = targets[i];
                            if (!targ) {
                                targets.splice(i--, 1);
                                continue;
                            } else if (typeof(targ) === "string") {
                                targ = targets[i--] = TweenLite.selector(targ); //in case it's an array of strings
                                if (typeof(targ) === "string") {
                                    targets.splice(i+1, 1); //to avoid an endless loop (can't imagine why the selector would return a string, but just in case)
                                }
                                continue;
                            } else if (targ.length && targ !== window && targ[0] && (targ[0] === window || (targ[0].nodeType && targ[0].style && !targ.nodeType))) { //in case the user is passing in an array of selector objects (like jQuery objects), we need to check one more level and pull things out if necessary. Also note that <select> elements pass all the criteria regarding length and the first child having style, so we must also check to ensure the target isn't an HTML node itself.
                                targets.splice(i--, 1);
                                this._targets = targets = targets.concat(_slice(targ));
                                continue;
                            }
                            this._siblings[i] = _register(targ, this, false);
                            if (overwrite === 1) if (this._siblings[i].length > 1) {
                                _applyOverwrite(targ, this, null, 1, this._siblings[i]);
                            }
                        }
    
                    } else {
                        this._propLookup = {};
                        this._siblings = _register(target, this, false);
                        if (overwrite === 1) if (this._siblings.length > 1) {
                            _applyOverwrite(target, this, null, 1, this._siblings);
                        }
                    }
                    if (this.vars.immediateRender || (duration === 0 && this._delay === 0 && this.vars.immediateRender !== false)) {
                        this._time = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)
                        this.render(Math.min(0, -this._delay)); //in case delay is negative
                    }
                }, true),
                _isSelector = function(v) {
                    return (v && v.length && v !== window && v[0] && (v[0] === window || (v[0].nodeType && v[0].style && !v.nodeType))); //we cannot check "nodeType" if the target is window from within an iframe, otherwise it will trigger a security error in some browsers like Firefox.
                },
                _autoCSS = function(vars, target) {
                    var css = {},
                        p;
                    for (p in vars) {
                        if (!_reservedProps[p] && (!(p in target) || p === "transform" || p === "x" || p === "y" || p === "width" || p === "height" || p === "className" || p === "border") && (!_plugins[p] || (_plugins[p] && _plugins[p]._autoCSS))) { //note: <img> elements contain read-only "x" and "y" properties. We should also prioritize editing css width/height rather than the element's properties.
                            css[p] = vars[p];
                            delete vars[p];
                        }
                    }
                    vars.css = css;
                };
    
            p = TweenLite.prototype = new Animation();
            p.constructor = TweenLite;
            p.kill()._gc = false;
    
    //----TweenLite defaults, overwrite management, and root updates ----------------------------------------------------
    
            p.ratio = 0;
            p._firstPT = p._targets = p._overwrittenProps = p._startAt = null;
            p._notifyPluginsOfEnabled = p._lazy = false;
    
            TweenLite.version = "1.20.2";
            TweenLite.defaultEase = p._ease = new Ease(null, null, 1, 1);
            TweenLite.defaultOverwrite = "auto";
            TweenLite.ticker = _ticker;
            TweenLite.autoSleep = 120;
            TweenLite.lagSmoothing = function(threshold, adjustedLag) {
                _ticker.lagSmoothing(threshold, adjustedLag);
            };
    
            TweenLite.selector = window.$ || window.jQuery || function(e) {
                var selector = window.$ || window.jQuery;
                if (selector) {
                    TweenLite.selector = selector;
                    return selector(e);
                }
                return (typeof(_doc) === "undefined") ? e : (_doc.querySelectorAll ? _doc.querySelectorAll(e) : _doc.getElementById((e.charAt(0) === "#") ? e.substr(1) : e));
            };
    
            var _lazyTweens = [],
                _lazyLookup = {},
                _numbersExp = /(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/ig,
                _relExp = /[\+-]=-?[\.\d]/,
                //_nonNumbersExp = /(?:([\-+](?!(\d|=)))|[^\d\-+=e]|(e(?![\-+][\d])))+/ig,
                _setRatio = function(v) {
                    var pt = this._firstPT,
                        min = 0.000001,
                        val;
                    while (pt) {
                        val = !pt.blob ? pt.c * v + pt.s : (v === 1 && this.end) ? this.end : v ? this.join("") : this.start;
                        if (pt.m) {
                            val = pt.m(val, this._target || pt.t);
                        } else if (val < min) if (val > -min && !pt.blob) { //prevents issues with converting very small numbers to strings in the browser
                            val = 0;
                        }
                        if (!pt.f) {
                            pt.t[pt.p] = val;
                        } else if (pt.fp) {
                            pt.t[pt.p](pt.fp, val);
                        } else {
                            pt.t[pt.p](val);
                        }
                        pt = pt._next;
                    }
                },
                //compares two strings (start/end), finds the numbers that are different and spits back an array representing the whole value but with the changing values isolated as elements. For example, "rgb(0,0,0)" and "rgb(100,50,0)" would become ["rgb(", 0, ",", 50, ",0)"]. Notice it merges the parts that are identical (performance optimization). The array also has a linked list of PropTweens attached starting with _firstPT that contain the tweening data (t, p, s, c, f, etc.). It also stores the starting value as a "start" property so that we can revert to it if/when necessary, like when a tween rewinds fully. If the quantity of numbers differs between the start and end, it will always prioritize the end value(s). The pt parameter is optional - it's for a PropTween that will be appended to the end of the linked list and is typically for actually setting the value after all of the elements have been updated (with array.join("")).
                _blobDif = function(start, end, filter, pt) {
                    var a = [],
                        charIndex = 0,
                        s = "",
                        color = 0,
                        startNums, endNums, num, i, l, nonNumbers, currentNum;
                    a.start = start;
                    a.end = end;
                    start = a[0] = start + ""; //ensure values are strings
                    end = a[1] = end + "";
                    if (filter) {
                        filter(a); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.
                        start = a[0];
                        end = a[1];
                    }
                    a.length = 0;
                    startNums = start.match(_numbersExp) || [];
                    endNums = end.match(_numbersExp) || [];
                    if (pt) {
                        pt._next = null;
                        pt.blob = 1;
                        a._firstPT = a._applyPT = pt; //apply last in the linked list (which means inserting it first)
                    }
                    l = endNums.length;
                    for (i = 0; i < l; i++) {
                        currentNum = endNums[i];
                        nonNumbers = end.substr(charIndex, end.indexOf(currentNum, charIndex)-charIndex);
                        s += (nonNumbers || !i) ? nonNumbers : ","; //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
                        charIndex += nonNumbers.length;
                        if (color) { //sense rgba() values and round them.
                            color = (color + 1) % 5;
                        } else if (nonNumbers.substr(-5) === "rgba(") {
                            color = 1;
                        }
                        if (currentNum === startNums[i] || startNums.length <= i) {
                            s += currentNum;
                        } else {
                            if (s) {
                                a.push(s);
                                s = "";
                            }
                            num = parseFloat(startNums[i]);
                            a.push(num);
                            a._firstPT = {_next: a._firstPT, t:a, p: a.length-1, s:num, c:((currentNum.charAt(1) === "=") ? parseInt(currentNum.charAt(0) + "1", 10) * parseFloat(currentNum.substr(2)) : (parseFloat(currentNum) - num)) || 0, f:0, m:(color && color < 4) ? Math.round : 0};
                            //note: we don't set _prev because we'll never need to remove individual PropTweens from this list.
                        }
                        charIndex += currentNum.length;
                    }
                    s += end.substr(charIndex);
                    if (s) {
                        a.push(s);
                    }
                    a.setRatio = _setRatio;
                    if (_relExp.test(end)) { //if the end string contains relative values, delete it so that on the final render (in _setRatio()), we don't actually set it to the string with += or -= characters (forces it to use the calculated value).
                        a.end = 0;
                    }
                    return a;
                },
                //note: "funcParam" is only necessary for function-based getters/setters that require an extra parameter like getAttribute("width") and setAttribute("width", value). In this example, funcParam would be "width". Used by AttrPlugin for example.
                _addPropTween = function(target, prop, start, end, overwriteProp, mod, funcParam, stringFilter, index) {
                    if (typeof(end) === "function") {
                        end = end(index || 0, target);
                    }
                    var type = typeof(target[prop]),
                        getterName = (type !== "function") ? "" : ((prop.indexOf("set") || typeof(target["get" + prop.substr(3)]) !== "function") ? prop : "get" + prop.substr(3)),
                        s = (start !== "get") ? start : !getterName ? target[prop] : funcParam ? target[getterName](funcParam) : target[getterName](),
                        isRelative = (typeof(end) === "string" && end.charAt(1) === "="),
                        pt = {t:target, p:prop, s:s, f:(type === "function"), pg:0, n:overwriteProp || prop, m:(!mod ? 0 : (typeof(mod) === "function") ? mod : Math.round), pr:0, c:isRelative ? parseInt(end.charAt(0) + "1", 10) * parseFloat(end.substr(2)) : (parseFloat(end) - s) || 0},
                        blob;
    
                    if (typeof(s) !== "number" || (typeof(end) !== "number" && !isRelative)) {
                        if (funcParam || isNaN(s) || (!isRelative && isNaN(end)) || typeof(s) === "boolean" || typeof(end) === "boolean") {
                            //a blob (string that has multiple numbers in it)
                            pt.fp = funcParam;
                            blob = _blobDif(s, (isRelative ? parseFloat(pt.s) + pt.c : end), stringFilter || TweenLite.defaultStringFilter, pt);
                            pt = {t: blob, p: "setRatio", s: 0, c: 1, f: 2, pg: 0, n: overwriteProp || prop, pr: 0, m: 0}; //"2" indicates it's a Blob property tween. Needed for RoundPropsPlugin for example.
                        } else {
                            pt.s = parseFloat(s);
                            if (!isRelative) {
                                pt.c = (parseFloat(end) - pt.s) || 0;
                            }
                        }
                    }
                    if (pt.c) { //only add it to the linked list if there's a change.
                        if ((pt._next = this._firstPT)) {
                            pt._next._prev = pt;
                        }
                        this._firstPT = pt;
                        return pt;
                    }
                },
                _internals = TweenLite._internals = {isArray:_isArray, isSelector:_isSelector, lazyTweens:_lazyTweens, blobDif:_blobDif}, //gives us a way to expose certain private values to other GreenSock classes without contaminating tha main TweenLite object.
                _plugins = TweenLite._plugins = {},
                _tweenLookup = _internals.tweenLookup = {},
                _tweenLookupNum = 0,
                _reservedProps = _internals.reservedProps = {ease:1, delay:1, overwrite:1, onComplete:1, onCompleteParams:1, onCompleteScope:1, useFrames:1, runBackwards:1, startAt:1, onUpdate:1, onUpdateParams:1, onUpdateScope:1, onStart:1, onStartParams:1, onStartScope:1, onReverseComplete:1, onReverseCompleteParams:1, onReverseCompleteScope:1, onRepeat:1, onRepeatParams:1, onRepeatScope:1, easeParams:1, yoyo:1, immediateRender:1, repeat:1, repeatDelay:1, data:1, paused:1, reversed:1, autoCSS:1, lazy:1, onOverwrite:1, callbackScope:1, stringFilter:1, id:1, yoyoEase:1},
                _overwriteLookup = {none:0, all:1, auto:2, concurrent:3, allOnStart:4, preexisting:5, "true":1, "false":0},
                _rootFramesTimeline = Animation._rootFramesTimeline = new SimpleTimeline(),
                _rootTimeline = Animation._rootTimeline = new SimpleTimeline(),
                _nextGCFrame = 30,
                _lazyRender = _internals.lazyRender = function() {
                    var i = _lazyTweens.length,
                        tween;
                    _lazyLookup = {};
                    while (--i > -1) {
                        tween = _lazyTweens[i];
                        if (tween && tween._lazy !== false) {
                            tween.render(tween._lazy[0], tween._lazy[1], true);
                            tween._lazy = false;
                        }
                    }
                    _lazyTweens.length = 0;
                };
    
            _rootTimeline._startTime = _ticker.time;
            _rootFramesTimeline._startTime = _ticker.frame;
            _rootTimeline._active = _rootFramesTimeline._active = true;
            setTimeout(_lazyRender, 1); //on some mobile devices, there isn't a "tick" before code runs which means any lazy renders wouldn't run before the next official "tick".
    
            Animation._updateRoot = TweenLite.render = function() {
                    var i, a, p;
                    if (_lazyTweens.length) { //if code is run outside of the requestAnimationFrame loop, there may be tweens queued AFTER the engine refreshed, so we need to ensure any pending renders occur before we refresh again.
                        _lazyRender();
                    }
                    _rootTimeline.render((_ticker.time - _rootTimeline._startTime) * _rootTimeline._timeScale, false, false);
                    _rootFramesTimeline.render((_ticker.frame - _rootFramesTimeline._startTime) * _rootFramesTimeline._timeScale, false, false);
                    if (_lazyTweens.length) {
                        _lazyRender();
                    }
                    if (_ticker.frame >= _nextGCFrame) { //dump garbage every 120 frames or whatever the user sets TweenLite.autoSleep to
                        _nextGCFrame = _ticker.frame + (parseInt(TweenLite.autoSleep, 10) || 120);
                        for (p in _tweenLookup) {
                            a = _tweenLookup[p].tweens;
                            i = a.length;
                            while (--i > -1) {
                                if (a[i]._gc) {
                                    a.splice(i, 1);
                                }
                            }
                            if (a.length === 0) {
                                delete _tweenLookup[p];
                            }
                        }
                        //if there are no more tweens in the root timelines, or if they're all paused, make the _timer sleep to reduce load on the CPU slightly
                        p = _rootTimeline._first;
                        if (!p || p._paused) if (TweenLite.autoSleep && !_rootFramesTimeline._first && _ticker._listeners.tick.length === 1) {
                            while (p && p._paused) {
                                p = p._next;
                            }
                            if (!p) {
                                _ticker.sleep();
                            }
                        }
                    }
                };
    
            _ticker.addEventListener("tick", Animation._updateRoot);
    
            var _register = function(target, tween, scrub) {
                    var id = target._gsTweenID, a, i;
                    if (!_tweenLookup[id || (target._gsTweenID = id = "t" + (_tweenLookupNum++))]) {
                        _tweenLookup[id] = {target:target, tweens:[]};
                    }
                    if (tween) {
                        a = _tweenLookup[id].tweens;
                        a[(i = a.length)] = tween;
                        if (scrub) {
                            while (--i > -1) {
                                if (a[i] === tween) {
                                    a.splice(i, 1);
                                }
                            }
                        }
                    }
                    return _tweenLookup[id].tweens;
                },
                _onOverwrite = function(overwrittenTween, overwritingTween, target, killedProps) {
                    var func = overwrittenTween.vars.onOverwrite, r1, r2;
                    if (func) {
                        r1 = func(overwrittenTween, overwritingTween, target, killedProps);
                    }
                    func = TweenLite.onOverwrite;
                    if (func) {
                        r2 = func(overwrittenTween, overwritingTween, target, killedProps);
                    }
                    return (r1 !== false && r2 !== false);
                },
                _applyOverwrite = function(target, tween, props, mode, siblings) {
                    var i, changed, curTween, l;
                    if (mode === 1 || mode >= 4) {
                        l = siblings.length;
                        for (i = 0; i < l; i++) {
                            if ((curTween = siblings[i]) !== tween) {
                                if (!curTween._gc) {
                                    if (curTween._kill(null, target, tween)) {
                                        changed = true;
                                    }
                                }
                            } else if (mode === 5) {
                                break;
                            }
                        }
                        return changed;
                    }
                    //NOTE: Add 0.0000000001 to overcome floating point errors that can cause the startTime to be VERY slightly off (when a tween's time() is set for example)
                    var startTime = tween._startTime + _tinyNum,
                        overlaps = [],
                        oCount = 0,
                        zeroDur = (tween._duration === 0),
                        globalStart;
                    i = siblings.length;
                    while (--i > -1) {
                        if ((curTween = siblings[i]) === tween || curTween._gc || curTween._paused) {
                            //ignore
                        } else if (curTween._timeline !== tween._timeline) {
                            globalStart = globalStart || _checkOverlap(tween, 0, zeroDur);
                            if (_checkOverlap(curTween, globalStart, zeroDur) === 0) {
                                overlaps[oCount++] = curTween;
                            }
                        } else if (curTween._startTime <= startTime) if (curTween._startTime + curTween.totalDuration() / curTween._timeScale > startTime) if (!((zeroDur || !curTween._initted) && startTime - curTween._startTime <= 0.0000000002)) {
                            overlaps[oCount++] = curTween;
                        }
                    }
    
                    i = oCount;
                    while (--i > -1) {
                        curTween = overlaps[i];
                        if (mode === 2) if (curTween._kill(props, target, tween)) {
                            changed = true;
                        }
                        if (mode !== 2 || (!curTween._firstPT && curTween._initted)) {
                            if (mode !== 2 && !_onOverwrite(curTween, tween)) {
                                continue;
                            }
                            if (curTween._enabled(false, false)) { //if all property tweens have been overwritten, kill the tween.
                                changed = true;
                            }
                        }
                    }
                    return changed;
                },
                _checkOverlap = function(tween, reference, zeroDur) {
                    var tl = tween._timeline,
                        ts = tl._timeScale,
                        t = tween._startTime;
                    while (tl._timeline) {
                        t += tl._startTime;
                        ts *= tl._timeScale;
                        if (tl._paused) {
                            return -100;
                        }
                        tl = tl._timeline;
                    }
                    t /= ts;
                    return (t > reference) ? t - reference : ((zeroDur && t === reference) || (!tween._initted && t - reference < 2 * _tinyNum)) ? _tinyNum : ((t += tween.totalDuration() / tween._timeScale / ts) > reference + _tinyNum) ? 0 : t - reference - _tinyNum;
                };
    
    
    //---- TweenLite instance methods -----------------------------------------------------------------------------
    
            p._init = function() {
                var v = this.vars,
                    op = this._overwrittenProps,
                    dur = this._duration,
                    immediate = !!v.immediateRender,
                    ease = v.ease,
                    i, initPlugins, pt, p, startVars, l;
                if (v.startAt) {
                    if (this._startAt) {
                        this._startAt.render(-1, true); //if we've run a startAt previously (when the tween instantiated), we should revert it so that the values re-instantiate correctly particularly for relative tweens. Without this, a TweenLite.fromTo(obj, 1, {x:"+=100"}, {x:"-=100"}), for example, would actually jump to +=200 because the startAt would run twice, doubling the relative change.
                        this._startAt.kill();
                    }
                    startVars = {};
                    for (p in v.startAt) { //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, 1, from, to).fromTo(e, 1, to, from);
                        startVars[p] = v.startAt[p];
                    }
                    startVars.overwrite = false;
                    startVars.immediateRender = true;
                    startVars.lazy = (immediate && v.lazy !== false);
                    startVars.startAt = startVars.delay = null; //no nesting of startAt objects allowed (otherwise it could cause an infinite loop).
                    startVars.onUpdate = v.onUpdate;
                    startVars.onUpdateScope = v.onUpdateScope || v.callbackScope || this;
                    this._startAt = TweenLite.to(this.target, 0, startVars);
                    if (immediate) {
                        if (this._time > 0) {
                            this._startAt = null; //tweens that render immediately (like most from() and fromTo() tweens) shouldn't revert when their parent timeline's playhead goes backward past the startTime because the initial render could have happened anytime and it shouldn't be directly correlated to this tween's startTime. Imagine setting up a complex animation where the beginning states of various objects are rendered immediately but the tween doesn't happen for quite some time - if we revert to the starting values as soon as the playhead goes backward past the tween's startTime, it will throw things off visually. Reversion should only happen in TimelineLite/Max instances where immediateRender was false (which is the default in the convenience methods like from()).
                        } else if (dur !== 0) {
                            return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a TimelineLite or TimelineMax, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.
                        }
                    }
                } else if (v.runBackwards && dur !== 0) {
                    //from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)
                    if (this._startAt) {
                        this._startAt.render(-1, true);
                        this._startAt.kill();
                        this._startAt = null;
                    } else {
                        if (this._time !== 0) { //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0
                            immediate = false;
                        }
                        pt = {};
                        for (p in v) { //copy props into a new object and skip any reserved props, otherwise onComplete or onUpdate or onStart could fire. We should, however, permit autoCSS to go through.
                            if (!_reservedProps[p] || p === "autoCSS") {
                                pt[p] = v[p];
                            }
                        }
                        pt.overwrite = 0;
                        pt.data = "isFromStart"; //we tag the tween with as "isFromStart" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a "from()" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.
                        pt.lazy = (immediate && v.lazy !== false);
                        pt.immediateRender = immediate; //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)
                        this._startAt = TweenLite.to(this.target, 0, pt);
                        if (!immediate) {
                            this._startAt._init(); //ensures that the initial values are recorded
                            this._startAt._enabled(false); //no need to have the tween render on the next cycle. Disable it because we'll always manually control the renders of the _startAt tween.
                            if (this.vars.immediateRender) {
                                this._startAt = null;
                            }
                        } else if (this._time === 0) {
                            return;
                        }
                    }
                }
                this._ease = ease = (!ease) ? TweenLite.defaultEase : (ease instanceof Ease) ? ease : (typeof(ease) === "function") ? new Ease(ease, v.easeParams) : _easeMap[ease] || TweenLite.defaultEase;
                if (v.easeParams instanceof Array && ease.config) {
                    this._ease = ease.config.apply(ease, v.easeParams);
                }
                this._easeType = this._ease._type;
                this._easePower = this._ease._power;
                this._firstPT = null;
    
                if (this._targets) {
                    l = this._targets.length;
                    for (i = 0; i < l; i++) {
                        if ( this._initProps( this._targets[i], (this._propLookup[i] = {}), this._siblings[i], (op ? op[i] : null), i) ) {
                            initPlugins = true;
                        }
                    }
                } else {
                    initPlugins = this._initProps(this.target, this._propLookup, this._siblings, op, 0);
                }
    
                if (initPlugins) {
                    TweenLite._onPluginEvent("_onInitAllProps", this); //reorders the array in order of priority. Uses a static TweenPlugin method in order to minimize file size in TweenLite
                }
                if (op) if (!this._firstPT) if (typeof(this.target) !== "function") { //if all tweening properties have been overwritten, kill the tween. If the target is a function, it's probably a delayedCall so let it live.
                    this._enabled(false, false);
                }
                if (v.runBackwards) {
                    pt = this._firstPT;
                    while (pt) {
                        pt.s += pt.c;
                        pt.c = -pt.c;
                        pt = pt._next;
                    }
                }
                this._onUpdate = v.onUpdate;
                this._initted = true;
            };
    
            p._initProps = function(target, propLookup, siblings, overwrittenProps, index) {
                var p, i, initPlugins, plugin, pt, v;
                if (target == null) {
                    return false;
                }
    
                if (_lazyLookup[target._gsTweenID]) {
                    _lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)
                }
    
                if (!this.vars.css) if (target.style) if (target !== window && target.nodeType) if (_plugins.css) if (this.vars.autoCSS !== false) { //it's so common to use TweenLite/Max to animate the css of DOM elements, we assume that if the target is a DOM element, that's what is intended (a convenience so that users don't have to wrap things in css:{}, although we still recommend it for a slight performance boost and better specificity). Note: we cannot check "nodeType" on the window inside an iframe.
                    _autoCSS(this.vars, target);
                }
                for (p in this.vars) {
                    v = this.vars[p];
                    if (_reservedProps[p]) {
                        if (v) if ((v instanceof Array) || (v.push && _isArray(v))) if (v.join("").indexOf("{self}") !== -1) {
                            this.vars[p] = v = this._swapSelfInParams(v, this);
                        }
    
                    } else if (_plugins[p] && (plugin = new _plugins[p]())._onInitTween(target, this.vars[p], this, index)) {
    
                        //t - target 		[object]
                        //p - property 		[string]
                        //s - start			[number]
                        //c - change		[number]
                        //f - isFunction	[boolean]
                        //n - name			[string]
                        //pg - isPlugin 	[boolean]
                        //pr - priority		[number]
                        //m - mod           [function | 0]
                        this._firstPT = pt = {_next:this._firstPT, t:plugin, p:"setRatio", s:0, c:1, f:1, n:p, pg:1, pr:plugin._priority, m:0};
                        i = plugin._overwriteProps.length;
                        while (--i > -1) {
                            propLookup[plugin._overwriteProps[i]] = this._firstPT;
                        }
                        if (plugin._priority || plugin._onInitAllProps) {
                            initPlugins = true;
                        }
                        if (plugin._onDisable || plugin._onEnable) {
                            this._notifyPluginsOfEnabled = true;
                        }
                        if (pt._next) {
                            pt._next._prev = pt;
                        }
    
                    } else {
                        propLookup[p] = _addPropTween.call(this, target, p, "get", v, p, 0, null, this.vars.stringFilter, index);
                    }
                }
    
                if (overwrittenProps) if (this._kill(overwrittenProps, target)) { //another tween may have tried to overwrite properties of this tween before init() was called (like if two tweens start at the same time, the one created second will run first)
                    return this._initProps(target, propLookup, siblings, overwrittenProps, index);
                }
                if (this._overwrite > 1) if (this._firstPT) if (siblings.length > 1) if (_applyOverwrite(target, this, propLookup, this._overwrite, siblings)) {
                    this._kill(propLookup, target);
                    return this._initProps(target, propLookup, siblings, overwrittenProps, index);
                }
                if (this._firstPT) if ((this.vars.lazy !== false && this._duration) || (this.vars.lazy && !this._duration)) { //zero duration tweens don't lazy render by default; everything else does.
                    _lazyLookup[target._gsTweenID] = true;
                }
                return initPlugins;
            };
    
            p.render = function(time, suppressEvents, force) {
                var prevTime = this._time,
                    duration = this._duration,
                    prevRawPrevTime = this._rawPrevTime,
                    isComplete, callback, pt, rawPrevTime;
                if (time >= duration - 0.0000001 && time >= 0) { //to work around occasional floating point math artifacts.
                    this._totalTime = this._time = duration;
                    this.ratio = this._ease._calcEnd ? this._ease.getRatio(1) : 1;
                    if (!this._reversed ) {
                        isComplete = true;
                        callback = "onComplete";
                        force = (force || this._timeline.autoRemoveChildren); //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.
                    }
                    if (duration === 0) if (this._initted || !this.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the "playhead" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's "playhead" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.
                        if (this._startTime === this._timeline._duration) { //if a zero-duration tween is at the VERY end of a timeline and that timeline renders at its end, it will typically add a tiny bit of cushion to the render time to prevent rounding errors from getting in the way of tweens rendering their VERY end. If we then reverse() that timeline, the zero-duration tween will trigger its onReverseComplete even though technically the playhead didn't pass over it again. It's a very specific edge case we must accommodate.
                            time = 0;
                        }
                        if (prevRawPrevTime < 0 || (time <= 0 && time >= -0.0000001) || (prevRawPrevTime === _tinyNum && this.data !== "isPause")) if (prevRawPrevTime !== time) { //note: when this.data is "isPause", it's a callback added by addPause() on a timeline that we should not be triggered when LEAVING its exact start time. In other words, tl.addPause(1).play(1) shouldn't pause.
                            force = true;
                            if (prevRawPrevTime > _tinyNum) {
                                callback = "onReverseComplete";
                            }
                        }
                        this._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                    }
    
                } else if (time < 0.0000001) { //to work around occasional floating point math artifacts, round super small values to 0.
                    this._totalTime = this._time = 0;
                    this.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;
                    if (prevTime !== 0 || (duration === 0 && prevRawPrevTime > 0)) {
                        callback = "onReverseComplete";
                        isComplete = this._reversed;
                    }
                    if (time < 0) {
                        this._active = false;
                        if (duration === 0) if (this._initted || !this.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the "playhead" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's "playhead" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.
                            if (prevRawPrevTime >= 0 && !(prevRawPrevTime === _tinyNum && this.data === "isPause")) {
                                force = true;
                            }
                            this._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                        }
                    }
                    if (!this._initted || (this._startAt && this._startAt.progress())) { //if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately. Also, we check progress() because if startAt has already rendered at its end, we should force a render at its beginning. Otherwise, if you put the playhead directly on top of where a fromTo({immediateRender:false}) starts, and then move it backwards, the from() won't revert its values.
                        force = true;
                    }
                } else {
                    this._totalTime = this._time = time;
    
                    if (this._easeType) {
                        var r = time / duration, type = this._easeType, pow = this._easePower;
                        if (type === 1 || (type === 3 && r >= 0.5)) {
                            r = 1 - r;
                        }
                        if (type === 3) {
                            r *= 2;
                        }
                        if (pow === 1) {
                            r *= r;
                        } else if (pow === 2) {
                            r *= r * r;
                        } else if (pow === 3) {
                            r *= r * r * r;
                        } else if (pow === 4) {
                            r *= r * r * r * r;
                        }
    
                        if (type === 1) {
                            this.ratio = 1 - r;
                        } else if (type === 2) {
                            this.ratio = r;
                        } else if (time / duration < 0.5) {
                            this.ratio = r / 2;
                        } else {
                            this.ratio = 1 - (r / 2);
                        }
    
                    } else {
                        this.ratio = this._ease.getRatio(time / duration);
                    }
                }
    
                if (this._time === prevTime && !force) {
                    return;
                } else if (!this._initted) {
                    this._init();
                    if (!this._initted || this._gc) { //immediateRender tweens typically won't initialize until the playhead advances (_time is greater than 0) in order to ensure that overwriting occurs properly. Also, if all of the tweening properties have been overwritten (which would cause _gc to be true, as set in _init()), we shouldn't continue otherwise an onStart callback could be called for example.
                        return;
                    } else if (!force && this._firstPT && ((this.vars.lazy !== false && this._duration) || (this.vars.lazy && !this._duration))) {
                        this._time = this._totalTime = prevTime;
                        this._rawPrevTime = prevRawPrevTime;
                        _lazyTweens.push(this);
                        this._lazy = [time, suppressEvents];
                        return;
                    }
                    //_ease is initially set to defaultEase, so now that init() has run, _ease is set properly and we need to recalculate the ratio. Overall this is faster than using conditional logic earlier in the method to avoid having to set ratio twice because we only init() once but renderTime() gets called VERY frequently.
                    if (this._time && !isComplete) {
                        this.ratio = this._ease.getRatio(this._time / duration);
                    } else if (isComplete && this._ease._calcEnd) {
                        this.ratio = this._ease.getRatio((this._time === 0) ? 0 : 1);
                    }
                }
                if (this._lazy !== false) { //in case a lazy render is pending, we should flush it because the new render is occurring now (imagine a lazy tween instantiating and then immediately the user calls tween.seek(tween.duration()), skipping to the end - the end render would be forced, and then if we didn't flush the lazy render, it'd fire AFTER the seek(), rendering it at the wrong time.
                    this._lazy = false;
                }
                if (!this._active) if (!this._paused && this._time !== prevTime && time >= 0) {
                    this._active = true;  //so that if the user renders a tween (as opposed to the timeline rendering it), the timeline is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the tween already finished but the user manually re-renders it as halfway done.
                }
                if (prevTime === 0) {
                    if (this._startAt) {
                        if (time >= 0) {
                            this._startAt.render(time, suppressEvents, force);
                        } else if (!callback) {
                            callback = "_dummyGS"; //if no callback is defined, use a dummy value just so that the condition at the end evaluates as true because _startAt should render AFTER the normal render loop when the time is negative. We could handle this in a more intuitive way, of course, but the render loop is the MOST important thing to optimize, so this technique allows us to avoid adding extra conditional logic in a high-frequency area.
                        }
                    }
                    if (this.vars.onStart) if (this._time !== 0 || duration === 0) if (!suppressEvents) {
                        this._callback("onStart");
                    }
                }
                pt = this._firstPT;
                while (pt) {
                    if (pt.f) {
                        pt.t[pt.p](pt.c * this.ratio + pt.s);
                    } else {
                        pt.t[pt.p] = pt.c * this.ratio + pt.s;
                    }
                    pt = pt._next;
                }
    
                if (this._onUpdate) {
                    if (time < 0) if (this._startAt && time !== -0.0001) { //if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.
                        this._startAt.render(time, suppressEvents, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.
                    }
                    if (!suppressEvents) if (this._time !== prevTime || isComplete || force) {
                        this._callback("onUpdate");
                    }
                }
                if (callback) if (!this._gc || force) { //check _gc because there's a chance that kill() could be called in an onUpdate
                    if (time < 0 && this._startAt && !this._onUpdate && time !== -0.0001) { //-0.0001 is a special value that we use when looping back to the beginning of a repeated TimelineMax, in which case we shouldn't render the _startAt values.
                        this._startAt.render(time, suppressEvents, force);
                    }
                    if (isComplete) {
                        if (this._timeline.autoRemoveChildren) {
                            this._enabled(false, false);
                        }
                        this._active = false;
                    }
                    if (!suppressEvents && this.vars[callback]) {
                        this._callback(callback);
                    }
                    if (duration === 0 && this._rawPrevTime === _tinyNum && rawPrevTime !== _tinyNum) { //the onComplete or onReverseComplete could trigger movement of the playhead and for zero-duration tweens (which must discern direction) that land directly back on their start time, we don't want to fire again on the next render. Think of several addPause()'s in a timeline that forces the playhead to a certain spot, but what if it's already paused and another tween is tweening the "time" of the timeline? Each time it moves [forward] past that spot, it would move back, and since suppressEvents is true, it'd reset _rawPrevTime to _tinyNum so that when it begins again, the callback would fire (so ultimately it could bounce back and forth during that tween). Again, this is a very uncommon scenario, but possible nonetheless.
                        this._rawPrevTime = 0;
                    }
                }
            };
    
            p._kill = function(vars, target, overwritingTween) {
                if (vars === "all") {
                    vars = null;
                }
                if (vars == null) if (target == null || target === this.target) {
                    this._lazy = false;
                    return this._enabled(false, false);
                }
                target = (typeof(target) !== "string") ? (target || this._targets || this.target) : TweenLite.selector(target) || target;
                var simultaneousOverwrite = (overwritingTween && this._time && overwritingTween._startTime === this._startTime && this._timeline === overwritingTween._timeline),
                    i, overwrittenProps, p, pt, propLookup, changed, killProps, record, killed;
                if ((_isArray(target) || _isSelector(target)) && typeof(target[0]) !== "number") {
                    i = target.length;
                    while (--i > -1) {
                        if (this._kill(vars, target[i], overwritingTween)) {
                            changed = true;
                        }
                    }
                } else {
                    if (this._targets) {
                        i = this._targets.length;
                        while (--i > -1) {
                            if (target === this._targets[i]) {
                                propLookup = this._propLookup[i] || {};
                                this._overwrittenProps = this._overwrittenProps || [];
                                overwrittenProps = this._overwrittenProps[i] = vars ? this._overwrittenProps[i] || {} : "all";
                                break;
                            }
                        }
                    } else if (target !== this.target) {
                        return false;
                    } else {
                        propLookup = this._propLookup;
                        overwrittenProps = this._overwrittenProps = vars ? this._overwrittenProps || {} : "all";
                    }
    
                    if (propLookup) {
                        killProps = vars || propLookup;
                        record = (vars !== overwrittenProps && overwrittenProps !== "all" && vars !== propLookup && (typeof(vars) !== "object" || !vars._tempKill)); //_tempKill is a super-secret way to delete a particular tweening property but NOT have it remembered as an official overwritten property (like in BezierPlugin)
                        if (overwritingTween && (TweenLite.onOverwrite || this.vars.onOverwrite)) {
                            for (p in killProps) {
                                if (propLookup[p]) {
                                    if (!killed) {
                                        killed = [];
                                    }
                                    killed.push(p);
                                }
                            }
                            if ((killed || !vars) && !_onOverwrite(this, overwritingTween, target, killed)) { //if the onOverwrite returned false, that means the user wants to override the overwriting (cancel it).
                                return false;
                            }
                        }
    
                        for (p in killProps) {
                            if ((pt = propLookup[p])) {
                                if (simultaneousOverwrite) { //if another tween overwrites this one and they both start at exactly the same time, yet this tween has already rendered once (for example, at 0.001) because it's first in the queue, we should revert the values to where they were at 0 so that the starting values aren't contaminated on the overwriting tween.
                                    if (pt.f) {
                                        pt.t[pt.p](pt.s);
                                    } else {
                                        pt.t[pt.p] = pt.s;
                                    }
                                    changed = true;
                                }
                                if (pt.pg && pt.t._kill(killProps)) {
                                    changed = true; //some plugins need to be notified so they can perform cleanup tasks first
                                }
                                if (!pt.pg || pt.t._overwriteProps.length === 0) {
                                    if (pt._prev) {
                                        pt._prev._next = pt._next;
                                    } else if (pt === this._firstPT) {
                                        this._firstPT = pt._next;
                                    }
                                    if (pt._next) {
                                        pt._next._prev = pt._prev;
                                    }
                                    pt._next = pt._prev = null;
                                }
                                delete propLookup[p];
                            }
                            if (record) {
                                overwrittenProps[p] = 1;
                            }
                        }
                        if (!this._firstPT && this._initted) { //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.
                            this._enabled(false, false);
                        }
                    }
                }
                return changed;
            };
    
            p.invalidate = function() {
                if (this._notifyPluginsOfEnabled) {
                    TweenLite._onPluginEvent("_onDisable", this);
                }
                this._firstPT = this._overwrittenProps = this._startAt = this._onUpdate = null;
                this._notifyPluginsOfEnabled = this._active = this._lazy = false;
                this._propLookup = (this._targets) ? {} : [];
                Animation.prototype.invalidate.call(this);
                if (this.vars.immediateRender) {
                    this._time = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)
                    this.render(Math.min(0, -this._delay)); //in case delay is negative.
                }
                return this;
            };
    
            p._enabled = function(enabled, ignoreTimeline) {
                if (!_tickerActive) {
                    _ticker.wake();
                }
                if (enabled && this._gc) {
                    var targets = this._targets,
                        i;
                    if (targets) {
                        i = targets.length;
                        while (--i > -1) {
                            this._siblings[i] = _register(targets[i], this, true);
                        }
                    } else {
                        this._siblings = _register(this.target, this, true);
                    }
                }
                Animation.prototype._enabled.call(this, enabled, ignoreTimeline);
                if (this._notifyPluginsOfEnabled) if (this._firstPT) {
                    return TweenLite._onPluginEvent((enabled ? "_onEnable" : "_onDisable"), this);
                }
                return false;
            };
    
    
    //----TweenLite static methods -----------------------------------------------------
    
            TweenLite.to = function(target, duration, vars) {
                return new TweenLite(target, duration, vars);
            };
    
            TweenLite.from = function(target, duration, vars) {
                vars.runBackwards = true;
                vars.immediateRender = (vars.immediateRender != false);
                return new TweenLite(target, duration, vars);
            };
    
            TweenLite.fromTo = function(target, duration, fromVars, toVars) {
                toVars.startAt = fromVars;
                toVars.immediateRender = (toVars.immediateRender != false && fromVars.immediateRender != false);
                return new TweenLite(target, duration, toVars);
            };
    
            TweenLite.delayedCall = function(delay, callback, params, scope, useFrames) {
                return new TweenLite(callback, 0, {delay:delay, onComplete:callback, onCompleteParams:params, callbackScope:scope, onReverseComplete:callback, onReverseCompleteParams:params, immediateRender:false, lazy:false, useFrames:useFrames, overwrite:0});
            };
    
            TweenLite.set = function(target, vars) {
                return new TweenLite(target, 0, vars);
            };
    
            TweenLite.getTweensOf = function(target, onlyActive) {
                if (target == null) { return []; }
                target = (typeof(target) !== "string") ? target : TweenLite.selector(target) || target;
                var i, a, j, t;
                if ((_isArray(target) || _isSelector(target)) && typeof(target[0]) !== "number") {
                    i = target.length;
                    a = [];
                    while (--i > -1) {
                        a = a.concat(TweenLite.getTweensOf(target[i], onlyActive));
                    }
                    i = a.length;
                    //now get rid of any duplicates (tweens of arrays of objects could cause duplicates)
                    while (--i > -1) {
                        t = a[i];
                        j = i;
                        while (--j > -1) {
                            if (t === a[j]) {
                                a.splice(i, 1);
                            }
                        }
                    }
                } else if (target._gsTweenID) {
                    a = _register(target).concat();
                    i = a.length;
                    while (--i > -1) {
                        if (a[i]._gc || (onlyActive && !a[i].isActive())) {
                            a.splice(i, 1);
                        }
                    }
                }
                return a || [];
            };
    
            TweenLite.killTweensOf = TweenLite.killDelayedCallsTo = function(target, onlyActive, vars) {
                if (typeof(onlyActive) === "object") {
                    vars = onlyActive; //for backwards compatibility (before "onlyActive" parameter was inserted)
                    onlyActive = false;
                }
                var a = TweenLite.getTweensOf(target, onlyActive),
                    i = a.length;
                while (--i > -1) {
                    a[i]._kill(vars, target);
                }
            };
    
    
    
    /*
     * ----------------------------------------------------------------
     * TweenPlugin   (could easily be split out as a separate file/class, but included for ease of use (so that people don't need to include another script call before loading plugins which is easy to forget)
     * ----------------------------------------------------------------
     */
            var TweenPlugin = _class("plugins.TweenPlugin", function(props, priority) {
                        this._overwriteProps = (props || "").split(",");
                        this._propName = this._overwriteProps[0];
                        this._priority = priority || 0;
                        this._super = TweenPlugin.prototype;
                    }, true);
    
            p = TweenPlugin.prototype;
            TweenPlugin.version = "1.19.0";
            TweenPlugin.API = 2;
            p._firstPT = null;
            p._addTween = _addPropTween;
            p.setRatio = _setRatio;
    
            p._kill = function(lookup) {
                var a = this._overwriteProps,
                    pt = this._firstPT,
                    i;
                if (lookup[this._propName] != null) {
                    this._overwriteProps = [];
                } else {
                    i = a.length;
                    while (--i > -1) {
                        if (lookup[a[i]] != null) {
                            a.splice(i, 1);
                        }
                    }
                }
                while (pt) {
                    if (lookup[pt.n] != null) {
                        if (pt._next) {
                            pt._next._prev = pt._prev;
                        }
                        if (pt._prev) {
                            pt._prev._next = pt._next;
                            pt._prev = null;
                        } else if (this._firstPT === pt) {
                            this._firstPT = pt._next;
                        }
                    }
                    pt = pt._next;
                }
                return false;
            };
    
            p._mod = p._roundProps = function(lookup) {
                var pt = this._firstPT,
                    val;
                while (pt) {
                    val = lookup[this._propName] || (pt.n != null && lookup[ pt.n.split(this._propName + "_").join("") ]);
                    if (val && typeof(val) === "function") { //some properties that are very plugin-specific add a prefix named after the _propName plus an underscore, so we need to ignore that extra stuff here.
                        if (pt.f === 2) {
                            pt.t._applyPT.m = val;
                        } else {
                            pt.m = val;
                        }
                    }
                    pt = pt._next;
                }
            };
    
            TweenLite._onPluginEvent = function(type, tween) {
                var pt = tween._firstPT,
                    changed, pt2, first, last, next;
                if (type === "_onInitAllProps") {
                    //sorts the PropTween linked list in order of priority because some plugins need to render earlier/later than others, like MotionBlurPlugin applies its effects after all x/y/alpha tweens have rendered on each frame.
                    while (pt) {
                        next = pt._next;
                        pt2 = first;
                        while (pt2 && pt2.pr > pt.pr) {
                            pt2 = pt2._next;
                        }
                        if ((pt._prev = pt2 ? pt2._prev : last)) {
                            pt._prev._next = pt;
                        } else {
                            first = pt;
                        }
                        if ((pt._next = pt2)) {
                            pt2._prev = pt;
                        } else {
                            last = pt;
                        }
                        pt = next;
                    }
                    pt = tween._firstPT = first;
                }
                while (pt) {
                    if (pt.pg) if (typeof(pt.t[type]) === "function") if (pt.t[type]()) {
                        changed = true;
                    }
                    pt = pt._next;
                }
                return changed;
            };
    
            TweenPlugin.activate = function(plugins) {
                var i = plugins.length;
                while (--i > -1) {
                    if (plugins[i].API === TweenPlugin.API) {
                        _plugins[(new plugins[i]())._propName] = plugins[i];
                    }
                }
                return true;
            };
    
            //provides a more concise way to define plugins that have no dependencies besides TweenPlugin and TweenLite, wrapping common boilerplate stuff into one function (added in 1.9.0). You don't NEED to use this to define a plugin - the old way still works and can be useful in certain (rare) situations.
            _gsDefine.plugin = function(config) {
                if (!config || !config.propName || !config.init || !config.API) { throw "illegal plugin definition."; }
                var propName = config.propName,
                    priority = config.priority || 0,
                    overwriteProps = config.overwriteProps,
                    map = {init:"_onInitTween", set:"setRatio", kill:"_kill", round:"_mod", mod:"_mod", initAll:"_onInitAllProps"},
                    Plugin = _class("plugins." + propName.charAt(0).toUpperCase() + propName.substr(1) + "Plugin",
                        function() {
                            TweenPlugin.call(this, propName, priority);
                            this._overwriteProps = overwriteProps || [];
                        }, (config.global === true)),
                    p = Plugin.prototype = new TweenPlugin(propName),
                    prop;
                p.constructor = Plugin;
                Plugin.API = config.API;
                for (prop in map) {
                    if (typeof(config[prop]) === "function") {
                        p[map[prop]] = config[prop];
                    }
                }
                Plugin.version = config.version;
                TweenPlugin.activate([Plugin]);
                return Plugin;
            };
    
    
            //now run through all the dependencies discovered and if any are missing, log that to the console as a warning. This is why it's best to have TweenLite load last - it can check all the dependencies for you.
            a = window._gsQueue;
            if (a) {
                for (i = 0; i < a.length; i++) {
                    a[i]();
                }
                for (p in _defLookup) {
                    if (!_defLookup[p].func) {
                        window.console.log("GSAP encountered missing dependency: " + p);
                    }
                }
            }
    
            _tickerActive = false; //ensures that the first official animation forces a ticker.tick() to update the time when it is instantiated
    
    })((typeof(module) !== "undefined" && module.exports && typeof(global) !== "undefined") ? global : this || window, "TweenLite");
    /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(22)))
    
    /***/ }),
    /* 58 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // fallback for non-array-like ES3 and non-enumerable old V8 strings
    var cof = __webpack_require__(24);
    // eslint-disable-next-line no-prototype-builtins
    module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
      return cof(it) == 'String' ? it.split('') : Object(it);
    };
    
    
    /***/ }),
    /* 59 */
    /***/ (function(module, exports) {
    
    exports.f = {}.propertyIsEnumerable;
    
    
    /***/ }),
    /* 60 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // getting tag from 19.1.3.6 Object.prototype.toString()
    var cof = __webpack_require__(24);
    var TAG = __webpack_require__(6)('toStringTag');
    // ES3 wrong here
    var ARG = cof(function () { return arguments; }()) == 'Arguments';
    
    // fallback for IE11 Script Access Denied error
    var tryGet = function (it, key) {
      try {
        return it[key];
      } catch (e) { /* empty */ }
    };
    
    module.exports = function (it) {
      var O, T, B;
      return it === undefined ? 'Undefined' : it === null ? 'Null'
        // @@toStringTag case
        : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
        // builtinTag case
        : ARG ? cof(O)
        // ES3 arguments fallback
        : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
    };
    
    
    /***/ }),
    /* 61 */
    /***/ (function(module, exports, __webpack_require__) {
    
    /* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
     * VERSION: 1.9.0
     * DATE: 2017-06-19
     * UPDATES AND DOCS AT: http://greensock.com
     *
     * @license Copyright (c) 2008-2017, GreenSock. All rights reserved.
     * This work is subject to the terms at http://greensock.com/standard-license or for
     * Club GreenSock members, the software agreement that was issued with your membership.
     * 
     * @author: Jack Doyle, jack@greensock.com
     **/
    var _gsScope = (typeof(module) !== "undefined" && module.exports && typeof(global) !== "undefined") ? global : this || window; //helps ensure compatibility with AMD/RequireJS and CommonJS/Node
    (_gsScope._gsQueue || (_gsScope._gsQueue = [])).push( function() {
    
        "use strict";
    
        var _doc = (_gsScope.document || {}).documentElement,
            _window = _gsScope,
            _max = function(element, axis) {
                var dim = (axis === "x") ? "Width" : "Height",
                    scroll = "scroll" + dim,
                    client = "client" + dim,
                    body = document.body;
                return (element === _window || element === _doc || element === body) ? Math.max(_doc[scroll], body[scroll]) - (_window["inner" + dim] || _doc[client] || body[client]) : element[scroll] - element["offset" + dim];
            },
            _unwrapElement = function(value) {
                if (typeof(value) === "string") {
                    value = TweenLite.selector(value);
                }
                if (value.length && value !== _window && value[0] && value[0].style && !value.nodeType) {
                    value = value[0];
                }
                return (value === _window || (value.nodeType && value.style)) ? value : null;
            },
            _buildGetter = function(e, axis) { //pass in an element and an axis ("x" or "y") and it'll return a getter function for the scroll position of that element (like scrollTop or scrollLeft, although if the element is the window, it'll use the pageXOffset/pageYOffset or the documentElement's scrollTop/scrollLeft or document.body's. Basically this streamlines things and makes a very fast getter across browsers.
                var p = "scroll" + ((axis === "x") ? "Left" : "Top");
                if (e === _window) {
                    if (e.pageXOffset != null) {
                        p = "page" + axis.toUpperCase() + "Offset";
                    } else if (_doc[p] != null) {
                        e = _doc;
                    } else {
                        e = document.body;
                    }
                }
                return function() {
                    return e[p];
                };
            },
            _getOffset = function(element, container) {
                var rect = _unwrapElement(element).getBoundingClientRect(),
                    isRoot = (!container || container === _window || container === document.body),
                    cRect = (isRoot ? _doc : container).getBoundingClientRect(),
                    offsets = {x: rect.left - cRect.left, y: rect.top - cRect.top};
                if (!isRoot && container) { //only add the current scroll position if it's not the window/body.
                    offsets.x += _buildGetter(container, "x")();
                    offsets.y += _buildGetter(container, "y")();
                }
                return offsets;
            },
            _parseVal = function(value, target, axis) {
                var type = typeof(value);
                return !isNaN(value) ? parseFloat(value) : (type === "number" || (type === "string" && value.charAt(1) === "=")) ? value : (value === "max") ? _max(target, axis) : Math.min(_max(target, axis), _getOffset(value, target)[axis]);
            },
    
            ScrollToPlugin = _gsScope._gsDefine.plugin({
                propName: "scrollTo",
                API: 2,
                global: true,
                version:"1.9.0",
    
                //called when the tween renders for the first time. This is where initial values should be recorded and any setup routines should run.
                init: function(target, value, tween) {
                    this._wdw = (target === _window);
                    this._target = target;
                    this._tween = tween;
                    if (typeof(value) !== "object") {
                        value = {y:value}; //if we don't receive an object as the parameter, assume the user intends "y".
                        if (typeof(value.y) === "string" && value.y !== "max" && value.y.charAt(1) !== "=") {
                            value.x = value.y;
                        }
                    } else if (value.nodeType) {
                        value = {y:value, x:value};
                    }
                    this.vars = value;
                    this._autoKill = (value.autoKill !== false);
                    this.getX = _buildGetter(target, "x");
                    this.getY = _buildGetter(target, "y");
                    this.x = this.xPrev = this.getX();
                    this.y = this.yPrev = this.getY();
                    if (value.x != null) {
                        this._addTween(this, "x", this.x, _parseVal(value.x, target, "x") - (value.offsetX || 0), "scrollTo_x", true);
                        this._overwriteProps.push("scrollTo_x");
                    } else {
                        this.skipX = true;
                    }
                    if (value.y != null) {
                        this._addTween(this, "y", this.y, _parseVal(value.y, target, "y") - (value.offsetY || 0), "scrollTo_y", true);
                        this._overwriteProps.push("scrollTo_y");
                    } else {
                        this.skipY = true;
                    }
                    return true;
                },
    
                //called each time the values should be updated, and the ratio gets passed as the only parameter (typically it's a value between 0 and 1, but it can exceed those when using an ease like Elastic.easeOut or Back.easeOut, etc.)
                set: function(v) {
                    this._super.setRatio.call(this, v);
    
                    var x = (this._wdw || !this.skipX) ? this.getX() : this.xPrev,
                        y = (this._wdw || !this.skipY) ? this.getY() : this.yPrev,
                        yDif = y - this.yPrev,
                        xDif = x - this.xPrev,
                        threshold = ScrollToPlugin.autoKillThreshold;
    
                    if (this.x < 0) { //can't scroll to a position less than 0! Might happen if someone uses a Back.easeOut or Elastic.easeOut when scrolling back to the top of the page (for example)
                        this.x = 0;
                    }
                    if (this.y < 0) {
                        this.y = 0;
                    }
                    if (this._autoKill) {
                        //note: iOS has a bug that throws off the scroll by several pixels, so we need to check if it's within 7 pixels of the previous one that we set instead of just looking for an exact match.
                        if (!this.skipX && (xDif > threshold || xDif < -threshold) && x < _max(this._target, "x")) {
                            this.skipX = true; //if the user scrolls separately, we should stop tweening!
                        }
                        if (!this.skipY && (yDif > threshold || yDif < -threshold) && y < _max(this._target, "y")) {
                            this.skipY = true; //if the user scrolls separately, we should stop tweening!
                        }
                        if (this.skipX && this.skipY) {
                            this._tween.kill();
                            if (this.vars.onAutoKill) {
                                this.vars.onAutoKill.apply(this.vars.onAutoKillScope || this._tween, this.vars.onAutoKillParams || []);
                            }
                        }
                    }
                    if (this._wdw) {
                        _window.scrollTo((!this.skipX) ? this.x : x, (!this.skipY) ? this.y : y);
                    } else {
                        if (!this.skipY) {
                            this._target.scrollTop = this.y;
                        }
                        if (!this.skipX) {
                            this._target.scrollLeft = this.x;
                        }
                    }
                    this.xPrev = this.x;
                    this.yPrev = this.y;
                }
    
            }),
            p = ScrollToPlugin.prototype;
    
        ScrollToPlugin.max = _max;
        ScrollToPlugin.getOffset = _getOffset;
        ScrollToPlugin.buildGetter = _buildGetter;
        ScrollToPlugin.autoKillThreshold = 7;
    
        p._kill = function(lookup) {
            if (lookup.scrollTo_x) {
                this.skipX = true;
            }
            if (lookup.scrollTo_y) {
                this.skipY = true;
            }
            return this._super._kill.call(this, lookup);
        };
    
    }); if (_gsScope._gsDefine) { _gsScope._gsQueue.pop()(); }
    
    //export to AMD/RequireJS and CommonJS/Node (precursor to full modular build system coming at a later date)
    (function(name) {
        "use strict";
        var getGlobal = function() {
            return (_gsScope.GreenSockGlobals || _gsScope)[name];
        };
        if (typeof(module) !== "undefined" && module.exports) { //node
            __webpack_require__(57);
            module.exports = getGlobal();
        } else if (true) { //AMD
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(57)], __WEBPACK_AMD_DEFINE_FACTORY__ = (getGlobal),
                    __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
                    (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
                    __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }
    }("ScrollToPlugin"));
    /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(22)))
    
    /***/ }),
    /* 62 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    __webpack_require__(81);
    
    var _helpers = __webpack_require__(3);
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var Dot = function () {
        function Dot(el) {
            _classCallCheck(this, Dot);
    
            this.$el = $(el);
            this.$disableDot = $('.disable-dot');
    
            this.init();
        }
    
        _createClass(Dot, [{
            key: 'init',
            value: function init() {
                var _this = this;
    
                _helpers.$window.on('load', function () {
                    _this.initDot();
                    _this.onResize();
                });
            }
        }, {
            key: 'onResize',
            value: function onResize() {
                var _this2 = this;
    
                var reinitDot = (0, _helpers.throttle)(function () {
                    _this2.destroy();
                    _this2.initDot();
                }, 250, this);
    
                _helpers.$window.on('resize orientationchange', reinitDot);
            }
        }, {
            key: 'initDot',
            value: function initDot() {
                if (this.$disableDot.length !== 0) {
                    this.$el.dotdotdot({
                        height: 200
                    });
                } else {
                    this.$el.dotdotdot();
                }
            }
        }, {
            key: 'destroy',
            value: function destroy() {
                this.$el.trigger('destroy');
            }
        }]);
    
        return Dot;
    }();
    
    exports.default = Dot;
    
    /***/ }),
    /* 63 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var global = __webpack_require__(2);
    var SHARED = '__core-js_shared__';
    var store = global[SHARED] || (global[SHARED] = {});
    module.exports = function (key) {
      return store[key] || (store[key] = {});
    };
    
    
    /***/ }),
    /* 64 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // false -> Array#indexOf
    // true  -> Array#includes
    var toIObject = __webpack_require__(17);
    var toLength = __webpack_require__(9);
    var toAbsoluteIndex = __webpack_require__(44);
    module.exports = function (IS_INCLUDES) {
      return function ($this, el, fromIndex) {
        var O = toIObject($this);
        var length = toLength(O.length);
        var index = toAbsoluteIndex(fromIndex, length);
        var value;
        // Array#includes uses SameValueZero equality algorithm
        // eslint-disable-next-line no-self-compare
        if (IS_INCLUDES && el != el) while (length > index) {
          value = O[index++];
          // eslint-disable-next-line no-self-compare
          if (value != value) return true;
        // Array#indexOf ignores holes, Array#includes - not
        } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
          if (O[index] === el) return IS_INCLUDES || index || 0;
        } return !IS_INCLUDES && -1;
      };
    };
    
    
    /***/ }),
    /* 65 */
    /***/ (function(module, exports) {
    
    exports.f = Object.getOwnPropertySymbols;
    
    
    /***/ }),
    /* 66 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 7.2.2 IsArray(argument)
    var cof = __webpack_require__(24);
    module.exports = Array.isArray || function isArray(arg) {
      return cof(arg) == 'Array';
    };
    
    
    /***/ }),
    /* 67 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 7.2.8 IsRegExp(argument)
    var isObject = __webpack_require__(5);
    var cof = __webpack_require__(24);
    var MATCH = __webpack_require__(6)('match');
    module.exports = function (it) {
      var isRegExp;
      return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
    };
    
    
    /***/ }),
    /* 68 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var ITERATOR = __webpack_require__(6)('iterator');
    var SAFE_CLOSING = false;
    
    try {
      var riter = [7][ITERATOR]();
      riter['return'] = function () { SAFE_CLOSING = true; };
      // eslint-disable-next-line no-throw-literal
      Array.from(riter, function () { throw 2; });
    } catch (e) { /* empty */ }
    
    module.exports = function (exec, skipClosing) {
      if (!skipClosing && !SAFE_CLOSING) return false;
      var safe = false;
      try {
        var arr = [7];
        var iter = arr[ITERATOR]();
        iter.next = function () { return { done: safe = true }; };
        arr[ITERATOR] = function () { return iter; };
        exec(arr);
      } catch (e) { /* empty */ }
      return safe;
    };
    
    
    /***/ }),
    /* 69 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // 21.2.5.3 get RegExp.prototype.flags
    var anObject = __webpack_require__(1);
    module.exports = function () {
      var that = anObject(this);
      var result = '';
      if (that.global) result += 'g';
      if (that.ignoreCase) result += 'i';
      if (that.multiline) result += 'm';
      if (that.unicode) result += 'u';
      if (that.sticky) result += 'y';
      return result;
    };
    
    
    /***/ }),
    /* 70 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var hide = __webpack_require__(14);
    var redefine = __webpack_require__(15);
    var fails = __webpack_require__(4);
    var defined = __webpack_require__(28);
    var wks = __webpack_require__(6);
    
    module.exports = function (KEY, length, exec) {
      var SYMBOL = wks(KEY);
      var fns = exec(defined, SYMBOL, ''[KEY]);
      var strfn = fns[0];
      var rxfn = fns[1];
      if (fails(function () {
        var O = {};
        O[SYMBOL] = function () { return 7; };
        return ''[KEY](O) != 7;
      })) {
        redefine(String.prototype, KEY, strfn);
        hide(RegExp.prototype, SYMBOL, length == 2
          // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
          // 21.2.5.11 RegExp.prototype[@@split](string, limit)
          ? function (string, arg) { return rxfn.call(string, this, arg); }
          // 21.2.5.6 RegExp.prototype[@@match](string)
          // 21.2.5.9 RegExp.prototype[@@search](string)
          : function (string) { return rxfn.call(string, this); }
        );
      }
    };
    
    
    /***/ }),
    /* 71 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 7.3.20 SpeciesConstructor(O, defaultConstructor)
    var anObject = __webpack_require__(1);
    var aFunction = __webpack_require__(11);
    var SPECIES = __webpack_require__(6)('species');
    module.exports = function (O, D) {
      var C = anObject(O).constructor;
      var S;
      return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
    };
    
    
    /***/ }),
    /* 72 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var global = __webpack_require__(2);
    var $export = __webpack_require__(0);
    var redefine = __webpack_require__(15);
    var redefineAll = __webpack_require__(50);
    var meta = __webpack_require__(36);
    var forOf = __webpack_require__(49);
    var anInstance = __webpack_require__(48);
    var isObject = __webpack_require__(5);
    var fails = __webpack_require__(4);
    var $iterDetect = __webpack_require__(68);
    var setToStringTag = __webpack_require__(53);
    var inheritIfRequired = __webpack_require__(89);
    
    module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
      var Base = global[NAME];
      var C = Base;
      var ADDER = IS_MAP ? 'set' : 'add';
      var proto = C && C.prototype;
      var O = {};
      var fixMethod = function (KEY) {
        var fn = proto[KEY];
        redefine(proto, KEY,
          KEY == 'delete' ? function (a) {
            return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
          } : KEY == 'has' ? function has(a) {
            return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
          } : KEY == 'get' ? function get(a) {
            return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
          } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
            : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
        );
      };
      if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
        new C().entries().next();
      }))) {
        // create collection constructor
        C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
        redefineAll(C.prototype, methods);
        meta.NEED = true;
      } else {
        var instance = new C();
        // early implementations not supports chaining
        var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
        // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
        var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
        // most early implementations doesn't supports iterables, most modern - not close it correctly
        var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
        // for early implementations -0 and +0 not the same
        var BUGGY_ZERO = !IS_WEAK && fails(function () {
          // V8 ~ Chromium 42- fails only with 5+ elements
          var $instance = new C();
          var index = 5;
          while (index--) $instance[ADDER](index, index);
          return !$instance.has(-0);
        });
        if (!ACCEPT_ITERABLES) {
          C = wrapper(function (target, iterable) {
            anInstance(target, C, NAME);
            var that = inheritIfRequired(new Base(), target, C);
            if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
            return that;
          });
          C.prototype = proto;
          proto.constructor = C;
        }
        if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
          fixMethod('delete');
          fixMethod('has');
          IS_MAP && fixMethod('get');
        }
        if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
        // weak collections should not contains .clear method
        if (IS_WEAK && proto.clear) delete proto.clear;
      }
    
      setToStringTag(C, NAME);
    
      O[NAME] = C;
      $export($export.G + $export.W + $export.F * (C != Base), O);
    
      if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);
    
      return C;
    };
    
    
    /***/ }),
    /* 73 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var global = __webpack_require__(2);
    var hide = __webpack_require__(14);
    var uid = __webpack_require__(41);
    var TYPED = uid('typed_array');
    var VIEW = uid('view');
    var ABV = !!(global.ArrayBuffer && global.DataView);
    var CONSTR = ABV;
    var i = 0;
    var l = 9;
    var Typed;
    
    var TypedArrayConstructors = (
      'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
    ).split(',');
    
    while (i < l) {
      if (Typed = global[TypedArrayConstructors[i++]]) {
        hide(Typed.prototype, TYPED, true);
        hide(Typed.prototype, VIEW, true);
      } else CONSTR = false;
    }
    
    module.exports = {
      ABV: ABV,
      CONSTR: CONSTR,
      TYPED: TYPED,
      VIEW: VIEW
    };
    
    
    /***/ }),
    /* 74 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // Forced replacement prototype accessors methods
    module.exports = __webpack_require__(42) || !__webpack_require__(4)(function () {
      var K = Math.random();
      // In FF throws only define methods
      // eslint-disable-next-line no-undef, no-useless-call
      __defineSetter__.call(null, K, function () { /* empty */ });
      delete __webpack_require__(2)[K];
    });
    
    
    /***/ }),
    /* 75 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // https://tc39.github.io/proposal-setmap-offrom/
    var $export = __webpack_require__(0);
    
    module.exports = function (COLLECTION) {
      $export($export.S, COLLECTION, { of: function of() {
        var length = arguments.length;
        var A = Array(length);
        while (length--) A[length] = arguments[length];
        return new this(A);
      } });
    };
    
    
    /***/ }),
    /* 76 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // https://tc39.github.io/proposal-setmap-offrom/
    var $export = __webpack_require__(0);
    var aFunction = __webpack_require__(11);
    var ctx = __webpack_require__(23);
    var forOf = __webpack_require__(49);
    
    module.exports = function (COLLECTION) {
      $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {
        var mapFn = arguments[1];
        var mapping, A, n, cb;
        aFunction(this);
        mapping = mapFn !== undefined;
        if (mapping) aFunction(mapFn);
        if (source == undefined) return new this();
        A = [];
        if (mapping) {
          n = 0;
          cb = ctx(mapFn, arguments[2], 2);
          forOf(source, false, function (nextItem) {
            A.push(cb(nextItem, n++));
          });
        } else {
          forOf(source, false, A.push, A);
        }
        return new this(A);
      } });
    };
    
    
    /***/ }),
    /* 77 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _enquire2 = __webpack_require__(145);
    
    var _enquire3 = _interopRequireDefault(_enquire2);
    
    var _helpers = __webpack_require__(3);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var NoTouch = function () {
        function NoTouch() {
            _classCallCheck(this, NoTouch);
    
            NoTouch.init();
        }
    
        _createClass(NoTouch, null, [{
            key: 'init',
            value: function init() {
                NoTouch.enquire();
            }
        }, {
            key: 'enquire',
            value: function enquire() {
                _enquire3.default.register(_helpers.resp.desk, {
                    match: function match() {
                        _helpers.$body.addClass(_helpers.css.noTouch);
                    },
                    unmatch: function unmatch() {
                        _helpers.$body.removeClass(_helpers.css.noTouch);
                    }
                });
            }
        }]);
    
        return NoTouch;
    }();
    
    exports.default = new NoTouch();
    
    /***/ }),
    /* 78 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.PreloaderAPI = undefined;
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _helpers = __webpack_require__(3);
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var Preloader = function () {
        function Preloader() {
            _classCallCheck(this, Preloader);
    
            this.$preloader = $('.preloader');
            this.$circle = this.$preloader.find('.preloader__circle');
            this.resolved = false;
    
            this.init();
        }
    
        _createClass(Preloader, [{
            key: 'init',
            value: function init() {
                var _this = this;
    
                return new Promise(function (resolve) {
                    _helpers.$body.removeClass(_helpers.css.loading);
                    _helpers.$window.on('load', function () {
                        var preloaderDuration = _this.$circle.transtionend();
    
                        _this.$circle.addClass(_helpers.css.active);
    
                        if (_helpers.$window.scrollTop() > 0) {
                            _helpers.$body.removeClass(_helpers.css.overflow);
                        }
    
                        setTimeout(function () {
                            _this.$preloader.addClass(_helpers.css.active);
                        }, preloaderDuration * 2 / 3);
    
                        setTimeout(function () {
                            _this.resolved = true;
                            resolve();
                        }, preloaderDuration);
                    });
    
                    $.fn.transtionend = function () {
                        // check the main transition duration property
                        if (this.css('transition-duration')) {
                            return Math.round(parseFloat(this.css('transition-duration')) * 1000);
                        } else {
                            if (this.css('-webkit-transtion-duration')) return Math.round(parseFloat(this.css('-webkit-transtion-duration')) * 1000);
                            if (this.css('-moz-transtion-duration')) return Math.round(parseFloat(this.css('-moz-transtion-duration')) * 1000);
                            if (this.css('-ms-transtion-duration')) return Math.round(parseFloat(this.css('-ms-transtion-duration')) * 1000);
                            if (this.css('-o-transtion-duration')) return Math.round(parseFloat(this.css('-ms-transtion-duration')) * 1000);
                        }
                        // if we're here, then no transition duration was found, return 0
                        return 0;
                    };
                });
            }
        }, {
            key: 'wait',
            value: function wait() {
                var _this2 = this;
    
                return new Promise(function (resolve) {
                    var waitInerval = setInterval(function () {
                        if (_this2.resolved === true) {
                            clearInterval(waitInerval);
                            resolve();
                        }
                    }, 25);
                });
            }
        }]);
    
        return Preloader;
    }();
    
    var PreloaderAPI = exports.PreloaderAPI = new Preloader();
    
    /***/ }),
    /* 79 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _ScrollMagic = __webpack_require__(35);
    
    var _ScrollMagic2 = _interopRequireDefault(_ScrollMagic);
    
    __webpack_require__(375);
    
    var _helpers = __webpack_require__(3);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var SCROLL_TRIGGER_ANIMATIONS = function () {
        function SCROLL_TRIGGER_ANIMATIONS(config) {
            _classCallCheck(this, SCROLL_TRIGGER_ANIMATIONS);
    
            this._container = config.container;
            this.onStart = config.onStart;
            this.onEnter = config.onEnter;
            this.onEnd = config.onEnd;
            this._triggerHook = config.triggerHook;
            this._offset = config.offset;
            this._init();
        }
    
        _createClass(SCROLL_TRIGGER_ANIMATIONS, [{
            key: '_init',
            value: function _init() {
                if (!this._container) return;
                this._createController();
                this._createScene();
            }
        }, {
            key: '_createController',
            value: function _createController() {
                this._controller = new _ScrollMagic2.default.Controller({ addIndicators: false });
            }
        }, {
            key: '_createScene',
            value: function _createScene() {
                var _this = this;
                this.scene = new _ScrollMagic2.default.Scene({
                    triggerElement: this._container,
                    triggerHook: this._triggerHook || _helpers.Resp.isDesk ? 0.85 : 1,
                    offset: this._offset || 0
                })
                //.addIndicators()
                .on('start', function (event) {
                    if ($(_this._container).hasClass('has-anim')) return;
                    if (typeof _this.onStart != 'function') return;
                    _this.onStart();
                    $(_this._container).addClass('has-anim');
                }).on('enter', function (event) {
                    if (typeof _this.onEnter != 'function') return;
                    _this.onEnter();
                }).on('end', function (event) {
                    if (typeof _this.onEnd != 'function') return;
                    _this.onEnd();
                }).addTo(this._controller);
            }
        }, {
            key: 'destroyScroll',
            value: function destroyScroll() {
                this.scene.destroy(true);
            }
        }]);
    
        return SCROLL_TRIGGER_ANIMATIONS;
    }();
    
    exports.default = SCROLL_TRIGGER_ANIMATIONS;
    ;
    
    /***/ }),
    /* 80 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.AnimLinesAPI = undefined;
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _helpers = __webpack_require__(3);
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var AnimLines = function () {
        function AnimLines() {
            _classCallCheck(this, AnimLines);
    
            this.$animLine = function () {
                return $('.anim-line');
            };
    
            if (this.$animLine.length) {
                this.init();
            }
        }
    
        _createClass(AnimLines, [{
            key: 'init',
            value: function init() {
                this.createAnim();
            }
        }, {
            key: 'createAnim',
            value: function createAnim() {
                var $itemLinesWrap = this.$animLine();
    
                $itemLinesWrap.each(function (index, el) {
                    var $el = $(el);
    
                    $el.children().addClass(_helpers.css.animLine);
                });
            }
        }]);
    
        return AnimLines;
    }();
    
    var AnimLinesAPI = exports.AnimLinesAPI = new AnimLines();
    
    /***/ }),
    /* 81 */
    /***/ (function(module, exports) {
    
    /*
     *	jQuery dotdotdot 1.7.0
     *
     *	Copyright (c) Fred Heusschen
     *	www.frebsite.nl
     *
     *	Plugin website:
     *	dotdotdot.frebsite.nl
     *
     *	Licensed under the MIT license.
     *	http://en.wikipedia.org/wiki/MIT_License
     */
    
    (function( $, undef )
    {
        if ( $.fn.dotdotdot )
        {
            return;
        }
    
        $.fn.dotdotdot = function( o )
        {
            if ( this.length == 0 )
            {
                $.fn.dotdotdot.debug( 'No element found for "' + this.selector + '".' );
                return this;
            }
            if ( this.length > 1 )
            {
                return this.each(
                    function()
                    {
                        $(this).dotdotdot( o );
                    }
                );
            }
    
    
            var $dot = this;
    
            if ( $dot.data( 'dotdotdot' ) )
            {
                $dot.trigger( 'destroy.dot' );
            }
    
            $dot.data( 'dotdotdot-style', $dot.attr( 'style' ) || '' );
            $dot.css( 'word-wrap', 'break-word' );
            if ($dot.css( 'white-space' ) === 'nowrap')
            {
                $dot.css( 'white-space', 'normal' );
            }
    
            $dot.bind_events = function()
            {
                $dot.bind(
                    'update.dot',
                    function( e, c )
                    {
                        e.preventDefault();
                        e.stopPropagation();
    
                        opts.maxHeight = ( typeof opts.height == 'number' )
                            ? opts.height
                            : getTrueInnerHeight( $dot );
    
                        opts.maxHeight += opts.tolerance;
    
                        if ( typeof c != 'undefined' )
                        {
                            if ( typeof c == 'string' || c instanceof HTMLElement )
                            {
                                 c = $('<div />').append( c ).contents();
                            }
                            if ( c instanceof $ )
                            {
                                orgContent = c;
                            }
                        }
    
                        $inr = $dot.wrapInner( '<div class="dotdotdot" />' ).children();
                        $inr.contents()
                            .detach()
                            .end()
                            .append( orgContent.clone( true ) )
                            .find( 'br' )
                            .replaceWith( '  <br />  ' )
                            .end()
                            .css({
                                'height'	: 'auto',
                                'width'		: 'auto',
                                'border'	: 'none',
                                'padding'	: 0,
                                'margin'	: 0
                            });
    
                        var after = false,
                            trunc = false;
    
                        if ( conf.afterElement )
                        {
                            after = conf.afterElement.clone( true );
                            after.show();
                            conf.afterElement.detach();
                        }
    
                        if ( test( $inr, opts ) )
                        {
                            if ( opts.wrap == 'children' )
                            {
                                trunc = children( $inr, opts, after );
                            }
                            else
                            {
                                trunc = ellipsis( $inr, $dot, $inr, opts, after );
                            }
                        }
                        $inr.replaceWith( $inr.contents() );
                        $inr = null;
    
                        if ( $.isFunction( opts.callback ) )
                        {
                            opts.callback.call( $dot[ 0 ], trunc, orgContent );
                        }
    
                        conf.isTruncated = trunc;
                        return trunc;
                    }
    
                ).bind(
                    'isTruncated.dot',
                    function( e, fn )
                    {
                        e.preventDefault();
                        e.stopPropagation();
    
                        if ( typeof fn == 'function' )
                        {
                            fn.call( $dot[ 0 ], conf.isTruncated );
                        }
                        return conf.isTruncated;
                    }
    
                ).bind(
                    'originalContent.dot',
                    function( e, fn )
                    {
                        e.preventDefault();
                        e.stopPropagation();
    
                        if ( typeof fn == 'function' )
                        {
                            fn.call( $dot[ 0 ], orgContent );
                        }
                        return orgContent;
                    }
    
                ).bind(
                    'destroy.dot',
                    function( e )
                    {
                        e.preventDefault();
                        e.stopPropagation();
    
                        $dot.unwatch()
                            .unbind_events()
                            .contents()
                            .detach()
                            .end()
                            .append( orgContent )
                            .attr( 'style', $dot.data( 'dotdotdot-style' ) || '' )
                            .data( 'dotdotdot', false );
                    }
                );
                return $dot;
            };	//	/bind_events
    
            $dot.unbind_events = function()
            {
                $dot.unbind('.dot');
                return $dot;
            };	//	/unbind_events
    
            $dot.watch = function()
            {
                $dot.unwatch();
                if ( opts.watch == 'window' )
                {
                    var $window = $(window),
                        _wWidth = $window.width(),
                        _wHeight = $window.height();
    
                    $window.bind(
                        'resize.dot' + conf.dotId,
                        function()
                        {
                            if ( _wWidth != $window.width() || _wHeight != $window.height() || !opts.windowResizeFix )
                            {
                                _wWidth = $window.width();
                                _wHeight = $window.height();
    
                                if ( watchInt )
                                {
                                    clearInterval( watchInt );
                                }
                                watchInt = setTimeout(
                                    function()
                                    {
                                        $dot.trigger( 'update.dot' );
                                    }, 100
                                );
                            }
                        }
                    );
                }
                else
                {
                    watchOrg = getSizes( $dot );
                    watchInt = setInterval(
                        function()
                        {
                            if ( $dot.is( ':visible' ) )
                            {
                                var watchNew = getSizes( $dot );
                                if ( watchOrg.width  != watchNew.width ||
                                     watchOrg.height != watchNew.height )
                                {
                                    $dot.trigger( 'update.dot' );
                                    watchOrg = watchNew;
                                }
                            }
                        }, 500
                    );
                }
                return $dot;
            };
            $dot.unwatch = function()
            {
                $(window).unbind( 'resize.dot' + conf.dotId );
                if ( watchInt )
                {
                    clearInterval( watchInt );
                }
                return $dot;
            };
    
            var	orgContent	= $dot.contents(),
                opts 		= $.extend( true, {}, $.fn.dotdotdot.defaults, o ),
                conf		= {},
                watchOrg	= {},
                watchInt	= null,
                $inr		= null;
    
    
            if ( !( opts.lastCharacter.remove instanceof Array ) )
            {
                opts.lastCharacter.remove = $.fn.dotdotdot.defaultArrays.lastCharacter.remove;
            }
            if ( !( opts.lastCharacter.noEllipsis instanceof Array ) )
            {
                opts.lastCharacter.noEllipsis = $.fn.dotdotdot.defaultArrays.lastCharacter.noEllipsis;
            }
    
    
            conf.afterElement	= getElement( opts.after, $dot );
            conf.isTruncated	= false;
            conf.dotId			= dotId++;
    
    
            $dot.data( 'dotdotdot', true )
                .bind_events()
                .trigger( 'update.dot' );
    
            if ( opts.watch )
            {
                $dot.watch();
            }
    
            return $dot;
        };
    
    
        //	public
        $.fn.dotdotdot.defaults = {
            'ellipsis'			: '... ',
            'wrap'				: 'word',
            'fallbackToLetter'	: true,
            'lastCharacter'		: {},
            'tolerance'			: 0,
            'callback'			: null,
            'after'				: null,
            'height'			: null,
            'watch'				: false,
            'windowResizeFix'	: true
        };
        $.fn.dotdotdot.defaultArrays = {
            'lastCharacter'		: {
                'remove'			: [ ' ', '\u3000', ',', ';', '.', '!', '?' ],
                'noEllipsis'		: []
            }
        };
        $.fn.dotdotdot.debug = function( msg ) {};
    
    
        //	private
        var dotId = 1;
    
        function children( $elem, o, after )
        {
            var $elements 	= $elem.children(),
                isTruncated	= false;
    
            $elem.empty();
    
            for ( var a = 0, l = $elements.length; a < l; a++ )
            {
                var $e = $elements.eq( a );
                $elem.append( $e );
                if ( after )
                {
                    $elem.append( after );
                }
                if ( test( $elem, o ) )
                {
                    $e.remove();
                    isTruncated = true;
                    break;
                }
                else
                {
                    if ( after )
                    {
                        after.detach();
                    }
                }
            }
            return isTruncated;
        }
        function ellipsis( $elem, $d, $i, o, after )
        {
            var isTruncated	= false;
    
            //	Don't put the ellipsis directly inside these elements
            var notx = 'table, thead, tbody, tfoot, tr, col, colgroup, object, embed, param, ol, ul, dl, blockquote, select, optgroup, option, textarea, script, style';
    
            //	Don't remove these elements even if they are after the ellipsis
            var noty = 'script, .dotdotdot-keep';
    
            $elem
                .contents()
                .detach()
                .each(
                    function()
                    {
    
                        var e	= this,
                            $e	= $(e);
    
                        if ( typeof e == 'undefined' || ( e.nodeType == 3 && $.trim( e.data ).length == 0 ) )
                        {
                            return true;
                        }
                        else if ( $e.is( noty ) )
                        {
                            $elem.append( $e );
                        }
                        else if ( isTruncated )
                        {
                            return true;
                        }
                        else
                        {
                            $elem.append( $e );
                            if ( after )
                            {
                                $elem[ $elem.is( notx ) ? 'after' : 'append' ]( after );
                            }
                            if ( test( $i, o ) )
                            {
                                if ( e.nodeType == 3 ) // node is TEXT
                                {
                                    isTruncated = ellipsisElement( $e, $d, $i, o, after );
                                }
                                else
                                {
                                    isTruncated = ellipsis( $e, $d, $i, o, after );
                                }
    
                                if ( !isTruncated )
                                {
                                    $e.detach();
                                    isTruncated = true;
                                }
                            }
    
                            if ( !isTruncated )
                            {
                                if ( after )
                                {
                                    after.detach();
                                }
                            }
                        }
                    }
                );
    
            return isTruncated;
        }
        function ellipsisElement( $e, $d, $i, o, after )
        {
            var e = $e[ 0 ];
    
            if ( !e )
            {
                return false;
            }
    
            var txt			= getTextContent( e ),
                space		= ( txt.indexOf(' ') !== -1 ) ? ' ' : '\u3000',
                separator	= ( o.wrap == 'letter' ) ? '' : space,
                textArr		= txt.split( separator ),
                position 	= -1,
                midPos		= -1,
                startPos	= 0,
                endPos		= textArr.length - 1;
    
    
            //	Only one word
            if ( o.fallbackToLetter && startPos == 0 && endPos == 0 )
            {
                separator	= '';
                textArr		= txt.split( separator );
                endPos		= textArr.length - 1;
            }
    
            while ( startPos <= endPos && !( startPos == 0 && endPos == 0 ) )
            {
                var m = Math.floor( ( startPos + endPos ) / 2 );
                if ( m == midPos )
                {
                    break;
                }
                midPos = m;
    
                setTextContent( e, textArr.slice( 0, midPos + 1 ).join( separator ) + o.ellipsis );
    
                if ( !test( $i, o ) )
                {
                    position = midPos;
                    startPos = midPos;
                }
                else
                {
                    endPos = midPos;
    
                    //	Fallback to letter
                    if (o.fallbackToLetter && startPos == 0 && endPos == 0 )
                    {
                        separator	= '';
                        textArr		= textArr[ 0 ].split( separator );
                        position	= -1;
                        midPos		= -1;
                        startPos	= 0;
                        endPos		= textArr.length - 1;
                    }
                }
            }
    
            if ( position != -1 && !( textArr.length == 1 && textArr[ 0 ].length == 0 ) )
            {
                txt = addEllipsis( textArr.slice( 0, position + 1 ).join( separator ), o );
                setTextContent( e, txt );
            }
            else
            {
                var $w = $e.parent();
                $e.detach();
    
                var afterLength = ( after && after.closest($w).length ) ? after.length : 0;
    
                if ( $w.contents().length > afterLength )
                {
                    e = findLastTextNode( $w.contents().eq( -1 - afterLength ), $d );
                }
                else
                {
                    e = findLastTextNode( $w, $d, true );
                    if ( !afterLength )
                    {
                        $w.detach();
                    }
                }
                if ( e )
                {
                    txt = addEllipsis( getTextContent( e ), o );
                    setTextContent( e, txt );
                    if ( afterLength && after )
                    {
                        $(e).parent().append( after );
                    }
                }
            }
    
            return true;
        }
        function test( $i, o )
        {
            return $i.innerHeight() > o.maxHeight;
        }
        function addEllipsis( txt, o )
        {
            while( $.inArray( txt.slice( -1 ), o.lastCharacter.remove ) > -1 )
            {
                txt = txt.slice( 0, -1 );
            }
            if ( $.inArray( txt.slice( -1 ), o.lastCharacter.noEllipsis ) < 0 )
            {
                txt += o.ellipsis;
            }
            return txt;
        }
        function getSizes( $d )
        {
            return {
                'width'	: $d.innerWidth(),
                'height': $d.innerHeight()
            };
        }
        function setTextContent( e, content )
        {
            if ( e.innerText )
            {
                e.innerText = content;
            }
            else if ( e.nodeValue )
            {
                e.nodeValue = content;
            }
            else if (e.textContent)
            {
                e.textContent = content;
            }
    
        }
        function getTextContent( e )
        {
            if ( e.innerText )
            {
                return e.innerText;
            }
            else if ( e.nodeValue )
            {
                return e.nodeValue;
            }
            else if ( e.textContent )
            {
                return e.textContent;
            }
            else
            {
                return "";
            }
        }
        function getPrevNode( n )
        {
            do
            {
                n = n.previousSibling;
            }
            while ( n && n.nodeType !== 1 && n.nodeType !== 3 );
    
            return n;
        }
        function findLastTextNode( $el, $top, excludeCurrent )
        {
            var e = $el && $el[ 0 ], p;
            if ( e )
            {
                if ( !excludeCurrent )
                {
                    if ( e.nodeType === 3 )
                    {
                        return e;
                    }
                    if ( $.trim( $el.text() ) )
                    {
                        return findLastTextNode( $el.contents().last(), $top );
                    }
                }
                p = getPrevNode( e );
                while ( !p )
                {
                    $el = $el.parent();
                    if ( $el.is( $top ) || !$el.length )
                    {
                        return false;
                    }
                    p = getPrevNode( $el[0] );
                }
                if ( p )
                {
                    return findLastTextNode( $(p), $top );
                }
            }
            return false;
        }
        function getElement( e, $i )
        {
            if ( !e )
            {
                return false;
            }
            if ( typeof e === 'string' )
            {
                e = $(e, $i);
                return ( e.length )
                    ? e
                    : false;
            }
            return !e.jquery
                ? false
                : e;
        }
        function getTrueInnerHeight( $el )
        {
            var h = $el.innerHeight(),
                a = [ 'paddingTop', 'paddingBottom' ];
    
            for ( var z = 0, l = a.length; z < l; z++ )
            {
                var m = parseInt( $el.css( a[ z ] ), 10 );
                if ( isNaN( m ) )
                {
                    m = 0;
                }
                h -= m;
            }
            return h;
        }
    
    
        //	override jQuery.html
        var _orgHtml = $.fn.html;
        $.fn.html = function( str )
        {
            if ( str != undef && !$.isFunction( str ) && this.data( 'dotdotdot' ) )
            {
                return this.trigger( 'update', [ str ] );
            }
            return _orgHtml.apply( this, arguments );
        };
    
    
        //	override jQuery.text
        var _orgText = $.fn.text;
        $.fn.text = function( str )
        {
            if ( str != undef && !$.isFunction( str ) && this.data( 'dotdotdot' ) )
            {
                str = $( '<div />' ).text( str ).html();
                return this.trigger( 'update', [ str ] );
            }
            return _orgText.apply( this, arguments );
        };
    
    
    })( jQuery );
    
    
    /***/ }),
    /* 82 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var isObject = __webpack_require__(5);
    var document = __webpack_require__(2).document;
    // typeof document.createElement is 'object' in old IE
    var is = isObject(document) && isObject(document.createElement);
    module.exports = function (it) {
      return is ? document.createElement(it) : {};
    };
    
    
    /***/ }),
    /* 83 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var global = __webpack_require__(2);
    var core = __webpack_require__(26);
    var LIBRARY = __webpack_require__(42);
    var wksExt = __webpack_require__(112);
    var defineProperty = __webpack_require__(8).f;
    module.exports = function (name) {
      var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
      if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
    };
    
    
    /***/ }),
    /* 84 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var shared = __webpack_require__(63)('keys');
    var uid = __webpack_require__(41);
    module.exports = function (key) {
      return shared[key] || (shared[key] = uid(key));
    };
    
    
    /***/ }),
    /* 85 */
    /***/ (function(module, exports) {
    
    // IE 8- don't enum bug keys
    module.exports = (
      'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
    ).split(',');
    
    
    /***/ }),
    /* 86 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var document = __webpack_require__(2).document;
    module.exports = document && document.documentElement;
    
    
    /***/ }),
    /* 87 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // Works with __proto__ only. Old v8 can't work with null proto objects.
    /* eslint-disable no-proto */
    var isObject = __webpack_require__(5);
    var anObject = __webpack_require__(1);
    var check = function (O, proto) {
      anObject(O);
      if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
    };
    module.exports = {
      set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
        function (test, buggy, set) {
          try {
            set = __webpack_require__(23)(Function.call, __webpack_require__(18).f(Object.prototype, '__proto__').set, 2);
            set(test, []);
            buggy = !(test instanceof Array);
          } catch (e) { buggy = true; }
          return function setPrototypeOf(O, proto) {
            check(O, proto);
            if (buggy) O.__proto__ = proto;
            else set(O, proto);
            return O;
          };
        }({}, false) : undefined),
      check: check
    };
    
    
    /***/ }),
    /* 88 */
    /***/ (function(module, exports) {
    
    module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
      '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';
    
    
    /***/ }),
    /* 89 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var isObject = __webpack_require__(5);
    var setPrototypeOf = __webpack_require__(87).set;
    module.exports = function (that, target, C) {
      var S = target.constructor;
      var P;
      if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
        setPrototypeOf(that, P);
      } return that;
    };
    
    
    /***/ }),
    /* 90 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var toInteger = __webpack_require__(29);
    var defined = __webpack_require__(28);
    
    module.exports = function repeat(count) {
      var str = String(defined(this));
      var res = '';
      var n = toInteger(count);
      if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
      for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
      return res;
    };
    
    
    /***/ }),
    /* 91 */
    /***/ (function(module, exports) {
    
    // 20.2.2.28 Math.sign(x)
    module.exports = Math.sign || function sign(x) {
      // eslint-disable-next-line no-self-compare
      return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
    };
    
    
    /***/ }),
    /* 92 */
    /***/ (function(module, exports) {
    
    // 20.2.2.14 Math.expm1(x)
    var $expm1 = Math.expm1;
    module.exports = (!$expm1
      // Old FF bug
      || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
      // Tor Browser bug
      || $expm1(-2e-17) != -2e-17
    ) ? function expm1(x) {
      return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
    } : $expm1;
    
    
    /***/ }),
    /* 93 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var toInteger = __webpack_require__(29);
    var defined = __webpack_require__(28);
    // true  -> String#at
    // false -> String#codePointAt
    module.exports = function (TO_STRING) {
      return function (that, pos) {
        var s = String(defined(that));
        var i = toInteger(pos);
        var l = s.length;
        var a, b;
        if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
        a = s.charCodeAt(i);
        return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
          ? TO_STRING ? s.charAt(i) : a
          : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
      };
    };
    
    
    /***/ }),
    /* 94 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var LIBRARY = __webpack_require__(42);
    var $export = __webpack_require__(0);
    var redefine = __webpack_require__(15);
    var hide = __webpack_require__(14);
    var has = __webpack_require__(13);
    var Iterators = __webpack_require__(55);
    var $iterCreate = __webpack_require__(95);
    var setToStringTag = __webpack_require__(53);
    var getPrototypeOf = __webpack_require__(19);
    var ITERATOR = __webpack_require__(6)('iterator');
    var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
    var FF_ITERATOR = '@@iterator';
    var KEYS = 'keys';
    var VALUES = 'values';
    
    var returnThis = function () { return this; };
    
    module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
      $iterCreate(Constructor, NAME, next);
      var getMethod = function (kind) {
        if (!BUGGY && kind in proto) return proto[kind];
        switch (kind) {
          case KEYS: return function keys() { return new Constructor(this, kind); };
          case VALUES: return function values() { return new Constructor(this, kind); };
        } return function entries() { return new Constructor(this, kind); };
      };
      var TAG = NAME + ' Iterator';
      var DEF_VALUES = DEFAULT == VALUES;
      var VALUES_BUG = false;
      var proto = Base.prototype;
      var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
      var $default = $native || getMethod(DEFAULT);
      var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
      var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
      var methods, key, IteratorPrototype;
      // Fix native
      if ($anyNative) {
        IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
        if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
          // Set @@toStringTag to native iterators
          setToStringTag(IteratorPrototype, TAG, true);
          // fix for some old engines
          if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
        }
      }
      // fix Array#{values, @@iterator}.name in V8 / FF
      if (DEF_VALUES && $native && $native.name !== VALUES) {
        VALUES_BUG = true;
        $default = function values() { return $native.call(this); };
      }
      // Define iterator
      if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
        hide(proto, ITERATOR, $default);
      }
      // Plug for library
      Iterators[NAME] = $default;
      Iterators[TAG] = returnThis;
      if (DEFAULT) {
        methods = {
          values: DEF_VALUES ? $default : getMethod(VALUES),
          keys: IS_SET ? $default : getMethod(KEYS),
          entries: $entries
        };
        if (FORCED) for (key in methods) {
          if (!(key in proto)) redefine(proto, key, methods[key]);
        } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
      }
      return methods;
    };
    
    
    /***/ }),
    /* 95 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var create = __webpack_require__(45);
    var descriptor = __webpack_require__(40);
    var setToStringTag = __webpack_require__(53);
    var IteratorPrototype = {};
    
    // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
    __webpack_require__(14)(IteratorPrototype, __webpack_require__(6)('iterator'), function () { return this; });
    
    module.exports = function (Constructor, NAME, next) {
      Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
      setToStringTag(Constructor, NAME + ' Iterator');
    };
    
    
    /***/ }),
    /* 96 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // helper for String#{startsWith, endsWith, includes}
    var isRegExp = __webpack_require__(67);
    var defined = __webpack_require__(28);
    
    module.exports = function (that, searchString, NAME) {
      if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
      return String(defined(that));
    };
    
    
    /***/ }),
    /* 97 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var MATCH = __webpack_require__(6)('match');
    module.exports = function (KEY) {
      var re = /./;
      try {
        '/./'[KEY](re);
      } catch (e) {
        try {
          re[MATCH] = false;
          return !'/./'[KEY](re);
        } catch (f) { /* empty */ }
      } return true;
    };
    
    
    /***/ }),
    /* 98 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // check on default Array iterator
    var Iterators = __webpack_require__(55);
    var ITERATOR = __webpack_require__(6)('iterator');
    var ArrayProto = Array.prototype;
    
    module.exports = function (it) {
      return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
    };
    
    
    /***/ }),
    /* 99 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var $defineProperty = __webpack_require__(8);
    var createDesc = __webpack_require__(40);
    
    module.exports = function (object, index, value) {
      if (index in object) $defineProperty.f(object, index, createDesc(0, value));
      else object[index] = value;
    };
    
    
    /***/ }),
    /* 100 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var classof = __webpack_require__(60);
    var ITERATOR = __webpack_require__(6)('iterator');
    var Iterators = __webpack_require__(55);
    module.exports = __webpack_require__(26).getIteratorMethod = function (it) {
      if (it != undefined) return it[ITERATOR]
        || it['@@iterator']
        || Iterators[classof(it)];
    };
    
    
    /***/ }),
    /* 101 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 9.4.2.3 ArraySpeciesCreate(originalArray, length)
    var speciesConstructor = __webpack_require__(247);
    
    module.exports = function (original, length) {
      return new (speciesConstructor(original))(length);
    };
    
    
    /***/ }),
    /* 102 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
    
    var toObject = __webpack_require__(10);
    var toAbsoluteIndex = __webpack_require__(44);
    var toLength = __webpack_require__(9);
    module.exports = function fill(value /* , start = 0, end = @length */) {
      var O = toObject(this);
      var length = toLength(O.length);
      var aLen = arguments.length;
      var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
      var end = aLen > 2 ? arguments[2] : undefined;
      var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
      while (endPos > index) O[index++] = value;
      return O;
    };
    
    
    /***/ }),
    /* 103 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var addToUnscopables = __webpack_require__(37);
    var step = __webpack_require__(128);
    var Iterators = __webpack_require__(55);
    var toIObject = __webpack_require__(17);
    
    // 22.1.3.4 Array.prototype.entries()
    // 22.1.3.13 Array.prototype.keys()
    // 22.1.3.29 Array.prototype.values()
    // 22.1.3.30 Array.prototype[@@iterator]()
    module.exports = __webpack_require__(94)(Array, 'Array', function (iterated, kind) {
      this._t = toIObject(iterated); // target
      this._i = 0;                   // next index
      this._k = kind;                // kind
    // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
    }, function () {
      var O = this._t;
      var kind = this._k;
      var index = this._i++;
      if (!O || index >= O.length) {
        this._t = undefined;
        return step(1);
      }
      if (kind == 'keys') return step(0, index);
      if (kind == 'values') return step(0, O[index]);
      return step(0, [index, O[index]]);
    }, 'values');
    
    // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
    Iterators.Arguments = Iterators.Array;
    
    addToUnscopables('keys');
    addToUnscopables('values');
    addToUnscopables('entries');
    
    
    /***/ }),
    /* 104 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var ctx = __webpack_require__(23);
    var invoke = __webpack_require__(118);
    var html = __webpack_require__(86);
    var cel = __webpack_require__(82);
    var global = __webpack_require__(2);
    var process = global.process;
    var setTask = global.setImmediate;
    var clearTask = global.clearImmediate;
    var MessageChannel = global.MessageChannel;
    var Dispatch = global.Dispatch;
    var counter = 0;
    var queue = {};
    var ONREADYSTATECHANGE = 'onreadystatechange';
    var defer, channel, port;
    var run = function () {
      var id = +this;
      // eslint-disable-next-line no-prototype-builtins
      if (queue.hasOwnProperty(id)) {
        var fn = queue[id];
        delete queue[id];
        fn();
      }
    };
    var listener = function (event) {
      run.call(event.data);
    };
    // Node.js 0.9+ & IE10+ has setImmediate, otherwise:
    if (!setTask || !clearTask) {
      setTask = function setImmediate(fn) {
        var args = [];
        var i = 1;
        while (arguments.length > i) args.push(arguments[i++]);
        queue[++counter] = function () {
          // eslint-disable-next-line no-new-func
          invoke(typeof fn == 'function' ? fn : Function(fn), args);
        };
        defer(counter);
        return counter;
      };
      clearTask = function clearImmediate(id) {
        delete queue[id];
      };
      // Node.js 0.8-
      if (__webpack_require__(24)(process) == 'process') {
        defer = function (id) {
          process.nextTick(ctx(run, id, 1));
        };
      // Sphere (JS game engine) Dispatch API
      } else if (Dispatch && Dispatch.now) {
        defer = function (id) {
          Dispatch.now(ctx(run, id, 1));
        };
      // Browsers with MessageChannel, includes WebWorkers
      } else if (MessageChannel) {
        channel = new MessageChannel();
        port = channel.port2;
        channel.port1.onmessage = listener;
        defer = ctx(port.postMessage, port, 1);
      // Browsers with postMessage, skip WebWorkers
      // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
      } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
        defer = function (id) {
          global.postMessage(id + '', '*');
        };
        global.addEventListener('message', listener, false);
      // IE8-
      } else if (ONREADYSTATECHANGE in cel('script')) {
        defer = function (id) {
          html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
            html.removeChild(this);
            run.call(id);
          };
        };
      // Rest old browsers
      } else {
        defer = function (id) {
          setTimeout(ctx(run, id, 1), 0);
        };
      }
    }
    module.exports = {
      set: setTask,
      clear: clearTask
    };
    
    
    /***/ }),
    /* 105 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var global = __webpack_require__(2);
    var macrotask = __webpack_require__(104).set;
    var Observer = global.MutationObserver || global.WebKitMutationObserver;
    var process = global.process;
    var Promise = global.Promise;
    var isNode = __webpack_require__(24)(process) == 'process';
    
    module.exports = function () {
      var head, last, notify;
    
      var flush = function () {
        var parent, fn;
        if (isNode && (parent = process.domain)) parent.exit();
        while (head) {
          fn = head.fn;
          head = head.next;
          try {
            fn();
          } catch (e) {
            if (head) notify();
            else last = undefined;
            throw e;
          }
        } last = undefined;
        if (parent) parent.enter();
      };
    
      // Node.js
      if (isNode) {
        notify = function () {
          process.nextTick(flush);
        };
      // browsers with MutationObserver
      } else if (Observer) {
        var toggle = true;
        var node = document.createTextNode('');
        new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
        notify = function () {
          node.data = toggle = !toggle;
        };
      // environments with maybe non-completely correct, but existent Promise
      } else if (Promise && Promise.resolve) {
        var promise = Promise.resolve();
        notify = function () {
          promise.then(flush);
        };
      // for other environments - macrotask based on:
      // - setImmediate
      // - MessageChannel
      // - window.postMessag
      // - onreadystatechange
      // - setTimeout
      } else {
        notify = function () {
          // strange IE + webpack dev server bug - use .call(global)
          macrotask.call(global, flush);
        };
      }
    
      return function (fn) {
        var task = { fn: fn, next: undefined };
        if (last) last.next = task;
        if (!head) {
          head = task;
          notify();
        } last = task;
      };
    };
    
    
    /***/ }),
    /* 106 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // 25.4.1.5 NewPromiseCapability(C)
    var aFunction = __webpack_require__(11);
    
    function PromiseCapability(C) {
      var resolve, reject;
      this.promise = new C(function ($$resolve, $$reject) {
        if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
        resolve = $$resolve;
        reject = $$reject;
      });
      this.resolve = aFunction(resolve);
      this.reject = aFunction(reject);
    }
    
    module.exports.f = function (C) {
      return new PromiseCapability(C);
    };
    
    
    /***/ }),
    /* 107 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var global = __webpack_require__(2);
    var DESCRIPTORS = __webpack_require__(7);
    var LIBRARY = __webpack_require__(42);
    var $typed = __webpack_require__(73);
    var hide = __webpack_require__(14);
    var redefineAll = __webpack_require__(50);
    var fails = __webpack_require__(4);
    var anInstance = __webpack_require__(48);
    var toInteger = __webpack_require__(29);
    var toLength = __webpack_require__(9);
    var toIndex = __webpack_require__(137);
    var gOPN = __webpack_require__(46).f;
    var dP = __webpack_require__(8).f;
    var arrayFill = __webpack_require__(102);
    var setToStringTag = __webpack_require__(53);
    var ARRAY_BUFFER = 'ArrayBuffer';
    var DATA_VIEW = 'DataView';
    var PROTOTYPE = 'prototype';
    var WRONG_LENGTH = 'Wrong length!';
    var WRONG_INDEX = 'Wrong index!';
    var $ArrayBuffer = global[ARRAY_BUFFER];
    var $DataView = global[DATA_VIEW];
    var Math = global.Math;
    var RangeError = global.RangeError;
    // eslint-disable-next-line no-shadow-restricted-names
    var Infinity = global.Infinity;
    var BaseBuffer = $ArrayBuffer;
    var abs = Math.abs;
    var pow = Math.pow;
    var floor = Math.floor;
    var log = Math.log;
    var LN2 = Math.LN2;
    var BUFFER = 'buffer';
    var BYTE_LENGTH = 'byteLength';
    var BYTE_OFFSET = 'byteOffset';
    var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
    var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
    var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;
    
    // IEEE754 conversions based on https://github.com/feross/ieee754
    function packIEEE754(value, mLen, nBytes) {
      var buffer = Array(nBytes);
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
      var i = 0;
      var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
      var e, m, c;
      value = abs(value);
      // eslint-disable-next-line no-self-compare
      if (value != value || value === Infinity) {
        // eslint-disable-next-line no-self-compare
        m = value != value ? 1 : 0;
        e = eMax;
      } else {
        e = floor(log(value) / LN2);
        if (value * (c = pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }
        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * pow(2, eBias - 1) * pow(2, mLen);
          e = 0;
        }
      }
      for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
      e = e << mLen | m;
      eLen += mLen;
      for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
      buffer[--i] |= s * 128;
      return buffer;
    }
    function unpackIEEE754(buffer, mLen, nBytes) {
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = eLen - 7;
      var i = nBytes - 1;
      var s = buffer[i--];
      var e = s & 127;
      var m;
      s >>= 7;
      for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
      m = e & (1 << -nBits) - 1;
      e >>= -nBits;
      nBits += mLen;
      for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : s ? -Infinity : Infinity;
      } else {
        m = m + pow(2, mLen);
        e = e - eBias;
      } return (s ? -1 : 1) * m * pow(2, e - mLen);
    }
    
    function unpackI32(bytes) {
      return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
    }
    function packI8(it) {
      return [it & 0xff];
    }
    function packI16(it) {
      return [it & 0xff, it >> 8 & 0xff];
    }
    function packI32(it) {
      return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
    }
    function packF64(it) {
      return packIEEE754(it, 52, 8);
    }
    function packF32(it) {
      return packIEEE754(it, 23, 4);
    }
    
    function addGetter(C, key, internal) {
      dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });
    }
    
    function get(view, bytes, index, isLittleEndian) {
      var numIndex = +index;
      var intIndex = toIndex(numIndex);
      if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
      var store = view[$BUFFER]._b;
      var start = intIndex + view[$OFFSET];
      var pack = store.slice(start, start + bytes);
      return isLittleEndian ? pack : pack.reverse();
    }
    function set(view, bytes, index, conversion, value, isLittleEndian) {
      var numIndex = +index;
      var intIndex = toIndex(numIndex);
      if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
      var store = view[$BUFFER]._b;
      var start = intIndex + view[$OFFSET];
      var pack = conversion(+value);
      for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
    }
    
    if (!$typed.ABV) {
      $ArrayBuffer = function ArrayBuffer(length) {
        anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
        var byteLength = toIndex(length);
        this._b = arrayFill.call(Array(byteLength), 0);
        this[$LENGTH] = byteLength;
      };
    
      $DataView = function DataView(buffer, byteOffset, byteLength) {
        anInstance(this, $DataView, DATA_VIEW);
        anInstance(buffer, $ArrayBuffer, DATA_VIEW);
        var bufferLength = buffer[$LENGTH];
        var offset = toInteger(byteOffset);
        if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
        byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
        if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
        this[$BUFFER] = buffer;
        this[$OFFSET] = offset;
        this[$LENGTH] = byteLength;
      };
    
      if (DESCRIPTORS) {
        addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
        addGetter($DataView, BUFFER, '_b');
        addGetter($DataView, BYTE_LENGTH, '_l');
        addGetter($DataView, BYTE_OFFSET, '_o');
      }
    
      redefineAll($DataView[PROTOTYPE], {
        getInt8: function getInt8(byteOffset) {
          return get(this, 1, byteOffset)[0] << 24 >> 24;
        },
        getUint8: function getUint8(byteOffset) {
          return get(this, 1, byteOffset)[0];
        },
        getInt16: function getInt16(byteOffset /* , littleEndian */) {
          var bytes = get(this, 2, byteOffset, arguments[1]);
          return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
        },
        getUint16: function getUint16(byteOffset /* , littleEndian */) {
          var bytes = get(this, 2, byteOffset, arguments[1]);
          return bytes[1] << 8 | bytes[0];
        },
        getInt32: function getInt32(byteOffset /* , littleEndian */) {
          return unpackI32(get(this, 4, byteOffset, arguments[1]));
        },
        getUint32: function getUint32(byteOffset /* , littleEndian */) {
          return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
        },
        getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
          return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
        },
        getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
          return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
        },
        setInt8: function setInt8(byteOffset, value) {
          set(this, 1, byteOffset, packI8, value);
        },
        setUint8: function setUint8(byteOffset, value) {
          set(this, 1, byteOffset, packI8, value);
        },
        setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
          set(this, 2, byteOffset, packI16, value, arguments[2]);
        },
        setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
          set(this, 2, byteOffset, packI16, value, arguments[2]);
        },
        setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
          set(this, 4, byteOffset, packI32, value, arguments[2]);
        },
        setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
          set(this, 4, byteOffset, packI32, value, arguments[2]);
        },
        setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
          set(this, 4, byteOffset, packF32, value, arguments[2]);
        },
        setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
          set(this, 8, byteOffset, packF64, value, arguments[2]);
        }
      });
    } else {
      if (!fails(function () {
        $ArrayBuffer(1);
      }) || !fails(function () {
        new $ArrayBuffer(-1); // eslint-disable-line no-new
      }) || fails(function () {
        new $ArrayBuffer(); // eslint-disable-line no-new
        new $ArrayBuffer(1.5); // eslint-disable-line no-new
        new $ArrayBuffer(NaN); // eslint-disable-line no-new
        return $ArrayBuffer.name != ARRAY_BUFFER;
      })) {
        $ArrayBuffer = function ArrayBuffer(length) {
          anInstance(this, $ArrayBuffer);
          return new BaseBuffer(toIndex(length));
        };
        var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
        for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
          if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
        }
        if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
      }
      // iOS Safari 7.x bug
      var view = new $DataView(new $ArrayBuffer(2));
      var $setInt8 = $DataView[PROTOTYPE].setInt8;
      view.setInt8(0, 2147483648);
      view.setInt8(1, 2147483649);
      if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
        setInt8: function setInt8(byteOffset, value) {
          $setInt8.call(this, byteOffset, value << 24 >> 24);
        },
        setUint8: function setUint8(byteOffset, value) {
          $setInt8.call(this, byteOffset, value << 24 >> 24);
        }
      }, true);
    }
    setToStringTag($ArrayBuffer, ARRAY_BUFFER);
    setToStringTag($DataView, DATA_VIEW);
    hide($DataView[PROTOTYPE], $typed.VIEW, true);
    exports[ARRAY_BUFFER] = $ArrayBuffer;
    exports[DATA_VIEW] = $DataView;
    
    
    /***/ }),
    /* 108 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    module.exports = __webpack_require__(360);
    
    
    /***/ }),
    /* 109 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _video = __webpack_require__(146);
    
    var _video2 = _interopRequireDefault(_video);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var Video = function () {
        function Video() {
            _classCallCheck(this, Video);
    
            this.videoID = 'video';
        }
    
        _createClass(Video, [{
            key: 'init',
            value: function init(el) {
                var _this = this;
    
                var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    
                var $video = $(el);
                var defaultVolume = 0.5;
                var videoOptions = {
                    fluid: true
                };
                var player = void 0;
    
                $video.each(function (index, el) {
                    var $currentTarget = $(el);
    
                    $currentTarget.attr('id', _this.videoID + (index + (count ? count : '')));
    
                    player = (0, _video2.default)(_this.videoID + (index + (count ? count : '')), videoOptions, function () {
                        this.volume(defaultVolume);
                    });
                    $(player.el_).addClass('video-js');
                });
    
                return player;
            }
        }]);
    
        return Video;
    }();
    
    exports.default = Video;
    
    /***/ }),
    /* 110 */,
    /* 111 */
    /***/ (function(module, exports, __webpack_require__) {
    
    module.exports = !__webpack_require__(7) && !__webpack_require__(4)(function () {
      return Object.defineProperty(__webpack_require__(82)('div'), 'a', { get: function () { return 7; } }).a != 7;
    });
    
    
    /***/ }),
    /* 112 */
    /***/ (function(module, exports, __webpack_require__) {
    
    exports.f = __webpack_require__(6);
    
    
    /***/ }),
    /* 113 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var has = __webpack_require__(13);
    var toIObject = __webpack_require__(17);
    var arrayIndexOf = __webpack_require__(64)(false);
    var IE_PROTO = __webpack_require__(84)('IE_PROTO');
    
    module.exports = function (object, names) {
      var O = toIObject(object);
      var i = 0;
      var result = [];
      var key;
      for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
      // Don't enum bug & hidden keys
      while (names.length > i) if (has(O, key = names[i++])) {
        ~arrayIndexOf(result, key) || result.push(key);
      }
      return result;
    };
    
    
    /***/ }),
    /* 114 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var dP = __webpack_require__(8);
    var anObject = __webpack_require__(1);
    var getKeys = __webpack_require__(43);
    
    module.exports = __webpack_require__(7) ? Object.defineProperties : function defineProperties(O, Properties) {
      anObject(O);
      var keys = getKeys(Properties);
      var length = keys.length;
      var i = 0;
      var P;
      while (length > i) dP.f(O, P = keys[i++], Properties[P]);
      return O;
    };
    
    
    /***/ }),
    /* 115 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
    var toIObject = __webpack_require__(17);
    var gOPN = __webpack_require__(46).f;
    var toString = {}.toString;
    
    var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
      ? Object.getOwnPropertyNames(window) : [];
    
    var getWindowNames = function (it) {
      try {
        return gOPN(it);
      } catch (e) {
        return windowNames.slice();
      }
    };
    
    module.exports.f = function getOwnPropertyNames(it) {
      return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
    };
    
    
    /***/ }),
    /* 116 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // 19.1.2.1 Object.assign(target, source, ...)
    var getKeys = __webpack_require__(43);
    var gOPS = __webpack_require__(65);
    var pIE = __webpack_require__(59);
    var toObject = __webpack_require__(10);
    var IObject = __webpack_require__(58);
    var $assign = Object.assign;
    
    // should work with symbols and should have deterministic property order (V8 bug)
    module.exports = !$assign || __webpack_require__(4)(function () {
      var A = {};
      var B = {};
      // eslint-disable-next-line no-undef
      var S = Symbol();
      var K = 'abcdefghijklmnopqrst';
      A[S] = 7;
      K.split('').forEach(function (k) { B[k] = k; });
      return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
    }) ? function assign(target, source) { // eslint-disable-line no-unused-vars
      var T = toObject(target);
      var aLen = arguments.length;
      var index = 1;
      var getSymbols = gOPS.f;
      var isEnum = pIE.f;
      while (aLen > index) {
        var S = IObject(arguments[index++]);
        var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
        var length = keys.length;
        var j = 0;
        var key;
        while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
      } return T;
    } : $assign;
    
    
    /***/ }),
    /* 117 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var aFunction = __webpack_require__(11);
    var isObject = __webpack_require__(5);
    var invoke = __webpack_require__(118);
    var arraySlice = [].slice;
    var factories = {};
    
    var construct = function (F, len, args) {
      if (!(len in factories)) {
        for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
        // eslint-disable-next-line no-new-func
        factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
      } return factories[len](F, args);
    };
    
    module.exports = Function.bind || function bind(that /* , ...args */) {
      var fn = aFunction(this);
      var partArgs = arraySlice.call(arguments, 1);
      var bound = function (/* args... */) {
        var args = partArgs.concat(arraySlice.call(arguments));
        return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
      };
      if (isObject(fn.prototype)) bound.prototype = fn.prototype;
      return bound;
    };
    
    
    /***/ }),
    /* 118 */
    /***/ (function(module, exports) {
    
    // fast apply, http://jsperf.lnkit.com/fast-apply/5
    module.exports = function (fn, args, that) {
      var un = that === undefined;
      switch (args.length) {
        case 0: return un ? fn()
                          : fn.call(that);
        case 1: return un ? fn(args[0])
                          : fn.call(that, args[0]);
        case 2: return un ? fn(args[0], args[1])
                          : fn.call(that, args[0], args[1]);
        case 3: return un ? fn(args[0], args[1], args[2])
                          : fn.call(that, args[0], args[1], args[2]);
        case 4: return un ? fn(args[0], args[1], args[2], args[3])
                          : fn.call(that, args[0], args[1], args[2], args[3]);
      } return fn.apply(that, args);
    };
    
    
    /***/ }),
    /* 119 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var $parseInt = __webpack_require__(2).parseInt;
    var $trim = __webpack_require__(54).trim;
    var ws = __webpack_require__(88);
    var hex = /^[-+]?0[xX]/;
    
    module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
      var string = $trim(String(str), 3);
      return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
    } : $parseInt;
    
    
    /***/ }),
    /* 120 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var $parseFloat = __webpack_require__(2).parseFloat;
    var $trim = __webpack_require__(54).trim;
    
    module.exports = 1 / $parseFloat(__webpack_require__(88) + '-0') !== -Infinity ? function parseFloat(str) {
      var string = $trim(String(str), 3);
      var result = $parseFloat(string);
      return result === 0 && string.charAt(0) == '-' ? -0 : result;
    } : $parseFloat;
    
    
    /***/ }),
    /* 121 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var cof = __webpack_require__(24);
    module.exports = function (it, msg) {
      if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
      return +it;
    };
    
    
    /***/ }),
    /* 122 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 20.1.2.3 Number.isInteger(number)
    var isObject = __webpack_require__(5);
    var floor = Math.floor;
    module.exports = function isInteger(it) {
      return !isObject(it) && isFinite(it) && floor(it) === it;
    };
    
    
    /***/ }),
    /* 123 */
    /***/ (function(module, exports) {
    
    // 20.2.2.20 Math.log1p(x)
    module.exports = Math.log1p || function log1p(x) {
      return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
    };
    
    
    /***/ }),
    /* 124 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 20.2.2.16 Math.fround(x)
    var sign = __webpack_require__(91);
    var pow = Math.pow;
    var EPSILON = pow(2, -52);
    var EPSILON32 = pow(2, -23);
    var MAX32 = pow(2, 127) * (2 - EPSILON32);
    var MIN32 = pow(2, -126);
    
    var roundTiesToEven = function (n) {
      return n + 1 / EPSILON - 1 / EPSILON;
    };
    
    module.exports = Math.fround || function fround(x) {
      var $abs = Math.abs(x);
      var $sign = sign(x);
      var a, result;
      if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
      a = (1 + EPSILON32 / EPSILON) * $abs;
      result = a - (a - $abs);
      // eslint-disable-next-line no-self-compare
      if (result > MAX32 || result != result) return $sign * Infinity;
      return $sign * result;
    };
    
    
    /***/ }),
    /* 125 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // call something on iterator step with safe closing on error
    var anObject = __webpack_require__(1);
    module.exports = function (iterator, fn, value, entries) {
      try {
        return entries ? fn(anObject(value)[0], value[1]) : fn(value);
      // 7.4.6 IteratorClose(iterator, completion)
      } catch (e) {
        var ret = iterator['return'];
        if (ret !== undefined) anObject(ret.call(iterator));
        throw e;
      }
    };
    
    
    /***/ }),
    /* 126 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var aFunction = __webpack_require__(11);
    var toObject = __webpack_require__(10);
    var IObject = __webpack_require__(58);
    var toLength = __webpack_require__(9);
    
    module.exports = function (that, callbackfn, aLen, memo, isRight) {
      aFunction(callbackfn);
      var O = toObject(that);
      var self = IObject(O);
      var length = toLength(O.length);
      var index = isRight ? length - 1 : 0;
      var i = isRight ? -1 : 1;
      if (aLen < 2) for (;;) {
        if (index in self) {
          memo = self[index];
          index += i;
          break;
        }
        index += i;
        if (isRight ? index < 0 : length <= index) {
          throw TypeError('Reduce of empty array with no initial value');
        }
      }
      for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {
        memo = callbackfn(memo, self[index], index, O);
      }
      return memo;
    };
    
    
    /***/ }),
    /* 127 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
    
    var toObject = __webpack_require__(10);
    var toAbsoluteIndex = __webpack_require__(44);
    var toLength = __webpack_require__(9);
    
    module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
      var O = toObject(this);
      var len = toLength(O.length);
      var to = toAbsoluteIndex(target, len);
      var from = toAbsoluteIndex(start, len);
      var end = arguments.length > 2 ? arguments[2] : undefined;
      var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
      var inc = 1;
      if (from < to && to < from + count) {
        inc = -1;
        from += count - 1;
        to += count - 1;
      }
      while (count-- > 0) {
        if (from in O) O[to] = O[from];
        else delete O[to];
        to += inc;
        from += inc;
      } return O;
    };
    
    
    /***/ }),
    /* 128 */
    /***/ (function(module, exports) {
    
    module.exports = function (done, value) {
      return { value: value, done: !!done };
    };
    
    
    /***/ }),
    /* 129 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 21.2.5.3 get RegExp.prototype.flags()
    if (__webpack_require__(7) && /./g.flags != 'g') __webpack_require__(8).f(RegExp.prototype, 'flags', {
      configurable: true,
      get: __webpack_require__(69)
    });
    
    
    /***/ }),
    /* 130 */
    /***/ (function(module, exports) {
    
    module.exports = function (exec) {
      try {
        return { e: false, v: exec() };
      } catch (e) {
        return { e: true, v: e };
      }
    };
    
    
    /***/ }),
    /* 131 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var anObject = __webpack_require__(1);
    var isObject = __webpack_require__(5);
    var newPromiseCapability = __webpack_require__(106);
    
    module.exports = function (C, x) {
      anObject(C);
      if (isObject(x) && x.constructor === C) return x;
      var promiseCapability = newPromiseCapability.f(C);
      var resolve = promiseCapability.resolve;
      resolve(x);
      return promiseCapability.promise;
    };
    
    
    /***/ }),
    /* 132 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var strong = __webpack_require__(133);
    var validate = __webpack_require__(56);
    var MAP = 'Map';
    
    // 23.1 Map Objects
    module.exports = __webpack_require__(72)(MAP, function (get) {
      return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
    }, {
      // 23.1.3.6 Map.prototype.get(key)
      get: function get(key) {
        var entry = strong.getEntry(validate(this, MAP), key);
        return entry && entry.v;
      },
      // 23.1.3.9 Map.prototype.set(key, value)
      set: function set(key, value) {
        return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
      }
    }, strong, true);
    
    
    /***/ }),
    /* 133 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var dP = __webpack_require__(8).f;
    var create = __webpack_require__(45);
    var redefineAll = __webpack_require__(50);
    var ctx = __webpack_require__(23);
    var anInstance = __webpack_require__(48);
    var forOf = __webpack_require__(49);
    var $iterDefine = __webpack_require__(94);
    var step = __webpack_require__(128);
    var setSpecies = __webpack_require__(47);
    var DESCRIPTORS = __webpack_require__(7);
    var fastKey = __webpack_require__(36).fastKey;
    var validate = __webpack_require__(56);
    var SIZE = DESCRIPTORS ? '_s' : 'size';
    
    var getEntry = function (that, key) {
      // fast case
      var index = fastKey(key);
      var entry;
      if (index !== 'F') return that._i[index];
      // frozen object case
      for (entry = that._f; entry; entry = entry.n) {
        if (entry.k == key) return entry;
      }
    };
    
    module.exports = {
      getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
        var C = wrapper(function (that, iterable) {
          anInstance(that, C, NAME, '_i');
          that._t = NAME;         // collection type
          that._i = create(null); // index
          that._f = undefined;    // first entry
          that._l = undefined;    // last entry
          that[SIZE] = 0;         // size
          if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        });
        redefineAll(C.prototype, {
          // 23.1.3.1 Map.prototype.clear()
          // 23.2.3.2 Set.prototype.clear()
          clear: function clear() {
            for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
              entry.r = true;
              if (entry.p) entry.p = entry.p.n = undefined;
              delete data[entry.i];
            }
            that._f = that._l = undefined;
            that[SIZE] = 0;
          },
          // 23.1.3.3 Map.prototype.delete(key)
          // 23.2.3.4 Set.prototype.delete(value)
          'delete': function (key) {
            var that = validate(this, NAME);
            var entry = getEntry(that, key);
            if (entry) {
              var next = entry.n;
              var prev = entry.p;
              delete that._i[entry.i];
              entry.r = true;
              if (prev) prev.n = next;
              if (next) next.p = prev;
              if (that._f == entry) that._f = next;
              if (that._l == entry) that._l = prev;
              that[SIZE]--;
            } return !!entry;
          },
          // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
          // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
          forEach: function forEach(callbackfn /* , that = undefined */) {
            validate(this, NAME);
            var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
            var entry;
            while (entry = entry ? entry.n : this._f) {
              f(entry.v, entry.k, this);
              // revert to the last existing entry
              while (entry && entry.r) entry = entry.p;
            }
          },
          // 23.1.3.7 Map.prototype.has(key)
          // 23.2.3.7 Set.prototype.has(value)
          has: function has(key) {
            return !!getEntry(validate(this, NAME), key);
          }
        });
        if (DESCRIPTORS) dP(C.prototype, 'size', {
          get: function () {
            return validate(this, NAME)[SIZE];
          }
        });
        return C;
      },
      def: function (that, key, value) {
        var entry = getEntry(that, key);
        var prev, index;
        // change existing entry
        if (entry) {
          entry.v = value;
        // create new entry
        } else {
          that._l = entry = {
            i: index = fastKey(key, true), // <- index
            k: key,                        // <- key
            v: value,                      // <- value
            p: prev = that._l,             // <- previous entry
            n: undefined,                  // <- next entry
            r: false                       // <- removed
          };
          if (!that._f) that._f = entry;
          if (prev) prev.n = entry;
          that[SIZE]++;
          // add to index
          if (index !== 'F') that._i[index] = entry;
        } return that;
      },
      getEntry: getEntry,
      setStrong: function (C, NAME, IS_MAP) {
        // add .keys, .values, .entries, [@@iterator]
        // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
        $iterDefine(C, NAME, function (iterated, kind) {
          this._t = validate(iterated, NAME); // target
          this._k = kind;                     // kind
          this._l = undefined;                // previous
        }, function () {
          var that = this;
          var kind = that._k;
          var entry = that._l;
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
          // get next entry
          if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
            // or finish the iteration
            that._t = undefined;
            return step(1);
          }
          // return step by kind
          if (kind == 'keys') return step(0, entry.k);
          if (kind == 'values') return step(0, entry.v);
          return step(0, [entry.k, entry.v]);
        }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);
    
        // add [@@species], 23.1.2.2, 23.2.2.2
        setSpecies(NAME);
      }
    };
    
    
    /***/ }),
    /* 134 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var strong = __webpack_require__(133);
    var validate = __webpack_require__(56);
    var SET = 'Set';
    
    // 23.2 Set Objects
    module.exports = __webpack_require__(72)(SET, function (get) {
      return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
    }, {
      // 23.2.3.1 Set.prototype.add(value)
      add: function add(value) {
        return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
      }
    }, strong);
    
    
    /***/ }),
    /* 135 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var each = __webpack_require__(31)(0);
    var redefine = __webpack_require__(15);
    var meta = __webpack_require__(36);
    var assign = __webpack_require__(116);
    var weak = __webpack_require__(136);
    var isObject = __webpack_require__(5);
    var fails = __webpack_require__(4);
    var validate = __webpack_require__(56);
    var WEAK_MAP = 'WeakMap';
    var getWeak = meta.getWeak;
    var isExtensible = Object.isExtensible;
    var uncaughtFrozenStore = weak.ufstore;
    var tmp = {};
    var InternalMap;
    
    var wrapper = function (get) {
      return function WeakMap() {
        return get(this, arguments.length > 0 ? arguments[0] : undefined);
      };
    };
    
    var methods = {
      // 23.3.3.3 WeakMap.prototype.get(key)
      get: function get(key) {
        if (isObject(key)) {
          var data = getWeak(key);
          if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
          return data ? data[this._i] : undefined;
        }
      },
      // 23.3.3.5 WeakMap.prototype.set(key, value)
      set: function set(key, value) {
        return weak.def(validate(this, WEAK_MAP), key, value);
      }
    };
    
    // 23.3 WeakMap Objects
    var $WeakMap = module.exports = __webpack_require__(72)(WEAK_MAP, wrapper, methods, weak, true, true);
    
    // IE11 WeakMap frozen keys fix
    if (fails(function () { return new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7; })) {
      InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
      assign(InternalMap.prototype, methods);
      meta.NEED = true;
      each(['delete', 'has', 'get', 'set'], function (key) {
        var proto = $WeakMap.prototype;
        var method = proto[key];
        redefine(proto, key, function (a, b) {
          // store frozen objects on internal weakmap shim
          if (isObject(a) && !isExtensible(a)) {
            if (!this._f) this._f = new InternalMap();
            var result = this._f[key](a, b);
            return key == 'set' ? this : result;
          // store all the rest on native weakmap
          } return method.call(this, a, b);
        });
      });
    }
    
    
    /***/ }),
    /* 136 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var redefineAll = __webpack_require__(50);
    var getWeak = __webpack_require__(36).getWeak;
    var anObject = __webpack_require__(1);
    var isObject = __webpack_require__(5);
    var anInstance = __webpack_require__(48);
    var forOf = __webpack_require__(49);
    var createArrayMethod = __webpack_require__(31);
    var $has = __webpack_require__(13);
    var validate = __webpack_require__(56);
    var arrayFind = createArrayMethod(5);
    var arrayFindIndex = createArrayMethod(6);
    var id = 0;
    
    // fallback for uncaught frozen keys
    var uncaughtFrozenStore = function (that) {
      return that._l || (that._l = new UncaughtFrozenStore());
    };
    var UncaughtFrozenStore = function () {
      this.a = [];
    };
    var findUncaughtFrozen = function (store, key) {
      return arrayFind(store.a, function (it) {
        return it[0] === key;
      });
    };
    UncaughtFrozenStore.prototype = {
      get: function (key) {
        var entry = findUncaughtFrozen(this, key);
        if (entry) return entry[1];
      },
      has: function (key) {
        return !!findUncaughtFrozen(this, key);
      },
      set: function (key, value) {
        var entry = findUncaughtFrozen(this, key);
        if (entry) entry[1] = value;
        else this.a.push([key, value]);
      },
      'delete': function (key) {
        var index = arrayFindIndex(this.a, function (it) {
          return it[0] === key;
        });
        if (~index) this.a.splice(index, 1);
        return !!~index;
      }
    };
    
    module.exports = {
      getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
        var C = wrapper(function (that, iterable) {
          anInstance(that, C, NAME, '_i');
          that._t = NAME;      // collection type
          that._i = id++;      // collection id
          that._l = undefined; // leak store for uncaught frozen objects
          if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        });
        redefineAll(C.prototype, {
          // 23.3.3.2 WeakMap.prototype.delete(key)
          // 23.4.3.3 WeakSet.prototype.delete(value)
          'delete': function (key) {
            if (!isObject(key)) return false;
            var data = getWeak(key);
            if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
            return data && $has(data, this._i) && delete data[this._i];
          },
          // 23.3.3.4 WeakMap.prototype.has(key)
          // 23.4.3.4 WeakSet.prototype.has(value)
          has: function has(key) {
            if (!isObject(key)) return false;
            var data = getWeak(key);
            if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
            return data && $has(data, this._i);
          }
        });
        return C;
      },
      def: function (that, key, value) {
        var data = getWeak(anObject(key), true);
        if (data === true) uncaughtFrozenStore(that).set(key, value);
        else data[that._i] = value;
        return that;
      },
      ufstore: uncaughtFrozenStore
    };
    
    
    /***/ }),
    /* 137 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // https://tc39.github.io/ecma262/#sec-toindex
    var toInteger = __webpack_require__(29);
    var toLength = __webpack_require__(9);
    module.exports = function (it) {
      if (it === undefined) return 0;
      var number = toInteger(it);
      var length = toLength(number);
      if (number !== length) throw RangeError('Wrong length!');
      return length;
    };
    
    
    /***/ }),
    /* 138 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // all object keys, includes non-enumerable and symbols
    var gOPN = __webpack_require__(46);
    var gOPS = __webpack_require__(65);
    var anObject = __webpack_require__(1);
    var Reflect = __webpack_require__(2).Reflect;
    module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
      var keys = gOPN.f(anObject(it));
      var getSymbols = gOPS.f;
      return getSymbols ? keys.concat(getSymbols(it)) : keys;
    };
    
    
    /***/ }),
    /* 139 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
    var isArray = __webpack_require__(66);
    var isObject = __webpack_require__(5);
    var toLength = __webpack_require__(9);
    var ctx = __webpack_require__(23);
    var IS_CONCAT_SPREADABLE = __webpack_require__(6)('isConcatSpreadable');
    
    function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
      var targetIndex = start;
      var sourceIndex = 0;
      var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
      var element, spreadable;
    
      while (sourceIndex < sourceLen) {
        if (sourceIndex in source) {
          element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];
    
          spreadable = false;
          if (isObject(element)) {
            spreadable = element[IS_CONCAT_SPREADABLE];
            spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
          }
    
          if (spreadable && depth > 0) {
            targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
          } else {
            if (targetIndex >= 0x1fffffffffffff) throw TypeError();
            target[targetIndex] = element;
          }
    
          targetIndex++;
        }
        sourceIndex++;
      }
      return targetIndex;
    }
    
    module.exports = flattenIntoArray;
    
    
    /***/ }),
    /* 140 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // https://github.com/tc39/proposal-string-pad-start-end
    var toLength = __webpack_require__(9);
    var repeat = __webpack_require__(90);
    var defined = __webpack_require__(28);
    
    module.exports = function (that, maxLength, fillString, left) {
      var S = String(defined(that));
      var stringLength = S.length;
      var fillStr = fillString === undefined ? ' ' : String(fillString);
      var intMaxLength = toLength(maxLength);
      if (intMaxLength <= stringLength || fillStr == '') return S;
      var fillLen = intMaxLength - stringLength;
      var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
      if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
      return left ? stringFiller + S : S + stringFiller;
    };
    
    
    /***/ }),
    /* 141 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var getKeys = __webpack_require__(43);
    var toIObject = __webpack_require__(17);
    var isEnum = __webpack_require__(59).f;
    module.exports = function (isEntries) {
      return function (it) {
        var O = toIObject(it);
        var keys = getKeys(O);
        var length = keys.length;
        var i = 0;
        var result = [];
        var key;
        while (length > i) if (isEnum.call(O, key = keys[i++])) {
          result.push(isEntries ? [key, O[key]] : O[key]);
        } return result;
      };
    };
    
    
    /***/ }),
    /* 142 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // https://github.com/DavidBruant/Map-Set.prototype.toJSON
    var classof = __webpack_require__(60);
    var from = __webpack_require__(143);
    module.exports = function (NAME) {
      return function toJSON() {
        if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
        return from(this);
      };
    };
    
    
    /***/ }),
    /* 143 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var forOf = __webpack_require__(49);
    
    module.exports = function (iter, ITERATOR) {
      var result = [];
      forOf(iter, false, result.push, result, ITERATOR);
      return result;
    };
    
    
    /***/ }),
    /* 144 */
    /***/ (function(module, exports) {
    
    // https://rwaldron.github.io/proposal-math-extensions/
    module.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {
      if (
        arguments.length === 0
          // eslint-disable-next-line no-self-compare
          || x != x
          // eslint-disable-next-line no-self-compare
          || inLow != inLow
          // eslint-disable-next-line no-self-compare
          || inHigh != inHigh
          // eslint-disable-next-line no-self-compare
          || outLow != outLow
          // eslint-disable-next-line no-self-compare
          || outHigh != outHigh
      ) return NaN;
      if (x === Infinity || x === -Infinity) return x;
      return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;
    };
    
    
    /***/ }),
    /* 145 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var require;var require;/*!
     * enquire.js v2.1.6 - Awesome Media Queries in JavaScript
     * Copyright (c) 2017 Nick Williams - http://wicky.nillia.ms/enquire.js
     * License: MIT */
    
    
    (function(f){if(true){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.enquire = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
    var QueryHandler = require(3);
    var each = require(4).each;
    
    /**
     * Represents a single media query, manages it's state and registered handlers for this query
     *
     * @constructor
     * @param {string} query the media query string
     * @param {boolean} [isUnconditional=false] whether the media query should run regardless of whether the conditions are met. Primarily for helping older browsers deal with mobile-first design
     */
    function MediaQuery(query, isUnconditional) {
        this.query = query;
        this.isUnconditional = isUnconditional;
        this.handlers = [];
        this.mql = window.matchMedia(query);
    
        var self = this;
        this.listener = function(mql) {
            // Chrome passes an MediaQueryListEvent object, while other browsers pass MediaQueryList directly
            self.mql = mql.currentTarget || mql;
            self.assess();
        };
        this.mql.addListener(this.listener);
    }
    
    MediaQuery.prototype = {
    
        constuctor : MediaQuery,
    
        /**
         * add a handler for this query, triggering if already active
         *
         * @param {object} handler
         * @param {function} handler.match callback for when query is activated
         * @param {function} [handler.unmatch] callback for when query is deactivated
         * @param {function} [handler.setup] callback for immediate execution when a query handler is registered
         * @param {boolean} [handler.deferSetup=false] should the setup callback be deferred until the first time the handler is matched?
         */
        addHandler : function(handler) {
            var qh = new QueryHandler(handler);
            this.handlers.push(qh);
    
            this.matches() && qh.on();
        },
    
        /**
         * removes the given handler from the collection, and calls it's destroy methods
         *
         * @param {object || function} handler the handler to remove
         */
        removeHandler : function(handler) {
            var handlers = this.handlers;
            each(handlers, function(h, i) {
                if(h.equals(handler)) {
                    h.destroy();
                    return !handlers.splice(i,1); //remove from array and exit each early
                }
            });
        },
    
        /**
         * Determine whether the media query should be considered a match
         *
         * @return {Boolean} true if media query can be considered a match, false otherwise
         */
        matches : function() {
            return this.mql.matches || this.isUnconditional;
        },
    
        /**
         * Clears all handlers and unbinds events
         */
        clear : function() {
            each(this.handlers, function(handler) {
                handler.destroy();
            });
            this.mql.removeListener(this.listener);
            this.handlers.length = 0; //clear array
        },
    
        /*
            * Assesses the query, turning on all handlers if it matches, turning them off if it doesn't match
            */
        assess : function() {
            var action = this.matches() ? 'on' : 'off';
    
            each(this.handlers, function(handler) {
                handler[action]();
            });
        }
    };
    
    module.exports = MediaQuery;
    
    },{"3":3,"4":4}],2:[function(require,module,exports){
    var MediaQuery = require(1);
    var Util = require(4);
    var each = Util.each;
    var isFunction = Util.isFunction;
    var isArray = Util.isArray;
    
    /**
     * Allows for registration of query handlers.
     * Manages the query handler's state and is responsible for wiring up browser events
     *
     * @constructor
     */
    function MediaQueryDispatch () {
        if(!window.matchMedia) {
            throw new Error('matchMedia not present, legacy browsers require a polyfill');
        }
    
        this.queries = {};
        this.browserIsIncapable = !window.matchMedia('only all').matches;
    }
    
    MediaQueryDispatch.prototype = {
    
        constructor : MediaQueryDispatch,
    
        /**
         * Registers a handler for the given media query
         *
         * @param {string} q the media query
         * @param {object || Array || Function} options either a single query handler object, a function, or an array of query handlers
         * @param {function} options.match fired when query matched
         * @param {function} [options.unmatch] fired when a query is no longer matched
         * @param {function} [options.setup] fired when handler first triggered
         * @param {boolean} [options.deferSetup=false] whether setup should be run immediately or deferred until query is first matched
         * @param {boolean} [shouldDegrade=false] whether this particular media query should always run on incapable browsers
         */
        register : function(q, options, shouldDegrade) {
            var queries         = this.queries,
                isUnconditional = shouldDegrade && this.browserIsIncapable;
    
            if(!queries[q]) {
                queries[q] = new MediaQuery(q, isUnconditional);
            }
    
            //normalise to object in an array
            if(isFunction(options)) {
                options = { match : options };
            }
            if(!isArray(options)) {
                options = [options];
            }
            each(options, function(handler) {
                if (isFunction(handler)) {
                    handler = { match : handler };
                }
                queries[q].addHandler(handler);
            });
    
            return this;
        },
    
        /**
         * unregisters a query and all it's handlers, or a specific handler for a query
         *
         * @param {string} q the media query to target
         * @param {object || function} [handler] specific handler to unregister
         */
        unregister : function(q, handler) {
            var query = this.queries[q];
    
            if(query) {
                if(handler) {
                    query.removeHandler(handler);
                }
                else {
                    query.clear();
                    delete this.queries[q];
                }
            }
    
            return this;
        }
    };
    
    module.exports = MediaQueryDispatch;
    
    },{"1":1,"4":4}],3:[function(require,module,exports){
    /**
     * Delegate to handle a media query being matched and unmatched.
     *
     * @param {object} options
     * @param {function} options.match callback for when the media query is matched
     * @param {function} [options.unmatch] callback for when the media query is unmatched
     * @param {function} [options.setup] one-time callback triggered the first time a query is matched
     * @param {boolean} [options.deferSetup=false] should the setup callback be run immediately, rather than first time query is matched?
     * @constructor
     */
    function QueryHandler(options) {
        this.options = options;
        !options.deferSetup && this.setup();
    }
    
    QueryHandler.prototype = {
    
        constructor : QueryHandler,
    
        /**
         * coordinates setup of the handler
         *
         * @function
         */
        setup : function() {
            if(this.options.setup) {
                this.options.setup();
            }
            this.initialised = true;
        },
    
        /**
         * coordinates setup and triggering of the handler
         *
         * @function
         */
        on : function() {
            !this.initialised && this.setup();
            this.options.match && this.options.match();
        },
    
        /**
         * coordinates the unmatch event for the handler
         *
         * @function
         */
        off : function() {
            this.options.unmatch && this.options.unmatch();
        },
    
        /**
         * called when a handler is to be destroyed.
         * delegates to the destroy or unmatch callbacks, depending on availability.
         *
         * @function
         */
        destroy : function() {
            this.options.destroy ? this.options.destroy() : this.off();
        },
    
        /**
         * determines equality by reference.
         * if object is supplied compare options, if function, compare match callback
         *
         * @function
         * @param {object || function} [target] the target for comparison
         */
        equals : function(target) {
            return this.options === target || this.options.match === target;
        }
    
    };
    
    module.exports = QueryHandler;
    
    },{}],4:[function(require,module,exports){
    /**
     * Helper function for iterating over a collection
     *
     * @param collection
     * @param fn
     */
    function each(collection, fn) {
        var i      = 0,
            length = collection.length,
            cont;
    
        for(i; i < length; i++) {
            cont = fn(collection[i], i);
            if(cont === false) {
                break; //allow early exit
            }
        }
    }
    
    /**
     * Helper function for determining whether target object is an array
     *
     * @param target the object under test
     * @return {Boolean} true if array, false otherwise
     */
    function isArray(target) {
        return Object.prototype.toString.apply(target) === '[object Array]';
    }
    
    /**
     * Helper function for determining whether target object is a function
     *
     * @param target the object under test
     * @return {Boolean} true if function, false otherwise
     */
    function isFunction(target) {
        return typeof target === 'function';
    }
    
    module.exports = {
        isFunction : isFunction,
        isArray : isArray,
        each : each
    };
    
    },{}],5:[function(require,module,exports){
    var MediaQueryDispatch = require(2);
    module.exports = new MediaQueryDispatch();
    
    },{"2":2}]},{},[5])(5)
    });
    
    /***/ }),
    /* 146 */
    /***/ (function(module, exports, __webpack_require__) {
    
    /* WEBPACK VAR INJECTION */(function(global) {/**
     * @license
     * Video.js 6.2.7 <http://videojs.com/>
     * Copyright Brightcove, Inc. <https://www.brightcove.com/>
     * Available under Apache License Version 2.0
     * <https://github.com/videojs/video.js/blob/master/LICENSE>
     *
     * Includes vtt.js <https://github.com/mozilla/vtt.js>
     * Available under Apache License Version 2.0
     * <https://github.com/mozilla/vtt.js/blob/master/LICENSE>
     */
    
    (function (global, factory) {
         true ? module.exports = factory() :
        typeof define === 'function' && define.amd ? define(factory) :
        (global.videojs = factory());
    }(this, (function () {
    
    var version = "6.2.7";
    
    var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};
    
    
    
    
    
    function createCommonjsModule(fn, module) {
        return module = { exports: {} }, fn(module, module.exports), module.exports;
    }
    
    var win;
    
    if (typeof window !== "undefined") {
        win = window;
    } else if (typeof commonjsGlobal !== "undefined") {
        win = commonjsGlobal;
    } else if (typeof self !== "undefined"){
        win = self;
    } else {
        win = {};
    }
    
    var window_1 = win;
    
    var empty = {};
    
    
    var empty$1 = (Object.freeze || Object)({
        'default': empty
    });
    
    var minDoc = ( empty$1 && empty ) || empty$1;
    
    var topLevel = typeof commonjsGlobal !== 'undefined' ? commonjsGlobal :
        typeof window !== 'undefined' ? window : {};
    
    
    var doccy;
    
    if (typeof document !== 'undefined') {
        doccy = document;
    } else {
        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];
    
        if (!doccy) {
            doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
        }
    }
    
    var document_1 = doccy;
    
    /**
     * @file browser.js
     * @module browser
     */
    var USER_AGENT = window_1.navigator && window_1.navigator.userAgent || '';
    var webkitVersionMap = /AppleWebKit\/([\d.]+)/i.exec(USER_AGENT);
    var appleWebkitVersion = webkitVersionMap ? parseFloat(webkitVersionMap.pop()) : null;
    
    /*
     * Device is an iPhone
     *
     * @type {Boolean}
     * @constant
     * @private
     */
    var IS_IPAD = /iPad/i.test(USER_AGENT);
    
    // The Facebook app's UIWebView identifies as both an iPhone and iPad, so
    // to identify iPhones, we need to exclude iPads.
    // http://artsy.github.io/blog/2012/10/18/the-perils-of-ios-user-agent-sniffing/
    var IS_IPHONE = /iPhone/i.test(USER_AGENT) && !IS_IPAD;
    var IS_IPOD = /iPod/i.test(USER_AGENT);
    var IS_IOS = IS_IPHONE || IS_IPAD || IS_IPOD;
    
    var IOS_VERSION = function () {
      var match = USER_AGENT.match(/OS (\d+)_/i);
    
      if (match && match[1]) {
        return match[1];
      }
      return null;
    }();
    
    var IS_ANDROID = /Android/i.test(USER_AGENT);
    var ANDROID_VERSION = function () {
      // This matches Android Major.Minor.Patch versions
      // ANDROID_VERSION is Major.Minor as a Number, if Minor isn't available, then only Major is returned
      var match = USER_AGENT.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i);
    
      if (!match) {
        return null;
      }
    
      var major = match[1] && parseFloat(match[1]);
      var minor = match[2] && parseFloat(match[2]);
    
      if (major && minor) {
        return parseFloat(match[1] + '.' + match[2]);
      } else if (major) {
        return major;
      }
      return null;
    }();
    
    // Old Android is defined as Version older than 2.3, and requiring a webkit version of the android browser
    var IS_OLD_ANDROID = IS_ANDROID && /webkit/i.test(USER_AGENT) && ANDROID_VERSION < 2.3;
    var IS_NATIVE_ANDROID = IS_ANDROID && ANDROID_VERSION < 5 && appleWebkitVersion < 537;
    
    var IS_FIREFOX = /Firefox/i.test(USER_AGENT);
    var IS_EDGE = /Edge/i.test(USER_AGENT);
    var IS_CHROME = !IS_EDGE && /Chrome/i.test(USER_AGENT);
    var CHROME_VERSION = function () {
      var match = USER_AGENT.match(/Chrome\/(\d+)/);
    
      if (match && match[1]) {
        return parseFloat(match[1]);
      }
      return null;
    }();
    var IS_IE8 = /MSIE\s8\.0/.test(USER_AGENT);
    var IE_VERSION = function () {
      var result = /MSIE\s(\d+)\.\d/.exec(USER_AGENT);
      var version = result && parseFloat(result[1]);
    
      if (!version && /Trident\/7.0/i.test(USER_AGENT) && /rv:11.0/.test(USER_AGENT)) {
        // IE 11 has a different user agent string than other IE versions
        version = 11.0;
      }
    
      return version;
    }();
    
    var IS_SAFARI = /Safari/i.test(USER_AGENT) && !IS_CHROME && !IS_ANDROID && !IS_EDGE;
    var IS_ANY_SAFARI = IS_SAFARI || IS_IOS;
    
    var TOUCH_ENABLED = isReal() && ('ontouchstart' in window_1 || window_1.DocumentTouch && window_1.document instanceof window_1.DocumentTouch);
    
    var BACKGROUND_SIZE_SUPPORTED = isReal() && 'backgroundSize' in window_1.document.createElement('video').style;
    
    var browser = (Object.freeze || Object)({
        IS_IPAD: IS_IPAD,
        IS_IPHONE: IS_IPHONE,
        IS_IPOD: IS_IPOD,
        IS_IOS: IS_IOS,
        IOS_VERSION: IOS_VERSION,
        IS_ANDROID: IS_ANDROID,
        ANDROID_VERSION: ANDROID_VERSION,
        IS_OLD_ANDROID: IS_OLD_ANDROID,
        IS_NATIVE_ANDROID: IS_NATIVE_ANDROID,
        IS_FIREFOX: IS_FIREFOX,
        IS_EDGE: IS_EDGE,
        IS_CHROME: IS_CHROME,
        CHROME_VERSION: CHROME_VERSION,
        IS_IE8: IS_IE8,
        IE_VERSION: IE_VERSION,
        IS_SAFARI: IS_SAFARI,
        IS_ANY_SAFARI: IS_ANY_SAFARI,
        TOUCH_ENABLED: TOUCH_ENABLED,
        BACKGROUND_SIZE_SUPPORTED: BACKGROUND_SIZE_SUPPORTED
    });
    
    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    
    
    
    
    
    
    
    
    
    
    
    var classCallCheck = function (instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    };
    
    
    
    
    
    
    
    
    
    
    
    var inherits = function (subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
    
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    };
    
    
    
    
    
    
    
    
    
    
    
    var possibleConstructorReturn = function (self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
    
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    };
    
    
    
    
    
    
    
    
    
    
    
    var taggedTemplateLiteralLoose = function (strings, raw) {
      strings.raw = raw;
      return strings;
    };
    
    /**
     * @file obj.js
     * @module obj
     */
    
    /**
     * @callback obj:EachCallback
     *
     * @param {Mixed} value
     *        The current key for the object that is being iterated over.
     *
     * @param {string} key
     *        The current key-value for object that is being iterated over
     */
    
    /**
     * @callback obj:ReduceCallback
     *
     * @param {Mixed} accum
     *        The value that is accumulating over the reduce loop.
     *
     * @param {Mixed} value
     *        The current key for the object that is being iterated over.
     *
     * @param {string} key
     *        The current key-value for object that is being iterated over
     *
     * @return {Mixed}
     *         The new accumulated value.
     */
    var toString = Object.prototype.toString;
    
    /**
     * Get the keys of an Object
     *
     * @param {Object}
     *        The Object to get the keys from
     *
     * @return {string[]}
     *         An array of the keys from the object. Returns an empty array if the
     *         object passed in was invalid or had no keys.
     *
     * @private
     */
    var keys = function keys(object) {
      return isObject(object) ? Object.keys(object) : [];
    };
    
    /**
     * Array-like iteration for objects.
     *
     * @param {Object} object
     *        The object to iterate over
     *
     * @param {obj:EachCallback} fn
     *        The callback function which is called for each key in the object.
     */
    function each(object, fn) {
      keys(object).forEach(function (key) {
        return fn(object[key], key);
      });
    }
    
    /**
     * Array-like reduce for objects.
     *
     * @param {Object} object
     *        The Object that you want to reduce.
     *
     * @param {Function} fn
     *         A callback function which is called for each key in the object. It
     *         receives the accumulated value and the per-iteration value and key
     *         as arguments.
     *
     * @param {Mixed} [initial = 0]
     *        Starting value
     *
     * @return {Mixed}
     *         The final accumulated value.
     */
    function reduce(object, fn) {
      var initial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    
      return keys(object).reduce(function (accum, key) {
        return fn(accum, object[key], key);
      }, initial);
    }
    
    /**
     * Object.assign-style object shallow merge/extend.
     *
     * @param  {Object} target
     * @param  {Object} ...sources
     * @return {Object}
     */
    function assign(target) {
      for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        sources[_key - 1] = arguments[_key];
      }
    
      if (Object.assign) {
        return Object.assign.apply(Object, [target].concat(sources));
      }
    
      sources.forEach(function (source) {
        if (!source) {
          return;
        }
    
        each(source, function (value, key) {
          target[key] = value;
        });
      });
    
      return target;
    }
    
    /**
     * Returns whether a value is an object of any kind - including DOM nodes,
     * arrays, regular expressions, etc. Not functions, though.
     *
     * This avoids the gotcha where using `typeof` on a `null` value
     * results in `'object'`.
     *
     * @param  {Object} value
     * @return {Boolean}
     */
    function isObject(value) {
      return !!value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object';
    }
    
    /**
     * Returns whether an object appears to be a "plain" object - that is, a
     * direct instance of `Object`.
     *
     * @param  {Object} value
     * @return {Boolean}
     */
    function isPlain(value) {
      return isObject(value) && toString.call(value) === '[object Object]' && value.constructor === Object;
    }
    
    /**
     * @file log.js
     * @module log
     */
    var log = void 0;
    
    // This is the private tracking variable for logging level.
    var level = 'all';
    
    // This is the private tracking variable for the logging history.
    var history = [];
    
    /**
     * Log messages to the console and history based on the type of message
     *
     * @private
     * @param  {string} type
     *         The name of the console method to use.
     *
     * @param  {Array} args
     *         The arguments to be passed to the matching console method.
     *
     * @param  {boolean} [stringify]
     *         By default, only old IEs should get console argument stringification,
     *         but this is exposed as a parameter to facilitate testing.
     */
    var logByType = function logByType(type, args) {
      var stringify = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !!IE_VERSION && IE_VERSION < 11;
    
      var lvl = log.levels[level];
      var lvlRegExp = new RegExp('^(' + lvl + ')$');
    
      if (type !== 'log') {
    
        // Add the type to the front of the message when it's not "log".
        args.unshift(type.toUpperCase() + ':');
      }
    
      // Add a clone of the args at this point to history.
      if (history) {
        history.push([].concat(args));
      }
    
      // Add console prefix after adding to history.
      args.unshift('VIDEOJS:');
    
      // If there's no console then don't try to output messages, but they will
      // still be stored in history.
      //
      // Was setting these once outside of this function, but containing them
      // in the function makes it easier to test cases where console doesn't exist
      // when the module is executed.
      var fn = window_1.console && window_1.console[type];
    
      // Bail out if there's no console or if this type is not allowed by the
      // current logging level.
      if (!fn || !lvl || !lvlRegExp.test(type)) {
        return;
      }
    
      // IEs previous to 11 log objects uselessly as "[object Object]"; so, JSONify
      // objects and arrays for those less-capable browsers.
      if (stringify) {
        args = args.map(function (a) {
          if (isObject(a) || Array.isArray(a)) {
            try {
              return JSON.stringify(a);
            } catch (x) {
              return String(a);
            }
          }
    
          // Cast to string before joining, so we get null and undefined explicitly
          // included in output (as we would in a modern console).
          return String(a);
        }).join(' ');
      }
    
      // Old IE versions do not allow .apply() for console methods (they are
      // reported as objects rather than functions).
      if (!fn.apply) {
        fn(args);
      } else {
        fn[Array.isArray(args) ? 'apply' : 'call'](window_1.console, args);
      }
    };
    
    /**
     * Logs plain debug messages. Similar to `console.log`.
     *
     * @class
     * @param    {Mixed[]} args
     *           One or more messages or objects that should be logged.
     */
    log = function log() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
    
      logByType('log', args);
    };
    
    /**
     * Enumeration of available logging levels, where the keys are the level names
     * and the values are `|`-separated strings containing logging methods allowed
     * in that logging level. These strings are used to create a regular expression
     * matching the function name being called.
     *
     * Levels provided by video.js are:
     *
     * - `off`: Matches no calls. Any value that can be cast to `false` will have
     *   this effect. The most restrictive.
     * - `all` (default): Matches only Video.js-provided functions (`log`,
     *   `log.warn`, and `log.error`).
     * - `warn`: Matches `log.warn` and `log.error` calls.
     * - `error`: Matches only `log.error` calls.
     *
     * @type {Object}
     */
    log.levels = {
      all: 'log|warn|error',
      error: 'error',
      off: '',
      warn: 'warn|error',
      DEFAULT: level
    };
    
    /**
     * Get or set the current logging level. If a string matching a key from
     * {@link log.levels} is provided, acts as a setter. Regardless of argument,
     * returns the current logging level.
     *
     * @param  {string} [lvl]
     *         Pass to set a new logging level.
     *
     * @return {string}
     *         The current logging level.
     */
    log.level = function (lvl) {
      if (typeof lvl === 'string') {
        if (!log.levels.hasOwnProperty(lvl)) {
          throw new Error('"' + lvl + '" in not a valid log level');
        }
        level = lvl;
      }
      return level;
    };
    
    /**
     * Returns an array containing everything that has been logged to the history.
     *
     * This array is a shallow clone of the internal history record. However, its
     * contents are _not_ cloned; so, mutating objects inside this array will
     * mutate them in history.
     *
     * @return {Array}
     */
    log.history = function () {
      return history ? [].concat(history) : [];
    };
    
    /**
     * Clears the internal history tracking, but does not prevent further history
     * tracking.
     */
    log.history.clear = function () {
      if (history) {
        history.length = 0;
      }
    };
    
    /**
     * Disable history tracking if it is currently enabled.
     */
    log.history.disable = function () {
      if (history !== null) {
        history.length = 0;
        history = null;
      }
    };
    
    /**
     * Enable history tracking if it is currently disabled.
     */
    log.history.enable = function () {
      if (history === null) {
        history = [];
      }
    };
    
    /**
     * Logs error messages. Similar to `console.error`.
     *
     * @param {Mixed[]} args
     *        One or more messages or objects that should be logged as an error
     */
    log.error = function () {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
    
      return logByType('error', args);
    };
    
    /**
     * Logs warning messages. Similar to `console.warn`.
     *
     * @param {Mixed[]} args
     *        One or more messages or objects that should be logged as a warning.
     */
    log.warn = function () {
      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
    
      return logByType('warn', args);
    };
    
    var log$1 = log;
    
    function clean (s) {
      return s.replace(/\n\r?\s*/g, '')
    }
    
    
    var tsml = function tsml (sa) {
      var s = ''
        , i = 0;
    
      for (; i < arguments.length; i++)
        s += clean(sa[i]) + (arguments[i + 1] || '');
    
      return s
    };
    
    /**
     * @file computed-style.js
     * @module computed-style
     */
    /**
     * A safe getComputedStyle with an IE8 fallback.
     *
     * This is needed because in Firefox, if the player is loaded in an iframe with
     * `display:none`, then `getComputedStyle` returns `null`, so, we do a null-check to
     * make sure  that the player doesn't break in these cases.
     *
     * @param {Element} el
     *        The element you want the computed style of
     *
     * @param {string} prop
     *        The property name you want
     *
     * @see https://bugzilla.mozilla.org/show_bug.cgi?id=548397
     *
     * @static
     * @const
     */
    function computedStyle(el, prop) {
      if (!el || !prop) {
        return '';
      }
    
      if (typeof window_1.getComputedStyle === 'function') {
        var cs = window_1.getComputedStyle(el);
    
        return cs ? cs[prop] : '';
      }
    
      return el.currentStyle[prop] || '';
    }
    
    var _templateObject = taggedTemplateLiteralLoose(['Setting attributes in the second argument of createEl()\n                has been deprecated. Use the third argument instead.\n                createEl(type, properties, attributes). Attempting to set ', ' to ', '.'], ['Setting attributes in the second argument of createEl()\n                has been deprecated. Use the third argument instead.\n                createEl(type, properties, attributes). Attempting to set ', ' to ', '.']);
    
    /**
     * @file dom.js
     * @module dom
     */
    /**
     * Detect if a value is a string with any non-whitespace characters.
     *
     * @param {string} str
     *        The string to check
     *
     * @return {boolean}
     *         - True if the string is non-blank
     *         - False otherwise
     *
     */
    function isNonBlankString(str) {
      return typeof str === 'string' && /\S/.test(str);
    }
    
    /**
     * Throws an error if the passed string has whitespace. This is used by
     * class methods to be relatively consistent with the classList API.
     *
     * @param {string} str
     *         The string to check for whitespace.
     *
     * @throws {Error}
     *         Throws an error if there is whitespace in the string.
     *
     */
    function throwIfWhitespace(str) {
      if (/\s/.test(str)) {
        throw new Error('class has illegal whitespace characters');
      }
    }
    
    /**
     * Produce a regular expression for matching a className within an elements className.
     *
     * @param {string} className
     *         The className to generate the RegExp for.
     *
     * @return {RegExp}
     *         The RegExp that will check for a specific `className` in an elements
     *         className.
     */
    function classRegExp(className) {
      return new RegExp('(^|\\s)' + className + '($|\\s)');
    }
    
    /**
     * Whether the current DOM interface appears to be real.
     *
     * @return {Boolean}
     */
    function isReal() {
      return (
    
        // Both document and window will never be undefined thanks to `global`.
        document_1 === window_1.document &&
    
        // In IE < 9, DOM methods return "object" as their type, so all we can
        // confidently check is that it exists.
        typeof document_1.createElement !== 'undefined'
      );
    }
    
    /**
     * Determines, via duck typing, whether or not a value is a DOM element.
     *
     * @param {Mixed} value
     *        The thing to check
     *
     * @return {boolean}
     *         - True if it is a DOM element
     *         - False otherwise
     */
    function isEl(value) {
      return isObject(value) && value.nodeType === 1;
    }
    
    /**
     * Creates functions to query the DOM using a given method.
     *
     * @param {string} method
     *         The method to create the query with.
     *
     * @return {Function}
     *         The query method
     */
    function createQuerier(method) {
      return function (selector, context) {
        if (!isNonBlankString(selector)) {
          return document_1[method](null);
        }
        if (isNonBlankString(context)) {
          context = document_1.querySelector(context);
        }
    
        var ctx = isEl(context) ? context : document_1;
    
        return ctx[method] && ctx[method](selector);
      };
    }
    
    /**
     * Creates an element and applies properties.
     *
     * @param {string} [tagName='div']
     *         Name of tag to be created.
     *
     * @param {Object} [properties={}]
     *         Element properties to be applied.
     *
     * @param {Object} [attributes={}]
     *         Element attributes to be applied.
     *
     * @param {String|Element|TextNode|Array|Function} [content]
     *         Contents for the element (see: {@link dom:normalizeContent})
     *
     * @return {Element}
     *         The element that was created.
     */
    function createEl() {
      var tagName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'div';
      var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var content = arguments[3];
    
      var el = document_1.createElement(tagName);
    
      Object.getOwnPropertyNames(properties).forEach(function (propName) {
        var val = properties[propName];
    
        // See #2176
        // We originally were accepting both properties and attributes in the
        // same object, but that doesn't work so well.
        if (propName.indexOf('aria-') !== -1 || propName === 'role' || propName === 'type') {
          log$1.warn(tsml(_templateObject, propName, val));
          el.setAttribute(propName, val);
    
          // Handle textContent since it's not supported everywhere and we have a
          // method for it.
        } else if (propName === 'textContent') {
          textContent(el, val);
        } else {
          el[propName] = val;
        }
      });
    
      Object.getOwnPropertyNames(attributes).forEach(function (attrName) {
        el.setAttribute(attrName, attributes[attrName]);
      });
    
      if (content) {
        appendContent(el, content);
      }
    
      return el;
    }
    
    /**
     * Injects text into an element, replacing any existing contents entirely.
     *
     * @param {Element} el
     *        The element to add text content into
     *
     * @param {string} text
     *        The text content to add.
     *
     * @return {Element}
     *         The element with added text content.
     */
    function textContent(el, text) {
      if (typeof el.textContent === 'undefined') {
        el.innerText = text;
      } else {
        el.textContent = text;
      }
      return el;
    }
    
    /**
     * Insert an element as the first child node of another
     *
     * @param {Element} child
     *        Element to insert
     *
     * @param {Element} parent
     *        Element to insert child into
     */
    function prependTo(child, parent) {
      if (parent.firstChild) {
        parent.insertBefore(child, parent.firstChild);
      } else {
        parent.appendChild(child);
      }
    }
    
    /**
     * Check if an element has a CSS class
     *
     * @param {Element} element
     *        Element to check
     *
     * @param {string} classToCheck
     *        Class name to check for
     *
     * @return {boolean}
     *         - True if the element had the class
     *         - False otherwise.
     *
     * @throws {Error}
     *         Throws an error if `classToCheck` has white space.
     */
    function hasClass(element, classToCheck) {
      throwIfWhitespace(classToCheck);
      if (element.classList) {
        return element.classList.contains(classToCheck);
      }
      return classRegExp(classToCheck).test(element.className);
    }
    
    /**
     * Add a CSS class name to an element
     *
     * @param {Element} element
     *        Element to add class name to.
     *
     * @param {string} classToAdd
     *        Class name to add.
     *
     * @return {Element}
     *         The dom element with the added class name.
     */
    function addClass(element, classToAdd) {
      if (element.classList) {
        element.classList.add(classToAdd);
    
        // Don't need to `throwIfWhitespace` here because `hasElClass` will do it
        // in the case of classList not being supported.
      } else if (!hasClass(element, classToAdd)) {
        element.className = (element.className + ' ' + classToAdd).trim();
      }
    
      return element;
    }
    
    /**
     * Remove a CSS class name from an element
     *
     * @param {Element} element
     *        Element to remove a class name from.
     *
     * @param {string} classToRemove
     *        Class name to remove
     *
     * @return {Element}
     *         The dom element with class name removed.
     */
    function removeClass(element, classToRemove) {
      if (element.classList) {
        element.classList.remove(classToRemove);
      } else {
        throwIfWhitespace(classToRemove);
        element.className = element.className.split(/\s+/).filter(function (c) {
          return c !== classToRemove;
        }).join(' ');
      }
    
      return element;
    }
    
    /**
     * The callback definition for toggleElClass.
     *
     * @callback Dom~PredicateCallback
     * @param {Element} element
     *        The DOM element of the Component.
     *
     * @param {string} classToToggle
     *        The `className` that wants to be toggled
     *
     * @return {boolean|undefined}
     *         - If true the `classToToggle` will get added to `element`.
     *         - If false the `classToToggle` will get removed from `element`.
     *         - If undefined this callback will be ignored
     */
    
    /**
     * Adds or removes a CSS class name on an element depending on an optional
     * condition or the presence/absence of the class name.
     *
     * @param {Element} element
     *        The element to toggle a class name on.
     *
     * @param {string} classToToggle
     *        The class that should be toggled
     *
     * @param {boolean|PredicateCallback} [predicate]
     *        See the return value for {@link Dom~PredicateCallback}
     *
     * @return {Element}
     *         The element with a class that has been toggled.
     */
    function toggleClass(element, classToToggle, predicate) {
    
      // This CANNOT use `classList` internally because IE does not support the
      // second parameter to the `classList.toggle()` method! Which is fine because
      // `classList` will be used by the add/remove functions.
      var has = hasClass(element, classToToggle);
    
      if (typeof predicate === 'function') {
        predicate = predicate(element, classToToggle);
      }
    
      if (typeof predicate !== 'boolean') {
        predicate = !has;
      }
    
      // If the necessary class operation matches the current state of the
      // element, no action is required.
      if (predicate === has) {
        return;
      }
    
      if (predicate) {
        addClass(element, classToToggle);
      } else {
        removeClass(element, classToToggle);
      }
    
      return element;
    }
    
    /**
     * Apply attributes to an HTML element.
     *
     * @param {Element} el
     *        Element to add attributes to.
     *
     * @param {Object} [attributes]
     *        Attributes to be applied.
     */
    function setAttributes(el, attributes) {
      Object.getOwnPropertyNames(attributes).forEach(function (attrName) {
        var attrValue = attributes[attrName];
    
        if (attrValue === null || typeof attrValue === 'undefined' || attrValue === false) {
          el.removeAttribute(attrName);
        } else {
          el.setAttribute(attrName, attrValue === true ? '' : attrValue);
        }
      });
    }
    
    /**
     * Get an element's attribute values, as defined on the HTML tag
     * Attributes are not the same as properties. They're defined on the tag
     * or with setAttribute (which shouldn't be used with HTML)
     * This will return true or false for boolean attributes.
     *
     * @param {Element} tag
     *        Element from which to get tag attributes.
     *
     * @return {Object}
     *         All attributes of the element.
     */
    function getAttributes(tag) {
      var obj = {};
    
      // known boolean attributes
      // we can check for matching boolean properties, but older browsers
      // won't know about HTML5 boolean attributes that we still read from
      var knownBooleans = ',' + 'autoplay,controls,playsinline,loop,muted,default,defaultMuted' + ',';
    
      if (tag && tag.attributes && tag.attributes.length > 0) {
        var attrs = tag.attributes;
    
        for (var i = attrs.length - 1; i >= 0; i--) {
          var attrName = attrs[i].name;
          var attrVal = attrs[i].value;
    
          // check for known booleans
          // the matching element property will return a value for typeof
          if (typeof tag[attrName] === 'boolean' || knownBooleans.indexOf(',' + attrName + ',') !== -1) {
            // the value of an included boolean attribute is typically an empty
            // string ('') which would equal false if we just check for a false value.
            // we also don't want support bad code like autoplay='false'
            attrVal = attrVal !== null ? true : false;
          }
    
          obj[attrName] = attrVal;
        }
      }
    
      return obj;
    }
    
    /**
     * Get the value of an element's attribute
     *
     * @param {Element} el
     *        A DOM element
     *
     * @param {string} attribute
     *        Attribute to get the value of
     *
     * @return {string}
     *         value of the attribute
     */
    function getAttribute(el, attribute) {
      return el.getAttribute(attribute);
    }
    
    /**
     * Set the value of an element's attribute
     *
     * @param {Element} el
     *        A DOM element
     *
     * @param {string} attribute
     *        Attribute to set
     *
     * @param {string} value
     *        Value to set the attribute to
     */
    function setAttribute(el, attribute, value) {
      el.setAttribute(attribute, value);
    }
    
    /**
     * Remove an element's attribute
     *
     * @param {Element} el
     *        A DOM element
     *
     * @param {string} attribute
     *        Attribute to remove
     */
    function removeAttribute(el, attribute) {
      el.removeAttribute(attribute);
    }
    
    /**
     * Attempt to block the ability to select text while dragging controls
     */
    function blockTextSelection() {
      document_1.body.focus();
      document_1.onselectstart = function () {
        return false;
      };
    }
    
    /**
     * Turn off text selection blocking
     */
    function unblockTextSelection() {
      document_1.onselectstart = function () {
        return true;
      };
    }
    
    /**
     * Identical to the native `getBoundingClientRect` function, but ensures that
     * the method is supported at all (it is in all browsers we claim to support)
     * and that the element is in the DOM before continuing.
     *
     * This wrapper function also shims properties which are not provided by some
     * older browsers (namely, IE8).
     *
     * Additionally, some browsers do not support adding properties to a
     * `ClientRect`/`DOMRect` object; so, we shallow-copy it with the standard
     * properties (except `x` and `y` which are not widely supported). This helps
     * avoid implementations where keys are non-enumerable.
     *
     * @param  {Element} el
     *         Element whose `ClientRect` we want to calculate.
     *
     * @return {Object|undefined}
     *         Always returns a plain
     */
    function getBoundingClientRect(el) {
      if (el && el.getBoundingClientRect && el.parentNode) {
        var rect = el.getBoundingClientRect();
        var result = {};
    
        ['bottom', 'height', 'left', 'right', 'top', 'width'].forEach(function (k) {
          if (rect[k] !== undefined) {
            result[k] = rect[k];
          }
        });
    
        if (!result.height) {
          result.height = parseFloat(computedStyle(el, 'height'));
        }
    
        if (!result.width) {
          result.width = parseFloat(computedStyle(el, 'width'));
        }
    
        return result;
      }
    }
    
    /**
     * The postion of a DOM element on the page.
     *
     * @typedef {Object} module:dom~Position
     *
     * @property {number} left
     *           Pixels to the left
     *
     * @property {number} top
     *           Pixels on top
     */
    
    /**
     * Offset Left.
     * getBoundingClientRect technique from
     * John Resig
     *
     * @see http://ejohn.org/blog/getboundingclientrect-is-awesome/
     *
     * @param {Element} el
     *        Element from which to get offset
     *
     * @return {module:dom~Position}
     *         The position of the element that was passed in.
     */
    function findPosition(el) {
      var box = void 0;
    
      if (el.getBoundingClientRect && el.parentNode) {
        box = el.getBoundingClientRect();
      }
    
      if (!box) {
        return {
          left: 0,
          top: 0
        };
      }
    
      var docEl = document_1.documentElement;
      var body = document_1.body;
    
      var clientLeft = docEl.clientLeft || body.clientLeft || 0;
      var scrollLeft = window_1.pageXOffset || body.scrollLeft;
      var left = box.left + scrollLeft - clientLeft;
    
      var clientTop = docEl.clientTop || body.clientTop || 0;
      var scrollTop = window_1.pageYOffset || body.scrollTop;
      var top = box.top + scrollTop - clientTop;
    
      // Android sometimes returns slightly off decimal values, so need to round
      return {
        left: Math.round(left),
        top: Math.round(top)
      };
    }
    
    /**
     * x and y coordinates for a dom element or mouse pointer
     *
     * @typedef {Object} Dom~Coordinates
     *
     * @property {number} x
     *           x coordinate in pixels
     *
     * @property {number} y
     *           y coordinate in pixels
     */
    
    /**
     * Get pointer position in element
     * Returns an object with x and y coordinates.
     * The base on the coordinates are the bottom left of the element.
     *
     * @param {Element} el
     *        Element on which to get the pointer position on
     *
     * @param {EventTarget~Event} event
     *        Event object
     *
     * @return {Dom~Coordinates}
     *         A Coordinates object corresponding to the mouse position.
     *
     */
    function getPointerPosition(el, event) {
      var position = {};
      var box = findPosition(el);
      var boxW = el.offsetWidth;
      var boxH = el.offsetHeight;
    
      var boxY = box.top;
      var boxX = box.left;
      var pageY = event.pageY;
      var pageX = event.pageX;
    
      if (event.changedTouches) {
        pageX = event.changedTouches[0].pageX;
        pageY = event.changedTouches[0].pageY;
      }
    
      position.y = Math.max(0, Math.min(1, (boxY - pageY + boxH) / boxH));
      position.x = Math.max(0, Math.min(1, (pageX - boxX) / boxW));
    
      return position;
    }
    
    /**
     * Determines, via duck typing, whether or not a value is a text node.
     *
     * @param {Mixed} value
     *        Check if this value is a text node.
     *
     * @return {boolean}
     *         - True if it is a text node
     *         - False otherwise
     */
    function isTextNode(value) {
      return isObject(value) && value.nodeType === 3;
    }
    
    /**
     * Empties the contents of an element.
     *
     * @param {Element} el
     *        The element to empty children from
     *
     * @return {Element}
     *         The element with no children
     */
    function emptyEl(el) {
      while (el.firstChild) {
        el.removeChild(el.firstChild);
      }
      return el;
    }
    
    /**
     * Normalizes content for eventual insertion into the DOM.
     *
     * This allows a wide range of content definition methods, but protects
     * from falling into the trap of simply writing to `innerHTML`, which is
     * an XSS concern.
     *
     * The content for an element can be passed in multiple types and
     * combinations, whose behavior is as follows:
     *
     * @param {String|Element|TextNode|Array|Function} content
     *        - String: Normalized into a text node.
     *        - Element/TextNode: Passed through.
     *        - Array: A one-dimensional array of strings, elements, nodes, or functions
     *          (which return single strings, elements, or nodes).
     *        - Function: If the sole argument, is expected to produce a string, element,
     *          node, or array as defined above.
     *
     * @return {Array}
     *         All of the content that was passed in normalized.
     */
    function normalizeContent(content) {
    
      // First, invoke content if it is a function. If it produces an array,
      // that needs to happen before normalization.
      if (typeof content === 'function') {
        content = content();
      }
    
      // Next up, normalize to an array, so one or many items can be normalized,
      // filtered, and returned.
      return (Array.isArray(content) ? content : [content]).map(function (value) {
    
        // First, invoke value if it is a function to produce a new value,
        // which will be subsequently normalized to a Node of some kind.
        if (typeof value === 'function') {
          value = value();
        }
    
        if (isEl(value) || isTextNode(value)) {
          return value;
        }
    
        if (typeof value === 'string' && /\S/.test(value)) {
          return document_1.createTextNode(value);
        }
      }).filter(function (value) {
        return value;
      });
    }
    
    /**
     * Normalizes and appends content to an element.
     *
     * @param {Element} el
     *        Element to append normalized content to.
     *
     *
     * @param {String|Element|TextNode|Array|Function} content
     *        See the `content` argument of {@link dom:normalizeContent}
     *
     * @return {Element}
     *         The element with appended normalized content.
     */
    function appendContent(el, content) {
      normalizeContent(content).forEach(function (node) {
        return el.appendChild(node);
      });
      return el;
    }
    
    /**
     * Normalizes and inserts content into an element; this is identical to
     * `appendContent()`, except it empties the element first.
     *
     * @param {Element} el
     *        Element to insert normalized content into.
     *
     * @param {String|Element|TextNode|Array|Function} content
     *        See the `content` argument of {@link dom:normalizeContent}
     *
     * @return {Element}
     *         The element with inserted normalized content.
     *
     */
    function insertContent(el, content) {
      return appendContent(emptyEl(el), content);
    }
    
    /**
     * Finds a single DOM element matching `selector` within the optional
     * `context` of another DOM element (defaulting to `document`).
     *
     * @param {string} selector
     *        A valid CSS selector, which will be passed to `querySelector`.
     *
     * @param {Element|String} [context=document]
     *        A DOM element within which to query. Can also be a selector
     *        string in which case the first matching element will be used
     *        as context. If missing (or no element matches selector), falls
     *        back to `document`.
     *
     * @return {Element|null}
     *         The element that was found or null.
     */
    var $ = createQuerier('querySelector');
    
    /**
     * Finds a all DOM elements matching `selector` within the optional
     * `context` of another DOM element (defaulting to `document`).
     *
     * @param {string} selector
     *           A valid CSS selector, which will be passed to `querySelectorAll`.
     *
     * @param {Element|String} [context=document]
     *           A DOM element within which to query. Can also be a selector
     *           string in which case the first matching element will be used
     *           as context. If missing (or no element matches selector), falls
     *           back to `document`.
     *
     * @return {NodeList}
     *         A element list of elements that were found. Will be empty if none were found.
     *
     */
    var $$ = createQuerier('querySelectorAll');
    
    
    
    var Dom = (Object.freeze || Object)({
        isReal: isReal,
        isEl: isEl,
        createEl: createEl,
        textContent: textContent,
        prependTo: prependTo,
        hasClass: hasClass,
        addClass: addClass,
        removeClass: removeClass,
        toggleClass: toggleClass,
        setAttributes: setAttributes,
        getAttributes: getAttributes,
        getAttribute: getAttribute,
        setAttribute: setAttribute,
        removeAttribute: removeAttribute,
        blockTextSelection: blockTextSelection,
        unblockTextSelection: unblockTextSelection,
        getBoundingClientRect: getBoundingClientRect,
        findPosition: findPosition,
        getPointerPosition: getPointerPosition,
        isTextNode: isTextNode,
        emptyEl: emptyEl,
        normalizeContent: normalizeContent,
        appendContent: appendContent,
        insertContent: insertContent,
        $: $,
        $$: $$
    });
    
    /**
     * @file guid.js
     * @module guid
     */
    
    /**
     * Unique ID for an element or function
     * @type {Number}
     */
    var _guid = 1;
    
    /**
     * Get a unique auto-incrementing ID by number that has not been returned before.
     *
     * @return {number}
     *         A new unique ID.
     */
    function newGUID() {
      return _guid++;
    }
    
    /**
     * @file dom-data.js
     * @module dom-data
     */
    /**
     * Element Data Store.
     *
     * Allows for binding data to an element without putting it directly on the
     * element. Ex. Event listeners are stored here.
     * (also from jsninja.com, slightly modified and updated for closure compiler)
     *
     * @type {Object}
     * @private
     */
    var elData = {};
    
    /*
     * Unique attribute name to store an element's guid in
     *
     * @type {String}
     * @constant
     * @private
     */
    var elIdAttr = 'vdata' + new Date().getTime();
    
    /**
     * Returns the cache object where data for an element is stored
     *
     * @param {Element} el
     *        Element to store data for.
     *
     * @return {Object}
     *         The cache object for that el that was passed in.
     */
    function getData(el) {
      var id = el[elIdAttr];
    
      if (!id) {
        id = el[elIdAttr] = newGUID();
      }
    
      if (!elData[id]) {
        elData[id] = {};
      }
    
      return elData[id];
    }
    
    /**
     * Returns whether or not an element has cached data
     *
     * @param {Element} el
     *        Check if this element has cached data.
     *
     * @return {boolean}
     *         - True if the DOM element has cached data.
     *         - False otherwise.
     */
    function hasData(el) {
      var id = el[elIdAttr];
    
      if (!id) {
        return false;
      }
    
      return !!Object.getOwnPropertyNames(elData[id]).length;
    }
    
    /**
     * Delete data for the element from the cache and the guid attr from getElementById
     *
     * @param {Element} el
     *        Remove cached data for this element.
     */
    function removeData(el) {
      var id = el[elIdAttr];
    
      if (!id) {
        return;
      }
    
      // Remove all stored data
      delete elData[id];
    
      // Remove the elIdAttr property from the DOM node
      try {
        delete el[elIdAttr];
      } catch (e) {
        if (el.removeAttribute) {
          el.removeAttribute(elIdAttr);
        } else {
          // IE doesn't appear to support removeAttribute on the document element
          el[elIdAttr] = null;
        }
      }
    }
    
    /**
     * @file events.js. An Event System (John Resig - Secrets of a JS Ninja http://jsninja.com/)
     * (Original book version wasn't completely usable, so fixed some things and made Closure Compiler compatible)
     * This should work very similarly to jQuery's events, however it's based off the book version which isn't as
     * robust as jquery's, so there's probably some differences.
     *
     * @module events
     */
    
    /**
     * Clean up the listener cache and dispatchers
     *
     * @param {Element|Object} elem
     *        Element to clean up
     *
     * @param {string} type
     *        Type of event to clean up
     */
    function _cleanUpEvents(elem, type) {
      var data = getData(elem);
    
      // Remove the events of a particular type if there are none left
      if (data.handlers[type].length === 0) {
        delete data.handlers[type];
        // data.handlers[type] = null;
        // Setting to null was causing an error with data.handlers
    
        // Remove the meta-handler from the element
        if (elem.removeEventListener) {
          elem.removeEventListener(type, data.dispatcher, false);
        } else if (elem.detachEvent) {
          elem.detachEvent('on' + type, data.dispatcher);
        }
      }
    
      // Remove the events object if there are no types left
      if (Object.getOwnPropertyNames(data.handlers).length <= 0) {
        delete data.handlers;
        delete data.dispatcher;
        delete data.disabled;
      }
    
      // Finally remove the element data if there is no data left
      if (Object.getOwnPropertyNames(data).length === 0) {
        removeData(elem);
      }
    }
    
    /**
     * Loops through an array of event types and calls the requested method for each type.
     *
     * @param {Function} fn
     *        The event method we want to use.
     *
     * @param {Element|Object} elem
     *        Element or object to bind listeners to
     *
     * @param {string} type
     *        Type of event to bind to.
     *
     * @param {EventTarget~EventListener} callback
     *        Event listener.
     */
    function _handleMultipleEvents(fn, elem, types, callback) {
      types.forEach(function (type) {
        // Call the event method for each one of the types
        fn(elem, type, callback);
      });
    }
    
    /**
     * Fix a native event to have standard property values
     *
     * @param {Object} event
     *        Event object to fix.
     *
     * @return {Object}
     *         Fixed event object.
     */
    function fixEvent(event) {
    
      function returnTrue() {
        return true;
      }
    
      function returnFalse() {
        return false;
      }
    
      // Test if fixing up is needed
      // Used to check if !event.stopPropagation instead of isPropagationStopped
      // But native events return true for stopPropagation, but don't have
      // other expected methods like isPropagationStopped. Seems to be a problem
      // with the Javascript Ninja code. So we're just overriding all events now.
      if (!event || !event.isPropagationStopped) {
        var old = event || window_1.event;
    
        event = {};
        // Clone the old object so that we can modify the values event = {};
        // IE8 Doesn't like when you mess with native event properties
        // Firefox returns false for event.hasOwnProperty('type') and other props
        //  which makes copying more difficult.
        // TODO: Probably best to create a whitelist of event props
        for (var key in old) {
          // Safari 6.0.3 warns you if you try to copy deprecated layerX/Y
          // Chrome warns you if you try to copy deprecated keyboardEvent.keyLocation
          // and webkitMovementX/Y
          if (key !== 'layerX' && key !== 'layerY' && key !== 'keyLocation' && key !== 'webkitMovementX' && key !== 'webkitMovementY') {
            // Chrome 32+ warns if you try to copy deprecated returnValue, but
            // we still want to if preventDefault isn't supported (IE8).
            if (!(key === 'returnValue' && old.preventDefault)) {
              event[key] = old[key];
            }
          }
        }
    
        // The event occurred on this element
        if (!event.target) {
          event.target = event.srcElement || document_1;
        }
    
        // Handle which other element the event is related to
        if (!event.relatedTarget) {
          event.relatedTarget = event.fromElement === event.target ? event.toElement : event.fromElement;
        }
    
        // Stop the default browser action
        event.preventDefault = function () {
          if (old.preventDefault) {
            old.preventDefault();
          }
          event.returnValue = false;
          old.returnValue = false;
          event.defaultPrevented = true;
        };
    
        event.defaultPrevented = false;
    
        // Stop the event from bubbling
        event.stopPropagation = function () {
          if (old.stopPropagation) {
            old.stopPropagation();
          }
          event.cancelBubble = true;
          old.cancelBubble = true;
          event.isPropagationStopped = returnTrue;
        };
    
        event.isPropagationStopped = returnFalse;
    
        // Stop the event from bubbling and executing other handlers
        event.stopImmediatePropagation = function () {
          if (old.stopImmediatePropagation) {
            old.stopImmediatePropagation();
          }
          event.isImmediatePropagationStopped = returnTrue;
          event.stopPropagation();
        };
    
        event.isImmediatePropagationStopped = returnFalse;
    
        // Handle mouse position
        if (event.clientX !== null && event.clientX !== undefined) {
          var doc = document_1.documentElement;
          var body = document_1.body;
    
          event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
          event.pageY = event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
        }
    
        // Handle key presses
        event.which = event.charCode || event.keyCode;
    
        // Fix button for mouse clicks:
        // 0 == left; 1 == middle; 2 == right
        if (event.button !== null && event.button !== undefined) {
    
          // The following is disabled because it does not pass videojs-standard
          // and... yikes.
          /* eslint-disable */
          event.button = event.button & 1 ? 0 : event.button & 4 ? 1 : event.button & 2 ? 2 : 0;
          /* eslint-enable */
        }
      }
    
      // Returns fixed-up instance
      return event;
    }
    
    /**
     * Whether passive event listeners are supported
     */
    var _supportsPassive = false;
    
    (function () {
      try {
        var opts = Object.defineProperty({}, 'passive', {
          get: function get() {
            _supportsPassive = true;
          }
        });
    
        window_1.addEventListener('test', null, opts);
      } catch (e) {
        // disregard
      }
    })();
    
    /**
     * Touch events Chrome expects to be passive
     */
    var passiveEvents = ['touchstart', 'touchmove'];
    
    /**
     * Add an event listener to element
     * It stores the handler function in a separate cache object
     * and adds a generic handler to the element's event,
     * along with a unique id (guid) to the element.
     *
     * @param {Element|Object} elem
     *        Element or object to bind listeners to
     *
     * @param {string|string[]} type
     *        Type of event to bind to.
     *
     * @param {EventTarget~EventListener} fn
     *        Event listener.
     */
    function on(elem, type, fn) {
      if (Array.isArray(type)) {
        return _handleMultipleEvents(on, elem, type, fn);
      }
    
      var data = getData(elem);
    
      // We need a place to store all our handler data
      if (!data.handlers) {
        data.handlers = {};
      }
    
      if (!data.handlers[type]) {
        data.handlers[type] = [];
      }
    
      if (!fn.guid) {
        fn.guid = newGUID();
      }
    
      data.handlers[type].push(fn);
    
      if (!data.dispatcher) {
        data.disabled = false;
    
        data.dispatcher = function (event, hash) {
    
          if (data.disabled) {
            return;
          }
    
          event = fixEvent(event);
    
          var handlers = data.handlers[event.type];
    
          if (handlers) {
            // Copy handlers so if handlers are added/removed during the process it doesn't throw everything off.
            var handlersCopy = handlers.slice(0);
    
            for (var m = 0, n = handlersCopy.length; m < n; m++) {
              if (event.isImmediatePropagationStopped()) {
                break;
              } else {
                try {
                  handlersCopy[m].call(elem, event, hash);
                } catch (e) {
                  log$1.error(e);
                }
              }
            }
          }
        };
      }
    
      if (data.handlers[type].length === 1) {
        if (elem.addEventListener) {
          var options = false;
    
          if (_supportsPassive && passiveEvents.indexOf(type) > -1) {
            options = { passive: true };
          }
          elem.addEventListener(type, data.dispatcher, options);
        } else if (elem.attachEvent) {
          elem.attachEvent('on' + type, data.dispatcher);
        }
      }
    }
    
    /**
     * Removes event listeners from an element
     *
     * @param {Element|Object} elem
     *        Object to remove listeners from.
     *
     * @param {string|string[]} [type]
     *        Type of listener to remove. Don't include to remove all events from element.
     *
     * @param {EventTarget~EventListener} [fn]
     *        Specific listener to remove. Don't include to remove listeners for an event
     *        type.
     */
    function off(elem, type, fn) {
      // Don't want to add a cache object through getElData if not needed
      if (!hasData(elem)) {
        return;
      }
    
      var data = getData(elem);
    
      // If no events exist, nothing to unbind
      if (!data.handlers) {
        return;
      }
    
      if (Array.isArray(type)) {
        return _handleMultipleEvents(off, elem, type, fn);
      }
    
      // Utility function
      var removeType = function removeType(t) {
        data.handlers[t] = [];
        _cleanUpEvents(elem, t);
      };
    
      // Are we removing all bound events?
      if (!type) {
        for (var t in data.handlers) {
          removeType(t);
        }
        return;
      }
    
      var handlers = data.handlers[type];
    
      // If no handlers exist, nothing to unbind
      if (!handlers) {
        return;
      }
    
      // If no listener was provided, remove all listeners for type
      if (!fn) {
        removeType(type);
        return;
      }
    
      // We're only removing a single handler
      if (fn.guid) {
        for (var n = 0; n < handlers.length; n++) {
          if (handlers[n].guid === fn.guid) {
            handlers.splice(n--, 1);
          }
        }
      }
    
      _cleanUpEvents(elem, type);
    }
    
    /**
     * Trigger an event for an element
     *
     * @param {Element|Object} elem
     *        Element to trigger an event on
     *
     * @param {EventTarget~Event|string} event
     *        A string (the type) or an event object with a type attribute
     *
     * @param {Object} [hash]
     *        data hash to pass along with the event
     *
     * @return {boolean|undefined}
     *         - Returns the opposite of `defaultPrevented` if default was prevented
     *         - Otherwise returns undefined
     */
    function trigger(elem, event, hash) {
      // Fetches element data and a reference to the parent (for bubbling).
      // Don't want to add a data object to cache for every parent,
      // so checking hasElData first.
      var elemData = hasData(elem) ? getData(elem) : {};
      var parent = elem.parentNode || elem.ownerDocument;
      // type = event.type || event,
      // handler;
    
      // If an event name was passed as a string, creates an event out of it
      if (typeof event === 'string') {
        event = { type: event, target: elem };
      }
      // Normalizes the event properties.
      event = fixEvent(event);
    
      // If the passed element has a dispatcher, executes the established handlers.
      if (elemData.dispatcher) {
        elemData.dispatcher.call(elem, event, hash);
      }
    
      // Unless explicitly stopped or the event does not bubble (e.g. media events)
      // recursively calls this function to bubble the event up the DOM.
      if (parent && !event.isPropagationStopped() && event.bubbles === true) {
        trigger.call(null, parent, event, hash);
    
        // If at the top of the DOM, triggers the default action unless disabled.
      } else if (!parent && !event.defaultPrevented) {
        var targetData = getData(event.target);
    
        // Checks if the target has a default action for this event.
        if (event.target[event.type]) {
          // Temporarily disables event dispatching on the target as we have already executed the handler.
          targetData.disabled = true;
          // Executes the default action.
          if (typeof event.target[event.type] === 'function') {
            event.target[event.type]();
          }
          // Re-enables event dispatching.
          targetData.disabled = false;
        }
      }
    
      // Inform the triggerer if the default was prevented by returning false
      return !event.defaultPrevented;
    }
    
    /**
     * Trigger a listener only once for an event
     *
     * @param {Element|Object} elem
     *        Element or object to bind to.
     *
     * @param {string|string[]} type
     *        Name/type of event
     *
     * @param {Event~EventListener} fn
     *        Event Listener function
     */
    function one(elem, type, fn) {
      if (Array.isArray(type)) {
        return _handleMultipleEvents(one, elem, type, fn);
      }
      var func = function func() {
        off(elem, type, func);
        fn.apply(this, arguments);
      };
    
      // copy the guid to the new function so it can removed using the original function's ID
      func.guid = fn.guid = fn.guid || newGUID();
      on(elem, type, func);
    }
    
    var Events = (Object.freeze || Object)({
        fixEvent: fixEvent,
        on: on,
        off: off,
        trigger: trigger,
        one: one
    });
    
    /**
     * @file setup.js - Functions for setting up a player without
     * user interaction based on the data-setup `attribute` of the video tag.
     *
     * @module setup
     */
    var _windowLoaded = false;
    var videojs$2 = void 0;
    
    /**
     * Set up any tags that have a data-setup `attribute` when the player is started.
     */
    var autoSetup = function autoSetup() {
    
      // Protect against breakage in non-browser environments.
      if (!isReal()) {
        return;
      }
    
      // One day, when we stop supporting IE8, go back to this, but in the meantime...*hack hack hack*
      // var vids = Array.prototype.slice.call(document.getElementsByTagName('video'));
      // var audios = Array.prototype.slice.call(document.getElementsByTagName('audio'));
      // var mediaEls = vids.concat(audios);
    
      // Because IE8 doesn't support calling slice on a node list, we need to loop
      // through each list of elements to build up a new, combined list of elements.
      var vids = document_1.getElementsByTagName('video');
      var audios = document_1.getElementsByTagName('audio');
      var mediaEls = [];
    
      if (vids && vids.length > 0) {
        for (var i = 0, e = vids.length; i < e; i++) {
          mediaEls.push(vids[i]);
        }
      }
    
      if (audios && audios.length > 0) {
        for (var _i = 0, _e = audios.length; _i < _e; _i++) {
          mediaEls.push(audios[_i]);
        }
      }
    
      // Check if any media elements exist
      if (mediaEls && mediaEls.length > 0) {
    
        for (var _i2 = 0, _e2 = mediaEls.length; _i2 < _e2; _i2++) {
          var mediaEl = mediaEls[_i2];
    
          // Check if element exists, has getAttribute func.
          // IE seems to consider typeof el.getAttribute == 'object' instead of
          // 'function' like expected, at least when loading the player immediately.
          if (mediaEl && mediaEl.getAttribute) {
    
            // Make sure this player hasn't already been set up.
            if (mediaEl.player === undefined) {
              var options = mediaEl.getAttribute('data-setup');
    
              // Check if data-setup attr exists.
              // We only auto-setup if they've added the data-setup attr.
              if (options !== null) {
                // Create new video.js instance.
                videojs$2(mediaEl);
              }
            }
    
            // If getAttribute isn't defined, we need to wait for the DOM.
          } else {
            autoSetupTimeout(1);
            break;
          }
        }
    
        // No videos were found, so keep looping unless page is finished loading.
      } else if (!_windowLoaded) {
        autoSetupTimeout(1);
      }
    };
    
    /**
     * Wait until the page is loaded before running autoSetup. This will be called in
     * autoSetup if `hasLoaded` returns false.
     *
     * @param {number} wait
     *        How long to wait in ms
     *
     * @param {module:videojs} [vjs]
     *        The videojs library function
     */
    function autoSetupTimeout(wait, vjs) {
      if (vjs) {
        videojs$2 = vjs;
      }
    
      window_1.setTimeout(autoSetup, wait);
    }
    
    if (isReal() && document_1.readyState === 'complete') {
      _windowLoaded = true;
    } else {
      /**
       * Listen for the load event on window, and set _windowLoaded to true.
       *
       * @listens load
       */
      one(window_1, 'load', function () {
        _windowLoaded = true;
      });
    }
    
    /**
     * @file stylesheet.js
     * @module stylesheet
     */
    /**
     * Create a DOM syle element given a className for it.
     *
     * @param {string} className
     *        The className to add to the created style element.
     *
     * @return {Element}
     *         The element that was created.
     */
    var createStyleElement = function createStyleElement(className) {
      var style = document_1.createElement('style');
    
      style.className = className;
    
      return style;
    };
    
    /**
     * Add text to a DOM element.
     *
     * @param {Element} el
     *        The Element to add text content to.
     *
     * @param {string} content
     *        The text to add to the element.
     */
    var setTextContent = function setTextContent(el, content) {
      if (el.styleSheet) {
        el.styleSheet.cssText = content;
      } else {
        el.textContent = content;
      }
    };
    
    /**
     * @file fn.js
     * @module fn
     */
    /**
     * Bind (a.k.a proxy or Context). A simple method for changing the context of a function
     * It also stores a unique id on the function so it can be easily removed from events.
     *
     * @param {Mixed} context
     *        The object to bind as scope.
     *
     * @param {Function} fn
     *        The function to be bound to a scope.
     *
     * @param {number} [uid]
     *        An optional unique ID for the function to be set
     *
     * @return {Function}
     *         The new function that will be bound into the context given
     */
    var bind = function bind(context, fn, uid) {
      // Make sure the function has a unique ID
      if (!fn.guid) {
        fn.guid = newGUID();
      }
    
      // Create the new function that changes the context
      var bound = function bound() {
        return fn.apply(context, arguments);
      };
    
      // Allow for the ability to individualize this function
      // Needed in the case where multiple objects might share the same prototype
      // IF both items add an event listener with the same function, then you try to remove just one
      // it will remove both because they both have the same guid.
      // when using this, you need to use the bind method when you remove the listener as well.
      // currently used in text tracks
      bound.guid = uid ? uid + '_' + fn.guid : fn.guid;
    
      return bound;
    };
    
    /**
     * Wraps the given function, `fn`, with a new function that only invokes `fn`
     * at most once per every `wait` milliseconds.
     *
     * @param  {Function} fn
     *         The function to be throttled.
     *
     * @param  {Number}   wait
     *         The number of milliseconds by which to throttle.
     *
     * @return {Function}
     */
    var throttle = function throttle(fn, wait) {
      var last = Date.now();
    
      var throttled = function throttled() {
        var now = Date.now();
    
        if (now - last >= wait) {
          fn.apply(undefined, arguments);
          last = now;
        }
      };
    
      return throttled;
    };
    
    /**
     * @file src/js/event-target.js
     */
    /**
     * `EventTarget` is a class that can have the same API as the DOM `EventTarget`. It
     * adds shorthand functions that wrap around lengthy functions. For example:
     * the `on` function is a wrapper around `addEventListener`.
     *
     * @see [EventTarget Spec]{@link https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget}
     * @class EventTarget
     */
    var EventTarget = function EventTarget() {};
    
    /**
     * A Custom DOM event.
     *
     * @typedef {Object} EventTarget~Event
     * @see [Properties]{@link https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent}
     */
    
    /**
     * All event listeners should follow the following format.
     *
     * @callback EventTarget~EventListener
     * @this {EventTarget}
     *
     * @param {EventTarget~Event} event
     *        the event that triggered this function
     *
     * @param {Object} [hash]
     *        hash of data sent during the event
     */
    
    /**
     * An object containing event names as keys and booleans as values.
     *
     * > NOTE: If an event name is set to a true value here {@link EventTarget#trigger}
     *         will have extra functionality. See that function for more information.
     *
     * @property EventTarget.prototype.allowedEvents_
     * @private
     */
    EventTarget.prototype.allowedEvents_ = {};
    
    /**
     * Adds an `event listener` to an instance of an `EventTarget`. An `event listener` is a
     * function that will get called when an event with a certain name gets triggered.
     *
     * @param {string|string[]} type
     *        An event name or an array of event names.
     *
     * @param {EventTarget~EventListener} fn
     *        The function to call with `EventTarget`s
     */
    EventTarget.prototype.on = function (type, fn) {
      // Remove the addEventListener alias before calling Events.on
      // so we don't get into an infinite type loop
      var ael = this.addEventListener;
    
      this.addEventListener = function () {};
      on(this, type, fn);
      this.addEventListener = ael;
    };
    
    /**
     * An alias of {@link EventTarget#on}. Allows `EventTarget` to mimic
     * the standard DOM API.
     *
     * @function
     * @see {@link EventTarget#on}
     */
    EventTarget.prototype.addEventListener = EventTarget.prototype.on;
    
    /**
     * Removes an `event listener` for a specific event from an instance of `EventTarget`.
     * This makes it so that the `event listener` will no longer get called when the
     * named event happens.
     *
     * @param {string|string[]} type
     *        An event name or an array of event names.
     *
     * @param {EventTarget~EventListener} fn
     *        The function to remove.
     */
    EventTarget.prototype.off = function (type, fn) {
      off(this, type, fn);
    };
    
    /**
     * An alias of {@link EventTarget#off}. Allows `EventTarget` to mimic
     * the standard DOM API.
     *
     * @function
     * @see {@link EventTarget#off}
     */
    EventTarget.prototype.removeEventListener = EventTarget.prototype.off;
    
    /**
     * This function will add an `event listener` that gets triggered only once. After the
     * first trigger it will get removed. This is like adding an `event listener`
     * with {@link EventTarget#on} that calls {@link EventTarget#off} on itself.
     *
     * @param {string|string[]} type
     *        An event name or an array of event names.
     *
     * @param {EventTarget~EventListener} fn
     *        The function to be called once for each event name.
     */
    EventTarget.prototype.one = function (type, fn) {
      // Remove the addEventListener alialing Events.on
      // so we don't get into an infinite type loop
      var ael = this.addEventListener;
    
      this.addEventListener = function () {};
      one(this, type, fn);
      this.addEventListener = ael;
    };
    
    /**
     * This function causes an event to happen. This will then cause any `event listeners`
     * that are waiting for that event, to get called. If there are no `event listeners`
     * for an event then nothing will happen.
     *
     * If the name of the `Event` that is being triggered is in `EventTarget.allowedEvents_`.
     * Trigger will also call the `on` + `uppercaseEventName` function.
     *
     * Example:
     * 'click' is in `EventTarget.allowedEvents_`, so, trigger will attempt to call
     * `onClick` if it exists.
     *
     * @param {string|EventTarget~Event|Object} event
     *        The name of the event, an `Event`, or an object with a key of type set to
     *        an event name.
     */
    EventTarget.prototype.trigger = function (event) {
      var type = event.type || event;
    
      if (typeof event === 'string') {
        event = { type: type };
      }
      event = fixEvent(event);
    
      if (this.allowedEvents_[type] && this['on' + type]) {
        this['on' + type](event);
      }
    
      trigger(this, event);
    };
    
    /**
     * An alias of {@link EventTarget#trigger}. Allows `EventTarget` to mimic
     * the standard DOM API.
     *
     * @function
     * @see {@link EventTarget#trigger}
     */
    EventTarget.prototype.dispatchEvent = EventTarget.prototype.trigger;
    
    /**
     * @file mixins/evented.js
     * @module evented
     */
    /**
     * Returns whether or not an object has had the evented mixin applied.
     *
     * @param  {Object} object
     *         An object to test.
     *
     * @return {boolean}
     *         Whether or not the object appears to be evented.
     */
    var isEvented = function isEvented(object) {
      return object instanceof EventTarget || !!object.eventBusEl_ && ['on', 'one', 'off', 'trigger'].every(function (k) {
        return typeof object[k] === 'function';
      });
    };
    
    /**
     * Whether a value is a valid event type - non-empty string or array.
     *
     * @private
     * @param  {string|Array} type
     *         The type value to test.
     *
     * @return {boolean}
     *         Whether or not the type is a valid event type.
     */
    var isValidEventType = function isValidEventType(type) {
      return (
        // The regex here verifies that the `type` contains at least one non-
        // whitespace character.
        typeof type === 'string' && /\S/.test(type) || Array.isArray(type) && !!type.length
      );
    };
    
    /**
     * Validates a value to determine if it is a valid event target. Throws if not.
     *
     * @private
     * @throws {Error}
     *         If the target does not appear to be a valid event target.
     *
     * @param  {Object} target
     *         The object to test.
     */
    var validateTarget = function validateTarget(target) {
      if (!target.nodeName && !isEvented(target)) {
        throw new Error('Invalid target; must be a DOM node or evented object.');
      }
    };
    
    /**
     * Validates a value to determine if it is a valid event target. Throws if not.
     *
     * @private
     * @throws {Error}
     *         If the type does not appear to be a valid event type.
     *
     * @param  {string|Array} type
     *         The type to test.
     */
    var validateEventType = function validateEventType(type) {
      if (!isValidEventType(type)) {
        throw new Error('Invalid event type; must be a non-empty string or array.');
      }
    };
    
    /**
     * Validates a value to determine if it is a valid listener. Throws if not.
     *
     * @private
     * @throws {Error}
     *         If the listener is not a function.
     *
     * @param  {Function} listener
     *         The listener to test.
     */
    var validateListener = function validateListener(listener) {
      if (typeof listener !== 'function') {
        throw new Error('Invalid listener; must be a function.');
      }
    };
    
    /**
     * Takes an array of arguments given to `on()` or `one()`, validates them, and
     * normalizes them into an object.
     *
     * @private
     * @param  {Object} self
     *         The evented object on which `on()` or `one()` was called. This
     *         object will be bound as the `this` value for the listener.
     *
     * @param  {Array} args
     *         An array of arguments passed to `on()` or `one()`.
     *
     * @return {Object}
     *         An object containing useful values for `on()` or `one()` calls.
     */
    var normalizeListenArgs = function normalizeListenArgs(self, args) {
    
      // If the number of arguments is less than 3, the target is always the
      // evented object itself.
      var isTargetingSelf = args.length < 3 || args[0] === self || args[0] === self.eventBusEl_;
      var target = void 0;
      var type = void 0;
      var listener = void 0;
    
      if (isTargetingSelf) {
        target = self.eventBusEl_;
    
        // Deal with cases where we got 3 arguments, but we are still listening to
        // the evented object itself.
        if (args.length >= 3) {
          args.shift();
        }
    
        type = args[0];
        listener = args[1];
      } else {
        target = args[0];
        type = args[1];
        listener = args[2];
      }
    
      validateTarget(target);
      validateEventType(type);
      validateListener(listener);
    
      listener = bind(self, listener);
    
      return { isTargetingSelf: isTargetingSelf, target: target, type: type, listener: listener };
    };
    
    /**
     * Adds the listener to the event type(s) on the target, normalizing for
     * the type of target.
     *
     * @private
     * @param  {Element|Object} target
     *         A DOM node or evented object.
     *
     * @param  {string} method
     *         The event binding method to use ("on" or "one").
     *
     * @param  {string|Array} type
     *         One or more event type(s).
     *
     * @param  {Function} listener
     *         A listener function.
     */
    var listen = function listen(target, method, type, listener) {
      validateTarget(target);
    
      if (target.nodeName) {
        Events[method](target, type, listener);
      } else {
        target[method](type, listener);
      }
    };
    
    /**
     * Contains methods that provide event capabilites to an object which is passed
     * to {@link module:evented|evented}.
     *
     * @mixin EventedMixin
     */
    var EventedMixin = {
    
      /**
       * Add a listener to an event (or events) on this object or another evented
       * object.
       *
       * @param  {string|Array|Element|Object} targetOrType
       *         If this is a string or array, it represents the event type(s)
       *         that will trigger the listener.
       *
       *         Another evented object can be passed here instead, which will
       *         cause the listener to listen for events on _that_ object.
       *
       *         In either case, the listener's `this` value will be bound to
       *         this object.
       *
       * @param  {string|Array|Function} typeOrListener
       *         If the first argument was a string or array, this should be the
       *         listener function. Otherwise, this is a string or array of event
       *         type(s).
       *
       * @param  {Function} [listener]
       *         If the first argument was another evented object, this will be
       *         the listener function.
       */
      on: function on$$1() {
        var _this = this;
    
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
    
        var _normalizeListenArgs = normalizeListenArgs(this, args),
            isTargetingSelf = _normalizeListenArgs.isTargetingSelf,
            target = _normalizeListenArgs.target,
            type = _normalizeListenArgs.type,
            listener = _normalizeListenArgs.listener;
    
        listen(target, 'on', type, listener);
    
        // If this object is listening to another evented object.
        if (!isTargetingSelf) {
    
          // If this object is disposed, remove the listener.
          var removeListenerOnDispose = function removeListenerOnDispose() {
            return _this.off(target, type, listener);
          };
    
          // Use the same function ID as the listener so we can remove it later it
          // using the ID of the original listener.
          removeListenerOnDispose.guid = listener.guid;
    
          // Add a listener to the target's dispose event as well. This ensures
          // that if the target is disposed BEFORE this object, we remove the
          // removal listener that was just added. Otherwise, we create a memory leak.
          var removeRemoverOnTargetDispose = function removeRemoverOnTargetDispose() {
            return _this.off('dispose', removeListenerOnDispose);
          };
    
          // Use the same function ID as the listener so we can remove it later
          // it using the ID of the original listener.
          removeRemoverOnTargetDispose.guid = listener.guid;
    
          listen(this, 'on', 'dispose', removeListenerOnDispose);
          listen(target, 'on', 'dispose', removeRemoverOnTargetDispose);
        }
      },
    
    
      /**
       * Add a listener to an event (or events) on this object or another evented
       * object. The listener will only be called once and then removed.
       *
       * @param  {string|Array|Element|Object} targetOrType
       *         If this is a string or array, it represents the event type(s)
       *         that will trigger the listener.
       *
       *         Another evented object can be passed here instead, which will
       *         cause the listener to listen for events on _that_ object.
       *
       *         In either case, the listener's `this` value will be bound to
       *         this object.
       *
       * @param  {string|Array|Function} typeOrListener
       *         If the first argument was a string or array, this should be the
       *         listener function. Otherwise, this is a string or array of event
       *         type(s).
       *
       * @param  {Function} [listener]
       *         If the first argument was another evented object, this will be
       *         the listener function.
       */
      one: function one$$1() {
        var _this2 = this;
    
        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
    
        var _normalizeListenArgs2 = normalizeListenArgs(this, args),
            isTargetingSelf = _normalizeListenArgs2.isTargetingSelf,
            target = _normalizeListenArgs2.target,
            type = _normalizeListenArgs2.type,
            listener = _normalizeListenArgs2.listener;
    
        // Targeting this evented object.
    
    
        if (isTargetingSelf) {
          listen(target, 'one', type, listener);
    
          // Targeting another evented object.
        } else {
          var wrapper = function wrapper() {
            for (var _len3 = arguments.length, largs = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
              largs[_key3] = arguments[_key3];
            }
    
            _this2.off(target, type, wrapper);
            listener.apply(null, largs);
          };
    
          // Use the same function ID as the listener so we can remove it later
          // it using the ID of the original listener.
          wrapper.guid = listener.guid;
          listen(target, 'one', type, wrapper);
        }
      },
    
    
      /**
       * Removes listener(s) from event(s) on an evented object.
       *
       * @param  {string|Array|Element|Object} [targetOrType]
       *         If this is a string or array, it represents the event type(s).
       *
       *         Another evented object can be passed here instead, in which case
       *         ALL 3 arguments are _required_.
       *
       * @param  {string|Array|Function} [typeOrListener]
       *         If the first argument was a string or array, this may be the
       *         listener function. Otherwise, this is a string or array of event
       *         type(s).
       *
       * @param  {Function} [listener]
       *         If the first argument was another evented object, this will be
       *         the listener function; otherwise, _all_ listeners bound to the
       *         event type(s) will be removed.
       */
      off: function off$$1(targetOrType, typeOrListener, listener) {
    
        // Targeting this evented object.
        if (!targetOrType || isValidEventType(targetOrType)) {
          off(this.eventBusEl_, targetOrType, typeOrListener);
    
          // Targeting another evented object.
        } else {
          var target = targetOrType;
          var type = typeOrListener;
    
          // Fail fast and in a meaningful way!
          validateTarget(target);
          validateEventType(type);
          validateListener(listener);
    
          // Ensure there's at least a guid, even if the function hasn't been used
          listener = bind(this, listener);
    
          // Remove the dispose listener on this evented object, which was given
          // the same guid as the event listener in on().
          this.off('dispose', listener);
    
          if (target.nodeName) {
            off(target, type, listener);
            off(target, 'dispose', listener);
          } else if (isEvented(target)) {
            target.off(type, listener);
            target.off('dispose', listener);
          }
        }
      },
    
    
      /**
       * Fire an event on this evented object, causing its listeners to be called.
       *
       * @param   {string|Object} event
       *          An event type or an object with a type property.
       *
       * @param   {Object} [hash]
       *          An additional object to pass along to listeners.
       *
       * @returns {boolean}
       *          Whether or not the default behavior was prevented.
       */
      trigger: function trigger$$1(event, hash) {
        return trigger(this.eventBusEl_, event, hash);
      }
    };
    
    /**
     * Applies {@link module:evented~EventedMixin|EventedMixin} to a target object.
     *
     * @param  {Object} target
     *         The object to which to add event methods.
     *
     * @param  {Object} [options={}]
     *         Options for customizing the mixin behavior.
     *
     * @param  {String} [options.eventBusKey]
     *         By default, adds a `eventBusEl_` DOM element to the target object,
     *         which is used as an event bus. If the target object already has a
     *         DOM element that should be used, pass its key here.
     *
     * @return {Object}
     *         The target object.
     */
    function evented(target) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var eventBusKey = options.eventBusKey;
    
      // Set or create the eventBusEl_.
    
      if (eventBusKey) {
        if (!target[eventBusKey].nodeName) {
          throw new Error('The eventBusKey "' + eventBusKey + '" does not refer to an element.');
        }
        target.eventBusEl_ = target[eventBusKey];
      } else {
        target.eventBusEl_ = createEl('span', { className: 'vjs-event-bus' });
      }
    
      assign(target, EventedMixin);
    
      // When any evented object is disposed, it removes all its listeners.
      target.on('dispose', function () {
        return target.off();
      });
    
      return target;
    }
    
    /**
     * @file mixins/stateful.js
     * @module stateful
     */
    /**
     * Contains methods that provide statefulness to an object which is passed
     * to {@link module:stateful}.
     *
     * @mixin StatefulMixin
     */
    var StatefulMixin = {
    
      /**
       * A hash containing arbitrary keys and values representing the state of
       * the object.
       *
       * @type {Object}
       */
      state: {},
    
      /**
       * Set the state of an object by mutating its
       * {@link module:stateful~StatefulMixin.state|state} object in place.
       *
       * @fires   module:stateful~StatefulMixin#statechanged
       * @param   {Object|Function} stateUpdates
       *          A new set of properties to shallow-merge into the plugin state.
       *          Can be a plain object or a function returning a plain object.
       *
       * @returns {Object|undefined}
       *          An object containing changes that occurred. If no changes
       *          occurred, returns `undefined`.
       */
      setState: function setState(stateUpdates) {
        var _this = this;
    
        // Support providing the `stateUpdates` state as a function.
        if (typeof stateUpdates === 'function') {
          stateUpdates = stateUpdates();
        }
    
        var changes = void 0;
    
        each(stateUpdates, function (value, key) {
    
          // Record the change if the value is different from what's in the
          // current state.
          if (_this.state[key] !== value) {
            changes = changes || {};
            changes[key] = {
              from: _this.state[key],
              to: value
            };
          }
    
          _this.state[key] = value;
        });
    
        // Only trigger "statechange" if there were changes AND we have a trigger
        // function. This allows us to not require that the target object be an
        // evented object.
        if (changes && isEvented(this)) {
    
          /**
           * An event triggered on an object that is both
           * {@link module:stateful|stateful} and {@link module:evented|evented}
           * indicating that its state has changed.
           *
           * @event    module:stateful~StatefulMixin#statechanged
           * @type     {Object}
           * @property {Object} changes
           *           A hash containing the properties that were changed and
           *           the values they were changed `from` and `to`.
           */
          this.trigger({
            changes: changes,
            type: 'statechanged'
          });
        }
    
        return changes;
      }
    };
    
    /**
     * Applies {@link module:stateful~StatefulMixin|StatefulMixin} to a target
     * object.
     *
     * If the target object is {@link module:evented|evented} and has a
     * `handleStateChanged` method, that method will be automatically bound to the
     * `statechanged` event on itself.
     *
     * @param   {Object} target
     *          The object to be made stateful.
     *
     * @param   {Object} [defaultState]
     *          A default set of properties to populate the newly-stateful object's
     *          `state` property.
     *
     * @returns {Object}
     *          Returns the `target`.
     */
    function stateful(target, defaultState) {
      assign(target, StatefulMixin);
    
      // This happens after the mixing-in because we need to replace the `state`
      // added in that step.
      target.state = assign({}, target.state, defaultState);
    
      // Auto-bind the `handleStateChanged` method of the target object if it exists.
      if (typeof target.handleStateChanged === 'function' && isEvented(target)) {
        target.on('statechanged', target.handleStateChanged);
      }
    
      return target;
    }
    
    /**
     * @file to-title-case.js
     * @module to-title-case
     */
    
    /**
     * Uppercase the first letter of a string.
     *
     * @param {string} string
     *        String to be uppercased
     *
     * @return {string}
     *         The string with an uppercased first letter
     */
    function toTitleCase(string) {
      if (typeof string !== 'string') {
        return string;
      }
    
      return string.charAt(0).toUpperCase() + string.slice(1);
    }
    
    /**
     * Compares the TitleCase versions of the two strings for equality.
     *
     * @param {string} str1
     *        The first string to compare
     *
     * @param {string} str2
     *        The second string to compare
     *
     * @return {boolean}
     *         Whether the TitleCase versions of the strings are equal
     */
    function titleCaseEquals(str1, str2) {
      return toTitleCase(str1) === toTitleCase(str2);
    }
    
    /**
     * @file merge-options.js
     * @module merge-options
     */
    /**
     * Deep-merge one or more options objects, recursively merging **only** plain
     * object properties.
     *
     * @param   {Object[]} sources
     *          One or more objects to merge into a new object.
     *
     * @returns {Object}
     *          A new object that is the merged result of all sources.
     */
    function mergeOptions() {
      var result = {};
    
      for (var _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++) {
        sources[_key] = arguments[_key];
      }
    
      sources.forEach(function (source) {
        if (!source) {
          return;
        }
    
        each(source, function (value, key) {
          if (!isPlain(value)) {
            result[key] = value;
            return;
          }
    
          if (!isPlain(result[key])) {
            result[key] = {};
          }
    
          result[key] = mergeOptions(result[key], value);
        });
      });
    
      return result;
    }
    
    /**
     * Player Component - Base class for all UI objects
     *
     * @file component.js
     */
    /**
     * Base class for all UI Components.
     * Components are UI objects which represent both a javascript object and an element
     * in the DOM. They can be children of other components, and can have
     * children themselves.
     *
     * Components can also use methods from {@link EventTarget}
     */
    
    var Component = function () {
    
      /**
       * A callback that is called when a component is ready. Does not have any
       * paramters and any callback value will be ignored.
       *
       * @callback Component~ReadyCallback
       * @this Component
       */
    
      /**
       * Creates an instance of this class.
       *
       * @param {Player} player
       *        The `Player` that this class should be attached to.
       *
       * @param {Object} [options]
       *        The key/value store of player options.
       *
       * @param {Object[]} [options.children]
       *        An array of children objects to intialize this component with. Children objects have
       *        a name property that will be used if more than one component of the same type needs to be
       *        added.
       *
       * @param {Component~ReadyCallback} [ready]
       *        Function that gets called when the `Component` is ready.
       */
      function Component(player, options, ready) {
        classCallCheck(this, Component);
    
    
        // The component might be the player itself and we can't pass `this` to super
        if (!player && this.play) {
          this.player_ = player = this; // eslint-disable-line
        } else {
          this.player_ = player;
        }
    
        // Make a copy of prototype.options_ to protect against overriding defaults
        this.options_ = mergeOptions({}, this.options_);
    
        // Updated options with supplied options
        options = this.options_ = mergeOptions(this.options_, options);
    
        // Get ID from options or options element if one is supplied
        this.id_ = options.id || options.el && options.el.id;
    
        // If there was no ID from the options, generate one
        if (!this.id_) {
          // Don't require the player ID function in the case of mock players
          var id = player && player.id && player.id() || 'no_player';
    
          this.id_ = id + '_component_' + newGUID();
        }
    
        this.name_ = options.name || null;
    
        // Create element if one wasn't provided in options
        if (options.el) {
          this.el_ = options.el;
        } else if (options.createEl !== false) {
          this.el_ = this.createEl();
        }
    
        // Make this an evented object and use `el_`, if available, as its event bus
        evented(this, { eventBusKey: this.el_ ? 'el_' : null });
        stateful(this, this.constructor.defaultState);
    
        this.children_ = [];
        this.childIndex_ = {};
        this.childNameIndex_ = {};
    
        // Add any child components in options
        if (options.initChildren !== false) {
          this.initChildren();
        }
    
        this.ready(ready);
        // Don't want to trigger ready here or it will before init is actually
        // finished for all children that run this constructor
    
        if (options.reportTouchActivity !== false) {
          this.enableTouchActivity();
        }
      }
    
      /**
       * Dispose of the `Component` and all child components.
       *
       * @fires Component#dispose
       */
    
    
      Component.prototype.dispose = function dispose() {
    
        /**
         * Triggered when a `Component` is disposed.
         *
         * @event Component#dispose
         * @type {EventTarget~Event}
         *
         * @property {boolean} [bubbles=false]
         *           set to false so that the close event does not
         *           bubble up
         */
        this.trigger({ type: 'dispose', bubbles: false });
    
        // Dispose all children.
        if (this.children_) {
          for (var i = this.children_.length - 1; i >= 0; i--) {
            if (this.children_[i].dispose) {
              this.children_[i].dispose();
            }
          }
        }
    
        // Delete child references
        this.children_ = null;
        this.childIndex_ = null;
        this.childNameIndex_ = null;
    
        if (this.el_) {
          // Remove element from DOM
          if (this.el_.parentNode) {
            this.el_.parentNode.removeChild(this.el_);
          }
    
          removeData(this.el_);
          this.el_ = null;
        }
      };
    
      /**
       * Return the {@link Player} that the `Component` has attached to.
       *
       * @return {Player}
       *         The player that this `Component` has attached to.
       */
    
    
      Component.prototype.player = function player() {
        return this.player_;
      };
    
      /**
       * Deep merge of options objects with new options.
       * > Note: When both `obj` and `options` contain properties whose values are objects.
       *         The two properties get merged using {@link module:mergeOptions}
       *
       * @param {Object} obj
       *        The object that contains new options.
       *
       * @return {Object}
       *         A new object of `this.options_` and `obj` merged together.
       *
       * @deprecated since version 5
       */
    
    
      Component.prototype.options = function options(obj) {
        log$1.warn('this.options() has been deprecated and will be moved to the constructor in 6.0');
    
        if (!obj) {
          return this.options_;
        }
    
        this.options_ = mergeOptions(this.options_, obj);
        return this.options_;
      };
    
      /**
       * Get the `Component`s DOM element
       *
       * @return {Element}
       *         The DOM element for this `Component`.
       */
    
    
      Component.prototype.el = function el() {
        return this.el_;
      };
    
      /**
       * Create the `Component`s DOM element.
       *
       * @param {string} [tagName]
       *        Element's DOM node type. e.g. 'div'
       *
       * @param {Object} [properties]
       *        An object of properties that should be set.
       *
       * @param {Object} [attributes]
       *        An object of attributes that should be set.
       *
       * @return {Element}
       *         The element that gets created.
       */
    
    
      Component.prototype.createEl = function createEl$$1(tagName, properties, attributes) {
        return createEl(tagName, properties, attributes);
      };
    
      /**
       * Localize a string given the string in english.
       *
       * If tokens are provided, it'll try and run a simple token replacement on the provided string.
       * The tokens it loooks for look like `{1}` with the index being 1-indexed into the tokens array.
       *
       * If a `defaultValue` is provided, it'll use that over `string`,
       * if a value isn't found in provided language files.
       * This is useful if you want to have a descriptive key for token replacement
       * but have a succinct localized string and not require `en.json` to be included.
       *
       * Currently, it is used for the progress bar timing.
       * ```js
       * {
       *   "progress bar timing: currentTime={1} duration={2}": "{1} of {2}"
       * }
       * ```
       * It is then used like so:
       * ```js
       * this.localize('progress bar timing: currentTime={1} duration{2}',
       *               [this.player_.currentTime(), this.player_.duration()],
       *               '{1} of {2}');
       * ```
       *
       * Which outputs something like: `01:23 of 24:56`.
       *
       *
       * @param {string} string
       *        The string to localize and the key to lookup in the language files.
       * @param {string[]} [tokens]
       *        If the current item has token replacements, provide the tokens here.
       * @param {string} [defaultValue]
       *        Defaults to `string`. Can be a default value to use for token replacement
       *        if the lookup key is needed to be separate.
       *
       * @return {string}
       *         The localized string or if no localization exists the english string.
       */
    
    
      Component.prototype.localize = function localize(string, tokens) {
        var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : string;
    
        var code = this.player_.language && this.player_.language();
        var languages = this.player_.languages && this.player_.languages();
        var language = languages && languages[code];
        var primaryCode = code && code.split('-')[0];
        var primaryLang = languages && languages[primaryCode];
    
        var localizedString = defaultValue;
    
        if (language && language[string]) {
          localizedString = language[string];
        } else if (primaryLang && primaryLang[string]) {
          localizedString = primaryLang[string];
        }
    
        if (tokens) {
          localizedString = localizedString.replace(/\{(\d+)\}/g, function (match, index) {
            var value = tokens[index - 1];
            var ret = value;
    
            if (typeof value === 'undefined') {
              ret = match;
            }
    
            return ret;
          });
        }
    
        return localizedString;
      };
    
      /**
       * Return the `Component`s DOM element. This is where children get inserted.
       * This will usually be the the same as the element returned in {@link Component#el}.
       *
       * @return {Element}
       *         The content element for this `Component`.
       */
    
    
      Component.prototype.contentEl = function contentEl() {
        return this.contentEl_ || this.el_;
      };
    
      /**
       * Get this `Component`s ID
       *
       * @return {string}
       *         The id of this `Component`
       */
    
    
      Component.prototype.id = function id() {
        return this.id_;
      };
    
      /**
       * Get the `Component`s name. The name gets used to reference the `Component`
       * and is set during registration.
       *
       * @return {string}
       *         The name of this `Component`.
       */
    
    
      Component.prototype.name = function name() {
        return this.name_;
      };
    
      /**
       * Get an array of all child components
       *
       * @return {Array}
       *         The children
       */
    
    
      Component.prototype.children = function children() {
        return this.children_;
      };
    
      /**
       * Returns the child `Component` with the given `id`.
       *
       * @param {string} id
       *        The id of the child `Component` to get.
       *
       * @return {Component|undefined}
       *         The child `Component` with the given `id` or undefined.
       */
    
    
      Component.prototype.getChildById = function getChildById(id) {
        return this.childIndex_[id];
      };
    
      /**
       * Returns the child `Component` with the given `name`.
       *
       * @param {string} name
       *        The name of the child `Component` to get.
       *
       * @return {Component|undefined}
       *         The child `Component` with the given `name` or undefined.
       */
    
    
      Component.prototype.getChild = function getChild(name) {
        if (!name) {
          return;
        }
    
        name = toTitleCase(name);
    
        return this.childNameIndex_[name];
      };
    
      /**
       * Add a child `Component` inside the current `Component`.
       *
       *
       * @param {string|Component} child
       *        The name or instance of a child to add.
       *
       * @param {Object} [options={}]
       *        The key/value store of options that will get passed to children of
       *        the child.
       *
       * @param {number} [index=this.children_.length]
       *        The index to attempt to add a child into.
       *
       * @return {Component}
       *         The `Component` that gets added as a child. When using a string the
       *         `Component` will get created by this process.
       */
    
    
      Component.prototype.addChild = function addChild(child) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.children_.length;
    
        var component = void 0;
        var componentName = void 0;
    
        // If child is a string, create component with options
        if (typeof child === 'string') {
          componentName = toTitleCase(child);
    
          var componentClassName = options.componentClass || componentName;
    
          // Set name through options
          options.name = componentName;
    
          // Create a new object & element for this controls set
          // If there's no .player_, this is a player
          var ComponentClass = Component.getComponent(componentClassName);
    
          if (!ComponentClass) {
            throw new Error('Component ' + componentClassName + ' does not exist');
          }
    
          // data stored directly on the videojs object may be
          // misidentified as a component to retain
          // backwards-compatibility with 4.x. check to make sure the
          // component class can be instantiated.
          if (typeof ComponentClass !== 'function') {
            return null;
          }
    
          component = new ComponentClass(this.player_ || this, options);
    
          // child is a component instance
        } else {
          component = child;
        }
    
        this.children_.splice(index, 0, component);
    
        if (typeof component.id === 'function') {
          this.childIndex_[component.id()] = component;
        }
    
        // If a name wasn't used to create the component, check if we can use the
        // name function of the component
        componentName = componentName || component.name && toTitleCase(component.name());
    
        if (componentName) {
          this.childNameIndex_[componentName] = component;
        }
    
        // Add the UI object's element to the container div (box)
        // Having an element is not required
        if (typeof component.el === 'function' && component.el()) {
          var childNodes = this.contentEl().children;
          var refNode = childNodes[index] || null;
    
          this.contentEl().insertBefore(component.el(), refNode);
        }
    
        // Return so it can stored on parent object if desired.
        return component;
      };
    
      /**
       * Remove a child `Component` from this `Component`s list of children. Also removes
       * the child `Component`s element from this `Component`s element.
       *
       * @param {Component} component
       *        The child `Component` to remove.
       */
    
    
      Component.prototype.removeChild = function removeChild(component) {
        if (typeof component === 'string') {
          component = this.getChild(component);
        }
    
        if (!component || !this.children_) {
          return;
        }
    
        var childFound = false;
    
        for (var i = this.children_.length - 1; i >= 0; i--) {
          if (this.children_[i] === component) {
            childFound = true;
            this.children_.splice(i, 1);
            break;
          }
        }
    
        if (!childFound) {
          return;
        }
    
        this.childIndex_[component.id()] = null;
        this.childNameIndex_[component.name()] = null;
    
        var compEl = component.el();
    
        if (compEl && compEl.parentNode === this.contentEl()) {
          this.contentEl().removeChild(component.el());
        }
      };
    
      /**
       * Add and initialize default child `Component`s based upon options.
       */
    
    
      Component.prototype.initChildren = function initChildren() {
        var _this = this;
    
        var children = this.options_.children;
    
        if (children) {
          // `this` is `parent`
          var parentOptions = this.options_;
    
          var handleAdd = function handleAdd(child) {
            var name = child.name;
            var opts = child.opts;
    
            // Allow options for children to be set at the parent options
            // e.g. videojs(id, { controlBar: false });
            // instead of videojs(id, { children: { controlBar: false });
            if (parentOptions[name] !== undefined) {
              opts = parentOptions[name];
            }
    
            // Allow for disabling default components
            // e.g. options['children']['posterImage'] = false
            if (opts === false) {
              return;
            }
    
            // Allow options to be passed as a simple boolean if no configuration
            // is necessary.
            if (opts === true) {
              opts = {};
            }
    
            // We also want to pass the original player options
            // to each component as well so they don't need to
            // reach back into the player for options later.
            opts.playerOptions = _this.options_.playerOptions;
    
            // Create and add the child component.
            // Add a direct reference to the child by name on the parent instance.
            // If two of the same component are used, different names should be supplied
            // for each
            var newChild = _this.addChild(name, opts);
    
            if (newChild) {
              _this[name] = newChild;
            }
          };
    
          // Allow for an array of children details to passed in the options
          var workingChildren = void 0;
          var Tech = Component.getComponent('Tech');
    
          if (Array.isArray(children)) {
            workingChildren = children;
          } else {
            workingChildren = Object.keys(children);
          }
    
          workingChildren
          // children that are in this.options_ but also in workingChildren  would
          // give us extra children we do not want. So, we want to filter them out.
          .concat(Object.keys(this.options_).filter(function (child) {
            return !workingChildren.some(function (wchild) {
              if (typeof wchild === 'string') {
                return child === wchild;
              }
              return child === wchild.name;
            });
          })).map(function (child) {
            var name = void 0;
            var opts = void 0;
    
            if (typeof child === 'string') {
              name = child;
              opts = children[name] || _this.options_[name] || {};
            } else {
              name = child.name;
              opts = child;
            }
    
            return { name: name, opts: opts };
          }).filter(function (child) {
            // we have to make sure that child.name isn't in the techOrder since
            // techs are registerd as Components but can't aren't compatible
            // See https://github.com/videojs/video.js/issues/2772
            var c = Component.getComponent(child.opts.componentClass || toTitleCase(child.name));
    
            return c && !Tech.isTech(c);
          }).forEach(handleAdd);
        }
      };
    
      /**
       * Builds the default DOM class name. Should be overriden by sub-components.
       *
       * @return {string}
       *         The DOM class name for this object.
       *
       * @abstract
       */
    
    
      Component.prototype.buildCSSClass = function buildCSSClass() {
        // Child classes can include a function that does:
        // return 'CLASS NAME' + this._super();
        return '';
      };
    
      /**
       * Bind a listener to the component's ready state.
       * Different from event listeners in that if the ready event has already happened
       * it will trigger the function immediately.
       *
       * @return {Component}
       *         Returns itself; method can be chained.
       */
    
    
      Component.prototype.ready = function ready(fn) {
        var sync = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    
        if (fn) {
          if (this.isReady_) {
            if (sync) {
              fn.call(this);
            } else {
              // Call the function asynchronously by default for consistency
              this.setTimeout(fn, 1);
            }
          } else {
            this.readyQueue_ = this.readyQueue_ || [];
            this.readyQueue_.push(fn);
          }
        }
      };
    
      /**
       * Trigger all the ready listeners for this `Component`.
       *
       * @fires Component#ready
       */
    
    
      Component.prototype.triggerReady = function triggerReady() {
        this.isReady_ = true;
    
        // Ensure ready is triggerd asynchronously
        this.setTimeout(function () {
          var readyQueue = this.readyQueue_;
    
          // Reset Ready Queue
          this.readyQueue_ = [];
    
          if (readyQueue && readyQueue.length > 0) {
            readyQueue.forEach(function (fn) {
              fn.call(this);
            }, this);
          }
    
          // Allow for using event listeners also
          /**
           * Triggered when a `Component` is ready.
           *
           * @event Component#ready
           * @type {EventTarget~Event}
           */
          this.trigger('ready');
        }, 1);
      };
    
      /**
       * Find a single DOM element matching a `selector`. This can be within the `Component`s
       * `contentEl()` or another custom context.
       *
       * @param {string} selector
       *        A valid CSS selector, which will be passed to `querySelector`.
       *
       * @param {Element|string} [context=this.contentEl()]
       *        A DOM element within which to query. Can also be a selector string in
       *        which case the first matching element will get used as context. If
       *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns
       *        nothing it falls back to `document`.
       *
       * @return {Element|null}
       *         the dom element that was found, or null
       *
       * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)
       */
    
    
      Component.prototype.$ = function $$$1(selector, context) {
        return $(selector, context || this.contentEl());
      };
    
      /**
       * Finds all DOM element matching a `selector`. This can be within the `Component`s
       * `contentEl()` or another custom context.
       *
       * @param {string} selector
       *        A valid CSS selector, which will be passed to `querySelectorAll`.
       *
       * @param {Element|string} [context=this.contentEl()]
       *        A DOM element within which to query. Can also be a selector string in
       *        which case the first matching element will get used as context. If
       *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns
       *        nothing it falls back to `document`.
       *
       * @return {NodeList}
       *         a list of dom elements that were found
       *
       * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)
       */
    
    
      Component.prototype.$$ = function $$$$1(selector, context) {
        return $$(selector, context || this.contentEl());
      };
    
      /**
       * Check if a component's element has a CSS class name.
       *
       * @param {string} classToCheck
       *        CSS class name to check.
       *
       * @return {boolean}
       *         - True if the `Component` has the class.
       *         - False if the `Component` does not have the class`
       */
    
    
      Component.prototype.hasClass = function hasClass$$1(classToCheck) {
        return hasClass(this.el_, classToCheck);
      };
    
      /**
       * Add a CSS class name to the `Component`s element.
       *
       * @param {string} classToAdd
       *        CSS class name to add
       */
    
    
      Component.prototype.addClass = function addClass$$1(classToAdd) {
        addClass(this.el_, classToAdd);
      };
    
      /**
       * Remove a CSS class name from the `Component`s element.
       *
       * @param {string} classToRemove
       *        CSS class name to remove
       */
    
    
      Component.prototype.removeClass = function removeClass$$1(classToRemove) {
        removeClass(this.el_, classToRemove);
      };
    
      /**
       * Add or remove a CSS class name from the component's element.
       * - `classToToggle` gets added when {@link Component#hasClass} would return false.
       * - `classToToggle` gets removed when {@link Component#hasClass} would return true.
       *
       * @param  {string} classToToggle
       *         The class to add or remove based on (@link Component#hasClass}
       *
       * @param  {boolean|Dom~predicate} [predicate]
       *         An {@link Dom~predicate} function or a boolean
       */
    
    
      Component.prototype.toggleClass = function toggleClass$$1(classToToggle, predicate) {
        toggleClass(this.el_, classToToggle, predicate);
      };
    
      /**
       * Show the `Component`s element if it is hidden by removing the
       * 'vjs-hidden' class name from it.
       */
    
    
      Component.prototype.show = function show() {
        this.removeClass('vjs-hidden');
      };
    
      /**
       * Hide the `Component`s element if it is currently showing by adding the
       * 'vjs-hidden` class name to it.
       */
    
    
      Component.prototype.hide = function hide() {
        this.addClass('vjs-hidden');
      };
    
      /**
       * Lock a `Component`s element in its visible state by adding the 'vjs-lock-showing'
       * class name to it. Used during fadeIn/fadeOut.
       *
       * @private
       */
    
    
      Component.prototype.lockShowing = function lockShowing() {
        this.addClass('vjs-lock-showing');
      };
    
      /**
       * Unlock a `Component`s element from its visible state by removing the 'vjs-lock-showing'
       * class name from it. Used during fadeIn/fadeOut.
       *
       * @private
       */
    
    
      Component.prototype.unlockShowing = function unlockShowing() {
        this.removeClass('vjs-lock-showing');
      };
    
      /**
       * Get the value of an attribute on the `Component`s element.
       *
       * @param {string} attribute
       *        Name of the attribute to get the value from.
       *
       * @return {string|null}
       *         - The value of the attribute that was asked for.
       *         - Can be an empty string on some browsers if the attribute does not exist
       *           or has no value
       *         - Most browsers will return null if the attibute does not exist or has
       *           no value.
       *
       * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute}
       */
    
    
      Component.prototype.getAttribute = function getAttribute$$1(attribute) {
        return getAttribute(this.el_, attribute);
      };
    
      /**
       * Set the value of an attribute on the `Component`'s element
       *
       * @param {string} attribute
       *        Name of the attribute to set.
       *
       * @param {string} value
       *        Value to set the attribute to.
       *
       * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute}
       */
    
    
      Component.prototype.setAttribute = function setAttribute$$1(attribute, value) {
        setAttribute(this.el_, attribute, value);
      };
    
      /**
       * Remove an attribute from the `Component`s element.
       *
       * @param {string} attribute
       *        Name of the attribute to remove.
       *
       * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute}
       */
    
    
      Component.prototype.removeAttribute = function removeAttribute$$1(attribute) {
        removeAttribute(this.el_, attribute);
      };
    
      /**
       * Get or set the width of the component based upon the CSS styles.
       * See {@link Component#dimension} for more detailed information.
       *
       * @param {number|string} [num]
       *        The width that you want to set postfixed with '%', 'px' or nothing.
       *
       * @param {boolean} [skipListeners]
       *        Skip the componentresize event trigger
       *
       * @return {number|string}
       *         The width when getting, zero if there is no width. Can be a string
       *           postpixed with '%' or 'px'.
       */
    
    
      Component.prototype.width = function width(num, skipListeners) {
        return this.dimension('width', num, skipListeners);
      };
    
      /**
       * Get or set the height of the component based upon the CSS styles.
       * See {@link Component#dimension} for more detailed information.
       *
       * @param {number|string} [num]
       *        The height that you want to set postfixed with '%', 'px' or nothing.
       *
       * @param {boolean} [skipListeners]
       *        Skip the componentresize event trigger
       *
       * @return {number|string}
       *         The width when getting, zero if there is no width. Can be a string
       *         postpixed with '%' or 'px'.
       */
    
    
      Component.prototype.height = function height(num, skipListeners) {
        return this.dimension('height', num, skipListeners);
      };
    
      /**
       * Set both the width and height of the `Component` element at the same time.
       *
       * @param  {number|string} width
       *         Width to set the `Component`s element to.
       *
       * @param  {number|string} height
       *         Height to set the `Component`s element to.
       */
    
    
      Component.prototype.dimensions = function dimensions(width, height) {
        // Skip componentresize listeners on width for optimization
        this.width(width, true);
        this.height(height);
      };
    
      /**
       * Get or set width or height of the `Component` element. This is the shared code
       * for the {@link Component#width} and {@link Component#height}.
       *
       * Things to know:
       * - If the width or height in an number this will return the number postfixed with 'px'.
       * - If the width/height is a percent this will return the percent postfixed with '%'
       * - Hidden elements have a width of 0 with `window.getComputedStyle`. This function
       *   defaults to the `Component`s `style.width` and falls back to `window.getComputedStyle`.
       *   See [this]{@link http://www.foliotek.com/devblog/getting-the-width-of-a-hidden-element-with-jquery-using-width/}
       *   for more information
       * - If you want the computed style of the component, use {@link Component#currentWidth}
       *   and {@link {Component#currentHeight}
       *
       * @fires Component#componentresize
       *
       * @param {string} widthOrHeight
       8        'width' or 'height'
       *
       * @param  {number|string} [num]
       8         New dimension
       *
       * @param  {boolean} [skipListeners]
       *         Skip componentresize event trigger
       *
       * @return {number}
       *         The dimension when getting or 0 if unset
       */
    
    
      Component.prototype.dimension = function dimension(widthOrHeight, num, skipListeners) {
        if (num !== undefined) {
          // Set to zero if null or literally NaN (NaN !== NaN)
          if (num === null || num !== num) {
            num = 0;
          }
    
          // Check if using css width/height (% or px) and adjust
          if (('' + num).indexOf('%') !== -1 || ('' + num).indexOf('px') !== -1) {
            this.el_.style[widthOrHeight] = num;
          } else if (num === 'auto') {
            this.el_.style[widthOrHeight] = '';
          } else {
            this.el_.style[widthOrHeight] = num + 'px';
          }
    
          // skipListeners allows us to avoid triggering the resize event when setting both width and height
          if (!skipListeners) {
            /**
             * Triggered when a component is resized.
             *
             * @event Component#componentresize
             * @type {EventTarget~Event}
             */
            this.trigger('componentresize');
          }
    
          return;
        }
    
        // Not setting a value, so getting it
        // Make sure element exists
        if (!this.el_) {
          return 0;
        }
    
        // Get dimension value from style
        var val = this.el_.style[widthOrHeight];
        var pxIndex = val.indexOf('px');
    
        if (pxIndex !== -1) {
          // Return the pixel value with no 'px'
          return parseInt(val.slice(0, pxIndex), 10);
        }
    
        // No px so using % or no style was set, so falling back to offsetWidth/height
        // If component has display:none, offset will return 0
        // TODO: handle display:none and no dimension style using px
        return parseInt(this.el_['offset' + toTitleCase(widthOrHeight)], 10);
      };
    
      /**
       * Get the width or the height of the `Component` elements computed style. Uses
       * `window.getComputedStyle`.
       *
       * @param {string} widthOrHeight
       *        A string containing 'width' or 'height'. Whichever one you want to get.
       *
       * @return {number}
       *         The dimension that gets asked for or 0 if nothing was set
       *         for that dimension.
       */
    
    
      Component.prototype.currentDimension = function currentDimension(widthOrHeight) {
        var computedWidthOrHeight = 0;
    
        if (widthOrHeight !== 'width' && widthOrHeight !== 'height') {
          throw new Error('currentDimension only accepts width or height value');
        }
    
        if (typeof window_1.getComputedStyle === 'function') {
          var computedStyle = window_1.getComputedStyle(this.el_);
    
          computedWidthOrHeight = computedStyle.getPropertyValue(widthOrHeight) || computedStyle[widthOrHeight];
        }
    
        // remove 'px' from variable and parse as integer
        computedWidthOrHeight = parseFloat(computedWidthOrHeight);
    
        // if the computed value is still 0, it's possible that the browser is lying
        // and we want to check the offset values.
        // This code also runs on IE8 and wherever getComputedStyle doesn't exist.
        if (computedWidthOrHeight === 0) {
          var rule = 'offset' + toTitleCase(widthOrHeight);
    
          computedWidthOrHeight = this.el_[rule];
        }
    
        return computedWidthOrHeight;
      };
    
      /**
       * An object that contains width and height values of the `Component`s
       * computed style. Uses `window.getComputedStyle`.
       *
       * @typedef {Object} Component~DimensionObject
       *
       * @property {number} width
       *           The width of the `Component`s computed style.
       *
       * @property {number} height
       *           The height of the `Component`s computed style.
       */
    
      /**
       * Get an object that contains width and height values of the `Component`s
       * computed style.
       *
       * @return {Component~DimensionObject}
       *         The dimensions of the components element
       */
    
    
      Component.prototype.currentDimensions = function currentDimensions() {
        return {
          width: this.currentDimension('width'),
          height: this.currentDimension('height')
        };
      };
    
      /**
       * Get the width of the `Component`s computed style. Uses `window.getComputedStyle`.
       *
       * @return {number} width
       *           The width of the `Component`s computed style.
       */
    
    
      Component.prototype.currentWidth = function currentWidth() {
        return this.currentDimension('width');
      };
    
      /**
       * Get the height of the `Component`s computed style. Uses `window.getComputedStyle`.
       *
       * @return {number} height
       *           The height of the `Component`s computed style.
       */
    
    
      Component.prototype.currentHeight = function currentHeight() {
        return this.currentDimension('height');
      };
    
      /**
       * Set the focus to this component
       */
    
    
      Component.prototype.focus = function focus() {
        this.el_.focus();
      };
    
      /**
       * Remove the focus from this component
       */
    
    
      Component.prototype.blur = function blur() {
        this.el_.blur();
      };
    
      /**
       * Emit a 'tap' events when touch event support gets detected. This gets used to
       * support toggling the controls through a tap on the video. They get enabled
       * because every sub-component would have extra overhead otherwise.
       *
       * @private
       * @fires Component#tap
       * @listens Component#touchstart
       * @listens Component#touchmove
       * @listens Component#touchleave
       * @listens Component#touchcancel
       * @listens Component#touchend
        */
    
    
      Component.prototype.emitTapEvents = function emitTapEvents() {
        // Track the start time so we can determine how long the touch lasted
        var touchStart = 0;
        var firstTouch = null;
    
        // Maximum movement allowed during a touch event to still be considered a tap
        // Other popular libs use anywhere from 2 (hammer.js) to 15,
        // so 10 seems like a nice, round number.
        var tapMovementThreshold = 10;
    
        // The maximum length a touch can be while still being considered a tap
        var touchTimeThreshold = 200;
    
        var couldBeTap = void 0;
    
        this.on('touchstart', function (event) {
          // If more than one finger, don't consider treating this as a click
          if (event.touches.length === 1) {
            // Copy pageX/pageY from the object
            firstTouch = {
              pageX: event.touches[0].pageX,
              pageY: event.touches[0].pageY
            };
            // Record start time so we can detect a tap vs. "touch and hold"
            touchStart = new Date().getTime();
            // Reset couldBeTap tracking
            couldBeTap = true;
          }
        });
    
        this.on('touchmove', function (event) {
          // If more than one finger, don't consider treating this as a click
          if (event.touches.length > 1) {
            couldBeTap = false;
          } else if (firstTouch) {
            // Some devices will throw touchmoves for all but the slightest of taps.
            // So, if we moved only a small distance, this could still be a tap
            var xdiff = event.touches[0].pageX - firstTouch.pageX;
            var ydiff = event.touches[0].pageY - firstTouch.pageY;
            var touchDistance = Math.sqrt(xdiff * xdiff + ydiff * ydiff);
    
            if (touchDistance > tapMovementThreshold) {
              couldBeTap = false;
            }
          }
        });
    
        var noTap = function noTap() {
          couldBeTap = false;
        };
    
        // TODO: Listen to the original target. http://youtu.be/DujfpXOKUp8?t=13m8s
        this.on('touchleave', noTap);
        this.on('touchcancel', noTap);
    
        // When the touch ends, measure how long it took and trigger the appropriate
        // event
        this.on('touchend', function (event) {
          firstTouch = null;
          // Proceed only if the touchmove/leave/cancel event didn't happen
          if (couldBeTap === true) {
            // Measure how long the touch lasted
            var touchTime = new Date().getTime() - touchStart;
    
            // Make sure the touch was less than the threshold to be considered a tap
            if (touchTime < touchTimeThreshold) {
              // Don't let browser turn this into a click
              event.preventDefault();
              /**
               * Triggered when a `Component` is tapped.
               *
               * @event Component#tap
               * @type {EventTarget~Event}
               */
              this.trigger('tap');
              // It may be good to copy the touchend event object and change the
              // type to tap, if the other event properties aren't exact after
              // Events.fixEvent runs (e.g. event.target)
            }
          }
        });
      };
    
      /**
       * This function reports user activity whenever touch events happen. This can get
       * turned off by any sub-components that wants touch events to act another way.
       *
       * Report user touch activity when touch events occur. User activity gets used to
       * determine when controls should show/hide. It is simple when it comes to mouse
       * events, because any mouse event should show the controls. So we capture mouse
       * events that bubble up to the player and report activity when that happens.
       * With touch events it isn't as easy as `touchstart` and `touchend` toggle player
       * controls. So touch events can't help us at the player level either.
       *
       * User activity gets checked asynchronously. So what could happen is a tap event
       * on the video turns the controls off. Then the `touchend` event bubbles up to
       * the player. Which, if it reported user activity, would turn the controls right
       * back on. We also don't want to completely block touch events from bubbling up.
       * Furthermore a `touchmove` event and anything other than a tap, should not turn
       * controls back on.
       *
       * @listens Component#touchstart
       * @listens Component#touchmove
       * @listens Component#touchend
       * @listens Component#touchcancel
       */
    
    
      Component.prototype.enableTouchActivity = function enableTouchActivity() {
        // Don't continue if the root player doesn't support reporting user activity
        if (!this.player() || !this.player().reportUserActivity) {
          return;
        }
    
        // listener for reporting that the user is active
        var report = bind(this.player(), this.player().reportUserActivity);
    
        var touchHolding = void 0;
    
        this.on('touchstart', function () {
          report();
          // For as long as the they are touching the device or have their mouse down,
          // we consider them active even if they're not moving their finger or mouse.
          // So we want to continue to update that they are active
          this.clearInterval(touchHolding);
          // report at the same interval as activityCheck
          touchHolding = this.setInterval(report, 250);
        });
    
        var touchEnd = function touchEnd(event) {
          report();
          // stop the interval that maintains activity if the touch is holding
          this.clearInterval(touchHolding);
        };
    
        this.on('touchmove', report);
        this.on('touchend', touchEnd);
        this.on('touchcancel', touchEnd);
      };
    
      /**
       * A callback that has no parameters and is bound into `Component`s context.
       *
       * @callback Component~GenericCallback
       * @this Component
       */
    
      /**
       * Creates a function that runs after an `x` millisecond timeout. This function is a
       * wrapper around `window.setTimeout`. There are a few reasons to use this one
       * instead though:
       * 1. It gets cleared via  {@link Component#clearTimeout} when
       *    {@link Component#dispose} gets called.
       * 2. The function callback will gets turned into a {@link Component~GenericCallback}
       *
       * > Note: You can use `window.clearTimeout` on the id returned by this function. This
       *         will cause its dispose listener not to get cleaned up! Please use
       *         {@link Component#clearTimeout} or {@link Component#dispose}.
       *
       * @param {Component~GenericCallback} fn
       *        The function that will be run after `timeout`.
       *
       * @param {number} timeout
       *        Timeout in milliseconds to delay before executing the specified function.
       *
       * @return {number}
       *         Returns a timeout ID that gets used to identify the timeout. It can also
       *         get used in {@link Component#clearTimeout} to clear the timeout that
       *         was set.
       *
       * @listens Component#dispose
       * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout}
       */
    
    
      Component.prototype.setTimeout = function setTimeout(fn, timeout) {
        fn = bind(this, fn);
    
        var timeoutId = window_1.setTimeout(fn, timeout);
        var disposeFn = function disposeFn() {
          this.clearTimeout(timeoutId);
        };
    
        disposeFn.guid = 'vjs-timeout-' + timeoutId;
    
        this.on('dispose', disposeFn);
    
        return timeoutId;
      };
    
      /**
       * Clears a timeout that gets created via `window.setTimeout` or
       * {@link Component#setTimeout}. If you set a timeout via {@link Component#setTimeout}
       * use this function instead of `window.clearTimout`. If you don't your dispose
       * listener will not get cleaned up until {@link Component#dispose}!
       *
       * @param {number} timeoutId
       *        The id of the timeout to clear. The return value of
       *        {@link Component#setTimeout} or `window.setTimeout`.
       *
       * @return {number}
       *         Returns the timeout id that was cleared.
       *
       * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearTimeout}
       */
    
    
      Component.prototype.clearTimeout = function clearTimeout(timeoutId) {
        window_1.clearTimeout(timeoutId);
    
        var disposeFn = function disposeFn() {};
    
        disposeFn.guid = 'vjs-timeout-' + timeoutId;
    
        this.off('dispose', disposeFn);
    
        return timeoutId;
      };
    
      /**
       * Creates a function that gets run every `x` milliseconds. This function is a wrapper
       * around `window.setInterval`. There are a few reasons to use this one instead though.
       * 1. It gets cleared via  {@link Component#clearInterval} when
       *    {@link Component#dispose} gets called.
       * 2. The function callback will be a {@link Component~GenericCallback}
       *
       * @param {Component~GenericCallback} fn
       *        The function to run every `x` seconds.
       *
       * @param {number} interval
       *        Execute the specified function every `x` milliseconds.
       *
       * @return {number}
       *         Returns an id that can be used to identify the interval. It can also be be used in
       *         {@link Component#clearInterval} to clear the interval.
       *
       * @listens Component#dispose
       * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval}
       */
    
    
      Component.prototype.setInterval = function setInterval(fn, interval) {
        fn = bind(this, fn);
    
        var intervalId = window_1.setInterval(fn, interval);
    
        var disposeFn = function disposeFn() {
          this.clearInterval(intervalId);
        };
    
        disposeFn.guid = 'vjs-interval-' + intervalId;
    
        this.on('dispose', disposeFn);
    
        return intervalId;
      };
    
      /**
       * Clears an interval that gets created via `window.setInterval` or
       * {@link Component#setInterval}. If you set an inteval via {@link Component#setInterval}
       * use this function instead of `window.clearInterval`. If you don't your dispose
       * listener will not get cleaned up until {@link Component#dispose}!
       *
       * @param {number} intervalId
       *        The id of the interval to clear. The return value of
       *        {@link Component#setInterval} or `window.setInterval`.
       *
       * @return {number}
       *         Returns the interval id that was cleared.
       *
       * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval}
       */
    
    
      Component.prototype.clearInterval = function clearInterval(intervalId) {
        window_1.clearInterval(intervalId);
    
        var disposeFn = function disposeFn() {};
    
        disposeFn.guid = 'vjs-interval-' + intervalId;
    
        this.off('dispose', disposeFn);
    
        return intervalId;
      };
    
      /**
       * Queues up a callback to be passed to requestAnimationFrame (rAF), but
       * with a few extra bonuses:
       *
       * - Supports browsers that do not support rAF by falling back to
       *   {@link Component#setTimeout}.
       *
       * - The callback is turned into a {@link Component~GenericCallback} (i.e.
       *   bound to the component).
       *
       * - Automatic cancellation of the rAF callback is handled if the component
       *   is disposed before it is called.
       *
       * @param  {Component~GenericCallback} fn
       *         A function that will be bound to this component and executed just
       *         before the browser's next repaint.
       *
       * @return {number}
       *         Returns an rAF ID that gets used to identify the timeout. It can
       *         also be used in {@link Component#cancelAnimationFrame} to cancel
       *         the animation frame callback.
       *
       * @listens Component#dispose
       * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame}
       */
    
    
      Component.prototype.requestAnimationFrame = function requestAnimationFrame(fn) {
        var _this2 = this;
    
        if (this.supportsRaf_) {
          fn = bind(this, fn);
    
          var id = window_1.requestAnimationFrame(fn);
          var disposeFn = function disposeFn() {
            return _this2.cancelAnimationFrame(id);
          };
    
          disposeFn.guid = 'vjs-raf-' + id;
          this.on('dispose', disposeFn);
    
          return id;
        }
    
        // Fall back to using a timer.
        return this.setTimeout(fn, 1000 / 60);
      };
    
      /**
       * Cancels a queued callback passed to {@link Component#requestAnimationFrame}
       * (rAF).
       *
       * If you queue an rAF callback via {@link Component#requestAnimationFrame},
       * use this function instead of `window.cancelAnimationFrame`. If you don't,
       * your dispose listener will not get cleaned up until {@link Component#dispose}!
       *
       * @param {number} id
       *        The rAF ID to clear. The return value of {@link Component#requestAnimationFrame}.
       *
       * @return {number}
       *         Returns the rAF ID that was cleared.
       *
       * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/cancelAnimationFrame}
       */
    
    
      Component.prototype.cancelAnimationFrame = function cancelAnimationFrame(id) {
        if (this.supportsRaf_) {
          window_1.cancelAnimationFrame(id);
    
          var disposeFn = function disposeFn() {};
    
          disposeFn.guid = 'vjs-raf-' + id;
    
          this.off('dispose', disposeFn);
    
          return id;
        }
    
        // Fall back to using a timer.
        return this.clearTimeout(id);
      };
    
      /**
       * Register a `Component` with `videojs` given the name and the component.
       *
       * > NOTE: {@link Tech}s should not be registered as a `Component`. {@link Tech}s
       *         should be registered using {@link Tech.registerTech} or
       *         {@link videojs:videojs.registerTech}.
       *
       * > NOTE: This function can also be seen on videojs as
       *         {@link videojs:videojs.registerComponent}.
       *
       * @param {string} name
       *        The name of the `Component` to register.
       *
       * @param {Component} ComponentToRegister
       *        The `Component` class to register.
       *
       * @return {Component}
       *         The `Component` that was registered.
       */
    
    
      Component.registerComponent = function registerComponent(name, ComponentToRegister) {
        if (typeof name !== 'string' || !name) {
          throw new Error('Illegal component name, "' + name + '"; must be a non-empty string.');
        }
    
        var Tech = Component.getComponent('Tech');
    
        // We need to make sure this check is only done if Tech has been registered.
        var isTech = Tech && Tech.isTech(ComponentToRegister);
        var isComp = Component === ComponentToRegister || Component.prototype.isPrototypeOf(ComponentToRegister.prototype);
    
        if (isTech || !isComp) {
          var reason = void 0;
    
          if (isTech) {
            reason = 'techs must be registered using Tech.registerTech()';
          } else {
            reason = 'must be a Component subclass';
          }
    
          throw new Error('Illegal component, "' + name + '"; ' + reason + '.');
        }
    
        name = toTitleCase(name);
    
        if (!Component.components_) {
          Component.components_ = {};
        }
    
        var Player = Component.getComponent('Player');
    
        if (name === 'Player' && Player && Player.players) {
          var players = Player.players;
          var playerNames = Object.keys(players);
    
          // If we have players that were disposed, then their name will still be
          // in Players.players. So, we must loop through and verify that the value
          // for each item is not null. This allows registration of the Player component
          // after all players have been disposed or before any were created.
          if (players && playerNames.length > 0 && playerNames.map(function (pname) {
            return players[pname];
          }).every(Boolean)) {
            throw new Error('Can not register Player component after player has been created.');
          }
        }
    
        Component.components_[name] = ComponentToRegister;
    
        return ComponentToRegister;
      };
    
      /**
       * Get a `Component` based on the name it was registered with.
       *
       * @param {string} name
       *        The Name of the component to get.
       *
       * @return {Component}
       *         The `Component` that got registered under the given name.
       *
       * @deprecated In `videojs` 6 this will not return `Component`s that were not
       *             registered using {@link Component.registerComponent}. Currently we
       *             check the global `videojs` object for a `Component` name and
       *             return that if it exists.
       */
    
    
      Component.getComponent = function getComponent(name) {
        if (!name) {
          return;
        }
    
        name = toTitleCase(name);
    
        if (Component.components_ && Component.components_[name]) {
          return Component.components_[name];
        }
      };
    
      return Component;
    }();
    
    /**
     * Whether or not this component supports `requestAnimationFrame`.
     *
     * This is exposed primarily for testing purposes.
     *
     * @private
     * @type {Boolean}
     */
    
    
    Component.prototype.supportsRaf_ = typeof window_1.requestAnimationFrame === 'function' && typeof window_1.cancelAnimationFrame === 'function';
    
    Component.registerComponent('Component', Component);
    
    /**
     * @file time-ranges.js
     * @module time-ranges
     */
    
    /**
     * Returns the time for the specified index at the start or end
     * of a TimeRange object.
     *
     * @function time-ranges:indexFunction
     *
     * @param {number} [index=0]
     *        The range number to return the time for.
     *
     * @return {number}
     *         The time that offset at the specified index.
     *
     * @depricated index must be set to a value, in the future this will throw an error.
     */
    
    /**
     * An object that contains ranges of time for various reasons.
     *
     * @typedef {Object} TimeRange
     *
     * @property {number} length
     *           The number of time ranges represented by this Object
     *
     * @property {time-ranges:indexFunction} start
     *           Returns the time offset at which a specified time range begins.
     *
     * @property {time-ranges:indexFunction} end
     *           Returns the time offset at which a specified time range begins.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges
     */
    
    /**
     * Check if any of the time ranges are over the maximum index.
     *
     * @param {string} fnName
     *        The function name to use for logging
     *
     * @param {number} index
     *        The index to check
     *
     * @param {number} maxIndex
     *        The maximum possible index
     *
     * @throws {Error} if the timeRanges provided are over the maxIndex
     */
    function rangeCheck(fnName, index, maxIndex) {
      if (typeof index !== 'number' || index < 0 || index > maxIndex) {
        throw new Error('Failed to execute \'' + fnName + '\' on \'TimeRanges\': The index provided (' + index + ') is non-numeric or out of bounds (0-' + maxIndex + ').');
      }
    }
    
    /**
     * Check if any of the time ranges are over the maximum index.
     *
     * @param {string} fnName
     *        The function name to use for logging
     *
     * @param {string} valueIndex
     *        The proprety that should be used to get the time. should be 'start' or 'end'
     *
     * @param {Array} ranges
     *        An array of time ranges
     *
     * @param {Array} [rangeIndex=0]
     *        The index to start the search at
     *
     * @return {number}
     *         The time that offset at the specified index.
     *
     *
     * @depricated rangeIndex must be set to a value, in the future this will throw an error.
     * @throws {Error} if rangeIndex is more than the length of ranges
     */
    function getRange(fnName, valueIndex, ranges, rangeIndex) {
      rangeCheck(fnName, rangeIndex, ranges.length - 1);
      return ranges[rangeIndex][valueIndex];
    }
    
    /**
     * Create a time range object givent ranges of time.
     *
     * @param {Array} [ranges]
     *        An array of time ranges.
     */
    function createTimeRangesObj(ranges) {
      if (ranges === undefined || ranges.length === 0) {
        return {
          length: 0,
          start: function start() {
            throw new Error('This TimeRanges object is empty');
          },
          end: function end() {
            throw new Error('This TimeRanges object is empty');
          }
        };
      }
      return {
        length: ranges.length,
        start: getRange.bind(null, 'start', 0, ranges),
        end: getRange.bind(null, 'end', 1, ranges)
      };
    }
    
    /**
     * Should create a fake `TimeRange` object which mimics an HTML5 time range instance.
     *
     * @param {number|Array} start
     *        The start of a single range or an array of ranges
     *
     * @param {number} end
     *        The end of a single range.
     *
     * @private
     */
    function createTimeRanges(start, end) {
      if (Array.isArray(start)) {
        return createTimeRangesObj(start);
      } else if (start === undefined || end === undefined) {
        return createTimeRangesObj();
      }
      return createTimeRangesObj([[start, end]]);
    }
    
    /**
     * @file buffer.js
     * @module buffer
     */
    /**
     * Compute the percentage of the media that has been buffered.
     *
     * @param {TimeRange} buffered
     *        The current `TimeRange` object representing buffered time ranges
     *
     * @param {number} duration
     *        Total duration of the media
     *
     * @return {number}
     *         Percent buffered of the total duration in decimal form.
     */
    function bufferedPercent(buffered, duration) {
      var bufferedDuration = 0;
      var start = void 0;
      var end = void 0;
    
      if (!duration) {
        return 0;
      }
    
      if (!buffered || !buffered.length) {
        buffered = createTimeRanges(0, 0);
      }
    
      for (var i = 0; i < buffered.length; i++) {
        start = buffered.start(i);
        end = buffered.end(i);
    
        // buffered end can be bigger than duration by a very small fraction
        if (end > duration) {
          end = duration;
        }
    
        bufferedDuration += end - start;
      }
    
      return bufferedDuration / duration;
    }
    
    /**
     * @file fullscreen-api.js
     * @module fullscreen-api
     * @private
     */
    /**
     * Store the browser-specific methods for the fullscreen API.
     *
     * @type {Object}
     * @see [Specification]{@link https://fullscreen.spec.whatwg.org}
     * @see [Map Approach From Screenfull.js]{@link https://github.com/sindresorhus/screenfull.js}
     */
    var FullscreenApi = {};
    
    // browser API methods
    var apiMap = [['requestFullscreen', 'exitFullscreen', 'fullscreenElement', 'fullscreenEnabled', 'fullscreenchange', 'fullscreenerror'],
    // WebKit
    ['webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitFullscreenElement', 'webkitFullscreenEnabled', 'webkitfullscreenchange', 'webkitfullscreenerror'],
    // Old WebKit (Safari 5.1)
    ['webkitRequestFullScreen', 'webkitCancelFullScreen', 'webkitCurrentFullScreenElement', 'webkitCancelFullScreen', 'webkitfullscreenchange', 'webkitfullscreenerror'],
    // Mozilla
    ['mozRequestFullScreen', 'mozCancelFullScreen', 'mozFullScreenElement', 'mozFullScreenEnabled', 'mozfullscreenchange', 'mozfullscreenerror'],
    // Microsoft
    ['msRequestFullscreen', 'msExitFullscreen', 'msFullscreenElement', 'msFullscreenEnabled', 'MSFullscreenChange', 'MSFullscreenError']];
    
    var specApi = apiMap[0];
    var browserApi = void 0;
    
    // determine the supported set of functions
    for (var i = 0; i < apiMap.length; i++) {
      // check for exitFullscreen function
      if (apiMap[i][1] in document_1) {
        browserApi = apiMap[i];
        break;
      }
    }
    
    // map the browser API names to the spec API names
    if (browserApi) {
      for (var _i = 0; _i < browserApi.length; _i++) {
        FullscreenApi[specApi[_i]] = browserApi[_i];
      }
    }
    
    /**
     * @file media-error.js
     */
    /**
     * A Custom `MediaError` class which mimics the standard HTML5 `MediaError` class.
     *
     * @param {number|string|Object|MediaError} value
     *        This can be of multiple types:
     *        - number: should be a standard error code
     *        - string: an error message (the code will be 0)
     *        - Object: arbitrary properties
     *        - `MediaError` (native): used to populate a video.js `MediaError` object
     *        - `MediaError` (video.js): will return itself if it's already a
     *          video.js `MediaError` object.
     *
     * @see [MediaError Spec]{@link https://dev.w3.org/html5/spec-author-view/video.html#mediaerror}
     * @see [Encrypted MediaError Spec]{@link https://www.w3.org/TR/2013/WD-encrypted-media-20130510/#error-codes}
     *
     * @class MediaError
     */
    function MediaError(value) {
    
      // Allow redundant calls to this constructor to avoid having `instanceof`
      // checks peppered around the code.
      if (value instanceof MediaError) {
        return value;
      }
    
      if (typeof value === 'number') {
        this.code = value;
      } else if (typeof value === 'string') {
        // default code is zero, so this is a custom error
        this.message = value;
      } else if (isObject(value)) {
    
        // We assign the `code` property manually because native `MediaError` objects
        // do not expose it as an own/enumerable property of the object.
        if (typeof value.code === 'number') {
          this.code = value.code;
        }
    
        assign(this, value);
      }
    
      if (!this.message) {
        this.message = MediaError.defaultMessages[this.code] || '';
      }
    }
    
    /**
     * The error code that refers two one of the defined `MediaError` types
     *
     * @type {Number}
     */
    MediaError.prototype.code = 0;
    
    /**
     * An optional message that to show with the error. Message is not part of the HTML5
     * video spec but allows for more informative custom errors.
     *
     * @type {String}
     */
    MediaError.prototype.message = '';
    
    /**
     * An optional status code that can be set by plugins to allow even more detail about
     * the error. For example a plugin might provide a specific HTTP status code and an
     * error message for that code. Then when the plugin gets that error this class will
     * know how to display an error message for it. This allows a custom message to show
     * up on the `Player` error overlay.
     *
     * @type {Array}
     */
    MediaError.prototype.status = null;
    
    /**
     * Errors indexed by the W3C standard. The order **CANNOT CHANGE**! See the
     * specification listed under {@link MediaError} for more information.
     *
     * @enum {array}
     * @readonly
     * @property {string} 0 - MEDIA_ERR_CUSTOM
     * @property {string} 1 - MEDIA_ERR_CUSTOM
     * @property {string} 2 - MEDIA_ERR_ABORTED
     * @property {string} 3 - MEDIA_ERR_NETWORK
     * @property {string} 4 - MEDIA_ERR_SRC_NOT_SUPPORTED
     * @property {string} 5 - MEDIA_ERR_ENCRYPTED
     */
    MediaError.errorTypes = ['MEDIA_ERR_CUSTOM', 'MEDIA_ERR_ABORTED', 'MEDIA_ERR_NETWORK', 'MEDIA_ERR_DECODE', 'MEDIA_ERR_SRC_NOT_SUPPORTED', 'MEDIA_ERR_ENCRYPTED'];
    
    /**
     * The default `MediaError` messages based on the {@link MediaError.errorTypes}.
     *
     * @type {Array}
     * @constant
     */
    MediaError.defaultMessages = {
      1: 'You aborted the media playback',
      2: 'A network error caused the media download to fail part-way.',
      3: 'The media playback was aborted due to a corruption problem or because the media used features your browser did not support.',
      4: 'The media could not be loaded, either because the server or network failed or because the format is not supported.',
      5: 'The media is encrypted and we do not have the keys to decrypt it.'
    };
    
    // Add types as properties on MediaError
    // e.g. MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED = 4;
    for (var errNum = 0; errNum < MediaError.errorTypes.length; errNum++) {
      MediaError[MediaError.errorTypes[errNum]] = errNum;
      // values should be accessible on both the class and instance
      MediaError.prototype[MediaError.errorTypes[errNum]] = errNum;
    }
    
    var tuple = SafeParseTuple;
    
    function SafeParseTuple(obj, reviver) {
        var json;
        var error = null;
    
        try {
            json = JSON.parse(obj, reviver);
        } catch (err) {
            error = err;
        }
    
        return [error, json]
    }
    
    /**
     * @file text-track-list-converter.js Utilities for capturing text track state and
     * re-creating tracks based on a capture.
     *
     * @module text-track-list-converter
     */
    
    /**
     * Examine a single {@link TextTrack} and return a JSON-compatible javascript object that
     * represents the {@link TextTrack}'s state.
     *
     * @param {TextTrack} track
     *        The text track to query.
     *
     * @return {Object}
     *         A serializable javascript representation of the TextTrack.
     * @private
     */
    var trackToJson_ = function trackToJson_(track) {
      var ret = ['kind', 'label', 'language', 'id', 'inBandMetadataTrackDispatchType', 'mode', 'src'].reduce(function (acc, prop, i) {
    
        if (track[prop]) {
          acc[prop] = track[prop];
        }
    
        return acc;
      }, {
        cues: track.cues && Array.prototype.map.call(track.cues, function (cue) {
          return {
            startTime: cue.startTime,
            endTime: cue.endTime,
            text: cue.text,
            id: cue.id
          };
        })
      });
    
      return ret;
    };
    
    /**
     * Examine a {@link Tech} and return a JSON-compatible javascript array that represents the
     * state of all {@link TextTrack}s currently configured. The return array is compatible with
     * {@link text-track-list-converter:jsonToTextTracks}.
     *
     * @param {Tech} tech
     *        The tech object to query
     *
     * @return {Array}
     *         A serializable javascript representation of the {@link Tech}s
     *         {@link TextTrackList}.
     */
    var textTracksToJson = function textTracksToJson(tech) {
    
      var trackEls = tech.$$('track');
    
      var trackObjs = Array.prototype.map.call(trackEls, function (t) {
        return t.track;
      });
      var tracks = Array.prototype.map.call(trackEls, function (trackEl) {
        var json = trackToJson_(trackEl.track);
    
        if (trackEl.src) {
          json.src = trackEl.src;
        }
        return json;
      });
    
      return tracks.concat(Array.prototype.filter.call(tech.textTracks(), function (track) {
        return trackObjs.indexOf(track) === -1;
      }).map(trackToJson_));
    };
    
    /**
     * Create a set of remote {@link TextTrack}s on a {@link Tech} based on an array of javascript
     * object {@link TextTrack} representations.
     *
     * @param {Array} json
     *        An array of `TextTrack` representation objects, like those that would be
     *        produced by `textTracksToJson`.
     *
     * @param {Tech} tech
     *        The `Tech` to create the `TextTrack`s on.
     */
    var jsonToTextTracks = function jsonToTextTracks(json, tech) {
      json.forEach(function (track) {
        var addedTrack = tech.addRemoteTextTrack(track).track;
    
        if (!track.src && track.cues) {
          track.cues.forEach(function (cue) {
            return addedTrack.addCue(cue);
          });
        }
      });
    
      return tech.textTracks();
    };
    
    var textTrackConverter = { textTracksToJson: textTracksToJson, jsonToTextTracks: jsonToTextTracks, trackToJson_: trackToJson_ };
    
    /**
     * @file modal-dialog.js
     */
    var MODAL_CLASS_NAME = 'vjs-modal-dialog';
    var ESC = 27;
    
    /**
     * The `ModalDialog` displays over the video and its controls, which blocks
     * interaction with the player until it is closed.
     *
     * Modal dialogs include a "Close" button and will close when that button
     * is activated - or when ESC is pressed anywhere.
     *
     * @extends Component
     */
    
    var ModalDialog = function (_Component) {
      inherits(ModalDialog, _Component);
    
      /**
       * Create an instance of this class.
       *
       * @param {Player} player
       *        The `Player` that this class should be attached to.
       *
       * @param {Object} [options]
       *        The key/value store of player options.
       *
       * @param {Mixed} [options.content=undefined]
       *        Provide customized content for this modal.
       *
       * @param {string} [options.description]
       *        A text description for the modal, primarily for accessibility.
       *
       * @param {boolean} [options.fillAlways=false]
       *        Normally, modals are automatically filled only the first time
       *        they open. This tells the modal to refresh its content
       *        every time it opens.
       *
       * @param {string} [options.label]
       *        A text label for the modal, primarily for accessibility.
       *
       * @param {boolean} [options.temporary=true]
       *        If `true`, the modal can only be opened once; it will be
       *        disposed as soon as it's closed.
       *
       * @param {boolean} [options.uncloseable=false]
       *        If `true`, the user will not be able to close the modal
       *        through the UI in the normal ways. Programmatic closing is
       *        still possible.
       */
      function ModalDialog(player, options) {
        classCallCheck(this, ModalDialog);
    
        var _this = possibleConstructorReturn(this, _Component.call(this, player, options));
    
        _this.opened_ = _this.hasBeenOpened_ = _this.hasBeenFilled_ = false;
    
        _this.closeable(!_this.options_.uncloseable);
        _this.content(_this.options_.content);
    
        // Make sure the contentEl is defined AFTER any children are initialized
        // because we only want the contents of the modal in the contentEl
        // (not the UI elements like the close button).
        _this.contentEl_ = createEl('div', {
          className: MODAL_CLASS_NAME + '-content'
        }, {
          role: 'document'
        });
    
        _this.descEl_ = createEl('p', {
          className: MODAL_CLASS_NAME + '-description vjs-control-text',
          id: _this.el().getAttribute('aria-describedby')
        });
    
        textContent(_this.descEl_, _this.description());
        _this.el_.appendChild(_this.descEl_);
        _this.el_.appendChild(_this.contentEl_);
        return _this;
      }
    
      /**
       * Create the `ModalDialog`'s DOM element
       *
       * @return {Element}
       *         The DOM element that gets created.
       */
    
    
      ModalDialog.prototype.createEl = function createEl$$1() {
        return _Component.prototype.createEl.call(this, 'div', {
          className: this.buildCSSClass(),
          tabIndex: -1
        }, {
          'aria-describedby': this.id() + '_description',
          'aria-hidden': 'true',
          'aria-label': this.label(),
          'role': 'dialog'
        });
      };
    
      /**
       * Builds the default DOM `className`.
       *
       * @return {string}
       *         The DOM `className` for this object.
       */
    
    
      ModalDialog.prototype.buildCSSClass = function buildCSSClass() {
        return MODAL_CLASS_NAME + ' vjs-hidden ' + _Component.prototype.buildCSSClass.call(this);
      };
    
      /**
       * Handles `keydown` events on the document, looking for ESC, which closes
       * the modal.
       *
       * @param {EventTarget~Event} e
       *        The keypress that triggered this event.
       *
       * @listens keydown
       */
    
    
      ModalDialog.prototype.handleKeyPress = function handleKeyPress(e) {
        if (e.which === ESC && this.closeable()) {
          this.close();
        }
      };
    
      /**
       * Returns the label string for this modal. Primarily used for accessibility.
       *
       * @return {string}
       *         the localized or raw label of this modal.
       */
    
    
      ModalDialog.prototype.label = function label() {
        return this.localize(this.options_.label || 'Modal Window');
      };
    
      /**
       * Returns the description string for this modal. Primarily used for
       * accessibility.
       *
       * @return {string}
       *         The localized or raw description of this modal.
       */
    
    
      ModalDialog.prototype.description = function description() {
        var desc = this.options_.description || this.localize('This is a modal window.');
    
        // Append a universal closeability message if the modal is closeable.
        if (this.closeable()) {
          desc += ' ' + this.localize('This modal can be closed by pressing the Escape key or activating the close button.');
        }
    
        return desc;
      };
    
      /**
       * Opens the modal.
       *
       * @fires ModalDialog#beforemodalopen
       * @fires ModalDialog#modalopen
       */
    
    
      ModalDialog.prototype.open = function open() {
        if (!this.opened_) {
          var player = this.player();
    
          /**
            * Fired just before a `ModalDialog` is opened.
            *
            * @event ModalDialog#beforemodalopen
            * @type {EventTarget~Event}
            */
          this.trigger('beforemodalopen');
          this.opened_ = true;
    
          // Fill content if the modal has never opened before and
          // never been filled.
          if (this.options_.fillAlways || !this.hasBeenOpened_ && !this.hasBeenFilled_) {
            this.fill();
          }
    
          // If the player was playing, pause it and take note of its previously
          // playing state.
          this.wasPlaying_ = !player.paused();
    
          if (this.options_.pauseOnOpen && this.wasPlaying_) {
            player.pause();
          }
    
          if (this.closeable()) {
            this.on(this.el_.ownerDocument, 'keydown', bind(this, this.handleKeyPress));
          }
    
          player.controls(false);
          this.show();
          this.conditionalFocus_();
          this.el().setAttribute('aria-hidden', 'false');
    
          /**
            * Fired just after a `ModalDialog` is opened.
            *
            * @event ModalDialog#modalopen
            * @type {EventTarget~Event}
            */
          this.trigger('modalopen');
          this.hasBeenOpened_ = true;
        }
      };
    
      /**
       * If the `ModalDialog` is currently open or closed.
       *
       * @param  {boolean} [value]
       *         If given, it will open (`true`) or close (`false`) the modal.
       *
       * @return {boolean}
       *         the current open state of the modaldialog
       */
    
    
      ModalDialog.prototype.opened = function opened(value) {
        if (typeof value === 'boolean') {
          this[value ? 'open' : 'close']();
        }
        return this.opened_;
      };
    
      /**
       * Closes the modal, does nothing if the `ModalDialog` is
       * not open.
       *
       * @fires ModalDialog#beforemodalclose
       * @fires ModalDialog#modalclose
       */
    
    
      ModalDialog.prototype.close = function close() {
        if (!this.opened_) {
          return;
        }
        var player = this.player();
    
        /**
          * Fired just before a `ModalDialog` is closed.
          *
          * @event ModalDialog#beforemodalclose
          * @type {EventTarget~Event}
          */
        this.trigger('beforemodalclose');
        this.opened_ = false;
    
        if (this.wasPlaying_ && this.options_.pauseOnOpen) {
          player.play();
        }
    
        if (this.closeable()) {
          this.off(this.el_.ownerDocument, 'keydown', bind(this, this.handleKeyPress));
        }
    
        player.controls(true);
        this.hide();
        this.el().setAttribute('aria-hidden', 'true');
    
        /**
          * Fired just after a `ModalDialog` is closed.
          *
          * @event ModalDialog#modalclose
          * @type {EventTarget~Event}
          */
        this.trigger('modalclose');
        this.conditionalBlur_();
    
        if (this.options_.temporary) {
          this.dispose();
        }
      };
    
      /**
       * Check to see if the `ModalDialog` is closeable via the UI.
       *
       * @param  {boolean} [value]
       *         If given as a boolean, it will set the `closeable` option.
       *
       * @return {boolean}
       *         Returns the final value of the closable option.
       */
    
    
      ModalDialog.prototype.closeable = function closeable(value) {
        if (typeof value === 'boolean') {
          var closeable = this.closeable_ = !!value;
          var close = this.getChild('closeButton');
    
          // If this is being made closeable and has no close button, add one.
          if (closeable && !close) {
    
            // The close button should be a child of the modal - not its
            // content element, so temporarily change the content element.
            var temp = this.contentEl_;
    
            this.contentEl_ = this.el_;
            close = this.addChild('closeButton', { controlText: 'Close Modal Dialog' });
            this.contentEl_ = temp;
            this.on(close, 'close', this.close);
          }
    
          // If this is being made uncloseable and has a close button, remove it.
          if (!closeable && close) {
            this.off(close, 'close', this.close);
            this.removeChild(close);
            close.dispose();
          }
        }
        return this.closeable_;
      };
    
      /**
       * Fill the modal's content element with the modal's "content" option.
       * The content element will be emptied before this change takes place.
       */
    
    
      ModalDialog.prototype.fill = function fill() {
        this.fillWith(this.content());
      };
    
      /**
       * Fill the modal's content element with arbitrary content.
       * The content element will be emptied before this change takes place.
       *
       * @fires ModalDialog#beforemodalfill
       * @fires ModalDialog#modalfill
       *
       * @param {Mixed} [content]
       *        The same rules apply to this as apply to the `content` option.
       */
    
    
      ModalDialog.prototype.fillWith = function fillWith(content) {
        var contentEl = this.contentEl();
        var parentEl = contentEl.parentNode;
        var nextSiblingEl = contentEl.nextSibling;
    
        /**
         * Fired just before a `ModalDialog` is filled with content.
         *
         * @event ModalDialog#beforemodalfill
         * @type {EventTarget~Event}
         */
        this.trigger('beforemodalfill');
        this.hasBeenFilled_ = true;
    
        // Detach the content element from the DOM before performing
        // manipulation to avoid modifying the live DOM multiple times.
        parentEl.removeChild(contentEl);
        this.empty();
        insertContent(contentEl, content);
        /**
         * Fired just after a `ModalDialog` is filled with content.
         *
         * @event ModalDialog#modalfill
         * @type {EventTarget~Event}
         */
        this.trigger('modalfill');
    
        // Re-inject the re-filled content element.
        if (nextSiblingEl) {
          parentEl.insertBefore(contentEl, nextSiblingEl);
        } else {
          parentEl.appendChild(contentEl);
        }
    
        // make sure that the close button is last in the dialog DOM
        var closeButton = this.getChild('closeButton');
    
        if (closeButton) {
          parentEl.appendChild(closeButton.el_);
        }
      };
    
      /**
       * Empties the content element. This happens anytime the modal is filled.
       *
       * @fires ModalDialog#beforemodalempty
       * @fires ModalDialog#modalempty
       */
    
    
      ModalDialog.prototype.empty = function empty() {
        /**
         * Fired just before a `ModalDialog` is emptied.
         *
         * @event ModalDialog#beforemodalempty
         * @type {EventTarget~Event}
         */
        this.trigger('beforemodalempty');
        emptyEl(this.contentEl());
    
        /**
         * Fired just after a `ModalDialog` is emptied.
         *
         * @event ModalDialog#modalempty
         * @type {EventTarget~Event}
         */
        this.trigger('modalempty');
      };
    
      /**
       * Gets or sets the modal content, which gets normalized before being
       * rendered into the DOM.
       *
       * This does not update the DOM or fill the modal, but it is called during
       * that process.
       *
       * @param  {Mixed} [value]
       *         If defined, sets the internal content value to be used on the
       *         next call(s) to `fill`. This value is normalized before being
       *         inserted. To "clear" the internal content value, pass `null`.
       *
       * @return {Mixed}
       *         The current content of the modal dialog
       */
    
    
      ModalDialog.prototype.content = function content(value) {
        if (typeof value !== 'undefined') {
          this.content_ = value;
        }
        return this.content_;
      };
    
      /**
       * conditionally focus the modal dialog if focus was previously on the player.
       *
       * @private
       */
    
    
      ModalDialog.prototype.conditionalFocus_ = function conditionalFocus_() {
        var activeEl = document_1.activeElement;
        var playerEl = this.player_.el_;
    
        this.previouslyActiveEl_ = null;
    
        if (playerEl.contains(activeEl) || playerEl === activeEl) {
          this.previouslyActiveEl_ = activeEl;
    
          this.focus();
    
          this.on(document_1, 'keydown', this.handleKeyDown);
        }
      };
    
      /**
       * conditionally blur the element and refocus the last focused element
       *
       * @private
       */
    
    
      ModalDialog.prototype.conditionalBlur_ = function conditionalBlur_() {
        if (this.previouslyActiveEl_) {
          this.previouslyActiveEl_.focus();
          this.previouslyActiveEl_ = null;
        }
    
        this.off(document_1, 'keydown', this.handleKeyDown);
      };
    
      /**
       * Keydown handler. Attached when modal is focused.
       *
       * @listens keydown
       */
    
    
      ModalDialog.prototype.handleKeyDown = function handleKeyDown(event) {
        // exit early if it isn't a tab key
        if (event.which !== 9) {
          return;
        }
    
        var focusableEls = this.focusableEls_();
        var activeEl = this.el_.querySelector(':focus');
        var focusIndex = void 0;
    
        for (var i = 0; i < focusableEls.length; i++) {
          if (activeEl === focusableEls[i]) {
            focusIndex = i;
            break;
          }
        }
    
        if (document_1.activeElement === this.el_) {
          focusIndex = 0;
        }
    
        if (event.shiftKey && focusIndex === 0) {
          focusableEls[focusableEls.length - 1].focus();
          event.preventDefault();
        } else if (!event.shiftKey && focusIndex === focusableEls.length - 1) {
          focusableEls[0].focus();
          event.preventDefault();
        }
      };
    
      /**
       * get all focusable elements
       *
       * @private
       */
    
    
      ModalDialog.prototype.focusableEls_ = function focusableEls_() {
        var allChildren = this.el_.querySelectorAll('*');
    
        return Array.prototype.filter.call(allChildren, function (child) {
          return (child instanceof window_1.HTMLAnchorElement || child instanceof window_1.HTMLAreaElement) && child.hasAttribute('href') || (child instanceof window_1.HTMLInputElement || child instanceof window_1.HTMLSelectElement || child instanceof window_1.HTMLTextAreaElement || child instanceof window_1.HTMLButtonElement) && !child.hasAttribute('disabled') || child instanceof window_1.HTMLIFrameElement || child instanceof window_1.HTMLObjectElement || child instanceof window_1.HTMLEmbedElement || child.hasAttribute('tabindex') && child.getAttribute('tabindex') !== -1 || child.hasAttribute('contenteditable');
        });
      };
    
      return ModalDialog;
    }(Component);
    
    /**
     * Default options for `ModalDialog` default options.
     *
     * @type {Object}
     * @private
     */
    
    
    ModalDialog.prototype.options_ = {
      pauseOnOpen: true,
      temporary: true
    };
    
    Component.registerComponent('ModalDialog', ModalDialog);
    
    /**
     * @file track-list.js
     */
    /**
     * Common functionaliy between {@link TextTrackList}, {@link AudioTrackList}, and
     * {@link VideoTrackList}
     *
     * @extends EventTarget
     */
    
    var TrackList = function (_EventTarget) {
      inherits(TrackList, _EventTarget);
    
      /**
       * Create an instance of this class
       *
       * @param {Track[]} tracks
       *        A list of tracks to initialize the list with.
       *
       * @param {Object} [list]
       *        The child object with inheritance done manually for ie8.
       *
       * @abstract
       */
      function TrackList() {
        var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    
        var _ret;
    
        var list = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        classCallCheck(this, TrackList);
    
        var _this = possibleConstructorReturn(this, _EventTarget.call(this));
    
        if (!list) {
          list = _this; // eslint-disable-line
          if (IS_IE8) {
            list = document_1.createElement('custom');
            for (var prop in TrackList.prototype) {
              if (prop !== 'constructor') {
                list[prop] = TrackList.prototype[prop];
              }
            }
          }
        }
    
        list.tracks_ = [];
    
        /**
         * @memberof TrackList
         * @member {number} length
         *         The current number of `Track`s in the this Trackist.
         * @instance
         */
        Object.defineProperty(list, 'length', {
          get: function get$$1() {
            return this.tracks_.length;
          }
        });
    
        for (var i = 0; i < tracks.length; i++) {
          list.addTrack(tracks[i]);
        }
    
        // must return the object, as for ie8 it will not be this
        // but a reference to a document object
        return _ret = list, possibleConstructorReturn(_this, _ret);
      }
    
      /**
       * Add a {@link Track} to the `TrackList`
       *
       * @param {Track} track
       *        The audio, video, or text track to add to the list.
       *
       * @fires TrackList#addtrack
       */
    
    
      TrackList.prototype.addTrack = function addTrack(track) {
        var index = this.tracks_.length;
    
        if (!('' + index in this)) {
          Object.defineProperty(this, index, {
            get: function get$$1() {
              return this.tracks_[index];
            }
          });
        }
    
        // Do not add duplicate tracks
        if (this.tracks_.indexOf(track) === -1) {
          this.tracks_.push(track);
          /**
           * Triggered when a track is added to a track list.
           *
           * @event TrackList#addtrack
           * @type {EventTarget~Event}
           * @property {Track} track
           *           A reference to track that was added.
           */
          this.trigger({
            track: track,
            type: 'addtrack'
          });
        }
      };
    
      /**
       * Remove a {@link Track} from the `TrackList`
       *
       * @param {Track} rtrack
       *        The audio, video, or text track to remove from the list.
       *
       * @fires TrackList#removetrack
       */
    
    
      TrackList.prototype.removeTrack = function removeTrack(rtrack) {
        var track = void 0;
    
        for (var i = 0, l = this.length; i < l; i++) {
          if (this[i] === rtrack) {
            track = this[i];
            if (track.off) {
              track.off();
            }
    
            this.tracks_.splice(i, 1);
    
            break;
          }
        }
    
        if (!track) {
          return;
        }
    
        /**
         * Triggered when a track is removed from track list.
         *
         * @event TrackList#removetrack
         * @type {EventTarget~Event}
         * @property {Track} track
         *           A reference to track that was removed.
         */
        this.trigger({
          track: track,
          type: 'removetrack'
        });
      };
    
      /**
       * Get a Track from the TrackList by a tracks id
       *
       * @param {String} id - the id of the track to get
       * @method getTrackById
       * @return {Track}
       * @private
       */
    
    
      TrackList.prototype.getTrackById = function getTrackById(id) {
        var result = null;
    
        for (var i = 0, l = this.length; i < l; i++) {
          var track = this[i];
    
          if (track.id === id) {
            result = track;
            break;
          }
        }
    
        return result;
      };
    
      return TrackList;
    }(EventTarget);
    
    /**
     * Triggered when a different track is selected/enabled.
     *
     * @event TrackList#change
     * @type {EventTarget~Event}
     */
    
    /**
     * Events that can be called with on + eventName. See {@link EventHandler}.
     *
     * @property {Object} TrackList#allowedEvents_
     * @private
     */
    
    
    TrackList.prototype.allowedEvents_ = {
      change: 'change',
      addtrack: 'addtrack',
      removetrack: 'removetrack'
    };
    
    // emulate attribute EventHandler support to allow for feature detection
    for (var event in TrackList.prototype.allowedEvents_) {
      TrackList.prototype['on' + event] = null;
    }
    
    /**
     * @file audio-track-list.js
     */
    /**
     * Anywhere we call this function we diverge from the spec
     * as we only support one enabled audiotrack at a time
     *
     * @param {AudioTrackList} list
     *        list to work on
     *
     * @param {AudioTrack} track
     *        The track to skip
     *
     * @private
     */
    var disableOthers = function disableOthers(list, track) {
      for (var i = 0; i < list.length; i++) {
        if (!Object.keys(list[i]).length || track.id === list[i].id) {
          continue;
        }
        // another audio track is enabled, disable it
        list[i].enabled = false;
      }
    };
    
    /**
     * The current list of {@link AudioTrack} for a media file.
     *
     * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist}
     * @extends TrackList
     */
    
    var AudioTrackList = function (_TrackList) {
      inherits(AudioTrackList, _TrackList);
    
      /**
       * Create an instance of this class.
       *
       * @param {AudioTrack[]} [tracks=[]]
       *        A list of `AudioTrack` to instantiate the list with.
       */
      function AudioTrackList() {
        var _this, _ret;
    
        var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        classCallCheck(this, AudioTrackList);
    
        var list = void 0;
    
        // make sure only 1 track is enabled
        // sorted from last index to first index
        for (var i = tracks.length - 1; i >= 0; i--) {
          if (tracks[i].enabled) {
            disableOthers(tracks, tracks[i]);
            break;
          }
        }
    
        // IE8 forces us to implement inheritance ourselves
        // as it does not support Object.defineProperty properly
        if (IS_IE8) {
          list = document_1.createElement('custom');
          for (var prop in TrackList.prototype) {
            if (prop !== 'constructor') {
              list[prop] = TrackList.prototype[prop];
            }
          }
          for (var _prop in AudioTrackList.prototype) {
            if (_prop !== 'constructor') {
              list[_prop] = AudioTrackList.prototype[_prop];
            }
          }
        }
    
        list = (_this = possibleConstructorReturn(this, _TrackList.call(this, tracks, list)), _this);
        list.changing_ = false;
    
        return _ret = list, possibleConstructorReturn(_this, _ret);
      }
    
      /**
       * Add an {@link AudioTrack} to the `AudioTrackList`.
       *
       * @param {AudioTrack} track
       *        The AudioTrack to add to the list
       *
       * @fires TrackList#addtrack
       */
    
    
      AudioTrackList.prototype.addTrack = function addTrack(track) {
        var _this2 = this;
    
        if (track.enabled) {
          disableOthers(this, track);
        }
    
        _TrackList.prototype.addTrack.call(this, track);
        // native tracks don't have this
        if (!track.addEventListener) {
          return;
        }
    
        /**
         * @listens AudioTrack#enabledchange
         * @fires TrackList#change
         */
        track.addEventListener('enabledchange', function () {
          // when we are disabling other tracks (since we don't support
          // more than one track at a time) we will set changing_
          // to true so that we don't trigger additional change events
          if (_this2.changing_) {
            return;
          }
          _this2.changing_ = true;
          disableOthers(_this2, track);
          _this2.changing_ = false;
          _this2.trigger('change');
        });
      };
    
      return AudioTrackList;
    }(TrackList);
    
    /**
     * @file video-track-list.js
     */
    /**
     * Un-select all other {@link VideoTrack}s that are selected.
     *
     * @param {VideoTrackList} list
     *        list to work on
     *
     * @param {VideoTrack} track
     *        The track to skip
     *
     * @private
     */
    var disableOthers$1 = function disableOthers(list, track) {
      for (var i = 0; i < list.length; i++) {
        if (!Object.keys(list[i]).length || track.id === list[i].id) {
          continue;
        }
        // another video track is enabled, disable it
        list[i].selected = false;
      }
    };
    
    /**
     * The current list of {@link VideoTrack} for a video.
     *
     * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist}
     * @extends TrackList
     */
    
    var VideoTrackList = function (_TrackList) {
      inherits(VideoTrackList, _TrackList);
    
      /**
       * Create an instance of this class.
       *
       * @param {VideoTrack[]} [tracks=[]]
       *        A list of `VideoTrack` to instantiate the list with.
       */
      function VideoTrackList() {
        var _this, _ret;
    
        var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        classCallCheck(this, VideoTrackList);
    
        var list = void 0;
    
        // make sure only 1 track is enabled
        // sorted from last index to first index
        for (var i = tracks.length - 1; i >= 0; i--) {
          if (tracks[i].selected) {
            disableOthers$1(tracks, tracks[i]);
            break;
          }
        }
    
        // IE8 forces us to implement inheritance ourselves
        // as it does not support Object.defineProperty properly
        if (IS_IE8) {
          list = document_1.createElement('custom');
          for (var prop in TrackList.prototype) {
            if (prop !== 'constructor') {
              list[prop] = TrackList.prototype[prop];
            }
          }
          for (var _prop in VideoTrackList.prototype) {
            if (_prop !== 'constructor') {
              list[_prop] = VideoTrackList.prototype[_prop];
            }
          }
        }
    
        list = (_this = possibleConstructorReturn(this, _TrackList.call(this, tracks, list)), _this);
        list.changing_ = false;
    
        /**
         * @member {number} VideoTrackList#selectedIndex
         *         The current index of the selected {@link VideoTrack`}.
         */
        Object.defineProperty(list, 'selectedIndex', {
          get: function get$$1() {
            for (var _i = 0; _i < this.length; _i++) {
              if (this[_i].selected) {
                return _i;
              }
            }
            return -1;
          },
          set: function set$$1() {}
        });
    
        return _ret = list, possibleConstructorReturn(_this, _ret);
      }
    
      /**
       * Add a {@link VideoTrack} to the `VideoTrackList`.
       *
       * @param {VideoTrack} track
       *        The VideoTrack to add to the list
       *
       * @fires TrackList#addtrack
       */
    
    
      VideoTrackList.prototype.addTrack = function addTrack(track) {
        var _this2 = this;
    
        if (track.selected) {
          disableOthers$1(this, track);
        }
    
        _TrackList.prototype.addTrack.call(this, track);
        // native tracks don't have this
        if (!track.addEventListener) {
          return;
        }
    
        /**
         * @listens VideoTrack#selectedchange
         * @fires TrackList#change
         */
        track.addEventListener('selectedchange', function () {
          if (_this2.changing_) {
            return;
          }
          _this2.changing_ = true;
          disableOthers$1(_this2, track);
          _this2.changing_ = false;
          _this2.trigger('change');
        });
      };
    
      return VideoTrackList;
    }(TrackList);
    
    /**
     * @file text-track-list.js
     */
    /**
     * The current list of {@link TextTrack} for a media file.
     *
     * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttracklist}
     * @extends TrackList
     */
    
    var TextTrackList = function (_TrackList) {
      inherits(TextTrackList, _TrackList);
    
      /**
       * Create an instance of this class.
       *
       * @param {TextTrack[]} [tracks=[]]
       *        A list of `TextTrack` to instantiate the list with.
       */
      function TextTrackList() {
        var _this, _ret;
    
        var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        classCallCheck(this, TextTrackList);
    
        var list = void 0;
    
        // IE8 forces us to implement inheritance ourselves
        // as it does not support Object.defineProperty properly
        if (IS_IE8) {
          list = document_1.createElement('custom');
          for (var prop in TrackList.prototype) {
            if (prop !== 'constructor') {
              list[prop] = TrackList.prototype[prop];
            }
          }
          for (var _prop in TextTrackList.prototype) {
            if (_prop !== 'constructor') {
              list[_prop] = TextTrackList.prototype[_prop];
            }
          }
        }
    
        list = (_this = possibleConstructorReturn(this, _TrackList.call(this, tracks, list)), _this);
        return _ret = list, possibleConstructorReturn(_this, _ret);
      }
    
      /**
       * Add a {@link TextTrack} to the `TextTrackList`
       *
       * @param {TextTrack} track
       *        The text track to add to the list.
       *
       * @fires TrackList#addtrack
       */
    
    
      TextTrackList.prototype.addTrack = function addTrack(track) {
        _TrackList.prototype.addTrack.call(this, track);
    
        /**
         * @listens TextTrack#modechange
         * @fires TrackList#change
         */
        track.addEventListener('modechange', bind(this, function () {
          this.trigger('change');
        }));
    
        var nonLanguageTextTrackKind = ['metadata', 'chapters'];
    
        if (nonLanguageTextTrackKind.indexOf(track.kind) === -1) {
          track.addEventListener('modechange', bind(this, function () {
            this.trigger('selectedlanguagechange');
          }));
        }
      };
    
      return TextTrackList;
    }(TrackList);
    
    /**
     * @file html-track-element-list.js
     */
    
    /**
     * The current list of {@link HtmlTrackElement}s.
     */
    
    var HtmlTrackElementList = function () {
    
      /**
       * Create an instance of this class.
       *
       * @param {HtmlTrackElement[]} [tracks=[]]
       *        A list of `HtmlTrackElement` to instantiate the list with.
       */
      function HtmlTrackElementList() {
        var trackElements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        classCallCheck(this, HtmlTrackElementList);
    
        var list = this; // eslint-disable-line
    
        if (IS_IE8) {
          list = document_1.createElement('custom');
    
          for (var prop in HtmlTrackElementList.prototype) {
            if (prop !== 'constructor') {
              list[prop] = HtmlTrackElementList.prototype[prop];
            }
          }
        }
    
        list.trackElements_ = [];
    
        /**
         * @memberof HtmlTrackElementList
         * @member {number} length
         *         The current number of `Track`s in the this Trackist.
         * @instance
         */
        Object.defineProperty(list, 'length', {
          get: function get$$1() {
            return this.trackElements_.length;
          }
        });
    
        for (var i = 0, length = trackElements.length; i < length; i++) {
          list.addTrackElement_(trackElements[i]);
        }
    
        if (IS_IE8) {
          return list;
        }
      }
    
      /**
       * Add an {@link HtmlTrackElement} to the `HtmlTrackElementList`
       *
       * @param {HtmlTrackElement} trackElement
       *        The track element to add to the list.
       *
       * @private
       */
    
    
      HtmlTrackElementList.prototype.addTrackElement_ = function addTrackElement_(trackElement) {
        var index = this.trackElements_.length;
    
        if (!('' + index in this)) {
          Object.defineProperty(this, index, {
            get: function get$$1() {
              return this.trackElements_[index];
            }
          });
        }
    
        // Do not add duplicate elements
        if (this.trackElements_.indexOf(trackElement) === -1) {
          this.trackElements_.push(trackElement);
        }
      };
    
      /**
       * Get an {@link HtmlTrackElement} from the `HtmlTrackElementList` given an
       * {@link TextTrack}.
       *
       * @param {TextTrack} track
       *        The track associated with a track element.
       *
       * @return {HtmlTrackElement|undefined}
       *         The track element that was found or undefined.
       *
       * @private
       */
    
    
      HtmlTrackElementList.prototype.getTrackElementByTrack_ = function getTrackElementByTrack_(track) {
        var trackElement_ = void 0;
    
        for (var i = 0, length = this.trackElements_.length; i < length; i++) {
          if (track === this.trackElements_[i].track) {
            trackElement_ = this.trackElements_[i];
    
            break;
          }
        }
    
        return trackElement_;
      };
    
      /**
       * Remove a {@link HtmlTrackElement} from the `HtmlTrackElementList`
       *
       * @param {HtmlTrackElement} trackElement
       *        The track element to remove from the list.
       *
       * @private
       */
    
    
      HtmlTrackElementList.prototype.removeTrackElement_ = function removeTrackElement_(trackElement) {
        for (var i = 0, length = this.trackElements_.length; i < length; i++) {
          if (trackElement === this.trackElements_[i]) {
            this.trackElements_.splice(i, 1);
    
            break;
          }
        }
      };
    
      return HtmlTrackElementList;
    }();
    
    /**
     * @file text-track-cue-list.js
     */
    /**
     * @typedef {Object} TextTrackCueList~TextTrackCue
     *
     * @property {string} id
     *           The unique id for this text track cue
     *
     * @property {number} startTime
     *           The start time for this text track cue
     *
     * @property {number} endTime
     *           The end time for this text track cue
     *
     * @property {boolean} pauseOnExit
     *           Pause when the end time is reached if true.
     *
     * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcue}
     */
    
    /**
     * A List of TextTrackCues.
     *
     * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcuelist}
     */
    
    var TextTrackCueList = function () {
    
      /**
       * Create an instance of this class..
       *
       * @param {Array} cues
       *        A list of cues to be initialized with
       */
      function TextTrackCueList(cues) {
        classCallCheck(this, TextTrackCueList);
    
        var list = this; // eslint-disable-line
    
        if (IS_IE8) {
          list = document_1.createElement('custom');
    
          for (var prop in TextTrackCueList.prototype) {
            if (prop !== 'constructor') {
              list[prop] = TextTrackCueList.prototype[prop];
            }
          }
        }
    
        TextTrackCueList.prototype.setCues_.call(list, cues);
    
        /**
         * @memberof TextTrackCueList
         * @member {number} length
         *         The current number of `TextTrackCue`s in the TextTrackCueList.
         * @instance
         */
        Object.defineProperty(list, 'length', {
          get: function get$$1() {
            return this.length_;
          }
        });
    
        if (IS_IE8) {
          return list;
        }
      }
    
      /**
       * A setter for cues in this list. Creates getters
       * an an index for the cues.
       *
       * @param {Array} cues
       *        An array of cues to set
       *
       * @private
       */
    
    
      TextTrackCueList.prototype.setCues_ = function setCues_(cues) {
        var oldLength = this.length || 0;
        var i = 0;
        var l = cues.length;
    
        this.cues_ = cues;
        this.length_ = cues.length;
    
        var defineProp = function defineProp(index) {
          if (!('' + index in this)) {
            Object.defineProperty(this, '' + index, {
              get: function get$$1() {
                return this.cues_[index];
              }
            });
          }
        };
    
        if (oldLength < l) {
          i = oldLength;
    
          for (; i < l; i++) {
            defineProp.call(this, i);
          }
        }
      };
    
      /**
       * Get a `TextTrackCue` that is currently in the `TextTrackCueList` by id.
       *
       * @param {string} id
       *        The id of the cue that should be searched for.
       *
       * @return {TextTrackCueList~TextTrackCue|null}
       *         A single cue or null if none was found.
       */
    
    
      TextTrackCueList.prototype.getCueById = function getCueById(id) {
        var result = null;
    
        for (var i = 0, l = this.length; i < l; i++) {
          var cue = this[i];
    
          if (cue.id === id) {
            result = cue;
            break;
          }
        }
    
        return result;
      };
    
      return TextTrackCueList;
    }();
    
    /**
     * @file track-kinds.js
     */
    
    /**
     * All possible `VideoTrackKind`s
     *
     * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-videotrack-kind
     * @typedef VideoTrack~Kind
     * @enum
     */
    var VideoTrackKind = {
      alternative: 'alternative',
      captions: 'captions',
      main: 'main',
      sign: 'sign',
      subtitles: 'subtitles',
      commentary: 'commentary'
    };
    
    /**
     * All possible `AudioTrackKind`s
     *
     * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-audiotrack-kind
     * @typedef AudioTrack~Kind
     * @enum
     */
    var AudioTrackKind = {
      'alternative': 'alternative',
      'descriptions': 'descriptions',
      'main': 'main',
      'main-desc': 'main-desc',
      'translation': 'translation',
      'commentary': 'commentary'
    };
    
    /**
     * All possible `TextTrackKind`s
     *
     * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-texttrack-kind
     * @typedef TextTrack~Kind
     * @enum
     */
    var TextTrackKind = {
      subtitles: 'subtitles',
      captions: 'captions',
      descriptions: 'descriptions',
      chapters: 'chapters',
      metadata: 'metadata'
    };
    
    /**
     * All possible `TextTrackMode`s
     *
     * @see https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackmode
     * @typedef TextTrack~Mode
     * @enum
     */
    var TextTrackMode = {
      disabled: 'disabled',
      hidden: 'hidden',
      showing: 'showing'
    };
    
    /**
     * @file track.js
     */
    /**
     * A Track class that contains all of the common functionality for {@link AudioTrack},
     * {@link VideoTrack}, and {@link TextTrack}.
     *
     * > Note: This class should not be used directly
     *
     * @see {@link https://html.spec.whatwg.org/multipage/embedded-content.html}
     * @extends EventTarget
     * @abstract
     */
    
    var Track = function (_EventTarget) {
      inherits(Track, _EventTarget);
    
      /**
       * Create an instance of this class.
       *
       * @param {Object} [options={}]
       *        Object of option names and values
       *
       * @param {string} [options.kind='']
       *        A valid kind for the track type you are creating.
       *
       * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
       *        A unique id for this AudioTrack.
       *
       * @param {string} [options.label='']
       *        The menu label for this track.
       *
       * @param {string} [options.language='']
       *        A valid two character language code.
       *
       * @abstract
       */
      function Track() {
        var _ret;
    
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        classCallCheck(this, Track);
    
        var _this = possibleConstructorReturn(this, _EventTarget.call(this));
    
        var track = _this; // eslint-disable-line
    
        if (IS_IE8) {
          track = document_1.createElement('custom');
          for (var prop in Track.prototype) {
            if (prop !== 'constructor') {
              track[prop] = Track.prototype[prop];
            }
          }
        }
    
        var trackProps = {
          id: options.id || 'vjs_track_' + newGUID(),
          kind: options.kind || '',
          label: options.label || '',
          language: options.language || ''
        };
    
        /**
         * @memberof Track
         * @member {string} id
         *         The id of this track. Cannot be changed after creation.
         * @instance
         *
         * @readonly
         */
    
        /**
         * @memberof Track
         * @member {string} kind
         *         The kind of track that this is. Cannot be changed after creation.
         * @instance
         *
         * @readonly
         */
    
        /**
         * @memberof Track
         * @member {string} label
         *         The label of this track. Cannot be changed after creation.
         * @instance
         *
         * @readonly
         */
    
        /**
         * @memberof Track
         * @member {string} language
         *         The two letter language code for this track. Cannot be changed after
         *         creation.
         * @instance
         *
         * @readonly
         */
    
        var _loop = function _loop(key) {
          Object.defineProperty(track, key, {
            get: function get$$1() {
              return trackProps[key];
            },
            set: function set$$1() {}
          });
        };
    
        for (var key in trackProps) {
          _loop(key);
        }
    
        return _ret = track, possibleConstructorReturn(_this, _ret);
      }
    
      return Track;
    }(EventTarget);
    
    /**
     * @file url.js
     * @module url
     */
    /**
     * @typedef {Object} url:URLObject
     *
     * @property {string} protocol
     *           The protocol of the url that was parsed.
     *
     * @property {string} hostname
     *           The hostname of the url that was parsed.
     *
     * @property {string} port
     *           The port of the url that was parsed.
     *
     * @property {string} pathname
     *           The pathname of the url that was parsed.
     *
     * @property {string} search
     *           The search query of the url that was parsed.
     *
     * @property {string} hash
     *           The hash of the url that was parsed.
     *
     * @property {string} host
     *           The host of the url that was parsed.
     */
    
    /**
     * Resolve and parse the elements of a URL.
     *
     * @param  {String} url
     *         The url to parse
     *
     * @return {url:URLObject}
     *         An object of url details
     */
    var parseUrl = function parseUrl(url) {
      var props = ['protocol', 'hostname', 'port', 'pathname', 'search', 'hash', 'host'];
    
      // add the url to an anchor and let the browser parse the URL
      var a = document_1.createElement('a');
    
      a.href = url;
    
      // IE8 (and 9?) Fix
      // ie8 doesn't parse the URL correctly until the anchor is actually
      // added to the body, and an innerHTML is needed to trigger the parsing
      var addToBody = a.host === '' && a.protocol !== 'file:';
      var div = void 0;
    
      if (addToBody) {
        div = document_1.createElement('div');
        div.innerHTML = '<a href="' + url + '"></a>';
        a = div.firstChild;
        // prevent the div from affecting layout
        div.setAttribute('style', 'display:none; position:absolute;');
        document_1.body.appendChild(div);
      }
    
      // Copy the specific URL properties to a new object
      // This is also needed for IE8 because the anchor loses its
      // properties when it's removed from the dom
      var details = {};
    
      for (var i = 0; i < props.length; i++) {
        details[props[i]] = a[props[i]];
      }
    
      // IE9 adds the port to the host property unlike everyone else. If
      // a port identifier is added for standard ports, strip it.
      if (details.protocol === 'http:') {
        details.host = details.host.replace(/:80$/, '');
      }
    
      if (details.protocol === 'https:') {
        details.host = details.host.replace(/:443$/, '');
      }
    
      if (addToBody) {
        document_1.body.removeChild(div);
      }
    
      return details;
    };
    
    /**
     * Get absolute version of relative URL. Used to tell flash correct URL.
     *
     *
     * @param  {string} url
     *         URL to make absolute
     *
     * @return {string}
     *         Absolute URL
     *
     * @see http://stackoverflow.com/questions/470832/getting-an-absolute-url-from-a-relative-one-ie6-issue
     */
    var getAbsoluteURL = function getAbsoluteURL(url) {
      // Check if absolute URL
      if (!url.match(/^https?:\/\//)) {
        // Convert to absolute URL. Flash hosted off-site needs an absolute URL.
        var div = document_1.createElement('div');
    
        div.innerHTML = '<a href="' + url + '">x</a>';
        url = div.firstChild.href;
      }
    
      return url;
    };
    
    /**
     * Returns the extension of the passed file name. It will return an empty string
     * if passed an invalid path.
     *
     * @param {string} path
     *        The fileName path like '/path/to/file.mp4'
     *
     * @returns {string}
     *          The extension in lower case or an empty string if no
     *          extension could be found.
     */
    var getFileExtension = function getFileExtension(path) {
      if (typeof path === 'string') {
        var splitPathRe = /^(\/?)([\s\S]*?)((?:\.{1,2}|[^\/]+?)(\.([^\.\/\?]+)))(?:[\/]*|[\?].*)$/i;
        var pathParts = splitPathRe.exec(path);
    
        if (pathParts) {
          return pathParts.pop().toLowerCase();
        }
      }
    
      return '';
    };
    
    /**
     * Returns whether the url passed is a cross domain request or not.
     *
     * @param {string} url
     *        The url to check.
     *
     * @return {boolean}
     *         Whether it is a cross domain request or not.
     */
    var isCrossOrigin = function isCrossOrigin(url) {
      var winLoc = window_1.location;
      var urlInfo = parseUrl(url);
    
      // IE8 protocol relative urls will return ':' for protocol
      var srcProtocol = urlInfo.protocol === ':' ? winLoc.protocol : urlInfo.protocol;
    
      // Check if url is for another domain/origin
      // IE8 doesn't know location.origin, so we won't rely on it here
      var crossOrigin = srcProtocol + urlInfo.host !== winLoc.protocol + winLoc.host;
    
      return crossOrigin;
    };
    
    var Url = (Object.freeze || Object)({
        parseUrl: parseUrl,
        getAbsoluteURL: getAbsoluteURL,
        getFileExtension: getFileExtension,
        isCrossOrigin: isCrossOrigin
    });
    
    var isFunction_1 = isFunction;
    
    var toString$1 = Object.prototype.toString;
    
    function isFunction (fn) {
      var string = toString$1.call(fn);
      return string === '[object Function]' ||
        (typeof fn === 'function' && string !== '[object RegExp]') ||
        (typeof window !== 'undefined' &&
         // IE8 and below
         (fn === window.setTimeout ||
          fn === window.alert ||
          fn === window.confirm ||
          fn === window.prompt))
    }
    
    var trim_1 = createCommonjsModule(function (module, exports) {
    exports = module.exports = trim;
    
    function trim(str){
      return str.replace(/^\s*|\s*$/g, '');
    }
    
    exports.left = function(str){
      return str.replace(/^\s*/, '');
    };
    
    exports.right = function(str){
      return str.replace(/\s*$/, '');
    };
    });
    
    var forEach_1 = forEach;
    
    var toString$2 = Object.prototype.toString;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    
    function forEach(list, iterator, context) {
        if (!isFunction_1(iterator)) {
            throw new TypeError('iterator must be a function')
        }
    
        if (arguments.length < 3) {
            context = this;
        }
        
        if (toString$2.call(list) === '[object Array]')
            forEachArray$1(list, iterator, context);
        else if (typeof list === 'string')
            forEachString(list, iterator, context);
        else
            forEachObject(list, iterator, context);
    }
    
    function forEachArray$1(array, iterator, context) {
        for (var i = 0, len = array.length; i < len; i++) {
            if (hasOwnProperty.call(array, i)) {
                iterator.call(context, array[i], i, array);
            }
        }
    }
    
    function forEachString(string, iterator, context) {
        for (var i = 0, len = string.length; i < len; i++) {
            // no such thing as a sparse string.
            iterator.call(context, string.charAt(i), i, string);
        }
    }
    
    function forEachObject(object, iterator, context) {
        for (var k in object) {
            if (hasOwnProperty.call(object, k)) {
                iterator.call(context, object[k], k, object);
            }
        }
    }
    
    var isArray = function(arg) {
          return Object.prototype.toString.call(arg) === '[object Array]';
        };
    
    var parseHeaders = function (headers) {
      if (!headers)
        return {}
    
      var result = {};
    
      forEach_1(
          trim_1(headers).split('\n')
        , function (row) {
            var index = row.indexOf(':')
              , key = trim_1(row.slice(0, index)).toLowerCase()
              , value = trim_1(row.slice(index + 1));
    
            if (typeof(result[key]) === 'undefined') {
              result[key] = value;
            } else if (isArray(result[key])) {
              result[key].push(value);
            } else {
              result[key] = [ result[key], value ];
            }
          }
      );
    
      return result
    };
    
    var immutable = extend;
    
    var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
    
    function extend() {
        var target = {};
    
        for (var i = 0; i < arguments.length; i++) {
            var source = arguments[i];
    
            for (var key in source) {
                if (hasOwnProperty$1.call(source, key)) {
                    target[key] = source[key];
                }
            }
        }
    
        return target
    }
    
    var xhr = createXHR;
    createXHR.XMLHttpRequest = window_1.XMLHttpRequest || noop;
    createXHR.XDomainRequest = "withCredentials" in (new createXHR.XMLHttpRequest()) ? createXHR.XMLHttpRequest : window_1.XDomainRequest;
    
    forEachArray(["get", "put", "post", "patch", "head", "delete"], function(method) {
        createXHR[method === "delete" ? "del" : method] = function(uri, options, callback) {
            options = initParams(uri, options, callback);
            options.method = method.toUpperCase();
            return _createXHR(options)
        };
    });
    
    function forEachArray(array, iterator) {
        for (var i = 0; i < array.length; i++) {
            iterator(array[i]);
        }
    }
    
    function isEmpty(obj){
        for(var i in obj){
            if(obj.hasOwnProperty(i)) return false
        }
        return true
    }
    
    function initParams(uri, options, callback) {
        var params = uri;
    
        if (isFunction_1(options)) {
            callback = options;
            if (typeof uri === "string") {
                params = {uri:uri};
            }
        } else {
            params = immutable(options, {uri: uri});
        }
    
        params.callback = callback;
        return params
    }
    
    function createXHR(uri, options, callback) {
        options = initParams(uri, options, callback);
        return _createXHR(options)
    }
    
    function _createXHR(options) {
        if(typeof options.callback === "undefined"){
            throw new Error("callback argument missing")
        }
    
        var called = false;
        var callback = function cbOnce(err, response, body){
            if(!called){
                called = true;
                options.callback(err, response, body);
            }
        };
    
        function readystatechange() {
            if (xhr.readyState === 4) {
                setTimeout(loadFunc, 0);
            }
        }
    
        function getBody() {
            // Chrome with requestType=blob throws errors arround when even testing access to responseText
            var body = undefined;
    
            if (xhr.response) {
                body = xhr.response;
            } else {
                body = xhr.responseText || getXml(xhr);
            }
    
            if (isJson) {
                try {
                    body = JSON.parse(body);
                } catch (e) {}
            }
    
            return body
        }
    
        function errorFunc(evt) {
            clearTimeout(timeoutTimer);
            if(!(evt instanceof Error)){
                evt = new Error("" + (evt || "Unknown XMLHttpRequest Error") );
            }
            evt.statusCode = 0;
            return callback(evt, failureResponse)
        }
    
        // will load the data & process the response in a special response object
        function loadFunc() {
            if (aborted) return
            var status;
            clearTimeout(timeoutTimer);
            if(options.useXDR && xhr.status===undefined) {
                //IE8 CORS GET successful response doesn't have a status field, but body is fine
                status = 200;
            } else {
                status = (xhr.status === 1223 ? 204 : xhr.status);
            }
            var response = failureResponse;
            var err = null;
    
            if (status !== 0){
                response = {
                    body: getBody(),
                    statusCode: status,
                    method: method,
                    headers: {},
                    url: uri,
                    rawRequest: xhr
                };
                if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE
                    response.headers = parseHeaders(xhr.getAllResponseHeaders());
                }
            } else {
                err = new Error("Internal XMLHttpRequest Error");
            }
            return callback(err, response, response.body)
        }
    
        var xhr = options.xhr || null;
    
        if (!xhr) {
            if (options.cors || options.useXDR) {
                xhr = new createXHR.XDomainRequest();
            }else{
                xhr = new createXHR.XMLHttpRequest();
            }
        }
    
        var key;
        var aborted;
        var uri = xhr.url = options.uri || options.url;
        var method = xhr.method = options.method || "GET";
        var body = options.body || options.data;
        var headers = xhr.headers = options.headers || {};
        var sync = !!options.sync;
        var isJson = false;
        var timeoutTimer;
        var failureResponse = {
            body: undefined,
            headers: {},
            statusCode: 0,
            method: method,
            url: uri,
            rawRequest: xhr
        };
    
        if ("json" in options && options.json !== false) {
            isJson = true;
            headers["accept"] || headers["Accept"] || (headers["Accept"] = "application/json"); //Don't override existing accept header declared by user
            if (method !== "GET" && method !== "HEAD") {
                headers["content-type"] || headers["Content-Type"] || (headers["Content-Type"] = "application/json"); //Don't override existing accept header declared by user
                body = JSON.stringify(options.json === true ? body : options.json);
            }
        }
    
        xhr.onreadystatechange = readystatechange;
        xhr.onload = loadFunc;
        xhr.onerror = errorFunc;
        // IE9 must have onprogress be set to a unique function.
        xhr.onprogress = function () {
            // IE must die
        };
        xhr.onabort = function(){
            aborted = true;
        };
        xhr.ontimeout = errorFunc;
        xhr.open(method, uri, !sync, options.username, options.password);
        //has to be after open
        if(!sync) {
            xhr.withCredentials = !!options.withCredentials;
        }
        // Cannot set timeout with sync request
        // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly
        // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent
        if (!sync && options.timeout > 0 ) {
            timeoutTimer = setTimeout(function(){
                if (aborted) return
                aborted = true;//IE9 may still call readystatechange
                xhr.abort("timeout");
                var e = new Error("XMLHttpRequest timeout");
                e.code = "ETIMEDOUT";
                errorFunc(e);
            }, options.timeout );
        }
    
        if (xhr.setRequestHeader) {
            for(key in headers){
                if(headers.hasOwnProperty(key)){
                    xhr.setRequestHeader(key, headers[key]);
                }
            }
        } else if (options.headers && !isEmpty(options.headers)) {
            throw new Error("Headers cannot be set on an XDomainRequest object")
        }
    
        if ("responseType" in options) {
            xhr.responseType = options.responseType;
        }
    
        if ("beforeSend" in options &&
            typeof options.beforeSend === "function"
        ) {
            options.beforeSend(xhr);
        }
    
        // Microsoft Edge browser sends "undefined" when send is called with undefined value.
        // XMLHttpRequest spec says to pass null as body to indicate no body
        // See https://github.com/naugtur/xhr/issues/100.
        xhr.send(body || null);
    
        return xhr
    
    
    }
    
    function getXml(xhr) {
        if (xhr.responseType === "document") {
            return xhr.responseXML
        }
        var firefoxBugTakenEffect = xhr.responseXML && xhr.responseXML.documentElement.nodeName === "parsererror";
        if (xhr.responseType === "" && !firefoxBugTakenEffect) {
            return xhr.responseXML
        }
    
        return null
    }
    
    function noop() {}
    
    /**
     * @file text-track.js
     */
    /**
     * Takes a webvtt file contents and parses it into cues
     *
     * @param {string} srcContent
     *        webVTT file contents
     *
     * @param {TextTrack} track
     *        TextTrack to add cues to. Cues come from the srcContent.
     *
     * @private
     */
    var parseCues = function parseCues(srcContent, track) {
      var parser = new window_1.WebVTT.Parser(window_1, window_1.vttjs, window_1.WebVTT.StringDecoder());
      var errors = [];
    
      parser.oncue = function (cue) {
        track.addCue(cue);
      };
    
      parser.onparsingerror = function (error) {
        errors.push(error);
      };
    
      parser.onflush = function () {
        track.trigger({
          type: 'loadeddata',
          target: track
        });
      };
    
      parser.parse(srcContent);
      if (errors.length > 0) {
        if (window_1.console && window_1.console.groupCollapsed) {
          window_1.console.groupCollapsed('Text Track parsing errors for ' + track.src);
        }
        errors.forEach(function (error) {
          return log$1.error(error);
        });
        if (window_1.console && window_1.console.groupEnd) {
          window_1.console.groupEnd();
        }
      }
    
      parser.flush();
    };
    
    /**
     * Load a `TextTrack` from a specifed url.
     *
     * @param {string} src
     *        Url to load track from.
     *
     * @param {TextTrack} track
     *        Track to add cues to. Comes from the content at the end of `url`.
     *
     * @private
     */
    var loadTrack = function loadTrack(src, track) {
      var opts = {
        uri: src
      };
      var crossOrigin = isCrossOrigin(src);
    
      if (crossOrigin) {
        opts.cors = crossOrigin;
      }
    
      xhr(opts, bind(this, function (err, response, responseBody) {
        if (err) {
          return log$1.error(err, response);
        }
    
        track.loaded_ = true;
    
        // Make sure that vttjs has loaded, otherwise, wait till it finished loading
        // NOTE: this is only used for the alt/video.novtt.js build
        if (typeof window_1.WebVTT !== 'function') {
          if (track.tech_) {
            var loadHandler = function loadHandler() {
              return parseCues(responseBody, track);
            };
    
            track.tech_.on('vttjsloaded', loadHandler);
            track.tech_.on('vttjserror', function () {
              log$1.error('vttjs failed to load, stopping trying to process ' + track.src);
              track.tech_.off('vttjsloaded', loadHandler);
            });
          }
        } else {
          parseCues(responseBody, track);
        }
      }));
    };
    
    /**
     * A representation of a single `TextTrack`.
     *
     * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrack}
     * @extends Track
     */
    
    var TextTrack = function (_Track) {
      inherits(TextTrack, _Track);
    
      /**
       * Create an instance of this class.
       *
       * @param {Object} options={}
       *        Object of option names and values
       *
       * @param {Tech} options.tech
       *        A reference to the tech that owns this TextTrack.
       *
       * @param {TextTrack~Kind} [options.kind='subtitles']
       *        A valid text track kind.
       *
       * @param {TextTrack~Mode} [options.mode='disabled']
       *        A valid text track mode.
       *
       * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
       *        A unique id for this TextTrack.
       *
       * @param {string} [options.label='']
       *        The menu label for this track.
       *
       * @param {string} [options.language='']
       *        A valid two character language code.
       *
       * @param {string} [options.srclang='']
       *        A valid two character language code. An alternative, but deprioritized
       *        vesion of `options.language`
       *
       * @param {string} [options.src]
       *        A url to TextTrack cues.
       *
       * @param {boolean} [options.default]
       *        If this track should default to on or off.
       */
      function TextTrack() {
        var _this, _ret;
    
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        classCallCheck(this, TextTrack);
    
        if (!options.tech) {
          throw new Error('A tech was not provided.');
        }
    
        var settings = mergeOptions(options, {
          kind: TextTrackKind[options.kind] || 'subtitles',
          language: options.language || options.srclang || ''
        });
        var mode = TextTrackMode[settings.mode] || 'disabled';
        var default_ = settings['default'];
    
        if (settings.kind === 'metadata' || settings.kind === 'chapters') {
          mode = 'hidden';
        }
        // on IE8 this will be a document element
        // for every other browser this will be a normal object
        var tt = (_this = possibleConstructorReturn(this, _Track.call(this, settings)), _this);
    
        tt.tech_ = settings.tech;
    
        if (IS_IE8) {
          for (var prop in TextTrack.prototype) {
            if (prop !== 'constructor') {
              tt[prop] = TextTrack.prototype[prop];
            }
          }
        }
    
        tt.cues_ = [];
        tt.activeCues_ = [];
    
        var cues = new TextTrackCueList(tt.cues_);
        var activeCues = new TextTrackCueList(tt.activeCues_);
        var changed = false;
        var timeupdateHandler = bind(tt, function () {
    
          // Accessing this.activeCues for the side-effects of updating itself
          // due to it's nature as a getter function. Do not remove or cues will
          // stop updating!
          /* eslint-disable no-unused-expressions */
          this.activeCues;
          /* eslint-enable no-unused-expressions */
          if (changed) {
            this.trigger('cuechange');
            changed = false;
          }
        });
    
        if (mode !== 'disabled') {
          tt.tech_.ready(function () {
            tt.tech_.on('timeupdate', timeupdateHandler);
          }, true);
        }
    
        /**
         * @memberof TextTrack
         * @member {boolean} default
         *         If this track was set to be on or off by default. Cannot be changed after
         *         creation.
         * @instance
         *
         * @readonly
         */
        Object.defineProperty(tt, 'default', {
          get: function get$$1() {
            return default_;
          },
          set: function set$$1() {}
        });
    
        /**
         * @memberof TextTrack
         * @member {string} mode
         *         Set the mode of this TextTrack to a valid {@link TextTrack~Mode}. Will
         *         not be set if setting to an invalid mode.
         * @instance
         *
         * @fires TextTrack#modechange
         */
        Object.defineProperty(tt, 'mode', {
          get: function get$$1() {
            return mode;
          },
          set: function set$$1(newMode) {
            var _this2 = this;
    
            if (!TextTrackMode[newMode]) {
              return;
            }
            mode = newMode;
            if (mode === 'showing') {
    
              this.tech_.ready(function () {
                _this2.tech_.on('timeupdate', timeupdateHandler);
              }, true);
            }
            /**
             * An event that fires when mode changes on this track. This allows
             * the TextTrackList that holds this track to act accordingly.
             *
             * > Note: This is not part of the spec!
             *
             * @event TextTrack#modechange
             * @type {EventTarget~Event}
             */
            this.trigger('modechange');
          }
        });
    
        /**
         * @memberof TextTrack
         * @member {TextTrackCueList} cues
         *         The text track cue list for this TextTrack.
         * @instance
         */
        Object.defineProperty(tt, 'cues', {
          get: function get$$1() {
            if (!this.loaded_) {
              return null;
            }
    
            return cues;
          },
          set: function set$$1() {}
        });
    
        /**
         * @memberof TextTrack
         * @member {TextTrackCueList} activeCues
         *         The list text track cues that are currently active for this TextTrack.
         * @instance
         */
        Object.defineProperty(tt, 'activeCues', {
          get: function get$$1() {
            if (!this.loaded_) {
              return null;
            }
    
            // nothing to do
            if (this.cues.length === 0) {
              return activeCues;
            }
    
            var ct = this.tech_.currentTime();
            var active = [];
    
            for (var i = 0, l = this.cues.length; i < l; i++) {
              var cue = this.cues[i];
    
              if (cue.startTime <= ct && cue.endTime >= ct) {
                active.push(cue);
              } else if (cue.startTime === cue.endTime && cue.startTime <= ct && cue.startTime + 0.5 >= ct) {
                active.push(cue);
              }
            }
    
            changed = false;
    
            if (active.length !== this.activeCues_.length) {
              changed = true;
            } else {
              for (var _i = 0; _i < active.length; _i++) {
                if (this.activeCues_.indexOf(active[_i]) === -1) {
                  changed = true;
                }
              }
            }
    
            this.activeCues_ = active;
            activeCues.setCues_(this.activeCues_);
    
            return activeCues;
          },
          set: function set$$1() {}
        });
    
        if (settings.src) {
          tt.src = settings.src;
          loadTrack(settings.src, tt);
        } else {
          tt.loaded_ = true;
        }
    
        return _ret = tt, possibleConstructorReturn(_this, _ret);
      }
    
      /**
       * Add a cue to the internal list of cues.
       *
       * @param {TextTrack~Cue} cue
       *        The cue to add to our internal list
       */
    
    
      TextTrack.prototype.addCue = function addCue(originalCue) {
        var cue = originalCue;
    
        if (window_1.vttjs && !(originalCue instanceof window_1.vttjs.VTTCue)) {
          cue = new window_1.vttjs.VTTCue(originalCue.startTime, originalCue.endTime, originalCue.text);
    
          for (var prop in originalCue) {
            if (!(prop in cue)) {
              cue[prop] = originalCue[prop];
            }
          }
    
          // make sure that `id` is copied over
          cue.id = originalCue.id;
          cue.originalCue_ = originalCue;
        }
    
        var tracks = this.tech_.textTracks();
    
        for (var i = 0; i < tracks.length; i++) {
          if (tracks[i] !== this) {
            tracks[i].removeCue(cue);
          }
        }
    
        this.cues_.push(cue);
        this.cues.setCues_(this.cues_);
      };
    
      /**
       * Remove a cue from our internal list
       *
       * @param {TextTrack~Cue} removeCue
       *        The cue to remove from our internal list
       */
    
    
      TextTrack.prototype.removeCue = function removeCue(_removeCue) {
        var i = this.cues_.length;
    
        while (i--) {
          var cue = this.cues_[i];
    
          if (cue === _removeCue || cue.originalCue_ && cue.originalCue_ === _removeCue) {
            this.cues_.splice(i, 1);
            this.cues.setCues_(this.cues_);
            break;
          }
        }
      };
    
      return TextTrack;
    }(Track);
    
    /**
     * cuechange - One or more cues in the track have become active or stopped being active.
     */
    
    
    TextTrack.prototype.allowedEvents_ = {
      cuechange: 'cuechange'
    };
    
    /**
     * A representation of a single `AudioTrack`. If it is part of an {@link AudioTrackList}
     * only one `AudioTrack` in the list will be enabled at a time.
     *
     * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotrack}
     * @extends Track
     */
    
    var AudioTrack = function (_Track) {
      inherits(AudioTrack, _Track);
    
      /**
       * Create an instance of this class.
       *
       * @param {Object} [options={}]
       *        Object of option names and values
       *
       * @param {AudioTrack~Kind} [options.kind='']
       *        A valid audio track kind
       *
       * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
       *        A unique id for this AudioTrack.
       *
       * @param {string} [options.label='']
       *        The menu label for this track.
       *
       * @param {string} [options.language='']
       *        A valid two character language code.
       *
       * @param {boolean} [options.enabled]
       *        If this track is the one that is currently playing. If this track is part of
       *        an {@link AudioTrackList}, only one {@link AudioTrack} will be enabled.
       */
      function AudioTrack() {
        var _this, _ret;
    
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        classCallCheck(this, AudioTrack);
    
        var settings = mergeOptions(options, {
          kind: AudioTrackKind[options.kind] || ''
        });
        // on IE8 this will be a document element
        // for every other browser this will be a normal object
        var track = (_this = possibleConstructorReturn(this, _Track.call(this, settings)), _this);
        var enabled = false;
    
        if (IS_IE8) {
          for (var prop in AudioTrack.prototype) {
            if (prop !== 'constructor') {
              track[prop] = AudioTrack.prototype[prop];
            }
          }
        }
        /**
         * @memberof AudioTrack
         * @member {boolean} enabled
         *         If this `AudioTrack` is enabled or not. When setting this will
         *         fire {@link AudioTrack#enabledchange} if the state of enabled is changed.
         * @instance
         *
         * @fires VideoTrack#selectedchange
         */
        Object.defineProperty(track, 'enabled', {
          get: function get$$1() {
            return enabled;
          },
          set: function set$$1(newEnabled) {
            // an invalid or unchanged value
            if (typeof newEnabled !== 'boolean' || newEnabled === enabled) {
              return;
            }
            enabled = newEnabled;
    
            /**
             * An event that fires when enabled changes on this track. This allows
             * the AudioTrackList that holds this track to act accordingly.
             *
             * > Note: This is not part of the spec! Native tracks will do
             *         this internally without an event.
             *
             * @event AudioTrack#enabledchange
             * @type {EventTarget~Event}
             */
            this.trigger('enabledchange');
          }
        });
    
        // if the user sets this track to selected then
        // set selected to that true value otherwise
        // we keep it false
        if (settings.enabled) {
          track.enabled = settings.enabled;
        }
        track.loaded_ = true;
    
        return _ret = track, possibleConstructorReturn(_this, _ret);
      }
    
      return AudioTrack;
    }(Track);
    
    /**
     * A representation of a single `VideoTrack`.
     *
     * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotrack}
     * @extends Track
     */
    
    var VideoTrack = function (_Track) {
      inherits(VideoTrack, _Track);
    
      /**
       * Create an instance of this class.
       *
       * @param {Object} [options={}]
       *        Object of option names and values
       *
       * @param {string} [options.kind='']
       *        A valid {@link VideoTrack~Kind}
       *
       * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
       *        A unique id for this AudioTrack.
       *
       * @param {string} [options.label='']
       *        The menu label for this track.
       *
       * @param {string} [options.language='']
       *        A valid two character language code.
       *
       * @param {boolean} [options.selected]
       *        If this track is the one that is currently playing.
       */
      function VideoTrack() {
        var _this, _ret;
    
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        classCallCheck(this, VideoTrack);
    
        var settings = mergeOptions(options, {
          kind: VideoTrackKind[options.kind] || ''
        });
    
        // on IE8 this will be a document element
        // for every other browser this will be a normal object
        var track = (_this = possibleConstructorReturn(this, _Track.call(this, settings)), _this);
        var selected = false;
    
        if (IS_IE8) {
          for (var prop in VideoTrack.prototype) {
            if (prop !== 'constructor') {
              track[prop] = VideoTrack.prototype[prop];
            }
          }
        }
    
        /**
         * @memberof VideoTrack
         * @member {boolean} selected
         *         If this `VideoTrack` is selected or not. When setting this will
         *         fire {@link VideoTrack#selectedchange} if the state of selected changed.
         * @instance
         *
         * @fires VideoTrack#selectedchange
         */
        Object.defineProperty(track, 'selected', {
          get: function get$$1() {
            return selected;
          },
          set: function set$$1(newSelected) {
            // an invalid or unchanged value
            if (typeof newSelected !== 'boolean' || newSelected === selected) {
              return;
            }
            selected = newSelected;
    
            /**
             * An event that fires when selected changes on this track. This allows
             * the VideoTrackList that holds this track to act accordingly.
             *
             * > Note: This is not part of the spec! Native tracks will do
             *         this internally without an event.
             *
             * @event VideoTrack#selectedchange
             * @type {EventTarget~Event}
             */
            this.trigger('selectedchange');
          }
        });
    
        // if the user sets this track to selected then
        // set selected to that true value otherwise
        // we keep it false
        if (settings.selected) {
          track.selected = settings.selected;
        }
    
        return _ret = track, possibleConstructorReturn(_this, _ret);
      }
    
      return VideoTrack;
    }(Track);
    
    /**
     * @file html-track-element.js
     */
    
    /**
     * @memberof HTMLTrackElement
     * @typedef {HTMLTrackElement~ReadyState}
     * @enum {number}
     */
    var NONE = 0;
    var LOADING = 1;
    var LOADED = 2;
    var ERROR = 3;
    
    /**
     * A single track represented in the DOM.
     *
     * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#htmltrackelement}
     * @extends EventTarget
     */
    
    var HTMLTrackElement = function (_EventTarget) {
      inherits(HTMLTrackElement, _EventTarget);
    
      /**
       * Create an instance of this class.
       *
       * @param {Object} options={}
       *        Object of option names and values
       *
       * @param {Tech} options.tech
       *        A reference to the tech that owns this HTMLTrackElement.
       *
       * @param {TextTrack~Kind} [options.kind='subtitles']
       *        A valid text track kind.
       *
       * @param {TextTrack~Mode} [options.mode='disabled']
       *        A valid text track mode.
       *
       * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
       *        A unique id for this TextTrack.
       *
       * @param {string} [options.label='']
       *        The menu label for this track.
       *
       * @param {string} [options.language='']
       *        A valid two character language code.
       *
       * @param {string} [options.srclang='']
       *        A valid two character language code. An alternative, but deprioritized
       *        vesion of `options.language`
       *
       * @param {string} [options.src]
       *        A url to TextTrack cues.
       *
       * @param {boolean} [options.default]
       *        If this track should default to on or off.
       */
      function HTMLTrackElement() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        classCallCheck(this, HTMLTrackElement);
    
        var _this = possibleConstructorReturn(this, _EventTarget.call(this));
    
        var readyState = void 0;
        var trackElement = _this; // eslint-disable-line
    
        if (IS_IE8) {
          trackElement = document_1.createElement('custom');
    
          for (var prop in HTMLTrackElement.prototype) {
            if (prop !== 'constructor') {
              trackElement[prop] = HTMLTrackElement.prototype[prop];
            }
          }
        }
    
        var track = new TextTrack(options);
    
        trackElement.kind = track.kind;
        trackElement.src = track.src;
        trackElement.srclang = track.language;
        trackElement.label = track.label;
        trackElement['default'] = track['default'];
    
        /**
         * @memberof HTMLTrackElement
         * @member {HTMLTrackElement~ReadyState} readyState
         *         The current ready state of the track element.
         * @instance
         */
        Object.defineProperty(trackElement, 'readyState', {
          get: function get$$1() {
            return readyState;
          }
        });
    
        /**
         * @memberof HTMLTrackElement
         * @member {TextTrack} track
         *         The underlying TextTrack object.
         * @instance
         *
         */
        Object.defineProperty(trackElement, 'track', {
          get: function get$$1() {
            return track;
          }
        });
    
        readyState = NONE;
    
        /**
         * @listens TextTrack#loadeddata
         * @fires HTMLTrackElement#load
         */
        track.addEventListener('loadeddata', function () {
          readyState = LOADED;
    
          trackElement.trigger({
            type: 'load',
            target: trackElement
          });
        });
    
        if (IS_IE8) {
          var _ret;
    
          return _ret = trackElement, possibleConstructorReturn(_this, _ret);
        }
        return _this;
      }
    
      return HTMLTrackElement;
    }(EventTarget);
    
    HTMLTrackElement.prototype.allowedEvents_ = {
      load: 'load'
    };
    
    HTMLTrackElement.NONE = NONE;
    HTMLTrackElement.LOADING = LOADING;
    HTMLTrackElement.LOADED = LOADED;
    HTMLTrackElement.ERROR = ERROR;
    
    /*
     * This file contains all track properties that are used in
     * player.js, tech.js, html5.js and possibly other techs in the future.
     */
    
    var NORMAL = {
      audio: {
        ListClass: AudioTrackList,
        TrackClass: AudioTrack,
        capitalName: 'Audio'
      },
      video: {
        ListClass: VideoTrackList,
        TrackClass: VideoTrack,
        capitalName: 'Video'
      },
      text: {
        ListClass: TextTrackList,
        TrackClass: TextTrack,
        capitalName: 'Text'
      }
    };
    
    Object.keys(NORMAL).forEach(function (type) {
      NORMAL[type].getterName = type + 'Tracks';
      NORMAL[type].privateName = type + 'Tracks_';
    });
    
    var REMOTE = {
      remoteText: {
        ListClass: TextTrackList,
        TrackClass: TextTrack,
        capitalName: 'RemoteText',
        getterName: 'remoteTextTracks',
        privateName: 'remoteTextTracks_'
      },
      remoteTextEl: {
        ListClass: HtmlTrackElementList,
        TrackClass: HTMLTrackElement,
        capitalName: 'RemoteTextTrackEls',
        getterName: 'remoteTextTrackEls',
        privateName: 'remoteTextTrackEls_'
      }
    };
    
    var ALL = mergeOptions(NORMAL, REMOTE);
    
    REMOTE.names = Object.keys(REMOTE);
    NORMAL.names = Object.keys(NORMAL);
    ALL.names = [].concat(REMOTE.names).concat(NORMAL.names);
    
    /**
     * Copyright 2013 vtt.js Contributors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    
    /* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
    /* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */
    var _objCreate = Object.create || (function() {
      function F() {}
      return function(o) {
        if (arguments.length !== 1) {
          throw new Error('Object.create shim only accepts one parameter.');
        }
        F.prototype = o;
        return new F();
      };
    })();
    
    // Creates a new ParserError object from an errorData object. The errorData
    // object should have default code and message properties. The default message
    // property can be overriden by passing in a message parameter.
    // See ParsingError.Errors below for acceptable errors.
    function ParsingError(errorData, message) {
      this.name = "ParsingError";
      this.code = errorData.code;
      this.message = message || errorData.message;
    }
    ParsingError.prototype = _objCreate(Error.prototype);
    ParsingError.prototype.constructor = ParsingError;
    
    // ParsingError metadata for acceptable ParsingErrors.
    ParsingError.Errors = {
      BadSignature: {
        code: 0,
        message: "Malformed WebVTT signature."
      },
      BadTimeStamp: {
        code: 1,
        message: "Malformed time stamp."
      }
    };
    
    // Try to parse input as a time stamp.
    function parseTimeStamp(input) {
    
      function computeSeconds(h, m, s, f) {
        return (h | 0) * 3600 + (m | 0) * 60 + (s | 0) + (f | 0) / 1000;
      }
    
      var m = input.match(/^(\d+):(\d{2})(:\d{2})?\.(\d{3})/);
      if (!m) {
        return null;
      }
    
      if (m[3]) {
        // Timestamp takes the form of [hours]:[minutes]:[seconds].[milliseconds]
        return computeSeconds(m[1], m[2], m[3].replace(":", ""), m[4]);
      } else if (m[1] > 59) {
        // Timestamp takes the form of [hours]:[minutes].[milliseconds]
        // First position is hours as it's over 59.
        return computeSeconds(m[1], m[2], 0,  m[4]);
      } else {
        // Timestamp takes the form of [minutes]:[seconds].[milliseconds]
        return computeSeconds(0, m[1], m[2], m[4]);
      }
    }
    
    // A settings object holds key/value pairs and will ignore anything but the first
    // assignment to a specific key.
    function Settings() {
      this.values = _objCreate(null);
    }
    
    Settings.prototype = {
      // Only accept the first assignment to any key.
      set: function(k, v) {
        if (!this.get(k) && v !== "") {
          this.values[k] = v;
        }
      },
      // Return the value for a key, or a default value.
      // If 'defaultKey' is passed then 'dflt' is assumed to be an object with
      // a number of possible default values as properties where 'defaultKey' is
      // the key of the property that will be chosen; otherwise it's assumed to be
      // a single value.
      get: function(k, dflt, defaultKey) {
        if (defaultKey) {
          return this.has(k) ? this.values[k] : dflt[defaultKey];
        }
        return this.has(k) ? this.values[k] : dflt;
      },
      // Check whether we have a value for a key.
      has: function(k) {
        return k in this.values;
      },
      // Accept a setting if its one of the given alternatives.
      alt: function(k, v, a) {
        for (var n = 0; n < a.length; ++n) {
          if (v === a[n]) {
            this.set(k, v);
            break;
          }
        }
      },
      // Accept a setting if its a valid (signed) integer.
      integer: function(k, v) {
        if (/^-?\d+$/.test(v)) { // integer
          this.set(k, parseInt(v, 10));
        }
      },
      // Accept a setting if its a valid percentage.
      percent: function(k, v) {
        var m;
        if ((m = v.match(/^([\d]{1,3})(\.[\d]*)?%$/))) {
          v = parseFloat(v);
          if (v >= 0 && v <= 100) {
            this.set(k, v);
            return true;
          }
        }
        return false;
      }
    };
    
    // Helper function to parse input into groups separated by 'groupDelim', and
    // interprete each group as a key/value pair separated by 'keyValueDelim'.
    function parseOptions(input, callback, keyValueDelim, groupDelim) {
      var groups = groupDelim ? input.split(groupDelim) : [input];
      for (var i in groups) {
        if (typeof groups[i] !== "string") {
          continue;
        }
        var kv = groups[i].split(keyValueDelim);
        if (kv.length !== 2) {
          continue;
        }
        var k = kv[0];
        var v = kv[1];
        callback(k, v);
      }
    }
    
    function parseCue(input, cue, regionList) {
      // Remember the original input if we need to throw an error.
      var oInput = input;
      // 4.1 WebVTT timestamp
      function consumeTimeStamp() {
        var ts = parseTimeStamp(input);
        if (ts === null) {
          throw new ParsingError(ParsingError.Errors.BadTimeStamp,
                                "Malformed timestamp: " + oInput);
        }
        // Remove time stamp from input.
        input = input.replace(/^[^\sa-zA-Z-]+/, "");
        return ts;
      }
    
      // 4.4.2 WebVTT cue settings
      function consumeCueSettings(input, cue) {
        var settings = new Settings();
    
        parseOptions(input, function (k, v) {
          switch (k) {
          case "region":
            // Find the last region we parsed with the same region id.
            for (var i = regionList.length - 1; i >= 0; i--) {
              if (regionList[i].id === v) {
                settings.set(k, regionList[i].region);
                break;
              }
            }
            break;
          case "vertical":
            settings.alt(k, v, ["rl", "lr"]);
            break;
          case "line":
            var vals = v.split(","),
                vals0 = vals[0];
            settings.integer(k, vals0);
            settings.percent(k, vals0) ? settings.set("snapToLines", false) : null;
            settings.alt(k, vals0, ["auto"]);
            if (vals.length === 2) {
              settings.alt("lineAlign", vals[1], ["start", "middle", "end"]);
            }
            break;
          case "position":
            vals = v.split(",");
            settings.percent(k, vals[0]);
            if (vals.length === 2) {
              settings.alt("positionAlign", vals[1], ["start", "middle", "end"]);
            }
            break;
          case "size":
            settings.percent(k, v);
            break;
          case "align":
            settings.alt(k, v, ["start", "middle", "end", "left", "right"]);
            break;
          }
        }, /:/, /\s/);
    
        // Apply default values for any missing fields.
        cue.region = settings.get("region", null);
        cue.vertical = settings.get("vertical", "");
        cue.line = settings.get("line", "auto");
        cue.lineAlign = settings.get("lineAlign", "start");
        cue.snapToLines = settings.get("snapToLines", true);
        cue.size = settings.get("size", 100);
        cue.align = settings.get("align", "middle");
        cue.position = settings.get("position", {
          start: 0,
          left: 0,
          middle: 50,
          end: 100,
          right: 100
        }, cue.align);
        cue.positionAlign = settings.get("positionAlign", {
          start: "start",
          left: "start",
          middle: "middle",
          end: "end",
          right: "end"
        }, cue.align);
      }
    
      function skipWhitespace() {
        input = input.replace(/^\s+/, "");
      }
    
      // 4.1 WebVTT cue timings.
      skipWhitespace();
      cue.startTime = consumeTimeStamp();   // (1) collect cue start time
      skipWhitespace();
      if (input.substr(0, 3) !== "-->") {     // (3) next characters must match "-->"
        throw new ParsingError(ParsingError.Errors.BadTimeStamp,
                               "Malformed time stamp (time stamps must be separated by '-->'): " +
                               oInput);
      }
      input = input.substr(3);
      skipWhitespace();
      cue.endTime = consumeTimeStamp();     // (5) collect cue end time
    
      // 4.1 WebVTT cue settings list.
      skipWhitespace();
      consumeCueSettings(input, cue);
    }
    
    var ESCAPE = {
      "&amp;": "&",
      "&lt;": "<",
      "&gt;": ">",
      "&lrm;": "\u200e",
      "&rlm;": "\u200f",
      "&nbsp;": "\u00a0"
    };
    
    var TAG_NAME = {
      c: "span",
      i: "i",
      b: "b",
      u: "u",
      ruby: "ruby",
      rt: "rt",
      v: "span",
      lang: "span"
    };
    
    var TAG_ANNOTATION = {
      v: "title",
      lang: "lang"
    };
    
    var NEEDS_PARENT = {
      rt: "ruby"
    };
    
    // Parse content into a document fragment.
    function parseContent(window, input) {
      function nextToken() {
        // Check for end-of-string.
        if (!input) {
          return null;
        }
    
        // Consume 'n' characters from the input.
        function consume(result) {
          input = input.substr(result.length);
          return result;
        }
    
        var m = input.match(/^([^<]*)(<[^>]+>?)?/);
        // If there is some text before the next tag, return it, otherwise return
        // the tag.
        return consume(m[1] ? m[1] : m[2]);
      }
    
      // Unescape a string 's'.
      function unescape1(e) {
        return ESCAPE[e];
      }
      function unescape(s) {
        while ((m = s.match(/&(amp|lt|gt|lrm|rlm|nbsp);/))) {
          s = s.replace(m[0], unescape1);
        }
        return s;
      }
    
      function shouldAdd(current, element) {
        return !NEEDS_PARENT[element.localName] ||
               NEEDS_PARENT[element.localName] === current.localName;
      }
    
      // Create an element for this tag.
      function createElement(type, annotation) {
        var tagName = TAG_NAME[type];
        if (!tagName) {
          return null;
        }
        var element = window.document.createElement(tagName);
        element.localName = tagName;
        var name = TAG_ANNOTATION[type];
        if (name && annotation) {
          element[name] = annotation.trim();
        }
        return element;
      }
    
      var rootDiv = window.document.createElement("div"),
          current = rootDiv,
          t,
          tagStack = [];
    
      while ((t = nextToken()) !== null) {
        if (t[0] === '<') {
          if (t[1] === "/") {
            // If the closing tag matches, move back up to the parent node.
            if (tagStack.length &&
                tagStack[tagStack.length - 1] === t.substr(2).replace(">", "")) {
              tagStack.pop();
              current = current.parentNode;
            }
            // Otherwise just ignore the end tag.
            continue;
          }
          var ts = parseTimeStamp(t.substr(1, t.length - 2));
          var node;
          if (ts) {
            // Timestamps are lead nodes as well.
            node = window.document.createProcessingInstruction("timestamp", ts);
            current.appendChild(node);
            continue;
          }
          var m = t.match(/^<([^.\s/0-9>]+)(\.[^\s\\>]+)?([^>\\]+)?(\\?)>?$/);
          // If we can't parse the tag, skip to the next tag.
          if (!m) {
            continue;
          }
          // Try to construct an element, and ignore the tag if we couldn't.
          node = createElement(m[1], m[3]);
          if (!node) {
            continue;
          }
          // Determine if the tag should be added based on the context of where it
          // is placed in the cuetext.
          if (!shouldAdd(current, node)) {
            continue;
          }
          // Set the class list (as a list of classes, separated by space).
          if (m[2]) {
            node.className = m[2].substr(1).replace('.', ' ');
          }
          // Append the node to the current node, and enter the scope of the new
          // node.
          tagStack.push(m[1]);
          current.appendChild(node);
          current = node;
          continue;
        }
    
        // Text nodes are leaf nodes.
        current.appendChild(window.document.createTextNode(unescape(t)));
      }
    
      return rootDiv;
    }
    
    // This is a list of all the Unicode characters that have a strong
    // right-to-left category. What this means is that these characters are
    // written right-to-left for sure. It was generated by pulling all the strong
    // right-to-left characters out of the Unicode data table. That table can
    // found at: http://www.unicode.org/Public/UNIDATA/UnicodeData.txt
    var strongRTLRanges = [[0x5be, 0x5be], [0x5c0, 0x5c0], [0x5c3, 0x5c3], [0x5c6, 0x5c6],
     [0x5d0, 0x5ea], [0x5f0, 0x5f4], [0x608, 0x608], [0x60b, 0x60b], [0x60d, 0x60d],
     [0x61b, 0x61b], [0x61e, 0x64a], [0x66d, 0x66f], [0x671, 0x6d5], [0x6e5, 0x6e6],
     [0x6ee, 0x6ef], [0x6fa, 0x70d], [0x70f, 0x710], [0x712, 0x72f], [0x74d, 0x7a5],
     [0x7b1, 0x7b1], [0x7c0, 0x7ea], [0x7f4, 0x7f5], [0x7fa, 0x7fa], [0x800, 0x815],
     [0x81a, 0x81a], [0x824, 0x824], [0x828, 0x828], [0x830, 0x83e], [0x840, 0x858],
     [0x85e, 0x85e], [0x8a0, 0x8a0], [0x8a2, 0x8ac], [0x200f, 0x200f],
     [0xfb1d, 0xfb1d], [0xfb1f, 0xfb28], [0xfb2a, 0xfb36], [0xfb38, 0xfb3c],
     [0xfb3e, 0xfb3e], [0xfb40, 0xfb41], [0xfb43, 0xfb44], [0xfb46, 0xfbc1],
     [0xfbd3, 0xfd3d], [0xfd50, 0xfd8f], [0xfd92, 0xfdc7], [0xfdf0, 0xfdfc],
     [0xfe70, 0xfe74], [0xfe76, 0xfefc], [0x10800, 0x10805], [0x10808, 0x10808],
     [0x1080a, 0x10835], [0x10837, 0x10838], [0x1083c, 0x1083c], [0x1083f, 0x10855],
     [0x10857, 0x1085f], [0x10900, 0x1091b], [0x10920, 0x10939], [0x1093f, 0x1093f],
     [0x10980, 0x109b7], [0x109be, 0x109bf], [0x10a00, 0x10a00], [0x10a10, 0x10a13],
     [0x10a15, 0x10a17], [0x10a19, 0x10a33], [0x10a40, 0x10a47], [0x10a50, 0x10a58],
     [0x10a60, 0x10a7f], [0x10b00, 0x10b35], [0x10b40, 0x10b55], [0x10b58, 0x10b72],
     [0x10b78, 0x10b7f], [0x10c00, 0x10c48], [0x1ee00, 0x1ee03], [0x1ee05, 0x1ee1f],
     [0x1ee21, 0x1ee22], [0x1ee24, 0x1ee24], [0x1ee27, 0x1ee27], [0x1ee29, 0x1ee32],
     [0x1ee34, 0x1ee37], [0x1ee39, 0x1ee39], [0x1ee3b, 0x1ee3b], [0x1ee42, 0x1ee42],
     [0x1ee47, 0x1ee47], [0x1ee49, 0x1ee49], [0x1ee4b, 0x1ee4b], [0x1ee4d, 0x1ee4f],
     [0x1ee51, 0x1ee52], [0x1ee54, 0x1ee54], [0x1ee57, 0x1ee57], [0x1ee59, 0x1ee59],
     [0x1ee5b, 0x1ee5b], [0x1ee5d, 0x1ee5d], [0x1ee5f, 0x1ee5f], [0x1ee61, 0x1ee62],
     [0x1ee64, 0x1ee64], [0x1ee67, 0x1ee6a], [0x1ee6c, 0x1ee72], [0x1ee74, 0x1ee77],
     [0x1ee79, 0x1ee7c], [0x1ee7e, 0x1ee7e], [0x1ee80, 0x1ee89], [0x1ee8b, 0x1ee9b],
     [0x1eea1, 0x1eea3], [0x1eea5, 0x1eea9], [0x1eeab, 0x1eebb], [0x10fffd, 0x10fffd]];
    
    function isStrongRTLChar(charCode) {
      for (var i = 0; i < strongRTLRanges.length; i++) {
        var currentRange = strongRTLRanges[i];
        if (charCode >= currentRange[0] && charCode <= currentRange[1]) {
          return true;
        }
      }
    
      return false;
    }
    
    function determineBidi(cueDiv) {
      var nodeStack = [],
          text = "",
          charCode;
    
      if (!cueDiv || !cueDiv.childNodes) {
        return "ltr";
      }
    
      function pushNodes(nodeStack, node) {
        for (var i = node.childNodes.length - 1; i >= 0; i--) {
          nodeStack.push(node.childNodes[i]);
        }
      }
    
      function nextTextNode(nodeStack) {
        if (!nodeStack || !nodeStack.length) {
          return null;
        }
    
        var node = nodeStack.pop(),
            text = node.textContent || node.innerText;
        if (text) {
          // TODO: This should match all unicode type B characters (paragraph
          // separator characters). See issue #115.
          var m = text.match(/^.*(\n|\r)/);
          if (m) {
            nodeStack.length = 0;
            return m[0];
          }
          return text;
        }
        if (node.tagName === "ruby") {
          return nextTextNode(nodeStack);
        }
        if (node.childNodes) {
          pushNodes(nodeStack, node);
          return nextTextNode(nodeStack);
        }
      }
    
      pushNodes(nodeStack, cueDiv);
      while ((text = nextTextNode(nodeStack))) {
        for (var i = 0; i < text.length; i++) {
          charCode = text.charCodeAt(i);
          if (isStrongRTLChar(charCode)) {
            return "rtl";
          }
        }
      }
      return "ltr";
    }
    
    function computeLinePos(cue) {
      if (typeof cue.line === "number" &&
          (cue.snapToLines || (cue.line >= 0 && cue.line <= 100))) {
        return cue.line;
      }
      if (!cue.track || !cue.track.textTrackList ||
          !cue.track.textTrackList.mediaElement) {
        return -1;
      }
      var track = cue.track,
          trackList = track.textTrackList,
          count = 0;
      for (var i = 0; i < trackList.length && trackList[i] !== track; i++) {
        if (trackList[i].mode === "showing") {
          count++;
        }
      }
      return ++count * -1;
    }
    
    function StyleBox() {
    }
    
    // Apply styles to a div. If there is no div passed then it defaults to the
    // div on 'this'.
    StyleBox.prototype.applyStyles = function(styles, div) {
      div = div || this.div;
      for (var prop in styles) {
        if (styles.hasOwnProperty(prop)) {
          div.style[prop] = styles[prop];
        }
      }
    };
    
    StyleBox.prototype.formatStyle = function(val, unit) {
      return val === 0 ? 0 : val + unit;
    };
    
    // Constructs the computed display state of the cue (a div). Places the div
    // into the overlay which should be a block level element (usually a div).
    function CueStyleBox(window, cue, styleOptions) {
      var isIE8 = (/MSIE\s8\.0/).test(navigator.userAgent);
      var color = "rgba(255, 255, 255, 1)";
      var backgroundColor = "rgba(0, 0, 0, 0.8)";
    
      if (isIE8) {
        color = "rgb(255, 255, 255)";
        backgroundColor = "rgb(0, 0, 0)";
      }
    
      StyleBox.call(this);
      this.cue = cue;
    
      // Parse our cue's text into a DOM tree rooted at 'cueDiv'. This div will
      // have inline positioning and will function as the cue background box.
      this.cueDiv = parseContent(window, cue.text);
      var styles = {
        color: color,
        backgroundColor: backgroundColor,
        position: "relative",
        left: 0,
        right: 0,
        top: 0,
        bottom: 0,
        display: "inline"
      };
    
      if (!isIE8) {
        styles.writingMode = cue.vertical === "" ? "horizontal-tb"
                                                 : cue.vertical === "lr" ? "vertical-lr"
                                                                         : "vertical-rl";
        styles.unicodeBidi = "plaintext";
      }
      this.applyStyles(styles, this.cueDiv);
    
      // Create an absolutely positioned div that will be used to position the cue
      // div. Note, all WebVTT cue-setting alignments are equivalent to the CSS
      // mirrors of them except "middle" which is "center" in CSS.
      this.div = window.document.createElement("div");
      styles = {
        textAlign: cue.align === "middle" ? "center" : cue.align,
        font: styleOptions.font,
        whiteSpace: "pre-line",
        position: "absolute"
      };
    
      if (!isIE8) {
        styles.direction = determineBidi(this.cueDiv);
        styles.writingMode = cue.vertical === "" ? "horizontal-tb"
                                                 : cue.vertical === "lr" ? "vertical-lr"
                                                                         : "vertical-rl".
        stylesunicodeBidi =  "plaintext";
      }
    
      this.applyStyles(styles);
    
      this.div.appendChild(this.cueDiv);
    
      // Calculate the distance from the reference edge of the viewport to the text
      // position of the cue box. The reference edge will be resolved later when
      // the box orientation styles are applied.
      var textPos = 0;
      switch (cue.positionAlign) {
      case "start":
        textPos = cue.position;
        break;
      case "middle":
        textPos = cue.position - (cue.size / 2);
        break;
      case "end":
        textPos = cue.position - cue.size;
        break;
      }
    
      // Horizontal box orientation; textPos is the distance from the left edge of the
      // area to the left edge of the box and cue.size is the distance extending to
      // the right from there.
      if (cue.vertical === "") {
        this.applyStyles({
          left:  this.formatStyle(textPos, "%"),
          width: this.formatStyle(cue.size, "%")
        });
      // Vertical box orientation; textPos is the distance from the top edge of the
      // area to the top edge of the box and cue.size is the height extending
      // downwards from there.
      } else {
        this.applyStyles({
          top: this.formatStyle(textPos, "%"),
          height: this.formatStyle(cue.size, "%")
        });
      }
    
      this.move = function(box) {
        this.applyStyles({
          top: this.formatStyle(box.top, "px"),
          bottom: this.formatStyle(box.bottom, "px"),
          left: this.formatStyle(box.left, "px"),
          right: this.formatStyle(box.right, "px"),
          height: this.formatStyle(box.height, "px"),
          width: this.formatStyle(box.width, "px")
        });
      };
    }
    CueStyleBox.prototype = _objCreate(StyleBox.prototype);
    CueStyleBox.prototype.constructor = CueStyleBox;
    
    // Represents the co-ordinates of an Element in a way that we can easily
    // compute things with such as if it overlaps or intersects with another Element.
    // Can initialize it with either a StyleBox or another BoxPosition.
    function BoxPosition(obj) {
      var isIE8 = (/MSIE\s8\.0/).test(navigator.userAgent);
    
      // Either a BoxPosition was passed in and we need to copy it, or a StyleBox
      // was passed in and we need to copy the results of 'getBoundingClientRect'
      // as the object returned is readonly. All co-ordinate values are in reference
      // to the viewport origin (top left).
      var lh, height, width, top;
      if (obj.div) {
        height = obj.div.offsetHeight;
        width = obj.div.offsetWidth;
        top = obj.div.offsetTop;
    
        var rects = (rects = obj.div.childNodes) && (rects = rects[0]) &&
                    rects.getClientRects && rects.getClientRects();
        obj = obj.div.getBoundingClientRect();
        // In certain cases the outter div will be slightly larger then the sum of
        // the inner div's lines. This could be due to bold text, etc, on some platforms.
        // In this case we should get the average line height and use that. This will
        // result in the desired behaviour.
        lh = rects ? Math.max((rects[0] && rects[0].height) || 0, obj.height / rects.length)
                   : 0;
    
      }
      this.left = obj.left;
      this.right = obj.right;
      this.top = obj.top || top;
      this.height = obj.height || height;
      this.bottom = obj.bottom || (top + (obj.height || height));
      this.width = obj.width || width;
      this.lineHeight = lh !== undefined ? lh : obj.lineHeight;
    
      if (isIE8 && !this.lineHeight) {
        this.lineHeight = 13;
      }
    }
    
    // Move the box along a particular axis. Optionally pass in an amount to move
    // the box. If no amount is passed then the default is the line height of the
    // box.
    BoxPosition.prototype.move = function(axis, toMove) {
      toMove = toMove !== undefined ? toMove : this.lineHeight;
      switch (axis) {
      case "+x":
        this.left += toMove;
        this.right += toMove;
        break;
      case "-x":
        this.left -= toMove;
        this.right -= toMove;
        break;
      case "+y":
        this.top += toMove;
        this.bottom += toMove;
        break;
      case "-y":
        this.top -= toMove;
        this.bottom -= toMove;
        break;
      }
    };
    
    // Check if this box overlaps another box, b2.
    BoxPosition.prototype.overlaps = function(b2) {
      return this.left < b2.right &&
             this.right > b2.left &&
             this.top < b2.bottom &&
             this.bottom > b2.top;
    };
    
    // Check if this box overlaps any other boxes in boxes.
    BoxPosition.prototype.overlapsAny = function(boxes) {
      for (var i = 0; i < boxes.length; i++) {
        if (this.overlaps(boxes[i])) {
          return true;
        }
      }
      return false;
    };
    
    // Check if this box is within another box.
    BoxPosition.prototype.within = function(container) {
      return this.top >= container.top &&
             this.bottom <= container.bottom &&
             this.left >= container.left &&
             this.right <= container.right;
    };
    
    // Check if this box is entirely within the container or it is overlapping
    // on the edge opposite of the axis direction passed. For example, if "+x" is
    // passed and the box is overlapping on the left edge of the container, then
    // return true.
    BoxPosition.prototype.overlapsOppositeAxis = function(container, axis) {
      switch (axis) {
      case "+x":
        return this.left < container.left;
      case "-x":
        return this.right > container.right;
      case "+y":
        return this.top < container.top;
      case "-y":
        return this.bottom > container.bottom;
      }
    };
    
    // Find the percentage of the area that this box is overlapping with another
    // box.
    BoxPosition.prototype.intersectPercentage = function(b2) {
      var x = Math.max(0, Math.min(this.right, b2.right) - Math.max(this.left, b2.left)),
          y = Math.max(0, Math.min(this.bottom, b2.bottom) - Math.max(this.top, b2.top)),
          intersectArea = x * y;
      return intersectArea / (this.height * this.width);
    };
    
    // Convert the positions from this box to CSS compatible positions using
    // the reference container's positions. This has to be done because this
    // box's positions are in reference to the viewport origin, whereas, CSS
    // values are in referecne to their respective edges.
    BoxPosition.prototype.toCSSCompatValues = function(reference) {
      return {
        top: this.top - reference.top,
        bottom: reference.bottom - this.bottom,
        left: this.left - reference.left,
        right: reference.right - this.right,
        height: this.height,
        width: this.width
      };
    };
    
    // Get an object that represents the box's position without anything extra.
    // Can pass a StyleBox, HTMLElement, or another BoxPositon.
    BoxPosition.getSimpleBoxPosition = function(obj) {
      var height = obj.div ? obj.div.offsetHeight : obj.tagName ? obj.offsetHeight : 0;
      var width = obj.div ? obj.div.offsetWidth : obj.tagName ? obj.offsetWidth : 0;
      var top = obj.div ? obj.div.offsetTop : obj.tagName ? obj.offsetTop : 0;
    
      obj = obj.div ? obj.div.getBoundingClientRect() :
                    obj.tagName ? obj.getBoundingClientRect() : obj;
      var ret = {
        left: obj.left,
        right: obj.right,
        top: obj.top || top,
        height: obj.height || height,
        bottom: obj.bottom || (top + (obj.height || height)),
        width: obj.width || width
      };
      return ret;
    };
    
    // Move a StyleBox to its specified, or next best, position. The containerBox
    // is the box that contains the StyleBox, such as a div. boxPositions are
    // a list of other boxes that the styleBox can't overlap with.
    function moveBoxToLinePosition(window, styleBox, containerBox, boxPositions) {
    
      // Find the best position for a cue box, b, on the video. The axis parameter
      // is a list of axis, the order of which, it will move the box along. For example:
      // Passing ["+x", "-x"] will move the box first along the x axis in the positive
      // direction. If it doesn't find a good position for it there it will then move
      // it along the x axis in the negative direction.
      function findBestPosition(b, axis) {
        var bestPosition,
            specifiedPosition = new BoxPosition(b),
            percentage = 1; // Highest possible so the first thing we get is better.
    
        for (var i = 0; i < axis.length; i++) {
          while (b.overlapsOppositeAxis(containerBox, axis[i]) ||
                 (b.within(containerBox) && b.overlapsAny(boxPositions))) {
            b.move(axis[i]);
          }
          // We found a spot where we aren't overlapping anything. This is our
          // best position.
          if (b.within(containerBox)) {
            return b;
          }
          var p = b.intersectPercentage(containerBox);
          // If we're outside the container box less then we were on our last try
          // then remember this position as the best position.
          if (percentage > p) {
            bestPosition = new BoxPosition(b);
            percentage = p;
          }
          // Reset the box position to the specified position.
          b = new BoxPosition(specifiedPosition);
        }
        return bestPosition || specifiedPosition;
      }
    
      var boxPosition = new BoxPosition(styleBox),
          cue = styleBox.cue,
          linePos = computeLinePos(cue),
          axis = [];
    
      // If we have a line number to align the cue to.
      if (cue.snapToLines) {
        var size;
        switch (cue.vertical) {
        case "":
          axis = [ "+y", "-y" ];
          size = "height";
          break;
        case "rl":
          axis = [ "+x", "-x" ];
          size = "width";
          break;
        case "lr":
          axis = [ "-x", "+x" ];
          size = "width";
          break;
        }
    
        var step = boxPosition.lineHeight,
            position = step * Math.round(linePos),
            maxPosition = containerBox[size] + step,
            initialAxis = axis[0];
    
        // If the specified intial position is greater then the max position then
        // clamp the box to the amount of steps it would take for the box to
        // reach the max position.
        if (Math.abs(position) > maxPosition) {
          position = position < 0 ? -1 : 1;
          position *= Math.ceil(maxPosition / step) * step;
        }
    
        // If computed line position returns negative then line numbers are
        // relative to the bottom of the video instead of the top. Therefore, we
        // need to increase our initial position by the length or width of the
        // video, depending on the writing direction, and reverse our axis directions.
        if (linePos < 0) {
          position += cue.vertical === "" ? containerBox.height : containerBox.width;
          axis = axis.reverse();
        }
    
        // Move the box to the specified position. This may not be its best
        // position.
        boxPosition.move(initialAxis, position);
    
      } else {
        // If we have a percentage line value for the cue.
        var calculatedPercentage = (boxPosition.lineHeight / containerBox.height) * 100;
    
        switch (cue.lineAlign) {
        case "middle":
          linePos -= (calculatedPercentage / 2);
          break;
        case "end":
          linePos -= calculatedPercentage;
          break;
        }
    
        // Apply initial line position to the cue box.
        switch (cue.vertical) {
        case "":
          styleBox.applyStyles({
            top: styleBox.formatStyle(linePos, "%")
          });
          break;
        case "rl":
          styleBox.applyStyles({
            left: styleBox.formatStyle(linePos, "%")
          });
          break;
        case "lr":
          styleBox.applyStyles({
            right: styleBox.formatStyle(linePos, "%")
          });
          break;
        }
    
        axis = [ "+y", "-x", "+x", "-y" ];
    
        // Get the box position again after we've applied the specified positioning
        // to it.
        boxPosition = new BoxPosition(styleBox);
      }
    
      var bestPosition = findBestPosition(boxPosition, axis);
      styleBox.move(bestPosition.toCSSCompatValues(containerBox));
    }
    
    function WebVTT$1() {
      // Nothing
    }
    
    // Helper to allow strings to be decoded instead of the default binary utf8 data.
    WebVTT$1.StringDecoder = function() {
      return {
        decode: function(data) {
          if (!data) {
            return "";
          }
          if (typeof data !== "string") {
            throw new Error("Error - expected string data.");
          }
          return decodeURIComponent(encodeURIComponent(data));
        }
      };
    };
    
    WebVTT$1.convertCueToDOMTree = function(window, cuetext) {
      if (!window || !cuetext) {
        return null;
      }
      return parseContent(window, cuetext);
    };
    
    var FONT_SIZE_PERCENT = 0.05;
    var FONT_STYLE = "sans-serif";
    var CUE_BACKGROUND_PADDING = "1.5%";
    
    // Runs the processing model over the cues and regions passed to it.
    // @param overlay A block level element (usually a div) that the computed cues
    //                and regions will be placed into.
    WebVTT$1.processCues = function(window, cues, overlay) {
      if (!window || !cues || !overlay) {
        return null;
      }
    
      // Remove all previous children.
      while (overlay.firstChild) {
        overlay.removeChild(overlay.firstChild);
      }
    
      var paddedOverlay = window.document.createElement("div");
      paddedOverlay.style.position = "absolute";
      paddedOverlay.style.left = "0";
      paddedOverlay.style.right = "0";
      paddedOverlay.style.top = "0";
      paddedOverlay.style.bottom = "0";
      paddedOverlay.style.margin = CUE_BACKGROUND_PADDING;
      overlay.appendChild(paddedOverlay);
    
      // Determine if we need to compute the display states of the cues. This could
      // be the case if a cue's state has been changed since the last computation or
      // if it has not been computed yet.
      function shouldCompute(cues) {
        for (var i = 0; i < cues.length; i++) {
          if (cues[i].hasBeenReset || !cues[i].displayState) {
            return true;
          }
        }
        return false;
      }
    
      // We don't need to recompute the cues' display states. Just reuse them.
      if (!shouldCompute(cues)) {
        for (var i = 0; i < cues.length; i++) {
          paddedOverlay.appendChild(cues[i].displayState);
        }
        return;
      }
    
      var boxPositions = [],
          containerBox = BoxPosition.getSimpleBoxPosition(paddedOverlay),
          fontSize = Math.round(containerBox.height * FONT_SIZE_PERCENT * 100) / 100;
      var styleOptions = {
        font: fontSize + "px " + FONT_STYLE
      };
    
      (function() {
        var styleBox, cue;
    
        for (var i = 0; i < cues.length; i++) {
          cue = cues[i];
    
          // Compute the intial position and styles of the cue div.
          styleBox = new CueStyleBox(window, cue, styleOptions);
          paddedOverlay.appendChild(styleBox.div);
    
          // Move the cue div to it's correct line position.
          moveBoxToLinePosition(window, styleBox, containerBox, boxPositions);
    
          // Remember the computed div so that we don't have to recompute it later
          // if we don't have too.
          cue.displayState = styleBox.div;
    
          boxPositions.push(BoxPosition.getSimpleBoxPosition(styleBox));
        }
      })();
    };
    
    WebVTT$1.Parser = function(window, vttjs, decoder) {
      if (!decoder) {
        decoder = vttjs;
        vttjs = {};
      }
      if (!vttjs) {
        vttjs = {};
      }
    
      this.window = window;
      this.vttjs = vttjs;
      this.state = "INITIAL";
      this.buffer = "";
      this.decoder = decoder || new TextDecoder("utf8");
      this.regionList = [];
    };
    
    WebVTT$1.Parser.prototype = {
      // If the error is a ParsingError then report it to the consumer if
      // possible. If it's not a ParsingError then throw it like normal.
      reportOrThrowError: function(e) {
        if (e instanceof ParsingError) {
          this.onparsingerror && this.onparsingerror(e);
        } else {
          throw e;
        }
      },
      parse: function (data) {
        var self = this;
    
        // If there is no data then we won't decode it, but will just try to parse
        // whatever is in buffer already. This may occur in circumstances, for
        // example when flush() is called.
        if (data) {
          // Try to decode the data that we received.
          self.buffer += self.decoder.decode(data, {stream: true});
        }
    
        function collectNextLine() {
          var buffer = self.buffer;
          var pos = 0;
          while (pos < buffer.length && buffer[pos] !== '\r' && buffer[pos] !== '\n') {
            ++pos;
          }
          var line = buffer.substr(0, pos);
          // Advance the buffer early in case we fail below.
          if (buffer[pos] === '\r') {
            ++pos;
          }
          if (buffer[pos] === '\n') {
            ++pos;
          }
          self.buffer = buffer.substr(pos);
          return line;
        }
    
        // 3.4 WebVTT region and WebVTT region settings syntax
        function parseRegion(input) {
          var settings = new Settings();
    
          parseOptions(input, function (k, v) {
            switch (k) {
            case "id":
              settings.set(k, v);
              break;
            case "width":
              settings.percent(k, v);
              break;
            case "lines":
              settings.integer(k, v);
              break;
            case "regionanchor":
            case "viewportanchor":
              var xy = v.split(',');
              if (xy.length !== 2) {
                break;
              }
              // We have to make sure both x and y parse, so use a temporary
              // settings object here.
              var anchor = new Settings();
              anchor.percent("x", xy[0]);
              anchor.percent("y", xy[1]);
              if (!anchor.has("x") || !anchor.has("y")) {
                break;
              }
              settings.set(k + "X", anchor.get("x"));
              settings.set(k + "Y", anchor.get("y"));
              break;
            case "scroll":
              settings.alt(k, v, ["up"]);
              break;
            }
          }, /=/, /\s/);
    
          // Create the region, using default values for any values that were not
          // specified.
          if (settings.has("id")) {
            var region = new (self.vttjs.VTTRegion || self.window.VTTRegion)();
            region.width = settings.get("width", 100);
            region.lines = settings.get("lines", 3);
            region.regionAnchorX = settings.get("regionanchorX", 0);
            region.regionAnchorY = settings.get("regionanchorY", 100);
            region.viewportAnchorX = settings.get("viewportanchorX", 0);
            region.viewportAnchorY = settings.get("viewportanchorY", 100);
            region.scroll = settings.get("scroll", "");
            // Register the region.
            self.onregion && self.onregion(region);
            // Remember the VTTRegion for later in case we parse any VTTCues that
            // reference it.
            self.regionList.push({
              id: settings.get("id"),
              region: region
            });
          }
        }
    
        // draft-pantos-http-live-streaming-20
        // https://tools.ietf.org/html/draft-pantos-http-live-streaming-20#section-3.5
        // 3.5 WebVTT
        function parseTimestampMap(input) {
          var settings = new Settings();
    
          parseOptions(input, function(k, v) {
            switch(k) {
            case "MPEGT":
              settings.integer(k + 'S', v);
              break;
            case "LOCA":
              settings.set(k + 'L', parseTimeStamp(v));
              break;
            }
          }, /[^\d]:/, /,/);
    
          self.ontimestampmap && self.ontimestampmap({
            "MPEGTS": settings.get("MPEGTS"),
            "LOCAL": settings.get("LOCAL")
          });
        }
    
        // 3.2 WebVTT metadata header syntax
        function parseHeader(input) {
          if (input.match(/X-TIMESTAMP-MAP/)) {
            // This line contains HLS X-TIMESTAMP-MAP metadata
            parseOptions(input, function(k, v) {
              switch(k) {
              case "X-TIMESTAMP-MAP":
                parseTimestampMap(v);
                break;
              }
            }, /=/);
          } else {
            parseOptions(input, function (k, v) {
              switch (k) {
              case "Region":
                // 3.3 WebVTT region metadata header syntax
                parseRegion(v);
                break;
              }
            }, /:/);
          }
    
        }
    
        // 5.1 WebVTT file parsing.
        try {
          var line;
          if (self.state === "INITIAL") {
            // We can't start parsing until we have the first line.
            if (!/\r\n|\n/.test(self.buffer)) {
              return this;
            }
    
            line = collectNextLine();
    
            var m = line.match(/^WEBVTT([ \t].*)?$/);
            if (!m || !m[0]) {
              throw new ParsingError(ParsingError.Errors.BadSignature);
            }
    
            self.state = "HEADER";
          }
    
          var alreadyCollectedLine = false;
          while (self.buffer) {
            // We can't parse a line until we have the full line.
            if (!/\r\n|\n/.test(self.buffer)) {
              return this;
            }
    
            if (!alreadyCollectedLine) {
              line = collectNextLine();
            } else {
              alreadyCollectedLine = false;
            }
    
            switch (self.state) {
            case "HEADER":
              // 13-18 - Allow a header (metadata) under the WEBVTT line.
              if (/:/.test(line)) {
                parseHeader(line);
              } else if (!line) {
                // An empty line terminates the header and starts the body (cues).
                self.state = "ID";
              }
              continue;
            case "NOTE":
              // Ignore NOTE blocks.
              if (!line) {
                self.state = "ID";
              }
              continue;
            case "ID":
              // Check for the start of NOTE blocks.
              if (/^NOTE($|[ \t])/.test(line)) {
                self.state = "NOTE";
                break;
              }
              // 19-29 - Allow any number of line terminators, then initialize new cue values.
              if (!line) {
                continue;
              }
              self.cue = new (self.vttjs.VTTCue || self.window.VTTCue)(0, 0, "");
              self.state = "CUE";
              // 30-39 - Check if self line contains an optional identifier or timing data.
              if (line.indexOf("-->") === -1) {
                self.cue.id = line;
                continue;
              }
              // Process line as start of a cue.
              /*falls through*/
            case "CUE":
              // 40 - Collect cue timings and settings.
              try {
                parseCue(line, self.cue, self.regionList);
              } catch (e) {
                self.reportOrThrowError(e);
                // In case of an error ignore rest of the cue.
                self.cue = null;
                self.state = "BADCUE";
                continue;
              }
              self.state = "CUETEXT";
              continue;
            case "CUETEXT":
              var hasSubstring = line.indexOf("-->") !== -1;
              // 34 - If we have an empty line then report the cue.
              // 35 - If we have the special substring '-->' then report the cue,
              // but do not collect the line as we need to process the current
              // one as a new cue.
              if (!line || hasSubstring && (alreadyCollectedLine = true)) {
                // We are done parsing self cue.
                self.oncue && self.oncue(self.cue);
                self.cue = null;
                self.state = "ID";
                continue;
              }
              if (self.cue.text) {
                self.cue.text += "\n";
              }
              self.cue.text += line;
              continue;
            case "BADCUE": // BADCUE
              // 54-62 - Collect and discard the remaining cue.
              if (!line) {
                self.state = "ID";
              }
              continue;
            }
          }
        } catch (e) {
          self.reportOrThrowError(e);
    
          // If we are currently parsing a cue, report what we have.
          if (self.state === "CUETEXT" && self.cue && self.oncue) {
            self.oncue(self.cue);
          }
          self.cue = null;
          // Enter BADWEBVTT state if header was not parsed correctly otherwise
          // another exception occurred so enter BADCUE state.
          self.state = self.state === "INITIAL" ? "BADWEBVTT" : "BADCUE";
        }
        return this;
      },
      flush: function () {
        var self = this;
        try {
          // Finish decoding the stream.
          self.buffer += self.decoder.decode();
          // Synthesize the end of the current cue or region.
          if (self.cue || self.state === "HEADER") {
            self.buffer += "\n\n";
            self.parse();
          }
          // If we've flushed, parsed, and we're still on the INITIAL state then
          // that means we don't have enough of the stream to parse the first
          // line.
          if (self.state === "INITIAL") {
            throw new ParsingError(ParsingError.Errors.BadSignature);
          }
        } catch(e) {
          self.reportOrThrowError(e);
        }
        self.onflush && self.onflush();
        return this;
      }
    };
    
    var vtt$1 = WebVTT$1;
    
    /**
     * Copyright 2013 vtt.js Contributors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    
    var autoKeyword = "auto";
    var directionSetting = {
      "": true,
      "lr": true,
      "rl": true
    };
    var alignSetting = {
      "start": true,
      "middle": true,
      "end": true,
      "left": true,
      "right": true
    };
    
    function findDirectionSetting(value) {
      if (typeof value !== "string") {
        return false;
      }
      var dir = directionSetting[value.toLowerCase()];
      return dir ? value.toLowerCase() : false;
    }
    
    function findAlignSetting(value) {
      if (typeof value !== "string") {
        return false;
      }
      var align = alignSetting[value.toLowerCase()];
      return align ? value.toLowerCase() : false;
    }
    
    function extend$1(obj) {
      var i = 1;
      for (; i < arguments.length; i++) {
        var cobj = arguments[i];
        for (var p in cobj) {
          obj[p] = cobj[p];
        }
      }
    
      return obj;
    }
    
    function VTTCue(startTime, endTime, text) {
      var cue = this;
      var isIE8 = (/MSIE\s8\.0/).test(navigator.userAgent);
      var baseObj = {};
    
      if (isIE8) {
        cue = document.createElement('custom');
      } else {
        baseObj.enumerable = true;
      }
    
      /**
       * Shim implementation specific properties. These properties are not in
       * the spec.
       */
    
      // Lets us know when the VTTCue's data has changed in such a way that we need
      // to recompute its display state. This lets us compute its display state
      // lazily.
      cue.hasBeenReset = false;
    
      /**
       * VTTCue and TextTrackCue properties
       * http://dev.w3.org/html5/webvtt/#vttcue-interface
       */
    
      var _id = "";
      var _pauseOnExit = false;
      var _startTime = startTime;
      var _endTime = endTime;
      var _text = text;
      var _region = null;
      var _vertical = "";
      var _snapToLines = true;
      var _line = "auto";
      var _lineAlign = "start";
      var _position = 50;
      var _positionAlign = "middle";
      var _size = 50;
      var _align = "middle";
    
      Object.defineProperty(cue,
        "id", extend$1({}, baseObj, {
          get: function() {
            return _id;
          },
          set: function(value) {
            _id = "" + value;
          }
        }));
    
      Object.defineProperty(cue,
        "pauseOnExit", extend$1({}, baseObj, {
          get: function() {
            return _pauseOnExit;
          },
          set: function(value) {
            _pauseOnExit = !!value;
          }
        }));
    
      Object.defineProperty(cue,
        "startTime", extend$1({}, baseObj, {
          get: function() {
            return _startTime;
          },
          set: function(value) {
            if (typeof value !== "number") {
              throw new TypeError("Start time must be set to a number.");
            }
            _startTime = value;
            this.hasBeenReset = true;
          }
        }));
    
      Object.defineProperty(cue,
        "endTime", extend$1({}, baseObj, {
          get: function() {
            return _endTime;
          },
          set: function(value) {
            if (typeof value !== "number") {
              throw new TypeError("End time must be set to a number.");
            }
            _endTime = value;
            this.hasBeenReset = true;
          }
        }));
    
      Object.defineProperty(cue,
        "text", extend$1({}, baseObj, {
          get: function() {
            return _text;
          },
          set: function(value) {
            _text = "" + value;
            this.hasBeenReset = true;
          }
        }));
    
      Object.defineProperty(cue,
        "region", extend$1({}, baseObj, {
          get: function() {
            return _region;
          },
          set: function(value) {
            _region = value;
            this.hasBeenReset = true;
          }
        }));
    
      Object.defineProperty(cue,
        "vertical", extend$1({}, baseObj, {
          get: function() {
            return _vertical;
          },
          set: function(value) {
            var setting = findDirectionSetting(value);
            // Have to check for false because the setting an be an empty string.
            if (setting === false) {
              throw new SyntaxError("An invalid or illegal string was specified.");
            }
            _vertical = setting;
            this.hasBeenReset = true;
          }
        }));
    
      Object.defineProperty(cue,
        "snapToLines", extend$1({}, baseObj, {
          get: function() {
            return _snapToLines;
          },
          set: function(value) {
            _snapToLines = !!value;
            this.hasBeenReset = true;
          }
        }));
    
      Object.defineProperty(cue,
        "line", extend$1({}, baseObj, {
          get: function() {
            return _line;
          },
          set: function(value) {
            if (typeof value !== "number" && value !== autoKeyword) {
              throw new SyntaxError("An invalid number or illegal string was specified.");
            }
            _line = value;
            this.hasBeenReset = true;
          }
        }));
    
      Object.defineProperty(cue,
        "lineAlign", extend$1({}, baseObj, {
          get: function() {
            return _lineAlign;
          },
          set: function(value) {
            var setting = findAlignSetting(value);
            if (!setting) {
              throw new SyntaxError("An invalid or illegal string was specified.");
            }
            _lineAlign = setting;
            this.hasBeenReset = true;
          }
        }));
    
      Object.defineProperty(cue,
        "position", extend$1({}, baseObj, {
          get: function() {
            return _position;
          },
          set: function(value) {
            if (value < 0 || value > 100) {
              throw new Error("Position must be between 0 and 100.");
            }
            _position = value;
            this.hasBeenReset = true;
          }
        }));
    
      Object.defineProperty(cue,
        "positionAlign", extend$1({}, baseObj, {
          get: function() {
            return _positionAlign;
          },
          set: function(value) {
            var setting = findAlignSetting(value);
            if (!setting) {
              throw new SyntaxError("An invalid or illegal string was specified.");
            }
            _positionAlign = setting;
            this.hasBeenReset = true;
          }
        }));
    
      Object.defineProperty(cue,
        "size", extend$1({}, baseObj, {
          get: function() {
            return _size;
          },
          set: function(value) {
            if (value < 0 || value > 100) {
              throw new Error("Size must be between 0 and 100.");
            }
            _size = value;
            this.hasBeenReset = true;
          }
        }));
    
      Object.defineProperty(cue,
        "align", extend$1({}, baseObj, {
          get: function() {
            return _align;
          },
          set: function(value) {
            var setting = findAlignSetting(value);
            if (!setting) {
              throw new SyntaxError("An invalid or illegal string was specified.");
            }
            _align = setting;
            this.hasBeenReset = true;
          }
        }));
    
      /**
       * Other <track> spec defined properties
       */
    
      // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#text-track-cue-display-state
      cue.displayState = undefined;
    
      if (isIE8) {
        return cue;
      }
    }
    
    /**
     * VTTCue methods
     */
    
    VTTCue.prototype.getCueAsHTML = function() {
      // Assume WebVTT.convertCueToDOMTree is on the global.
      return WebVTT.convertCueToDOMTree(window, this.text);
    };
    
    var vttcue = VTTCue;
    
    /**
     * Copyright 2013 vtt.js Contributors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    
    var scrollSetting = {
      "": true,
      "up": true
    };
    
    function findScrollSetting(value) {
      if (typeof value !== "string") {
        return false;
      }
      var scroll = scrollSetting[value.toLowerCase()];
      return scroll ? value.toLowerCase() : false;
    }
    
    function isValidPercentValue(value) {
      return typeof value === "number" && (value >= 0 && value <= 100);
    }
    
    // VTTRegion shim http://dev.w3.org/html5/webvtt/#vttregion-interface
    function VTTRegion() {
      var _width = 100;
      var _lines = 3;
      var _regionAnchorX = 0;
      var _regionAnchorY = 100;
      var _viewportAnchorX = 0;
      var _viewportAnchorY = 100;
      var _scroll = "";
    
      Object.defineProperties(this, {
        "width": {
          enumerable: true,
          get: function() {
            return _width;
          },
          set: function(value) {
            if (!isValidPercentValue(value)) {
              throw new Error("Width must be between 0 and 100.");
            }
            _width = value;
          }
        },
        "lines": {
          enumerable: true,
          get: function() {
            return _lines;
          },
          set: function(value) {
            if (typeof value !== "number") {
              throw new TypeError("Lines must be set to a number.");
            }
            _lines = value;
          }
        },
        "regionAnchorY": {
          enumerable: true,
          get: function() {
            return _regionAnchorY;
          },
          set: function(value) {
            if (!isValidPercentValue(value)) {
              throw new Error("RegionAnchorX must be between 0 and 100.");
            }
            _regionAnchorY = value;
          }
        },
        "regionAnchorX": {
          enumerable: true,
          get: function() {
            return _regionAnchorX;
          },
          set: function(value) {
            if(!isValidPercentValue(value)) {
              throw new Error("RegionAnchorY must be between 0 and 100.");
            }
            _regionAnchorX = value;
          }
        },
        "viewportAnchorY": {
          enumerable: true,
          get: function() {
            return _viewportAnchorY;
          },
          set: function(value) {
            if (!isValidPercentValue(value)) {
              throw new Error("ViewportAnchorY must be between 0 and 100.");
            }
            _viewportAnchorY = value;
          }
        },
        "viewportAnchorX": {
          enumerable: true,
          get: function() {
            return _viewportAnchorX;
          },
          set: function(value) {
            if (!isValidPercentValue(value)) {
              throw new Error("ViewportAnchorX must be between 0 and 100.");
            }
            _viewportAnchorX = value;
          }
        },
        "scroll": {
          enumerable: true,
          get: function() {
            return _scroll;
          },
          set: function(value) {
            var setting = findScrollSetting(value);
            // Have to check for false as an empty string is a legal value.
            if (setting === false) {
              throw new SyntaxError("An invalid or illegal string was specified.");
            }
            _scroll = setting;
          }
        }
      });
    }
    
    var vttregion = VTTRegion;
    
    var browserIndex = createCommonjsModule(function (module) {
    /**
     * Copyright 2013 vtt.js Contributors
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    
    // Default exports for Node. Export the extended versions of VTTCue and
    // VTTRegion in Node since we likely want the capability to convert back and
    // forth between JSON. If we don't then it's not that big of a deal since we're
    // off browser.
    
    
    
    var vttjs = module.exports = {
      WebVTT: vtt$1,
      VTTCue: vttcue,
      VTTRegion: vttregion
    };
    
    window_1.vttjs = vttjs;
    window_1.WebVTT = vttjs.WebVTT;
    
    var cueShim = vttjs.VTTCue;
    var regionShim = vttjs.VTTRegion;
    var nativeVTTCue = window_1.VTTCue;
    var nativeVTTRegion = window_1.VTTRegion;
    
    vttjs.shim = function() {
      window_1.VTTCue = cueShim;
      window_1.VTTRegion = regionShim;
    };
    
    vttjs.restore = function() {
      window_1.VTTCue = nativeVTTCue;
      window_1.VTTRegion = nativeVTTRegion;
    };
    
    if (!window_1.VTTCue) {
      vttjs.shim();
    }
    });
    
    /**
     * @file tech.js
     */
    
    /**
     * An Object containing a structure like: `{src: 'url', type: 'mimetype'}` or string
     * that just contains the src url alone.
     * * `var SourceObject = {src: 'http://ex.com/video.mp4', type: 'video/mp4'};`
       * `var SourceString = 'http://example.com/some-video.mp4';`
     *
     * @typedef {Object|string} Tech~SourceObject
     *
     * @property {string} src
     *           The url to the source
     *
     * @property {string} type
     *           The mime type of the source
     */
    
    /**
     * A function used by {@link Tech} to create a new {@link TextTrack}.
     *
     * @private
     *
     * @param {Tech} self
     *        An instance of the Tech class.
     *
     * @param {string} kind
     *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)
     *
     * @param {string} [label]
     *        Label to identify the text track
     *
     * @param {string} [language]
     *        Two letter language abbreviation
     *
     * @param {Object} [options={}]
     *        An object with additional text track options
     *
     * @return {TextTrack}
     *          The text track that was created.
     */
    function createTrackHelper(self, kind, label, language) {
      var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    
      var tracks = self.textTracks();
    
      options.kind = kind;
    
      if (label) {
        options.label = label;
      }
      if (language) {
        options.language = language;
      }
      options.tech = self;
    
      var track = new ALL.text.TrackClass(options);
    
      tracks.addTrack(track);
    
      return track;
    }
    
    /**
     * This is the base class for media playback technology controllers, such as
     * {@link Flash} and {@link HTML5}
     *
     * @extends Component
     */
    
    var Tech = function (_Component) {
      inherits(Tech, _Component);
    
      /**
       * Create an instance of this Tech.
       *
       * @param {Object} [options]
       *        The key/value store of player options.
       *
       * @param {Component~ReadyCallback} ready
       *        Callback function to call when the `HTML5` Tech is ready.
       */
      function Tech() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var ready = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};
        classCallCheck(this, Tech);
    
        // we don't want the tech to report user activity automatically.
        // This is done manually in addControlsListeners
        options.reportTouchActivity = false;
    
        // keep track of whether the current source has played at all to
        // implement a very limited played()
        var _this = possibleConstructorReturn(this, _Component.call(this, null, options, ready));
    
        _this.hasStarted_ = false;
        _this.on('playing', function () {
          this.hasStarted_ = true;
        });
        _this.on('loadstart', function () {
          this.hasStarted_ = false;
        });
    
        ALL.names.forEach(function (name) {
          var props = ALL[name];
    
          if (options && options[props.getterName]) {
            _this[props.privateName] = options[props.getterName];
          }
        });
    
        // Manually track progress in cases where the browser/flash player doesn't report it.
        if (!_this.featuresProgressEvents) {
          _this.manualProgressOn();
        }
    
        // Manually track timeupdates in cases where the browser/flash player doesn't report it.
        if (!_this.featuresTimeupdateEvents) {
          _this.manualTimeUpdatesOn();
        }
    
        ['Text', 'Audio', 'Video'].forEach(function (track) {
          if (options['native' + track + 'Tracks'] === false) {
            _this['featuresNative' + track + 'Tracks'] = false;
          }
        });
    
        if (options.nativeCaptions === false || options.nativeTextTracks === false) {
          _this.featuresNativeTextTracks = false;
        } else if (options.nativeCaptions === true || options.nativeTextTracks === true) {
          _this.featuresNativeTextTracks = true;
        }
    
        if (!_this.featuresNativeTextTracks) {
          _this.emulateTextTracks();
        }
    
        _this.autoRemoteTextTracks_ = new ALL.text.ListClass();
    
        _this.initTrackListeners();
    
        // Turn on component tap events only if not using native controls
        if (!options.nativeControlsForTouch) {
          _this.emitTapEvents();
        }
    
        if (_this.constructor) {
          _this.name_ = _this.constructor.name || 'Unknown Tech';
        }
        return _this;
      }
    
      /* Fallbacks for unsupported event types
      ================================================================================ */
    
      /**
       * Polyfill the `progress` event for browsers that don't support it natively.
       *
       * @see {@link Tech#trackProgress}
       */
    
    
      Tech.prototype.manualProgressOn = function manualProgressOn() {
        this.on('durationchange', this.onDurationChange);
    
        this.manualProgress = true;
    
        // Trigger progress watching when a source begins loading
        this.one('ready', this.trackProgress);
      };
    
      /**
       * Turn off the polyfill for `progress` events that was created in
       * {@link Tech#manualProgressOn}
       */
    
    
      Tech.prototype.manualProgressOff = function manualProgressOff() {
        this.manualProgress = false;
        this.stopTrackingProgress();
    
        this.off('durationchange', this.onDurationChange);
      };
    
      /**
       * This is used to trigger a `progress` event when the buffered percent changes. It
       * sets an interval function that will be called every 500 milliseconds to check if the
       * buffer end percent has changed.
       *
       * > This function is called by {@link Tech#manualProgressOn}
       *
       * @param {EventTarget~Event} event
       *        The `ready` event that caused this to run.
       *
       * @listens Tech#ready
       * @fires Tech#progress
       */
    
    
      Tech.prototype.trackProgress = function trackProgress(event) {
        this.stopTrackingProgress();
        this.progressInterval = this.setInterval(bind(this, function () {
          // Don't trigger unless buffered amount is greater than last time
    
          var numBufferedPercent = this.bufferedPercent();
    
          if (this.bufferedPercent_ !== numBufferedPercent) {
            /**
             * See {@link Player#progress}
             *
             * @event Tech#progress
             * @type {EventTarget~Event}
             */
            this.trigger('progress');
          }
    
          this.bufferedPercent_ = numBufferedPercent;
    
          if (numBufferedPercent === 1) {
            this.stopTrackingProgress();
          }
        }), 500);
      };
    
      /**
       * Update our internal duration on a `durationchange` event by calling
       * {@link Tech#duration}.
       *
       * @param {EventTarget~Event} event
       *        The `durationchange` event that caused this to run.
       *
       * @listens Tech#durationchange
       */
    
    
      Tech.prototype.onDurationChange = function onDurationChange(event) {
        this.duration_ = this.duration();
      };
    
      /**
       * Get and create a `TimeRange` object for buffering.
       *
       * @return {TimeRange}
       *         The time range object that was created.
       */
    
    
      Tech.prototype.buffered = function buffered() {
        return createTimeRanges(0, 0);
      };
    
      /**
       * Get the percentage of the current video that is currently buffered.
       *
       * @return {number}
       *         A number from 0 to 1 that represents the decimal percentage of the
       *         video that is buffered.
       *
       */
    
    
      Tech.prototype.bufferedPercent = function bufferedPercent$$1() {
        return bufferedPercent(this.buffered(), this.duration_);
      };
    
      /**
       * Turn off the polyfill for `progress` events that was created in
       * {@link Tech#manualProgressOn}
       * Stop manually tracking progress events by clearing the interval that was set in
       * {@link Tech#trackProgress}.
       */
    
    
      Tech.prototype.stopTrackingProgress = function stopTrackingProgress() {
        this.clearInterval(this.progressInterval);
      };
    
      /**
       * Polyfill the `timeupdate` event for browsers that don't support it.
       *
       * @see {@link Tech#trackCurrentTime}
       */
    
    
      Tech.prototype.manualTimeUpdatesOn = function manualTimeUpdatesOn() {
        this.manualTimeUpdates = true;
    
        this.on('play', this.trackCurrentTime);
        this.on('pause', this.stopTrackingCurrentTime);
      };
    
      /**
       * Turn off the polyfill for `timeupdate` events that was created in
       * {@link Tech#manualTimeUpdatesOn}
       */
    
    
      Tech.prototype.manualTimeUpdatesOff = function manualTimeUpdatesOff() {
        this.manualTimeUpdates = false;
        this.stopTrackingCurrentTime();
        this.off('play', this.trackCurrentTime);
        this.off('pause', this.stopTrackingCurrentTime);
      };
    
      /**
       * Sets up an interval function to track current time and trigger `timeupdate` every
       * 250 milliseconds.
       *
       * @listens Tech#play
       * @triggers Tech#timeupdate
       */
    
    
      Tech.prototype.trackCurrentTime = function trackCurrentTime() {
        if (this.currentTimeInterval) {
          this.stopTrackingCurrentTime();
        }
        this.currentTimeInterval = this.setInterval(function () {
          /**
           * Triggered at an interval of 250ms to indicated that time is passing in the video.
           *
           * @event Tech#timeupdate
           * @type {EventTarget~Event}
           */
          this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
    
          // 42 = 24 fps // 250 is what Webkit uses // FF uses 15
        }, 250);
      };
    
      /**
       * Stop the interval function created in {@link Tech#trackCurrentTime} so that the
       * `timeupdate` event is no longer triggered.
       *
       * @listens {Tech#pause}
       */
    
    
      Tech.prototype.stopTrackingCurrentTime = function stopTrackingCurrentTime() {
        this.clearInterval(this.currentTimeInterval);
    
        // #1002 - if the video ends right before the next timeupdate would happen,
        // the progress bar won't make it all the way to the end
        this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
      };
    
      /**
       * Turn off all event polyfills, clear the `Tech`s {@link AudioTrackList},
       * {@link VideoTrackList}, and {@link TextTrackList}, and dispose of this Tech.
       *
       * @fires Component#dispose
       */
    
    
      Tech.prototype.dispose = function dispose() {
    
        // clear out all tracks because we can't reuse them between techs
        this.clearTracks(NORMAL.names);
    
        // Turn off any manual progress or timeupdate tracking
        if (this.manualProgress) {
          this.manualProgressOff();
        }
    
        if (this.manualTimeUpdates) {
          this.manualTimeUpdatesOff();
        }
    
        _Component.prototype.dispose.call(this);
      };
    
      /**
       * Clear out a single `TrackList` or an array of `TrackLists` given their names.
       *
       * > Note: Techs without source handlers should call this between sources for `video`
       *         & `audio` tracks. You don't want to use them between tracks!
       *
       * @param {string[]|string} types
       *        TrackList names to clear, valid names are `video`, `audio`, and
       *        `text`.
       */
    
    
      Tech.prototype.clearTracks = function clearTracks(types) {
        var _this2 = this;
    
        types = [].concat(types);
        // clear out all tracks because we can't reuse them between techs
        types.forEach(function (type) {
          var list = _this2[type + 'Tracks']() || [];
          var i = list.length;
    
          while (i--) {
            var track = list[i];
    
            if (type === 'text') {
              _this2.removeRemoteTextTrack(track);
            }
            list.removeTrack(track);
          }
        });
      };
    
      /**
       * Remove any TextTracks added via addRemoteTextTrack that are
       * flagged for automatic garbage collection
       */
    
    
      Tech.prototype.cleanupAutoTextTracks = function cleanupAutoTextTracks() {
        var list = this.autoRemoteTextTracks_ || [];
        var i = list.length;
    
        while (i--) {
          var track = list[i];
    
          this.removeRemoteTextTrack(track);
        }
      };
    
      /**
       * Reset the tech, which will removes all sources and reset the internal readyState.
       *
       * @abstract
       */
    
    
      Tech.prototype.reset = function reset() {};
    
      /**
       * Get or set an error on the Tech.
       *
       * @param {MediaError} [err]
       *        Error to set on the Tech
       *
       * @return {MediaError|null}
       *         The current error object on the tech, or null if there isn't one.
       */
    
    
      Tech.prototype.error = function error(err) {
        if (err !== undefined) {
          this.error_ = new MediaError(err);
          this.trigger('error');
        }
        return this.error_;
      };
    
      /**
       * Returns the `TimeRange`s that have been played through for the current source.
       *
       * > NOTE: This implementation is incomplete. It does not track the played `TimeRange`.
       *         It only checks wether the source has played at all or not.
       *
       * @return {TimeRange}
       *         - A single time range if this video has played
       *         - An empty set of ranges if not.
       */
    
    
      Tech.prototype.played = function played() {
        if (this.hasStarted_) {
          return createTimeRanges(0, 0);
        }
        return createTimeRanges();
      };
    
      /**
       * Causes a manual time update to occur if {@link Tech#manualTimeUpdatesOn} was
       * previously called.
       *
       * @fires Tech#timeupdate
       */
    
    
      Tech.prototype.setCurrentTime = function setCurrentTime() {
        // improve the accuracy of manual timeupdates
        if (this.manualTimeUpdates) {
          /**
           * A manual `timeupdate` event.
           *
           * @event Tech#timeupdate
           * @type {EventTarget~Event}
           */
          this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
        }
      };
    
      /**
       * Turn on listeners for {@link VideoTrackList}, {@link {AudioTrackList}, and
       * {@link TextTrackList} events.
       *
       * This adds {@link EventTarget~EventListeners} for `addtrack`, and  `removetrack`.
       *
       * @fires Tech#audiotrackchange
       * @fires Tech#videotrackchange
       * @fires Tech#texttrackchange
       */
    
    
      Tech.prototype.initTrackListeners = function initTrackListeners() {
        var _this3 = this;
    
        /**
         * Triggered when tracks are added or removed on the Tech {@link AudioTrackList}
         *
         * @event Tech#audiotrackchange
         * @type {EventTarget~Event}
         */
    
        /**
         * Triggered when tracks are added or removed on the Tech {@link VideoTrackList}
         *
         * @event Tech#videotrackchange
         * @type {EventTarget~Event}
         */
    
        /**
         * Triggered when tracks are added or removed on the Tech {@link TextTrackList}
         *
         * @event Tech#texttrackchange
         * @type {EventTarget~Event}
         */
        NORMAL.names.forEach(function (name) {
          var props = NORMAL[name];
          var trackListChanges = function trackListChanges() {
            _this3.trigger(name + 'trackchange');
          };
    
          var tracks = _this3[props.getterName]();
    
          tracks.addEventListener('removetrack', trackListChanges);
          tracks.addEventListener('addtrack', trackListChanges);
    
          _this3.on('dispose', function () {
            tracks.removeEventListener('removetrack', trackListChanges);
            tracks.removeEventListener('addtrack', trackListChanges);
          });
        });
      };
    
      /**
       * Emulate TextTracks using vtt.js if necessary
       *
       * @fires Tech#vttjsloaded
       * @fires Tech#vttjserror
       */
    
    
      Tech.prototype.addWebVttScript_ = function addWebVttScript_() {
        var _this4 = this;
    
        if (window_1.WebVTT) {
          return;
        }
    
        // Initially, Tech.el_ is a child of a dummy-div wait until the Component system
        // signals that the Tech is ready at which point Tech.el_ is part of the DOM
        // before inserting the WebVTT script
        if (document_1.body.contains(this.el())) {
    
          // load via require if available and vtt.js script location was not passed in
          // as an option. novtt builds will turn the above require call into an empty object
          // which will cause this if check to always fail.
          if (!this.options_['vtt.js'] && isPlain(browserIndex) && Object.keys(browserIndex).length > 0) {
            this.trigger('vttjsloaded');
            return;
          }
    
          // load vtt.js via the script location option or the cdn of no location was
          // passed in
          var script = document_1.createElement('script');
    
          script.src = this.options_['vtt.js'] || 'https://vjs.zencdn.net/vttjs/0.12.4/vtt.min.js';
          script.onload = function () {
            /**
             * Fired when vtt.js is loaded.
             *
             * @event Tech#vttjsloaded
             * @type {EventTarget~Event}
             */
            _this4.trigger('vttjsloaded');
          };
          script.onerror = function () {
            /**
             * Fired when vtt.js was not loaded due to an error
             *
             * @event Tech#vttjsloaded
             * @type {EventTarget~Event}
             */
            _this4.trigger('vttjserror');
          };
          this.on('dispose', function () {
            script.onload = null;
            script.onerror = null;
          });
          // but have not loaded yet and we set it to true before the inject so that
          // we don't overwrite the injected window.WebVTT if it loads right away
          window_1.WebVTT = true;
          this.el().parentNode.appendChild(script);
        } else {
          this.ready(this.addWebVttScript_);
        }
      };
    
      /**
       * Emulate texttracks
       *
       */
    
    
      Tech.prototype.emulateTextTracks = function emulateTextTracks() {
        var _this5 = this;
    
        var tracks = this.textTracks();
        var remoteTracks = this.remoteTextTracks();
        var handleAddTrack = function handleAddTrack(e) {
          return tracks.addTrack(e.track);
        };
        var handleRemoveTrack = function handleRemoveTrack(e) {
          return tracks.removeTrack(e.track);
        };
    
        remoteTracks.on('addtrack', handleAddTrack);
        remoteTracks.on('removetrack', handleRemoveTrack);
    
        this.addWebVttScript_();
    
        var updateDisplay = function updateDisplay() {
          return _this5.trigger('texttrackchange');
        };
    
        var textTracksChanges = function textTracksChanges() {
          updateDisplay();
    
          for (var i = 0; i < tracks.length; i++) {
            var track = tracks[i];
    
            track.removeEventListener('cuechange', updateDisplay);
            if (track.mode === 'showing') {
              track.addEventListener('cuechange', updateDisplay);
            }
          }
        };
    
        textTracksChanges();
        tracks.addEventListener('change', textTracksChanges);
        tracks.addEventListener('addtrack', textTracksChanges);
        tracks.addEventListener('removetrack', textTracksChanges);
    
        this.on('dispose', function () {
          remoteTracks.off('addtrack', handleAddTrack);
          remoteTracks.off('removetrack', handleRemoveTrack);
          tracks.removeEventListener('change', textTracksChanges);
          tracks.removeEventListener('addtrack', textTracksChanges);
          tracks.removeEventListener('removetrack', textTracksChanges);
    
          for (var i = 0; i < tracks.length; i++) {
            var track = tracks[i];
    
            track.removeEventListener('cuechange', updateDisplay);
          }
        });
      };
    
      /**
       * Create and returns a remote {@link TextTrack} object.
       *
       * @param {string} kind
       *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)
       *
       * @param {string} [label]
       *        Label to identify the text track
       *
       * @param {string} [language]
       *        Two letter language abbreviation
       *
       * @return {TextTrack}
       *         The TextTrack that gets created.
       */
    
    
      Tech.prototype.addTextTrack = function addTextTrack(kind, label, language) {
        if (!kind) {
          throw new Error('TextTrack kind is required but was not provided');
        }
    
        return createTrackHelper(this, kind, label, language);
      };
    
      /**
       * Create an emulated TextTrack for use by addRemoteTextTrack
       *
       * This is intended to be overridden by classes that inherit from
       * Tech in order to create native or custom TextTracks.
       *
       * @param {Object} options
       *        The object should contain the options to initialize the TextTrack with.
       *
       * @param {string} [options.kind]
       *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).
       *
       * @param {string} [options.label].
       *        Label to identify the text track
       *
       * @param {string} [options.language]
       *        Two letter language abbreviation.
       *
       * @return {HTMLTrackElement}
       *         The track element that gets created.
       */
    
    
      Tech.prototype.createRemoteTextTrack = function createRemoteTextTrack(options) {
        var track = mergeOptions(options, {
          tech: this
        });
    
        return new REMOTE.remoteTextEl.TrackClass(track);
      };
    
      /**
       * Creates a remote text track object and returns an html track element.
       *
       * > Note: This can be an emulated {@link HTMLTrackElement} or a native one.
       *
       * @param {Object} options
       *        See {@link Tech#createRemoteTextTrack} for more detailed properties.
       *
       * @param {boolean} [manualCleanup=true]
       *        - When false: the TextTrack will be automatically removed from the video
       *          element whenever the source changes
       *        - When True: The TextTrack will have to be cleaned up manually
       *
       * @return {HTMLTrackElement}
       *         An Html Track Element.
       *
       * @deprecated The default functionality for this function will be equivalent
       *             to "manualCleanup=false" in the future. The manualCleanup parameter will
       *             also be removed.
       */
    
    
      Tech.prototype.addRemoteTextTrack = function addRemoteTextTrack() {
        var _this6 = this;
    
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var manualCleanup = arguments[1];
    
        var htmlTrackElement = this.createRemoteTextTrack(options);
    
        if (manualCleanup !== true && manualCleanup !== false) {
          // deprecation warning
          log$1.warn('Calling addRemoteTextTrack without explicitly setting the "manualCleanup" parameter to `true` is deprecated and default to `false` in future version of video.js');
          manualCleanup = true;
        }
    
        // store HTMLTrackElement and TextTrack to remote list
        this.remoteTextTrackEls().addTrackElement_(htmlTrackElement);
        this.remoteTextTracks().addTrack(htmlTrackElement.track);
    
        if (manualCleanup !== true) {
          // create the TextTrackList if it doesn't exist
          this.ready(function () {
            return _this6.autoRemoteTextTracks_.addTrack(htmlTrackElement.track);
          });
        }
    
        return htmlTrackElement;
      };
    
      /**
       * Remove a remote text track from the remote `TextTrackList`.
       *
       * @param {TextTrack} track
       *        `TextTrack` to remove from the `TextTrackList`
       */
    
    
      Tech.prototype.removeRemoteTextTrack = function removeRemoteTextTrack(track) {
        var trackElement = this.remoteTextTrackEls().getTrackElementByTrack_(track);
    
        // remove HTMLTrackElement and TextTrack from remote list
        this.remoteTextTrackEls().removeTrackElement_(trackElement);
        this.remoteTextTracks().removeTrack(track);
        this.autoRemoteTextTracks_.removeTrack(track);
      };
    
      /**
       * Gets available media playback quality metrics as specified by the W3C's Media
       * Playback Quality API.
       *
       * @see [Spec]{@link https://wicg.github.io/media-playback-quality}
       *
       * @return {Object}
       *         An object with supported media playback quality metrics
       *
       * @abstract
       */
    
    
      Tech.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {
        return {};
      };
    
      /**
       * A method to set a poster from a `Tech`.
       *
       * @abstract
       */
    
    
      Tech.prototype.setPoster = function setPoster() {};
    
      /**
       * A method to check for the presence of the 'playsinine' <video> attribute.
       *
       * @abstract
       */
    
    
      Tech.prototype.playsinline = function playsinline() {};
    
      /**
       * A method to set or unset the 'playsinine' <video> attribute.
       *
       * @abstract
       */
    
    
      Tech.prototype.setPlaysinline = function setPlaysinline() {};
    
      /*
       * Check if the tech can support the given mime-type.
       *
       * The base tech does not support any type, but source handlers might
       * overwrite this.
       *
       * @param  {string} type
       *         The mimetype to check for support
       *
       * @return {string}
       *         'probably', 'maybe', or empty string
       *
       * @see [Spec]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType}
       *
       * @abstract
       */
    
    
      Tech.prototype.canPlayType = function canPlayType() {
        return '';
      };
    
      /**
       * Check if the type is supported by this tech.
       *
       * The base tech does not support any type, but source handlers might
       * overwrite this.
       *
       * @param {string} type
       *        The media type to check
       * @return {string} Returns the native video element's response
       */
    
    
      Tech.canPlayType = function canPlayType() {
        return '';
      };
    
      /**
       * Check if the tech can support the given source
       * @param {Object} srcObj
       *        The source object
       * @param {Object} options
       *        The options passed to the tech
       * @return {string} 'probably', 'maybe', or '' (empty string)
       */
    
    
      Tech.canPlaySource = function canPlaySource(srcObj, options) {
        return Tech.canPlayType(srcObj.type);
      };
    
      /*
       * Return whether the argument is a Tech or not.
       * Can be passed either a Class like `Html5` or a instance like `player.tech_`
       *
       * @param {Object} component
       *        The item to check
       *
       * @return {boolean}
       *         Whether it is a tech or not
       *         - True if it is a tech
       *         - False if it is not
       */
    
    
      Tech.isTech = function isTech(component) {
        return component.prototype instanceof Tech || component instanceof Tech || component === Tech;
      };
    
      /**
       * Registers a `Tech` into a shared list for videojs.
       *
       * @param {string} name
       *        Name of the `Tech` to register.
       *
       * @param {Object} tech
       *        The `Tech` class to register.
       */
    
    
      Tech.registerTech = function registerTech(name, tech) {
        if (!Tech.techs_) {
          Tech.techs_ = {};
        }
    
        if (!Tech.isTech(tech)) {
          throw new Error('Tech ' + name + ' must be a Tech');
        }
    
        if (!Tech.canPlayType) {
          throw new Error('Techs must have a static canPlayType method on them');
        }
        if (!Tech.canPlaySource) {
          throw new Error('Techs must have a static canPlaySource method on them');
        }
    
        name = toTitleCase(name);
    
        Tech.techs_[name] = tech;
        if (name !== 'Tech') {
          // camel case the techName for use in techOrder
          Tech.defaultTechOrder_.push(name);
        }
        return tech;
      };
    
      /**
       * Get a `Tech` from the shared list by name.
       *
       * @param {string} name
       *        `camelCase` or `TitleCase` name of the Tech to get
       *
       * @return {Tech|undefined}
       *         The `Tech` or undefined if there was no tech with the name requsted.
       */
    
    
      Tech.getTech = function getTech(name) {
        if (!name) {
          return;
        }
    
        name = toTitleCase(name);
    
        if (Tech.techs_ && Tech.techs_[name]) {
          return Tech.techs_[name];
        }
    
        if (window_1 && window_1.videojs && window_1.videojs[name]) {
          log$1.warn('The ' + name + ' tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)');
          return window_1.videojs[name];
        }
      };
    
      return Tech;
    }(Component);
    
    /**
     * Get the {@link VideoTrackList}
     *
     * @returns {VideoTrackList}
     * @method Tech.prototype.videoTracks
     */
    
    /**
     * Get the {@link AudioTrackList}
     *
     * @returns {AudioTrackList}
     * @method Tech.prototype.audioTracks
     */
    
    /**
     * Get the {@link TextTrackList}
     *
     * @returns {TextTrackList}
     * @method Tech.prototype.textTracks
     */
    
    /**
     * Get the remote element {@link TextTrackList}
     *
     * @returns {TextTrackList}
     * @method Tech.prototype.remoteTextTracks
     */
    
    /**
     * Get the remote element {@link HtmlTrackElementList}
     *
     * @returns {HtmlTrackElementList}
     * @method Tech.prototype.remoteTextTrackEls
     */
    
    ALL.names.forEach(function (name) {
      var props = ALL[name];
    
      Tech.prototype[props.getterName] = function () {
        this[props.privateName] = this[props.privateName] || new props.ListClass();
        return this[props.privateName];
      };
    });
    
    /**
     * List of associated text tracks
     *
     * @type {TextTrackList}
     * @private
     * @property Tech#textTracks_
     */
    
    /**
     * List of associated audio tracks.
     *
     * @type {AudioTrackList}
     * @private
     * @property Tech#audioTracks_
     */
    
    /**
     * List of associated video tracks.
     *
     * @type {VideoTrackList}
     * @private
     * @property Tech#videoTracks_
     */
    
    /**
     * Boolean indicating wether the `Tech` supports volume control.
     *
     * @type {boolean}
     * @default
     */
    Tech.prototype.featuresVolumeControl = true;
    
    /**
     * Boolean indicating wether the `Tech` support fullscreen resize control.
     * Resizing plugins using request fullscreen reloads the plugin
     *
     * @type {boolean}
     * @default
     */
    Tech.prototype.featuresFullscreenResize = false;
    
    /**
     * Boolean indicating wether the `Tech` supports changing the speed at which the video
     * plays. Examples:
     *   - Set player to play 2x (twice) as fast
     *   - Set player to play 0.5x (half) as fast
     *
     * @type {boolean}
     * @default
     */
    Tech.prototype.featuresPlaybackRate = false;
    
    /**
     * Boolean indicating wether the `Tech` supports the `progress` event. This is currently
     * not triggered by video-js-swf. This will be used to determine if
     * {@link Tech#manualProgressOn} should be called.
     *
     * @type {boolean}
     * @default
     */
    Tech.prototype.featuresProgressEvents = false;
    
    /**
     * Boolean indicating wether the `Tech` supports the `timeupdate` event. This is currently
     * not triggered by video-js-swf. This will be used to determine if
     * {@link Tech#manualTimeUpdates} should be called.
     *
     * @type {boolean}
     * @default
     */
    Tech.prototype.featuresTimeupdateEvents = false;
    
    /**
     * Boolean indicating wether the `Tech` supports the native `TextTrack`s.
     * This will help us integrate with native `TextTrack`s if the browser supports them.
     *
     * @type {boolean}
     * @default
     */
    Tech.prototype.featuresNativeTextTracks = false;
    
    /**
     * A functional mixin for techs that want to use the Source Handler pattern.
     * Source handlers are scripts for handling specific formats.
     * The source handler pattern is used for adaptive formats (HLS, DASH) that
     * manually load video data and feed it into a Source Buffer (Media Source Extensions)
     * Example: `Tech.withSourceHandlers.call(MyTech);`
     *
     * @param {Tech} _Tech
     *        The tech to add source handler functions to.
     *
     * @mixes Tech~SourceHandlerAdditions
     */
    Tech.withSourceHandlers = function (_Tech) {
    
      /**
       * Register a source handler
       *
       * @param {Function} handler
       *        The source handler class
       *
       * @param {number} [index]
       *        Register it at the following index
       */
      _Tech.registerSourceHandler = function (handler, index) {
        var handlers = _Tech.sourceHandlers;
    
        if (!handlers) {
          handlers = _Tech.sourceHandlers = [];
        }
    
        if (index === undefined) {
          // add to the end of the list
          index = handlers.length;
        }
    
        handlers.splice(index, 0, handler);
      };
    
      /**
       * Check if the tech can support the given type. Also checks the
       * Techs sourceHandlers.
       *
       * @param {string} type
       *         The mimetype to check.
       *
       * @return {string}
       *         'probably', 'maybe', or '' (empty string)
       */
      _Tech.canPlayType = function (type) {
        var handlers = _Tech.sourceHandlers || [];
        var can = void 0;
    
        for (var i = 0; i < handlers.length; i++) {
          can = handlers[i].canPlayType(type);
    
          if (can) {
            return can;
          }
        }
    
        return '';
      };
    
      /**
       * Returns the first source handler that supports the source.
       *
       * TODO: Answer question: should 'probably' be prioritized over 'maybe'
       *
       * @param {Tech~SourceObject} source
       *        The source object
       *
       * @param {Object} options
       *        The options passed to the tech
       *
       * @return {SourceHandler|null}
       *          The first source handler that supports the source or null if
       *          no SourceHandler supports the source
       */
      _Tech.selectSourceHandler = function (source, options) {
        var handlers = _Tech.sourceHandlers || [];
        var can = void 0;
    
        for (var i = 0; i < handlers.length; i++) {
          can = handlers[i].canHandleSource(source, options);
    
          if (can) {
            return handlers[i];
          }
        }
    
        return null;
      };
    
      /**
       * Check if the tech can support the given source.
       *
       * @param {Tech~SourceObject} srcObj
       *        The source object
       *
       * @param {Object} options
       *        The options passed to the tech
       *
       * @return {string}
       *         'probably', 'maybe', or '' (empty string)
       */
      _Tech.canPlaySource = function (srcObj, options) {
        var sh = _Tech.selectSourceHandler(srcObj, options);
    
        if (sh) {
          return sh.canHandleSource(srcObj, options);
        }
    
        return '';
      };
    
      /**
       * When using a source handler, prefer its implementation of
       * any function normally provided by the tech.
       */
      var deferrable = ['seekable', 'duration'];
    
      /**
       * A wrapper around {@link Tech#seekable} that will call a `SourceHandler`s seekable
       * function if it exists, with a fallback to the Techs seekable function.
       *
       * @method _Tech.seekable
       */
    
      /**
       * A wrapper around {@link Tech#duration} that will call a `SourceHandler`s duration
       * function if it exists, otherwise it will fallback to the techs duration function.
       *
       * @method _Tech.duration
       */
    
      deferrable.forEach(function (fnName) {
        var originalFn = this[fnName];
    
        if (typeof originalFn !== 'function') {
          return;
        }
    
        this[fnName] = function () {
          if (this.sourceHandler_ && this.sourceHandler_[fnName]) {
            return this.sourceHandler_[fnName].apply(this.sourceHandler_, arguments);
          }
          return originalFn.apply(this, arguments);
        };
      }, _Tech.prototype);
    
      /**
       * Create a function for setting the source using a source object
       * and source handlers.
       * Should never be called unless a source handler was found.
       *
       * @param {Tech~SourceObject} source
       *        A source object with src and type keys
       */
      _Tech.prototype.setSource = function (source) {
        var sh = _Tech.selectSourceHandler(source, this.options_);
    
        if (!sh) {
          // Fall back to a native source hander when unsupported sources are
          // deliberately set
          if (_Tech.nativeSourceHandler) {
            sh = _Tech.nativeSourceHandler;
          } else {
            log$1.error('No source hander found for the current source.');
          }
        }
    
        // Dispose any existing source handler
        this.disposeSourceHandler();
        this.off('dispose', this.disposeSourceHandler);
    
        if (sh !== _Tech.nativeSourceHandler) {
          this.currentSource_ = source;
        }
    
        this.sourceHandler_ = sh.handleSource(source, this, this.options_);
        this.on('dispose', this.disposeSourceHandler);
      };
    
      /**
       * Clean up any existing SourceHandlers and listeners when the Tech is disposed.
       *
       * @listens Tech#dispose
       */
      _Tech.prototype.disposeSourceHandler = function () {
        // if we have a source and get another one
        // then we are loading something new
        // than clear all of our current tracks
        if (this.currentSource_) {
          this.clearTracks(['audio', 'video']);
          this.currentSource_ = null;
        }
    
        // always clean up auto-text tracks
        this.cleanupAutoTextTracks();
    
        if (this.sourceHandler_) {
    
          if (this.sourceHandler_.dispose) {
            this.sourceHandler_.dispose();
          }
    
          this.sourceHandler_ = null;
        }
      };
    };
    
    // The base Tech class needs to be registered as a Component. It is the only
    // Tech that can be registered as a Component.
    Component.registerComponent('Tech', Tech);
    Tech.registerTech('Tech', Tech);
    
    /**
     * A list of techs that should be added to techOrder on Players
     *
     * @private
     */
    Tech.defaultTechOrder_ = [];
    
    var middlewares = {};
    
    function use(type, middleware) {
      middlewares[type] = middlewares[type] || [];
      middlewares[type].push(middleware);
    }
    
    
    
    function setSource(player, src, next) {
      player.setTimeout(function () {
        return setSourceHelper(src, middlewares[src.type], next, player);
      }, 1);
    }
    
    function setTech(middleware, tech) {
      middleware.forEach(function (mw) {
        return mw.setTech && mw.setTech(tech);
      });
    }
    
    function get$1(middleware, tech, method) {
      return middleware.reduceRight(middlewareIterator(method), tech[method]());
    }
    
    function set$1(middleware, tech, method, arg) {
      return tech[method](middleware.reduce(middlewareIterator(method), arg));
    }
    
    var allowedGetters = {
      buffered: 1,
      currentTime: 1,
      duration: 1,
      seekable: 1,
      played: 1
    };
    
    var allowedSetters = {
      setCurrentTime: 1
    };
    
    function middlewareIterator(method) {
      return function (value, mw) {
        if (mw[method]) {
          return mw[method](value);
        }
    
        return value;
      };
    }
    
    function setSourceHelper() {
      var src = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var middleware = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var next = arguments[2];
      var player = arguments[3];
      var acc = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
      var lastRun = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
      var mwFactory = middleware[0],
          mwrest = middleware.slice(1);
    
      // if mwFactory is a string, then we're at a fork in the road
    
      if (typeof mwFactory === 'string') {
        setSourceHelper(src, middlewares[mwFactory], next, player, acc, lastRun);
    
        // if we have an mwFactory, call it with the player to get the mw,
        // then call the mw's setSource method
      } else if (mwFactory) {
        var mw = mwFactory(player);
    
        mw.setSource(assign({}, src), function (err, _src) {
    
          // something happened, try the next middleware on the current level
          // make sure to use the old src
          if (err) {
            return setSourceHelper(src, mwrest, next, player, acc, lastRun);
          }
    
          // we've succeeded, now we need to go deeper
          acc.push(mw);
    
          // if it's the same time, continue does the current chain
          // otherwise, we want to go down the new chain
          setSourceHelper(_src, src.type === _src.type ? mwrest : middlewares[_src.type], next, player, acc, lastRun);
        });
      } else if (mwrest.length) {
        setSourceHelper(src, mwrest, next, player, acc, lastRun);
      } else if (lastRun) {
        next(src, acc);
      } else {
        setSourceHelper(src, middlewares['*'], next, player, acc, true);
      }
    }
    
    /**
     * @module filter-source
     */
    /**
     * Filter out single bad source objects or multiple source objects in an
     * array. Also flattens nested source object arrays into a 1 dimensional
     * array of source objects.
     *
     * @param {Tech~SourceObject|Tech~SourceObject[]} src
     *        The src object to filter
     *
     * @return {Tech~SourceObject[]}
     *         An array of sourceobjects containing only valid sources
     *
     * @private
     */
    var filterSource = function filterSource(src) {
      // traverse array
      if (Array.isArray(src)) {
        var newsrc = [];
    
        src.forEach(function (srcobj) {
          srcobj = filterSource(srcobj);
    
          if (Array.isArray(srcobj)) {
            newsrc = newsrc.concat(srcobj);
          } else if (isObject(srcobj)) {
            newsrc.push(srcobj);
          }
        });
    
        src = newsrc;
      } else if (typeof src === 'string' && src.trim()) {
        // convert string into object
        src = [{ src: src }];
      } else if (isObject(src) && typeof src.src === 'string' && src.src && src.src.trim()) {
        // src is already valid
        src = [src];
      } else {
        // invalid source, turn it into an empty array
        src = [];
      }
    
      return src;
    };
    
    /**
     * @file loader.js
     */
    /**
     * The `MediaLoader` is the `Component` that decides which playback technology to load
     * when a player is initialized.
     *
     * @extends Component
     */
    
    var MediaLoader = function (_Component) {
      inherits(MediaLoader, _Component);
    
      /**
       * Create an instance of this class.
       *
       * @param {Player} player
       *        The `Player` that this class should attach to.
       *
       * @param {Object} [options]
       *        The key/value stroe of player options.
       *
       * @param {Component~ReadyCallback} [ready]
       *        The function that is run when this component is ready.
       */
      function MediaLoader(player, options, ready) {
        classCallCheck(this, MediaLoader);
    
        // MediaLoader has no element
        var options_ = mergeOptions({ createEl: false }, options);
    
        // If there are no sources when the player is initialized,
        // load the first supported playback technology.
    
        var _this = possibleConstructorReturn(this, _Component.call(this, player, options_, ready));
    
        if (!options.playerOptions.sources || options.playerOptions.sources.length === 0) {
          for (var i = 0, j = options.playerOptions.techOrder; i < j.length; i++) {
            var techName = toTitleCase(j[i]);
            var tech = Tech.getTech(techName);
    
            // Support old behavior of techs being registered as components.
            // Remove once that deprecated behavior is removed.
            if (!techName) {
              tech = Component.getComponent(techName);
            }
    
            // Check if the browser supports this technology
            if (tech && tech.isSupported()) {
              player.loadTech_(techName);
              break;
            }
          }
        } else {
          // Loop through playback technologies (HTML5, Flash) and check for support.
          // Then load the best source.
          // A few assumptions here:
          //   All playback technologies respect preload false.
          player.src(options.playerOptions.sources);
        }
        return _this;
      }
    
      return MediaLoader;
    }(Component);
    
    Component.registerComponent('MediaLoader', MediaLoader);
    
    /**
     * @file button.js
     */
    /**
     * Clickable Component which is clickable or keyboard actionable,
     * but is not a native HTML button.
     *
     * @extends Component
     */
    
    var ClickableComponent = function (_Component) {
      inherits(ClickableComponent, _Component);
    
      /**
       * Creates an instance of this class.
       *
       * @param  {Player} player
       *         The `Player` that this class should be attached to.
       *
       * @param  {Object} [options]
       *         The key/value store of player options.
       */
      function ClickableComponent(player, options) {
        classCallCheck(this, ClickableComponent);
    
        var _this = possibleConstructorReturn(this, _Component.call(this, player, options));
    
        _this.emitTapEvents();
    
        _this.enable();
        return _this;
      }
    
      /**
       * Create the `Component`s DOM element.
       *
       * @param {string} [tag=div]
       *        The element's node type.
       *
       * @param {Object} [props={}]
       *        An object of properties that should be set on the element.
       *
       * @param {Object} [attributes={}]
       *        An object of attributes that should be set on the element.
       *
       * @return {Element}
       *         The element that gets created.
       */
    
    
      ClickableComponent.prototype.createEl = function createEl$$1() {
        var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'div';
        var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    
        props = assign({
          innerHTML: '<span aria-hidden="true" class="vjs-icon-placeholder"></span>',
          className: this.buildCSSClass(),
          tabIndex: 0
        }, props);
    
        if (tag === 'button') {
          log$1.error('Creating a ClickableComponent with an HTML element of ' + tag + ' is not supported; use a Button instead.');
        }
    
        // Add ARIA attributes for clickable element which is not a native HTML button
        attributes = assign({
          'role': 'button',
    
          // let the screen reader user know that the text of the element may change
          'aria-live': 'polite'
        }, attributes);
    
        this.tabIndex_ = props.tabIndex;
    
        var el = _Component.prototype.createEl.call(this, tag, props, attributes);
    
        this.createControlTextEl(el);
    
        return el;
      };
    
      /**
       * Create a control text element on this `Component`
       *
       * @param {Element} [el]
       *        Parent element for the control text.
       *
       * @return {Element}
       *         The control text element that gets created.
       */
    
    
      ClickableComponent.prototype.createControlTextEl = function createControlTextEl(el) {
        this.controlTextEl_ = createEl('span', {
          className: 'vjs-control-text'
        });
    
        if (el) {
          el.appendChild(this.controlTextEl_);
        }
    
        this.controlText(this.controlText_, el);
    
        return this.controlTextEl_;
      };
    
      /**
       * Get or set the localize text to use for the controls on the `Component`.
       *
       * @param {string} [text]
       *        Control text for element.
       *
       * @param {Element} [el=this.el()]
       *        Element to set the title on.
       *
       * @return {string}
       *         - The control text when getting
       */
    
    
      ClickableComponent.prototype.controlText = function controlText(text) {
        var el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.el();
    
        if (!text) {
          return this.controlText_ || 'Need Text';
        }
    
        var localizedText = this.localize(text);
    
        this.controlText_ = text;
        textContent(this.controlTextEl_, localizedText);
        if (!this.nonIconControl) {
          // Set title attribute if only an icon is shown
          el.setAttribute('title', localizedText);
        }
      };
    
      /**
       * Builds the default DOM `className`.
       *
       * @return {string}
       *         The DOM `className` for this object.
       */
    
    
      ClickableComponent.prototype.buildCSSClass = function buildCSSClass() {
        return 'vjs-control vjs-button ' + _Component.prototype.buildCSSClass.call(this);
      };
    
      /**
       * Enable this `Component`s element.
       */
    
    
      ClickableComponent.prototype.enable = function enable() {
        if (!this.enabled_) {
          this.enabled_ = true;
          this.removeClass('vjs-disabled');
          this.el_.setAttribute('aria-disabled', 'false');
          if (typeof this.tabIndex_ !== 'undefined') {
            this.el_.setAttribute('tabIndex', this.tabIndex_);
          }
          this.on(['tap', 'click'], this.handleClick);
          this.on('focus', this.handleFocus);
          this.on('blur', this.handleBlur);
        }
      };
    
      /**
       * Disable this `Component`s element.
       */
    
    
      ClickableComponent.prototype.disable = function disable() {
        this.enabled_ = false;
        this.addClass('vjs-disabled');
        this.el_.setAttribute('aria-disabled', 'true');
        if (typeof this.tabIndex_ !== 'undefined') {
          this.el_.removeAttribute('tabIndex');
        }
        this.off(['tap', 'click'], this.handleClick);
        this.off('focus', this.handleFocus);
        this.off('blur', this.handleBlur);
      };
    
      /**
       * This gets called when a `ClickableComponent` gets:
       * - Clicked (via the `click` event, listening starts in the constructor)
       * - Tapped (via the `tap` event, listening starts in the constructor)
       * - The following things happen in order:
       *   1. {@link ClickableComponent#handleFocus} is called via a `focus` event on the
       *      `ClickableComponent`.
       *   2. {@link ClickableComponent#handleFocus} adds a listener for `keydown` on using
       *      {@link ClickableComponent#handleKeyPress}.
       *   3. `ClickableComponent` has not had a `blur` event (`blur` means that focus was lost). The user presses
       *      the space or enter key.
       *   4. {@link ClickableComponent#handleKeyPress} calls this function with the `keydown`
       *      event as a parameter.
       *
       * @param {EventTarget~Event} event
       *        The `keydown`, `tap`, or `click` event that caused this function to be
       *        called.
       *
       * @listens tap
       * @listens click
       * @abstract
       */
    
    
      ClickableComponent.prototype.handleClick = function handleClick(event) {};
    
      /**
       * This gets called when a `ClickableComponent` gains focus via a `focus` event.
       * Turns on listening for `keydown` events. When they happen it
       * calls `this.handleKeyPress`.
       *
       * @param {EventTarget~Event} event
       *        The `focus` event that caused this function to be called.
       *
       * @listens focus
       */
    
    
      ClickableComponent.prototype.handleFocus = function handleFocus(event) {
        on(document_1, 'keydown', bind(this, this.handleKeyPress));
      };
    
      /**
       * Called when this ClickableComponent has focus and a key gets pressed down. By
       * default it will call `this.handleClick` when the key is space or enter.
       *
       * @param {EventTarget~Event} event
       *        The `keydown` event that caused this function to be called.
       *
       * @listens keydown
       */
    
    
      ClickableComponent.prototype.handleKeyPress = function handleKeyPress(event) {
    
        // Support Space (32) or Enter (13) key operation to fire a click event
        if (event.which === 32 || event.which === 13) {
          event.preventDefault();
          this.trigger('click');
        } else if (_Component.prototype.handleKeyPress) {
    
          // Pass keypress handling up for unsupported keys
          _Component.prototype.handleKeyPress.call(this, event);
        }
      };
    
      /**
       * Called when a `ClickableComponent` loses focus. Turns off the listener for
       * `keydown` events. Which Stops `this.handleKeyPress` from getting called.
       *
       * @param {EventTarget~Event} event
       *        The `blur` event that caused this function to be called.
       *
       * @listens blur
       */
    
    
      ClickableComponent.prototype.handleBlur = function handleBlur(event) {
        off(document_1, 'keydown', bind(this, this.handleKeyPress));
      };
    
      return ClickableComponent;
    }(Component);
    
    Component.registerComponent('ClickableComponent', ClickableComponent);
    
    /**
     * @file poster-image.js
     */
    /**
     * A `ClickableComponent` that handles showing the poster image for the player.
     *
     * @extends ClickableComponent
     */
    
    var PosterImage = function (_ClickableComponent) {
      inherits(PosterImage, _ClickableComponent);
    
      /**
       * Create an instance of this class.
       *
       * @param {Player} player
       *        The `Player` that this class should attach to.
       *
       * @param {Object} [options]
       *        The key/value store of player options.
       */
      function PosterImage(player, options) {
        classCallCheck(this, PosterImage);
    
        var _this = possibleConstructorReturn(this, _ClickableComponent.call(this, player, options));
    
        _this.update();
        player.on('posterchange', bind(_this, _this.update));
        return _this;
      }
    
      /**
       * Clean up and dispose of the `PosterImage`.
       */
    
    
      PosterImage.prototype.dispose = function dispose() {
        this.player().off('posterchange', this.update);
        _ClickableComponent.prototype.dispose.call(this);
      };
    
      /**
       * Create the `PosterImage`s DOM element.
       *
       * @return {Element}
       *         The element that gets created.
       */
    
    
      PosterImage.prototype.createEl = function createEl$$1() {
        var el = createEl('div', {
          className: 'vjs-poster',
    
          // Don't want poster to be tabbable.
          tabIndex: -1
        });
    
        // To ensure the poster image resizes while maintaining its original aspect
        // ratio, use a div with `background-size` when available. For browsers that
        // do not support `background-size` (e.g. IE8), fall back on using a regular
        // img element.
        if (!BACKGROUND_SIZE_SUPPORTED) {
          this.fallbackImg_ = createEl('img');
          el.appendChild(this.fallbackImg_);
        }
    
        return el;
      };
    
      /**
       * An {@link EventTarget~EventListener} for {@link Player#posterchange} events.
       *
       * @listens Player#posterchange
       *
       * @param {EventTarget~Event} [event]
       *        The `Player#posterchange` event that triggered this function.
       */
    
    
      PosterImage.prototype.update = function update(event) {
        var url = this.player().poster();
    
        this.setSrc(url);
    
        // If there's no poster source we should display:none on this component
        // so it's not still clickable or right-clickable
        if (url) {
          this.show();
        } else {
          this.hide();
        }
      };
    
      /**
       * Set the source of the `PosterImage` depending on the display method.
       *
       * @param {string} url
       *        The URL to the source for the `PosterImage`.
       */
    
    
      PosterImage.prototype.setSrc = function setSrc(url) {
        if (this.fallbackImg_) {
          this.fallbackImg_.src = url;
        } else {
          var backgroundImage = '';
    
          // Any falsey values should stay as an empty string, otherwise
          // this will throw an extra error
          if (url) {
            backgroundImage = 'url("' + url + '")';
          }
    
          this.el_.style.backgroundImage = backgroundImage;
        }
      };
    
      /**
       * An {@link EventTarget~EventListener} for clicks on the `PosterImage`. See
       * {@link ClickableComponent#handleClick} for instances where this will be triggered.
       *
       * @listens tap
       * @listens click
       * @listens keydown
       *
       * @param {EventTarget~Event} event
       +        The `click`, `tap` or `keydown` event that caused this function to be called.
       */
    
    
      PosterImage.prototype.handleClick = function handleClick(event) {
        // We don't want a click to trigger playback when controls are disabled
        if (!this.player_.controls()) {
          return;
        }
    
        if (this.player_.paused()) {
          this.player_.play();
        } else {
          this.player_.pause();
        }
      };
    
      return PosterImage;
    }(ClickableComponent);
    
    Component.registerComponent('PosterImage', PosterImage);
    
    /**
     * @file text-track-display.js
     */
    var darkGray = '#222';
    var lightGray = '#ccc';
    var fontMap = {
      monospace: 'monospace',
      sansSerif: 'sans-serif',
      serif: 'serif',
      monospaceSansSerif: '"Andale Mono", "Lucida Console", monospace',
      monospaceSerif: '"Courier New", monospace',
      proportionalSansSerif: 'sans-serif',
      proportionalSerif: 'serif',
      casual: '"Comic Sans MS", Impact, fantasy',
      script: '"Monotype Corsiva", cursive',
      smallcaps: '"Andale Mono", "Lucida Console", monospace, sans-serif'
    };
    
    /**
     * Construct an rgba color from a given hex color code.
     *
     * @param {number} color
     *        Hex number for color, like #f0e.
     *
     * @param {number} opacity
     *        Value for opacity, 0.0 - 1.0.
     *
     * @return {string}
     *         The rgba color that was created, like 'rgba(255, 0, 0, 0.3)'.
     *
     * @private
     */
    function constructColor(color, opacity) {
      return 'rgba(' +
      // color looks like "#f0e"
      parseInt(color[1] + color[1], 16) + ',' + parseInt(color[2] + color[2], 16) + ',' + parseInt(color[3] + color[3], 16) + ',' + opacity + ')';
    }
    
    /**
     * Try to update the style of a DOM element. Some style changes will throw an error,
     * particularly in IE8. Those should be noops.
     *
     * @param {Element} el
     *        The DOM element to be styled.
     *
     * @param {string} style
     *        The CSS property on the element that should be styled.
     *
     * @param {string} rule
     *        The style rule that should be applied to the property.
     *
     * @private
     */
    function tryUpdateStyle(el, style, rule) {
      try {
        el.style[style] = rule;
      } catch (e) {
    
        // Satisfies linter.
        return;
      }
    }
    
    /**
     * The component for displaying text track cues.
     *
     * @extends Component
     */
    
    var TextTrackDisplay = function (_Component) {
      inherits(TextTrackDisplay, _Component);
    
      /**
       * Creates an instance of this class.
       *
       * @param {Player} player
       *        The `Player` that this class should be attached to.
       *
       * @param {Object} [options]
       *        The key/value store of player options.
       *
       * @param {Component~ReadyCallback} [ready]
       *        The function to call when `TextTrackDisplay` is ready.
       */
      function TextTrackDisplay(player, options, ready) {
        classCallCheck(this, TextTrackDisplay);
    
        var _this = possibleConstructorReturn(this, _Component.call(this, player, options, ready));
    
        player.on('loadstart', bind(_this, _this.toggleDisplay));
        player.on('texttrackchange', bind(_this, _this.updateDisplay));
        player.on('loadstart', bind(_this, _this.preselectTrack));
    
        // This used to be called during player init, but was causing an error
        // if a track should show by default and the display hadn't loaded yet.
        // Should probably be moved to an external track loader when we support
        // tracks that don't need a display.
        player.ready(bind(_this, function () {
          if (player.tech_ && player.tech_.featuresNativeTextTracks) {
            this.hide();
            return;
          }
    
          player.on('fullscreenchange', bind(this, this.updateDisplay));
    
          var tracks = this.options_.playerOptions.tracks || [];
    
          for (var i = 0; i < tracks.length; i++) {
            this.player_.addRemoteTextTrack(tracks[i], true);
          }
    
          this.preselectTrack();
        }));
        return _this;
      }
    
      /**
      * Preselect a track following this precedence:
      * - matches the previously selected {@link TextTrack}'s language and kind
      * - matches the previously selected {@link TextTrack}'s language only
      * - is the first default captions track
      * - is the first default descriptions track
      *
      * @listens Player#loadstart
      */
    
    
      TextTrackDisplay.prototype.preselectTrack = function preselectTrack() {
        var modes = { captions: 1, subtitles: 1 };
        var trackList = this.player_.textTracks();
        var userPref = this.player_.cache_.selectedLanguage;
        var firstDesc = void 0;
        var firstCaptions = void 0;
        var preferredTrack = void 0;
    
        for (var i = 0; i < trackList.length; i++) {
          var track = trackList[i];
    
          if (userPref && userPref.enabled && userPref.language === track.language) {
            // Always choose the track that matches both language and kind
            if (track.kind === userPref.kind) {
              preferredTrack = track;
              // or choose the first track that matches language
            } else if (!preferredTrack) {
              preferredTrack = track;
            }
    
            // clear everything if offTextTrackMenuItem was clicked
          } else if (userPref && !userPref.enabled) {
            preferredTrack = null;
            firstDesc = null;
            firstCaptions = null;
          } else if (track['default']) {
            if (track.kind === 'descriptions' && !firstDesc) {
              firstDesc = track;
            } else if (track.kind in modes && !firstCaptions) {
              firstCaptions = track;
            }
          }
        }
    
        // The preferredTrack matches the user preference and takes
        // precendence over all the other tracks.
        // So, display the preferredTrack before the first default track
        // and the subtitles/captions track before the descriptions track
        if (preferredTrack) {
          preferredTrack.mode = 'showing';
        } else if (firstCaptions) {
          firstCaptions.mode = 'showing';
        } else if (firstDesc) {
          firstDesc.mode = 'showing';
        }
      };
    
      /**
       * Turn display of {@link TextTrack}'s from the current state into the other state.
       * There are only two states:
       * - 'shown'
       * - 'hidden'
       *
       * @listens Player#loadstart
       */
    
    
      TextTrackDisplay.prototype.toggleDisplay = function toggleDisplay() {
        if (this.player_.tech_ && this.player_.tech_.featuresNativeTextTracks) {
          this.hide();
        } else {
          this.show();
        }
      };
    
      /**
       * Create the {@link Component}'s DOM element.
       *
       * @return {Element}
       *         The element that was created.
       */
    
    
      TextTrackDisplay.prototype.createEl = function createEl() {
        return _Component.prototype.createEl.call(this, 'div', {
          className: 'vjs-text-track-display'
        }, {
          'aria-live': 'off',
          'aria-atomic': 'true'
        });
      };
    
      /**
       * Clear all displayed {@link TextTrack}s.
       */
    
    
      TextTrackDisplay.prototype.clearDisplay = function clearDisplay() {
        if (typeof window_1.WebVTT === 'function') {
          window_1.WebVTT.processCues(window_1, [], this.el_);
        }
      };
    
      /**
       * Update the displayed TextTrack when a either a {@link Player#texttrackchange} or
       * a {@link Player#fullscreenchange} is fired.
       *
       * @listens Player#texttrackchange
       * @listens Player#fullscreenchange
       */
    
    
      TextTrackDisplay.prototype.updateDisplay = function updateDisplay() {
        var tracks = this.player_.textTracks();
    
        this.clearDisplay();
    
        // Track display prioritization model: if multiple tracks are 'showing',
        //  display the first 'subtitles' or 'captions' track which is 'showing',
        //  otherwise display the first 'descriptions' track which is 'showing'
    
        var descriptionsTrack = null;
        var captionsSubtitlesTrack = null;
        var i = tracks.length;
    
        while (i--) {
          var track = tracks[i];
    
          if (track.mode === 'showing') {
            if (track.kind === 'descriptions') {
              descriptionsTrack = track;
            } else {
              captionsSubtitlesTrack = track;
            }
          }
        }
    
        if (captionsSubtitlesTrack) {
          if (this.getAttribute('aria-live') !== 'off') {
            this.setAttribute('aria-live', 'off');
          }
          this.updateForTrack(captionsSubtitlesTrack);
        } else if (descriptionsTrack) {
          if (this.getAttribute('aria-live') !== 'assertive') {
            this.setAttribute('aria-live', 'assertive');
          }
          this.updateForTrack(descriptionsTrack);
        }
      };
    
      /**
       * Add an {@link Texttrack} to to the {@link Tech}s {@link TextTrackList}.
       *
       * @param {TextTrack} track
       *        Text track object to be added to the list.
       */
    
    
      TextTrackDisplay.prototype.updateForTrack = function updateForTrack(track) {
        if (typeof window_1.WebVTT !== 'function' || !track.activeCues) {
          return;
        }
    
        var overrides = this.player_.textTrackSettings.getValues();
        var cues = [];
    
        for (var _i = 0; _i < track.activeCues.length; _i++) {
          cues.push(track.activeCues[_i]);
        }
    
        window_1.WebVTT.processCues(window_1, cues, this.el_);
    
        var i = cues.length;
    
        while (i--) {
          var cue = cues[i];
    
          if (!cue) {
            continue;
          }
    
          var cueDiv = cue.displayState;
    
          if (overrides.color) {
            cueDiv.firstChild.style.color = overrides.color;
          }
          if (overrides.textOpacity) {
            tryUpdateStyle(cueDiv.firstChild, 'color', constructColor(overrides.color || '#fff', overrides.textOpacity));
          }
          if (overrides.backgroundColor) {
            cueDiv.firstChild.style.backgroundColor = overrides.backgroundColor;
          }
          if (overrides.backgroundOpacity) {
            tryUpdateStyle(cueDiv.firstChild, 'backgroundColor', constructColor(overrides.backgroundColor || '#000', overrides.backgroundOpacity));
          }
          if (overrides.windowColor) {
            if (overrides.windowOpacity) {
              tryUpdateStyle(cueDiv, 'backgroundColor', constructColor(overrides.windowColor, overrides.windowOpacity));
            } else {
              cueDiv.style.backgroundColor = overrides.windowColor;
            }
          }
          if (overrides.edgeStyle) {
            if (overrides.edgeStyle === 'dropshadow') {
              cueDiv.firstChild.style.textShadow = '2px 2px 3px ' + darkGray + ', 2px 2px 4px ' + darkGray + ', 2px 2px 5px ' + darkGray;
            } else if (overrides.edgeStyle === 'raised') {
              cueDiv.firstChild.style.textShadow = '1px 1px ' + darkGray + ', 2px 2px ' + darkGray + ', 3px 3px ' + darkGray;
            } else if (overrides.edgeStyle === 'depressed') {
              cueDiv.firstChild.style.textShadow = '1px 1px ' + lightGray + ', 0 1px ' + lightGray + ', -1px -1px ' + darkGray + ', 0 -1px ' + darkGray;
            } else if (overrides.edgeStyle === 'uniform') {
              cueDiv.firstChild.style.textShadow = '0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray;
            }
          }
          if (overrides.fontPercent && overrides.fontPercent !== 1) {
            var fontSize = window_1.parseFloat(cueDiv.style.fontSize);
    
            cueDiv.style.fontSize = fontSize * overrides.fontPercent + 'px';
            cueDiv.style.height = 'auto';
            cueDiv.style.top = 'auto';
            cueDiv.style.bottom = '2px';
          }
          if (overrides.fontFamily && overrides.fontFamily !== 'default') {
            if (overrides.fontFamily === 'small-caps') {
              cueDiv.firstChild.style.fontVariant = 'small-caps';
            } else {
              cueDiv.firstChild.style.fontFamily = fontMap[overrides.fontFamily];
            }
          }
        }
      };
    
      return TextTrackDisplay;
    }(Component);
    
    Component.registerComponent('TextTrackDisplay', TextTrackDisplay);
    
    /**
     * @file loading-spinner.js
     */
    /**
     * A loading spinner for use during waiting/loading events.
     *
     * @extends Component
     */
    
    var LoadingSpinner = function (_Component) {
      inherits(LoadingSpinner, _Component);
    
      function LoadingSpinner() {
        classCallCheck(this, LoadingSpinner);
        return possibleConstructorReturn(this, _Component.apply(this, arguments));
      }
    
      /**
       * Create the `LoadingSpinner`s DOM element.
       *
       * @return {Element}
       *         The dom element that gets created.
       */
      LoadingSpinner.prototype.createEl = function createEl() {
        return _Component.prototype.createEl.call(this, 'div', {
          className: 'vjs-loading-spinner',
          dir: 'ltr'
        });
      };
    
      return LoadingSpinner;
    }(Component);
    
    Component.registerComponent('LoadingSpinner', LoadingSpinner);
    
    /**
     * @file button.js
     */
    /**
     * Base class for all buttons.
     *
     * @extends ClickableComponent
     */
    
    var Button = function (_ClickableComponent) {
      inherits(Button, _ClickableComponent);
    
      function Button() {
        classCallCheck(this, Button);
        return possibleConstructorReturn(this, _ClickableComponent.apply(this, arguments));
      }
    
      /**
       * Create the `Button`s DOM element.
       *
       * @param {string} [tag="button"]
       *        The element's node type. This argument is IGNORED: no matter what
       *        is passed, it will always create a `button` element.
       *
       * @param {Object} [props={}]
       *        An object of properties that should be set on the element.
       *
       * @param {Object} [attributes={}]
       *        An object of attributes that should be set on the element.
       *
       * @return {Element}
       *         The element that gets created.
       */
      Button.prototype.createEl = function createEl(tag) {
        var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    
        tag = 'button';
    
        props = assign({
          innerHTML: '<span aria-hidden="true" class="vjs-icon-placeholder"></span>',
          className: this.buildCSSClass()
        }, props);
    
        // Add attributes for button element
        attributes = assign({
    
          // Necessary since the default button type is "submit"
          'type': 'button',
    
          // let the screen reader user know that the text of the button may change
          'aria-live': 'polite'
        }, attributes);
    
        var el = Component.prototype.createEl.call(this, tag, props, attributes);
    
        this.createControlTextEl(el);
    
        return el;
      };
    
      /**
       * Add a child `Component` inside of this `Button`.
       *
       * @param {string|Component} child
       *        The name or instance of a child to add.
       *
       * @param {Object} [options={}]
       *        The key/value store of options that will get passed to children of
       *        the child.
       *
       * @return {Component}
       *         The `Component` that gets added as a child. When using a string the
       *         `Component` will get created by this process.
       *
       * @deprecated since version 5
       */
    
    
      Button.prototype.addChild = function addChild(child) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    
        var className = this.constructor.name;
    
        log$1.warn('Adding an actionable (user controllable) child to a Button (' + className + ') is not supported; use a ClickableComponent instead.');
    
        // Avoid the error message generated by ClickableComponent's addChild method
        return Component.prototype.addChild.call(this, child, options);
      };
    
      /**
       * Enable the `Button` element so that it can be activated or clicked. Use this with
       * {@link Button#disable}.
       */
    
    
      Button.prototype.enable = function enable() {
        _ClickableComponent.prototype.enable.call(this);
        this.el_.removeAttribute('disabled');
      };
    
      /**
       * Enable the `Button` element so that it cannot be activated or clicked. Use this with
       * {@link Button#enable}.
       */
    
    
      Button.prototype.disable = function disable() {
        _ClickableComponent.prototype.disable.call(this);
        this.el_.setAttribute('disabled', 'disabled');
      };
    
      /**
       * This gets called when a `Button` has focus and `keydown` is triggered via a key
       * press.
       *
       * @param {EventTarget~Event} event
       *        The event that caused this function to get called.
       *
       * @listens keydown
       */
    
    
      Button.prototype.handleKeyPress = function handleKeyPress(event) {
    
        // Ignore Space (32) or Enter (13) key operation, which is handled by the browser for a button.
        if (event.which === 32 || event.which === 13) {
          return;
        }
    
        // Pass keypress handling up for unsupported keys
        _ClickableComponent.prototype.handleKeyPress.call(this, event);
      };
    
      return Button;
    }(ClickableComponent);
    
    Component.registerComponent('Button', Button);
    
    /**
     * @file big-play-button.js
     */
    /**
     * The initial play button that shows before the video has played. The hiding of the
     * `BigPlayButton` get done via CSS and `Player` states.
     *
     * @extends Button
     */
    
    var BigPlayButton = function (_Button) {
      inherits(BigPlayButton, _Button);
    
      function BigPlayButton(player, options) {
        classCallCheck(this, BigPlayButton);
    
        var _this = possibleConstructorReturn(this, _Button.call(this, player, options));
    
        _this.mouseused_ = false;
    
        _this.on('mousedown', _this.handleMouseDown);
        return _this;
      }
    
      /**
       * Builds the default DOM `className`.
       *
       * @return {string}
       *         The DOM `className` for this object. Always returns 'vjs-big-play-button'.
       */
    
    
      BigPlayButton.prototype.buildCSSClass = function buildCSSClass() {
        return 'vjs-big-play-button';
      };
    
      /**
       * This gets called when a `BigPlayButton` "clicked". See {@link ClickableComponent}
       * for more detailed information on what a click can be.
       *
       * @param {EventTarget~Event} event
       *        The `keydown`, `tap`, or `click` event that caused this function to be
       *        called.
       *
       * @listens tap
       * @listens click
       */
    
    
      BigPlayButton.prototype.handleClick = function handleClick(event) {
        var playPromise = this.player_.play();
    
        // exit early if clicked via the mouse
        if (this.mouseused_ && event.clientX && event.clientY) {
          return;
        }
    
        var cb = this.player_.getChild('controlBar');
        var playToggle = cb && cb.getChild('playToggle');
    
        if (!playToggle) {
          this.player_.focus();
          return;
        }
    
        var playFocus = function playFocus() {
          return playToggle.focus();
        };
    
        if (playPromise && playPromise.then) {
          var ignoreRejectedPlayPromise = function ignoreRejectedPlayPromise() {};
    
          playPromise.then(playFocus, ignoreRejectedPlayPromise);
        } else {
          this.setTimeout(playFocus, 1);
        }
      };
    
      BigPlayButton.prototype.handleKeyPress = function handleKeyPress(event) {
        this.mouseused_ = false;
    
        _Button.prototype.handleKeyPress.call(this, event);
      };
    
      BigPlayButton.prototype.handleMouseDown = function handleMouseDown(event) {
        this.mouseused_ = true;
      };
    
      return BigPlayButton;
    }(Button);
    
    /**
     * The text that should display over the `BigPlayButton`s controls. Added to for localization.
     *
     * @type {string}
     * @private
     */
    
    
    BigPlayButton.prototype.controlText_ = 'Play Video';
    
    Component.registerComponent('BigPlayButton', BigPlayButton);
    
    /**
     * @file close-button.js
     */
    /**
     * The `CloseButton` is a `{@link Button}` that fires a `close` event when
     * it gets clicked.
     *
     * @extends Button
     */
    
    var CloseButton = function (_Button) {
      inherits(CloseButton, _Button);
    
      /**
       * Creates an instance of the this class.
       *
       * @param  {Player} player
       *         The `Player` that this class should be attached to.
       *
       * @param  {Object} [options]
       *         The key/value store of player options.
       */
      function CloseButton(player, options) {
        classCallCheck(this, CloseButton);
    
        var _this = possibleConstructorReturn(this, _Button.call(this, player, options));
    
        _this.controlText(options && options.controlText || _this.localize('Close'));
        return _this;
      }
    
      /**
       * Builds the default DOM `className`.
       *
       * @return {string}
       *         The DOM `className` for this object.
       */
    
    
      CloseButton.prototype.buildCSSClass = function buildCSSClass() {
        return 'vjs-close-button ' + _Button.prototype.buildCSSClass.call(this);
      };
    
      /**
       * This gets called when a `CloseButton` gets clicked. See
       * {@link ClickableComponent#handleClick} for more information on when this will be
       * triggered
       *
       * @param {EventTarget~Event} event
       *        The `keydown`, `tap`, or `click` event that caused this function to be
       *        called.
       *
       * @listens tap
       * @listens click
       * @fires CloseButton#close
       */
    
    
      CloseButton.prototype.handleClick = function handleClick(event) {
    
        /**
         * Triggered when the a `CloseButton` is clicked.
         *
         * @event CloseButton#close
         * @type {EventTarget~Event}
         *
         * @property {boolean} [bubbles=false]
         *           set to false so that the close event does not
         *           bubble up to parents if there is no listener
         */
        this.trigger({ type: 'close', bubbles: false });
      };
    
      return CloseButton;
    }(Button);
    
    Component.registerComponent('CloseButton', CloseButton);
    
    /**
     * @file play-toggle.js
     */
    /**
     * Button to toggle between play and pause.
     *
     * @extends Button
     */
    
    var PlayToggle = function (_Button) {
      inherits(PlayToggle, _Button);
    
      /**
       * Creates an instance of this class.
       *
       * @param {Player} player
       *        The `Player` that this class should be attached to.
       *
       * @param {Object} [options]
       *        The key/value store of player options.
       */
      function PlayToggle(player, options) {
        classCallCheck(this, PlayToggle);
    
        var _this = possibleConstructorReturn(this, _Button.call(this, player, options));
    
        _this.on(player, 'play', _this.handlePlay);
        _this.on(player, 'pause', _this.handlePause);
        _this.on(player, 'ended', _this.handleEnded);
        return _this;
      }
    
      /**
       * Builds the default DOM `className`.
       *
       * @return {string}
       *         The DOM `className` for this object.
       */
    
    
      PlayToggle.prototype.buildCSSClass = function buildCSSClass() {
        return 'vjs-play-control ' + _Button.prototype.buildCSSClass.call(this);
      };
    
      /**
       * This gets called when an `PlayToggle` is "clicked". See
       * {@link ClickableComponent} for more detailed information on what a click can be.
       *
       * @param {EventTarget~Event} [event]
       *        The `keydown`, `tap`, or `click` event that caused this function to be
       *        called.
       *
       * @listens tap
       * @listens click
       */
    
    
      PlayToggle.prototype.handleClick = function handleClick(event) {
        if (this.player_.paused()) {
          this.player_.play();
        } else {
          this.player_.pause();
        }
      };
    
      /**
       * Add the vjs-playing class to the element so it can change appearance.
       *
       * @param {EventTarget~Event} [event]
       *        The event that caused this function to run.
       *
       * @listens Player#play
       */
    
    
      PlayToggle.prototype.handlePlay = function handlePlay(event) {
        this.removeClass('vjs-ended');
        this.removeClass('vjs-paused');
        this.addClass('vjs-playing');
        // change the button text to "Pause"
        this.controlText('Pause');
      };
    
      /**
       * Add the vjs-paused class to the element so it can change appearance.
       *
       * @param {EventTarget~Event} [event]
       *        The event that caused this function to run.
       *
       * @listens Player#pause
       */
    
    
      PlayToggle.prototype.handlePause = function handlePause(event) {
        this.removeClass('vjs-playing');
        this.addClass('vjs-paused');
        // change the button text to "Play"
        this.controlText('Play');
      };
    
      /**
       * Add the vjs-ended class to the element so it can change appearance
       *
       */
    
    
      PlayToggle.prototype.handleEnded = function handleEnded(event) {
        this.removeClass('vjs-playing');
        this.addClass('vjs-ended');
        // change the button text to "Replay"
        this.controlText('Replay');
      };
    
      return PlayToggle;
    }(Button);
    
    /**
     * The text that should display over the `PlayToggle`s controls. Added for localization.
     *
     * @type {string}
     * @private
     */
    
    
    PlayToggle.prototype.controlText_ = 'Play';
    
    Component.registerComponent('PlayToggle', PlayToggle);
    
    /**
     * @file format-time.js
     * @module Format-time
     */
    
    /**
     * Format seconds as a time string, H:MM:SS or M:SS. Supplying a guide (in seconds)
     * will force a number of leading zeros to cover the length of the guide.
     *
     * @param {number} seconds
     *        Number of seconds to be turned into a string
     *
     * @param {number} guide
     *        Number (in seconds) to model the string after
     *
     * @return {string}
     *         Time formatted as H:MM:SS or M:SS
     */
    function formatTime(seconds) {
      var guide = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : seconds;
    
      seconds = seconds < 0 ? 0 : seconds;
      var s = Math.floor(seconds % 60);
      var m = Math.floor(seconds / 60 % 60);
      var h = Math.floor(seconds / 3600);
      var gm = Math.floor(guide / 60 % 60);
      var gh = Math.floor(guide / 3600);
    
      // handle invalid times
      if (isNaN(seconds) || seconds === Infinity) {
        // '-' is false for all relational operators (e.g. <, >=) so this setting
        // will add the minimum number of fields specified by the guide
        h = m = s = '-';
      }
    
      // Check if we need to show hours
      h = h > 0 || gh > 0 ? h + ':' : '';
    
      // If hours are showing, we may need to add a leading zero.
      // Always show at least one digit of minutes.
      m = ((h || gm >= 10) && m < 10 ? '0' + m : m) + ':';
    
      // Check if leading zero is need for seconds
      s = s < 10 ? '0' + s : s;
    
      return h + m + s;
    }
    
    /**
     * @file current-time-display.js
     */
    /**
     * Displays the current time
     *
     * @extends Component
     */
    
    var CurrentTimeDisplay = function (_Component) {
      inherits(CurrentTimeDisplay, _Component);
    
      /**
       * Creates an instance of this class.
       *
       * @param {Player} player
       *        The `Player` that this class should be attached to.
       *
       * @param {Object} [options]
       *        The key/value store of player options.
       */
      function CurrentTimeDisplay(player, options) {
        classCallCheck(this, CurrentTimeDisplay);
    
        var _this = possibleConstructorReturn(this, _Component.call(this, player, options));
    
        _this.throttledUpdateContent = throttle(bind(_this, _this.updateContent), 25);
        _this.on(player, 'timeupdate', _this.throttledUpdateContent);
        return _this;
      }
    
      /**
       * Create the `Component`'s DOM element
       *
       * @return {Element}
       *         The element that was created.
       */
    
    
      CurrentTimeDisplay.prototype.createEl = function createEl$$1() {
        var el = _Component.prototype.createEl.call(this, 'div', {
          className: 'vjs-current-time vjs-time-control vjs-control'
        });
    
        this.contentEl_ = createEl('div', {
          className: 'vjs-current-time-display'
        }, {
          // tell screen readers not to automatically read the time as it changes
          'aria-live': 'off'
        }, createEl('span', {
          className: 'vjs-control-text',
          textContent: this.localize('Current Time')
        }));
    
        this.updateTextNode_();
        el.appendChild(this.contentEl_);
        return el;
      };
    
      /**
       * Updates the "current time" text node with new content using the
       * contents of the `formattedTime_` property.
       *
       * @private
       */
    
    
      CurrentTimeDisplay.prototype.updateTextNode_ = function updateTextNode_() {
        if (this.textNode_) {
          this.contentEl_.removeChild(this.textNode_);
        }
        this.textNode_ = document_1.createTextNode(' ' + (this.formattedTime_ || '0:00'));
        this.contentEl_.appendChild(this.textNode_);
      };
    
      /**
       * Update current time display
       *
       * @param {EventTarget~Event} [event]
       *        The `timeupdate` event that caused this function to run.
       *
       * @listens Player#timeupdate
       */
    
    
      CurrentTimeDisplay.prototype.updateContent = function updateContent(event) {
        // Allows for smooth scrubbing, when player can't keep up.
        var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
        var formattedTime = formatTime(time, this.player_.duration());
    
        if (formattedTime !== this.formattedTime_) {
          this.formattedTime_ = formattedTime;
          this.requestAnimationFrame(this.updateTextNode_);
        }
      };
    
      return CurrentTimeDisplay;
    }(Component);
    
    Component.registerComponent('CurrentTimeDisplay', CurrentTimeDisplay);
    
    /**
     * @file duration-display.js
     */
    /**
     * Displays the duration
     *
     * @extends Component
     */
    
    var DurationDisplay = function (_Component) {
      inherits(DurationDisplay, _Component);
    
      /**
       * Creates an instance of this class.
       *
       * @param {Player} player
       *        The `Player` that this class should be attached to.
       *
       * @param {Object} [options]
       *        The key/value store of player options.
       */
      function DurationDisplay(player, options) {
        classCallCheck(this, DurationDisplay);
    
        var _this = possibleConstructorReturn(this, _Component.call(this, player, options));
    
        _this.throttledUpdateContent = throttle(bind(_this, _this.updateContent), 25);
    
        _this.on(player, ['durationchange',
    
        // Also listen for timeupdate and loadedmetadata because removing those
        // listeners could have broken dependent applications/libraries. These
        // can likely be removed for 7.0.
        'loadedmetadata', 'timeupdate'], _this.throttledUpdateContent);
        return _this;
      }
    
      /**
       * Create the `Component`'s DOM element
       *
       * @return {Element}
       *         The element that was created.
       */
    
    
      DurationDisplay.prototype.createEl = function createEl$$1() {
        var el = _Component.prototype.createEl.call(this, 'div', {
          className: 'vjs-duration vjs-time-control vjs-control'
        });
    
        this.contentEl_ = createEl('div', {
          className: 'vjs-duration-display'
        }, {
          // tell screen readers not to automatically read the time as it changes
          'aria-live': 'off'
        }, createEl('span', {
          className: 'vjs-control-text',
          textContent: this.localize('Duration Time')
        }));
    
        this.updateTextNode_();
        el.appendChild(this.contentEl_);
        return el;
      };
    
      /**
       * Updates the "current time" text node with new content using the
       * contents of the `formattedTime_` property.
       *
       * @private
       */
    
    
      DurationDisplay.prototype.updateTextNode_ = function updateTextNode_() {
        if (this.textNode_) {
          this.contentEl_.removeChild(this.textNode_);
        }
        this.textNode_ = document_1.createTextNode(' ' + (this.formattedTime_ || '0:00'));
        this.contentEl_.appendChild(this.textNode_);
      };
    
      /**
       * Update duration time display.
       *
       * @param {EventTarget~Event} [event]
       *        The `durationchange`, `timeupdate`, or `loadedmetadata` event that caused
       *        this function to be called.
       *
       * @listens Player#durationchange
       * @listens Player#timeupdate
       * @listens Player#loadedmetadata
       */
    
    
      DurationDisplay.prototype.updateContent = function updateContent(event) {
        var duration = this.player_.duration();
    
        if (duration && this.duration_ !== duration) {
          this.duration_ = duration;
          this.formattedTime_ = formatTime(duration);
          this.requestAnimationFrame(this.updateTextNode_);
        }
      };
    
      return DurationDisplay;
    }(Component);
    
    Component.registerComponent('DurationDisplay', DurationDisplay);
    
    /**
     * @file time-divider.js
     */
    /**
     * The separator between the current time and duration.
     * Can be hidden if it's not needed in the design.
     *
     * @extends Component
     */
    
    var TimeDivider = function (_Component) {
      inherits(TimeDivider, _Component);
    
      function TimeDivider() {
        classCallCheck(this, TimeDivider);
        return possibleConstructorReturn(this, _Component.apply(this, arguments));
      }
    
      /**
       * Create the component's DOM element
       *
       * @return {Element}
       *         The element that was created.
       */
      TimeDivider.prototype.createEl = function createEl() {
        return _Component.prototype.createEl.call(this, 'div', {
          className: 'vjs-time-control vjs-time-divider',
          innerHTML: '<div><span>/</span></div>'
        });
      };
    
      return TimeDivider;
    }(Component);
    
    Component.registerComponent('TimeDivider', TimeDivider);
    
    /**
     * @file remaining-time-display.js
     */
    /**
     * Displays the time left in the video
     *
     * @extends Component
     */
    
    var RemainingTimeDisplay = function (_Component) {
      inherits(RemainingTimeDisplay, _Component);
    
      /**
       * Creates an instance of this class.
       *
       * @param {Player} player
       *        The `Player` that this class should be attached to.
       *
       * @param {Object} [options]
       *        The key/value store of player options.
       */
      function RemainingTimeDisplay(player, options) {
        classCallCheck(this, RemainingTimeDisplay);
    
        var _this = possibleConstructorReturn(this, _Component.call(this, player, options));
    
        _this.throttledUpdateContent = throttle(bind(_this, _this.updateContent), 25);
        _this.on(player, ['timeupdate', 'durationchange'], _this.throttledUpdateContent);
        return _this;
      }
    
      /**
       * Create the `Component`'s DOM element
       *
       * @return {Element}
       *         The element that was created.
       */
    
    
      RemainingTimeDisplay.prototype.createEl = function createEl$$1() {
        var el = _Component.prototype.createEl.call(this, 'div', {
          className: 'vjs-remaining-time vjs-time-control vjs-control'
        });
    
        this.contentEl_ = createEl('div', {
          className: 'vjs-remaining-time-display'
        }, {
          // tell screen readers not to automatically read the time as it changes
          'aria-live': 'off'
        }, createEl('span', {
          className: 'vjs-control-text',
          textContent: this.localize('Remaining Time')
        }));
    
        this.updateTextNode_();
        el.appendChild(this.contentEl_);
        return el;
      };
    
      /**
       * Updates the "remaining time" text node with new content using the
       * contents of the `formattedTime_` property.
       *
       * @private
       */
    
    
      RemainingTimeDisplay.prototype.updateTextNode_ = function updateTextNode_() {
        if (this.textNode_) {
          this.contentEl_.removeChild(this.textNode_);
        }
        this.textNode_ = document_1.createTextNode(' -' + (this.formattedTime_ || '0:00'));
        this.contentEl_.appendChild(this.textNode_);
      };
    
      /**
       * Update remaining time display.
       *
       * @param {EventTarget~Event} [event]
       *        The `timeupdate` or `durationchange` event that caused this to run.
       *
       * @listens Player#timeupdate
       * @listens Player#durationchange
       */
    
    
      RemainingTimeDisplay.prototype.updateContent = function updateContent(event) {
        if (this.player_.duration()) {
          var formattedTime = formatTime(this.player_.remainingTime());
    
          if (formattedTime !== this.formattedTime_) {
            this.formattedTime_ = formattedTime;
            this.requestAnimationFrame(this.updateTextNode_);
          }
        }
      };
    
      return RemainingTimeDisplay;
    }(Component);
    
    Component.registerComponent('RemainingTimeDisplay', RemainingTimeDisplay);
    
    /**
     * @file live-display.js
     */
    // TODO - Future make it click to snap to live
    
    /**
     * Displays the live indicator when duration is Infinity.
     *
     * @extends Component
     */
    
    var LiveDisplay = function (_Component) {
      inherits(LiveDisplay, _Component);
    
      /**
       * Creates an instance of this class.
       *
       * @param {Player} player
       *        The `Player` that this class should be attached to.
       *
       * @param {Object} [options]
       *        The key/value store of player options.
       */
      function LiveDisplay(player, options) {
        classCallCheck(this, LiveDisplay);
    
        var _this = possibleConstructorReturn(this, _Component.call(this, player, options));
    
        _this.updateShowing();
        _this.on(_this.player(), 'durationchange', _this.updateShowing);
        return _this;
      }
    
      /**
       * Create the `Component`'s DOM element
       *
       * @return {Element}
       *         The element that was created.
       */
    
    
      LiveDisplay.prototype.createEl = function createEl$$1() {
        var el = _Component.prototype.createEl.call(this, 'div', {
          className: 'vjs-live-control vjs-control'
        });
    
        this.contentEl_ = createEl('div', {
          className: 'vjs-live-display',
          innerHTML: '<span class="vjs-control-text">' + this.localize('Stream Type') + '</span>' + this.localize('LIVE')
        }, {
          'aria-live': 'off'
        });
    
        el.appendChild(this.contentEl_);
        return el;
      };
    
      /**
       * Check the duration to see if the LiveDisplay should be showing or not. Then show/hide
       * it accordingly
       *
       * @param {EventTarget~Event} [event]
       *        The {@link Player#durationchange} event that caused this function to run.
       *
       * @listens Player#durationchange
       */
    
    
      LiveDisplay.prototype.updateShowing = function updateShowing(event) {
        if (this.player().duration() === Infinity) {
          this.show();
        } else {
          this.hide();
        }
      };
    
      return LiveDisplay;
    }(Component);
    
    Component.registerComponent('LiveDisplay', LiveDisplay);
    
    /**
     * @file slider.js
     */
    /**
     * The base functionality for a slider. Can be vertical or horizontal.
     * For instance the volume bar or the seek bar on a video is a slider.
     *
     * @extends Component
     */
    
    var Slider = function (_Component) {
      inherits(Slider, _Component);
    
      /**
       * Create an instance of this class
       *
       * @param {Player} player
       *        The `Player` that this class should be attached to.
       *
       * @param {Object} [options]
       *        The key/value store of player options.
       */
      function Slider(player, options) {
        classCallCheck(this, Slider);
    
        // Set property names to bar to match with the child Slider class is looking for
        var _this = possibleConstructorReturn(this, _Component.call(this, player, options));
    
        _this.bar = _this.getChild(_this.options_.barName);
    
        // Set a horizontal or vertical class on the slider depending on the slider type
        _this.vertical(!!_this.options_.vertical);
    
        _this.on('mousedown', _this.handleMouseDown);
        _this.on('touchstart', _this.handleMouseDown);
        _this.on('focus', _this.handleFocus);
        _this.on('blur', _this.handleBlur);
        _this.on('click', _this.handleClick);
    
        _this.on(player, 'controlsvisible', _this.update);
    
        if (_this.playerEvent) {
          _this.on(player, _this.playerEvent, _this.update);
        }
        return _this;
      }
    
      /**
       * Create the `Button`s DOM element.
       *
       * @param {string} type
       *        Type of element to create.
       *
       * @param {Object} [props={}]
       *        List of properties in Object form.
       *
       * @param {Object} [attributes={}]
       *        list of attributes in Object form.
       *
       * @return {Element}
       *         The element that gets created.
       */
    
    
      Slider.prototype.createEl = function createEl$$1(type) {
        var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    
        // Add the slider element class to all sub classes
        props.className = props.className + ' vjs-slider';
        props = assign({
          tabIndex: 0
        }, props);
    
        attributes = assign({
          'role': 'slider',
          'aria-valuenow': 0,
          'aria-valuemin': 0,
          'aria-valuemax': 100,
          'tabIndex': 0
        }, attributes);
    
        return _Component.prototype.createEl.call(this, type, props, attributes);
      };
    
      /**
       * Handle `mousedown` or `touchstart` events on the `Slider`.
       *
       * @param {EventTarget~Event} event
       *        `mousedown` or `touchstart` event that triggered this function
       *
       * @listens mousedown
       * @listens touchstart
       * @fires Slider#slideractive
       */
    
    
      Slider.prototype.handleMouseDown = function handleMouseDown(event) {
        var doc = this.bar.el_.ownerDocument;
    
        event.preventDefault();
        blockTextSelection();
    
        this.addClass('vjs-sliding');
        /**
         * Triggered when the slider is in an active state
         *
         * @event Slider#slideractive
         * @type {EventTarget~Event}
         */
        this.trigger('slideractive');
    
        this.on(doc, 'mousemove', this.handleMouseMove);
        this.on(doc, 'mouseup', this.handleMouseUp);
        this.on(doc, 'touchmove', this.handleMouseMove);
        this.on(doc, 'touchend', this.handleMouseUp);
    
        this.handleMouseMove(event);
      };
    
      /**
       * Handle the `mousemove`, `touchmove`, and `mousedown` events on this `Slider`.
       * The `mousemove` and `touchmove` events will only only trigger this function during
       * `mousedown` and `touchstart`. This is due to {@link Slider#handleMouseDown} and
       * {@link Slider#handleMouseUp}.
       *
       * @param {EventTarget~Event} event
       *        `mousedown`, `mousemove`, `touchstart`, or `touchmove` event that triggered
       *        this function
       *
       * @listens mousemove
       * @listens touchmove
       */
    
    
      Slider.prototype.handleMouseMove = function handleMouseMove(event) {};
    
      /**
       * Handle `mouseup` or `touchend` events on the `Slider`.
       *
       * @param {EventTarget~Event} event
       *        `mouseup` or `touchend` event that triggered this function.
       *
       * @listens touchend
       * @listens mouseup
       * @fires Slider#sliderinactive
       */
    
    
      Slider.prototype.handleMouseUp = function handleMouseUp() {
        var doc = this.bar.el_.ownerDocument;
    
        unblockTextSelection();
    
        this.removeClass('vjs-sliding');
        /**
         * Triggered when the slider is no longer in an active state.
         *
         * @event Slider#sliderinactive
         * @type {EventTarget~Event}
         */
        this.trigger('sliderinactive');
    
        this.off(doc, 'mousemove', this.handleMouseMove);
        this.off(doc, 'mouseup', this.handleMouseUp);
        this.off(doc, 'touchmove', this.handleMouseMove);
        this.off(doc, 'touchend', this.handleMouseUp);
    
        this.update();
      };
    
      /**
       * Update the progress bar of the `Slider`.
       *
       * @returns {number}
       *          The percentage of progress the progress bar represents as a
       *          number from 0 to 1.
       */
    
    
      Slider.prototype.update = function update() {
    
        // In VolumeBar init we have a setTimeout for update that pops and update
        // to the end of the execution stack. The player is destroyed before then
        // update will cause an error
        if (!this.el_) {
          return;
        }
    
        // If scrubbing, we could use a cached value to make the handle keep up
        // with the user's mouse. On HTML5 browsers scrubbing is really smooth, but
        // some flash players are slow, so we might want to utilize this later.
        // var progress =  (this.player_.scrubbing()) ? this.player_.getCache().currentTime / this.player_.duration() : this.player_.currentTime() / this.player_.duration();
        var progress = this.getPercent();
        var bar = this.bar;
    
        // If there's no bar...
        if (!bar) {
          return;
        }
    
        // Protect against no duration and other division issues
        if (typeof progress !== 'number' || progress !== progress || progress < 0 || progress === Infinity) {
          progress = 0;
        }
    
        // Convert to a percentage for setting
        var percentage = (progress * 100).toFixed(2) + '%';
        var style = bar.el().style;
    
        // Set the new bar width or height
        if (this.vertical()) {
          style.height = percentage;
        } else {
          style.width = percentage;
        }
    
        return progress;
      };
    
      /**
       * Calculate distance for slider
       *
       * @param {EventTarget~Event} event
       *        The event that caused this function to run.
       *
       * @return {number}
       *         The current position of the Slider.
       *         - postition.x for vertical `Slider`s
       *         - postition.y for horizontal `Slider`s
       */
    
    
      Slider.prototype.calculateDistance = function calculateDistance(event) {
        var position = getPointerPosition(this.el_, event);
    
        if (this.vertical()) {
          return position.y;
        }
        return position.x;
      };
    
      /**
       * Handle a `focus` event on this `Slider`.
       *
       * @param {EventTarget~Event} event
       *        The `focus` event that caused this function to run.
       *
       * @listens focus
       */
    
    
      Slider.prototype.handleFocus = function handleFocus() {
        this.on(this.bar.el_.ownerDocument, 'keydown', this.handleKeyPress);
      };
    
      /**
       * Handle a `keydown` event on the `Slider`. Watches for left, rigth, up, and down
       * arrow keys. This function will only be called when the slider has focus. See
       * {@link Slider#handleFocus} and {@link Slider#handleBlur}.
       *
       * @param {EventTarget~Event} event
       *        the `keydown` event that caused this function to run.
       *
       * @listens keydown
       */
    
    
      Slider.prototype.handleKeyPress = function handleKeyPress(event) {
        // Left and Down Arrows
        if (event.which === 37 || event.which === 40) {
          event.preventDefault();
          this.stepBack();
    
          // Up and Right Arrows
        } else if (event.which === 38 || event.which === 39) {
          event.preventDefault();
          this.stepForward();
        }
      };
    
      /**
       * Handle a `blur` event on this `Slider`.
       *
       * @param {EventTarget~Event} event
       *        The `blur` event that caused this function to run.
       *
       * @listens blur
       */
    
      Slider.prototype.handleBlur = function handleBlur() {
        this.off(this.bar.el_.ownerDocument, 'keydown', this.handleKeyPress);
      };
    
      /**
       * Listener for click events on slider, used to prevent clicks
       *   from bubbling up to parent elements like button menus.
       *
       * @param {Object} event
       *        Event that caused this object to run
       */
    
    
      Slider.prototype.handleClick = function handleClick(event) {
        event.stopImmediatePropagation();
        event.preventDefault();
      };
    
      /**
       * Get/set if slider is horizontal for vertical
       *
       * @param {boolean} [bool]
       *        - true if slider is vertical,
       *        - false is horizontal
       *
       * @return {boolean}
       *         - true if slider is vertical, and getting
       *         - false if the slider is horizontal, and getting
       */
    
    
      Slider.prototype.vertical = function vertical(bool) {
        if (bool === undefined) {
          return this.vertical_ || false;
        }
    
        this.vertical_ = !!bool;
    
        if (this.vertical_) {
          this.addClass('vjs-slider-vertical');
        } else {
          this.addClass('vjs-slider-horizontal');
        }
      };
    
      return Slider;
    }(Component);
    
    Component.registerComponent('Slider', Slider);
    
    /**
     * @file load-progress-bar.js
     */
    /**
     * Shows loading progress
     *
     * @extends Component
     */
    
    var LoadProgressBar = function (_Component) {
      inherits(LoadProgressBar, _Component);
    
      /**
       * Creates an instance of this class.
       *
       * @param {Player} player
       *        The `Player` that this class should be attached to.
       *
       * @param {Object} [options]
       *        The key/value store of player options.
       */
      function LoadProgressBar(player, options) {
        classCallCheck(this, LoadProgressBar);
    
        var _this = possibleConstructorReturn(this, _Component.call(this, player, options));
    
        _this.partEls_ = [];
        _this.on(player, 'progress', _this.update);
        return _this;
      }
    
      /**
       * Create the `Component`'s DOM element
       *
       * @return {Element}
       *         The element that was created.
       */
    
    
      LoadProgressBar.prototype.createEl = function createEl$$1() {
        return _Component.prototype.createEl.call(this, 'div', {
          className: 'vjs-load-progress',
          innerHTML: '<span class="vjs-control-text"><span>' + this.localize('Loaded') + '</span>: 0%</span>'
        });
      };
    
      /**
       * Update progress bar
       *
       * @param {EventTarget~Event} [event]
       *        The `progress` event that caused this function to run.
       *
       * @listens Player#progress
       */
    
    
      LoadProgressBar.prototype.update = function update(event) {
        var buffered = this.player_.buffered();
        var duration = this.player_.duration();
        var bufferedEnd = this.player_.bufferedEnd();
        var children = this.partEls_;
    
        // get the percent width of a time compared to the total end
        var percentify = function percentify(time, end) {
          // no NaN
          var percent = time / end || 0;
    
          return (percent >= 1 ? 1 : percent) * 100 + '%';
        };
    
        // update the width of the progress bar
        this.el_.style.width = percentify(bufferedEnd, duration);
    
        // add child elements to represent the individual buffered time ranges
        for (var i = 0; i < buffered.length; i++) {
          var start = buffered.start(i);
          var end = buffered.end(i);
          var part = children[i];
    
          if (!part) {
            part = this.el_.appendChild(createEl());
            children[i] = part;
          }
    
          // set the percent based on the width of the progress bar (bufferedEnd)
          part.style.left = percentify(start, bufferedEnd);
          part.style.width = percentify(end - start, bufferedEnd);
        }
    
        // remove unused buffered range elements
        for (var _i = children.length; _i > buffered.length; _i--) {
          this.el_.removeChild(children[_i - 1]);
        }
        children.length = buffered.length;
      };
    
      return LoadProgressBar;
    }(Component);
    
    Component.registerComponent('LoadProgressBar', LoadProgressBar);
    
    /**
     * @file time-tooltip.js
     */
    /**
     * Time tooltips display a time above the progress bar.
     *
     * @extends Component
     */
    
    var TimeTooltip = function (_Component) {
      inherits(TimeTooltip, _Component);
    
      function TimeTooltip() {
        classCallCheck(this, TimeTooltip);
        return possibleConstructorReturn(this, _Component.apply(this, arguments));
      }
    
      /**
       * Create the time tooltip DOM element
       *
       * @return {Element}
       *         The element that was created.
       */
      TimeTooltip.prototype.createEl = function createEl$$1() {
        return _Component.prototype.createEl.call(this, 'div', {
          className: 'vjs-time-tooltip'
        });
      };
    
      /**
       * Updates the position of the time tooltip relative to the `SeekBar`.
       *
       * @param {Object} seekBarRect
       *        The `ClientRect` for the {@link SeekBar} element.
       *
       * @param {number} seekBarPoint
       *        A number from 0 to 1, representing a horizontal reference point
       *        from the left edge of the {@link SeekBar}
       */
    
    
      TimeTooltip.prototype.update = function update(seekBarRect, seekBarPoint, content) {
        var tooltipRect = getBoundingClientRect(this.el_);
        var playerRect = getBoundingClientRect(this.player_.el());
        var seekBarPointPx = seekBarRect.width * seekBarPoint;
    
        // do nothing if either rect isn't available
        // for example, if the player isn't in the DOM for testing
        if (!playerRect || !tooltipRect) {
          return;
        }
    
        // This is the space left of the `seekBarPoint` available within the bounds
        // of the player. We calculate any gap between the left edge of the player
        // and the left edge of the `SeekBar` and add the number of pixels in the
        // `SeekBar` before hitting the `seekBarPoint`
        var spaceLeftOfPoint = seekBarRect.left - playerRect.left + seekBarPointPx;
    
        // This is the space right of the `seekBarPoint` available within the bounds
        // of the player. We calculate the number of pixels from the `seekBarPoint`
        // to the right edge of the `SeekBar` and add to that any gap between the
        // right edge of the `SeekBar` and the player.
        var spaceRightOfPoint = seekBarRect.width - seekBarPointPx + (playerRect.right - seekBarRect.right);
    
        // This is the number of pixels by which the tooltip will need to be pulled
        // further to the right to center it over the `seekBarPoint`.
        var pullTooltipBy = tooltipRect.width / 2;
    
        // Adjust the `pullTooltipBy` distance to the left or right depending on
        // the results of the space calculations above.
        if (spaceLeftOfPoint < pullTooltipBy) {
          pullTooltipBy += pullTooltipBy - spaceLeftOfPoint;
        } else if (spaceRightOfPoint < pullTooltipBy) {
          pullTooltipBy = spaceRightOfPoint;
        }
    
        // Due to the imprecision of decimal/ratio based calculations and varying
        // rounding behaviors, there are cases where the spacing adjustment is off
        // by a pixel or two. This adds insurance to these calculations.
        if (pullTooltipBy < 0) {
          pullTooltipBy = 0;
        } else if (pullTooltipBy > tooltipRect.width) {
          pullTooltipBy = tooltipRect.width;
        }
    
        this.el_.style.right = '-' + pullTooltipBy + 'px';
        textContent(this.el_, content);
      };
    
      return TimeTooltip;
    }(Component);
    
    Component.registerComponent('TimeTooltip', TimeTooltip);
    
    /**
     * @file play-progress-bar.js
     */
    /**
     * Used by {@link SeekBar} to display media playback progress as part of the
     * {@link ProgressControl}.
     *
     * @extends Component
     */
    
    var PlayProgressBar = function (_Component) {
      inherits(PlayProgressBar, _Component);
    
      function PlayProgressBar() {
        classCallCheck(this, PlayProgressBar);
        return possibleConstructorReturn(this, _Component.apply(this, arguments));
      }
    
      /**
       * Create the the DOM element for this class.
       *
       * @return {Element}
       *         The element that was created.
       */
      PlayProgressBar.prototype.createEl = function createEl() {
        return _Component.prototype.createEl.call(this, 'div', {
          className: 'vjs-play-progress vjs-slider-bar',
          innerHTML: '<span class="vjs-control-text"><span>' + this.localize('Progress') + '</span>: 0%</span>'
        });
      };
    
      /**
       * Enqueues updates to its own DOM as well as the DOM of its
       * {@link TimeTooltip} child.
       *
       * @param {Object} seekBarRect
       *        The `ClientRect` for the {@link SeekBar} element.
       *
       * @param {number} seekBarPoint
       *        A number from 0 to 1, representing a horizontal reference point
       *        from the left edge of the {@link SeekBar}
       */
    
    
      PlayProgressBar.prototype.update = function update(seekBarRect, seekBarPoint) {
        var _this2 = this;
    
        // If there is an existing rAF ID, cancel it so we don't over-queue.
        if (this.rafId_) {
          this.cancelAnimationFrame(this.rafId_);
        }
    
        this.rafId_ = this.requestAnimationFrame(function () {
          var time = _this2.player_.scrubbing() ? _this2.player_.getCache().currentTime : _this2.player_.currentTime();
    
          var content = formatTime(time, _this2.player_.duration());
          var timeTooltip = _this2.getChild('timeTooltip');
    
          if (timeTooltip) {
            timeTooltip.update(seekBarRect, seekBarPoint, content);
          }
        });
      };
    
      return PlayProgressBar;
    }(Component);
    
    /**
     * Default options for {@link PlayProgressBar}.
     *
     * @type {Object}
     * @private
     */
    
    
    PlayProgressBar.prototype.options_ = {
      children: []
    };
    
    // Time tooltips should not be added to a player on mobile devices or IE8
    if ((!IE_VERSION || IE_VERSION > 8) && !IS_IOS && !IS_ANDROID) {
      PlayProgressBar.prototype.options_.children.push('timeTooltip');
    }
    
    Component.registerComponent('PlayProgressBar', PlayProgressBar);
    
    /**
     * @file mouse-time-display.js
     */
    /**
     * The {@link MouseTimeDisplay} component tracks mouse movement over the
     * {@link ProgressControl}. It displays an indicator and a {@link TimeTooltip}
     * indicating the time which is represented by a given point in the
     * {@link ProgressControl}.
     *
     * @extends Component
     */
    
    var MouseTimeDisplay = function (_Component) {
      inherits(MouseTimeDisplay, _Component);
    
      /**
       * Creates an instance of this class.
       *
       * @param {Player} player
       *        The {@link Player} that this class should be attached to.
       *
       * @param {Object} [options]
       *        The key/value store of player options.
       */
      function MouseTimeDisplay(player, options) {
        classCallCheck(this, MouseTimeDisplay);
    
        var _this = possibleConstructorReturn(this, _Component.call(this, player, options));
    
        _this.update = throttle(bind(_this, _this.update), 25);
        return _this;
      }
    
      /**
       * Create the DOM element for this class.
       *
       * @return {Element}
       *         The element that was created.
       */
    
    
      MouseTimeDisplay.prototype.createEl = function createEl() {
        return _Component.prototype.createEl.call(this, 'div', {
          className: 'vjs-mouse-display'
        });
      };
    
      /**
       * Enqueues updates to its own DOM as well as the DOM of its
       * {@link TimeTooltip} child.
       *
       * @param {Object} seekBarRect
       *        The `ClientRect` for the {@link SeekBar} element.
       *
       * @param {number} seekBarPoint
       *        A number from 0 to 1, representing a horizontal reference point
       *        from the left edge of the {@link SeekBar}
       */
    
    
      MouseTimeDisplay.prototype.update = function update(seekBarRect, seekBarPoint) {
        var _this2 = this;
    
        // If there is an existing rAF ID, cancel it so we don't over-queue.
        if (this.rafId_) {
          this.cancelAnimationFrame(this.rafId_);
        }
    
        this.rafId_ = this.requestAnimationFrame(function () {
          var duration = _this2.player_.duration();
          var content = formatTime(seekBarPoint * duration, duration);
    
          _this2.el_.style.left = seekBarRect.width * seekBarPoint + 'px';
          _this2.getChild('timeTooltip').update(seekBarRect, seekBarPoint, content);
        });
      };
    
      return MouseTimeDisplay;
    }(Component);
    
    /**
     * Default options for `MouseTimeDisplay`
     *
     * @type {Object}
     * @private
     */
    
    
    MouseTimeDisplay.prototype.options_ = {
      children: ['timeTooltip']
    };
    
    Component.registerComponent('MouseTimeDisplay', MouseTimeDisplay);
    
    /**
     * @file seek-bar.js
     */
    // The number of seconds the `step*` functions move the timeline.
    var STEP_SECONDS = 5;
    
    /**
     * Seek bar and container for the progress bars. Uses {@link PlayProgressBar}
     * as its `bar`.
     *
     * @extends Slider
     */
    
    var SeekBar = function (_Slider) {
      inherits(SeekBar, _Slider);
    
      /**
       * Creates an instance of this class.
       *
       * @param {Player} player
       *        The `Player` that this class should be attached to.
       *
       * @param {Object} [options]
       *        The key/value store of player options.
       */
      function SeekBar(player, options) {
        classCallCheck(this, SeekBar);
    
        var _this = possibleConstructorReturn(this, _Slider.call(this, player, options));
    
        _this.update = throttle(bind(_this, _this.update), 50);
        _this.on(player, ['timeupdate', 'ended'], _this.update);
        return _this;
      }
    
      /**
       * Create the `Component`'s DOM element
       *
       * @return {Element}
       *         The element that was created.
       */
    
    
      SeekBar.prototype.createEl = function createEl$$1() {
        return _Slider.prototype.createEl.call(this, 'div', {
          className: 'vjs-progress-holder'
        }, {
          'aria-label': this.localize('Progress Bar')
        });
      };
    
      /**
       * Update the seek bar's UI.
       *
       * @param {EventTarget~Event} [event]
       *        The `timeupdate` or `ended` event that caused this to run.
       *
       * @listens Player#timeupdate
       * @listens Player#ended
       */
    
    
      SeekBar.prototype.update = function update() {
        var percent = _Slider.prototype.update.call(this);
        var duration = this.player_.duration();
    
        // Allows for smooth scrubbing, when player can't keep up.
        var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
    
        // machine readable value of progress bar (percentage complete)
        this.el_.setAttribute('aria-valuenow', (percent * 100).toFixed(2));
    
        // human readable value of progress bar (time complete)
        this.el_.setAttribute('aria-valuetext', this.localize('progress bar timing: currentTime={1} duration={2}', [formatTime(time, duration), formatTime(duration, duration)], '{1} of {2}'));
    
        // Update the `PlayProgressBar`.
        this.bar.update(getBoundingClientRect(this.el_), percent);
    
        return percent;
      };
    
      /**
       * Get the percentage of media played so far.
       *
       * @return {number}
       *         The percentage of media played so far (0 to 1).
       */
    
    
      SeekBar.prototype.getPercent = function getPercent() {
    
        // Allows for smooth scrubbing, when player can't keep up.
        var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
    
        var percent = time / this.player_.duration();
    
        return percent >= 1 ? 1 : percent;
      };
    
      /**
       * Handle mouse down on seek bar
       *
       * @param {EventTarget~Event} event
       *        The `mousedown` event that caused this to run.
       *
       * @listens mousedown
       */
    
    
      SeekBar.prototype.handleMouseDown = function handleMouseDown(event) {
        this.player_.scrubbing(true);
    
        this.videoWasPlaying = !this.player_.paused();
        this.player_.pause();
    
        _Slider.prototype.handleMouseDown.call(this, event);
      };
    
      /**
       * Handle mouse move on seek bar
       *
       * @param {EventTarget~Event} event
       *        The `mousemove` event that caused this to run.
       *
       * @listens mousemove
       */
    
    
      SeekBar.prototype.handleMouseMove = function handleMouseMove(event) {
        var newTime = this.calculateDistance(event) * this.player_.duration();
    
        // Don't let video end while scrubbing.
        if (newTime === this.player_.duration()) {
          newTime = newTime - 0.1;
        }
    
        // Set new time (tell player to seek to new time)
        this.player_.currentTime(newTime);
      };
    
      /**
       * Handle mouse up on seek bar
       *
       * @param {EventTarget~Event} event
       *        The `mouseup` event that caused this to run.
       *
       * @listens mouseup
       */
    
    
      SeekBar.prototype.handleMouseUp = function handleMouseUp(event) {
        _Slider.prototype.handleMouseUp.call(this, event);
    
        this.player_.scrubbing(false);
        if (this.videoWasPlaying) {
          this.player_.play();
        }
      };
    
      /**
       * Move more quickly fast forward for keyboard-only users
       */
    
    
      SeekBar.prototype.stepForward = function stepForward() {
        this.player_.currentTime(this.player_.currentTime() + STEP_SECONDS);
      };
    
      /**
       * Move more quickly rewind for keyboard-only users
       */
    
    
      SeekBar.prototype.stepBack = function stepBack() {
        this.player_.currentTime(this.player_.currentTime() - STEP_SECONDS);
      };
    
      /**
       * Toggles the playback state of the player
       * This gets called when enter or space is used on the seekbar
       *
       * @param {EventTarget~Event} event
       *        The `keydown` event that caused this function to be called
       *
       */
    
    
      SeekBar.prototype.handleAction = function handleAction(event) {
        if (this.player_.paused()) {
          this.player_.play();
        } else {
          this.player_.pause();
        }
      };
    
      /**
       * Called when this SeekBar has focus and a key gets pressed down. By
       * default it will call `this.handleAction` when the key is space or enter.
       *
       * @param {EventTarget~Event} event
       *        The `keydown` event that caused this function to be called.
       *
       * @listens keydown
       */
    
    
      SeekBar.prototype.handleKeyPress = function handleKeyPress(event) {
    
        // Support Space (32) or Enter (13) key operation to fire a click event
        if (event.which === 32 || event.which === 13) {
          event.preventDefault();
          this.handleAction(event);
        } else if (_Slider.prototype.handleKeyPress) {
    
          // Pass keypress handling up for unsupported keys
          _Slider.prototype.handleKeyPress.call(this, event);
        }
      };
    
      return SeekBar;
    }(Slider);
    
    /**
     * Default options for the `SeekBar`
     *
     * @type {Object}
     * @private
     */
    
    
    SeekBar.prototype.options_ = {
      children: ['loadProgressBar', 'playProgressBar'],
      barName: 'playProgressBar'
    };
    
    // MouseTimeDisplay tooltips should not be added to a player on mobile devices or IE8
    if ((!IE_VERSION || IE_VERSION > 8) && !IS_IOS && !IS_ANDROID) {
      SeekBar.prototype.options_.children.splice(1, 0, 'mouseTimeDisplay');
    }
    
    /**
     * Call the update event for this Slider when this event happens on the player.
     *
     * @type {string}
     */
    SeekBar.prototype.playerEvent = 'timeupdate';
    
    Component.registerComponent('SeekBar', SeekBar);
    
    /**
     * @file progress-control.js
     */
    /**
     * The Progress Control component contains the seek bar, load progress,
     * and play progress.
     *
     * @extends Component
     */
    
    var ProgressControl = function (_Component) {
      inherits(ProgressControl, _Component);
    
      /**
       * Creates an instance of this class.
       *
       * @param {Player} player
       *        The `Player` that this class should be attached to.
       *
       * @param {Object} [options]
       *        The key/value store of player options.
       */
      function ProgressControl(player, options) {
        classCallCheck(this, ProgressControl);
    
        var _this = possibleConstructorReturn(this, _Component.call(this, player, options));
    
        _this.handleMouseMove = throttle(bind(_this, _this.handleMouseMove), 25);
        _this.on(_this.el_, 'mousemove', _this.handleMouseMove);
    
        _this.throttledHandleMouseSeek = throttle(bind(_this, _this.handleMouseSeek), 25);
        _this.on(['mousedown', 'touchstart'], _this.handleMouseDown);
        return _this;
      }
    
      /**
       * Create the `Component`'s DOM element
       *
       * @return {Element}
       *         The element that was created.
       */
    
    
      ProgressControl.prototype.createEl = function createEl$$1() {
        return _Component.prototype.createEl.call(this, 'div', {
          className: 'vjs-progress-control vjs-control'
        });
      };
    
      /**
       * When the mouse moves over the `ProgressControl`, the pointer position
       * gets passed down to the `MouseTimeDisplay` component.
       *
       * @param {EventTarget~Event} event
       *        The `mousemove` event that caused this function to run.
       *
       * @listen mousemove
       */
    
    
      ProgressControl.prototype.handleMouseMove = function handleMouseMove(event) {
        var seekBar = this.getChild('seekBar');
        var mouseTimeDisplay = seekBar.getChild('mouseTimeDisplay');
        var seekBarEl = seekBar.el();
        var seekBarRect = getBoundingClientRect(seekBarEl);
        var seekBarPoint = getPointerPosition(seekBarEl, event).x;
    
        // The default skin has a gap on either side of the `SeekBar`. This means
        // that it's possible to trigger this behavior outside the boundaries of
        // the `SeekBar`. This ensures we stay within it at all times.
        if (seekBarPoint > 1) {
          seekBarPoint = 1;
        } else if (seekBarPoint < 0) {
          seekBarPoint = 0;
        }
    
        if (mouseTimeDisplay) {
          mouseTimeDisplay.update(seekBarRect, seekBarPoint);
        }
      };
    
      /**
       * A throttled version of the {@link ProgressControl#handleMouseSeek} listener.
       *
       * @method ProgressControl#throttledHandleMouseSeek
       * @param {EventTarget~Event} event
       *        The `mousemove` event that caused this function to run.
       *
       * @listen mousemove
       * @listen touchmove
       */
    
      /**
       * Handle `mousemove` or `touchmove` events on the `ProgressControl`.
       *
       * @param {EventTarget~Event} event
       *        `mousedown` or `touchstart` event that triggered this function
       *
       * @listens mousemove
       * @listens touchmove
       */
    
    
      ProgressControl.prototype.handleMouseSeek = function handleMouseSeek(event) {
        var seekBar = this.getChild('seekBar');
    
        seekBar.handleMouseMove(event);
      };
    
      /**
       * Handle `mousedown` or `touchstart` events on the `ProgressControl`.
       *
       * @param {EventTarget~Event} event
       *        `mousedown` or `touchstart` event that triggered this function
       *
       * @listens mousedown
       * @listens touchstart
       */
    
    
      ProgressControl.prototype.handleMouseDown = function handleMouseDown(event) {
        var doc = this.el_.ownerDocument;
    
        this.on(doc, 'mousemove', this.throttledHandleMouseSeek);
        this.on(doc, 'touchmove', this.throttledHandleMouseSeek);
        this.on(doc, 'mouseup', this.handleMouseUp);
        this.on(doc, 'touchend', this.handleMouseUp);
      };
    
      /**
       * Handle `mouseup` or `touchend` events on the `ProgressControl`.
       *
       * @param {EventTarget~Event} event
       *        `mouseup` or `touchend` event that triggered this function.
       *
       * @listens touchend
       * @listens mouseup
       */
    
    
      ProgressControl.prototype.handleMouseUp = function handleMouseUp(event) {
        var doc = this.el_.ownerDocument;
    
        this.off(doc, 'mousemove', this.throttledHandleMouseSeek);
        this.off(doc, 'touchmove', this.throttledHandleMouseSeek);
        this.off(doc, 'mouseup', this.handleMouseUp);
        this.off(doc, 'touchend', this.handleMouseUp);
      };
    
      return ProgressControl;
    }(Component);
    
    /**
     * Default options for `ProgressControl`
     *
     * @type {Object}
     * @private
     */
    
    
    ProgressControl.prototype.options_ = {
      children: ['seekBar']
    };
    
    Component.registerComponent('ProgressControl', ProgressControl);
    
    /**
     * @file fullscreen-toggle.js
     */
    /**
     * Toggle fullscreen video
     *
     * @extends Button
     */
    
    var FullscreenToggle = function (_Button) {
      inherits(FullscreenToggle, _Button);
    
      /**
       * Creates an instance of this class.
       *
       * @param {Player} player
       *        The `Player` that this class should be attached to.
       *
       * @param {Object} [options]
       *        The key/value store of player options.
       */
      function FullscreenToggle(player, options) {
        classCallCheck(this, FullscreenToggle);
    
        var _this = possibleConstructorReturn(this, _Button.call(this, player, options));
    
        _this.on(player, 'fullscreenchange', _this.handleFullscreenChange);
        return _this;
      }
    
      /**
       * Builds the default DOM `className`.
       *
       * @return {string}
       *         The DOM `className` for this object.
       */
    
    
      FullscreenToggle.prototype.buildCSSClass = function buildCSSClass() {
        return 'vjs-fullscreen-control ' + _Button.prototype.buildCSSClass.call(this);
      };
    
      /**
       * Handles fullscreenchange on the player and change control text accordingly.
       *
       * @param {EventTarget~Event} [event]
       *        The {@link Player#fullscreenchange} event that caused this function to be
       *        called.
       *
       * @listens Player#fullscreenchange
       */
    
    
      FullscreenToggle.prototype.handleFullscreenChange = function handleFullscreenChange(event) {
        if (this.player_.isFullscreen()) {
          this.controlText('Non-Fullscreen');
        } else {
          this.controlText('Fullscreen');
        }
      };
    
      /**
       * This gets called when an `FullscreenToggle` is "clicked". See
       * {@link ClickableComponent} for more detailed information on what a click can be.
       *
       * @param {EventTarget~Event} [event]
       *        The `keydown`, `tap`, or `click` event that caused this function to be
       *        called.
       *
       * @listens tap
       * @listens click
       */
    
    
      FullscreenToggle.prototype.handleClick = function handleClick(event) {
        if (!this.player_.isFullscreen()) {
          this.player_.requestFullscreen();
        } else {
          this.player_.exitFullscreen();
        }
      };
    
      return FullscreenToggle;
    }(Button);
    
    /**
     * The text that should display over the `FullscreenToggle`s controls. Added for localization.
     *
     * @type {string}
     * @private
     */
    
    
    FullscreenToggle.prototype.controlText_ = 'Fullscreen';
    
    Component.registerComponent('FullscreenToggle', FullscreenToggle);
    
    /**
     * Check if volume control is supported and if it isn't hide the
     * `Component` that was passed  using the `vjs-hidden` class.
     *
     * @param {Component} self
     *        The component that should be hidden if volume is unsupported
     *
     * @param {Player} player
     *        A reference to the player
     *
     * @private
     */
    var checkVolumeSupport = function checkVolumeSupport(self, player) {
      // hide volume controls when they're not supported by the current tech
      if (player.tech_ && !player.tech_.featuresVolumeControl) {
        self.addClass('vjs-hidden');
      }
    
      self.on(player, 'loadstart', function () {
        if (!player.tech_.featuresVolumeControl) {
          self.addClass('vjs-hidden');
        } else {
          self.removeClass('vjs-hidden');
        }
      });
    };
    
    /**
     * @file volume-level.js
     */
    /**
     * Shows volume level
     *
     * @extends Component
     */
    
    var VolumeLevel = function (_Component) {
      inherits(VolumeLevel, _Component);
    
      function VolumeLevel() {
        classCallCheck(this, VolumeLevel);
        return possibleConstructorReturn(this, _Component.apply(this, arguments));
      }
    
      /**
       * Create the `Component`'s DOM element
       *
       * @return {Element}
       *         The element that was created.
       */
      VolumeLevel.prototype.createEl = function createEl() {
        return _Component.prototype.createEl.call(this, 'div', {
          className: 'vjs-volume-level',
          innerHTML: '<span class="vjs-control-text"></span>'
        });
      };
    
      return VolumeLevel;
    }(Component);
    
    Component.registerComponent('VolumeLevel', VolumeLevel);
    
    /**
     * @file volume-bar.js
     */
    // Required children
    /**
     * The bar that contains the volume level and can be clicked on to adjust the level
     *
     * @extends Slider
     */
    
    var VolumeBar = function (_Slider) {
      inherits(VolumeBar, _Slider);
    
      /**
       * Creates an instance of this class.
       *
       * @param {Player} player
       *        The `Player` that this class should be attached to.
       *
       * @param {Object} [options]
       *        The key/value store of player options.
       */
      function VolumeBar(player, options) {
        classCallCheck(this, VolumeBar);
    
        var _this = possibleConstructorReturn(this, _Slider.call(this, player, options));
    
        _this.on('slideractive', _this.updateLastVolume_);
        _this.on(player, 'volumechange', _this.updateARIAAttributes);
        player.ready(function () {
          return _this.updateARIAAttributes();
        });
        return _this;
      }
    
      /**
       * Create the `Component`'s DOM element
       *
       * @return {Element}
       *         The element that was created.
       */
    
    
      VolumeBar.prototype.createEl = function createEl() {
        return _Slider.prototype.createEl.call(this, 'div', {
          className: 'vjs-volume-bar vjs-slider-bar'
        }, {
          'aria-label': this.localize('Volume Level'),
          'aria-live': 'polite'
        });
      };
    
      /**
       * Handle movement events on the {@link VolumeMenuButton}.
       *
       * @param {EventTarget~Event} event
       *        The event that caused this function to run.
       *
       * @listens mousemove
       */
    
    
      VolumeBar.prototype.handleMouseMove = function handleMouseMove(event) {
        this.checkMuted();
        this.player_.volume(this.calculateDistance(event));
      };
    
      /**
       * If the player is muted unmute it.
       */
    
    
      VolumeBar.prototype.checkMuted = function checkMuted() {
        if (this.player_.muted()) {
          this.player_.muted(false);
        }
      };
    
      /**
       * Get percent of volume level
       *
       * @return {number}
       *         Volume level percent as a decimal number.
       */
    
    
      VolumeBar.prototype.getPercent = function getPercent() {
        if (this.player_.muted()) {
          return 0;
        }
        return this.player_.volume();
      };
    
      /**
       * Increase volume level for keyboard users
       */
    
    
      VolumeBar.prototype.stepForward = function stepForward() {
        this.checkMuted();
        this.player_.volume(this.player_.volume() + 0.1);
      };
    
      /**
       * Decrease volume level for keyboard users
       */
    
    
      VolumeBar.prototype.stepBack = function stepBack() {
        this.checkMuted();
        this.player_.volume(this.player_.volume() - 0.1);
      };
    
      /**
       * Update ARIA accessibility attributes
       *
       * @param {EventTarget~Event} [event]
       *        The `volumechange` event that caused this function to run.
       *
       * @listens Player#volumechange
       */
    
    
      VolumeBar.prototype.updateARIAAttributes = function updateARIAAttributes(event) {
        var ariaValue = this.player_.muted() ? 0 : this.volumeAsPercentage_();
    
        this.el_.setAttribute('aria-valuenow', ariaValue);
        this.el_.setAttribute('aria-valuetext', ariaValue + '%');
      };
    
      /**
       * Returns the current value of the player volume as a percentage
       *
       * @private
       */
    
    
      VolumeBar.prototype.volumeAsPercentage_ = function volumeAsPercentage_() {
        return Math.round(this.player_.volume() * 100);
      };
    
      /**
       * When user starts dragging the VolumeBar, store the volume and listen for
       * the end of the drag. When the drag ends, if the volume was set to zero,
       * set lastVolume to the stored volume.
       *
       * @listens slideractive
       * @private
       */
    
    
      VolumeBar.prototype.updateLastVolume_ = function updateLastVolume_() {
        var _this2 = this;
    
        var volumeBeforeDrag = this.player_.volume();
    
        this.one('sliderinactive', function () {
          if (_this2.player_.volume() === 0) {
            _this2.player_.lastVolume_(volumeBeforeDrag);
          }
        });
      };
    
      return VolumeBar;
    }(Slider);
    
    /**
     * Default options for the `VolumeBar`
     *
     * @type {Object}
     * @private
     */
    
    
    VolumeBar.prototype.options_ = {
      children: ['volumeLevel'],
      barName: 'volumeLevel'
    };
    
    /**
     * Call the update event for this Slider when this event happens on the player.
     *
     * @type {string}
     */
    VolumeBar.prototype.playerEvent = 'volumechange';
    
    Component.registerComponent('VolumeBar', VolumeBar);
    
    /**
     * @file volume-control.js
     */
    // Required children
    /**
     * The component for controlling the volume level
     *
     * @extends Component
     */
    
    var VolumeControl = function (_Component) {
      inherits(VolumeControl, _Component);
    
      /**
       * Creates an instance of this class.
       *
       * @param {Player} player
       *        The `Player` that this class should be attached to.
       *
       * @param {Object} [options={}]
       *        The key/value store of player options.
       */
      function VolumeControl(player) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        classCallCheck(this, VolumeControl);
    
        options.vertical = options.vertical || false;
    
        // Pass the vertical option down to the VolumeBar if
        // the VolumeBar is turned on.
        if (typeof options.volumeBar === 'undefined' || isPlain(options.volumeBar)) {
          options.volumeBar = options.volumeBar || {};
          options.volumeBar.vertical = options.vertical;
        }
    
        // hide this control if volume support is missing
        var _this = possibleConstructorReturn(this, _Component.call(this, player, options));
    
        checkVolumeSupport(_this, player);
    
        _this.throttledHandleMouseMove = throttle(bind(_this, _this.handleMouseMove), 25);
    
        _this.on('mousedown', _this.handleMouseDown);
        _this.on('touchstart', _this.handleMouseDown);
    
        // while the slider is active (the mouse has been pressed down and
        // is dragging) or in focus we do not want to hide the VolumeBar
        _this.on(_this.volumeBar, ['focus', 'slideractive'], function () {
          _this.volumeBar.addClass('vjs-slider-active');
          _this.addClass('vjs-slider-active');
          _this.trigger('slideractive');
        });
    
        _this.on(_this.volumeBar, ['blur', 'sliderinactive'], function () {
          _this.volumeBar.removeClass('vjs-slider-active');
          _this.removeClass('vjs-slider-active');
          _this.trigger('sliderinactive');
        });
        return _this;
      }
    
      /**
       * Create the `Component`'s DOM element
       *
       * @return {Element}
       *         The element that was created.
       */
    
    
      VolumeControl.prototype.createEl = function createEl() {
        var orientationClass = 'vjs-volume-horizontal';
    
        if (this.options_.vertical) {
          orientationClass = 'vjs-volume-vertical';
        }
    
        return _Component.prototype.createEl.call(this, 'div', {
          className: 'vjs-volume-control vjs-control ' + orientationClass
        });
      };
    
      /**
       * Handle `mousedown` or `touchstart` events on the `VolumeControl`.
       *
       * @param {EventTarget~Event} event
       *        `mousedown` or `touchstart` event that triggered this function
       *
       * @listens mousedown
       * @listens touchstart
       */
    
    
      VolumeControl.prototype.handleMouseDown = function handleMouseDown(event) {
        var doc = this.el_.ownerDocument;
    
        this.on(doc, 'mousemove', this.throttledHandleMouseMove);
        this.on(doc, 'touchmove', this.throttledHandleMouseMove);
        this.on(doc, 'mouseup', this.handleMouseUp);
        this.on(doc, 'touchend', this.handleMouseUp);
      };
    
      /**
       * Handle `mouseup` or `touchend` events on the `VolumeControl`.
       *
       * @param {EventTarget~Event} event
       *        `mouseup` or `touchend` event that triggered this function.
       *
       * @listens touchend
       * @listens mouseup
       */
    
    
      VolumeControl.prototype.handleMouseUp = function handleMouseUp(event) {
        var doc = this.el_.ownerDocument;
    
        this.off(doc, 'mousemove', this.throttledHandleMouseMove);
        this.off(doc, 'touchmove', this.throttledHandleMouseMove);
        this.off(doc, 'mouseup', this.handleMouseUp);
        this.off(doc, 'touchend', this.handleMouseUp);
      };
    
      /**
       * Handle `mousedown` or `touchstart` events on the `VolumeControl`.
       *
       * @param {EventTarget~Event} event
       *        `mousedown` or `touchstart` event that triggered this function
       *
       * @listens mousedown
       * @listens touchstart
       */
    
    
      VolumeControl.prototype.handleMouseMove = function handleMouseMove(event) {
        this.volumeBar.handleMouseMove(event);
      };
    
      return VolumeControl;
    }(Component);
    
    /**
     * Default options for the `VolumeControl`
     *
     * @type {Object}
     * @private
     */
    
    
    VolumeControl.prototype.options_ = {
      children: ['volumeBar']
    };
    
    Component.registerComponent('VolumeControl', VolumeControl);
    
    /**
     * @file mute-toggle.js
     */
    /**
     * A button component for muting the audio.
     *
     * @extends Button
     */
    
    var MuteToggle = function (_Button) {
      inherits(MuteToggle, _Button);
    
      /**
       * Creates an instance of this class.
       *
       * @param {Player} player
       *        The `Player` that this class should be attached to.
       *
       * @param {Object} [options]
       *        The key/value store of player options.
       */
      function MuteToggle(player, options) {
        classCallCheck(this, MuteToggle);
    
        // hide this control if volume support is missing
        var _this = possibleConstructorReturn(this, _Button.call(this, player, options));
    
        checkVolumeSupport(_this, player);
    
        _this.on(player, ['loadstart', 'volumechange'], _this.update);
        return _this;
      }
    
      /**
       * Builds the default DOM `className`.
       *
       * @return {string}
       *         The DOM `className` for this object.
       */
    
    
      MuteToggle.prototype.buildCSSClass = function buildCSSClass() {
        return 'vjs-mute-control ' + _Button.prototype.buildCSSClass.call(this);
      };
    
      /**
       * This gets called when an `MuteToggle` is "clicked". See
       * {@link ClickableComponent} for more detailed information on what a click can be.
       *
       * @param {EventTarget~Event} [event]
       *        The `keydown`, `tap`, or `click` event that caused this function to be
       *        called.
       *
       * @listens tap
       * @listens click
       */
    
    
      MuteToggle.prototype.handleClick = function handleClick(event) {
        var vol = this.player_.volume();
        var lastVolume = this.player_.lastVolume_();
    
        if (vol === 0) {
          var volumeToSet = lastVolume < 0.1 ? 0.1 : lastVolume;
    
          this.player_.volume(volumeToSet);
          this.player_.muted(false);
        } else {
          this.player_.muted(this.player_.muted() ? false : true);
        }
      };
    
      /**
       * Update the `MuteToggle` button based on the state of `volume` and `muted`
       * on the player.
       *
       * @param {EventTarget~Event} [event]
       *        The {@link Player#loadstart} event if this function was called
       *        through an event.
       *
       * @listens Player#loadstart
       * @listens Player#volumechange
       */
    
    
      MuteToggle.prototype.update = function update(event) {
        this.updateIcon_();
        this.updateControlText_();
      };
    
      /**
       * Update the appearance of the `MuteToggle` icon.
       *
       * Possible states (given `level` variable below):
       * - 0: crossed out
       * - 1: zero bars of volume
       * - 2: one bar of volume
       * - 3: two bars of volume
       *
       * @private
       */
    
    
      MuteToggle.prototype.updateIcon_ = function updateIcon_() {
        var vol = this.player_.volume();
        var level = 3;
    
        if (vol === 0 || this.player_.muted()) {
          level = 0;
        } else if (vol < 0.33) {
          level = 1;
        } else if (vol < 0.67) {
          level = 2;
        }
    
        // TODO improve muted icon classes
        for (var i = 0; i < 4; i++) {
          removeClass(this.el_, 'vjs-vol-' + i);
        }
        addClass(this.el_, 'vjs-vol-' + level);
      };
    
      /**
       * If `muted` has changed on the player, update the control text
       * (`title` attribute on `vjs-mute-control` element and content of
       * `vjs-control-text` element).
       *
       * @private
       */
    
    
      MuteToggle.prototype.updateControlText_ = function updateControlText_() {
        var soundOff = this.player_.muted() || this.player_.volume() === 0;
        var text = soundOff ? 'Unmute' : 'Mute';
    
        if (this.controlText() !== text) {
          this.controlText(text);
        }
      };
    
      return MuteToggle;
    }(Button);
    
    /**
     * The text that should display over the `MuteToggle`s controls. Added for localization.
     *
     * @type {string}
     * @private
     */
    
    
    MuteToggle.prototype.controlText_ = 'Mute';
    
    Component.registerComponent('MuteToggle', MuteToggle);
    
    /**
     * @file volume-control.js
     */
    // Required children
    /**
     * A Component to contain the MuteToggle and VolumeControl so that
     * they can work together.
     *
     * @extends Component
     */
    
    var VolumePanel = function (_Component) {
      inherits(VolumePanel, _Component);
    
      /**
       * Creates an instance of this class.
       *
       * @param {Player} player
       *        The `Player` that this class should be attached to.
       *
       * @param {Object} [options={}]
       *        The key/value store of player options.
       */
      function VolumePanel(player) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        classCallCheck(this, VolumePanel);
    
        if (typeof options.inline !== 'undefined') {
          options.inline = options.inline;
        } else {
          options.inline = true;
        }
    
        // pass the inline option down to the VolumeControl as vertical if
        // the VolumeControl is on.
        if (typeof options.volumeControl === 'undefined' || isPlain(options.volumeControl)) {
          options.volumeControl = options.volumeControl || {};
          options.volumeControl.vertical = !options.inline;
        }
    
        // hide this control if volume support is missing
        var _this = possibleConstructorReturn(this, _Component.call(this, player, options));
    
        checkVolumeSupport(_this, player);
    
        // while the slider is active (the mouse has been pressed down and
        // is dragging) or in focus we do not want to hide the VolumeBar
        _this.on(_this.volumeControl, ['slideractive'], _this.sliderActive_);
        _this.on(_this.muteToggle, 'focus', _this.sliderActive_);
    
        _this.on(_this.volumeControl, ['sliderinactive'], _this.sliderInactive_);
        _this.on(_this.muteToggle, 'blur', _this.sliderInactive_);
        return _this;
      }
    
      /**
       * Add vjs-slider-active class to the VolumePanel
       *
       * @listens VolumeControl#slideractive
       * @private
       */
    
    
      VolumePanel.prototype.sliderActive_ = function sliderActive_() {
        this.addClass('vjs-slider-active');
      };
    
      /**
       * Removes vjs-slider-active class to the VolumePanel
       *
       * @listens VolumeControl#sliderinactive
       * @private
       */
    
    
      VolumePanel.prototype.sliderInactive_ = function sliderInactive_() {
        this.removeClass('vjs-slider-active');
      };
    
      /**
       * Create the `Component`'s DOM element
       *
       * @return {Element}
       *         The element that was created.
       */
    
    
      VolumePanel.prototype.createEl = function createEl() {
        var orientationClass = 'vjs-volume-panel-horizontal';
    
        if (!this.options_.inline) {
          orientationClass = 'vjs-volume-panel-vertical';
        }
    
        return _Component.prototype.createEl.call(this, 'div', {
          className: 'vjs-volume-panel vjs-control ' + orientationClass
        });
      };
    
      return VolumePanel;
    }(Component);
    
    /**
     * Default options for the `VolumeControl`
     *
     * @type {Object}
     * @private
     */
    
    
    VolumePanel.prototype.options_ = {
      children: ['muteToggle', 'volumeControl']
    };
    
    Component.registerComponent('VolumePanel', VolumePanel);
    
    /**
     * @file menu.js
     */
    /**
     * The Menu component is used to build popup menus, including subtitle and
     * captions selection menus.
     *
     * @extends Component
     */
    
    var Menu = function (_Component) {
      inherits(Menu, _Component);
    
      /**
       * Create an instance of this class.
       *
       * @param {Player} player
       *        the player that this component should attach to
       *
       * @param {Object} [options]
       *        Object of option names and values
       *
       */
      function Menu(player, options) {
        classCallCheck(this, Menu);
    
        var _this = possibleConstructorReturn(this, _Component.call(this, player, options));
    
        if (options) {
          _this.menuButton_ = options.menuButton;
        }
    
        _this.focusedChild_ = -1;
    
        _this.on('keydown', _this.handleKeyPress);
        return _this;
      }
    
      /**
       * Add a {@link MenuItem} to the menu.
       *
       * @param {Object|string} component
       *        The name or instance of the `MenuItem` to add.
       *
       */
    
    
      Menu.prototype.addItem = function addItem(component) {
        this.addChild(component);
        component.on('click', bind(this, function (event) {
          // Unpress the associated MenuButton, and move focus back to it
          if (this.menuButton_) {
            this.menuButton_.unpressButton();
    
            // don't focus menu button if item is a caption settings item
            // because focus will move elsewhere and it logs an error on IE8
            if (component.name() !== 'CaptionSettingsMenuItem') {
              this.menuButton_.focus();
            }
          }
        }));
      };
    
      /**
       * Create the `Menu`s DOM element.
       *
       * @return {Element}
       *         the element that was created
       */
    
    
      Menu.prototype.createEl = function createEl$$1() {
        var contentElType = this.options_.contentElType || 'ul';
    
        this.contentEl_ = createEl(contentElType, {
          className: 'vjs-menu-content'
        });
    
        this.contentEl_.setAttribute('role', 'menu');
    
        var el = _Component.prototype.createEl.call(this, 'div', {
          append: this.contentEl_,
          className: 'vjs-menu'
        });
    
        el.appendChild(this.contentEl_);
    
        // Prevent clicks from bubbling up. Needed for Menu Buttons,
        // where a click on the parent is significant
        on(el, 'click', function (event) {
          event.preventDefault();
          event.stopImmediatePropagation();
        });
    
        return el;
      };
    
      /**
       * Handle a `keydown` event on this menu. This listener is added in the constructor.
       *
       * @param {EventTarget~Event} event
       *        A `keydown` event that happened on the menu.
       *
       * @listens keydown
       */
    
    
      Menu.prototype.handleKeyPress = function handleKeyPress(event) {
        // Left and Down Arrows
        if (event.which === 37 || event.which === 40) {
          event.preventDefault();
          this.stepForward();
    
          // Up and Right Arrows
        } else if (event.which === 38 || event.which === 39) {
          event.preventDefault();
          this.stepBack();
        }
      };
    
      /**
       * Move to next (lower) menu item for keyboard users.
       */
    
    
      Menu.prototype.stepForward = function stepForward() {
        var stepChild = 0;
    
        if (this.focusedChild_ !== undefined) {
          stepChild = this.focusedChild_ + 1;
        }
        this.focus(stepChild);
      };
    
      /**
       * Move to previous (higher) menu item for keyboard users.
       */
    
    
      Menu.prototype.stepBack = function stepBack() {
        var stepChild = 0;
    
        if (this.focusedChild_ !== undefined) {
          stepChild = this.focusedChild_ - 1;
        }
        this.focus(stepChild);
      };
    
      /**
       * Set focus on a {@link MenuItem} in the `Menu`.
       *
       * @param {Object|string} [item=0]
       *        Index of child item set focus on.
       */
    
    
      Menu.prototype.focus = function focus() {
        var item = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    
        var children = this.children().slice();
        var haveTitle = children.length && children[0].className && /vjs-menu-title/.test(children[0].className);
    
        if (haveTitle) {
          children.shift();
        }
    
        if (children.length > 0) {
          if (item < 0) {
            item = 0;
          } else if (item >= children.length) {
            item = children.length - 1;
          }
    
          this.focusedChild_ = item;
    
          children[item].el_.focus();
        }
      };
    
      return Menu;
    }(Component);
    
    Component.registerComponent('Menu', Menu);
    
    /**
     * @file menu-button.js
     */
    /**
     * A `MenuButton` class for any popup {@link Menu}.
     *
     * @extends Component
     */
    
    var MenuButton = function (_Component) {
      inherits(MenuButton, _Component);
    
      /**
       * Creates an instance of this class.
       *
       * @param {Player} player
       *        The `Player` that this class should be attached to.
       *
       * @param {Object} [options={}]
       *        The key/value store of player options.
       */
      function MenuButton(player) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        classCallCheck(this, MenuButton);
    
        var _this = possibleConstructorReturn(this, _Component.call(this, player, options));
    
        _this.menuButton_ = new Button(player, options);
    
        _this.menuButton_.controlText(_this.controlText_);
        _this.menuButton_.el_.setAttribute('aria-haspopup', 'true');
    
        // Add buildCSSClass values to the button, not the wrapper
        var buttonClass = Button.prototype.buildCSSClass();
    
        _this.menuButton_.el_.className = _this.buildCSSClass() + ' ' + buttonClass;
        _this.menuButton_.removeClass('vjs-control');
    
        _this.addChild(_this.menuButton_);
    
        _this.update();
    
        _this.enabled_ = true;
    
        _this.on(_this.menuButton_, 'tap', _this.handleClick);
        _this.on(_this.menuButton_, 'click', _this.handleClick);
        _this.on(_this.menuButton_, 'focus', _this.handleFocus);
        _this.on(_this.menuButton_, 'blur', _this.handleBlur);
    
        _this.on('keydown', _this.handleSubmenuKeyPress);
        return _this;
      }
    
      /**
       * Update the menu based on the current state of its items.
       */
    
    
      MenuButton.prototype.update = function update() {
        var menu = this.createMenu();
    
        if (this.menu) {
          this.removeChild(this.menu);
        }
    
        this.menu = menu;
        this.addChild(menu);
    
        /**
         * Track the state of the menu button
         *
         * @type {Boolean}
         * @private
         */
        this.buttonPressed_ = false;
        this.menuButton_.el_.setAttribute('aria-expanded', 'false');
    
        if (this.items && this.items.length <= this.hideThreshold_) {
          this.hide();
        } else {
          this.show();
        }
      };
    
      /**
       * Create the menu and add all items to it.
       *
       * @return {Menu}
       *         The constructed menu
       */
    
    
      MenuButton.prototype.createMenu = function createMenu() {
        var menu = new Menu(this.player_, { menuButton: this });
    
        /**
         * Hide the menu if the number of items is less than or equal to this threshold. This defaults
         * to 0 and whenever we add items which can be hidden to the menu we'll increment it. We list
         * it here because every time we run `createMenu` we need to reset the value.
         *
         * @protected
         * @type {Number}
         */
        this.hideThreshold_ = 0;
    
        // Add a title list item to the top
        if (this.options_.title) {
          var title = createEl('li', {
            className: 'vjs-menu-title',
            innerHTML: toTitleCase(this.options_.title),
            tabIndex: -1
          });
    
          this.hideThreshold_ += 1;
    
          menu.children_.unshift(title);
          prependTo(title, menu.contentEl());
        }
    
        this.items = this.createItems();
    
        if (this.items) {
          // Add menu items to the menu
          for (var i = 0; i < this.items.length; i++) {
            menu.addItem(this.items[i]);
          }
        }
    
        return menu;
      };
    
      /**
       * Create the list of menu items. Specific to each subclass.
       *
       * @abstract
       */
    
    
      MenuButton.prototype.createItems = function createItems() {};
    
      /**
       * Create the `MenuButtons`s DOM element.
       *
       * @return {Element}
       *         The element that gets created.
       */
    
    
      MenuButton.prototype.createEl = function createEl$$1() {
        return _Component.prototype.createEl.call(this, 'div', {
          className: this.buildWrapperCSSClass()
        }, {});
      };
    
      /**
       * Allow sub components to stack CSS class names for the wrapper element
       *
       * @return {string}
       *         The constructed wrapper DOM `className`
       */
    
    
      MenuButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
        var menuButtonClass = 'vjs-menu-button';
    
        // If the inline option is passed, we want to use different styles altogether.
        if (this.options_.inline === true) {
          menuButtonClass += '-inline';
        } else {
          menuButtonClass += '-popup';
        }
    
        // TODO: Fix the CSS so that this isn't necessary
        var buttonClass = Button.prototype.buildCSSClass();
    
        return 'vjs-menu-button ' + menuButtonClass + ' ' + buttonClass + ' ' + _Component.prototype.buildCSSClass.call(this);
      };
    
      /**
       * Builds the default DOM `className`.
       *
       * @return {string}
       *         The DOM `className` for this object.
       */
    
    
      MenuButton.prototype.buildCSSClass = function buildCSSClass() {
        var menuButtonClass = 'vjs-menu-button';
    
        // If the inline option is passed, we want to use different styles altogether.
        if (this.options_.inline === true) {
          menuButtonClass += '-inline';
        } else {
          menuButtonClass += '-popup';
        }
    
        return 'vjs-menu-button ' + menuButtonClass + ' ' + _Component.prototype.buildCSSClass.call(this);
      };
    
      /**
       * Get or set the localized control text that will be used for accessibility.
       *
       * > NOTE: This will come from the internal `menuButton_` element.
       *
       * @param {string} [text]
       *        Control text for element.
       *
       * @param {Element} [el=this.menuButton_.el()]
       *        Element to set the title on.
       *
       * @return {string}
       *         - The control text when getting
       */
    
    
      MenuButton.prototype.controlText = function controlText(text) {
        var el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.menuButton_.el();
    
        return this.menuButton_.controlText(text, el);
      };
    
      /**
       * Handle a click on a `MenuButton`.
       * See {@link ClickableComponent#handleClick} for instances where this is called.
       *
       * @param {EventTarget~Event} event
       *        The `keydown`, `tap`, or `click` event that caused this function to be
       *        called.
       *
       * @listens tap
       * @listens click
       */
    
    
      MenuButton.prototype.handleClick = function handleClick(event) {
        // When you click the button it adds focus, which will show the menu.
        // So we'll remove focus when the mouse leaves the button. Focus is needed
        // for tab navigation.
    
        this.one(this.menu.contentEl(), 'mouseleave', bind(this, function (e) {
          this.unpressButton();
          this.el_.blur();
        }));
        if (this.buttonPressed_) {
          this.unpressButton();
        } else {
          this.pressButton();
        }
      };
    
      /**
       * Set the focus to the actual button, not to this element
       */
    
    
      MenuButton.prototype.focus = function focus() {
        this.menuButton_.focus();
      };
    
      /**
       * Remove the focus from the actual button, not this element
       */
    
    
      MenuButton.prototype.blur = function blur() {
        this.menuButton_.blur();
      };
    
      /**
       * This gets called when a `MenuButton` gains focus via a `focus` event.
       * Turns on listening for `keydown` events. When they happen it
       * calls `this.handleKeyPress`.
       *
       * @param {EventTarget~Event} event
       *        The `focus` event that caused this function to be called.
       *
       * @listens focus
       */
    
    
      MenuButton.prototype.handleFocus = function handleFocus() {
        on(document_1, 'keydown', bind(this, this.handleKeyPress));
      };
    
      /**
       * Called when a `MenuButton` loses focus. Turns off the listener for
       * `keydown` events. Which Stops `this.handleKeyPress` from getting called.
       *
       * @param {EventTarget~Event} event
       *        The `blur` event that caused this function to be called.
       *
       * @listens blur
       */
    
    
      MenuButton.prototype.handleBlur = function handleBlur() {
        off(document_1, 'keydown', bind(this, this.handleKeyPress));
      };
    
      /**
       * Handle tab, escape, down arrow, and up arrow keys for `MenuButton`. See
       * {@link ClickableComponent#handleKeyPress} for instances where this is called.
       *
       * @param {EventTarget~Event} event
       *        The `keydown` event that caused this function to be called.
       *
       * @listens keydown
       */
    
    
      MenuButton.prototype.handleKeyPress = function handleKeyPress(event) {
    
        // Escape (27) key or Tab (9) key unpress the 'button'
        if (event.which === 27 || event.which === 9) {
          if (this.buttonPressed_) {
            this.unpressButton();
          }
          // Don't preventDefault for Tab key - we still want to lose focus
          if (event.which !== 9) {
            event.preventDefault();
            // Set focus back to the menu button's button
            this.menuButton_.el_.focus();
          }
          // Up (38) key or Down (40) key press the 'button'
        } else if (event.which === 38 || event.which === 40) {
          if (!this.buttonPressed_) {
            this.pressButton();
            event.preventDefault();
          }
        }
      };
    
      /**
       * Handle a `keydown` event on a sub-menu. The listener for this is added in
       * the constructor.
       *
       * @param {EventTarget~Event} event
       *        Key press event
       *
       * @listens keydown
       */
    
    
      MenuButton.prototype.handleSubmenuKeyPress = function handleSubmenuKeyPress(event) {
    
        // Escape (27) key or Tab (9) key unpress the 'button'
        if (event.which === 27 || event.which === 9) {
          if (this.buttonPressed_) {
            this.unpressButton();
          }
          // Don't preventDefault for Tab key - we still want to lose focus
          if (event.which !== 9) {
            event.preventDefault();
            // Set focus back to the menu button's button
            this.menuButton_.el_.focus();
          }
        }
      };
    
      /**
       * Put the current `MenuButton` into a pressed state.
       */
    
    
      MenuButton.prototype.pressButton = function pressButton() {
        if (this.enabled_) {
          this.buttonPressed_ = true;
          this.menu.lockShowing();
          this.menuButton_.el_.setAttribute('aria-expanded', 'true');
          // set the focus into the submenu
          this.menu.focus();
        }
      };
    
      /**
       * Take the current `MenuButton` out of a pressed state.
       */
    
    
      MenuButton.prototype.unpressButton = function unpressButton() {
        if (this.enabled_) {
          this.buttonPressed_ = false;
          this.menu.unlockShowing();
          this.menuButton_.el_.setAttribute('aria-expanded', 'false');
        }
      };
    
      /**
       * Disable the `MenuButton`. Don't allow it to be clicked.
       */
    
    
      MenuButton.prototype.disable = function disable() {
        this.unpressButton();
    
        this.enabled_ = false;
        this.addClass('vjs-disabled');
    
        this.menuButton_.disable();
      };
    
      /**
       * Enable the `MenuButton`. Allow it to be clicked.
       */
    
    
      MenuButton.prototype.enable = function enable() {
        this.enabled_ = true;
        this.removeClass('vjs-disabled');
    
        this.menuButton_.enable();
      };
    
      return MenuButton;
    }(Component);
    
    Component.registerComponent('MenuButton', MenuButton);
    
    /**
     * @file track-button.js
     */
    /**
     * The base class for buttons that toggle specific  track types (e.g. subtitles).
     *
     * @extends MenuButton
     */
    
    var TrackButton = function (_MenuButton) {
      inherits(TrackButton, _MenuButton);
    
      /**
       * Creates an instance of this class.
       *
       * @param {Player} player
       *        The `Player` that this class should be attached to.
       *
       * @param {Object} [options]
       *        The key/value store of player options.
       */
      function TrackButton(player, options) {
        classCallCheck(this, TrackButton);
    
        var tracks = options.tracks;
    
        var _this = possibleConstructorReturn(this, _MenuButton.call(this, player, options));
    
        if (_this.items.length <= 1) {
          _this.hide();
        }
    
        if (!tracks) {
          return possibleConstructorReturn(_this);
        }
    
        var updateHandler = bind(_this, _this.update);
    
        tracks.addEventListener('removetrack', updateHandler);
        tracks.addEventListener('addtrack', updateHandler);
        _this.player_.on('ready', updateHandler);
    
        _this.player_.on('dispose', function () {
          tracks.removeEventListener('removetrack', updateHandler);
          tracks.removeEventListener('addtrack', updateHandler);
        });
        return _this;
      }
    
      return TrackButton;
    }(MenuButton);
    
    Component.registerComponent('TrackButton', TrackButton);
    
    /**
     * @file menu-item.js
     */
    /**
     * The component for a menu item. `<li>`
     *
     * @extends ClickableComponent
     */
    
    var MenuItem = function (_ClickableComponent) {
      inherits(MenuItem, _ClickableComponent);
    
      /**
       * Creates an instance of the this class.
       *
       * @param {Player} player
       *        The `Player` that this class should be attached to.
       *
       * @param {Object} [options={}]
       *        The key/value store of player options.
       *
       */
      function MenuItem(player, options) {
        classCallCheck(this, MenuItem);
    
        var _this = possibleConstructorReturn(this, _ClickableComponent.call(this, player, options));
    
        _this.selectable = options.selectable;
    
        _this.selected(options.selected);
    
        if (_this.selectable) {
          // TODO: May need to be either menuitemcheckbox or menuitemradio,
          //       and may need logical grouping of menu items.
          _this.el_.setAttribute('role', 'menuitemcheckbox');
        } else {
          _this.el_.setAttribute('role', 'menuitem');
        }
        return _this;
      }
    
      /**
       * Create the `MenuItem's DOM element
       *
       * @param {string} [type=li]
       *        Element's node type, not actually used, always set to `li`.
       *
       * @param {Object} [props={}]
       *        An object of properties that should be set on the element
       *
       * @param {Object} [attrs={}]
       *        An object of attributes that should be set on the element
       *
       * @return {Element}
       *         The element that gets created.
       */
    
    
      MenuItem.prototype.createEl = function createEl(type, props, attrs) {
        // The control is textual, not just an icon
        this.nonIconControl = true;
    
        return _ClickableComponent.prototype.createEl.call(this, 'li', assign({
          className: 'vjs-menu-item',
          innerHTML: '<span class="vjs-menu-item-text">' + this.localize(this.options_.label) + '</span>',
          tabIndex: -1
        }, props), attrs);
      };
    
      /**
       * Any click on a `MenuItem` puts int into the selected state.
       * See {@link ClickableComponent#handleClick} for instances where this is called.
       *
       * @param {EventTarget~Event} event
       *        The `keydown`, `tap`, or `click` event that caused this function to be
       *        called.
       *
       * @listens tap
       * @listens click
       */
    
    
      MenuItem.prototype.handleClick = function handleClick(event) {
        this.selected(true);
      };
    
      /**
       * Set the state for this menu item as selected or not.
       *
       * @param {boolean} selected
       *        if the menu item is selected or not
       */
    
    
      MenuItem.prototype.selected = function selected(_selected) {
        if (this.selectable) {
          if (_selected) {
            this.addClass('vjs-selected');
            this.el_.setAttribute('aria-checked', 'true');
            // aria-checked isn't fully supported by browsers/screen readers,
            // so indicate selected state to screen reader in the control text.
            this.controlText(', selected');
          } else {
            this.removeClass('vjs-selected');
            this.el_.setAttribute('aria-checked', 'false');
            // Indicate un-selected state to screen reader
            // Note that a space clears out the selected state text
            this.controlText(' ');
          }
        }
      };
    
      return MenuItem;
    }(ClickableComponent);
    
    Component.registerComponent('MenuItem', MenuItem);
    
    /**
     * @file text-track-menu-item.js
     */
    /**
     * The specific menu item type for selecting a language within a text track kind
     *
     * @extends MenuItem
     */
    
    var TextTrackMenuItem = function (_MenuItem) {
      inherits(TextTrackMenuItem, _MenuItem);
    
      /**
       * Creates an instance of this class.
       *
       * @param {Player} player
       *        The `Player` that this class should be attached to.
       *
       * @param {Object} [options]
       *        The key/value store of player options.
       */
      function TextTrackMenuItem(player, options) {
        classCallCheck(this, TextTrackMenuItem);
    
        var track = options.track;
        var tracks = player.textTracks();
    
        // Modify options for parent MenuItem class's init.
        options.label = track.label || track.language || 'Unknown';
        options.selected = track.mode === 'showing';
    
        var _this = possibleConstructorReturn(this, _MenuItem.call(this, player, options));
    
        _this.track = track;
        var changeHandler = bind(_this, _this.handleTracksChange);
        var selectedLanguageChangeHandler = bind(_this, _this.handleSelectedLanguageChange);
    
        player.on(['loadstart', 'texttrackchange'], changeHandler);
        tracks.addEventListener('change', changeHandler);
        tracks.addEventListener('selectedlanguagechange', selectedLanguageChangeHandler);
        _this.on('dispose', function () {
          tracks.removeEventListener('change', changeHandler);
          tracks.removeEventListener('selectedlanguagechange', selectedLanguageChangeHandler);
        });
    
        // iOS7 doesn't dispatch change events to TextTrackLists when an
        // associated track's mode changes. Without something like
        // Object.observe() (also not present on iOS7), it's not
        // possible to detect changes to the mode attribute and polyfill
        // the change event. As a poor substitute, we manually dispatch
        // change events whenever the controls modify the mode.
        if (tracks.onchange === undefined) {
          var event = void 0;
    
          _this.on(['tap', 'click'], function () {
            if (_typeof(window_1.Event) !== 'object') {
              // Android 2.3 throws an Illegal Constructor error for window.Event
              try {
                event = new window_1.Event('change');
              } catch (err) {
                // continue regardless of error
              }
            }
    
            if (!event) {
              event = document_1.createEvent('Event');
              event.initEvent('change', true, true);
            }
    
            tracks.dispatchEvent(event);
          });
        }
        return _this;
      }
    
      /**
       * This gets called when an `TextTrackMenuItem` is "clicked". See
       * {@link ClickableComponent} for more detailed information on what a click can be.
       *
       * @param {EventTarget~Event} event
       *        The `keydown`, `tap`, or `click` event that caused this function to be
       *        called.
       *
       * @listens tap
       * @listens click
       */
    
    
      TextTrackMenuItem.prototype.handleClick = function handleClick(event) {
        var kind = this.track.kind;
        var kinds = this.track.kinds;
        var tracks = this.player_.textTracks();
    
        if (!kinds) {
          kinds = [kind];
        }
    
        _MenuItem.prototype.handleClick.call(this, event);
    
        if (!tracks) {
          return;
        }
    
        for (var i = 0; i < tracks.length; i++) {
          var track = tracks[i];
    
          if (track === this.track && kinds.indexOf(track.kind) > -1) {
            if (track.mode !== 'showing') {
              track.mode = 'showing';
            }
          } else if (track.mode !== 'disabled') {
            track.mode = 'disabled';
          }
        }
      };
    
      /**
       * Handle text track list change
       *
       * @param {EventTarget~Event} event
       *        The `change` event that caused this function to be called.
       *
       * @listens TextTrackList#change
       */
    
    
      TextTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {
        this.selected(this.track.mode === 'showing');
      };
    
      TextTrackMenuItem.prototype.handleSelectedLanguageChange = function handleSelectedLanguageChange(event) {
        if (this.track.mode === 'showing') {
          var selectedLanguage = this.player_.cache_.selectedLanguage;
    
          // Don't replace the kind of track across the same language
          if (selectedLanguage && selectedLanguage.enabled && selectedLanguage.language === this.track.language && selectedLanguage.kind !== this.track.kind) {
            return;
          }
    
          this.player_.cache_.selectedLanguage = {
            enabled: true,
            language: this.track.language,
            kind: this.track.kind
          };
        }
      };
    
      return TextTrackMenuItem;
    }(MenuItem);
    
    Component.registerComponent('TextTrackMenuItem', TextTrackMenuItem);
    
    /**
     * @file off-text-track-menu-item.js
     */
    /**
     * A special menu item for turning of a specific type of text track
     *
     * @extends TextTrackMenuItem
     */
    
    var OffTextTrackMenuItem = function (_TextTrackMenuItem) {
      inherits(OffTextTrackMenuItem, _TextTrackMenuItem);
    
      /**
       * Creates an instance of this class.
       *
       * @param {Player} player
       *        The `Player` that this class should be attached to.
       *
       * @param {Object} [options]
       *        The key/value store of player options.
       */
      function OffTextTrackMenuItem(player, options) {
        classCallCheck(this, OffTextTrackMenuItem);
    
        // Create pseudo track info
        // Requires options['kind']
        options.track = {
          player: player,
          kind: options.kind,
          kinds: options.kinds,
          'default': false,
          mode: 'disabled'
        };
    
        if (!options.kinds) {
          options.kinds = [options.kind];
        }
    
        if (options.label) {
          options.track.label = options.label;
        } else {
          options.track.label = options.kinds.join(' and ') + ' off';
        }
    
        // MenuItem is selectable
        options.selectable = true;
    
        var _this = possibleConstructorReturn(this, _TextTrackMenuItem.call(this, player, options));
    
        _this.selected(true);
        return _this;
      }
    
      /**
       * Handle text track change
       *
       * @param {EventTarget~Event} event
       *        The event that caused this function to run
       */
    
    
      OffTextTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {
        var tracks = this.player().textTracks();
        var selected = true;
    
        for (var i = 0, l = tracks.length; i < l; i++) {
          var track = tracks[i];
    
          if (this.options_.kinds.indexOf(track.kind) > -1 && track.mode === 'showing') {
            selected = false;
            break;
          }
        }
    
        this.selected(selected);
      };
    
      OffTextTrackMenuItem.prototype.handleSelectedLanguageChange = function handleSelectedLanguageChange(event) {
        var tracks = this.player().textTracks();
        var allHidden = true;
    
        for (var i = 0, l = tracks.length; i < l; i++) {
          var track = tracks[i];
    
          if (['captions', 'descriptions', 'subtitles'].indexOf(track.kind) > -1 && track.mode === 'showing') {
            allHidden = false;
            break;
          }
        }
    
        if (allHidden) {
          this.player_.cache_.selectedLanguage = {
            enabled: false
          };
        }
      };
    
      return OffTextTrackMenuItem;
    }(TextTrackMenuItem);
    
    Component.registerComponent('OffTextTrackMenuItem', OffTextTrackMenuItem);
    
    /**
     * @file text-track-button.js
     */
    /**
     * The base class for buttons that toggle specific text track types (e.g. subtitles)
     *
     * @extends MenuButton
     */
    
    var TextTrackButton = function (_TrackButton) {
      inherits(TextTrackButton, _TrackButton);
    
      /**
       * Creates an instance of this class.
       *
       * @param {Player} player
       *        The `Player` that this class should be attached to.
       *
       * @param {Object} [options={}]
       *        The key/value store of player options.
       */
      function TextTrackButton(player) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        classCallCheck(this, TextTrackButton);
    
        options.tracks = player.textTracks();
    
        return possibleConstructorReturn(this, _TrackButton.call(this, player, options));
      }
    
      /**
       * Create a menu item for each text track
       *
       * @param {TextTrackMenuItem[]} [items=[]]
       *        Existing array of items to use during creation
       *
       * @return {TextTrackMenuItem[]}
       *         Array of menu items that were created
       */
    
    
      TextTrackButton.prototype.createItems = function createItems() {
        var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var TrackMenuItem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TextTrackMenuItem;
    
    
        // Label is an overide for the [track] off label
        // USed to localise captions/subtitles
        var label = void 0;
    
        if (this.label_) {
          label = this.label_ + ' off';
        }
        // Add an OFF menu item to turn all tracks off
        items.push(new OffTextTrackMenuItem(this.player_, {
          kinds: this.kinds_,
          kind: this.kind_,
          label: label
        }));
    
        this.hideThreshold_ += 1;
    
        var tracks = this.player_.textTracks();
    
        if (!Array.isArray(this.kinds_)) {
          this.kinds_ = [this.kind_];
        }
    
        for (var i = 0; i < tracks.length; i++) {
          var track = tracks[i];
    
          // only add tracks that are of an appropriate kind and have a label
          if (this.kinds_.indexOf(track.kind) > -1) {
    
            var item = new TrackMenuItem(this.player_, {
              track: track,
              // MenuItem is selectable
              selectable: true
            });
    
            item.addClass('vjs-' + track.kind + '-menu-item');
            items.push(item);
          }
        }
    
        return items;
      };
    
      return TextTrackButton;
    }(TrackButton);
    
    Component.registerComponent('TextTrackButton', TextTrackButton);
    
    /**
     * @file chapters-track-menu-item.js
     */
    /**
     * The chapter track menu item
     *
     * @extends MenuItem
     */
    
    var ChaptersTrackMenuItem = function (_MenuItem) {
      inherits(ChaptersTrackMenuItem, _MenuItem);
    
      /**
       * Creates an instance of this class.
       *
       * @param {Player} player
       *        The `Player` that this class should be attached to.
       *
       * @param {Object} [options]
       *        The key/value store of player options.
       */
      function ChaptersTrackMenuItem(player, options) {
        classCallCheck(this, ChaptersTrackMenuItem);
    
        var track = options.track;
        var cue = options.cue;
        var currentTime = player.currentTime();
    
        // Modify options for parent MenuItem class's init.
        options.selectable = true;
        options.label = cue.text;
        options.selected = cue.startTime <= currentTime && currentTime < cue.endTime;
    
        var _this = possibleConstructorReturn(this, _MenuItem.call(this, player, options));
    
        _this.track = track;
        _this.cue = cue;
        track.addEventListener('cuechange', bind(_this, _this.update));
        return _this;
      }
    
      /**
       * This gets called when an `ChaptersTrackMenuItem` is "clicked". See
       * {@link ClickableComponent} for more detailed information on what a click can be.
       *
       * @param {EventTarget~Event} [event]
       *        The `keydown`, `tap`, or `click` event that caused this function to be
       *        called.
       *
       * @listens tap
       * @listens click
       */
    
    
      ChaptersTrackMenuItem.prototype.handleClick = function handleClick(event) {
        _MenuItem.prototype.handleClick.call(this);
        this.player_.currentTime(this.cue.startTime);
        this.update(this.cue.startTime);
      };
    
      /**
       * Update chapter menu item
       *
       * @param {EventTarget~Event} [event]
       *        The `cuechange` event that caused this function to run.
       *
       * @listens TextTrack#cuechange
       */
    
    
      ChaptersTrackMenuItem.prototype.update = function update(event) {
        var cue = this.cue;
        var currentTime = this.player_.currentTime();
    
        // vjs.log(currentTime, cue.startTime);
        this.selected(cue.startTime <= currentTime && currentTime < cue.endTime);
      };
    
      return ChaptersTrackMenuItem;
    }(MenuItem);
    
    Component.registerComponent('ChaptersTrackMenuItem', ChaptersTrackMenuItem);
    
    /**
     * @file chapters-button.js
     */
    /**
     * The button component for toggling and selecting chapters
     * Chapters act much differently than other text tracks
     * Cues are navigation vs. other tracks of alternative languages
     *
     * @extends TextTrackButton
     */
    
    var ChaptersButton = function (_TextTrackButton) {
      inherits(ChaptersButton, _TextTrackButton);
    
      /**
       * Creates an instance of this class.
       *
       * @param {Player} player
       *        The `Player` that this class should be attached to.
       *
       * @param {Object} [options]
       *        The key/value store of player options.
       *
       * @param {Component~ReadyCallback} [ready]
       *        The function to call when this function is ready.
       */
      function ChaptersButton(player, options, ready) {
        classCallCheck(this, ChaptersButton);
        return possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));
      }
    
      /**
       * Builds the default DOM `className`.
       *
       * @return {string}
       *         The DOM `className` for this object.
       */
    
    
      ChaptersButton.prototype.buildCSSClass = function buildCSSClass() {
        return 'vjs-chapters-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
      };
    
      ChaptersButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
        return 'vjs-chapters-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);
      };
    
      /**
       * Update the menu based on the current state of its items.
       *
       * @param {EventTarget~Event} [event]
       *        An event that triggered this function to run.
       *
       * @listens TextTrackList#addtrack
       * @listens TextTrackList#removetrack
       * @listens TextTrackList#change
       */
    
    
      ChaptersButton.prototype.update = function update(event) {
        if (!this.track_ || event && (event.type === 'addtrack' || event.type === 'removetrack')) {
          this.setTrack(this.findChaptersTrack());
        }
        _TextTrackButton.prototype.update.call(this);
      };
    
      /**
       * Set the currently selected track for the chapters button.
       *
       * @param {TextTrack} track
       *        The new track to select. Nothing will change if this is the currently selected
       *        track.
       */
    
    
      ChaptersButton.prototype.setTrack = function setTrack(track) {
        if (this.track_ === track) {
          return;
        }
    
        if (!this.updateHandler_) {
          this.updateHandler_ = this.update.bind(this);
        }
    
        // here this.track_ refers to the old track instance
        if (this.track_) {
          var remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);
    
          if (remoteTextTrackEl) {
            remoteTextTrackEl.removeEventListener('load', this.updateHandler_);
          }
    
          this.track_ = null;
        }
    
        this.track_ = track;
    
        // here this.track_ refers to the new track instance
        if (this.track_) {
          this.track_.mode = 'hidden';
    
          var _remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);
    
          if (_remoteTextTrackEl) {
            _remoteTextTrackEl.addEventListener('load', this.updateHandler_);
          }
        }
      };
    
      /**
       * Find the track object that is currently in use by this ChaptersButton
       *
       * @return {TextTrack|undefined}
       *         The current track or undefined if none was found.
       */
    
    
      ChaptersButton.prototype.findChaptersTrack = function findChaptersTrack() {
        var tracks = this.player_.textTracks() || [];
    
        for (var i = tracks.length - 1; i >= 0; i--) {
          // We will always choose the last track as our chaptersTrack
          var track = tracks[i];
    
          if (track.kind === this.kind_) {
            return track;
          }
        }
      };
    
      /**
       * Get the caption for the ChaptersButton based on the track label. This will also
       * use the current tracks localized kind as a fallback if a label does not exist.
       *
       * @return {string}
       *         The tracks current label or the localized track kind.
       */
    
    
      ChaptersButton.prototype.getMenuCaption = function getMenuCaption() {
        if (this.track_ && this.track_.label) {
          return this.track_.label;
        }
        return this.localize(toTitleCase(this.kind_));
      };
    
      /**
       * Create menu from chapter track
       *
       * @return {Menu}
       *         New menu for the chapter buttons
       */
    
    
      ChaptersButton.prototype.createMenu = function createMenu() {
        this.options_.title = this.getMenuCaption();
        return _TextTrackButton.prototype.createMenu.call(this);
      };
    
      /**
       * Create a menu item for each text track
       *
       * @return {TextTrackMenuItem[]}
       *         Array of menu items
       */
    
    
      ChaptersButton.prototype.createItems = function createItems() {
        var items = [];
    
        if (!this.track_) {
          return items;
        }
    
        var cues = this.track_.cues;
    
        if (!cues) {
          return items;
        }
    
        for (var i = 0, l = cues.length; i < l; i++) {
          var cue = cues[i];
          var mi = new ChaptersTrackMenuItem(this.player_, { track: this.track_, cue: cue });
    
          items.push(mi);
        }
    
        return items;
      };
    
      return ChaptersButton;
    }(TextTrackButton);
    
    /**
     * `kind` of TextTrack to look for to associate it with this menu.
     *
     * @type {string}
     * @private
     */
    
    
    ChaptersButton.prototype.kind_ = 'chapters';
    
    /**
     * The text that should display over the `ChaptersButton`s controls. Added for localization.
     *
     * @type {string}
     * @private
     */
    ChaptersButton.prototype.controlText_ = 'Chapters';
    
    Component.registerComponent('ChaptersButton', ChaptersButton);
    
    /**
     * @file descriptions-button.js
     */
    /**
     * The button component for toggling and selecting descriptions
     *
     * @extends TextTrackButton
     */
    
    var DescriptionsButton = function (_TextTrackButton) {
      inherits(DescriptionsButton, _TextTrackButton);
    
      /**
       * Creates an instance of this class.
       *
       * @param {Player} player
       *        The `Player` that this class should be attached to.
       *
       * @param {Object} [options]
       *        The key/value store of player options.
       *
       * @param {Component~ReadyCallback} [ready]
       *        The function to call when this component is ready.
       */
      function DescriptionsButton(player, options, ready) {
        classCallCheck(this, DescriptionsButton);
    
        var _this = possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));
    
        var tracks = player.textTracks();
        var changeHandler = bind(_this, _this.handleTracksChange);
    
        tracks.addEventListener('change', changeHandler);
        _this.on('dispose', function () {
          tracks.removeEventListener('change', changeHandler);
        });
        return _this;
      }
    
      /**
       * Handle text track change
       *
       * @param {EventTarget~Event} event
       *        The event that caused this function to run
       *
       * @listens TextTrackList#change
       */
    
    
      DescriptionsButton.prototype.handleTracksChange = function handleTracksChange(event) {
        var tracks = this.player().textTracks();
        var disabled = false;
    
        // Check whether a track of a different kind is showing
        for (var i = 0, l = tracks.length; i < l; i++) {
          var track = tracks[i];
    
          if (track.kind !== this.kind_ && track.mode === 'showing') {
            disabled = true;
            break;
          }
        }
    
        // If another track is showing, disable this menu button
        if (disabled) {
          this.disable();
        } else {
          this.enable();
        }
      };
    
      /**
       * Builds the default DOM `className`.
       *
       * @return {string}
       *         The DOM `className` for this object.
       */
    
    
      DescriptionsButton.prototype.buildCSSClass = function buildCSSClass() {
        return 'vjs-descriptions-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
      };
    
      DescriptionsButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
        return 'vjs-descriptions-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);
      };
    
      return DescriptionsButton;
    }(TextTrackButton);
    
    /**
     * `kind` of TextTrack to look for to associate it with this menu.
     *
     * @type {string}
     * @private
     */
    
    
    DescriptionsButton.prototype.kind_ = 'descriptions';
    
    /**
     * The text that should display over the `DescriptionsButton`s controls. Added for localization.
     *
     * @type {string}
     * @private
     */
    DescriptionsButton.prototype.controlText_ = 'Descriptions';
    
    Component.registerComponent('DescriptionsButton', DescriptionsButton);
    
    /**
     * @file subtitles-button.js
     */
    /**
     * The button component for toggling and selecting subtitles
     *
     * @extends TextTrackButton
     */
    
    var SubtitlesButton = function (_TextTrackButton) {
      inherits(SubtitlesButton, _TextTrackButton);
    
      /**
       * Creates an instance of this class.
       *
       * @param {Player} player
       *        The `Player` that this class should be attached to.
       *
       * @param {Object} [options]
       *        The key/value store of player options.
       *
       * @param {Component~ReadyCallback} [ready]
       *        The function to call when this component is ready.
       */
      function SubtitlesButton(player, options, ready) {
        classCallCheck(this, SubtitlesButton);
        return possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));
      }
    
      /**
       * Builds the default DOM `className`.
       *
       * @return {string}
       *         The DOM `className` for this object.
       */
    
    
      SubtitlesButton.prototype.buildCSSClass = function buildCSSClass() {
        return 'vjs-subtitles-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
      };
    
      SubtitlesButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
        return 'vjs-subtitles-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);
      };
    
      return SubtitlesButton;
    }(TextTrackButton);
    
    /**
     * `kind` of TextTrack to look for to associate it with this menu.
     *
     * @type {string}
     * @private
     */
    
    
    SubtitlesButton.prototype.kind_ = 'subtitles';
    
    /**
     * The text that should display over the `SubtitlesButton`s controls. Added for localization.
     *
     * @type {string}
     * @private
     */
    SubtitlesButton.prototype.controlText_ = 'Subtitles';
    
    Component.registerComponent('SubtitlesButton', SubtitlesButton);
    
    /**
     * @file caption-settings-menu-item.js
     */
    /**
     * The menu item for caption track settings menu
     *
     * @extends TextTrackMenuItem
     */
    
    var CaptionSettingsMenuItem = function (_TextTrackMenuItem) {
      inherits(CaptionSettingsMenuItem, _TextTrackMenuItem);
    
      /**
       * Creates an instance of this class.
       *
       * @param {Player} player
       *        The `Player` that this class should be attached to.
       *
       * @param {Object} [options]
       *        The key/value store of player options.
       */
      function CaptionSettingsMenuItem(player, options) {
        classCallCheck(this, CaptionSettingsMenuItem);
    
        options.track = {
          player: player,
          kind: options.kind,
          label: options.kind + ' settings',
          selectable: false,
          'default': false,
          mode: 'disabled'
        };
    
        // CaptionSettingsMenuItem has no concept of 'selected'
        options.selectable = false;
    
        options.name = 'CaptionSettingsMenuItem';
    
        var _this = possibleConstructorReturn(this, _TextTrackMenuItem.call(this, player, options));
    
        _this.addClass('vjs-texttrack-settings');
        _this.controlText(', opens ' + options.kind + ' settings dialog');
        return _this;
      }
    
      /**
       * This gets called when an `CaptionSettingsMenuItem` is "clicked". See
       * {@link ClickableComponent} for more detailed information on what a click can be.
       *
       * @param {EventTarget~Event} [event]
       *        The `keydown`, `tap`, or `click` event that caused this function to be
       *        called.
       *
       * @listens tap
       * @listens click
       */
    
    
      CaptionSettingsMenuItem.prototype.handleClick = function handleClick(event) {
        this.player().getChild('textTrackSettings').open();
      };
    
      return CaptionSettingsMenuItem;
    }(TextTrackMenuItem);
    
    Component.registerComponent('CaptionSettingsMenuItem', CaptionSettingsMenuItem);
    
    /**
     * @file captions-button.js
     */
    /**
     * The button component for toggling and selecting captions
     *
     * @extends TextTrackButton
     */
    
    var CaptionsButton = function (_TextTrackButton) {
      inherits(CaptionsButton, _TextTrackButton);
    
      /**
       * Creates an instance of this class.
       *
       * @param {Player} player
       *        The `Player` that this class should be attached to.
       *
       * @param {Object} [options]
       *        The key/value store of player options.
       *
       * @param {Component~ReadyCallback} [ready]
       *        The function to call when this component is ready.
       */
      function CaptionsButton(player, options, ready) {
        classCallCheck(this, CaptionsButton);
        return possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));
      }
    
      /**
       * Builds the default DOM `className`.
       *
       * @return {string}
       *         The DOM `className` for this object.
       */
    
    
      CaptionsButton.prototype.buildCSSClass = function buildCSSClass() {
        return 'vjs-captions-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
      };
    
      CaptionsButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
        return 'vjs-captions-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);
      };
    
      /**
       * Create caption menu items
       *
       * @return {CaptionSettingsMenuItem[]}
       *         The array of current menu items.
       */
    
    
      CaptionsButton.prototype.createItems = function createItems() {
        var items = [];
    
        if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks)) {
          items.push(new CaptionSettingsMenuItem(this.player_, { kind: this.kind_ }));
    
          this.hideThreshold_ += 1;
        }
    
        return _TextTrackButton.prototype.createItems.call(this, items);
      };
    
      return CaptionsButton;
    }(TextTrackButton);
    
    /**
     * `kind` of TextTrack to look for to associate it with this menu.
     *
     * @type {string}
     * @private
     */
    
    
    CaptionsButton.prototype.kind_ = 'captions';
    
    /**
     * The text that should display over the `CaptionsButton`s controls. Added for localization.
     *
     * @type {string}
     * @private
     */
    CaptionsButton.prototype.controlText_ = 'Captions';
    
    Component.registerComponent('CaptionsButton', CaptionsButton);
    
    /**
     * @file subs-caps-menu-item.js
     */
    /**
     * SubsCapsMenuItem has an [cc] icon to distinguish captions from subtitles
     * in the SubsCapsMenu.
     *
     * @extends TextTrackMenuItem
     */
    
    var SubsCapsMenuItem = function (_TextTrackMenuItem) {
      inherits(SubsCapsMenuItem, _TextTrackMenuItem);
    
      function SubsCapsMenuItem() {
        classCallCheck(this, SubsCapsMenuItem);
        return possibleConstructorReturn(this, _TextTrackMenuItem.apply(this, arguments));
      }
    
      SubsCapsMenuItem.prototype.createEl = function createEl(type, props, attrs) {
        var innerHTML = '<span class="vjs-menu-item-text">' + this.localize(this.options_.label);
    
        if (this.options_.track.kind === 'captions') {
          innerHTML += '\n        <span aria-hidden="true" class="vjs-icon-placeholder"></span>\n        <span class="vjs-control-text"> ' + this.localize('Captions') + '</span>\n      ';
        }
    
        innerHTML += '</span>';
    
        var el = _TextTrackMenuItem.prototype.createEl.call(this, type, assign({
          innerHTML: innerHTML
        }, props), attrs);
    
        return el;
      };
    
      return SubsCapsMenuItem;
    }(TextTrackMenuItem);
    
    Component.registerComponent('SubsCapsMenuItem', SubsCapsMenuItem);
    
    /**
     * @file sub-caps-button.js
     */
    /**
     * The button component for toggling and selecting captions and/or subtitles
     *
     * @extends TextTrackButton
     */
    
    var SubsCapsButton = function (_TextTrackButton) {
      inherits(SubsCapsButton, _TextTrackButton);
    
      function SubsCapsButton(player) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        classCallCheck(this, SubsCapsButton);
    
        // Although North America uses "captions" in most cases for
        // "captions and subtitles" other locales use "subtitles"
        var _this = possibleConstructorReturn(this, _TextTrackButton.call(this, player, options));
    
        _this.label_ = 'subtitles';
        if (['en', 'en-us', 'en-ca', 'fr-ca'].indexOf(_this.player_.language_) > -1) {
          _this.label_ = 'captions';
        }
        _this.menuButton_.controlText(toTitleCase(_this.label_));
        return _this;
      }
    
      /**
       * Builds the default DOM `className`.
       *
       * @return {string}
       *         The DOM `className` for this object.
       */
    
    
      SubsCapsButton.prototype.buildCSSClass = function buildCSSClass() {
        return 'vjs-subs-caps-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
      };
    
      SubsCapsButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
        return 'vjs-subs-caps-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);
      };
    
      /**
       * Create caption/subtitles menu items
       *
       * @return {CaptionSettingsMenuItem[]}
       *         The array of current menu items.
       */
    
    
      SubsCapsButton.prototype.createItems = function createItems() {
        var items = [];
    
        if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks)) {
          items.push(new CaptionSettingsMenuItem(this.player_, { kind: this.label_ }));
    
          this.hideThreshold_ += 1;
        }
    
        items = _TextTrackButton.prototype.createItems.call(this, items, SubsCapsMenuItem);
        return items;
      };
    
      return SubsCapsButton;
    }(TextTrackButton);
    
    /**
     * `kind`s of TextTrack to look for to associate it with this menu.
     *
     * @type {array}
     * @private
     */
    
    
    SubsCapsButton.prototype.kinds_ = ['captions', 'subtitles'];
    
    /**
     * The text that should display over the `SubsCapsButton`s controls.
     *
     *
     * @type {string}
     * @private
     */
    SubsCapsButton.prototype.controlText_ = 'Subtitles';
    
    Component.registerComponent('SubsCapsButton', SubsCapsButton);
    
    /**
     * @file audio-track-menu-item.js
     */
    /**
     * An {@link AudioTrack} {@link MenuItem}
     *
     * @extends MenuItem
     */
    
    var AudioTrackMenuItem = function (_MenuItem) {
      inherits(AudioTrackMenuItem, _MenuItem);
    
      /**
       * Creates an instance of this class.
       *
       * @param {Player} player
       *        The `Player` that this class should be attached to.
       *
       * @param {Object} [options]
       *        The key/value store of player options.
       */
      function AudioTrackMenuItem(player, options) {
        classCallCheck(this, AudioTrackMenuItem);
    
        var track = options.track;
        var tracks = player.audioTracks();
    
        // Modify options for parent MenuItem class's init.
        options.label = track.label || track.language || 'Unknown';
        options.selected = track.enabled;
    
        var _this = possibleConstructorReturn(this, _MenuItem.call(this, player, options));
    
        _this.track = track;
    
        var changeHandler = bind(_this, _this.handleTracksChange);
    
        tracks.addEventListener('change', changeHandler);
        _this.on('dispose', function () {
          tracks.removeEventListener('change', changeHandler);
        });
        return _this;
      }
    
      /**
       * This gets called when an `AudioTrackMenuItem is "clicked". See {@link ClickableComponent}
       * for more detailed information on what a click can be.
       *
       * @param {EventTarget~Event} [event]
       *        The `keydown`, `tap`, or `click` event that caused this function to be
       *        called.
       *
       * @listens tap
       * @listens click
       */
    
    
      AudioTrackMenuItem.prototype.handleClick = function handleClick(event) {
        var tracks = this.player_.audioTracks();
    
        _MenuItem.prototype.handleClick.call(this, event);
    
        for (var i = 0; i < tracks.length; i++) {
          var track = tracks[i];
    
          track.enabled = track === this.track;
        }
      };
    
      /**
       * Handle any {@link AudioTrack} change.
       *
       * @param {EventTarget~Event} [event]
       *        The {@link AudioTrackList#change} event that caused this to run.
       *
       * @listens AudioTrackList#change
       */
    
    
      AudioTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {
        this.selected(this.track.enabled);
      };
    
      return AudioTrackMenuItem;
    }(MenuItem);
    
    Component.registerComponent('AudioTrackMenuItem', AudioTrackMenuItem);
    
    /**
     * @file audio-track-button.js
     */
    /**
     * The base class for buttons that toggle specific {@link AudioTrack} types.
     *
     * @extends TrackButton
     */
    
    var AudioTrackButton = function (_TrackButton) {
      inherits(AudioTrackButton, _TrackButton);
    
      /**
       * Creates an instance of this class.
       *
       * @param {Player} player
       *        The `Player` that this class should be attached to.
       *
       * @param {Object} [options={}]
       *        The key/value store of player options.
       */
      function AudioTrackButton(player) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        classCallCheck(this, AudioTrackButton);
    
        options.tracks = player.audioTracks();
    
        return possibleConstructorReturn(this, _TrackButton.call(this, player, options));
      }
    
      /**
       * Builds the default DOM `className`.
       *
       * @return {string}
       *         The DOM `className` for this object.
       */
    
    
      AudioTrackButton.prototype.buildCSSClass = function buildCSSClass() {
        return 'vjs-audio-button ' + _TrackButton.prototype.buildCSSClass.call(this);
      };
    
      AudioTrackButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
        return 'vjs-audio-button ' + _TrackButton.prototype.buildWrapperCSSClass.call(this);
      };
    
      /**
       * Create a menu item for each audio track
       *
       * @param {AudioTrackMenuItem[]} [items=[]]
       *        An array of existing menu items to use.
       *
       * @return {AudioTrackMenuItem[]}
       *         An array of menu items
       */
    
    
      AudioTrackButton.prototype.createItems = function createItems() {
        var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    
        // if there's only one audio track, there no point in showing it
        this.hideThreshold_ = 1;
    
        var tracks = this.player_.audioTracks();
    
        for (var i = 0; i < tracks.length; i++) {
          var track = tracks[i];
    
          items.push(new AudioTrackMenuItem(this.player_, {
            track: track,
            // MenuItem is selectable
            selectable: true
          }));
        }
    
        return items;
      };
    
      return AudioTrackButton;
    }(TrackButton);
    
    /**
     * The text that should display over the `AudioTrackButton`s controls. Added for localization.
     *
     * @type {string}
     * @private
     */
    
    
    AudioTrackButton.prototype.controlText_ = 'Audio Track';
    Component.registerComponent('AudioTrackButton', AudioTrackButton);
    
    /**
     * @file playback-rate-menu-item.js
     */
    /**
     * The specific menu item type for selecting a playback rate.
     *
     * @extends MenuItem
     */
    
    var PlaybackRateMenuItem = function (_MenuItem) {
      inherits(PlaybackRateMenuItem, _MenuItem);
    
      /**
       * Creates an instance of this class.
       *
       * @param {Player} player
       *        The `Player` that this class should be attached to.
       *
       * @param {Object} [options]
       *        The key/value store of player options.
       */
      function PlaybackRateMenuItem(player, options) {
        classCallCheck(this, PlaybackRateMenuItem);
    
        var label = options.rate;
        var rate = parseFloat(label, 10);
    
        // Modify options for parent MenuItem class's init.
        options.label = label;
        options.selected = rate === 1;
        options.selectable = true;
    
        var _this = possibleConstructorReturn(this, _MenuItem.call(this, player, options));
    
        _this.label = label;
        _this.rate = rate;
    
        _this.on(player, 'ratechange', _this.update);
        return _this;
      }
    
      /**
       * This gets called when an `PlaybackRateMenuItem` is "clicked". See
       * {@link ClickableComponent} for more detailed information on what a click can be.
       *
       * @param {EventTarget~Event} [event]
       *        The `keydown`, `tap`, or `click` event that caused this function to be
       *        called.
       *
       * @listens tap
       * @listens click
       */
    
    
      PlaybackRateMenuItem.prototype.handleClick = function handleClick(event) {
        _MenuItem.prototype.handleClick.call(this);
        this.player().playbackRate(this.rate);
      };
    
      /**
       * Update the PlaybackRateMenuItem when the playbackrate changes.
       *
       * @param {EventTarget~Event} [event]
       *        The `ratechange` event that caused this function to run.
       *
       * @listens Player#ratechange
       */
    
    
      PlaybackRateMenuItem.prototype.update = function update(event) {
        this.selected(this.player().playbackRate() === this.rate);
      };
    
      return PlaybackRateMenuItem;
    }(MenuItem);
    
    /**
     * The text that should display over the `PlaybackRateMenuItem`s controls. Added for localization.
     *
     * @type {string}
     * @private
     */
    
    
    PlaybackRateMenuItem.prototype.contentElType = 'button';
    
    Component.registerComponent('PlaybackRateMenuItem', PlaybackRateMenuItem);
    
    /**
     * @file playback-rate-menu-button.js
     */
    /**
     * The component for controlling the playback rate.
     *
     * @extends MenuButton
     */
    
    var PlaybackRateMenuButton = function (_MenuButton) {
      inherits(PlaybackRateMenuButton, _MenuButton);
    
      /**
       * Creates an instance of this class.
       *
       * @param {Player} player
       *        The `Player` that this class should be attached to.
       *
       * @param {Object} [options]
       *        The key/value store of player options.
       */
      function PlaybackRateMenuButton(player, options) {
        classCallCheck(this, PlaybackRateMenuButton);
    
        var _this = possibleConstructorReturn(this, _MenuButton.call(this, player, options));
    
        _this.updateVisibility();
        _this.updateLabel();
    
        _this.on(player, 'loadstart', _this.updateVisibility);
        _this.on(player, 'ratechange', _this.updateLabel);
        return _this;
      }
    
      /**
       * Create the `Component`'s DOM element
       *
       * @return {Element}
       *         The element that was created.
       */
    
    
      PlaybackRateMenuButton.prototype.createEl = function createEl$$1() {
        var el = _MenuButton.prototype.createEl.call(this);
    
        this.labelEl_ = createEl('div', {
          className: 'vjs-playback-rate-value',
          innerHTML: '1x'
        });
    
        el.appendChild(this.labelEl_);
    
        return el;
      };
    
      /**
       * Builds the default DOM `className`.
       *
       * @return {string}
       *         The DOM `className` for this object.
       */
    
    
      PlaybackRateMenuButton.prototype.buildCSSClass = function buildCSSClass() {
        return 'vjs-playback-rate ' + _MenuButton.prototype.buildCSSClass.call(this);
      };
    
      PlaybackRateMenuButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
        return 'vjs-playback-rate ' + _MenuButton.prototype.buildWrapperCSSClass.call(this);
      };
    
      /**
       * Create the playback rate menu
       *
       * @return {Menu}
       *         Menu object populated with {@link PlaybackRateMenuItem}s
       */
    
    
      PlaybackRateMenuButton.prototype.createMenu = function createMenu() {
        var menu = new Menu(this.player());
        var rates = this.playbackRates();
    
        if (rates) {
          for (var i = rates.length - 1; i >= 0; i--) {
            menu.addChild(new PlaybackRateMenuItem(this.player(), { rate: rates[i] + 'x' }));
          }
        }
    
        return menu;
      };
    
      /**
       * Updates ARIA accessibility attributes
       */
    
    
      PlaybackRateMenuButton.prototype.updateARIAAttributes = function updateARIAAttributes() {
        // Current playback rate
        this.el().setAttribute('aria-valuenow', this.player().playbackRate());
      };
    
      /**
       * This gets called when an `PlaybackRateMenuButton` is "clicked". See
       * {@link ClickableComponent} for more detailed information on what a click can be.
       *
       * @param {EventTarget~Event} [event]
       *        The `keydown`, `tap`, or `click` event that caused this function to be
       *        called.
       *
       * @listens tap
       * @listens click
       */
    
    
      PlaybackRateMenuButton.prototype.handleClick = function handleClick(event) {
        // select next rate option
        var currentRate = this.player().playbackRate();
        var rates = this.playbackRates();
    
        // this will select first one if the last one currently selected
        var newRate = rates[0];
    
        for (var i = 0; i < rates.length; i++) {
          if (rates[i] > currentRate) {
            newRate = rates[i];
            break;
          }
        }
        this.player().playbackRate(newRate);
      };
    
      /**
       * Get possible playback rates
       *
       * @return {Array}
       *         All possible playback rates
       */
    
    
      PlaybackRateMenuButton.prototype.playbackRates = function playbackRates() {
        return this.options_.playbackRates || this.options_.playerOptions && this.options_.playerOptions.playbackRates;
      };
    
      /**
       * Get whether playback rates is supported by the tech
       * and an array of playback rates exists
       *
       * @return {boolean}
       *         Whether changing playback rate is supported
       */
    
    
      PlaybackRateMenuButton.prototype.playbackRateSupported = function playbackRateSupported() {
        return this.player().tech_ && this.player().tech_.featuresPlaybackRate && this.playbackRates() && this.playbackRates().length > 0;
      };
    
      /**
       * Hide playback rate controls when they're no playback rate options to select
       *
       * @param {EventTarget~Event} [event]
       *        The event that caused this function to run.
       *
       * @listens Player#loadstart
       */
    
    
      PlaybackRateMenuButton.prototype.updateVisibility = function updateVisibility(event) {
        if (this.playbackRateSupported()) {
          this.removeClass('vjs-hidden');
        } else {
          this.addClass('vjs-hidden');
        }
      };
    
      /**
       * Update button label when rate changed
       *
       * @param {EventTarget~Event} [event]
       *        The event that caused this function to run.
       *
       * @listens Player#ratechange
       */
    
    
      PlaybackRateMenuButton.prototype.updateLabel = function updateLabel(event) {
        if (this.playbackRateSupported()) {
          this.labelEl_.innerHTML = this.player().playbackRate() + 'x';
        }
      };
    
      return PlaybackRateMenuButton;
    }(MenuButton);
    
    /**
     * The text that should display over the `FullscreenToggle`s controls. Added for localization.
     *
     * @type {string}
     * @private
     */
    
    
    PlaybackRateMenuButton.prototype.controlText_ = 'Playback Rate';
    
    Component.registerComponent('PlaybackRateMenuButton', PlaybackRateMenuButton);
    
    /**
     * @file spacer.js
     */
    /**
     * Just an empty spacer element that can be used as an append point for plugins, etc.
     * Also can be used to create space between elements when necessary.
     *
     * @extends Component
     */
    
    var Spacer = function (_Component) {
      inherits(Spacer, _Component);
    
      function Spacer() {
        classCallCheck(this, Spacer);
        return possibleConstructorReturn(this, _Component.apply(this, arguments));
      }
    
      /**
       * Builds the default DOM `className`.
       *
       * @return {string}
       *         The DOM `className` for this object.
       */
      Spacer.prototype.buildCSSClass = function buildCSSClass() {
        return 'vjs-spacer ' + _Component.prototype.buildCSSClass.call(this);
      };
    
      /**
       * Create the `Component`'s DOM element
       *
       * @return {Element}
       *         The element that was created.
       */
    
    
      Spacer.prototype.createEl = function createEl() {
        return _Component.prototype.createEl.call(this, 'div', {
          className: this.buildCSSClass()
        });
      };
    
      return Spacer;
    }(Component);
    
    Component.registerComponent('Spacer', Spacer);
    
    /**
     * @file custom-control-spacer.js
     */
    /**
     * Spacer specifically meant to be used as an insertion point for new plugins, etc.
     *
     * @extends Spacer
     */
    
    var CustomControlSpacer = function (_Spacer) {
      inherits(CustomControlSpacer, _Spacer);
    
      function CustomControlSpacer() {
        classCallCheck(this, CustomControlSpacer);
        return possibleConstructorReturn(this, _Spacer.apply(this, arguments));
      }
    
      /**
       * Builds the default DOM `className`.
       *
       * @return {string}
       *         The DOM `className` for this object.
       */
      CustomControlSpacer.prototype.buildCSSClass = function buildCSSClass() {
        return 'vjs-custom-control-spacer ' + _Spacer.prototype.buildCSSClass.call(this);
      };
    
      /**
       * Create the `Component`'s DOM element
       *
       * @return {Element}
       *         The element that was created.
       */
    
    
      CustomControlSpacer.prototype.createEl = function createEl() {
        var el = _Spacer.prototype.createEl.call(this, {
          className: this.buildCSSClass()
        });
    
        // No-flex/table-cell mode requires there be some content
        // in the cell to fill the remaining space of the table.
        el.innerHTML = '&nbsp;';
        return el;
      };
    
      return CustomControlSpacer;
    }(Spacer);
    
    Component.registerComponent('CustomControlSpacer', CustomControlSpacer);
    
    /**
     * @file control-bar.js
     */
    // Required children
    /**
     * Container of main controls.
     *
     * @extends Component
     */
    
    var ControlBar = function (_Component) {
      inherits(ControlBar, _Component);
    
      function ControlBar() {
        classCallCheck(this, ControlBar);
        return possibleConstructorReturn(this, _Component.apply(this, arguments));
      }
    
      /**
       * Create the `Component`'s DOM element
       *
       * @return {Element}
       *         The element that was created.
       */
      ControlBar.prototype.createEl = function createEl() {
        return _Component.prototype.createEl.call(this, 'div', {
          className: 'vjs-control-bar',
          dir: 'ltr'
        }, {
          // The control bar is a group, but we don't aria-label it to avoid
          //  over-announcing by JAWS
          role: 'group'
        });
      };
    
      return ControlBar;
    }(Component);
    
    /**
     * Default options for `ControlBar`
     *
     * @type {Object}
     * @private
     */
    
    
    ControlBar.prototype.options_ = {
      children: ['playToggle', 'volumePanel', 'currentTimeDisplay', 'timeDivider', 'durationDisplay', 'progressControl', 'liveDisplay', 'remainingTimeDisplay', 'customControlSpacer', 'playbackRateMenuButton', 'chaptersButton', 'descriptionsButton', 'subsCapsButton', 'audioTrackButton', 'fullscreenToggle']
    };
    
    Component.registerComponent('ControlBar', ControlBar);
    
    /**
     * @file error-display.js
     */
    /**
     * A display that indicates an error has occurred. This means that the video
     * is unplayable.
     *
     * @extends ModalDialog
     */
    
    var ErrorDisplay = function (_ModalDialog) {
      inherits(ErrorDisplay, _ModalDialog);
    
      /**
       * Creates an instance of this class.
       *
       * @param  {Player} player
       *         The `Player` that this class should be attached to.
       *
       * @param  {Object} [options]
       *         The key/value store of player options.
       */
      function ErrorDisplay(player, options) {
        classCallCheck(this, ErrorDisplay);
    
        var _this = possibleConstructorReturn(this, _ModalDialog.call(this, player, options));
    
        _this.on(player, 'error', _this.open);
        return _this;
      }
    
      /**
       * Builds the default DOM `className`.
       *
       * @return {string}
       *         The DOM `className` for this object.
       *
       * @deprecated Since version 5.
       */
    
    
      ErrorDisplay.prototype.buildCSSClass = function buildCSSClass() {
        return 'vjs-error-display ' + _ModalDialog.prototype.buildCSSClass.call(this);
      };
    
      /**
       * Gets the localized error message based on the `Player`s error.
       *
       * @return {string}
       *         The `Player`s error message localized or an empty string.
       */
    
    
      ErrorDisplay.prototype.content = function content() {
        var error = this.player().error();
    
        return error ? this.localize(error.message) : '';
      };
    
      return ErrorDisplay;
    }(ModalDialog);
    
    /**
     * The default options for an `ErrorDisplay`.
     *
     * @private
     */
    
    
    ErrorDisplay.prototype.options_ = mergeOptions(ModalDialog.prototype.options_, {
      pauseOnOpen: false,
      fillAlways: true,
      temporary: false,
      uncloseable: true
    });
    
    Component.registerComponent('ErrorDisplay', ErrorDisplay);
    
    /**
     * @file text-track-settings.js
     */
    var LOCAL_STORAGE_KEY = 'vjs-text-track-settings';
    
    var COLOR_BLACK = ['#000', 'Black'];
    var COLOR_BLUE = ['#00F', 'Blue'];
    var COLOR_CYAN = ['#0FF', 'Cyan'];
    var COLOR_GREEN = ['#0F0', 'Green'];
    var COLOR_MAGENTA = ['#F0F', 'Magenta'];
    var COLOR_RED = ['#F00', 'Red'];
    var COLOR_WHITE = ['#FFF', 'White'];
    var COLOR_YELLOW = ['#FF0', 'Yellow'];
    
    var OPACITY_OPAQUE = ['1', 'Opaque'];
    var OPACITY_SEMI = ['0.5', 'Semi-Transparent'];
    var OPACITY_TRANS = ['0', 'Transparent'];
    
    // Configuration for the various <select> elements in the DOM of this component.
    //
    // Possible keys include:
    //
    // `default`:
    //   The default option index. Only needs to be provided if not zero.
    // `parser`:
    //   A function which is used to parse the value from the selected option in
    //   a customized way.
    // `selector`:
    //   The selector used to find the associated <select> element.
    var selectConfigs = {
      backgroundColor: {
        selector: '.vjs-bg-color > select',
        id: 'captions-background-color-%s',
        label: 'Color',
        options: [COLOR_BLACK, COLOR_WHITE, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]
      },
    
      backgroundOpacity: {
        selector: '.vjs-bg-opacity > select',
        id: 'captions-background-opacity-%s',
        label: 'Transparency',
        options: [OPACITY_OPAQUE, OPACITY_SEMI, OPACITY_TRANS]
      },
    
      color: {
        selector: '.vjs-fg-color > select',
        id: 'captions-foreground-color-%s',
        label: 'Color',
        options: [COLOR_WHITE, COLOR_BLACK, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]
      },
    
      edgeStyle: {
        selector: '.vjs-edge-style > select',
        id: '%s',
        label: 'Text Edge Style',
        options: [['none', 'None'], ['raised', 'Raised'], ['depressed', 'Depressed'], ['uniform', 'Uniform'], ['dropshadow', 'Dropshadow']]
      },
    
      fontFamily: {
        selector: '.vjs-font-family > select',
        id: 'captions-font-family-%s',
        label: 'Font Family',
        options: [['proportionalSansSerif', 'Proportional Sans-Serif'], ['monospaceSansSerif', 'Monospace Sans-Serif'], ['proportionalSerif', 'Proportional Serif'], ['monospaceSerif', 'Monospace Serif'], ['casual', 'Casual'], ['script', 'Script'], ['small-caps', 'Small Caps']]
      },
    
      fontPercent: {
        selector: '.vjs-font-percent > select',
        id: 'captions-font-size-%s',
        label: 'Font Size',
        options: [['0.50', '50%'], ['0.75', '75%'], ['1.00', '100%'], ['1.25', '125%'], ['1.50', '150%'], ['1.75', '175%'], ['2.00', '200%'], ['3.00', '300%'], ['4.00', '400%']],
        'default': 2,
        parser: function parser(v) {
          return v === '1.00' ? null : Number(v);
        }
      },
    
      textOpacity: {
        selector: '.vjs-text-opacity > select',
        id: 'captions-foreground-opacity-%s',
        label: 'Transparency',
        options: [OPACITY_OPAQUE, OPACITY_SEMI]
      },
    
      // Options for this object are defined below.
      windowColor: {
        selector: '.vjs-window-color > select',
        id: 'captions-window-color-%s',
        label: 'Color'
      },
    
      // Options for this object are defined below.
      windowOpacity: {
        selector: '.vjs-window-opacity > select',
        id: 'captions-window-opacity-%s',
        label: 'Transparency',
        options: [OPACITY_TRANS, OPACITY_SEMI, OPACITY_OPAQUE]
      }
    };
    
    selectConfigs.windowColor.options = selectConfigs.backgroundColor.options;
    
    /**
     * Get the actual value of an option.
     *
     * @param  {string} value
     *         The value to get
     *
     * @param  {Function} [parser]
     *         Optional function to adjust the value.
     *
     * @return {Mixed}
     *         - Will be `undefined` if no value exists
     *         - Will be `undefined` if the given value is "none".
     *         - Will be the actual value otherwise.
     *
     * @private
     */
    function parseOptionValue(value, parser) {
      if (parser) {
        value = parser(value);
      }
    
      if (value && value !== 'none') {
        return value;
      }
    }
    
    /**
     * Gets the value of the selected <option> element within a <select> element.
     *
     * @param  {Element} el
     *         the element to look in
     *
     * @param  {Function} [parser]
     *         Optional function to adjust the value.
     *
     * @return {Mixed}
     *         - Will be `undefined` if no value exists
     *         - Will be `undefined` if the given value is "none".
     *         - Will be the actual value otherwise.
     *
     * @private
     */
    function getSelectedOptionValue(el, parser) {
      var value = el.options[el.options.selectedIndex].value;
    
      return parseOptionValue(value, parser);
    }
    
    /**
     * Sets the selected <option> element within a <select> element based on a
     * given value.
     *
     * @param {Element} el
     *        The element to look in.
     *
     * @param {string} value
     *        the property to look on.
     *
     * @param {Function} [parser]
     *        Optional function to adjust the value before comparing.
     *
     * @private
     */
    function setSelectedOption(el, value, parser) {
      if (!value) {
        return;
      }
    
      for (var i = 0; i < el.options.length; i++) {
        if (parseOptionValue(el.options[i].value, parser) === value) {
          el.selectedIndex = i;
          break;
        }
      }
    }
    
    /**
     * Manipulate Text Tracks settings.
     *
     * @extends ModalDialog
     */
    
    var TextTrackSettings = function (_ModalDialog) {
      inherits(TextTrackSettings, _ModalDialog);
    
      /**
       * Creates an instance of this class.
       *
       * @param {Player} player
       *         The `Player` that this class should be attached to.
       *
       * @param {Object} [options]
       *         The key/value store of player options.
       */
      function TextTrackSettings(player, options) {
        classCallCheck(this, TextTrackSettings);
    
        options.temporary = false;
    
        var _this = possibleConstructorReturn(this, _ModalDialog.call(this, player, options));
    
        _this.updateDisplay = bind(_this, _this.updateDisplay);
    
        // fill the modal and pretend we have opened it
        _this.fill();
        _this.hasBeenOpened_ = _this.hasBeenFilled_ = true;
    
        _this.endDialog = createEl('p', {
          className: 'vjs-control-text',
          textContent: _this.localize('End of dialog window.')
        });
        _this.el().appendChild(_this.endDialog);
    
        _this.setDefaults();
    
        // Grab `persistTextTrackSettings` from the player options if not passed in child options
        if (options.persistTextTrackSettings === undefined) {
          _this.options_.persistTextTrackSettings = _this.options_.playerOptions.persistTextTrackSettings;
        }
    
        _this.on(_this.$('.vjs-done-button'), 'click', function () {
          _this.saveSettings();
          _this.close();
        });
    
        _this.on(_this.$('.vjs-default-button'), 'click', function () {
          _this.setDefaults();
          _this.updateDisplay();
        });
    
        each(selectConfigs, function (config) {
          _this.on(_this.$(config.selector), 'change', _this.updateDisplay);
        });
    
        if (_this.options_.persistTextTrackSettings) {
          _this.restoreSettings();
        }
        return _this;
      }
    
      /**
       * Create a <select> element with configured options.
       *
       * @param {string} key
       *        Configuration key to use during creation.
       *
       * @return {string}
       *         An HTML string.
       *
       * @private
       */
    
    
      TextTrackSettings.prototype.createElSelect_ = function createElSelect_(key) {
        var _this2 = this;
    
        var legendId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
        var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'label';
    
        var config = selectConfigs[key];
        var id = config.id.replace('%s', this.id_);
    
        return ['<' + type + ' id="' + id + '" class="' + (type === 'label' ? 'vjs-label' : '') + '">', this.localize(config.label), '</' + type + '>', '<select aria-labelledby="' + legendId + ' ' + id + '">'].concat(config.options.map(function (o) {
          var optionId = id + '-' + o[1];
    
          return ['<option id="' + optionId + '" value="' + o[0] + '" ', 'aria-labelledby="' + legendId + ' ' + id + ' ' + optionId + '">', _this2.localize(o[1]), '</option>'].join('');
        })).concat('</select>').join('');
      };
    
      /**
       * Create foreground color element for the component
       *
       * @return {string}
       *         An HTML string.
       *
       * @private
       */
    
    
      TextTrackSettings.prototype.createElFgColor_ = function createElFgColor_() {
        var legendId = 'captions-text-legend-' + this.id_;
    
        return ['<fieldset class="vjs-fg-color vjs-track-setting">', '<legend id="' + legendId + '">', this.localize('Text'), '</legend>', this.createElSelect_('color', legendId), '<span class="vjs-text-opacity vjs-opacity">', this.createElSelect_('textOpacity', legendId), '</span>', '</fieldset>'].join('');
      };
    
      /**
       * Create background color element for the component
       *
       * @return {string}
       *         An HTML string.
       *
       * @private
       */
    
    
      TextTrackSettings.prototype.createElBgColor_ = function createElBgColor_() {
        var legendId = 'captions-background-' + this.id_;
    
        return ['<fieldset class="vjs-bg-color vjs-track-setting">', '<legend id="' + legendId + '">', this.localize('Background'), '</legend>', this.createElSelect_('backgroundColor', legendId), '<span class="vjs-bg-opacity vjs-opacity">', this.createElSelect_('backgroundOpacity', legendId), '</span>', '</fieldset>'].join('');
      };
    
      /**
       * Create window color element for the component
       *
       * @return {string}
       *         An HTML string.
       *
       * @private
       */
    
    
      TextTrackSettings.prototype.createElWinColor_ = function createElWinColor_() {
        var legendId = 'captions-window-' + this.id_;
    
        return ['<fieldset class="vjs-window-color vjs-track-setting">', '<legend id="' + legendId + '">', this.localize('Window'), '</legend>', this.createElSelect_('windowColor', legendId), '<span class="vjs-window-opacity vjs-opacity">', this.createElSelect_('windowOpacity', legendId), '</span>', '</fieldset>'].join('');
      };
    
      /**
       * Create color elements for the component
       *
       * @return {Element}
       *         The element that was created
       *
       * @private
       */
    
    
      TextTrackSettings.prototype.createElColors_ = function createElColors_() {
        return createEl('div', {
          className: 'vjs-track-settings-colors',
          innerHTML: [this.createElFgColor_(), this.createElBgColor_(), this.createElWinColor_()].join('')
        });
      };
    
      /**
       * Create font elements for the component
       *
       * @return {Element}
       *         The element that was created.
       *
       * @private
       */
    
    
      TextTrackSettings.prototype.createElFont_ = function createElFont_() {
        return createEl('div', {
          className: 'vjs-track-settings-font">',
          innerHTML: ['<fieldset class="vjs-font-percent vjs-track-setting">', this.createElSelect_('fontPercent', '', 'legend'), '</fieldset>', '<fieldset class="vjs-edge-style vjs-track-setting">', this.createElSelect_('edgeStyle', '', 'legend'), '</fieldset>', '<fieldset class="vjs-font-family vjs-track-setting">', this.createElSelect_('fontFamily', '', 'legend'), '</fieldset>'].join('')
        });
      };
    
      /**
       * Create controls for the component
       *
       * @return {Element}
       *         The element that was created.
       *
       * @private
       */
    
    
      TextTrackSettings.prototype.createElControls_ = function createElControls_() {
        var defaultsDescription = this.localize('restore all settings to the default values');
    
        return createEl('div', {
          className: 'vjs-track-settings-controls',
          innerHTML: ['<button class="vjs-default-button" title="' + defaultsDescription + '">', this.localize('Reset'), '<span class="vjs-control-text"> ' + defaultsDescription + '</span>', '</button>', '<button class="vjs-done-button">' + this.localize('Done') + '</button>'].join('')
        });
      };
    
      TextTrackSettings.prototype.content = function content() {
        return [this.createElColors_(), this.createElFont_(), this.createElControls_()];
      };
    
      TextTrackSettings.prototype.label = function label() {
        return this.localize('Caption Settings Dialog');
      };
    
      TextTrackSettings.prototype.description = function description() {
        return this.localize('Beginning of dialog window. Escape will cancel and close the window.');
      };
    
      TextTrackSettings.prototype.buildCSSClass = function buildCSSClass() {
        return _ModalDialog.prototype.buildCSSClass.call(this) + ' vjs-text-track-settings';
      };
    
      /**
       * Gets an object of text track settings (or null).
       *
       * @return {Object}
       *         An object with config values parsed from the DOM or localStorage.
       */
    
    
      TextTrackSettings.prototype.getValues = function getValues() {
        var _this3 = this;
    
        return reduce(selectConfigs, function (accum, config, key) {
          var value = getSelectedOptionValue(_this3.$(config.selector), config.parser);
    
          if (value !== undefined) {
            accum[key] = value;
          }
    
          return accum;
        }, {});
      };
    
      /**
       * Sets text track settings from an object of values.
       *
       * @param {Object} values
       *        An object with config values parsed from the DOM or localStorage.
       */
    
    
      TextTrackSettings.prototype.setValues = function setValues(values) {
        var _this4 = this;
    
        each(selectConfigs, function (config, key) {
          setSelectedOption(_this4.$(config.selector), values[key], config.parser);
        });
      };
    
      /**
       * Sets all `<select>` elements to their default values.
       */
    
    
      TextTrackSettings.prototype.setDefaults = function setDefaults() {
        var _this5 = this;
    
        each(selectConfigs, function (config) {
          var index = config.hasOwnProperty('default') ? config['default'] : 0;
    
          _this5.$(config.selector).selectedIndex = index;
        });
      };
    
      /**
       * Restore texttrack settings from localStorage
       */
    
    
      TextTrackSettings.prototype.restoreSettings = function restoreSettings() {
        var values = void 0;
    
        try {
          values = JSON.parse(window_1.localStorage.getItem(LOCAL_STORAGE_KEY));
        } catch (err) {
          log$1.warn(err);
        }
    
        if (values) {
          this.setValues(values);
        }
      };
    
      /**
       * Save text track settings to localStorage
       */
    
    
      TextTrackSettings.prototype.saveSettings = function saveSettings() {
        if (!this.options_.persistTextTrackSettings) {
          return;
        }
    
        var values = this.getValues();
    
        try {
          if (Object.keys(values).length) {
            window_1.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(values));
          } else {
            window_1.localStorage.removeItem(LOCAL_STORAGE_KEY);
          }
        } catch (err) {
          log$1.warn(err);
        }
      };
    
      /**
       * Update display of text track settings
       */
    
    
      TextTrackSettings.prototype.updateDisplay = function updateDisplay() {
        var ttDisplay = this.player_.getChild('textTrackDisplay');
    
        if (ttDisplay) {
          ttDisplay.updateDisplay();
        }
      };
    
      /**
       * conditionally blur the element and refocus the captions button
       *
       * @private
       */
    
    
      TextTrackSettings.prototype.conditionalBlur_ = function conditionalBlur_() {
        this.previouslyActiveEl_ = null;
        this.off(document_1, 'keydown', this.handleKeyDown);
    
        var cb = this.player_.controlBar;
        var subsCapsBtn = cb && cb.subsCapsButton;
        var ccBtn = cb && cb.captionsButton;
    
        if (subsCapsBtn) {
          subsCapsBtn.focus();
        } else if (ccBtn) {
          ccBtn.focus();
        }
      };
    
      return TextTrackSettings;
    }(ModalDialog);
    
    Component.registerComponent('TextTrackSettings', TextTrackSettings);
    
    var _templateObject$2 = taggedTemplateLiteralLoose(['Text Tracks are being loaded from another origin but the crossorigin attribute isn\'t used.\n            This may prevent text tracks from loading.'], ['Text Tracks are being loaded from another origin but the crossorigin attribute isn\'t used.\n            This may prevent text tracks from loading.']);
    
    /**
     * @file html5.js
     */
    /**
     * HTML5 Media Controller - Wrapper for HTML5 Media API
     *
     * @mixes Tech~SouceHandlerAdditions
     * @extends Tech
     */
    
    var Html5 = function (_Tech) {
      inherits(Html5, _Tech);
    
      /**
       * Create an instance of this Tech.
       *
       * @param {Object} [options]
       *        The key/value store of player options.
       *
       * @param {Component~ReadyCallback} ready
       *        Callback function to call when the `HTML5` Tech is ready.
       */
      function Html5(options, ready) {
        classCallCheck(this, Html5);
    
        var _this = possibleConstructorReturn(this, _Tech.call(this, options, ready));
    
        var source = options.source;
        var crossoriginTracks = false;
    
        // Set the source if one is provided
        // 1) Check if the source is new (if not, we want to keep the original so playback isn't interrupted)
        // 2) Check to see if the network state of the tag was failed at init, and if so, reset the source
        // anyway so the error gets fired.
        if (source && (_this.el_.currentSrc !== source.src || options.tag && options.tag.initNetworkState_ === 3)) {
          _this.setSource(source);
        } else {
          _this.handleLateInit_(_this.el_);
        }
    
        if (_this.el_.hasChildNodes()) {
    
          var nodes = _this.el_.childNodes;
          var nodesLength = nodes.length;
          var removeNodes = [];
    
          while (nodesLength--) {
            var node = nodes[nodesLength];
            var nodeName = node.nodeName.toLowerCase();
    
            if (nodeName === 'track') {
              if (!_this.featuresNativeTextTracks) {
                // Empty video tag tracks so the built-in player doesn't use them also.
                // This may not be fast enough to stop HTML5 browsers from reading the tags
                // so we'll need to turn off any default tracks if we're manually doing
                // captions and subtitles. videoElement.textTracks
                removeNodes.push(node);
              } else {
                // store HTMLTrackElement and TextTrack to remote list
                _this.remoteTextTrackEls().addTrackElement_(node);
                _this.remoteTextTracks().addTrack(node.track);
                _this.textTracks().addTrack(node.track);
                if (!crossoriginTracks && !_this.el_.hasAttribute('crossorigin') && isCrossOrigin(node.src)) {
                  crossoriginTracks = true;
                }
              }
            }
          }
    
          for (var i = 0; i < removeNodes.length; i++) {
            _this.el_.removeChild(removeNodes[i]);
          }
        }
    
        _this.proxyNativeTracks_();
        if (_this.featuresNativeTextTracks && crossoriginTracks) {
          log$1.warn(tsml(_templateObject$2));
        }
    
        // prevent iOS Safari from disabling metadata text tracks during native playback
        _this.restoreMetadataTracksInIOSNativePlayer_();
    
        // Determine if native controls should be used
        // Our goal should be to get the custom controls on mobile solid everywhere
        // so we can remove this all together. Right now this will block custom
        // controls on touch enabled laptops like the Chrome Pixel
        if ((TOUCH_ENABLED || IS_IPHONE || IS_NATIVE_ANDROID) && options.nativeControlsForTouch === true) {
          _this.setControls(true);
        }
    
        // on iOS, we want to proxy `webkitbeginfullscreen` and `webkitendfullscreen`
        // into a `fullscreenchange` event
        _this.proxyWebkitFullscreen_();
    
        _this.triggerReady();
        return _this;
      }
    
      /**
       * Dispose of `HTML5` media element and remove all tracks.
       */
    
    
      Html5.prototype.dispose = function dispose() {
        Html5.disposeMediaElement(this.el_);
        // tech will handle clearing of the emulated track list
        _Tech.prototype.dispose.call(this);
      };
    
      /**
       * When a captions track is enabled in the iOS Safari native player, all other
       * tracks are disabled (including metadata tracks), which nulls all of their
       * associated cue points. This will restore metadata tracks to their pre-fullscreen
       * state in those cases so that cue points are not needlessly lost.
       *
       * @private
       */
    
    
      Html5.prototype.restoreMetadataTracksInIOSNativePlayer_ = function restoreMetadataTracksInIOSNativePlayer_() {
        var textTracks = this.textTracks();
        var metadataTracksPreFullscreenState = void 0;
    
        // captures a snapshot of every metadata track's current state
        var takeMetadataTrackSnapshot = function takeMetadataTrackSnapshot() {
          metadataTracksPreFullscreenState = [];
    
          for (var i = 0; i < textTracks.length; i++) {
            var track = textTracks[i];
    
            if (track.kind === 'metadata') {
              metadataTracksPreFullscreenState.push({
                track: track,
                storedMode: track.mode
              });
            }
          }
        };
    
        // snapshot each metadata track's initial state, and update the snapshot
        // each time there is a track 'change' event
        takeMetadataTrackSnapshot();
        textTracks.addEventListener('change', takeMetadataTrackSnapshot);
    
        var restoreTrackMode = function restoreTrackMode() {
          for (var i = 0; i < metadataTracksPreFullscreenState.length; i++) {
            var storedTrack = metadataTracksPreFullscreenState[i];
    
            if (storedTrack.track.mode === 'disabled' && storedTrack.track.mode !== storedTrack.storedMode) {
              storedTrack.track.mode = storedTrack.storedMode;
            }
          }
          // we only want this handler to be executed on the first 'change' event
          textTracks.removeEventListener('change', restoreTrackMode);
        };
    
        // when we enter fullscreen playback, stop updating the snapshot and
        // restore all track modes to their pre-fullscreen state
        this.on('webkitbeginfullscreen', function () {
          textTracks.removeEventListener('change', takeMetadataTrackSnapshot);
    
          // remove the listener before adding it just in case it wasn't previously removed
          textTracks.removeEventListener('change', restoreTrackMode);
          textTracks.addEventListener('change', restoreTrackMode);
        });
    
        // start updating the snapshot again after leaving fullscreen
        this.on('webkitendfullscreen', function () {
          // remove the listener before adding it just in case it wasn't previously removed
          textTracks.removeEventListener('change', takeMetadataTrackSnapshot);
          textTracks.addEventListener('change', takeMetadataTrackSnapshot);
    
          // remove the restoreTrackMode handler in case it wasn't triggered during fullscreen playback
          textTracks.removeEventListener('change', restoreTrackMode);
        });
      };
    
      /**
       * Proxy all native track list events to our track lists if the browser we are playing
       * in supports that type of track list.
       *
       * @private
       */
    
    
      Html5.prototype.proxyNativeTracks_ = function proxyNativeTracks_() {
        var _this2 = this;
    
        NORMAL.names.forEach(function (name) {
          var props = NORMAL[name];
          var elTracks = _this2.el()[props.getterName];
          var techTracks = _this2[props.getterName]();
    
          if (!_this2['featuresNative' + props.capitalName + 'Tracks'] || !elTracks || !elTracks.addEventListener) {
            return;
          }
          var listeners = {
            change: function change(e) {
              techTracks.trigger({
                type: 'change',
                target: techTracks,
                currentTarget: techTracks,
                srcElement: techTracks
              });
            },
            addtrack: function addtrack(e) {
              techTracks.addTrack(e.track);
            },
            removetrack: function removetrack(e) {
              techTracks.removeTrack(e.track);
            }
          };
          var removeOldTracks = function removeOldTracks() {
            var removeTracks = [];
    
            for (var i = 0; i < techTracks.length; i++) {
              var found = false;
    
              for (var j = 0; j < elTracks.length; j++) {
                if (elTracks[j] === techTracks[i]) {
                  found = true;
                  break;
                }
              }
    
              if (!found) {
                removeTracks.push(techTracks[i]);
              }
            }
    
            while (removeTracks.length) {
              techTracks.removeTrack(removeTracks.shift());
            }
          };
    
          Object.keys(listeners).forEach(function (eventName) {
            var listener = listeners[eventName];
    
            elTracks.addEventListener(eventName, listener);
            _this2.on('dispose', function (e) {
              return elTracks.removeEventListener(eventName, listener);
            });
          });
    
          // Remove (native) tracks that are not used anymore
          _this2.on('loadstart', removeOldTracks);
          _this2.on('dispose', function (e) {
            return _this2.off('loadstart', removeOldTracks);
          });
        });
      };
    
      /**
       * Create the `Html5` Tech's DOM element.
       *
       * @return {Element}
       *         The element that gets created.
       */
    
    
      Html5.prototype.createEl = function createEl$$1() {
        var el = this.options_.tag;
    
        // Check if this browser supports moving the element into the box.
        // On the iPhone video will break if you move the element,
        // So we have to create a brand new element.
        // If we ingested the player div, we do not need to move the media element.
        if (!el || !(this.options_.playerElIngest || this.movingMediaElementInDOM)) {
    
          // If the original tag is still there, clone and remove it.
          if (el) {
            var clone = el.cloneNode(true);
    
            if (el.parentNode) {
              el.parentNode.insertBefore(clone, el);
            }
            Html5.disposeMediaElement(el);
            el = clone;
          } else {
            el = document_1.createElement('video');
    
            // determine if native controls should be used
            var tagAttributes = this.options_.tag && getAttributes(this.options_.tag);
            var attributes = mergeOptions({}, tagAttributes);
    
            if (!TOUCH_ENABLED || this.options_.nativeControlsForTouch !== true) {
              delete attributes.controls;
            }
    
            setAttributes(el, assign(attributes, {
              id: this.options_.techId,
              'class': 'vjs-tech'
            }));
          }
    
          el.playerId = this.options_.playerId;
        }
    
        if (typeof this.options_.preload !== 'undefined') {
          setAttribute(el, 'preload', this.options_.preload);
        }
    
        // Update specific tag settings, in case they were overridden
        // `autoplay` has to be *last* so that `muted` and `playsinline` are present
        // when iOS/Safari or other browsers attempt to autoplay.
        var settingsAttrs = ['loop', 'muted', 'playsinline', 'autoplay'];
    
        for (var i = settingsAttrs.length - 1; i >= 0; i--) {
          var attr = settingsAttrs[i];
          var value = this.options_[attr];
    
          if (typeof value !== 'undefined') {
            if (value) {
              setAttribute(el, attr, attr);
            } else {
              removeAttribute(el, attr);
            }
            el[attr] = value;
          }
        }
    
        return el;
      };
    
      /**
       * This will be triggered if the loadstart event has already fired, before videojs was
       * ready. Two known examples of when this can happen are:
       * 1. If we're loading the playback object after it has started loading
       * 2. The media is already playing the (often with autoplay on) then
       *
       * This function will fire another loadstart so that videojs can catchup.
       *
       * @fires Tech#loadstart
       *
       * @return {undefined}
       *         returns nothing.
       */
    
    
      Html5.prototype.handleLateInit_ = function handleLateInit_(el) {
        if (el.networkState === 0 || el.networkState === 3) {
          // The video element hasn't started loading the source yet
          // or didn't find a source
          return;
        }
    
        if (el.readyState === 0) {
          // NetworkState is set synchronously BUT loadstart is fired at the
          // end of the current stack, usually before setInterval(fn, 0).
          // So at this point we know loadstart may have already fired or is
          // about to fire, and either way the player hasn't seen it yet.
          // We don't want to fire loadstart prematurely here and cause a
          // double loadstart so we'll wait and see if it happens between now
          // and the next loop, and fire it if not.
          // HOWEVER, we also want to make sure it fires before loadedmetadata
          // which could also happen between now and the next loop, so we'll
          // watch for that also.
          var loadstartFired = false;
          var setLoadstartFired = function setLoadstartFired() {
            loadstartFired = true;
          };
    
          this.on('loadstart', setLoadstartFired);
    
          var triggerLoadstart = function triggerLoadstart() {
            // We did miss the original loadstart. Make sure the player
            // sees loadstart before loadedmetadata
            if (!loadstartFired) {
              this.trigger('loadstart');
            }
          };
    
          this.on('loadedmetadata', triggerLoadstart);
    
          this.ready(function () {
            this.off('loadstart', setLoadstartFired);
            this.off('loadedmetadata', triggerLoadstart);
    
            if (!loadstartFired) {
              // We did miss the original native loadstart. Fire it now.
              this.trigger('loadstart');
            }
          });
    
          return;
        }
    
        // From here on we know that loadstart already fired and we missed it.
        // The other readyState events aren't as much of a problem if we double
        // them, so not going to go to as much trouble as loadstart to prevent
        // that unless we find reason to.
        var eventsToTrigger = ['loadstart'];
    
        // loadedmetadata: newly equal to HAVE_METADATA (1) or greater
        eventsToTrigger.push('loadedmetadata');
    
        // loadeddata: newly increased to HAVE_CURRENT_DATA (2) or greater
        if (el.readyState >= 2) {
          eventsToTrigger.push('loadeddata');
        }
    
        // canplay: newly increased to HAVE_FUTURE_DATA (3) or greater
        if (el.readyState >= 3) {
          eventsToTrigger.push('canplay');
        }
    
        // canplaythrough: newly equal to HAVE_ENOUGH_DATA (4)
        if (el.readyState >= 4) {
          eventsToTrigger.push('canplaythrough');
        }
    
        // We still need to give the player time to add event listeners
        this.ready(function () {
          eventsToTrigger.forEach(function (type) {
            this.trigger(type);
          }, this);
        });
      };
    
      /**
       * Set current time for the `HTML5` tech.
       *
       * @param {number} seconds
       *        Set the current time of the media to this.
       */
    
    
      Html5.prototype.setCurrentTime = function setCurrentTime(seconds) {
        try {
          this.el_.currentTime = seconds;
        } catch (e) {
          log$1(e, 'Video is not ready. (Video.js)');
          // this.warning(VideoJS.warnings.videoNotReady);
        }
      };
    
      /**
       * Get the current duration of the HTML5 media element.
       *
       * @return {number}
       *         The duration of the media or 0 if there is no duration.
       */
    
    
      Html5.prototype.duration = function duration() {
        var _this3 = this;
    
        // Android Chrome will report duration as Infinity for VOD HLS until after
        // playback has started, which triggers the live display erroneously.
        // Return NaN if playback has not started and trigger a durationupdate once
        // the duration can be reliably known.
        if (this.el_.duration === Infinity && IS_ANDROID && IS_CHROME && this.el_.currentTime === 0) {
          // Wait for the first `timeupdate` with currentTime > 0 - there may be
          // several with 0
          var checkProgress = function checkProgress() {
            if (_this3.el_.currentTime > 0) {
              // Trigger durationchange for genuinely live video
              if (_this3.el_.duration === Infinity) {
                _this3.trigger('durationchange');
              }
              _this3.off('timeupdate', checkProgress);
            }
          };
    
          this.on('timeupdate', checkProgress);
          return NaN;
        }
        return this.el_.duration || NaN;
      };
    
      /**
       * Get the current width of the HTML5 media element.
       *
       * @return {number}
       *         The width of the HTML5 media element.
       */
    
    
      Html5.prototype.width = function width() {
        return this.el_.offsetWidth;
      };
    
      /**
       * Get the current height of the HTML5 media element.
       *
       * @return {number}
       *         The heigth of the HTML5 media element.
       */
    
    
      Html5.prototype.height = function height() {
        return this.el_.offsetHeight;
      };
    
      /**
       * Proxy iOS `webkitbeginfullscreen` and `webkitendfullscreen` into
       * `fullscreenchange` event.
       *
       * @private
       * @fires fullscreenchange
       * @listens webkitendfullscreen
       * @listens webkitbeginfullscreen
       * @listens webkitbeginfullscreen
       */
    
    
      Html5.prototype.proxyWebkitFullscreen_ = function proxyWebkitFullscreen_() {
        var _this4 = this;
    
        if (!('webkitDisplayingFullscreen' in this.el_)) {
          return;
        }
    
        var endFn = function endFn() {
          this.trigger('fullscreenchange', { isFullscreen: false });
        };
    
        var beginFn = function beginFn() {
          if ('webkitPresentationMode' in this.el_ && this.el_.webkitPresentationMode !== 'picture-in-picture') {
            this.one('webkitendfullscreen', endFn);
    
            this.trigger('fullscreenchange', { isFullscreen: true });
          }
        };
    
        this.on('webkitbeginfullscreen', beginFn);
        this.on('dispose', function () {
          _this4.off('webkitbeginfullscreen', beginFn);
          _this4.off('webkitendfullscreen', endFn);
        });
      };
    
      /**
       * Check if fullscreen is supported on the current playback device.
       *
       * @return {boolean}
       *         - True if fullscreen is supported.
       *         - False if fullscreen is not supported.
       */
    
    
      Html5.prototype.supportsFullScreen = function supportsFullScreen() {
        if (typeof this.el_.webkitEnterFullScreen === 'function') {
          var userAgent = window_1.navigator && window_1.navigator.userAgent || '';
    
          // Seems to be broken in Chromium/Chrome && Safari in Leopard
          if (/Android/.test(userAgent) || !/Chrome|Mac OS X 10.5/.test(userAgent)) {
            return true;
          }
        }
        return false;
      };
    
      /**
       * Request that the `HTML5` Tech enter fullscreen.
       */
    
    
      Html5.prototype.enterFullScreen = function enterFullScreen() {
        var video = this.el_;
    
        if (video.paused && video.networkState <= video.HAVE_METADATA) {
          // attempt to prime the video element for programmatic access
          // this isn't necessary on the desktop but shouldn't hurt
          this.el_.play();
    
          // playing and pausing synchronously during the transition to fullscreen
          // can get iOS ~6.1 devices into a play/pause loop
          this.setTimeout(function () {
            video.pause();
            video.webkitEnterFullScreen();
          }, 0);
        } else {
          video.webkitEnterFullScreen();
        }
      };
    
      /**
       * Request that the `HTML5` Tech exit fullscreen.
       */
    
    
      Html5.prototype.exitFullScreen = function exitFullScreen() {
        this.el_.webkitExitFullScreen();
      };
    
      /**
       * A getter/setter for the `Html5` Tech's source object.
       * > Note: Please use {@link Html5#setSource}
       *
       * @param {Tech~SourceObject} [src]
       *        The source object you want to set on the `HTML5` techs element.
       *
       * @return {Tech~SourceObject|undefined}
       *         - The current source object when a source is not passed in.
       *         - undefined when setting
       *
       * @deprecated Since version 5.
       */
    
    
      Html5.prototype.src = function src(_src) {
        if (_src === undefined) {
          return this.el_.src;
        }
    
        // Setting src through `src` instead of `setSrc` will be deprecated
        this.setSrc(_src);
      };
    
      /**
       * Reset the tech by removing all sources and then calling
       * {@link Html5.resetMediaElement}.
       */
    
    
      Html5.prototype.reset = function reset() {
        Html5.resetMediaElement(this.el_);
      };
    
      /**
       * Get the current source on the `HTML5` Tech. Falls back to returning the source from
       * the HTML5 media element.
       *
       * @return {Tech~SourceObject}
       *         The current source object from the HTML5 tech. With a fallback to the
       *         elements source.
       */
    
    
      Html5.prototype.currentSrc = function currentSrc() {
        if (this.currentSource_) {
          return this.currentSource_.src;
        }
        return this.el_.currentSrc;
      };
    
      /**
       * Set controls attribute for the HTML5 media Element.
       *
       * @param {string} val
       *        Value to set the controls attribute to
       */
    
    
      Html5.prototype.setControls = function setControls(val) {
        this.el_.controls = !!val;
      };
    
      /**
       * Create and returns a remote {@link TextTrack} object.
       *
       * @param {string} kind
       *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)
       *
       * @param {string} [label]
       *        Label to identify the text track
       *
       * @param {string} [language]
       *        Two letter language abbreviation
       *
       * @return {TextTrack}
       *         The TextTrack that gets created.
       */
    
    
      Html5.prototype.addTextTrack = function addTextTrack(kind, label, language) {
        if (!this.featuresNativeTextTracks) {
          return _Tech.prototype.addTextTrack.call(this, kind, label, language);
        }
    
        return this.el_.addTextTrack(kind, label, language);
      };
    
      /**
       * Creates either native TextTrack or an emulated TextTrack depending
       * on the value of `featuresNativeTextTracks`
       *
       * @param {Object} options
       *        The object should contain the options to intialize the TextTrack with.
       *
       * @param {string} [options.kind]
       *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).
       *
       * @param {string} [options.label].
       *        Label to identify the text track
       *
       * @param {string} [options.language]
       *        Two letter language abbreviation.
       *
       * @param {boolean} [options.default]
       *        Default this track to on.
       *
       * @param {string} [options.id]
       *        The internal id to assign this track.
       *
       * @param {string} [options.src]
       *        A source url for the track.
       *
       * @return {HTMLTrackElement}
       *         The track element that gets created.
       */
    
    
      Html5.prototype.createRemoteTextTrack = function createRemoteTextTrack(options) {
        if (!this.featuresNativeTextTracks) {
          return _Tech.prototype.createRemoteTextTrack.call(this, options);
        }
        var htmlTrackElement = document_1.createElement('track');
    
        if (options.kind) {
          htmlTrackElement.kind = options.kind;
        }
        if (options.label) {
          htmlTrackElement.label = options.label;
        }
        if (options.language || options.srclang) {
          htmlTrackElement.srclang = options.language || options.srclang;
        }
        if (options['default']) {
          htmlTrackElement['default'] = options['default'];
        }
        if (options.id) {
          htmlTrackElement.id = options.id;
        }
        if (options.src) {
          htmlTrackElement.src = options.src;
        }
    
        return htmlTrackElement;
      };
    
      /**
       * Creates a remote text track object and returns an html track element.
       *
       * @param {Object} options The object should contain values for
       * kind, language, label, and src (location of the WebVTT file)
       * @param {Boolean} [manualCleanup=true] if set to false, the TextTrack will be
       * automatically removed from the video element whenever the source changes
       * @return {HTMLTrackElement} An Html Track Element.
       * This can be an emulated {@link HTMLTrackElement} or a native one.
       * @deprecated The default value of the "manualCleanup" parameter will default
       * to "false" in upcoming versions of Video.js
       */
    
    
      Html5.prototype.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {
        var htmlTrackElement = _Tech.prototype.addRemoteTextTrack.call(this, options, manualCleanup);
    
        if (this.featuresNativeTextTracks) {
          this.el().appendChild(htmlTrackElement);
        }
    
        return htmlTrackElement;
      };
    
      /**
       * Remove remote `TextTrack` from `TextTrackList` object
       *
       * @param {TextTrack} track
       *        `TextTrack` object to remove
       */
    
    
      Html5.prototype.removeRemoteTextTrack = function removeRemoteTextTrack(track) {
        _Tech.prototype.removeRemoteTextTrack.call(this, track);
    
        if (this.featuresNativeTextTracks) {
          var tracks = this.$$('track');
    
          var i = tracks.length;
    
          while (i--) {
            if (track === tracks[i] || track === tracks[i].track) {
              this.el().removeChild(tracks[i]);
            }
          }
        }
      };
    
      /**
       * Gets available media playback quality metrics as specified by the W3C's Media
       * Playback Quality API.
       *
       * @see [Spec]{@link https://wicg.github.io/media-playback-quality}
       *
       * @return {Object}
       *         An object with supported media playback quality metrics
       */
    
    
      Html5.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {
        if (typeof this.el().getVideoPlaybackQuality === 'function') {
          return this.el().getVideoPlaybackQuality();
        }
    
        var videoPlaybackQuality = {};
    
        if (typeof this.el().webkitDroppedFrameCount !== 'undefined' && typeof this.el().webkitDecodedFrameCount !== 'undefined') {
          videoPlaybackQuality.droppedVideoFrames = this.el().webkitDroppedFrameCount;
          videoPlaybackQuality.totalVideoFrames = this.el().webkitDecodedFrameCount;
        }
    
        if (window_1.performance && typeof window_1.performance.now === 'function') {
          videoPlaybackQuality.creationTime = window_1.performance.now();
        } else if (window_1.performance && window_1.performance.timing && typeof window_1.performance.timing.navigationStart === 'number') {
          videoPlaybackQuality.creationTime = window_1.Date.now() - window_1.performance.timing.navigationStart;
        }
    
        return videoPlaybackQuality;
      };
    
      return Html5;
    }(Tech);
    
    /* HTML5 Support Testing ---------------------------------------------------- */
    
    if (isReal()) {
    
      /**
       * Element for testing browser HTML5 media capabilities
       *
       * @type {Element}
       * @constant
       * @private
       */
      Html5.TEST_VID = document_1.createElement('video');
      var track = document_1.createElement('track');
    
      track.kind = 'captions';
      track.srclang = 'en';
      track.label = 'English';
      Html5.TEST_VID.appendChild(track);
    }
    
    /**
     * Check if HTML5 media is supported by this browser/device.
     *
     * @return {boolean}
     *         - True if HTML5 media is supported.
     *         - False if HTML5 media is not supported.
     */
    Html5.isSupported = function () {
      // IE9 with no Media Player is a LIAR! (#984)
      try {
        Html5.TEST_VID.volume = 0.5;
      } catch (e) {
        return false;
      }
    
      return !!(Html5.TEST_VID && Html5.TEST_VID.canPlayType);
    };
    
    /**
     * Check if the tech can support the given type
     *
     * @param {string} type
     *        The mimetype to check
     * @return {string} 'probably', 'maybe', or '' (empty string)
     */
    Html5.canPlayType = function (type) {
      return Html5.TEST_VID.canPlayType(type);
    };
    
    /**
     * Check if the tech can support the given source
     * @param {Object} srcObj
     *        The source object
     * @param {Object} options
     *        The options passed to the tech
     * @return {string} 'probably', 'maybe', or '' (empty string)
     */
    Html5.canPlaySource = function (srcObj, options) {
      return Html5.canPlayType(srcObj.type);
    };
    
    /**
     * Check if the volume can be changed in this browser/device.
     * Volume cannot be changed in a lot of mobile devices.
     * Specifically, it can't be changed from 1 on iOS.
     *
     * @return {boolean}
     *         - True if volume can be controlled
     *         - False otherwise
     */
    Html5.canControlVolume = function () {
      // IE will error if Windows Media Player not installed #3315
      try {
        var volume = Html5.TEST_VID.volume;
    
        Html5.TEST_VID.volume = volume / 2 + 0.1;
        return volume !== Html5.TEST_VID.volume;
      } catch (e) {
        return false;
      }
    };
    
    /**
     * Check if the playback rate can be changed in this browser/device.
     *
     * @return {boolean}
     *         - True if playback rate can be controlled
     *         - False otherwise
     */
    Html5.canControlPlaybackRate = function () {
      // Playback rate API is implemented in Android Chrome, but doesn't do anything
      // https://github.com/videojs/video.js/issues/3180
      if (IS_ANDROID && IS_CHROME && CHROME_VERSION < 58) {
        return false;
      }
      // IE will error if Windows Media Player not installed #3315
      try {
        var playbackRate = Html5.TEST_VID.playbackRate;
    
        Html5.TEST_VID.playbackRate = playbackRate / 2 + 0.1;
        return playbackRate !== Html5.TEST_VID.playbackRate;
      } catch (e) {
        return false;
      }
    };
    
    /**
     * Check to see if native `TextTrack`s are supported by this browser/device.
     *
     * @return {boolean}
     *         - True if native `TextTrack`s are supported.
     *         - False otherwise
     */
    Html5.supportsNativeTextTracks = function () {
      return IS_ANY_SAFARI;
    };
    
    /**
     * Check to see if native `VideoTrack`s are supported by this browser/device
     *
     * @return {boolean}
     *        - True if native `VideoTrack`s are supported.
     *        - False otherwise
     */
    Html5.supportsNativeVideoTracks = function () {
      return !!(Html5.TEST_VID && Html5.TEST_VID.videoTracks);
    };
    
    /**
     * Check to see if native `AudioTrack`s are supported by this browser/device
     *
     * @return {boolean}
     *        - True if native `AudioTrack`s are supported.
     *        - False otherwise
     */
    Html5.supportsNativeAudioTracks = function () {
      return !!(Html5.TEST_VID && Html5.TEST_VID.audioTracks);
    };
    
    /**
     * An array of events available on the Html5 tech.
     *
     * @private
     * @type {Array}
     */
    Html5.Events = ['loadstart', 'suspend', 'abort', 'error', 'emptied', 'stalled', 'loadedmetadata', 'loadeddata', 'canplay', 'canplaythrough', 'playing', 'waiting', 'seeking', 'seeked', 'ended', 'durationchange', 'timeupdate', 'progress', 'play', 'pause', 'ratechange', 'resize', 'volumechange'];
    
    /**
     * Boolean indicating whether the `Tech` supports volume control.
     *
     * @type {boolean}
     * @default {@link Html5.canControlVolume}
     */
    Html5.prototype.featuresVolumeControl = Html5.canControlVolume();
    
    /**
     * Boolean indicating whether the `Tech` supports changing the speed at which the media
     * plays. Examples:
     *   - Set player to play 2x (twice) as fast
     *   - Set player to play 0.5x (half) as fast
     *
     * @type {boolean}
     * @default {@link Html5.canControlPlaybackRate}
     */
    Html5.prototype.featuresPlaybackRate = Html5.canControlPlaybackRate();
    
    /**
     * Boolean indicating whether the `HTML5` tech currently supports the media element
     * moving in the DOM. iOS breaks if you move the media element, so this is set this to
     * false there. Everywhere else this should be true.
     *
     * @type {boolean}
     * @default
     */
    Html5.prototype.movingMediaElementInDOM = !IS_IOS;
    
    // TODO: Previous comment: No longer appears to be used. Can probably be removed.
    //       Is this true?
    /**
     * Boolean indicating whether the `HTML5` tech currently supports automatic media resize
     * when going into fullscreen.
     *
     * @type {boolean}
     * @default
     */
    Html5.prototype.featuresFullscreenResize = true;
    
    /**
     * Boolean indicating whether the `HTML5` tech currently supports the progress event.
     * If this is false, manual `progress` events will be triggred instead.
     *
     * @type {boolean}
     * @default
     */
    Html5.prototype.featuresProgressEvents = true;
    
    /**
     * Boolean indicating whether the `HTML5` tech currently supports the timeupdate event.
     * If this is false, manual `timeupdate` events will be triggred instead.
     *
     * @default
     */
    Html5.prototype.featuresTimeupdateEvents = true;
    
    /**
     * Boolean indicating whether the `HTML5` tech currently supports native `TextTrack`s.
     *
     * @type {boolean}
     * @default {@link Html5.supportsNativeTextTracks}
     */
    Html5.prototype.featuresNativeTextTracks = Html5.supportsNativeTextTracks();
    
    /**
     * Boolean indicating whether the `HTML5` tech currently supports native `VideoTrack`s.
     *
     * @type {boolean}
     * @default {@link Html5.supportsNativeVideoTracks}
     */
    Html5.prototype.featuresNativeVideoTracks = Html5.supportsNativeVideoTracks();
    
    /**
     * Boolean indicating whether the `HTML5` tech currently supports native `AudioTrack`s.
     *
     * @type {boolean}
     * @default {@link Html5.supportsNativeAudioTracks}
     */
    Html5.prototype.featuresNativeAudioTracks = Html5.supportsNativeAudioTracks();
    
    // HTML5 Feature detection and Device Fixes --------------------------------- //
    var canPlayType = Html5.TEST_VID && Html5.TEST_VID.constructor.prototype.canPlayType;
    var mpegurlRE = /^application\/(?:x-|vnd\.apple\.)mpegurl/i;
    var mp4RE = /^video\/mp4/i;
    
    Html5.patchCanPlayType = function () {
    
      // Android 4.0 and above can play HLS to some extent but it reports being unable to do so
      if (ANDROID_VERSION >= 4.0 && !IS_FIREFOX) {
        Html5.TEST_VID.constructor.prototype.canPlayType = function (type) {
          if (type && mpegurlRE.test(type)) {
            return 'maybe';
          }
          return canPlayType.call(this, type);
        };
    
        // Override Android 2.2 and less canPlayType method which is broken
      } else if (IS_OLD_ANDROID) {
        Html5.TEST_VID.constructor.prototype.canPlayType = function (type) {
          if (type && mp4RE.test(type)) {
            return 'maybe';
          }
          return canPlayType.call(this, type);
        };
      }
    };
    
    Html5.unpatchCanPlayType = function () {
      var r = Html5.TEST_VID.constructor.prototype.canPlayType;
    
      Html5.TEST_VID.constructor.prototype.canPlayType = canPlayType;
      return r;
    };
    
    // by default, patch the media element
    Html5.patchCanPlayType();
    
    Html5.disposeMediaElement = function (el) {
      if (!el) {
        return;
      }
    
      if (el.parentNode) {
        el.parentNode.removeChild(el);
      }
    
      // remove any child track or source nodes to prevent their loading
      while (el.hasChildNodes()) {
        el.removeChild(el.firstChild);
      }
    
      // remove any src reference. not setting `src=''` because that causes a warning
      // in firefox
      el.removeAttribute('src');
    
      // force the media element to update its loading state by calling load()
      // however IE on Windows 7N has a bug that throws an error so need a try/catch (#793)
      if (typeof el.load === 'function') {
        // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)
        (function () {
          try {
            el.load();
          } catch (e) {
            // not supported
          }
        })();
      }
    };
    
    Html5.resetMediaElement = function (el) {
      if (!el) {
        return;
      }
    
      var sources = el.querySelectorAll('source');
      var i = sources.length;
    
      while (i--) {
        el.removeChild(sources[i]);
      }
    
      // remove any src reference.
      // not setting `src=''` because that throws an error
      el.removeAttribute('src');
    
      if (typeof el.load === 'function') {
        // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)
        (function () {
          try {
            el.load();
          } catch (e) {
            // satisfy linter
          }
        })();
      }
    };
    
    /* Native HTML5 element property wrapping ----------------------------------- */
    // Wrap native boolean attributes with getters that check both property and attribute
    // The list is as followed:
    // muted, defaultMuted, autoplay, controls, loop, playsinline
    [
    /**
     * Get the value of `muted` from the media element. `muted` indicates
     * that the volume for the media should be set to silent. This does not actually change
     * the `volume` attribute.
     *
     * @method Html5#muted
     * @return {boolean}
     *         - True if the value of `volume` should be ignored and the audio set to silent.
     *         - False if the value of `volume` should be used.
     *
     * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}
     */
    'muted',
    
    /**
     * Get the value of `defaultMuted` from the media element. `defaultMuted` indicates
     * whether the media should start muted or not. Only changes the default state of the
     * media. `muted` and `defaultMuted` can have different values. {@link Html5#muted} indicates the
     * current state.
     *
     * @method Html5#defaultMuted
     * @return {boolean}
     *         - The value of `defaultMuted` from the media element.
     *         - True indicates that the media should start muted.
     *         - False indicates that the media should not start muted
     *
     * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}
     */
    'defaultMuted',
    
    /**
     * Get the value of `autoplay` from the media element. `autoplay` indicates
     * that the media should start to play as soon as the page is ready.
     *
     * @method Html5#autoplay
     * @return {boolean}
     *         - The value of `autoplay` from the media element.
     *         - True indicates that the media should start as soon as the page loads.
     *         - False indicates that the media should not start as soon as the page loads.
     *
     * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}
     */
    'autoplay',
    
    /**
     * Get the value of `controls` from the media element. `controls` indicates
     * whether the native media controls should be shown or hidden.
     *
     * @method Html5#controls
     * @return {boolean}
     *         - The value of `controls` from the media element.
     *         - True indicates that native controls should be showing.
     *         - False indicates that native controls should be hidden.
     *
     * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-controls}
     */
    'controls',
    
    /**
     * Get the value of `loop` from the media element. `loop` indicates
     * that the media should return to the start of the media and continue playing once
     * it reaches the end.
     *
     * @method Html5#loop
     * @return {boolean}
     *         - The value of `loop` from the media element.
     *         - True indicates that playback should seek back to start once
     *           the end of a media is reached.
     *         - False indicates that playback should not loop back to the start when the
     *           end of the media is reached.
     *
     * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}
     */
    'loop',
    
    /**
     * Get the value of `playsinline` from the media element. `playsinline` indicates
     * to the browser that non-fullscreen playback is preferred when fullscreen
     * playback is the native default, such as in iOS Safari.
     *
     * @method Html5#playsinline
     * @return {boolean}
     *         - The value of `playsinline` from the media element.
     *         - True indicates that the media should play inline.
     *         - False indicates that the media should not play inline.
     *
     * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}
     */
    'playsinline'].forEach(function (prop) {
      Html5.prototype[prop] = function () {
        return this.el_[prop] || this.el_.hasAttribute(prop);
      };
    });
    
    // Wrap native boolean attributes with setters that set both property and attribute
    // The list is as followed:
    // setMuted, setDefaultMuted, setAutoplay, setLoop, setPlaysinline
    // setControls is special-cased above
    [
    /**
     * Set the value of `muted` on the media element. `muted` indicates that the current
     * audio level should be silent.
     *
     * @method Html5#setMuted
     * @param {boolean} muted
     *        - True if the audio should be set to silent
     *        - False otherwise
     *
     * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}
     */
    'muted',
    
    /**
     * Set the value of `defaultMuted` on the media element. `defaultMuted` indicates that the current
     * audio level should be silent, but will only effect the muted level on intial playback..
     *
     * @method Html5.prototype.setDefaultMuted
     * @param {boolean} defaultMuted
     *        - True if the audio should be set to silent
     *        - False otherwise
     *
     * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}
     */
    'defaultMuted',
    
    /**
     * Set the value of `autoplay` on the media element. `autoplay` indicates
     * that the media should start to play as soon as the page is ready.
     *
     * @method Html5#setAutoplay
     * @param {boolean} autoplay
     *         - True indicates that the media should start as soon as the page loads.
     *         - False indicates that the media should not start as soon as the page loads.
     *
     * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}
     */
    'autoplay',
    
    /**
     * Set the value of `loop` on the media element. `loop` indicates
     * that the media should return to the start of the media and continue playing once
     * it reaches the end.
     *
     * @method Html5#setLoop
     * @param {boolean} loop
     *         - True indicates that playback should seek back to start once
     *           the end of a media is reached.
     *         - False indicates that playback should not loop back to the start when the
     *           end of the media is reached.
     *
     * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}
     */
    'loop',
    
    /**
     * Set the value of `playsinline` from the media element. `playsinline` indicates
     * to the browser that non-fullscreen playback is preferred when fullscreen
     * playback is the native default, such as in iOS Safari.
     *
     * @method Html5#setPlaysinline
     * @param {boolean} playsinline
     *         - True indicates that the media should play inline.
     *         - False indicates that the media should not play inline.
     *
     * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}
     */
    'playsinline'].forEach(function (prop) {
      Html5.prototype['set' + toTitleCase(prop)] = function (v) {
        this.el_[prop] = v;
    
        if (v) {
          this.el_.setAttribute(prop, prop);
        } else {
          this.el_.removeAttribute(prop);
        }
      };
    });
    
    // Wrap native properties with a getter
    // The list is as followed
    // paused, currentTime, buffered, volume, poster, preload, error, seeking
    // seekable, ended, playbackRate, defaultPlaybackRate, played, networkState
    // readyState, videoWidth, videoHeight
    [
    /**
     * Get the value of `paused` from the media element. `paused` indicates whether the media element
     * is currently paused or not.
     *
     * @method Html5#paused
     * @return {boolean}
     *         The value of `paused` from the media element.
     *
     * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-paused}
     */
    'paused',
    
    /**
     * Get the value of `currentTime` from the media element. `currentTime` indicates
     * the current second that the media is at in playback.
     *
     * @method Html5#currentTime
     * @return {number}
     *         The value of `currentTime` from the media element.
     *
     * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-currenttime}
     */
    'currentTime',
    
    /**
     * Get the value of `buffered` from the media element. `buffered` is a `TimeRange`
     * object that represents the parts of the media that are already downloaded and
     * available for playback.
     *
     * @method Html5#buffered
     * @return {TimeRange}
     *         The value of `buffered` from the media element.
     *
     * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-buffered}
     */
    'buffered',
    
    /**
     * Get the value of `volume` from the media element. `volume` indicates
     * the current playback volume of audio for a media. `volume` will be a value from 0
     * (silent) to 1 (loudest and default).
     *
     * @method Html5#volume
     * @return {number}
     *         The value of `volume` from the media element. Value will be between 0-1.
     *
     * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}
     */
    'volume',
    
    /**
     * Get the value of `poster` from the media element. `poster` indicates
     * that the url of an image file that can/will be shown when no media data is available.
     *
     * @method Html5#poster
     * @return {string}
     *         The value of `poster` from the media element. Value will be a url to an
     *         image.
     *
     * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-video-poster}
     */
    'poster',
    
    /**
     * Get the value of `preload` from the media element. `preload` indicates
     * what should download before the media is interacted with. It can have the following
     * values:
     * - none: nothing should be downloaded
     * - metadata: poster and the first few frames of the media may be downloaded to get
     *   media dimensions and other metadata
     * - auto: allow the media and metadata for the media to be downloaded before
     *    interaction
     *
     * @method Html5#preload
     * @return {string}
     *         The value of `preload` from the media element. Will be 'none', 'metadata',
     *         or 'auto'.
     *
     * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}
     */
    'preload',
    
    /**
     * Get the value of the `error` from the media element. `error` indicates any
     * MediaError that may have occured during playback. If error returns null there is no
     * current error.
     *
     * @method Html5#error
     * @return {MediaError|null}
     *         The value of `error` from the media element. Will be `MediaError` if there
     *         is a current error and null otherwise.
     *
     * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-error}
     */
    'error',
    
    /**
     * Get the value of `seeking` from the media element. `seeking` indicates whether the
     * media is currently seeking to a new position or not.
     *
     * @method Html5#seeking
     * @return {boolean}
     *         - The value of `seeking` from the media element.
     *         - True indicates that the media is currently seeking to a new position.
     *         - Flase indicates that the media is not seeking to a new position at this time.
     *
     * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seeking}
     */
    'seeking',
    
    /**
     * Get the value of `seekable` from the media element. `seekable` returns a
     * `TimeRange` object indicating ranges of time that can currently be `seeked` to.
     *
     * @method Html5#seekable
     * @return {TimeRange}
     *         The value of `seekable` from the media element. A `TimeRange` object
     *         indicating the current ranges of time that can be seeked to.
     *
     * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seekable}
     */
    'seekable',
    
    /**
     * Get the value of `ended` from the media element. `ended` indicates whether
     * the media has reached the end or not.
     *
     * @method Html5#ended
     * @return {boolean}
     *         - The value of `ended` from the media element.
     *         - True indicates that the media has ended.
     *         - False indicates that the media has not ended.
     *
     * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-ended}
     */
    'ended',
    
    /**
     * Get the value of `playbackRate` from the media element. `playbackRate` indicates
     * the rate at which the media is currently playing back. Examples:
     *   - if playbackRate is set to 2, media will play twice as fast.
     *   - if playbackRate is set to 0.5, media will play half as fast.
     *
     * @method Html5#playbackRate
     * @return {number}
     *         The value of `playbackRate` from the media element. A number indicating
     *         the current playback speed of the media, where 1 is normal speed.
     *
     * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
     */
    'playbackRate',
    
    /**
     * Get the value of `defaultPlaybackRate` from the media element. `defaultPlaybackRate` indicates
     * the rate at which the media is currently playing back. This value will not indicate the current
     * `playbackRate` after playback has started, use {@link Html5#playbackRate} for that.
     *
     * Examples:
     *   - if defaultPlaybackRate is set to 2, media will play twice as fast.
     *   - if defaultPlaybackRate is set to 0.5, media will play half as fast.
     *
     * @method Html5.prototype.defaultPlaybackRate
     * @return {number}
     *         The value of `defaultPlaybackRate` from the media element. A number indicating
     *         the current playback speed of the media, where 1 is normal speed.
     *
     * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
     */
    'defaultPlaybackRate',
    
    /**
     * Get the value of `played` from the media element. `played` returns a `TimeRange`
     * object representing points in the media timeline that have been played.
     *
     * @method Html5#played
     * @return {TimeRange}
     *         The value of `played` from the media element. A `TimeRange` object indicating
     *         the ranges of time that have been played.
     *
     * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-played}
     */
    'played',
    
    /**
     * Get the value of `networkState` from the media element. `networkState` indicates
     * the current network state. It returns an enumeration from the following list:
     * - 0: NETWORK_EMPTY
     * - 1: NEWORK_IDLE
     * - 2: NETWORK_LOADING
     * - 3: NETWORK_NO_SOURCE
     *
     * @method Html5#networkState
     * @return {number}
     *         The value of `networkState` from the media element. This will be a number
     *         from the list in the description.
     *
     * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-networkstate}
     */
    'networkState',
    
    /**
     * Get the value of `readyState` from the media element. `readyState` indicates
     * the current state of the media element. It returns an enumeration from the
     * following list:
     * - 0: HAVE_NOTHING
     * - 1: HAVE_METADATA
     * - 2: HAVE_CURRENT_DATA
     * - 3: HAVE_FUTURE_DATA
     * - 4: HAVE_ENOUGH_DATA
     *
     * @method Html5#readyState
     * @return {number}
     *         The value of `readyState` from the media element. This will be a number
     *         from the list in the description.
     *
     * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#ready-states}
     */
    'readyState',
    
    /**
     * Get the value of `videoWidth` from the video element. `videoWidth` indicates
     * the current width of the video in css pixels.
     *
     * @method Html5#videoWidth
     * @return {number}
     *         The value of `videoWidth` from the video element. This will be a number
     *         in css pixels.
     *
     * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}
     */
    'videoWidth',
    
    /**
     * Get the value of `videoHeight` from the video element. `videoHeigth` indicates
     * the current height of the video in css pixels.
     *
     * @method Html5#videoHeight
     * @return {number}
     *         The value of `videoHeight` from the video element. This will be a number
     *         in css pixels.
     *
     * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}
     */
    'videoHeight'].forEach(function (prop) {
      Html5.prototype[prop] = function () {
        return this.el_[prop];
      };
    });
    
    // Wrap native properties with a setter in this format:
    // set + toTitleCase(name)
    // The list is as follows:
    // setVolume, setSrc, setPoster, setPreload, setPlaybackRate, setDefaultPlaybackRate
    [
    /**
     * Set the value of `volume` on the media element. `volume` indicates the current
     * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and
     * so on.
     *
     * @method Html5#setVolume
     * @param {number} percentAsDecimal
     *        The volume percent as a decimal. Valid range is from 0-1.
     *
     * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}
     */
    'volume',
    
    /**
     * Set the value of `src` on the media element. `src` indicates the current
     * {@link Tech~SourceObject} for the media.
     *
     * @method Html5#setSrc
     * @param {Tech~SourceObject} src
     *        The source object to set as the current source.
     *
     * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-src}
     */
    'src',
    
    /**
     * Set the value of `poster` on the media element. `poster` is the url to
     * an image file that can/will be shown when no media data is available.
     *
     * @method Html5#setPoster
     * @param {string} poster
     *        The url to an image that should be used as the `poster` for the media
     *        element.
     *
     * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-poster}
     */
    'poster',
    
    /**
     * Set the value of `preload` on the media element. `preload` indicates
     * what should download before the media is interacted with. It can have the following
     * values:
     * - none: nothing should be downloaded
     * - metadata: poster and the first few frames of the media may be downloaded to get
     *   media dimensions and other metadata
     * - auto: allow the media and metadata for the media to be downloaded before
     *    interaction
     *
     * @method Html5#setPreload
     * @param {string} preload
     *         The value of `preload` to set on the media element. Must be 'none', 'metadata',
     *         or 'auto'.
     *
     * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}
     */
    'preload',
    
    /**
     * Set the value of `playbackRate` on the media element. `playbackRate` indicates
     * the rate at which the media should play back. Examples:
     *   - if playbackRate is set to 2, media will play twice as fast.
     *   - if playbackRate is set to 0.5, media will play half as fast.
     *
     * @method Html5#setPlaybackRate
     * @return {number}
     *         The value of `playbackRate` from the media element. A number indicating
     *         the current playback speed of the media, where 1 is normal speed.
     *
     * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
     */
    'playbackRate',
    
    /**
     * Set the value of `defaultPlaybackRate` on the media element. `defaultPlaybackRate` indicates
     * the rate at which the media should play back upon initial startup. Changing this value
     * after a video has started will do nothing. Instead you should used {@link Html5#setPlaybackRate}.
     *
     * Example Values:
     *   - if playbackRate is set to 2, media will play twice as fast.
     *   - if playbackRate is set to 0.5, media will play half as fast.
     *
     * @method Html5.prototype.setDefaultPlaybackRate
     * @return {number}
     *         The value of `defaultPlaybackRate` from the media element. A number indicating
     *         the current playback speed of the media, where 1 is normal speed.
     *
     * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultplaybackrate}
     */
    'defaultPlaybackRate'].forEach(function (prop) {
      Html5.prototype['set' + toTitleCase(prop)] = function (v) {
        this.el_[prop] = v;
      };
    });
    
    // wrap native functions with a function
    // The list is as follows:
    // pause, load play
    [
    /**
     * A wrapper around the media elements `pause` function. This will call the `HTML5`
     * media elements `pause` function.
     *
     * @method Html5#pause
     * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-pause}
     */
    'pause',
    
    /**
     * A wrapper around the media elements `load` function. This will call the `HTML5`s
     * media element `load` function.
     *
     * @method Html5#load
     * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-load}
     */
    'load',
    
    /**
     * A wrapper around the media elements `play` function. This will call the `HTML5`s
     * media element `play` function.
     *
     * @method Html5#play
     * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-play}
     */
    'play'].forEach(function (prop) {
      Html5.prototype[prop] = function () {
        return this.el_[prop]();
      };
    });
    
    Tech.withSourceHandlers(Html5);
    
    /**
     * Native source handler for Html5, simply passes the source to the media element.
     *
     * @proprety {Tech~SourceObject} source
     *        The source object
     *
     * @proprety {Html5} tech
     *        The instance of the HTML5 tech.
     */
    Html5.nativeSourceHandler = {};
    
    /**
     * Check if the media element can play the given mime type.
     *
     * @param {string} type
     *        The mimetype to check
     *
     * @return {string}
     *         'probably', 'maybe', or '' (empty string)
     */
    Html5.nativeSourceHandler.canPlayType = function (type) {
      // IE9 on Windows 7 without MediaPlayer throws an error here
      // https://github.com/videojs/video.js/issues/519
      try {
        return Html5.TEST_VID.canPlayType(type);
      } catch (e) {
        return '';
      }
    };
    
    /**
     * Check if the media element can handle a source natively.
     *
     * @param {Tech~SourceObject} source
     *         The source object
     *
     * @param {Object} [options]
     *         Options to be passed to the tech.
     *
     * @return {string}
     *         'probably', 'maybe', or '' (empty string).
     */
    Html5.nativeSourceHandler.canHandleSource = function (source, options) {
    
      // If a type was provided we should rely on that
      if (source.type) {
        return Html5.nativeSourceHandler.canPlayType(source.type);
    
        // If no type, fall back to checking 'video/[EXTENSION]'
      } else if (source.src) {
        var ext = getFileExtension(source.src);
    
        return Html5.nativeSourceHandler.canPlayType('video/' + ext);
      }
    
      return '';
    };
    
    /**
     * Pass the source to the native media element.
     *
     * @param {Tech~SourceObject} source
     *        The source object
     *
     * @param {Html5} tech
     *        The instance of the Html5 tech
     *
     * @param {Object} [options]
     *        The options to pass to the source
     */
    Html5.nativeSourceHandler.handleSource = function (source, tech, options) {
      tech.setSrc(source.src);
    };
    
    /**
     * A noop for the native dispose function, as cleanup is not needed.
     */
    Html5.nativeSourceHandler.dispose = function () {};
    
    // Register the native source handler
    Html5.registerSourceHandler(Html5.nativeSourceHandler);
    
    Tech.registerTech('Html5', Html5);
    
    var _templateObject$1 = taggedTemplateLiteralLoose(['\n        Using the tech directly can be dangerous. I hope you know what you\'re doing.\n        See https://github.com/videojs/video.js/issues/2617 for more info.\n      '], ['\n        Using the tech directly can be dangerous. I hope you know what you\'re doing.\n        See https://github.com/videojs/video.js/issues/2617 for more info.\n      ']);
    
    /**
     * @file player.js
     */
    // Subclasses Component
    // The following imports are used only to ensure that the corresponding modules
    // are always included in the video.js package. Importing the modules will
    // execute them and they will register themselves with video.js.
    // Import Html5 tech, at least for disposing the original video tag.
    // The following tech events are simply re-triggered
    // on the player when they happen
    var TECH_EVENTS_RETRIGGER = [
    /**
     * Fired while the user agent is downloading media data.
     *
     * @event Player#progress
     * @type {EventTarget~Event}
     */
    /**
     * Retrigger the `progress` event that was triggered by the {@link Tech}.
     *
     * @private
     * @method Player#handleTechProgress_
     * @fires Player#progress
     * @listens Tech#progress
     */
    'progress',
    
    /**
     * Fires when the loading of an audio/video is aborted.
     *
     * @event Player#abort
     * @type {EventTarget~Event}
     */
    /**
     * Retrigger the `abort` event that was triggered by the {@link Tech}.
     *
     * @private
     * @method Player#handleTechAbort_
     * @fires Player#abort
     * @listens Tech#abort
     */
    'abort',
    
    /**
     * Fires when the browser is intentionally not getting media data.
     *
     * @event Player#suspend
     * @type {EventTarget~Event}
     */
    /**
     * Retrigger the `suspend` event that was triggered by the {@link Tech}.
     *
     * @private
     * @method Player#handleTechSuspend_
     * @fires Player#suspend
     * @listens Tech#suspend
     */
    'suspend',
    
    /**
     * Fires when the current playlist is empty.
     *
     * @event Player#emptied
     * @type {EventTarget~Event}
     */
    /**
     * Retrigger the `emptied` event that was triggered by the {@link Tech}.
     *
     * @private
     * @method Player#handleTechEmptied_
     * @fires Player#emptied
     * @listens Tech#emptied
     */
    'emptied',
    /**
     * Fires when the browser is trying to get media data, but data is not available.
     *
     * @event Player#stalled
     * @type {EventTarget~Event}
     */
    /**
     * Retrigger the `stalled` event that was triggered by the {@link Tech}.
     *
     * @private
     * @method Player#handleTechStalled_
     * @fires Player#stalled
     * @listens Tech#stalled
     */
    'stalled',
    
    /**
     * Fires when the browser has loaded meta data for the audio/video.
     *
     * @event Player#loadedmetadata
     * @type {EventTarget~Event}
     */
    /**
     * Retrigger the `stalled` event that was triggered by the {@link Tech}.
     *
     * @private
     * @method Player#handleTechLoadedmetadata_
     * @fires Player#loadedmetadata
     * @listens Tech#loadedmetadata
     */
    'loadedmetadata',
    
    /**
     * Fires when the browser has loaded the current frame of the audio/video.
     *
     * @event Player#loadeddata
     * @type {event}
     */
    /**
     * Retrigger the `loadeddata` event that was triggered by the {@link Tech}.
     *
     * @private
     * @method Player#handleTechLoaddeddata_
     * @fires Player#loadeddata
     * @listens Tech#loadeddata
     */
    'loadeddata',
    
    /**
     * Fires when the current playback position has changed.
     *
     * @event Player#timeupdate
     * @type {event}
     */
    /**
     * Retrigger the `timeupdate` event that was triggered by the {@link Tech}.
     *
     * @private
     * @method Player#handleTechTimeUpdate_
     * @fires Player#timeupdate
     * @listens Tech#timeupdate
     */
    'timeupdate',
    
    /**
     * Fires when the playing speed of the audio/video is changed
     *
     * @event Player#ratechange
     * @type {event}
     */
    /**
     * Retrigger the `ratechange` event that was triggered by the {@link Tech}.
     *
     * @private
     * @method Player#handleTechRatechange_
     * @fires Player#ratechange
     * @listens Tech#ratechange
     */
    'ratechange',
    
    /**
     * Fires when the video's intrinsic dimensions change
     *
     * @event Player#resize
     * @type {event}
     */
    /**
     * Retrigger the `resize` event that was triggered by the {@link Tech}.
     *
     * @private
     * @method Player#handleTechResize_
     * @fires Player#resize
     * @listens Tech#resize
     */
    'resize',
    
    /**
     * Fires when the volume has been changed
     *
     * @event Player#volumechange
     * @type {event}
     */
    /**
     * Retrigger the `volumechange` event that was triggered by the {@link Tech}.
     *
     * @private
     * @method Player#handleTechVolumechange_
     * @fires Player#volumechange
     * @listens Tech#volumechange
     */
    'volumechange',
    
    /**
     * Fires when the text track has been changed
     *
     * @event Player#texttrackchange
     * @type {event}
     */
    /**
     * Retrigger the `texttrackchange` event that was triggered by the {@link Tech}.
     *
     * @private
     * @method Player#handleTechTexttrackchange_
     * @fires Player#texttrackchange
     * @listens Tech#texttrackchange
     */
    'texttrackchange'];
    
    /**
     * An instance of the `Player` class is created when any of the Video.js setup methods
     * are used to initialize a video.
     *
     * After an instance has been created it can be accessed globally in two ways:
     * 1. By calling `videojs('example_video_1');`
     * 2. By using it directly via  `videojs.players.example_video_1;`
     *
     * @extends Component
     */
    
    var Player = function (_Component) {
      inherits(Player, _Component);
    
      /**
       * Create an instance of this class.
       *
       * @param {Element} tag
       *        The original video DOM element used for configuring options.
       *
       * @param {Object} [options]
       *        Object of option names and values.
       *
       * @param {Component~ReadyCallback} [ready]
       *        Ready callback function.
       */
      function Player(tag, options, ready) {
        classCallCheck(this, Player);
    
        // Make sure tag ID exists
        tag.id = tag.id || 'vjs_video_' + newGUID();
    
        // Set Options
        // The options argument overrides options set in the video tag
        // which overrides globally set options.
        // This latter part coincides with the load order
        // (tag must exist before Player)
        options = assign(Player.getTagSettings(tag), options);
    
        // Delay the initialization of children because we need to set up
        // player properties first, and can't use `this` before `super()`
        options.initChildren = false;
    
        // Same with creating the element
        options.createEl = false;
    
        // we don't want the player to report touch activity on itself
        // see enableTouchActivity in Component
        options.reportTouchActivity = false;
    
        // If language is not set, get the closest lang attribute
        if (!options.language) {
          if (typeof tag.closest === 'function') {
            var closest = tag.closest('[lang]');
    
            if (closest) {
              options.language = closest.getAttribute('lang');
            }
          } else {
            var element = tag;
    
            while (element && element.nodeType === 1) {
              if (getAttributes(element).hasOwnProperty('lang')) {
                options.language = element.getAttribute('lang');
                break;
              }
              element = element.parentNode;
            }
          }
        }
    
        // Run base component initializing with new options
    
        // Turn off API access because we're loading a new tech that might load asynchronously
        var _this = possibleConstructorReturn(this, _Component.call(this, null, options, ready));
    
        _this.isReady_ = false;
    
        // if the global option object was accidentally blown away by
        // someone, bail early with an informative error
        if (!_this.options_ || !_this.options_.techOrder || !_this.options_.techOrder.length) {
          throw new Error('No techOrder specified. Did you overwrite ' + 'videojs.options instead of just changing the ' + 'properties you want to override?');
        }
    
        // Store the original tag used to set options
        _this.tag = tag;
    
        // Store the tag attributes used to restore html5 element
        _this.tagAttributes = tag && getAttributes(tag);
    
        // Update current language
        _this.language(_this.options_.language);
    
        // Update Supported Languages
        if (options.languages) {
          // Normalise player option languages to lowercase
          var languagesToLower = {};
    
          Object.getOwnPropertyNames(options.languages).forEach(function (name$$1) {
            languagesToLower[name$$1.toLowerCase()] = options.languages[name$$1];
          });
          _this.languages_ = languagesToLower;
        } else {
          _this.languages_ = Player.prototype.options_.languages;
        }
    
        // Cache for video property values.
        _this.cache_ = {};
    
        // Set poster
        _this.poster_ = options.poster || '';
    
        // Set controls
        _this.controls_ = !!options.controls;
    
        // Set default values for lastVolume
        _this.cache_.lastVolume = 1;
    
        // Original tag settings stored in options
        // now remove immediately so native controls don't flash.
        // May be turned back on by HTML5 tech if nativeControlsForTouch is true
        tag.controls = false;
    
        /*
         * Store the internal state of scrubbing
         *
         * @private
         * @return {Boolean} True if the user is scrubbing
         */
        _this.scrubbing_ = false;
    
        _this.el_ = _this.createEl();
    
        // Make this an evented object and use `el_` as its event bus.
        evented(_this, { eventBusKey: 'el_' });
    
        // We also want to pass the original player options to each component and plugin
        // as well so they don't need to reach back into the player for options later.
        // We also need to do another copy of this.options_ so we don't end up with
        // an infinite loop.
        var playerOptionsCopy = mergeOptions(_this.options_);
    
        // Load plugins
        if (options.plugins) {
          var plugins = options.plugins;
    
          Object.keys(plugins).forEach(function (name$$1) {
            if (typeof this[name$$1] === 'function') {
              this[name$$1](plugins[name$$1]);
            } else {
              throw new Error('plugin "' + name$$1 + '" does not exist');
            }
          }, _this);
        }
    
        _this.options_.playerOptions = playerOptionsCopy;
    
        _this.middleware_ = [];
    
        _this.initChildren();
    
        // Set isAudio based on whether or not an audio tag was used
        _this.isAudio(tag.nodeName.toLowerCase() === 'audio');
    
        // Update controls className. Can't do this when the controls are initially
        // set because the element doesn't exist yet.
        if (_this.controls()) {
          _this.addClass('vjs-controls-enabled');
        } else {
          _this.addClass('vjs-controls-disabled');
        }
    
        // Set ARIA label and region role depending on player type
        _this.el_.setAttribute('role', 'region');
        if (_this.isAudio()) {
          _this.el_.setAttribute('aria-label', _this.localize('Audio Player'));
        } else {
          _this.el_.setAttribute('aria-label', _this.localize('Video Player'));
        }
    
        if (_this.isAudio()) {
          _this.addClass('vjs-audio');
        }
    
        if (_this.flexNotSupported_()) {
          _this.addClass('vjs-no-flex');
        }
    
        // TODO: Make this smarter. Toggle user state between touching/mousing
        // using events, since devices can have both touch and mouse events.
        // if (browser.TOUCH_ENABLED) {
        //   this.addClass('vjs-touch-enabled');
        // }
    
        // iOS Safari has broken hover handling
        if (!IS_IOS) {
          _this.addClass('vjs-workinghover');
        }
    
        // Make player easily findable by ID
        Player.players[_this.id_] = _this;
    
        // Add a major version class to aid css in plugins
        var majorVersion = version.split('.')[0];
    
        _this.addClass('vjs-v' + majorVersion);
    
        // When the player is first initialized, trigger activity so components
        // like the control bar show themselves if needed
        _this.userActive(true);
        _this.reportUserActivity();
        _this.listenForUserActivity_();
    
        _this.on('fullscreenchange', _this.handleFullscreenChange_);
        _this.on('stageclick', _this.handleStageClick_);
    
        _this.changingSrc_ = false;
        return _this;
      }
    
      /**
       * Destroys the video player and does any necessary cleanup.
       *
       * This is especially helpful if you are dynamically adding and removing videos
       * to/from the DOM.
       *
       * @fires Player#dispose
       */
    
    
      Player.prototype.dispose = function dispose() {
        /**
         * Called when the player is being disposed of.
         *
         * @event Player#dispose
         * @type {EventTarget~Event}
         */
        this.trigger('dispose');
        // prevent dispose from being called twice
        this.off('dispose');
    
        if (this.styleEl_ && this.styleEl_.parentNode) {
          this.styleEl_.parentNode.removeChild(this.styleEl_);
        }
    
        // Kill reference to this player
        Player.players[this.id_] = null;
    
        if (this.tag && this.tag.player) {
          this.tag.player = null;
        }
    
        if (this.el_ && this.el_.player) {
          this.el_.player = null;
        }
    
        if (this.tech_) {
          this.tech_.dispose();
        }
    
        _Component.prototype.dispose.call(this);
      };
    
      /**
       * Create the `Player`'s DOM element.
       *
       * @return {Element}
       *         The DOM element that gets created.
       */
    
    
      Player.prototype.createEl = function createEl$$1() {
        var tag = this.tag;
        var el = void 0;
        var playerElIngest = this.playerElIngest_ = tag.parentNode && tag.parentNode.hasAttribute && tag.parentNode.hasAttribute('data-vjs-player');
    
        if (playerElIngest) {
          el = this.el_ = tag.parentNode;
        } else {
          el = this.el_ = _Component.prototype.createEl.call(this, 'div');
        }
    
        // set tabindex to -1 so we could focus on the player element
        tag.setAttribute('tabindex', '-1');
    
        // Remove width/height attrs from tag so CSS can make it 100% width/height
        tag.removeAttribute('width');
        tag.removeAttribute('height');
    
        // Copy over all the attributes from the tag, including ID and class
        // ID will now reference player box, not the video tag
        var attrs = getAttributes(tag);
    
        Object.getOwnPropertyNames(attrs).forEach(function (attr) {
          // workaround so we don't totally break IE7
          // http://stackoverflow.com/questions/3653444/css-styles-not-applied-on-dynamic-elements-in-internet-explorer-7
          if (attr === 'class') {
            el.className += ' ' + attrs[attr];
          } else {
            el.setAttribute(attr, attrs[attr]);
          }
        });
    
        // Update tag id/class for use as HTML5 playback tech
        // Might think we should do this after embedding in container so .vjs-tech class
        // doesn't flash 100% width/height, but class only applies with .video-js parent
        tag.playerId = tag.id;
        tag.id += '_html5_api';
        tag.className = 'vjs-tech';
    
        // Make player findable on elements
        tag.player = el.player = this;
        // Default state of video is paused
        this.addClass('vjs-paused');
    
        // Add a style element in the player that we'll use to set the width/height
        // of the player in a way that's still overrideable by CSS, just like the
        // video element
        if (window_1.VIDEOJS_NO_DYNAMIC_STYLE !== true) {
          this.styleEl_ = createStyleElement('vjs-styles-dimensions');
          var defaultsStyleEl = $('.vjs-styles-defaults');
          var head = $('head');
    
          head.insertBefore(this.styleEl_, defaultsStyleEl ? defaultsStyleEl.nextSibling : head.firstChild);
        }
    
        // Pass in the width/height/aspectRatio options which will update the style el
        this.width(this.options_.width);
        this.height(this.options_.height);
        this.fluid(this.options_.fluid);
        this.aspectRatio(this.options_.aspectRatio);
    
        // Hide any links within the video/audio tag, because IE doesn't hide them completely.
        var links = tag.getElementsByTagName('a');
    
        for (var i = 0; i < links.length; i++) {
          var linkEl = links.item(i);
    
          addClass(linkEl, 'vjs-hidden');
          linkEl.setAttribute('hidden', 'hidden');
        }
    
        // insertElFirst seems to cause the networkState to flicker from 3 to 2, so
        // keep track of the original for later so we can know if the source originally failed
        tag.initNetworkState_ = tag.networkState;
    
        // Wrap video tag in div (el/box) container
        if (tag.parentNode && !playerElIngest) {
          tag.parentNode.insertBefore(el, tag);
        }
    
        // insert the tag as the first child of the player element
        // then manually add it to the children array so that this.addChild
        // will work properly for other components
        //
        // Breaks iPhone, fixed in HTML5 setup.
        prependTo(tag, el);
        this.children_.unshift(tag);
    
        // Set lang attr on player to ensure CSS :lang() in consistent with player
        // if it's been set to something different to the doc
        this.el_.setAttribute('lang', this.language_);
    
        this.el_ = el;
    
        return el;
      };
    
      /**
       * A getter/setter for the `Player`'s width.
       *
       * @param {number} [value]
       *        The value to set the `Player's width to.
       *
       * @return {number}
       *         The current width of the `Player` when getting.
       */
    
    
      Player.prototype.width = function width(value) {
        return this.dimension('width', value);
      };
    
      /**
       * A getter/setter for the `Player`'s height.
       *
       * @param {number} [value]
       *        The value to set the `Player's heigth to.
       *
       * @return {number}
       *         The current height of the `Player` when getting.
       */
    
    
      Player.prototype.height = function height(value) {
        return this.dimension('height', value);
      };
    
      /**
       * A getter/setter for the `Player`'s width & height.
       *
       * @param {string} dimension
       *        This string can be:
       *        - 'width'
       *        - 'height'
       *
       * @param {number} [value]
       *        Value for dimension specified in the first argument.
       *
       * @return {number}
       *         The dimension arguments value when getting (width/height).
       */
    
    
      Player.prototype.dimension = function dimension(_dimension, value) {
        var privDimension = _dimension + '_';
    
        if (value === undefined) {
          return this[privDimension] || 0;
        }
    
        if (value === '') {
          // If an empty string is given, reset the dimension to be automatic
          this[privDimension] = undefined;
        } else {
          var parsedVal = parseFloat(value);
    
          if (isNaN(parsedVal)) {
            log$1.error('Improper value "' + value + '" supplied for for ' + _dimension);
            return;
          }
    
          this[privDimension] = parsedVal;
        }
    
        this.updateStyleEl_();
      };
    
      /**
       * A getter/setter/toggler for the vjs-fluid `className` on the `Player`.
       *
       * @param {boolean} [bool]
       *        - A value of true adds the class.
       *        - A value of false removes the class.
       *        - No value will toggle the fluid class.
       *
       * @return {boolean|undefined}
       *         - The value of fluid when getting.
       *         - `undefined` when setting.
       */
    
    
      Player.prototype.fluid = function fluid(bool) {
        if (bool === undefined) {
          return !!this.fluid_;
        }
    
        this.fluid_ = !!bool;
    
        if (bool) {
          this.addClass('vjs-fluid');
        } else {
          this.removeClass('vjs-fluid');
        }
    
        this.updateStyleEl_();
      };
    
      /**
       * Get/Set the aspect ratio
       *
       * @param {string} [ratio]
       *        Aspect ratio for player
       *
       * @return {string|undefined}
       *         returns the current aspect ratio when getting
       */
    
      /**
       * A getter/setter for the `Player`'s aspect ratio.
       *
       * @param {string} [ratio]
       *        The value to set the `Player's aspect ratio to.
       *
       * @return {string|undefined}
       *         - The current aspect ratio of the `Player` when getting.
       *         - undefined when setting
       */
    
    
      Player.prototype.aspectRatio = function aspectRatio(ratio) {
        if (ratio === undefined) {
          return this.aspectRatio_;
        }
    
        // Check for width:height format
        if (!/^\d+\:\d+$/.test(ratio)) {
          throw new Error('Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.');
        }
        this.aspectRatio_ = ratio;
    
        // We're assuming if you set an aspect ratio you want fluid mode,
        // because in fixed mode you could calculate width and height yourself.
        this.fluid(true);
    
        this.updateStyleEl_();
      };
    
      /**
       * Update styles of the `Player` element (height, width and aspect ratio).
       *
       * @private
       * @listens Tech#loadedmetadata
       */
    
    
      Player.prototype.updateStyleEl_ = function updateStyleEl_() {
        if (window_1.VIDEOJS_NO_DYNAMIC_STYLE === true) {
          var _width = typeof this.width_ === 'number' ? this.width_ : this.options_.width;
          var _height = typeof this.height_ === 'number' ? this.height_ : this.options_.height;
          var techEl = this.tech_ && this.tech_.el();
    
          if (techEl) {
            if (_width >= 0) {
              techEl.width = _width;
            }
            if (_height >= 0) {
              techEl.height = _height;
            }
          }
    
          return;
        }
    
        var width = void 0;
        var height = void 0;
        var aspectRatio = void 0;
        var idClass = void 0;
    
        // The aspect ratio is either used directly or to calculate width and height.
        if (this.aspectRatio_ !== undefined && this.aspectRatio_ !== 'auto') {
          // Use any aspectRatio that's been specifically set
          aspectRatio = this.aspectRatio_;
        } else if (this.videoWidth() > 0) {
          // Otherwise try to get the aspect ratio from the video metadata
          aspectRatio = this.videoWidth() + ':' + this.videoHeight();
        } else {
          // Or use a default. The video element's is 2:1, but 16:9 is more common.
          aspectRatio = '16:9';
        }
    
        // Get the ratio as a decimal we can use to calculate dimensions
        var ratioParts = aspectRatio.split(':');
        var ratioMultiplier = ratioParts[1] / ratioParts[0];
    
        if (this.width_ !== undefined) {
          // Use any width that's been specifically set
          width = this.width_;
        } else if (this.height_ !== undefined) {
          // Or calulate the width from the aspect ratio if a height has been set
          width = this.height_ / ratioMultiplier;
        } else {
          // Or use the video's metadata, or use the video el's default of 300
          width = this.videoWidth() || 300;
        }
    
        if (this.height_ !== undefined) {
          // Use any height that's been specifically set
          height = this.height_;
        } else {
          // Otherwise calculate the height from the ratio and the width
          height = width * ratioMultiplier;
        }
    
        // Ensure the CSS class is valid by starting with an alpha character
        if (/^[^a-zA-Z]/.test(this.id())) {
          idClass = 'dimensions-' + this.id();
        } else {
          idClass = this.id() + '-dimensions';
        }
    
        // Ensure the right class is still on the player for the style element
        this.addClass(idClass);
    
        setTextContent(this.styleEl_, '\n      .' + idClass + ' {\n        width: ' + width + 'px;\n        height: ' + height + 'px;\n      }\n\n      .' + idClass + '.vjs-fluid {\n        padding-top: ' + ratioMultiplier * 100 + '%;\n      }\n    ');
      };
    
      /**
       * Load/Create an instance of playback {@link Tech} including element
       * and API methods. Then append the `Tech` element in `Player` as a child.
       *
       * @param {string} techName
       *        name of the playback technology
       *
       * @param {string} source
       *        video source
       *
       * @private
       */
    
    
      Player.prototype.loadTech_ = function loadTech_(techName, source) {
        var _this2 = this;
    
        // Pause and remove current playback technology
        if (this.tech_) {
          this.unloadTech_();
        }
    
        var titleTechName = toTitleCase(techName);
        var camelTechName = techName.charAt(0).toLowerCase() + techName.slice(1);
    
        // get rid of the HTML5 video tag as soon as we are using another tech
        if (titleTechName !== 'Html5' && this.tag) {
          Tech.getTech('Html5').disposeMediaElement(this.tag);
          this.tag.player = null;
          this.tag = null;
        }
    
        this.techName_ = titleTechName;
    
        // Turn off API access because we're loading a new tech that might load asynchronously
        this.isReady_ = false;
    
        // Grab tech-specific options from player options and add source and parent element to use.
        var techOptions = {
          source: source,
          'nativeControlsForTouch': this.options_.nativeControlsForTouch,
          'playerId': this.id(),
          'techId': this.id() + '_' + titleTechName + '_api',
          'autoplay': this.options_.autoplay,
          'playsinline': this.options_.playsinline,
          'preload': this.options_.preload,
          'loop': this.options_.loop,
          'muted': this.options_.muted,
          'poster': this.poster(),
          'language': this.language(),
          'playerElIngest': this.playerElIngest_ || false,
          'vtt.js': this.options_['vtt.js']
        };
    
        ALL.names.forEach(function (name$$1) {
          var props = ALL[name$$1];
    
          techOptions[props.getterName] = _this2[props.privateName];
        });
    
        assign(techOptions, this.options_[titleTechName]);
        assign(techOptions, this.options_[camelTechName]);
        assign(techOptions, this.options_[techName.toLowerCase()]);
    
        if (this.tag) {
          techOptions.tag = this.tag;
        }
    
        if (source && source.src === this.cache_.src && this.cache_.currentTime > 0) {
          techOptions.startTime = this.cache_.currentTime;
        }
    
        // Initialize tech instance
        var TechClass = Tech.getTech(techName);
    
        if (!TechClass) {
          throw new Error('No Tech named \'' + titleTechName + '\' exists! \'' + titleTechName + '\' should be registered using videojs.registerTech()\'');
        }
    
        this.tech_ = new TechClass(techOptions);
    
        // player.triggerReady is always async, so don't need this to be async
        this.tech_.ready(bind(this, this.handleTechReady_), true);
    
        textTrackConverter.jsonToTextTracks(this.textTracksJson_ || [], this.tech_);
    
        // Listen to all HTML5-defined events and trigger them on the player
        TECH_EVENTS_RETRIGGER.forEach(function (event) {
          _this2.on(_this2.tech_, event, _this2['handleTech' + toTitleCase(event) + '_']);
        });
        this.on(this.tech_, 'loadstart', this.handleTechLoadStart_);
        this.on(this.tech_, 'waiting', this.handleTechWaiting_);
        this.on(this.tech_, 'canplay', this.handleTechCanPlay_);
        this.on(this.tech_, 'canplaythrough', this.handleTechCanPlayThrough_);
        this.on(this.tech_, 'playing', this.handleTechPlaying_);
        this.on(this.tech_, 'ended', this.handleTechEnded_);
        this.on(this.tech_, 'seeking', this.handleTechSeeking_);
        this.on(this.tech_, 'seeked', this.handleTechSeeked_);
        this.on(this.tech_, 'play', this.handleTechPlay_);
        this.on(this.tech_, 'firstplay', this.handleTechFirstPlay_);
        this.on(this.tech_, 'pause', this.handleTechPause_);
        this.on(this.tech_, 'durationchange', this.handleTechDurationChange_);
        this.on(this.tech_, 'fullscreenchange', this.handleTechFullscreenChange_);
        this.on(this.tech_, 'error', this.handleTechError_);
        this.on(this.tech_, 'loadedmetadata', this.updateStyleEl_);
        this.on(this.tech_, 'posterchange', this.handleTechPosterChange_);
        this.on(this.tech_, 'textdata', this.handleTechTextData_);
    
        this.usingNativeControls(this.techGet_('controls'));
    
        if (this.controls() && !this.usingNativeControls()) {
          this.addTechControlsListeners_();
        }
    
        // Add the tech element in the DOM if it was not already there
        // Make sure to not insert the original video element if using Html5
        if (this.tech_.el().parentNode !== this.el() && (titleTechName !== 'Html5' || !this.tag)) {
          prependTo(this.tech_.el(), this.el());
        }
    
        // Get rid of the original video tag reference after the first tech is loaded
        if (this.tag) {
          this.tag.player = null;
          this.tag = null;
        }
      };
    
      /**
       * Unload and dispose of the current playback {@link Tech}.
       *
       * @private
       */
    
    
      Player.prototype.unloadTech_ = function unloadTech_() {
        var _this3 = this;
    
        // Save the current text tracks so that we can reuse the same text tracks with the next tech
        ALL.names.forEach(function (name$$1) {
          var props = ALL[name$$1];
    
          _this3[props.privateName] = _this3[props.getterName]();
        });
        this.textTracksJson_ = textTrackConverter.textTracksToJson(this.tech_);
    
        this.isReady_ = false;
    
        this.tech_.dispose();
    
        this.tech_ = false;
      };
    
      /**
       * Return a reference to the current {@link Tech}.
       * It will print a warning by default about the danger of using the tech directly
       * but any argument that is passed in will silence the warning.
       *
       * @param {*} [safety]
       *        Anything passed in to silence the warning
       *
       * @return {Tech}
       *         The Tech
       */
    
    
      Player.prototype.tech = function tech(safety) {
        if (safety === undefined) {
          log$1.warn(tsml(_templateObject$1));
        }
    
        return this.tech_;
      };
    
      /**
       * Set up click and touch listeners for the playback element
       *
       * - On desktops: a click on the video itself will toggle playback
       * - On mobile devices: a click on the video toggles controls
       *   which is done by toggling the user state between active and
       *   inactive
       * - A tap can signal that a user has become active or has become inactive
       *   e.g. a quick tap on an iPhone movie should reveal the controls. Another
       *   quick tap should hide them again (signaling the user is in an inactive
       *   viewing state)
       * - In addition to this, we still want the user to be considered inactive after
       *   a few seconds of inactivity.
       *
       * > Note: the only part of iOS interaction we can't mimic with this setup
       * is a touch and hold on the video element counting as activity in order to
       * keep the controls showing, but that shouldn't be an issue. A touch and hold
       * on any controls will still keep the user active
       *
       * @private
       */
    
    
      Player.prototype.addTechControlsListeners_ = function addTechControlsListeners_() {
        // Make sure to remove all the previous listeners in case we are called multiple times.
        this.removeTechControlsListeners_();
    
        // Some browsers (Chrome & IE) don't trigger a click on a flash swf, but do
        // trigger mousedown/up.
        // http://stackoverflow.com/questions/1444562/javascript-onclick-event-over-flash-object
        // Any touch events are set to block the mousedown event from happening
        this.on(this.tech_, 'mousedown', this.handleTechClick_);
    
        // If the controls were hidden we don't want that to change without a tap event
        // so we'll check if the controls were already showing before reporting user
        // activity
        this.on(this.tech_, 'touchstart', this.handleTechTouchStart_);
        this.on(this.tech_, 'touchmove', this.handleTechTouchMove_);
        this.on(this.tech_, 'touchend', this.handleTechTouchEnd_);
    
        // The tap listener needs to come after the touchend listener because the tap
        // listener cancels out any reportedUserActivity when setting userActive(false)
        this.on(this.tech_, 'tap', this.handleTechTap_);
      };
    
      /**
       * Remove the listeners used for click and tap controls. This is needed for
       * toggling to controls disabled, where a tap/touch should do nothing.
       *
       * @private
       */
    
    
      Player.prototype.removeTechControlsListeners_ = function removeTechControlsListeners_() {
        // We don't want to just use `this.off()` because there might be other needed
        // listeners added by techs that extend this.
        this.off(this.tech_, 'tap', this.handleTechTap_);
        this.off(this.tech_, 'touchstart', this.handleTechTouchStart_);
        this.off(this.tech_, 'touchmove', this.handleTechTouchMove_);
        this.off(this.tech_, 'touchend', this.handleTechTouchEnd_);
        this.off(this.tech_, 'mousedown', this.handleTechClick_);
      };
    
      /**
       * Player waits for the tech to be ready
       *
       * @private
       */
    
    
      Player.prototype.handleTechReady_ = function handleTechReady_() {
        this.triggerReady();
    
        // Keep the same volume as before
        if (this.cache_.volume) {
          this.techCall_('setVolume', this.cache_.volume);
        }
    
        // Look if the tech found a higher resolution poster while loading
        this.handleTechPosterChange_();
    
        // Update the duration if available
        this.handleTechDurationChange_();
    
        // Chrome and Safari both have issues with autoplay.
        // In Safari (5.1.1), when we move the video element into the container div, autoplay doesn't work.
        // In Chrome (15), if you have autoplay + a poster + no controls, the video gets hidden (but audio plays)
        // This fixes both issues. Need to wait for API, so it updates displays correctly
        if ((this.src() || this.currentSrc()) && this.tag && this.options_.autoplay && this.paused()) {
          try {
            // Chrome Fix. Fixed in Chrome v16.
            delete this.tag.poster;
          } catch (e) {
            log$1('deleting tag.poster throws in some browsers', e);
          }
          this.play();
        }
      };
    
      /**
       * Retrigger the `loadstart` event that was triggered by the {@link Tech}. This
       * function will also trigger {@link Player#firstplay} if it is the first loadstart
       * for a video.
       *
       * @fires Player#loadstart
       * @fires Player#firstplay
       * @listens Tech#loadstart
       * @private
       */
    
    
      Player.prototype.handleTechLoadStart_ = function handleTechLoadStart_() {
        // TODO: Update to use `emptied` event instead. See #1277.
    
        this.removeClass('vjs-ended');
        this.removeClass('vjs-seeking');
    
        // reset the error state
        this.error(null);
    
        // If it's already playing we want to trigger a firstplay event now.
        // The firstplay event relies on both the play and loadstart events
        // which can happen in any order for a new source
        if (!this.paused()) {
          /**
           * Fired when the user agent begins looking for media data
           *
           * @event Player#loadstart
           * @type {EventTarget~Event}
           */
          this.trigger('loadstart');
          this.trigger('firstplay');
        } else {
          // reset the hasStarted state
          this.hasStarted(false);
          this.trigger('loadstart');
        }
      };
    
      /**
       * Add/remove the vjs-has-started class
       *
       * @fires Player#firstplay
       *
       * @param {boolean} hasStarted
       *        - true: adds the class
       *        - false: remove the class
       *
       * @return {boolean}
       *         the boolean value of hasStarted
       */
    
    
      Player.prototype.hasStarted = function hasStarted(_hasStarted) {
        if (_hasStarted !== undefined) {
          // only update if this is a new value
          if (this.hasStarted_ !== _hasStarted) {
            this.hasStarted_ = _hasStarted;
            if (_hasStarted) {
              this.addClass('vjs-has-started');
              // trigger the firstplay event if this newly has played
              this.trigger('firstplay');
            } else {
              this.removeClass('vjs-has-started');
            }
          }
          return;
        }
        return !!this.hasStarted_;
      };
    
      /**
       * Fired whenever the media begins or resumes playback
       *
       * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-play}
       * @fires Player#play
       * @listens Tech#play
       * @private
       */
    
    
      Player.prototype.handleTechPlay_ = function handleTechPlay_() {
        this.removeClass('vjs-ended');
        this.removeClass('vjs-paused');
        this.addClass('vjs-playing');
    
        // hide the poster when the user hits play
        this.hasStarted(true);
        /**
         * Triggered whenever an {@link Tech#play} event happens. Indicates that
         * playback has started or resumed.
         *
         * @event Player#play
         * @type {EventTarget~Event}
         */
        this.trigger('play');
      };
    
      /**
       * Retrigger the `waiting` event that was triggered by the {@link Tech}.
       *
       * @fires Player#waiting
       * @listens Tech#waiting
       * @private
       */
    
    
      Player.prototype.handleTechWaiting_ = function handleTechWaiting_() {
        var _this4 = this;
    
        this.addClass('vjs-waiting');
        /**
         * A readyState change on the DOM element has caused playback to stop.
         *
         * @event Player#waiting
         * @type {EventTarget~Event}
         */
        this.trigger('waiting');
        this.one('timeupdate', function () {
          return _this4.removeClass('vjs-waiting');
        });
      };
    
      /**
       * Retrigger the `canplay` event that was triggered by the {@link Tech}.
       * > Note: This is not consistent between browsers. See #1351
       *
       * @fires Player#canplay
       * @listens Tech#canplay
       * @private
       */
    
    
      Player.prototype.handleTechCanPlay_ = function handleTechCanPlay_() {
        this.removeClass('vjs-waiting');
        /**
         * The media has a readyState of HAVE_FUTURE_DATA or greater.
         *
         * @event Player#canplay
         * @type {EventTarget~Event}
         */
        this.trigger('canplay');
      };
    
      /**
       * Retrigger the `canplaythrough` event that was triggered by the {@link Tech}.
       *
       * @fires Player#canplaythrough
       * @listens Tech#canplaythrough
       * @private
       */
    
    
      Player.prototype.handleTechCanPlayThrough_ = function handleTechCanPlayThrough_() {
        this.removeClass('vjs-waiting');
        /**
         * The media has a readyState of HAVE_ENOUGH_DATA or greater. This means that the
         * entire media file can be played without buffering.
         *
         * @event Player#canplaythrough
         * @type {EventTarget~Event}
         */
        this.trigger('canplaythrough');
      };
    
      /**
       * Retrigger the `playing` event that was triggered by the {@link Tech}.
       *
       * @fires Player#playing
       * @listens Tech#playing
       * @private
       */
    
    
      Player.prototype.handleTechPlaying_ = function handleTechPlaying_() {
        this.removeClass('vjs-waiting');
        /**
         * The media is no longer blocked from playback, and has started playing.
         *
         * @event Player#playing
         * @type {EventTarget~Event}
         */
        this.trigger('playing');
      };
    
      /**
       * Retrigger the `seeking` event that was triggered by the {@link Tech}.
       *
       * @fires Player#seeking
       * @listens Tech#seeking
       * @private
       */
    
    
      Player.prototype.handleTechSeeking_ = function handleTechSeeking_() {
        this.addClass('vjs-seeking');
        /**
         * Fired whenever the player is jumping to a new time
         *
         * @event Player#seeking
         * @type {EventTarget~Event}
         */
        this.trigger('seeking');
      };
    
      /**
       * Retrigger the `seeked` event that was triggered by the {@link Tech}.
       *
       * @fires Player#seeked
       * @listens Tech#seeked
       * @private
       */
    
    
      Player.prototype.handleTechSeeked_ = function handleTechSeeked_() {
        this.removeClass('vjs-seeking');
        /**
         * Fired when the player has finished jumping to a new time
         *
         * @event Player#seeked
         * @type {EventTarget~Event}
         */
        this.trigger('seeked');
      };
    
      /**
       * Retrigger the `firstplay` event that was triggered by the {@link Tech}.
       *
       * @fires Player#firstplay
       * @listens Tech#firstplay
       * @deprecated As of 6.0 firstplay event is deprecated.
       * @deprecated As of 6.0 passing the `starttime` option to the player and the firstplay event are deprecated.
       * @private
       */
    
    
      Player.prototype.handleTechFirstPlay_ = function handleTechFirstPlay_() {
        // If the first starttime attribute is specified
        // then we will start at the given offset in seconds
        if (this.options_.starttime) {
          log$1.warn('Passing the `starttime` option to the player will be deprecated in 6.0');
          this.currentTime(this.options_.starttime);
        }
    
        this.addClass('vjs-has-started');
        /**
         * Fired the first time a video is played. Not part of the HLS spec, and this is
         * probably not the best implementation yet, so use sparingly. If you don't have a
         * reason to prevent playback, use `myPlayer.one('play');` instead.
         *
         * @event Player#firstplay
         * @deprecated As of 6.0 firstplay event is deprecated.
         * @type {EventTarget~Event}
         */
        this.trigger('firstplay');
      };
    
      /**
       * Retrigger the `pause` event that was triggered by the {@link Tech}.
       *
       * @fires Player#pause
       * @listens Tech#pause
       * @private
       */
    
    
      Player.prototype.handleTechPause_ = function handleTechPause_() {
        this.removeClass('vjs-playing');
        this.addClass('vjs-paused');
        /**
         * Fired whenever the media has been paused
         *
         * @event Player#pause
         * @type {EventTarget~Event}
         */
        this.trigger('pause');
      };
    
      /**
       * Retrigger the `ended` event that was triggered by the {@link Tech}.
       *
       * @fires Player#ended
       * @listens Tech#ended
       * @private
       */
    
    
      Player.prototype.handleTechEnded_ = function handleTechEnded_() {
        this.addClass('vjs-ended');
        if (this.options_.loop) {
          this.currentTime(0);
          this.play();
        } else if (!this.paused()) {
          this.pause();
        }
    
        /**
         * Fired when the end of the media resource is reached (currentTime == duration)
         *
         * @event Player#ended
         * @type {EventTarget~Event}
         */
        this.trigger('ended');
      };
    
      /**
       * Fired when the duration of the media resource is first known or changed
       *
       * @listens Tech#durationchange
       * @private
       */
    
    
      Player.prototype.handleTechDurationChange_ = function handleTechDurationChange_() {
        this.duration(this.techGet_('duration'));
      };
    
      /**
       * Handle a click on the media element to play/pause
       *
       * @param {EventTarget~Event} event
       *        the event that caused this function to trigger
       *
       * @listens Tech#mousedown
       * @private
       */
    
    
      Player.prototype.handleTechClick_ = function handleTechClick_(event) {
        // We're using mousedown to detect clicks thanks to Flash, but mousedown
        // will also be triggered with right-clicks, so we need to prevent that
        if (event.button !== 0) {
          return;
        }
    
        // When controls are disabled a click should not toggle playback because
        // the click is considered a control
        if (this.controls()) {
          if (this.paused()) {
            this.play();
          } else {
            this.pause();
          }
        }
      };
    
      /**
       * Handle a tap on the media element. It will toggle the user
       * activity state, which hides and shows the controls.
       *
       * @listens Tech#tap
       * @private
       */
    
    
      Player.prototype.handleTechTap_ = function handleTechTap_() {
        this.userActive(!this.userActive());
      };
    
      /**
       * Handle touch to start
       *
       * @listens Tech#touchstart
       * @private
       */
    
    
      Player.prototype.handleTechTouchStart_ = function handleTechTouchStart_() {
        this.userWasActive = this.userActive();
      };
    
      /**
       * Handle touch to move
       *
       * @listens Tech#touchmove
       * @private
       */
    
    
      Player.prototype.handleTechTouchMove_ = function handleTechTouchMove_() {
        if (this.userWasActive) {
          this.reportUserActivity();
        }
      };
    
      /**
       * Handle touch to end
       *
       * @param {EventTarget~Event} event
       *        the touchend event that triggered
       *        this function
       *
       * @listens Tech#touchend
       * @private
       */
    
    
      Player.prototype.handleTechTouchEnd_ = function handleTechTouchEnd_(event) {
        // Stop the mouse events from also happening
        event.preventDefault();
      };
    
      /**
       * Fired when the player switches in or out of fullscreen mode
       *
       * @private
       * @listens Player#fullscreenchange
       */
    
    
      Player.prototype.handleFullscreenChange_ = function handleFullscreenChange_() {
        if (this.isFullscreen()) {
          this.addClass('vjs-fullscreen');
        } else {
          this.removeClass('vjs-fullscreen');
        }
      };
    
      /**
       * native click events on the SWF aren't triggered on IE11, Win8.1RT
       * use stageclick events triggered from inside the SWF instead
       *
       * @private
       * @listens stageclick
       */
    
    
      Player.prototype.handleStageClick_ = function handleStageClick_() {
        this.reportUserActivity();
      };
    
      /**
       * Handle Tech Fullscreen Change
       *
       * @param {EventTarget~Event} event
       *        the fullscreenchange event that triggered this function
       *
       * @param {Object} data
       *        the data that was sent with the event
       *
       * @private
       * @listens Tech#fullscreenchange
       * @fires Player#fullscreenchange
       */
    
    
      Player.prototype.handleTechFullscreenChange_ = function handleTechFullscreenChange_(event, data) {
        if (data) {
          this.isFullscreen(data.isFullscreen);
        }
        /**
         * Fired when going in and out of fullscreen.
         *
         * @event Player#fullscreenchange
         * @type {EventTarget~Event}
         */
        this.trigger('fullscreenchange');
      };
    
      /**
       * Fires when an error occurred during the loading of an audio/video.
       *
       * @private
       * @listens Tech#error
       */
    
    
      Player.prototype.handleTechError_ = function handleTechError_() {
        var error = this.tech_.error();
    
        this.error(error);
      };
    
      /**
       * Retrigger the `textdata` event that was triggered by the {@link Tech}.
       *
       * @fires Player#textdata
       * @listens Tech#textdata
       * @private
       */
    
    
      Player.prototype.handleTechTextData_ = function handleTechTextData_() {
        var data = null;
    
        if (arguments.length > 1) {
          data = arguments[1];
        }
    
        /**
         * Fires when we get a textdata event from tech
         *
         * @event Player#textdata
         * @type {EventTarget~Event}
         */
        this.trigger('textdata', data);
      };
    
      /**
       * Get object for cached values.
       *
       * @return {Object}
       *         get the current object cache
       */
    
    
      Player.prototype.getCache = function getCache() {
        return this.cache_;
      };
    
      /**
       * Pass values to the playback tech
       *
       * @param {string} [method]
       *        the method to call
       *
       * @param {Object} arg
       *        the argument to pass
       *
       * @private
       */
    
    
      Player.prototype.techCall_ = function techCall_(method, arg) {
        // If it's not ready yet, call method when it is
    
        this.ready(function () {
          if (method in allowedSetters) {
            return set$1(this.middleware_, this.tech_, method, arg);
          }
    
          try {
            if (this.tech_) {
              this.tech_[method](arg);
            }
          } catch (e) {
            log$1(e);
            throw e;
          }
        }, true);
      };
    
      /**
       * Get calls can't wait for the tech, and sometimes don't need to.
       *
       * @param {string} method
       *        Tech method
       *
       * @return {Function|undefined}
       *         the method or undefined
       *
       * @private
       */
    
    
      Player.prototype.techGet_ = function techGet_(method) {
        if (this.tech_ && this.tech_.isReady_) {
    
          if (method in allowedGetters) {
            return get$1(this.middleware_, this.tech_, method);
          }
    
          // Flash likes to die and reload when you hide or reposition it.
          // In these cases the object methods go away and we get errors.
          // When that happens we'll catch the errors and inform tech that it's not ready any more.
          try {
            return this.tech_[method]();
          } catch (e) {
            // When building additional tech libs, an expected method may not be defined yet
            if (this.tech_[method] === undefined) {
              log$1('Video.js: ' + method + ' method not defined for ' + this.techName_ + ' playback technology.', e);
    
              // When a method isn't available on the object it throws a TypeError
            } else if (e.name === 'TypeError') {
              log$1('Video.js: ' + method + ' unavailable on ' + this.techName_ + ' playback technology element.', e);
              this.tech_.isReady_ = false;
            } else {
              log$1(e);
            }
            throw e;
          }
        }
    
        return;
      };
    
      /**
       * start media playback
       *
       * @return {Promise|undefined}
       *         Returns a `Promise` if the browser returns one, for most browsers this will
       *         return undefined.
       */
    
    
      Player.prototype.play = function play() {
        if (this.changingSrc_) {
          this.ready(function () {
            var retval = this.techGet_('play');
    
            // silence errors (unhandled promise from play)
            if (retval !== undefined && typeof retval.then === 'function') {
              retval.then(null, function (e) {});
            }
          });
    
          // Only calls the tech's play if we already have a src loaded
        } else if (this.isReady_ && (this.src() || this.currentSrc())) {
          return this.techGet_('play');
        } else {
          this.ready(function () {
            this.tech_.one('loadstart', function () {
              var retval = this.play();
    
              // silence errors (unhandled promise from play)
              if (retval !== undefined && typeof retval.then === 'function') {
                retval.then(null, function (e) {});
              }
            });
          });
        }
      };
    
      /**
       * Pause the video playback
       *
       * @return {Player}
       *         A reference to the player object this function was called on
       */
    
    
      Player.prototype.pause = function pause() {
        this.techCall_('pause');
      };
    
      /**
       * Check if the player is paused or has yet to play
       *
       * @return {boolean}
       *         - false: if the media is currently playing
       *         - true: if media is not currently playing
       */
    
    
      Player.prototype.paused = function paused() {
        // The initial state of paused should be true (in Safari it's actually false)
        return this.techGet_('paused') === false ? false : true;
      };
    
      /**
       * Get a TimeRange object representing the current ranges of time that the user
       * has played.
       *
       * @return {TimeRange}
       *         A time range object that represents all the increments of time that have
       *         been played.
       */
    
    
      Player.prototype.played = function played() {
        return this.techGet_('played') || createTimeRanges(0, 0);
      };
    
      /**
       * Returns whether or not the user is "scrubbing". Scrubbing is
       * when the user has clicked the progress bar handle and is
       * dragging it along the progress bar.
       *
       * @param {boolean} [isScrubbing]
       *        wether the user is or is not scrubbing
       *
       * @return {boolean}
       *         The value of scrubbing when getting
       */
    
    
      Player.prototype.scrubbing = function scrubbing(isScrubbing) {
        if (typeof isScrubbing === 'undefined') {
          return this.scrubbing_;
        }
        this.scrubbing_ = !!isScrubbing;
    
        if (isScrubbing) {
          this.addClass('vjs-scrubbing');
        } else {
          this.removeClass('vjs-scrubbing');
        }
      };
    
      /**
       * Get or set the current time (in seconds)
       *
       * @param {number|string} [seconds]
       *        The time to seek to in seconds
       *
       * @return {number}
       *         - the current time in seconds when getting
       */
    
    
      Player.prototype.currentTime = function currentTime(seconds) {
        if (typeof seconds !== 'undefined') {
          this.techCall_('setCurrentTime', seconds);
          return;
        }
    
        // cache last currentTime and return. default to 0 seconds
        //
        // Caching the currentTime is meant to prevent a massive amount of reads on the tech's
        // currentTime when scrubbing, but may not provide much performance benefit afterall.
        // Should be tested. Also something has to read the actual current time or the cache will
        // never get updated.
        this.cache_.currentTime = this.techGet_('currentTime') || 0;
        return this.cache_.currentTime;
      };
    
      /**
       * Normally gets the length in time of the video in seconds;
       * in all but the rarest use cases an argument will NOT be passed to the method
       *
       * > **NOTE**: The video must have started loading before the duration can be
       * known, and in the case of Flash, may not be known until the video starts
       * playing.
       *
       * @fires Player#durationchange
       *
       * @param {number} [seconds]
       *        The duration of the video to set in seconds
       *
       * @return {number}
       *         - The duration of the video in seconds when getting
       */
    
    
      Player.prototype.duration = function duration(seconds) {
        if (seconds === undefined) {
          // return NaN if the duration is not known
          return this.cache_.duration !== undefined ? this.cache_.duration : NaN;
        }
    
        seconds = parseFloat(seconds);
    
        // Standardize on Inifity for signaling video is live
        if (seconds < 0) {
          seconds = Infinity;
        }
    
        if (seconds !== this.cache_.duration) {
          // Cache the last set value for optimized scrubbing (esp. Flash)
          this.cache_.duration = seconds;
    
          if (seconds === Infinity) {
            this.addClass('vjs-live');
          } else {
            this.removeClass('vjs-live');
          }
          /**
           * @event Player#durationchange
           * @type {EventTarget~Event}
           */
          this.trigger('durationchange');
        }
      };
    
      /**
       * Calculates how much time is left in the video. Not part
       * of the native video API.
       *
       * @return {number}
       *         The time remaining in seconds
       */
    
    
      Player.prototype.remainingTime = function remainingTime() {
        return this.duration() - this.currentTime();
      };
    
      //
      // Kind of like an array of portions of the video that have been downloaded.
    
      /**
       * Get a TimeRange object with an array of the times of the video
       * that have been downloaded. If you just want the percent of the
       * video that's been downloaded, use bufferedPercent.
       *
       * @see [Buffered Spec]{@link http://dev.w3.org/html5/spec/video.html#dom-media-buffered}
       *
       * @return {TimeRange}
       *         A mock TimeRange object (following HTML spec)
       */
    
    
      Player.prototype.buffered = function buffered() {
        var buffered = this.techGet_('buffered');
    
        if (!buffered || !buffered.length) {
          buffered = createTimeRanges(0, 0);
        }
    
        return buffered;
      };
    
      /**
       * Get the percent (as a decimal) of the video that's been downloaded.
       * This method is not a part of the native HTML video API.
       *
       * @return {number}
       *         A decimal between 0 and 1 representing the percent
       *         that is bufferred 0 being 0% and 1 being 100%
       */
    
    
      Player.prototype.bufferedPercent = function bufferedPercent$$1() {
        return bufferedPercent(this.buffered(), this.duration());
      };
    
      /**
       * Get the ending time of the last buffered time range
       * This is used in the progress bar to encapsulate all time ranges.
       *
       * @return {number}
       *         The end of the last buffered time range
       */
    
    
      Player.prototype.bufferedEnd = function bufferedEnd() {
        var buffered = this.buffered();
        var duration = this.duration();
        var end = buffered.end(buffered.length - 1);
    
        if (end > duration) {
          end = duration;
        }
    
        return end;
      };
    
      /**
       * Get or set the current volume of the media
       *
       * @param  {number} [percentAsDecimal]
       *         The new volume as a decimal percent:
       *         - 0 is muted/0%/off
       *         - 1.0 is 100%/full
       *         - 0.5 is half volume or 50%
       *
       * @return {number}
       *         The current volume as a percent when getting
       */
    
    
      Player.prototype.volume = function volume(percentAsDecimal) {
        var vol = void 0;
    
        if (percentAsDecimal !== undefined) {
          // Force value to between 0 and 1
          vol = Math.max(0, Math.min(1, parseFloat(percentAsDecimal)));
          this.cache_.volume = vol;
          this.techCall_('setVolume', vol);
    
          if (vol > 0) {
            this.lastVolume_(vol);
          }
    
          return;
        }
    
        // Default to 1 when returning current volume.
        vol = parseFloat(this.techGet_('volume'));
        return isNaN(vol) ? 1 : vol;
      };
    
      /**
       * Get the current muted state, or turn mute on or off
       *
       * @param {boolean} [muted]
       *        - true to mute
       *        - false to unmute
       *
       * @return {boolean}
       *         - true if mute is on and getting
       *         - false if mute is off and getting
       */
    
    
      Player.prototype.muted = function muted(_muted) {
        if (_muted !== undefined) {
          this.techCall_('setMuted', _muted);
          return;
        }
        return this.techGet_('muted') || false;
      };
    
      /**
       * Get the current defaultMuted state, or turn defaultMuted on or off. defaultMuted
       * indicates the state of muted on intial playback.
       *
       * ```js
       *   var myPlayer = videojs('some-player-id');
       *
       *   myPlayer.src("http://www.example.com/path/to/video.mp4");
       *
       *   // get, should be false
       *   console.log(myPlayer.defaultMuted());
       *   // set to true
       *   myPlayer.defaultMuted(true);
       *   // get should be true
       *   console.log(myPlayer.defaultMuted());
       * ```
       *
       * @param {boolean} [defaultMuted]
       *        - true to mute
       *        - false to unmute
       *
       * @return {boolean|Player}
       *         - true if defaultMuted is on and getting
       *         - false if defaultMuted is off and getting
       *         - A reference to the current player when setting
       */
    
    
      Player.prototype.defaultMuted = function defaultMuted(_defaultMuted) {
        if (_defaultMuted !== undefined) {
          return this.techCall_('setDefaultMuted', _defaultMuted);
        }
        return this.techGet_('defaultMuted') || false;
      };
    
      /**
       * Get the last volume, or set it
       *
       * @param  {number} [percentAsDecimal]
       *         The new last volume as a decimal percent:
       *         - 0 is muted/0%/off
       *         - 1.0 is 100%/full
       *         - 0.5 is half volume or 50%
       *
       * @return {number}
       *         the current value of lastVolume as a percent when getting
       *
       * @private
       */
    
    
      Player.prototype.lastVolume_ = function lastVolume_(percentAsDecimal) {
        if (percentAsDecimal !== undefined && percentAsDecimal !== 0) {
          this.cache_.lastVolume = percentAsDecimal;
          return;
        }
        return this.cache_.lastVolume;
      };
    
      /**
       * Check if current tech can support native fullscreen
       * (e.g. with built in controls like iOS, so not our flash swf)
       *
       * @return {boolean}
       *         if native fullscreen is supported
       */
    
    
      Player.prototype.supportsFullScreen = function supportsFullScreen() {
        return this.techGet_('supportsFullScreen') || false;
      };
    
      /**
       * Check if the player is in fullscreen mode or tell the player that it
       * is or is not in fullscreen mode.
       *
       * > NOTE: As of the latest HTML5 spec, isFullscreen is no longer an official
       * property and instead document.fullscreenElement is used. But isFullscreen is
       * still a valuable property for internal player workings.
       *
       * @param  {boolean} [isFS]
       *         Set the players current fullscreen state
       *
       * @return {boolean}
       *         - true if fullscreen is on and getting
       *         - false if fullscreen is off and getting
       */
    
    
      Player.prototype.isFullscreen = function isFullscreen(isFS) {
        if (isFS !== undefined) {
          this.isFullscreen_ = !!isFS;
          return;
        }
        return !!this.isFullscreen_;
      };
    
      /**
       * Increase the size of the video to full screen
       * In some browsers, full screen is not supported natively, so it enters
       * "full window mode", where the video fills the browser window.
       * In browsers and devices that support native full screen, sometimes the
       * browser's default controls will be shown, and not the Video.js custom skin.
       * This includes most mobile devices (iOS, Android) and older versions of
       * Safari.
       *
       * @fires Player#fullscreenchange
       */
    
    
      Player.prototype.requestFullscreen = function requestFullscreen() {
        var fsApi = FullscreenApi;
    
        this.isFullscreen(true);
    
        if (fsApi.requestFullscreen) {
          // the browser supports going fullscreen at the element level so we can
          // take the controls fullscreen as well as the video
    
          // Trigger fullscreenchange event after change
          // We have to specifically add this each time, and remove
          // when canceling fullscreen. Otherwise if there's multiple
          // players on a page, they would all be reacting to the same fullscreen
          // events
          on(document_1, fsApi.fullscreenchange, bind(this, function documentFullscreenChange(e) {
            this.isFullscreen(document_1[fsApi.fullscreenElement]);
    
            // If cancelling fullscreen, remove event listener.
            if (this.isFullscreen() === false) {
              off(document_1, fsApi.fullscreenchange, documentFullscreenChange);
            }
            /**
             * @event Player#fullscreenchange
             * @type {EventTarget~Event}
             */
            this.trigger('fullscreenchange');
          }));
    
          this.el_[fsApi.requestFullscreen]();
        } else if (this.tech_.supportsFullScreen()) {
          // we can't take the video.js controls fullscreen but we can go fullscreen
          // with native controls
          this.techCall_('enterFullScreen');
        } else {
          // fullscreen isn't supported so we'll just stretch the video element to
          // fill the viewport
          this.enterFullWindow();
          /**
           * @event Player#fullscreenchange
           * @type {EventTarget~Event}
           */
          this.trigger('fullscreenchange');
        }
      };
    
      /**
       * Return the video to its normal size after having been in full screen mode
       *
       * @fires Player#fullscreenchange
       */
    
    
      Player.prototype.exitFullscreen = function exitFullscreen() {
        var fsApi = FullscreenApi;
    
        this.isFullscreen(false);
    
        // Check for browser element fullscreen support
        if (fsApi.requestFullscreen) {
          document_1[fsApi.exitFullscreen]();
        } else if (this.tech_.supportsFullScreen()) {
          this.techCall_('exitFullScreen');
        } else {
          this.exitFullWindow();
          /**
           * @event Player#fullscreenchange
           * @type {EventTarget~Event}
           */
          this.trigger('fullscreenchange');
        }
      };
    
      /**
       * When fullscreen isn't supported we can stretch the
       * video container to as wide as the browser will let us.
       *
       * @fires Player#enterFullWindow
       */
    
    
      Player.prototype.enterFullWindow = function enterFullWindow() {
        this.isFullWindow = true;
    
        // Storing original doc overflow value to return to when fullscreen is off
        this.docOrigOverflow = document_1.documentElement.style.overflow;
    
        // Add listener for esc key to exit fullscreen
        on(document_1, 'keydown', bind(this, this.fullWindowOnEscKey));
    
        // Hide any scroll bars
        document_1.documentElement.style.overflow = 'hidden';
    
        // Apply fullscreen styles
        addClass(document_1.body, 'vjs-full-window');
    
        /**
         * @event Player#enterFullWindow
         * @type {EventTarget~Event}
         */
        this.trigger('enterFullWindow');
      };
    
      /**
       * Check for call to either exit full window or
       * full screen on ESC key
       *
       * @param {string} event
       *        Event to check for key press
       */
    
    
      Player.prototype.fullWindowOnEscKey = function fullWindowOnEscKey(event) {
        if (event.keyCode === 27) {
          if (this.isFullscreen() === true) {
            this.exitFullscreen();
          } else {
            this.exitFullWindow();
          }
        }
      };
    
      /**
       * Exit full window
       *
       * @fires Player#exitFullWindow
       */
    
    
      Player.prototype.exitFullWindow = function exitFullWindow() {
        this.isFullWindow = false;
        off(document_1, 'keydown', this.fullWindowOnEscKey);
    
        // Unhide scroll bars.
        document_1.documentElement.style.overflow = this.docOrigOverflow;
    
        // Remove fullscreen styles
        removeClass(document_1.body, 'vjs-full-window');
    
        // Resize the box, controller, and poster to original sizes
        // this.positionAll();
        /**
         * @event Player#exitFullWindow
         * @type {EventTarget~Event}
         */
        this.trigger('exitFullWindow');
      };
    
      /**
       * Check whether the player can play a given mimetype
       *
       * @see https://www.w3.org/TR/2011/WD-html5-20110113/video.html#dom-navigator-canplaytype
       *
       * @param {string} type
       *        The mimetype to check
       *
       * @return {string}
       *         'probably', 'maybe', or '' (empty string)
       */
    
    
      Player.prototype.canPlayType = function canPlayType(type) {
        var can = void 0;
    
        // Loop through each playback technology in the options order
        for (var i = 0, j = this.options_.techOrder; i < j.length; i++) {
          var techName = j[i];
          var tech = Tech.getTech(techName);
    
          // Support old behavior of techs being registered as components.
          // Remove once that deprecated behavior is removed.
          if (!tech) {
            tech = Component.getComponent(techName);
          }
    
          // Check if the current tech is defined before continuing
          if (!tech) {
            log$1.error('The "' + techName + '" tech is undefined. Skipped browser support check for that tech.');
            continue;
          }
    
          // Check if the browser supports this technology
          if (tech.isSupported()) {
            can = tech.canPlayType(type);
    
            if (can) {
              return can;
            }
          }
        }
    
        return '';
      };
    
      /**
       * Select source based on tech-order or source-order
       * Uses source-order selection if `options.sourceOrder` is truthy. Otherwise,
       * defaults to tech-order selection
       *
       * @param {Array} sources
       *        The sources for a media asset
       *
       * @return {Object|boolean}
       *         Object of source and tech order or false
       */
    
    
      Player.prototype.selectSource = function selectSource(sources) {
        var _this5 = this;
    
        // Get only the techs specified in `techOrder` that exist and are supported by the
        // current platform
        var techs = this.options_.techOrder.map(function (techName) {
          return [techName, Tech.getTech(techName)];
        }).filter(function (_ref) {
          var techName = _ref[0],
              tech = _ref[1];
    
          // Check if the current tech is defined before continuing
          if (tech) {
            // Check if the browser supports this technology
            return tech.isSupported();
          }
    
          log$1.error('The "' + techName + '" tech is undefined. Skipped browser support check for that tech.');
          return false;
        });
    
        // Iterate over each `innerArray` element once per `outerArray` element and execute
        // `tester` with both. If `tester` returns a non-falsy value, exit early and return
        // that value.
        var findFirstPassingTechSourcePair = function findFirstPassingTechSourcePair(outerArray, innerArray, tester) {
          var found = void 0;
    
          outerArray.some(function (outerChoice) {
            return innerArray.some(function (innerChoice) {
              found = tester(outerChoice, innerChoice);
    
              if (found) {
                return true;
              }
            });
          });
    
          return found;
        };
    
        var foundSourceAndTech = void 0;
        var flip = function flip(fn) {
          return function (a, b) {
            return fn(b, a);
          };
        };
        var finder = function finder(_ref2, source) {
          var techName = _ref2[0],
              tech = _ref2[1];
    
          if (tech.canPlaySource(source, _this5.options_[techName.toLowerCase()])) {
            return { source: source, tech: techName };
          }
        };
    
        // Depending on the truthiness of `options.sourceOrder`, we swap the order of techs and sources
        // to select from them based on their priority.
        if (this.options_.sourceOrder) {
          // Source-first ordering
          foundSourceAndTech = findFirstPassingTechSourcePair(sources, techs, flip(finder));
        } else {
          // Tech-first ordering
          foundSourceAndTech = findFirstPassingTechSourcePair(techs, sources, finder);
        }
    
        return foundSourceAndTech || false;
      };
    
      /**
       * Get or set the video source.
       *
       * @param {Tech~SourceObject|Tech~SourceObject[]|string} [source]
       *        A SourceObject, an array of SourceObjects, or a string referencing
       *        a URL to a media source. It is _highly recommended_ that an object
       *        or array of objects is used here, so that source selection
       *        algorithms can take the `type` into account.
       *
       *        If not provided, this method acts as a getter.
       *
       * @return {string|undefined}
       *         If the `source` argument is missing, returns the current source
       *         URL. Otherwise, returns nothing/undefined.
       */
    
    
      Player.prototype.src = function src(source) {
        var _this6 = this;
    
        // getter usage
        if (typeof source === 'undefined') {
          return this.cache_.src;
        }
        // filter out invalid sources and turn our source into
        // an array of source objects
        var sources = filterSource(source);
    
        // if a source was passed in then it is invalid because
        // it was filtered to a zero length Array. So we have to
        // show an error
        if (!sources.length) {
          this.setTimeout(function () {
            this.error({ code: 4, message: this.localize(this.options_.notSupportedMessage) });
          }, 0);
          return;
        }
    
        // intial sources
        this.cache_.sources = sources;
        this.changingSrc_ = true;
    
        // intial source
        this.cache_.source = sources[0];
    
        // middlewareSource is the source after it has been changed by middleware
        setSource(this, sources[0], function (middlewareSource, mws) {
          _this6.middleware_ = mws;
    
          var err = _this6.src_(middlewareSource);
    
          if (err) {
            if (sources.length > 1) {
              return _this6.src(sources.slice(1));
            }
    
            // We need to wrap this in a timeout to give folks a chance to add error event handlers
            _this6.setTimeout(function () {
              this.error({ code: 4, message: this.localize(this.options_.notSupportedMessage) });
            }, 0);
    
            // we could not find an appropriate tech, but let's still notify the delegate that this is it
            // this needs a better comment about why this is needed
            _this6.triggerReady();
    
            return;
          }
    
          _this6.changingSrc_ = false;
          // video element listed source
          _this6.cache_.src = middlewareSource.src;
    
          setTech(mws, _this6.tech_);
        });
      };
    
      /**
       * Set the source object on the tech, returns a boolean that indicates wether
       * there is a tech that can play the source or not
       *
       * @param {Tech~SourceObject} source
       *        The source object to set on the Tech
       *
       * @return {Boolean}
       *         - True if there is no Tech to playback this source
       *         - False otherwise
       *
       * @private
       */
    
    
      Player.prototype.src_ = function src_(source) {
        var sourceTech = this.selectSource([source]);
    
        if (!sourceTech) {
          return true;
        }
    
        if (!titleCaseEquals(sourceTech.tech, this.techName_)) {
          this.changingSrc_ = true;
    
          // load this technology with the chosen source
          this.loadTech_(sourceTech.tech, sourceTech.source);
          return false;
        }
    
        // wait until the tech is ready to set the source
        this.ready(function () {
    
          // The setSource tech method was added with source handlers
          // so older techs won't support it
          // We need to check the direct prototype for the case where subclasses
          // of the tech do not support source handlers
          if (this.tech_.constructor.prototype.hasOwnProperty('setSource')) {
            this.techCall_('setSource', source);
          } else {
            this.techCall_('src', source.src);
          }
    
          if (this.options_.preload === 'auto') {
            this.load();
          }
    
          if (this.options_.autoplay) {
            this.play();
          }
    
          // Set the source synchronously if possible (#2326)
        }, true);
    
        return false;
      };
    
      /**
       * Begin loading the src data.
       */
    
    
      Player.prototype.load = function load() {
        this.techCall_('load');
      };
    
      /**
       * Reset the player. Loads the first tech in the techOrder,
       * and calls `reset` on the tech`.
       */
    
    
      Player.prototype.reset = function reset() {
        this.loadTech_(this.options_.techOrder[0], null);
        this.techCall_('reset');
      };
    
      /**
       * Returns all of the current source objects.
       *
       * @return {Tech~SourceObject[]}
       *         The current source objects
       */
    
    
      Player.prototype.currentSources = function currentSources() {
        var source = this.currentSource();
        var sources = [];
    
        // assume `{}` or `{ src }`
        if (Object.keys(source).length !== 0) {
          sources.push(source);
        }
    
        return this.cache_.sources || sources;
      };
    
      /**
       * Returns the current source object.
       *
       * @return {Tech~SourceObject}
       *         The current source object
       */
    
    
      Player.prototype.currentSource = function currentSource() {
        return this.cache_.source || {};
      };
    
      /**
       * Returns the fully qualified URL of the current source value e.g. http://mysite.com/video.mp4
       * Can be used in conjuction with `currentType` to assist in rebuilding the current source object.
       *
       * @return {string}
       *         The current source
       */
    
    
      Player.prototype.currentSrc = function currentSrc() {
        return this.currentSource() && this.currentSource().src || '';
      };
    
      /**
       * Get the current source type e.g. video/mp4
       * This can allow you rebuild the current source object so that you could load the same
       * source and tech later
       *
       * @return {string}
       *         The source MIME type
       */
    
    
      Player.prototype.currentType = function currentType() {
        return this.currentSource() && this.currentSource().type || '';
      };
    
      /**
       * Get or set the preload attribute
       *
       * @param {boolean} [value]
       *        - true means that we should preload
       *        - false maens that we should not preload
       *
       * @return {string}
       *         The preload attribute value when getting
       */
    
    
      Player.prototype.preload = function preload(value) {
        if (value !== undefined) {
          this.techCall_('setPreload', value);
          this.options_.preload = value;
          return;
        }
        return this.techGet_('preload');
      };
    
      /**
       * Get or set the autoplay attribute.
       *
       * @param {boolean} [value]
       *        - true means that we should autoplay
       *        - false means that we should not autoplay
       *
       * @return {string}
       *         The current value of autoplay when getting
       */
    
    
      Player.prototype.autoplay = function autoplay(value) {
        if (value !== undefined) {
          this.techCall_('setAutoplay', value);
          this.options_.autoplay = value;
          return;
        }
        return this.techGet_('autoplay', value);
      };
    
      /**
       * Set or unset the playsinline attribute.
       * Playsinline tells the browser that non-fullscreen playback is preferred.
       *
       * @param {boolean} [value]
       *        - true means that we should try to play inline by default
       *        - false means that we should use the browser's default playback mode,
       *          which in most cases is inline. iOS Safari is a notable exception
       *          and plays fullscreen by default.
       *
       * @return {string|Player}
       *         - the current value of playsinline
       *         - the player when setting
       *
       * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}
       */
    
    
      Player.prototype.playsinline = function playsinline(value) {
        if (value !== undefined) {
          this.techCall_('setPlaysinline', value);
          this.options_.playsinline = value;
          return this;
        }
        return this.techGet_('playsinline');
      };
    
      /**
       * Get or set the loop attribute on the video element.
       *
       * @param {boolean} [value]
       *        - true means that we should loop the video
       *        - false means that we should not loop the video
       *
       * @return {string}
       *         The current value of loop when getting
       */
    
    
      Player.prototype.loop = function loop(value) {
        if (value !== undefined) {
          this.techCall_('setLoop', value);
          this.options_.loop = value;
          return;
        }
        return this.techGet_('loop');
      };
    
      /**
       * Get or set the poster image source url
       *
       * @fires Player#posterchange
       *
       * @param {string} [src]
       *        Poster image source URL
       *
       * @return {string}
       *         The current value of poster when getting
       */
    
    
      Player.prototype.poster = function poster(src) {
        if (src === undefined) {
          return this.poster_;
        }
    
        // The correct way to remove a poster is to set as an empty string
        // other falsey values will throw errors
        if (!src) {
          src = '';
        }
    
        // update the internal poster variable
        this.poster_ = src;
    
        // update the tech's poster
        this.techCall_('setPoster', src);
    
        // alert components that the poster has been set
        /**
         * This event fires when the poster image is changed on the player.
         *
         * @event Player#posterchange
         * @type {EventTarget~Event}
         */
        this.trigger('posterchange');
      };
    
      /**
       * Some techs (e.g. YouTube) can provide a poster source in an
       * asynchronous way. We want the poster component to use this
       * poster source so that it covers up the tech's controls.
       * (YouTube's play button). However we only want to use this
       * source if the player user hasn't set a poster through
       * the normal APIs.
       *
       * @fires Player#posterchange
       * @listens Tech#posterchange
       * @private
       */
    
    
      Player.prototype.handleTechPosterChange_ = function handleTechPosterChange_() {
        if (!this.poster_ && this.tech_ && this.tech_.poster) {
          this.poster_ = this.tech_.poster() || '';
    
          // Let components know the poster has changed
          this.trigger('posterchange');
        }
      };
    
      /**
       * Get or set whether or not the controls are showing.
       *
       * @fires Player#controlsenabled
       *
       * @param {boolean} [bool]
       *        - true to turn controls on
       *        - false to turn controls off
       *
       * @return {boolean}
       *         The current value of controls when getting
       */
    
    
      Player.prototype.controls = function controls(bool) {
        if (bool !== undefined) {
          bool = !!bool;
    
          // Don't trigger a change event unless it actually changed
          if (this.controls_ !== bool) {
            this.controls_ = bool;
    
            if (this.usingNativeControls()) {
              this.techCall_('setControls', bool);
            }
    
            if (bool) {
              this.removeClass('vjs-controls-disabled');
              this.addClass('vjs-controls-enabled');
              /**
               * @event Player#controlsenabled
               * @type {EventTarget~Event}
               */
              this.trigger('controlsenabled');
    
              if (!this.usingNativeControls()) {
                this.addTechControlsListeners_();
              }
            } else {
              this.removeClass('vjs-controls-enabled');
              this.addClass('vjs-controls-disabled');
              /**
               * @event Player#controlsdisabled
               * @type {EventTarget~Event}
               */
              this.trigger('controlsdisabled');
    
              if (!this.usingNativeControls()) {
                this.removeTechControlsListeners_();
              }
            }
          }
          return;
        }
        return !!this.controls_;
      };
    
      /**
       * Toggle native controls on/off. Native controls are the controls built into
       * devices (e.g. default iPhone controls), Flash, or other techs
       * (e.g. Vimeo Controls)
       * **This should only be set by the current tech, because only the tech knows
       * if it can support native controls**
       *
       * @fires Player#usingnativecontrols
       * @fires Player#usingcustomcontrols
       *
       * @param {boolean} [bool]
       *        - true to turn native controls on
       *        - false to turn native controls off
       *
       * @return {boolean}
       *         The current value of native controls when getting
       */
    
    
      Player.prototype.usingNativeControls = function usingNativeControls(bool) {
        if (bool !== undefined) {
          bool = !!bool;
    
          // Don't trigger a change event unless it actually changed
          if (this.usingNativeControls_ !== bool) {
            this.usingNativeControls_ = bool;
            if (bool) {
              this.addClass('vjs-using-native-controls');
    
              /**
               * player is using the native device controls
               *
               * @event Player#usingnativecontrols
               * @type {EventTarget~Event}
               */
              this.trigger('usingnativecontrols');
            } else {
              this.removeClass('vjs-using-native-controls');
    
              /**
               * player is using the custom HTML controls
               *
               * @event Player#usingcustomcontrols
               * @type {EventTarget~Event}
               */
              this.trigger('usingcustomcontrols');
            }
          }
          return;
        }
        return !!this.usingNativeControls_;
      };
    
      /**
       * Set or get the current MediaError
       *
       * @fires Player#error
       *
       * @param  {MediaError|string|number} [err]
       *         A MediaError or a string/number to be turned
       *         into a MediaError
       *
       * @return {MediaError|null}
       *         The current MediaError when getting (or null)
       */
    
    
      Player.prototype.error = function error(err) {
        if (err === undefined) {
          return this.error_ || null;
        }
    
        // restoring to default
        if (err === null) {
          this.error_ = err;
          this.removeClass('vjs-error');
          if (this.errorDisplay) {
            this.errorDisplay.close();
          }
          return;
        }
    
        this.error_ = new MediaError(err);
    
        // add the vjs-error classname to the player
        this.addClass('vjs-error');
    
        // log the name of the error type and any message
        // ie8 just logs "[object object]" if you just log the error object
        log$1.error('(CODE:' + this.error_.code + ' ' + MediaError.errorTypes[this.error_.code] + ')', this.error_.message, this.error_);
    
        /**
         * @event Player#error
         * @type {EventTarget~Event}
         */
        this.trigger('error');
    
        return;
      };
    
      /**
       * Report user activity
       *
       * @param {Object} event
       *        Event object
       */
    
    
      Player.prototype.reportUserActivity = function reportUserActivity(event) {
        this.userActivity_ = true;
      };
    
      /**
       * Get/set if user is active
       *
       * @fires Player#useractive
       * @fires Player#userinactive
       *
       * @param {boolean} [bool]
       *        - true if the user is active
       *        - false if the user is inactive
       *
       * @return {boolean}
       *         The current value of userActive when getting
       */
    
    
      Player.prototype.userActive = function userActive(bool) {
        if (bool !== undefined) {
          bool = !!bool;
          if (bool !== this.userActive_) {
            this.userActive_ = bool;
            if (bool) {
              // If the user was inactive and is now active we want to reset the
              // inactivity timer
              this.userActivity_ = true;
              this.removeClass('vjs-user-inactive');
              this.addClass('vjs-user-active');
              /**
               * @event Player#useractive
               * @type {EventTarget~Event}
               */
              this.trigger('useractive');
            } else {
              // We're switching the state to inactive manually, so erase any other
              // activity
              this.userActivity_ = false;
    
              // Chrome/Safari/IE have bugs where when you change the cursor it can
              // trigger a mousemove event. This causes an issue when you're hiding
              // the cursor when the user is inactive, and a mousemove signals user
              // activity. Making it impossible to go into inactive mode. Specifically
              // this happens in fullscreen when we really need to hide the cursor.
              //
              // When this gets resolved in ALL browsers it can be removed
              // https://code.google.com/p/chromium/issues/detail?id=103041
              if (this.tech_) {
                this.tech_.one('mousemove', function (e) {
                  e.stopPropagation();
                  e.preventDefault();
                });
              }
    
              this.removeClass('vjs-user-active');
              this.addClass('vjs-user-inactive');
              /**
               * @event Player#userinactive
               * @type {EventTarget~Event}
               */
              this.trigger('userinactive');
            }
          }
          return;
        }
        return this.userActive_;
      };
    
      /**
       * Listen for user activity based on timeout value
       *
       * @private
       */
    
    
      Player.prototype.listenForUserActivity_ = function listenForUserActivity_() {
        var mouseInProgress = void 0;
        var lastMoveX = void 0;
        var lastMoveY = void 0;
        var handleActivity = bind(this, this.reportUserActivity);
    
        var handleMouseMove = function handleMouseMove(e) {
          // #1068 - Prevent mousemove spamming
          // Chrome Bug: https://code.google.com/p/chromium/issues/detail?id=366970
          if (e.screenX !== lastMoveX || e.screenY !== lastMoveY) {
            lastMoveX = e.screenX;
            lastMoveY = e.screenY;
            handleActivity();
          }
        };
    
        var handleMouseDown = function handleMouseDown() {
          handleActivity();
          // For as long as the they are touching the device or have their mouse down,
          // we consider them active even if they're not moving their finger or mouse.
          // So we want to continue to update that they are active
          this.clearInterval(mouseInProgress);
          // Setting userActivity=true now and setting the interval to the same time
          // as the activityCheck interval (250) should ensure we never miss the
          // next activityCheck
          mouseInProgress = this.setInterval(handleActivity, 250);
        };
    
        var handleMouseUp = function handleMouseUp(event) {
          handleActivity();
          // Stop the interval that maintains activity if the mouse/touch is down
          this.clearInterval(mouseInProgress);
        };
    
        // Any mouse movement will be considered user activity
        this.on('mousedown', handleMouseDown);
        this.on('mousemove', handleMouseMove);
        this.on('mouseup', handleMouseUp);
    
        // Listen for keyboard navigation
        // Shouldn't need to use inProgress interval because of key repeat
        this.on('keydown', handleActivity);
        this.on('keyup', handleActivity);
    
        // Run an interval every 250 milliseconds instead of stuffing everything into
        // the mousemove/touchmove function itself, to prevent performance degradation.
        // `this.reportUserActivity` simply sets this.userActivity_ to true, which
        // then gets picked up by this loop
        // http://ejohn.org/blog/learning-from-twitter/
        var inactivityTimeout = void 0;
    
        this.setInterval(function () {
          // Check to see if mouse/touch activity has happened
          if (this.userActivity_) {
            // Reset the activity tracker
            this.userActivity_ = false;
    
            // If the user state was inactive, set the state to active
            this.userActive(true);
    
            // Clear any existing inactivity timeout to start the timer over
            this.clearTimeout(inactivityTimeout);
    
            var timeout = this.options_.inactivityTimeout;
    
            if (timeout > 0) {
              // In <timeout> milliseconds, if no more activity has occurred the
              // user will be considered inactive
              inactivityTimeout = this.setTimeout(function () {
                // Protect against the case where the inactivityTimeout can trigger just
                // before the next user activity is picked up by the activity check loop
                // causing a flicker
                if (!this.userActivity_) {
                  this.userActive(false);
                }
              }, timeout);
            }
          }
        }, 250);
      };
    
      /**
       * Gets or sets the current playback rate. A playback rate of
       * 1.0 represents normal speed and 0.5 would indicate half-speed
       * playback, for instance.
       *
       * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-playbackrate
       *
       * @param {number} [rate]
       *       New playback rate to set.
       *
       * @return {number}
       *         The current playback rate when getting or 1.0
       */
    
    
      Player.prototype.playbackRate = function playbackRate(rate) {
        if (rate !== undefined) {
          this.techCall_('setPlaybackRate', rate);
          return;
        }
    
        if (this.tech_ && this.tech_.featuresPlaybackRate) {
          return this.techGet_('playbackRate');
        }
        return 1.0;
      };
    
      /**
       * Gets or sets the current default playback rate. A default playback rate of
       * 1.0 represents normal speed and 0.5 would indicate half-speed playback, for instance.
       * defaultPlaybackRate will only represent what the intial playbackRate of a video was, not
       * not the current playbackRate.
       *
       * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-defaultplaybackrate
       *
       * @param {number} [rate]
       *       New default playback rate to set.
       *
       * @return {number|Player}
       *         - The default playback rate when getting or 1.0
       *         - the player when setting
       */
    
    
      Player.prototype.defaultPlaybackRate = function defaultPlaybackRate(rate) {
        if (rate !== undefined) {
          return this.techCall_('setDefaultPlaybackRate', rate);
        }
    
        if (this.tech_ && this.tech_.featuresPlaybackRate) {
          return this.techGet_('defaultPlaybackRate');
        }
        return 1.0;
      };
    
      /**
       * Gets or sets the audio flag
       *
       * @param {boolean} bool
       *        - true signals that this is an audio player
       *        - false signals that this is not an audio player
       *
       * @return {boolean}
       *         The current value of isAudio when getting
       */
    
    
      Player.prototype.isAudio = function isAudio(bool) {
        if (bool !== undefined) {
          this.isAudio_ = !!bool;
          return;
        }
    
        return !!this.isAudio_;
      };
    
      /**
       * A helper method for adding a {@link TextTrack} to our
       * {@link TextTrackList}.
       *
       * In addition to the W3C settings we allow adding additional info through options.
       *
       * @see http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-addtexttrack
       *
       * @param {string} [kind]
       *        the kind of TextTrack you are adding
       *
       * @param {string} [label]
       *        the label to give the TextTrack label
       *
       * @param {string} [language]
       *        the language to set on the TextTrack
       *
       * @return {TextTrack|undefined}
       *         the TextTrack that was added or undefined
       *         if there is no tech
       */
    
    
      Player.prototype.addTextTrack = function addTextTrack(kind, label, language) {
        if (this.tech_) {
          return this.tech_.addTextTrack(kind, label, language);
        }
      };
    
      /**
       * Create a remote {@link TextTrack} and an {@link HTMLTrackElement}. It will
       * automatically removed from the video element whenever the source changes, unless
       * manualCleanup is set to false.
       *
       * @param {Object} options
       *        Options to pass to {@link HTMLTrackElement} during creation. See
       *        {@link HTMLTrackElement} for object properties that you should use.
       *
       * @param {boolean} [manualCleanup=true] if set to false, the TextTrack will be
       *
       * @return {HtmlTrackElement}
       *         the HTMLTrackElement that was created and added
       *         to the HtmlTrackElementList and the remote
       *         TextTrackList
       *
       * @deprecated The default value of the "manualCleanup" parameter will default
       *             to "false" in upcoming versions of Video.js
       */
    
    
      Player.prototype.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {
        if (this.tech_) {
          return this.tech_.addRemoteTextTrack(options, manualCleanup);
        }
      };
    
      /**
       * Remove a remote {@link TextTrack} from the respective
       * {@link TextTrackList} and {@link HtmlTrackElementList}.
       *
       * @param {Object} track
       *        Remote {@link TextTrack} to remove
       *
       * @return {undefined}
       *         does not return anything
       */
    
    
      Player.prototype.removeRemoteTextTrack = function removeRemoteTextTrack() {
        var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref3$track = _ref3.track,
            track = _ref3$track === undefined ? arguments[0] : _ref3$track;
    
        // destructure the input into an object with a track argument, defaulting to arguments[0]
        // default the whole argument to an empty object if nothing was passed in
    
        if (this.tech_) {
          return this.tech_.removeRemoteTextTrack(track);
        }
      };
    
      /**
       * Gets available media playback quality metrics as specified by the W3C's Media
       * Playback Quality API.
       *
       * @see [Spec]{@link https://wicg.github.io/media-playback-quality}
       *
       * @return {Object|undefined}
       *         An object with supported media playback quality metrics or undefined if there
       *         is no tech or the tech does not support it.
       */
    
    
      Player.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {
        return this.techGet_('getVideoPlaybackQuality');
      };
    
      /**
       * Get video width
       *
       * @return {number}
       *         current video width
       */
    
    
      Player.prototype.videoWidth = function videoWidth() {
        return this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth() || 0;
      };
    
      /**
       * Get video height
       *
       * @return {number}
       *         current video height
       */
    
    
      Player.prototype.videoHeight = function videoHeight() {
        return this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight() || 0;
      };
    
      /**
       * The player's language code
       * NOTE: The language should be set in the player options if you want the
       * the controls to be built with a specific language. Changing the lanugage
       * later will not update controls text.
       *
       * @param {string} [code]
       *        the language code to set the player to
       *
       * @return {string}
       *         The current language code when getting
       */
    
    
      Player.prototype.language = function language(code) {
        if (code === undefined) {
          return this.language_;
        }
    
        this.language_ = String(code).toLowerCase();
      };
    
      /**
       * Get the player's language dictionary
       * Merge every time, because a newly added plugin might call videojs.addLanguage() at any time
       * Languages specified directly in the player options have precedence
       *
       * @return {Array}
       *         An array of of supported languages
       */
    
    
      Player.prototype.languages = function languages() {
        return mergeOptions(Player.prototype.options_.languages, this.languages_);
      };
    
      /**
       * returns a JavaScript object reperesenting the current track
       * information. **DOES not return it as JSON**
       *
       * @return {Object}
       *         Object representing the current of track info
       */
    
    
      Player.prototype.toJSON = function toJSON() {
        var options = mergeOptions(this.options_);
        var tracks = options.tracks;
    
        options.tracks = [];
    
        for (var i = 0; i < tracks.length; i++) {
          var track = tracks[i];
    
          // deep merge tracks and null out player so no circular references
          track = mergeOptions(track);
          track.player = undefined;
          options.tracks[i] = track;
        }
    
        return options;
      };
    
      /**
       * Creates a simple modal dialog (an instance of the {@link ModalDialog}
       * component) that immediately overlays the player with arbitrary
       * content and removes itself when closed.
       *
       * @param {string|Function|Element|Array|null} content
       *        Same as {@link ModalDialog#content}'s param of the same name.
       *        The most straight-forward usage is to provide a string or DOM
       *        element.
       *
       * @param {Object} [options]
       *        Extra options which will be passed on to the {@link ModalDialog}.
       *
       * @return {ModalDialog}
       *         the {@link ModalDialog} that was created
       */
    
    
      Player.prototype.createModal = function createModal(content, options) {
        var _this7 = this;
    
        options = options || {};
        options.content = content || '';
    
        var modal = new ModalDialog(this, options);
    
        this.addChild(modal);
        modal.on('dispose', function () {
          _this7.removeChild(modal);
        });
    
        modal.open();
        return modal;
      };
    
      /**
       * Gets tag settings
       *
       * @param {Element} tag
       *        The player tag
       *
       * @return {Object}
       *         An object containing all of the settings
       *         for a player tag
       */
    
    
      Player.getTagSettings = function getTagSettings(tag) {
        var baseOptions = {
          sources: [],
          tracks: []
        };
    
        var tagOptions = getAttributes(tag);
        var dataSetup = tagOptions['data-setup'];
    
        if (hasClass(tag, 'vjs-fluid')) {
          tagOptions.fluid = true;
        }
    
        // Check if data-setup attr exists.
        if (dataSetup !== null) {
          // Parse options JSON
          // If empty string, make it a parsable json object.
          var _safeParseTuple = tuple(dataSetup || '{}'),
              err = _safeParseTuple[0],
              data = _safeParseTuple[1];
    
          if (err) {
            log$1.error(err);
          }
          assign(tagOptions, data);
        }
    
        assign(baseOptions, tagOptions);
    
        // Get tag children settings
        if (tag.hasChildNodes()) {
          var children = tag.childNodes;
    
          for (var i = 0, j = children.length; i < j; i++) {
            var child = children[i];
            // Change case needed: http://ejohn.org/blog/nodename-case-sensitivity/
            var childName = child.nodeName.toLowerCase();
    
            if (childName === 'source') {
              baseOptions.sources.push(getAttributes(child));
            } else if (childName === 'track') {
              baseOptions.tracks.push(getAttributes(child));
            }
          }
        }
    
        return baseOptions;
      };
    
      /**
       * Determine wether or not flexbox is supported
       *
       * @return {boolean}
       *         - true if flexbox is supported
       *         - false if flexbox is not supported
       */
    
    
      Player.prototype.flexNotSupported_ = function flexNotSupported_() {
        var elem = document_1.createElement('i');
    
        // Note: We don't actually use flexBasis (or flexOrder), but it's one of the more
        // common flex features that we can rely on when checking for flex support.
        return !('flexBasis' in elem.style || 'webkitFlexBasis' in elem.style || 'mozFlexBasis' in elem.style || 'msFlexBasis' in elem.style ||
        // IE10-specific (2012 flex spec)
        'msFlexOrder' in elem.style);
      };
    
      return Player;
    }(Component);
    
    /**
     * Get the {@link VideoTrackList}
     * @link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist
     *
     * @return {VideoTrackList}
     *         the current video track list
     *
     * @method Player.prototype.videoTracks
     */
    
    /**
     * Get the {@link AudioTrackList}
     * @link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist
     *
     * @return {AudioTrackList}
     *         the current audio track list
     *
     * @method Player.prototype.audioTracks
     */
    
    /**
     * Get the {@link TextTrackList}
     *
     * @link http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-texttracks
     *
     * @return {TextTrackList}
     *         the current text track list
     *
     * @method Player.prototype.textTracks
     */
    
    /**
     * Get the remote {@link TextTrackList}
     *
     * @return {TextTrackList}
     *         The current remote text track list
     *
     * @method Player.prototype.remoteTextTracks
     */
    
    /**
     * Get the remote {@link HtmlTrackElementList} tracks.
     *
     * @return {HtmlTrackElementList}
     *         The current remote text track element list
     *
     * @method Player.prototype.remoteTextTrackEls
     */
    
    ALL.names.forEach(function (name$$1) {
      var props = ALL[name$$1];
    
      Player.prototype[props.getterName] = function () {
        if (this.tech_) {
          return this.tech_[props.getterName]();
        }
    
        // if we have not yet loadTech_, we create {video,audio,text}Tracks_
        // these will be passed to the tech during loading
        this[props.privateName] = this[props.privateName] || new props.ListClass();
        return this[props.privateName];
      };
    });
    
    /**
     * Global player list
     *
     * @type {Object}
     */
    Player.players = {};
    
    var navigator$1 = window_1.navigator;
    
    /*
     * Player instance options, surfaced using options
     * options = Player.prototype.options_
     * Make changes in options, not here.
     *
     * @type {Object}
     * @private
     */
    Player.prototype.options_ = {
      // Default order of fallback technology
      techOrder: Tech.defaultTechOrder_,
    
      html5: {},
      flash: {},
    
      // default inactivity timeout
      inactivityTimeout: 2000,
    
      // default playback rates
      playbackRates: [],
      // Add playback rate selection by adding rates
      // 'playbackRates': [0.5, 1, 1.5, 2],
    
      // Included control sets
      children: ['mediaLoader', 'posterImage', 'textTrackDisplay', 'loadingSpinner', 'bigPlayButton', 'controlBar', 'errorDisplay', 'textTrackSettings'],
    
      language: navigator$1 && (navigator$1.languages && navigator$1.languages[0] || navigator$1.userLanguage || navigator$1.language) || 'en',
    
      // locales and their language translations
      languages: {},
    
      // Default message to show when a video cannot be played.
      notSupportedMessage: 'No compatible source was found for this media.'
    };
    
    [
    /**
     * Returns whether or not the player is in the "ended" state.
     *
     * @return {Boolean} True if the player is in the ended state, false if not.
     * @method Player#ended
     */
    'ended',
    /**
     * Returns whether or not the player is in the "seeking" state.
     *
     * @return {Boolean} True if the player is in the seeking state, false if not.
     * @method Player#seeking
     */
    'seeking',
    /**
     * Returns the TimeRanges of the media that are currently available
     * for seeking to.
     *
     * @return {TimeRanges} the seekable intervals of the media timeline
     * @method Player#seekable
     */
    'seekable',
    /**
     * Returns the current state of network activity for the element, from
     * the codes in the list below.
     * - NETWORK_EMPTY (numeric value 0)
     *   The element has not yet been initialised. All attributes are in
     *   their initial states.
     * - NETWORK_IDLE (numeric value 1)
     *   The element's resource selection algorithm is active and has
     *   selected a resource, but it is not actually using the network at
     *   this time.
     * - NETWORK_LOADING (numeric value 2)
     *   The user agent is actively trying to download data.
     * - NETWORK_NO_SOURCE (numeric value 3)
     *   The element's resource selection algorithm is active, but it has
     *   not yet found a resource to use.
     *
     * @see https://html.spec.whatwg.org/multipage/embedded-content.html#network-states
     * @return {number} the current network activity state
     * @method Player#networkState
     */
    'networkState',
    /**
     * Returns a value that expresses the current state of the element
     * with respect to rendering the current playback position, from the
     * codes in the list below.
     * - HAVE_NOTHING (numeric value 0)
     *   No information regarding the media resource is available.
     * - HAVE_METADATA (numeric value 1)
     *   Enough of the resource has been obtained that the duration of the
     *   resource is available.
     * - HAVE_CURRENT_DATA (numeric value 2)
     *   Data for the immediate current playback position is available.
     * - HAVE_FUTURE_DATA (numeric value 3)
     *   Data for the immediate current playback position is available, as
     *   well as enough data for the user agent to advance the current
     *   playback position in the direction of playback.
     * - HAVE_ENOUGH_DATA (numeric value 4)
     *   The user agent estimates that enough data is available for
     *   playback to proceed uninterrupted.
     *
     * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-readystate
     * @return {number} the current playback rendering state
     * @method Player#readyState
     */
    'readyState'].forEach(function (fn) {
      Player.prototype[fn] = function () {
        return this.techGet_(fn);
      };
    });
    
    TECH_EVENTS_RETRIGGER.forEach(function (event) {
      Player.prototype['handleTech' + toTitleCase(event) + '_'] = function () {
        return this.trigger(event);
      };
    });
    
    /**
     * Fired when the player has initial duration and dimension information
     *
     * @event Player#loadedmetadata
     * @type {EventTarget~Event}
     */
    
    /**
     * Fired when the player has downloaded data at the current playback position
     *
     * @event Player#loadeddata
     * @type {EventTarget~Event}
     */
    
    /**
     * Fired when the current playback position has changed *
     * During playback this is fired every 15-250 milliseconds, depending on the
     * playback technology in use.
     *
     * @event Player#timeupdate
     * @type {EventTarget~Event}
     */
    
    /**
     * Fired when the volume changes
     *
     * @event Player#volumechange
     * @type {EventTarget~Event}
     */
    
    /**
     * Reports whether or not a player has a plugin available.
     *
     * This does not report whether or not the plugin has ever been initialized
     * on this player. For that, [usingPlugin]{@link Player#usingPlugin}.
     *
     * @method Player#hasPlugin
     * @param  {string}  name
     *         The name of a plugin.
     *
     * @return {boolean}
     *         Whether or not this player has the requested plugin available.
     */
    
    /**
     * Reports whether or not a player is using a plugin by name.
     *
     * For basic plugins, this only reports whether the plugin has _ever_ been
     * initialized on this player.
     *
     * @method Player#usingPlugin
     * @param  {string} name
     *         The name of a plugin.
     *
     * @return {boolean}
     *         Whether or not this player is using the requested plugin.
     */
    
    Component.registerComponent('Player', Player);
    
    /**
     * @file plugin.js
     */
    /**
     * The base plugin name.
     *
     * @private
     * @constant
     * @type {string}
     */
    var BASE_PLUGIN_NAME = 'plugin';
    
    /**
     * The key on which a player's active plugins cache is stored.
     *
     * @private
     * @constant
     * @type     {string}
     */
    var PLUGIN_CACHE_KEY = 'activePlugins_';
    
    /**
     * Stores registered plugins in a private space.
     *
     * @private
     * @type    {Object}
     */
    var pluginStorage = {};
    
    /**
     * Reports whether or not a plugin has been registered.
     *
     * @private
     * @param   {string} name
     *          The name of a plugin.
     *
     * @returns {boolean}
     *          Whether or not the plugin has been registered.
     */
    var pluginExists = function pluginExists(name) {
      return pluginStorage.hasOwnProperty(name);
    };
    
    /**
     * Get a single registered plugin by name.
     *
     * @private
     * @param   {string} name
     *          The name of a plugin.
     *
     * @returns {Function|undefined}
     *          The plugin (or undefined).
     */
    var getPlugin = function getPlugin(name) {
      return pluginExists(name) ? pluginStorage[name] : undefined;
    };
    
    /**
     * Marks a plugin as "active" on a player.
     *
     * Also, ensures that the player has an object for tracking active plugins.
     *
     * @private
     * @param   {Player} player
     *          A Video.js player instance.
     *
     * @param   {string} name
     *          The name of a plugin.
     */
    var markPluginAsActive = function markPluginAsActive(player, name) {
      player[PLUGIN_CACHE_KEY] = player[PLUGIN_CACHE_KEY] || {};
      player[PLUGIN_CACHE_KEY][name] = true;
    };
    
    /**
     * Triggers a pair of plugin setup events.
     *
     * @private
     * @param  {Player} player
     *         A Video.js player instance.
     *
     * @param  {Plugin~PluginEventHash} hash
     *         A plugin event hash.
     *
     * @param  {Boolean} [before]
     *         If true, prefixes the event name with "before". In other words,
     *         use this to trigger "beforepluginsetup" instead of "pluginsetup".
     */
    var triggerSetupEvent = function triggerSetupEvent(player, hash, before) {
      var eventName = (before ? 'before' : '') + 'pluginsetup';
    
      player.trigger(eventName, hash);
      player.trigger(eventName + ':' + hash.name, hash);
    };
    
    /**
     * Takes a basic plugin function and returns a wrapper function which marks
     * on the player that the plugin has been activated.
     *
     * @private
     * @param   {string} name
     *          The name of the plugin.
     *
     * @param   {Function} plugin
     *          The basic plugin.
     *
     * @returns {Function}
     *          A wrapper function for the given plugin.
     */
    var createBasicPlugin = function createBasicPlugin(name, plugin) {
      var basicPluginWrapper = function basicPluginWrapper() {
    
        // We trigger the "beforepluginsetup" and "pluginsetup" events on the player
        // regardless, but we want the hash to be consistent with the hash provided
        // for advanced plugins.
        //
        // The only potentially counter-intuitive thing here is the `instance` in
        // the "pluginsetup" event is the value returned by the `plugin` function.
        triggerSetupEvent(this, { name: name, plugin: plugin, instance: null }, true);
    
        var instance = plugin.apply(this, arguments);
    
        markPluginAsActive(this, name);
        triggerSetupEvent(this, { name: name, plugin: plugin, instance: instance });
    
        return instance;
      };
    
      Object.keys(plugin).forEach(function (prop) {
        basicPluginWrapper[prop] = plugin[prop];
      });
    
      return basicPluginWrapper;
    };
    
    /**
     * Takes a plugin sub-class and returns a factory function for generating
     * instances of it.
     *
     * This factory function will replace itself with an instance of the requested
     * sub-class of Plugin.
     *
     * @private
     * @param   {string} name
     *          The name of the plugin.
     *
     * @param   {Plugin} PluginSubClass
     *          The advanced plugin.
     *
     * @returns {Function}
     */
    var createPluginFactory = function createPluginFactory(name, PluginSubClass) {
    
      // Add a `name` property to the plugin prototype so that each plugin can
      // refer to itself by name.
      PluginSubClass.prototype.name = name;
    
      return function () {
        triggerSetupEvent(this, { name: name, plugin: PluginSubClass, instance: null }, true);
    
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
    
        var instance = new (Function.prototype.bind.apply(PluginSubClass, [null].concat([this].concat(args))))();
    
        // The plugin is replaced by a function that returns the current instance.
        this[name] = function () {
          return instance;
        };
    
        triggerSetupEvent(this, instance.getEventHash());
    
        return instance;
      };
    };
    
    /**
     * Parent class for all advanced plugins.
     *
     * @mixes   module:evented~EventedMixin
     * @mixes   module:stateful~StatefulMixin
     * @fires   Player#beforepluginsetup
     * @fires   Player#beforepluginsetup:$name
     * @fires   Player#pluginsetup
     * @fires   Player#pluginsetup:$name
     * @listens Player#dispose
     * @throws  {Error}
     *          If attempting to instantiate the base {@link Plugin} class
     *          directly instead of via a sub-class.
     */
    
    var Plugin = function () {
    
      /**
       * Creates an instance of this class.
       *
       * Sub-classes should call `super` to ensure plugins are properly initialized.
       *
       * @param {Player} player
       *        A Video.js player instance.
       */
      function Plugin(player) {
        classCallCheck(this, Plugin);
    
        if (this.constructor === Plugin) {
          throw new Error('Plugin must be sub-classed; not directly instantiated.');
        }
    
        this.player = player;
    
        // Make this object evented, but remove the added `trigger` method so we
        // use the prototype version instead.
        evented(this);
        delete this.trigger;
    
        stateful(this, this.constructor.defaultState);
        markPluginAsActive(player, this.name);
    
        // Auto-bind the dispose method so we can use it as a listener and unbind
        // it later easily.
        this.dispose = bind(this, this.dispose);
    
        // If the player is disposed, dispose the plugin.
        player.on('dispose', this.dispose);
      }
    
      /**
       * Each event triggered by plugins includes a hash of additional data with
       * conventional properties.
       *
       * This returns that object or mutates an existing hash.
       *
       * @param   {Object} [hash={}]
       *          An object to be used as event an event hash.
       *
       * @returns {Plugin~PluginEventHash}
       *          An event hash object with provided properties mixed-in.
       */
    
    
      Plugin.prototype.getEventHash = function getEventHash() {
        var hash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    
        hash.name = this.name;
        hash.plugin = this.constructor;
        hash.instance = this;
        return hash;
      };
    
      /**
       * Triggers an event on the plugin object and overrides
       * {@link module:evented~EventedMixin.trigger|EventedMixin.trigger}.
       *
       * @param   {string|Object} event
       *          An event type or an object with a type property.
       *
       * @param   {Object} [hash={}]
       *          Additional data hash to merge with a
       *          {@link Plugin~PluginEventHash|PluginEventHash}.
       *
       * @returns {boolean}
       *          Whether or not default was prevented.
       */
    
    
      Plugin.prototype.trigger = function trigger$$1(event) {
        var hash = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    
        return trigger(this.eventBusEl_, event, this.getEventHash(hash));
      };
    
      /**
       * Handles "statechanged" events on the plugin. No-op by default, override by
       * subclassing.
       *
       * @abstract
       * @param    {Event} e
       *           An event object provided by a "statechanged" event.
       *
       * @param    {Object} e.changes
       *           An object describing changes that occurred with the "statechanged"
       *           event.
       */
    
    
      Plugin.prototype.handleStateChanged = function handleStateChanged(e) {};
    
      /**
       * Disposes a plugin.
       *
       * Subclasses can override this if they want, but for the sake of safety,
       * it's probably best to subscribe the "dispose" event.
       *
       * @fires Plugin#dispose
       */
    
    
      Plugin.prototype.dispose = function dispose() {
        var name = this.name,
            player = this.player;
    
        /**
         * Signals that a advanced plugin is about to be disposed.
         *
         * @event Plugin#dispose
         * @type  {EventTarget~Event}
         */
    
        this.trigger('dispose');
        this.off();
        player.off('dispose', this.dispose);
    
        // Eliminate any possible sources of leaking memory by clearing up
        // references between the player and the plugin instance and nulling out
        // the plugin's state and replacing methods with a function that throws.
        player[PLUGIN_CACHE_KEY][name] = false;
        this.player = this.state = null;
    
        // Finally, replace the plugin name on the player with a new factory
        // function, so that the plugin is ready to be set up again.
        player[name] = createPluginFactory(name, pluginStorage[name]);
      };
    
      /**
       * Determines if a plugin is a basic plugin (i.e. not a sub-class of `Plugin`).
       *
       * @param   {string|Function} plugin
       *          If a string, matches the name of a plugin. If a function, will be
       *          tested directly.
       *
       * @returns {boolean}
       *          Whether or not a plugin is a basic plugin.
       */
    
    
      Plugin.isBasic = function isBasic(plugin) {
        var p = typeof plugin === 'string' ? getPlugin(plugin) : plugin;
    
        return typeof p === 'function' && !Plugin.prototype.isPrototypeOf(p.prototype);
      };
    
      /**
       * Register a Video.js plugin.
       *
       * @param   {string} name
       *          The name of the plugin to be registered. Must be a string and
       *          must not match an existing plugin or a method on the `Player`
       *          prototype.
       *
       * @param   {Function} plugin
       *          A sub-class of `Plugin` or a function for basic plugins.
       *
       * @returns {Function}
       *          For advanced plugins, a factory function for that plugin. For
       *          basic plugins, a wrapper function that initializes the plugin.
       */
    
    
      Plugin.registerPlugin = function registerPlugin(name, plugin) {
        if (typeof name !== 'string') {
          throw new Error('Illegal plugin name, "' + name + '", must be a string, was ' + (typeof name === 'undefined' ? 'undefined' : _typeof(name)) + '.');
        }
    
        if (pluginExists(name)) {
          log$1.warn('A plugin named "' + name + '" already exists. You may want to avoid re-registering plugins!');
        } else if (Player.prototype.hasOwnProperty(name)) {
          throw new Error('Illegal plugin name, "' + name + '", cannot share a name with an existing player method!');
        }
    
        if (typeof plugin !== 'function') {
          throw new Error('Illegal plugin for "' + name + '", must be a function, was ' + (typeof plugin === 'undefined' ? 'undefined' : _typeof(plugin)) + '.');
        }
    
        pluginStorage[name] = plugin;
    
        // Add a player prototype method for all sub-classed plugins (but not for
        // the base Plugin class).
        if (name !== BASE_PLUGIN_NAME) {
          if (Plugin.isBasic(plugin)) {
            Player.prototype[name] = createBasicPlugin(name, plugin);
          } else {
            Player.prototype[name] = createPluginFactory(name, plugin);
          }
        }
    
        return plugin;
      };
    
      /**
       * De-register a Video.js plugin.
       *
       * @param {string} name
       *        The name of the plugin to be deregistered.
       */
    
    
      Plugin.deregisterPlugin = function deregisterPlugin(name) {
        if (name === BASE_PLUGIN_NAME) {
          throw new Error('Cannot de-register base plugin.');
        }
        if (pluginExists(name)) {
          delete pluginStorage[name];
          delete Player.prototype[name];
        }
      };
    
      /**
       * Gets an object containing multiple Video.js plugins.
       *
       * @param   {Array} [names]
       *          If provided, should be an array of plugin names. Defaults to _all_
       *          plugin names.
       *
       * @returns {Object|undefined}
       *          An object containing plugin(s) associated with their name(s) or
       *          `undefined` if no matching plugins exist).
       */
    
    
      Plugin.getPlugins = function getPlugins() {
        var names = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Object.keys(pluginStorage);
    
        var result = void 0;
    
        names.forEach(function (name) {
          var plugin = getPlugin(name);
    
          if (plugin) {
            result = result || {};
            result[name] = plugin;
          }
        });
    
        return result;
      };
    
      /**
       * Gets a plugin's version, if available
       *
       * @param   {string} name
       *          The name of a plugin.
       *
       * @returns {string}
       *          The plugin's version or an empty string.
       */
    
    
      Plugin.getPluginVersion = function getPluginVersion(name) {
        var plugin = getPlugin(name);
    
        return plugin && plugin.VERSION || '';
      };
    
      return Plugin;
    }();
    
    /**
     * Gets a plugin by name if it exists.
     *
     * @static
     * @method   getPlugin
     * @memberOf Plugin
     * @param    {string} name
     *           The name of a plugin.
     *
     * @returns  {Function|undefined}
     *           The plugin (or `undefined`).
     */
    
    
    Plugin.getPlugin = getPlugin;
    
    /**
     * The name of the base plugin class as it is registered.
     *
     * @type {string}
     */
    Plugin.BASE_PLUGIN_NAME = BASE_PLUGIN_NAME;
    
    Plugin.registerPlugin(BASE_PLUGIN_NAME, Plugin);
    
    /**
     * Documented in player.js
     *
     * @ignore
     */
    Player.prototype.usingPlugin = function (name) {
      return !!this[PLUGIN_CACHE_KEY] && this[PLUGIN_CACHE_KEY][name] === true;
    };
    
    /**
     * Documented in player.js
     *
     * @ignore
     */
    Player.prototype.hasPlugin = function (name) {
      return !!pluginExists(name);
    };
    
    /**
     * Signals that a plugin is about to be set up on a player.
     *
     * @event    Player#beforepluginsetup
     * @type     {Plugin~PluginEventHash}
     */
    
    /**
     * Signals that a plugin is about to be set up on a player - by name. The name
     * is the name of the plugin.
     *
     * @event    Player#beforepluginsetup:$name
     * @type     {Plugin~PluginEventHash}
     */
    
    /**
     * Signals that a plugin has just been set up on a player.
     *
     * @event    Player#pluginsetup
     * @type     {Plugin~PluginEventHash}
     */
    
    /**
     * Signals that a plugin has just been set up on a player - by name. The name
     * is the name of the plugin.
     *
     * @event    Player#pluginsetup:$name
     * @type     {Plugin~PluginEventHash}
     */
    
    /**
     * @typedef  {Object} Plugin~PluginEventHash
     *
     * @property {string} instance
     *           For basic plugins, the return value of the plugin function. For
     *           advanced plugins, the plugin instance on which the event is fired.
     *
     * @property {string} name
     *           The name of the plugin.
     *
     * @property {string} plugin
     *           For basic plugins, the plugin function. For advanced plugins, the
     *           plugin class/constructor.
     */
    
    /**
     * @file extend.js
     * @module extend
     */
    
    /**
     * A combination of node inherits and babel's inherits (after transpile).
     * Both work the same but node adds `super_` to the subClass
     * and Bable adds the superClass as __proto__. Both seem useful.
     *
     * @param {Object} subClass
     *        The class to inherit to
     *
     * @param {Object} superClass
     *        The class to inherit from
     *
     * @private
     */
    var _inherits = function _inherits(subClass, superClass) {
      if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
      }
    
      subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
          value: subClass,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    
      if (superClass) {
        // node
        subClass.super_ = superClass;
      }
    };
    
    /**
     * Function for subclassing using the same inheritance that
     * videojs uses internally
     *
     * @static
     * @const
     *
     * @param {Object} superClass
     *        The class to inherit from
     *
     * @param {Object} [subClassMethods={}]
     *        The class to inherit to
     *
     * @return {Object}
     *         The new object with subClassMethods that inherited superClass.
     */
    var extendFn = function extendFn(superClass) {
      var subClassMethods = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    
      var subClass = function subClass() {
        superClass.apply(this, arguments);
      };
    
      var methods = {};
    
      if ((typeof subClassMethods === 'undefined' ? 'undefined' : _typeof(subClassMethods)) === 'object') {
        if (subClassMethods.constructor !== Object.prototype.constructor) {
          subClass = subClassMethods.constructor;
        }
        methods = subClassMethods;
      } else if (typeof subClassMethods === 'function') {
        subClass = subClassMethods;
      }
    
      _inherits(subClass, superClass);
    
      // Extend subObj's prototype with functions and other properties from props
      for (var name in methods) {
        if (methods.hasOwnProperty(name)) {
          subClass.prototype[name] = methods[name];
        }
      }
    
      return subClass;
    };
    
    /**
     * @file video.js
     * @module videojs
     */
    // Include the built-in techs
    // HTML5 Element Shim for IE8
    if (typeof HTMLVideoElement === 'undefined' && isReal()) {
      document_1.createElement('video');
      document_1.createElement('audio');
      document_1.createElement('track');
    }
    
    /**
     * Doubles as the main function for users to create a player instance and also
     * the main library object.
     * The `videojs` function can be used to initialize or retrieve a player.
      *
     * @param {string|Element} id
     *        Video element or video element ID
     *
     * @param {Object} [options]
     *        Optional options object for config/settings
     *
     * @param {Component~ReadyCallback} [ready]
     *        Optional ready callback
     *
     * @return {Player}
     *         A player instance
     */
    function videojs(id, options, ready) {
      var tag = void 0;
    
      // Allow for element or ID to be passed in
      // String ID
      if (typeof id === 'string') {
        var players = videojs.getPlayers();
    
        // Adjust for jQuery ID syntax
        if (id.indexOf('#') === 0) {
          id = id.slice(1);
        }
    
        // If a player instance has already been created for this ID return it.
        if (players[id]) {
    
          // If options or ready function are passed, warn
          if (options) {
            log$1.warn('Player "' + id + '" is already initialised. Options will not be applied.');
          }
    
          if (ready) {
            players[id].ready(ready);
          }
    
          return players[id];
        }
    
        // Otherwise get element for ID
        tag = $('#' + id);
    
        // ID is a media element
      } else {
        tag = id;
      }
    
      // Check for a useable element
      // re: nodeName, could be a box div also
      if (!tag || !tag.nodeName) {
        throw new TypeError('The element or ID supplied is not valid. (videojs)');
      }
    
      // Element may have a player attr referring to an already created player instance.
      // If so return that otherwise set up a new player below
      if (tag.player || Player.players[tag.playerId]) {
        return tag.player || Player.players[tag.playerId];
      }
    
      options = options || {};
    
      videojs.hooks('beforesetup').forEach(function (hookFunction) {
        var opts = hookFunction(tag, mergeOptions(options));
    
        if (!isObject(opts) || Array.isArray(opts)) {
          log$1.error('please return an object in beforesetup hooks');
          return;
        }
    
        options = mergeOptions(options, opts);
      });
    
      var PlayerComponent = Component.getComponent('Player');
      // If not, set up a new player
      var player = new PlayerComponent(tag, options, ready);
    
      videojs.hooks('setup').forEach(function (hookFunction) {
        return hookFunction(player);
      });
    
      return player;
    }
    
    /**
     * An Object that contains lifecycle hooks as keys which point to an array
     * of functions that are run when a lifecycle is triggered
     */
    videojs.hooks_ = {};
    
    /**
     * Get a list of hooks for a specific lifecycle
     * @function videojs.hooks
     *
     * @param {string} type
     *        the lifecyle to get hooks from
     *
     * @param {Function} [fn]
     *        Optionally add a hook to the lifecycle that your are getting.
     *
     * @return {Array}
     *         an array of hooks, or an empty array if there are none.
     */
    videojs.hooks = function (type, fn) {
      videojs.hooks_[type] = videojs.hooks_[type] || [];
      if (fn) {
        videojs.hooks_[type] = videojs.hooks_[type].concat(fn);
      }
      return videojs.hooks_[type];
    };
    
    /**
     * Add a function hook to a specific videojs lifecycle.
     *
     * @param {string} type
     *        the lifecycle to hook the function to.
     *
     * @param {Function|Function[]}
     *        The function or array of functions to attach.
     */
    videojs.hook = function (type, fn) {
      videojs.hooks(type, fn);
    };
    
    /**
     * Remove a hook from a specific videojs lifecycle.
     *
     * @param {string} type
     *        the lifecycle that the function hooked to
     *
     * @param {Function} fn
     *        The hooked function to remove
     *
     * @return {boolean}
     *         The function that was removed or undef
     */
    videojs.removeHook = function (type, fn) {
      var index = videojs.hooks(type).indexOf(fn);
    
      if (index <= -1) {
        return false;
      }
    
      videojs.hooks_[type] = videojs.hooks_[type].slice();
      videojs.hooks_[type].splice(index, 1);
    
      return true;
    };
    
    // Add default styles
    if (window_1.VIDEOJS_NO_DYNAMIC_STYLE !== true && isReal()) {
      var style = $('.vjs-styles-defaults');
    
      if (!style) {
        style = createStyleElement('vjs-styles-defaults');
        var head = $('head');
    
        if (head) {
          head.insertBefore(style, head.firstChild);
        }
        setTextContent(style, '\n      .video-js {\n        width: 300px;\n        height: 150px;\n      }\n\n      .vjs-fluid {\n        padding-top: 56.25%\n      }\n    ');
      }
    }
    
    // Run Auto-load players
    // You have to wait at least once in case this script is loaded after your
    // video in the DOM (weird behavior only with minified version)
    autoSetupTimeout(1, videojs);
    
    /**
     * Current software version. Follows semver.
     *
     * @type {string}
     */
    videojs.VERSION = version;
    
    /**
     * The global options object. These are the settings that take effect
     * if no overrides are specified when the player is created.
     *
     * @type {Object}
     */
    videojs.options = Player.prototype.options_;
    
    /**
     * Get an object with the currently created players, keyed by player ID
     *
     * @return {Object}
     *         The created players
     */
    videojs.getPlayers = function () {
      return Player.players;
    };
    
    /**
     * Expose players object.
     *
     * @memberOf videojs
     * @property {Object} players
     */
    videojs.players = Player.players;
    
    /**
     * Get a component class object by name
     *
     * @borrows Component.getComponent as videojs.getComponent
     */
    videojs.getComponent = Component.getComponent;
    
    /**
     * Register a component so it can referred to by name. Used when adding to other
     * components, either through addChild `component.addChild('myComponent')` or through
     * default children options  `{ children: ['myComponent'] }`.
     *
     * > NOTE: You could also just initialize the component before adding.
     * `component.addChild(new MyComponent());`
     *
     * @param {string} name
     *        The class name of the component
     *
     * @param {Component} comp
     *        The component class
     *
     * @return {Component}
     *         The newly registered component
     */
    videojs.registerComponent = function (name$$1, comp) {
      if (Tech.isTech(comp)) {
        log$1.warn('The ' + name$$1 + ' tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)');
      }
    
      Component.registerComponent.call(Component, name$$1, comp);
    };
    
    /**
     * Get a Tech class object by name
     *
     * @borrows Tech.getTech as videojs.getTech
     */
    videojs.getTech = Tech.getTech;
    
    /**
     * Register a Tech so it can referred to by name.
     * This is used in the tech order for the player.
     *
     * @borrows Tech.registerTech as videojs.registerTech
     */
    videojs.registerTech = Tech.registerTech;
    
    videojs.use = use;
    
    /**
     * A suite of browser and device tests from {@link browser}.
     *
     * @type {Object}
     * @private
     */
    videojs.browser = browser;
    
    /**
     * Whether or not the browser supports touch events. Included for backward
     * compatibility with 4.x, but deprecated. Use `videojs.browser.TOUCH_ENABLED`
     * instead going forward.
     *
     * @deprecated since version 5.0
     * @type {boolean}
     */
    videojs.TOUCH_ENABLED = TOUCH_ENABLED;
    
    /**
     * Subclass an existing class
     * Mimics ES6 subclassing with the `extend` keyword
     *
     * @borrows extend:extendFn as videojs.extend
     */
    videojs.extend = extendFn;
    
    /**
     * Merge two options objects recursively
     * Performs a deep merge like lodash.merge but **only merges plain objects**
     * (not arrays, elements, anything else)
     * Other values will be copied directly from the second object.
     *
     * @borrows merge-options:mergeOptions as videojs.mergeOptions
     */
    videojs.mergeOptions = mergeOptions;
    
    /**
     * Change the context (this) of a function
     *
     * > NOTE: as of v5.0 we require an ES5 shim, so you should use the native
     * `function() {}.bind(newContext);` instead of this.
     *
     * @borrows fn:bind as videojs.bind
     */
    videojs.bind = bind;
    
    /**
     * Register a Video.js plugin.
     *
     * @borrows plugin:registerPlugin as videojs.registerPlugin
     * @method registerPlugin
     *
     * @param  {string} name
     *         The name of the plugin to be registered. Must be a string and
     *         must not match an existing plugin or a method on the `Player`
     *         prototype.
     *
     * @param  {Function} plugin
     *         A sub-class of `Plugin` or a function for basic plugins.
     *
     * @return {Function}
     *         For advanced plugins, a factory function for that plugin. For
     *         basic plugins, a wrapper function that initializes the plugin.
     */
    videojs.registerPlugin = Plugin.registerPlugin;
    
    /**
     * Deprecated method to register a plugin with Video.js
     *
     * @deprecated
     *        videojs.plugin() is deprecated; use videojs.registerPlugin() instead
     *
     * @param {string} name
     *        The plugin name
     *
     * @param {Plugin|Function} plugin
     *         The plugin sub-class or function
     */
    videojs.plugin = function (name$$1, plugin) {
      log$1.warn('videojs.plugin() is deprecated; use videojs.registerPlugin() instead');
      return Plugin.registerPlugin(name$$1, plugin);
    };
    
    /**
     * Gets an object containing multiple Video.js plugins.
     *
     * @param  {Array} [names]
     *         If provided, should be an array of plugin names. Defaults to _all_
     *         plugin names.
     *
     * @return {Object|undefined}
     *         An object containing plugin(s) associated with their name(s) or
     *         `undefined` if no matching plugins exist).
     */
    videojs.getPlugins = Plugin.getPlugins;
    
    /**
     * Gets a plugin by name if it exists.
     *
     * @param  {string} name
     *         The name of a plugin.
     *
     * @return {Function|undefined}
     *         The plugin (or `undefined`).
     */
    videojs.getPlugin = Plugin.getPlugin;
    
    /**
     * Gets a plugin's version, if available
     *
     * @param  {string} name
     *         The name of a plugin.
     *
     * @return {string}
     *         The plugin's version or an empty string.
     */
    videojs.getPluginVersion = Plugin.getPluginVersion;
    
    /**
     * Adding languages so that they're available to all players.
     * Example: `videojs.addLanguage('es', { 'Hello': 'Hola' });`
     *
     * @param {string} code
     *        The language code or dictionary property
     *
     * @param {Object} data
     *        The data values to be translated
     *
     * @return {Object}
     *         The resulting language dictionary object
     */
    videojs.addLanguage = function (code, data) {
      var _mergeOptions;
    
      code = ('' + code).toLowerCase();
    
      videojs.options.languages = mergeOptions(videojs.options.languages, (_mergeOptions = {}, _mergeOptions[code] = data, _mergeOptions));
    
      return videojs.options.languages[code];
    };
    
    /**
     * Log messages
     *
     * @borrows log:log as videojs.log
     */
    videojs.log = log$1;
    
    /**
     * Creates an emulated TimeRange object.
     *
     * @borrows time-ranges:createTimeRanges as videojs.createTimeRange
     */
    /**
     * @borrows time-ranges:createTimeRanges as videojs.createTimeRanges
     */
    videojs.createTimeRange = videojs.createTimeRanges = createTimeRanges;
    
    /**
     * Format seconds as a time string, H:MM:SS or M:SS
     * Supplying a guide (in seconds) will force a number of leading zeros
     * to cover the length of the guide
     *
     * @borrows format-time:formatTime as videojs.formatTime
     */
    videojs.formatTime = formatTime;
    
    /**
     * Resolve and parse the elements of a URL
     *
     * @borrows url:parseUrl as videojs.parseUrl
     */
    videojs.parseUrl = parseUrl;
    
    /**
     * Returns whether the url passed is a cross domain request or not.
     *
     * @borrows url:isCrossOrigin as videojs.isCrossOrigin
     */
    videojs.isCrossOrigin = isCrossOrigin;
    
    /**
     * Event target class.
     *
     * @borrows EventTarget as videojs.EventTarget
     */
    videojs.EventTarget = EventTarget;
    
    /**
     * Add an event listener to element
     * It stores the handler function in a separate cache object
     * and adds a generic handler to the element's event,
     * along with a unique id (guid) to the element.
     *
     * @borrows events:on as videojs.on
     */
    videojs.on = on;
    
    /**
     * Trigger a listener only once for an event
     *
     * @borrows events:one as videojs.one
     */
    videojs.one = one;
    
    /**
     * Removes event listeners from an element
     *
     * @borrows events:off as videojs.off
     */
    videojs.off = off;
    
    /**
     * Trigger an event for an element
     *
     * @borrows events:trigger as videojs.trigger
     */
    videojs.trigger = trigger;
    
    /**
     * A cross-browser XMLHttpRequest wrapper. Here's a simple example:
     *
     * @param {Object} options
     *        settings for the request.
     *
     * @return {XMLHttpRequest|XDomainRequest}
     *         The request object.
     *
     * @see https://github.com/Raynos/xhr
     */
    videojs.xhr = xhr;
    
    /**
     * TextTrack class
     *
     * @borrows TextTrack as videojs.TextTrack
     */
    videojs.TextTrack = TextTrack;
    
    /**
     * export the AudioTrack class so that source handlers can create
     * AudioTracks and then add them to the players AudioTrackList
     *
     * @borrows AudioTrack as videojs.AudioTrack
     */
    videojs.AudioTrack = AudioTrack;
    
    /**
     * export the VideoTrack class so that source handlers can create
     * VideoTracks and then add them to the players VideoTrackList
     *
     * @borrows VideoTrack as videojs.VideoTrack
     */
    videojs.VideoTrack = VideoTrack;
    
    /**
     * Determines, via duck typing, whether or not a value is a DOM element.
     *
     * @borrows dom:isEl as videojs.isEl
     * @deprecated Use videojs.dom.isEl() instead
     */
    
    /**
     * Determines, via duck typing, whether or not a value is a text node.
     *
     * @borrows dom:isTextNode as videojs.isTextNode
     * @deprecated Use videojs.dom.isTextNode() instead
     */
    
    /**
     * Creates an element and applies properties.
     *
     * @borrows dom:createEl as videojs.createEl
     * @deprecated Use videojs.dom.createEl() instead
     */
    
    /**
     * Check if an element has a CSS class
     *
     * @borrows dom:hasElClass as videojs.hasClass
     * @deprecated Use videojs.dom.hasClass() instead
     */
    
    /**
     * Add a CSS class name to an element
     *
     * @borrows dom:addElClass as videojs.addClass
     * @deprecated Use videojs.dom.addClass() instead
     */
    
    /**
     * Remove a CSS class name from an element
     *
     * @borrows dom:removeElClass as videojs.removeClass
     * @deprecated Use videojs.dom.removeClass() instead
     */
    
    /**
     * Adds or removes a CSS class name on an element depending on an optional
     * condition or the presence/absence of the class name.
     *
     * @borrows dom:toggleElClass as videojs.toggleClass
     * @deprecated Use videojs.dom.toggleClass() instead
     */
    
    /**
     * Apply attributes to an HTML element.
     *
     * @borrows dom:setElAttributes as videojs.setAttribute
     * @deprecated Use videojs.dom.setAttributes() instead
     */
    
    /**
     * Get an element's attribute values, as defined on the HTML tag
     * Attributes are not the same as properties. They're defined on the tag
     * or with setAttribute (which shouldn't be used with HTML)
     * This will return true or false for boolean attributes.
     *
     * @borrows dom:getElAttributes as videojs.getAttributes
     * @deprecated Use videojs.dom.getAttributes() instead
     */
    
    /**
     * Empties the contents of an element.
     *
     * @borrows dom:emptyEl as videojs.emptyEl
     * @deprecated Use videojs.dom.emptyEl() instead
     */
    
    /**
     * Normalizes and appends content to an element.
     *
     * The content for an element can be passed in multiple types and
     * combinations, whose behavior is as follows:
     *
     * - String
     *   Normalized into a text node.
     *
     * - Element, TextNode
     *   Passed through.
     *
     * - Array
     *   A one-dimensional array of strings, elements, nodes, or functions (which
     *   return single strings, elements, or nodes).
     *
     * - Function
     *   If the sole argument, is expected to produce a string, element,
     *   node, or array.
     *
     * @borrows dom:appendContents as videojs.appendContet
     * @deprecated Use videojs.dom.appendContent() instead
     */
    
    /**
     * Normalizes and inserts content into an element; this is identical to
     * `appendContent()`, except it empties the element first.
     *
     * The content for an element can be passed in multiple types and
     * combinations, whose behavior is as follows:
     *
     * - String
     *   Normalized into a text node.
     *
     * - Element, TextNode
     *   Passed through.
     *
     * - Array
     *   A one-dimensional array of strings, elements, nodes, or functions (which
     *   return single strings, elements, or nodes).
     *
     * - Function
     *   If the sole argument, is expected to produce a string, element,
     *   node, or array.
     *
     * @borrows dom:insertContent as videojs.insertContent
     * @deprecated Use videojs.dom.insertContent() instead
     */
    ['isEl', 'isTextNode', 'createEl', 'hasClass', 'addClass', 'removeClass', 'toggleClass', 'setAttributes', 'getAttributes', 'emptyEl', 'appendContent', 'insertContent'].forEach(function (k) {
      videojs[k] = function () {
        log$1.warn('videojs.' + k + '() is deprecated; use videojs.dom.' + k + '() instead');
        return Dom[k].apply(null, arguments);
      };
    });
    
    /**
     * A safe getComputedStyle with an IE8 fallback.
     *
     * This is because in Firefox, if the player is loaded in an iframe with `display:none`,
     * then `getComputedStyle` returns `null`, so, we do a null-check to make sure
     * that the player doesn't break in these cases.
     * See https://bugzilla.mozilla.org/show_bug.cgi?id=548397 for more details.
     *
     * @borrows computed-style:computedStyle as videojs.computedStyle
     */
    videojs.computedStyle = computedStyle;
    
    /**
     * Export the Dom utilities for use in external plugins
     * and Tech's
     */
    videojs.dom = Dom;
    
    /**
     * Export the Url utilities for use in external plugins
     * and Tech's
     */
    videojs.url = Url;
    
    return videojs;
    
    })));
    
    /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(22)))
    
    /***/ }),
    /* 147 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    //import '../../dep/SplitText';
    
    
    var _gsap = __webpack_require__(12);
    
    var _ScrollMagic = __webpack_require__(35);
    
    var _ScrollMagic2 = _interopRequireDefault(_ScrollMagic);
    
    var _helpers = __webpack_require__(3);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var Title = function () {
        /**
      * Title animation
      *
      * @param {String} el
      * @param {Boolean} logo - play logo animaten (default true)
      */
        function Title(el) {
            var _this = this;
    
            var logo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    
            _classCallCheck(this, Title);
    
            this.el = el;
            this.$el = $(this.el);
            this.logo = logo;
    
            _helpers.$window.on('load', function () {
                _this.init();
            });
        }
    
        _createClass(Title, [{
            key: 'init',
            value: function init() {
                this.createController();
                this.animTitle();
            }
        }, {
            key: 'createController',
            value: function createController() {
                this.controller = new _ScrollMagic2.default.Controller();
            }
        }, {
            key: 'animTitle',
            value: function animTitle() {
                var _this2 = this;
    
                var icon = '\n\t\t\t<svg viewBox="0 0 12 12">\n        <path d="M6,2c2.2,0,4,1.8,4,4s-1.8,4-4,4S2,8.2,2,6S3.8,2,6,2"></path>\n      </svg>';
                var $title = $(this.el + '__title');
                var tl = new _gsap.TimelineMax({ paused: true });
                var splitText = new SplitText($title, {
                    linesClass: this.el.substr(1) + '__title-line',
                    wordsClass: this.el.substr(1) + '__title-word',
                    charsClass: this.el.substr(1) + '__title-char',
                    position: 'absolute'
                });
    
                if ($title.find('.' + splitText.vars.linesClass).length > 1) {
                    splitText.revert();
                    $title.addClass(_helpers.css.small).attr('style', '').attr('data-anim-stagger', 'fade-top');
    
                    new _ScrollMagic2.default.Scene({
                        triggerElement: $title.get(0),
                        triggerHook: 0.85
                    }).on('start', function () {
                        if ($title.hasClass(_helpers.css.anim)) return;
                        $title.addClass(_helpers.css.anim);
                        _gsap.TweenMax.to($title, 0.8, {
                            y: 0,
                            x: 0,
                            ease: Power4.easeOut,
                            onStart: function onStart() {
                                if ($(this.target).data('anim-parent-trigger')) {
                                    $(this.target).parent().addClass(_helpers.css.anim);
                                }
    
                                _gsap.TweenMax.to($(this.target), 0.5, {
                                    alpha: 1,
                                    ease: Power2.easeIn
                                });
                            }
                        });
                    }).addTo(this.controller);
    
                    return;
                }
    
                $(splitText.chars).each(function (index, el) {
                    var $el = $(el);
                    var random = Math.floor(Math.random() * 4) + 2;
    
                    if (_this2.logo) {
                        if (!_helpers.Resp.isMobile) {
                            if ($el.text() === 'e') {
                                $(icon).appendTo($el);
                            }
                        }
                    }
    
                    switch (random) {
                        case 1:
                            break;
                        case 2:
                            $el.css('transform', 'rotateY(180deg)');
                            break;
                        case 3:
                            $el.css('transform', 'rotateX(180deg)');
                            break;
                        case 4:
                            $el.css('transform', 'rotateY(120deg)');
                            break;
                        case 5:
                            $el.css('transform', 'rotateX(120deg)');
                            break;
                        default:
                            return;
                    }
                });
    
                if (navigator.appVersion.indexOf('Win') !== -1) {
                    $title.find('svg').css('margin-top', '13px');
                }
    
                var $path = $title.find('path');
                _gsap.TweenMax.set($path, {
                    drawSVG: '0%',
                    rotation: 128,
                    transformOrigin: 'center center'
                });
    
                tl.fromTo(splitText.lines, 1, {
                    y: '100%'
                }, {
                    y: '0%',
                    ease: Power2.easeOut
                }, 0).to(splitText.chars, 0.8, {
                    transform: 'rotateX(0deg) rotateY(0deg)',
                    ease: Power1.easeOut,
                    delay: 0.2
                }, 0);
                tl.vars.onStart = function () {
                    setTimeout(function () {
                        animPath();
                    }, tl.duration() * 1000 / 3);
                };
    
                function animPath() {
                    $path.each(function (index, el) {
                        var $thisPath = $(el);
    
                        _gsap.TweenMax.to($thisPath, 0.6, {
                            drawSVG: '0% 25%',
                            rotation: 311,
                            transformOrigin: 'center center',
                            ease: Power1.easeOut,
                            delay: Math.floor(Math.random() * 5) / 10
                        });
                    });
                }
    
                new _ScrollMagic2.default.Scene({
                    triggerElement: $title.get(0),
                    triggerHook: 0.85
                }).on('start', function () {
                    if ($title.hasClass(_helpers.css.anim)) return;
                    tl.play();
                    $title.addClass(_helpers.css.anim);
                }).addTo(this.controller);
            }
        }]);
    
        return Title;
    }();
    
    exports.default = Title;
    
    /***/ }),
    /* 148 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.MeetBlockAPI = undefined;
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _gsap = __webpack_require__(12);
    
    var _ScrollMagic = __webpack_require__(35);
    
    var _ScrollMagic2 = _interopRequireDefault(_ScrollMagic);
    
    __webpack_require__(149);
    
    var _title = __webpack_require__(147);
    
    var _title2 = _interopRequireDefault(_title);
    
    var _helpers = __webpack_require__(3);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var MeetBlock = function () {
        function MeetBlock() {
            _classCallCheck(this, MeetBlock);
    
            this.$meet = $('.meet');
            this.$form = this.$meet.find('.meet__form');
            this.$ty = this.$meet.find('.meet__form-ty');
            this.meetHeight = this.$meet.outerHeight();
            this.successTimeout = 6000;
    
            if (this.$meet.length) {
                this.init();
            }
        }
    
        _createClass(MeetBlock, [{
            key: 'init',
            value: function init() {
                this.createController();
                this.checkTitle();
            }
        }, {
            key: 'createController',
            value: function createController() {
                this.controller = new _ScrollMagic2.default.Controller();
            }
        }, {
            key: 'initSuccess',
            value: function initSuccess() {
                var _this = this;
    
                this.$meet.css('height', this.$meet.outerHeight() + 'px');
                this.$form.fadeOut(function () {
                    _this.$ty.fadeIn();
                    _gsap.TweenMax.to(_this.$meet, 1, { height: _this.meetHeight, ease: Power2.easeInOut });
                });
                setTimeout(function () {
                    _this.$ty.fadeOut(function () {
                        _this.$form.find('textarea').css('height', '');
                        _this.$form.find('.' + _helpers.css.fill).removeClass(_helpers.css.fill);
                        _this.$form.find('textarea, input:not([type=hidden])').val('');
                        _this.$form.fadeIn();
                        _this.$meet.css('height', '');
                    });
                }, this.successTimeout);
            }
        }, {
            key: 'checkTitle',
            value: function checkTitle() {
                var $title = $('.meet__title');
                var splitText = new SplitText($title, { linesClass: 'meet__title-line' });
    
                if ($title.find('.' + splitText.vars.linesClass).length > 1) {
                    splitText.revert();
                } else {
                    splitText.revert();
                    new _title2.default('.meet');
                }
            }
        }]);
    
        return MeetBlock;
    }();
    
    var MeetBlockAPI = exports.MeetBlockAPI = new MeetBlock();
    
    /***/ }),
    /* 149 */
    /***/ (function(module, exports, __webpack_require__) {
    
    /* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
     * VERSION: 0.5.7
     * DATE: 2017-06-19
     * UPDATES AND DOCS AT: http://greensock.com
     *
     * @license Copyright (c) 2008-2017, GreenSock. All rights reserved.
     * SplitText is a Club GreenSock membership benefit; You must have a valid membership to use
     * this code without violating the terms of use. Visit http://greensock.com/club/ to sign up or get more details.
     * This work is subject to the software agreement that was issued with your membership.
     * 
     * @author: Jack Doyle, jack@greensock.com
     */
    var _gsScope = (typeof(module) !== "undefined" && module.exports && typeof(global) !== "undefined") ? global : this || window; //helps ensure compatibility with AMD/RequireJS and CommonJS/Node
    (function(window) {
        
        "use strict";
        var _globals = window.GreenSockGlobals || window,
            _namespace = function(ns) {
                var a = ns.split("."),
                    p = _globals, i;
                for (i = 0; i < a.length; i++) {
                    p[a[i]] = p = p[a[i]] || {};
                }
                return p;
            },
            pkg = _namespace("com.greensock.utils"),
            _getText = function(e) {
                var type = e.nodeType,
                    result = "";
                if (type === 1 || type === 9 || type === 11) {
                    if (typeof(e.textContent) === "string") {
                        return e.textContent;
                    } else {
                        for ( e = e.firstChild; e; e = e.nextSibling ) {
                            result += _getText(e);
                        }
                    }
                } else if (type === 3 || type === 4) {
                    return e.nodeValue;
                }
                return result;
            },
            _doc = document,
            _getComputedStyle = _doc.defaultView ? _doc.defaultView.getComputedStyle : function() {},
            _capsExp = /([A-Z])/g,
            _getStyle = function(t, p, cs, str) {
                var result;
                if ((cs = cs || _getComputedStyle(t, null))) {
                    t = cs.getPropertyValue(p.replace(_capsExp, "-$1").toLowerCase());
                    result = (t || cs.length) ? t : cs[p]; //Opera behaves VERY strangely - length is usually 0 and cs[p] is the only way to get accurate results EXCEPT when checking for -o-transform which only works with cs.getPropertyValue()!
                } else if (t.currentStyle) {
                    cs = t.currentStyle;
                    result = cs[p];
                }
                return str ? result : parseInt(result, 10) || 0;
            },
            _isArrayLike = function(e) {
                return (e.length && e[0] && ((e[0].nodeType && e[0].style && !e.nodeType) || (e[0].length && e[0][0]))) ? true : false; //could be an array of jQuery objects too, so accommodate that.
            },
            _flattenArray = function(a) {
                var result = [],
                    l = a.length,
                    i, e, j;
                for (i = 0; i < l; i++) {
                    e = a[i];
                    if (_isArrayLike(e)) {
                        j = e.length;
                        for (j = 0; j < e.length; j++) {
                            result.push(e[j]);
                        }
                    } else {
                        result.push(e);
                    }
                }
                return result;
            },
            _stripExp = /(?:\r|\n|\t\t)/g, //find carriage returns, new line feeds and double-tabs.
            _multipleSpacesExp = /(?:\s\s+)/g,
            _emojiStart = 0xD800,
            _emojiEnd = 0xDBFF,
            _emojiLowStart = 0xDC00,
            _emojiRegionStart = 0x1F1E6,
            _emojiRegionEnd = 0x1F1FF,
            _emojiModStart = 0x1f3fb,
            _emojiModEnd = 0x1f3ff,
            _emojiPairCode = function(s) {
                return ((s.charCodeAt(0) - _emojiStart) << 10) + (s.charCodeAt(1) - _emojiLowStart) + 0x10000;
            },
            _isOldIE = (_doc.all && !_doc.addEventListener),
            _divStart = " style='position:relative;display:inline-block;" + (_isOldIE ? "*display:inline;*zoom:1;'" : "'"), //note: we must use both display:inline-block and *display:inline for IE8 and earlier, otherwise it won't flow correctly (and if we only use display:inline, IE won't render most of the property tweens - very odd).
            _cssClassFunc = function(cssClass, tag) {
                cssClass = cssClass || "";
                var iterate = (cssClass.indexOf("++") !== -1),
                    num = 1;
                if (iterate) {
                    cssClass = cssClass.split("++").join("");
                }
                return function() {
                    return "<" + tag + _divStart + (cssClass ? " class='" + cssClass + (iterate ? num++ : "") + "'>" : ">");
                };
            },
            SplitText = pkg.SplitText = _globals.SplitText = function(element, vars) {
                if (typeof(element) === "string") {
                    element = SplitText.selector(element);
                }
                if (!element) {
                    throw("cannot split a null element.");
                }
                this.elements = _isArrayLike(element) ? _flattenArray(element) : [element];
                this.chars = [];
                this.words = [];
                this.lines = [];
                this._originals = [];
                this.vars = vars || {};
                this.split(vars);
            },
            _swapText = function(element, oldText, newText) {
                var type = element.nodeType;
                if (type === 1 || type === 9 || type === 11) {
                    for (element = element.firstChild; element; element = element.nextSibling) {
                        _swapText(element, oldText, newText);
                    }
                } else if (type === 3 || type === 4) {
                    element.nodeValue = element.nodeValue.split(oldText).join(newText);
                }
            },
            _pushReversed = function(a, merge) {
                var i = merge.length;
                while (--i > -1) {
                    a.push(merge[i]);
                }
            },
            _slice = function(a) { //don't use Array.prototype.slice.call(target, 0) because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()
                var b = [],
                    l = a.length,
                    i;
                for (i = 0; i !== l; b.push(a[i++])) {}
                return b;
            },
            _isBeforeWordDelimiter = function(e, root, wordDelimiter) {
                var next;
                while (e && e !== root) {
                    next = e._next || e.nextSibling;
                    if (next) {
                        return next.textContent.charAt(0) === wordDelimiter;
                    }
                    e = e.parentNode || e._parent;
                }
                return false;
            },
            _deWordify = function(e) {
                var children = _slice(e.childNodes),
                    l = children.length,
                    i, child;
                for (i = 0; i < l; i++) {
                    child = children[i];
                    if (child._isSplit) {
                        _deWordify(child);
                    } else {
                        if (i && child.previousSibling.nodeType === 3) {
                            child.previousSibling.nodeValue += (child.nodeType === 3) ? child.nodeValue : child.firstChild.nodeValue;
                        } else if (child.nodeType !== 3) {
                            e.insertBefore(child.firstChild, child);
                        }
                        e.removeChild(child);
                    }
                }
            },
            _setPositionsAfterSplit = function(element, vars, allChars, allWords, allLines, origWidth, origHeight) {
                var cs = _getComputedStyle(element),
                    paddingLeft = _getStyle(element, "paddingLeft", cs),
                    lineOffsetY = -999,
                    borderTopAndBottom = _getStyle(element, "borderBottomWidth", cs) + _getStyle(element, "borderTopWidth", cs),
                    borderLeftAndRight = _getStyle(element, "borderLeftWidth", cs) + _getStyle(element, "borderRightWidth", cs),
                    padTopAndBottom = _getStyle(element, "paddingTop", cs) + _getStyle(element, "paddingBottom", cs),
                    padLeftAndRight = _getStyle(element, "paddingLeft", cs) + _getStyle(element, "paddingRight", cs),
                    lineThreshold = _getStyle(element, "fontSize") * 0.2,
                    textAlign = _getStyle(element, "textAlign", cs, true),
                    charArray = [],
                    wordArray = [],
                    lineArray = [],
                    wordDelimiter = vars.wordDelimiter || " ",
                    tag = vars.span ? "span" : "div",
                    types = vars.type || vars.split || "chars,words,lines",
                    lines = (allLines && types.indexOf("lines") !== -1) ? [] : null,
                    words = (types.indexOf("words") !== -1),
                    chars = (types.indexOf("chars") !== -1),
                    absolute = (vars.position === "absolute" || vars.absolute === true),
                    linesClass = vars.linesClass,
                    iterateLine = ((linesClass || "").indexOf("++") !== -1),
                    spaceNodesToRemove = [],
                    i, j, l, node, nodes, isChild, curLine, addWordSpaces, style, lineNode, lineWidth, offset;
                if (lines && element.children.length === 1 && element.children[0]._isSplit) { //lines are always split on the main element (not inside nested elements), so if there's only one child, bust apart lines inside that rather than forcing it all into one big line. Like <div><div>lots of stuff</div></div> - if they split the outer one, it'd all be in one line.
                    element = element.children[0];
                }
                if (iterateLine) {
                    linesClass = linesClass.split("++").join("");
                }
    
                //copy all the descendant nodes into an array (we can't use a regular nodeList because it's live and we may need to renest things)
                j = element.getElementsByTagName("*");
                l = j.length;
                nodes = [];
                for (i = 0; i < l; i++) {
                    nodes[i] = j[i];
                }
    
                //for absolute positioning, we need to record the x/y offsets and width/height for every <div>. And even if we're not positioning things absolutely, in order to accommodate lines, we must figure out where the y offset changes so that we can sense where the lines break, and we populate the lines array.
                if (lines || absolute) {
                    for (i = 0; i < l; i++) {
                        node = nodes[i];
                        isChild = (node.parentNode === element);
                        if (isChild || absolute || (chars && !words)) {
                            offset = node.offsetTop;
                            if (lines && isChild && Math.abs(offset - lineOffsetY) > lineThreshold && node.nodeName !== "BR") { //we found some rare occasions where a certain character like &#8209; could cause the offsetTop to be off by 1 pixel, so we build in a threshold.
                                curLine = [];
                                lines.push(curLine);
                                lineOffsetY = offset;
                            }
                            if (absolute) { //record offset x and y, as well as width and height so that we can access them later for positioning. Grabbing them at once ensures we don't trigger a browser paint & we maximize performance.
                                node._x = node.offsetLeft;
                                node._y = offset;
                                node._w = node.offsetWidth;
                                node._h = node.offsetHeight;
                            }
                            if (lines) {
                                if ((node._isSplit && isChild) || (!chars && isChild) || (words && isChild) || (!words && node.parentNode.parentNode === element && !node.parentNode._isSplit)) {
                                    curLine.push(node);
                                    node._x -= paddingLeft;
                                    if (_isBeforeWordDelimiter(node, element, wordDelimiter)) {
                                        node._wordEnd = true;
                                    }
                                }
                                if (node.nodeName === "BR" && node.nextSibling && node.nextSibling.nodeName === "BR") { //two consecutive <br> tags signify a new [empty] line.
                                    lines.push([]);
                                }
                            }
                        }
                    }
                }
    
                for (i = 0; i < l; i++) {
                    node = nodes[i];
                    isChild = (node.parentNode === element);
                    if (node.nodeName === "BR") {
                        if (lines || absolute) {
                            if (node.parentNode) {
                                node.parentNode.removeChild(node);
                            }
                            nodes.splice(i--, 1);
                            l--;
                        } else if (!words) {
                            element.appendChild(node);
                        }
                        continue;
                    }
    
                    if (absolute) {
                        style = node.style;
                        if (!words && !isChild) {
                            node._x += node.parentNode._x;
                            node._y += node.parentNode._y;
                        }
                        style.left = node._x + "px";
                        style.top = node._y + "px";
                        style.position = "absolute";
                        style.display = "block";
                        //if we don't set the width/height, things collapse in older versions of IE and the origin for transforms is thrown off in all browsers.
                        style.width = (node._w + 1) + "px"; //IE is 1px short sometimes. Avoid wrapping
                        style.height = node._h + "px";
                    }
    
                    if (!words && chars) {
                        //we always start out wrapping words in their own <div> so that line breaks happen correctly, but here we'll remove those <div> tags if necessary and renest the characters directly into the element rather than inside the word <div>
                        if (node._isSplit) {
                            node._next = node.nextSibling;
                            node.parentNode.appendChild(node); //put it at the end to keep the order correct.
    
                        } else if (node.parentNode._isSplit) {
                            node._parent = node.parentNode;
                            if (!node.previousSibling && node.firstChild) {
                                node.firstChild._isFirst = true;
                            }
                            if (node.nextSibling && node.nextSibling.textContent === " " && !node.nextSibling.nextSibling) { //if the last node inside a nested element is just a space (like T<span>nested </span>), remove it otherwise it'll get placed in the wrong order. Don't remove it right away, though, because we need to sense when words/characters are before a space like _isBeforeWordDelimiter(). Removing it now would make that a false negative.
                                spaceNodesToRemove.push(node.nextSibling);
                            }
                            node._next = (node.nextSibling && node.nextSibling._isFirst) ? null : node.nextSibling;
                            node.parentNode.removeChild(node);
                            nodes.splice(i--, 1);
                            l--;
                        } else if (!isChild) {
                            offset = (!node.nextSibling && _isBeforeWordDelimiter(node.parentNode, element, wordDelimiter)); //if this is the last letter in the word (and we're not breaking by lines and not positioning things absolutely), we need to add a space afterwards so that the characters don't just mash together
                            if (node.parentNode._parent) {
                                node.parentNode._parent.appendChild(node);
                            }
                            if (offset) {
                                node.parentNode.appendChild(_doc.createTextNode(" "));
                            }
                            if (vars.span) {
                                node.style.display = "inline"; //so that word breaks are honored properly.
                            }
                            charArray.push(node);
                        }
                    } else if (node.parentNode._isSplit && !node._isSplit && node.innerHTML !== "") {
                        wordArray.push(node);
                    } else if (chars && !node._isSplit) {
                        if (vars.span) {
                            node.style.display = "inline";
                        }
                        charArray.push(node);
                    }
                }
    
                i = spaceNodesToRemove.length;
                while (--i > -1) {
                    spaceNodesToRemove[i].parentNode.removeChild(spaceNodesToRemove[i]);
                }
    
                if (lines) {
                    //the next 7 lines just give us the line width in the most reliable way and figure out the left offset (if position isn't relative or absolute). We must set the width along with text-align to ensure everything works properly for various alignments.
                    if (absolute) {
                        lineNode = _doc.createElement(tag);
                        element.appendChild(lineNode);
                        lineWidth = lineNode.offsetWidth + "px";
                        offset = (lineNode.offsetParent === element) ? 0 : element.offsetLeft;
                        element.removeChild(lineNode);
                    }
                    style = element.style.cssText;
                    element.style.cssText = "display:none;"; //to improve performance, set display:none on the element so that the browser doesn't have to worry about reflowing or rendering while we're renesting things. We'll revert the cssText later.
                    //we can't use element.innerHTML = "" because that causes IE to literally delete all the nodes and their content even though we've stored them in an array! So we must loop through the children and remove them.
                    while (element.firstChild) {
                        element.removeChild(element.firstChild);
                    }
                    addWordSpaces = (wordDelimiter === " " && (!absolute || (!words && !chars)));
                    for (i = 0; i < lines.length; i++) {
                        curLine = lines[i];
                        lineNode = _doc.createElement(tag);
                        lineNode.style.cssText = "display:block;text-align:" + textAlign + ";position:" + (absolute ? "absolute;" : "relative;");
                        if (linesClass) {
                            lineNode.className = linesClass + (iterateLine ? i+1 : "");
                        }
                        lineArray.push(lineNode);
                        l = curLine.length;
                        for (j = 0; j < l; j++) {
                            if (curLine[j].nodeName !== "BR") {
                                node = curLine[j];
                                lineNode.appendChild(node);
                                if (addWordSpaces && node._wordEnd) {
                                    lineNode.appendChild(_doc.createTextNode(" "));
                                }
                                if (absolute) {
                                    if (j === 0) {
                                        lineNode.style.top = (node._y) + "px";
                                        lineNode.style.left = (paddingLeft + offset) + "px";
                                    }
                                    node.style.top = "0px";
                                    if (offset) {
                                        node.style.left = (node._x - offset) + "px";
                                    }
                                }
                            }
                        }
                        if (l === 0) { //if there are no nodes in the line (typically meaning there were two consecutive <br> tags, just add a non-breaking space so that things display properly.
                            lineNode.innerHTML = "&nbsp;";
                        } else if (!words && !chars) {
                            _deWordify(lineNode);
                            _swapText(lineNode, String.fromCharCode(160), " ");
                        }
                        if (absolute) {
                            lineNode.style.width = lineWidth;
                            lineNode.style.height = node._h + "px";
                        }
                        element.appendChild(lineNode);
                    }
                    element.style.cssText = style;
                }
    
                //if everything shifts to being position:absolute, the container can collapse in terms of height or width, so fix that here.
                if (absolute) {
                    if (origHeight > element.clientHeight) {
                        element.style.height = (origHeight - padTopAndBottom) + "px";
                        if (element.clientHeight < origHeight) { //IE8 and earlier use a different box model - we must include padding and borders
                            element.style.height = (origHeight + borderTopAndBottom)+ "px";
                        }
                    }
                    if (origWidth > element.clientWidth) {
                        element.style.width = (origWidth - padLeftAndRight) + "px";
                        if (element.clientWidth < origWidth) { //IE8 and earlier use a different box model - we must include padding and borders
                            element.style.width = (origWidth + borderLeftAndRight)+ "px";
                        }
                    }
                }
                _pushReversed(allChars, charArray);
                _pushReversed(allWords, wordArray);
                _pushReversed(allLines, lineArray);
            },
            _splitRawText = function(element, vars, wordStart, charStart) {
                var tag = vars.span ? "span" : "div",
                    types = vars.type || vars.split || "chars,words,lines",
                    words = (types.indexOf("words") !== -1),
                    chars = (types.indexOf("chars") !== -1),
                    absolute = (vars.position === "absolute" || vars.absolute === true),
                    wordDelimiter = vars.wordDelimiter || " ",
                    space = wordDelimiter !== " " ? "" : (absolute ? "&#173; " : " "),
                    wordEnd = vars.span ? "</span>" : "</div>",
                    wordIsOpen = true,
                    text, splitText, i, j, l, character, hasTagStart, emojiPair1, emojiPair2,
                    container = _doc.createElement("div"),
                    parent = element.parentNode;
    
                parent.insertBefore(container, element);
                container.textContent = element.nodeValue;
                parent.removeChild(element);
                element = container;
                text = _getText(element);
                hasTagStart = text.indexOf("<") !== -1;
    
                if (vars.reduceWhiteSpace !== false) {
                    text = text.replace(_multipleSpacesExp, " ").replace(_stripExp, "");
                }
                if (hasTagStart) {
                    text = text.split("<").join("{{LT}}"); //we can't leave "<" in the string, or when we set the innerHTML, it can be interpreted as a node
                }
                l = text.length;
                splitText = ((text.charAt(0) === " ") ? space : "") + wordStart();
                for (i = 0; i < l; i++) {
                    character = text.charAt(i);
                    if (character === wordDelimiter && text.charAt(i-1) !== wordDelimiter && i) {
                        splitText += wordIsOpen ? wordEnd : "";
                        wordIsOpen = false;
                        while (text.charAt(i + 1) === wordDelimiter) { //skip over empty spaces (to avoid making them words)
                            splitText += space;
                            i++;
                        }
                        if (i === l-1) {
                            splitText += space;
                        } else if (text.charAt(i + 1) !== ")") {
                            splitText += space + wordStart();
                            wordIsOpen = true;
                        }
    
                    } else if (character === "{" && text.substr(i, 6) === "{{LT}}") {
                        splitText += chars ? charStart() + "{{LT}}" + "</" + tag + ">" : "{{LT}}";
                        i += 5;
    
                    } else if ((character.charCodeAt(0) >= _emojiStart && character.charCodeAt(0) <= _emojiEnd) || (text.charCodeAt(i+1) >= 0xFE00 && text.charCodeAt(i+1) <= 0xFE0F)) { //special emoji characters use 2 or 4 unicode characters that we must keep together.
                        emojiPair1 = _emojiPairCode(text.substr(i, 2));
                        emojiPair2 = _emojiPairCode(text.substr(i + 2, 2));
                        j = ((emojiPair1 >= _emojiRegionStart && emojiPair1 <= _emojiRegionEnd && emojiPair2 >= _emojiRegionStart && emojiPair2 <= _emojiRegionEnd) || (emojiPair2 >= _emojiModStart && emojiPair2 <= _emojiModEnd)) ? 4 : 2;
                        splitText += (chars && character !== " ") ? charStart() + text.substr(i, j) + "</" + tag + ">" : text.substr(i, j);
                        i += j - 1;
                    } else {
                        splitText += (chars && character !== " ") ? charStart() + character + "</" + tag + ">" : character;
                    }
                }
                element.outerHTML = splitText + (wordIsOpen ? wordEnd : "");
                if (hasTagStart) {
                    _swapText(parent, "{{LT}}", "<"); //note: don't perform this on "element" because that gets replaced with all new elements when we set element.outerHTML.
                }
            },
            _split = function(element, vars, wordStart, charStart) {
                var children = _slice(element.childNodes),
                    l = children.length,
                    absolute = (vars.position === "absolute" || vars.absolute === true),
                    i, child;
    
                if (element.nodeType !== 3 || l > 1) {
                    vars.absolute = false;
                    for (i = 0; i < l; i++) {
                        child = children[i];
                        if (child.nodeType !== 3 || /\S+/.test(child.nodeValue)) {
                            if (absolute && child.nodeType !== 3 && _getStyle(child, "display", null, true) === "inline") { //if there's a child node that's display:inline, switch it to inline-block so that absolute positioning works properly (most browsers don't report offsetTop/offsetLeft properly inside a <span> for example)
                                child.style.display = "inline-block";
                                child.style.position = "relative";
                            }
                            child._isSplit = true;
                            _split(child, vars, wordStart, charStart); //don't split lines on child elements
                        }
                    }
                    vars.absolute = absolute;
                    element._isSplit = true;
                    return;
                }
    
                _splitRawText(element, vars, wordStart, charStart);
    
            },
            p = SplitText.prototype;
    
        p.split = function(vars) {
            if (this.isSplit) {
                this.revert();
            }
            this.vars = vars = vars || this.vars;
            this._originals.length = this.chars.length = this.words.length = this.lines.length = 0;
            var i = this.elements.length,
                tag = vars.span ? "span" : "div",
                absolute = (vars.position === "absolute" || vars.absolute === true),
                wordStart = _cssClassFunc(vars.wordsClass, tag),
                charStart = _cssClassFunc(vars.charsClass, tag),
                origHeight, origWidth, e;
            //we split in reversed order so that if/when we position:absolute elements, they don't affect the position of the ones after them in the document flow (shifting them up as they're taken out of the document flow).
            while (--i > -1) {
                e = this.elements[i];
                this._originals[i] = e.innerHTML;
                origHeight = e.clientHeight;
                origWidth = e.clientWidth;
                _split(e, vars, wordStart, charStart);
                _setPositionsAfterSplit(e, vars, this.chars, this.words, this.lines, origWidth, origHeight);
            }
            this.chars.reverse();
            this.words.reverse();
            this.lines.reverse();
            this.isSplit = true;
            return this;
        };
    
        p.revert = function() {
            if (!this._originals) {
                throw("revert() call wasn't scoped properly.");
            }
            var i = this._originals.length;
            while (--i > -1) {
                this.elements[i].innerHTML = this._originals[i];
            }
            this.chars = [];
            this.words = [];
            this.lines = [];
            this.isSplit = false;
            return this;
        };
    
        SplitText.selector = window.$ || window.jQuery || function(e) {
            var selector = window.$ || window.jQuery;
            if (selector) {
                SplitText.selector = selector;
                return selector(e);
            }
            return (typeof(document) === "undefined") ? e : (document.querySelectorAll ? document.querySelectorAll(e) : document.getElementById((e.charAt(0) === "#") ? e.substr(1) : e));
        };
        SplitText.version = "0.5.7";
        
    })(_gsScope);
    
    //export to AMD/RequireJS and CommonJS/Node (precursor to full modular build system coming at a later date)
    (function(name) {
        "use strict";
        var getGlobal = function() {
            return (_gsScope.GreenSockGlobals || _gsScope)[name];
        };
        if (typeof(module) !== "undefined" && module.exports) { //node
            module.exports = getGlobal();
        } else if (true) { //AMD
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (getGlobal),
                    __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
                    (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
                    __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }
    }("SplitText"));
    /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(22)))
    
    /***/ }),
    /* 150 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.TagsAPI = undefined;
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _helpers = __webpack_require__(3);
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var Tags = function () {
        function Tags() {
            _classCallCheck(this, Tags);
    
            this.$btn = function () {
                return $('.tags__btn');
            };
            this.$text = function () {
                return $('.tags__btn > span');
            };
            this.$tagsContainer = function () {
                return $('.tags__cont');
            };
            this.$tags = this.$tagsContainer().find('.tags__item');
            this.tagHeight = this.$tags.height();
            this.$tagsMaxCount = this.$tagsContainer().data('max-tags');
            this.$tagsOpenTitle = this.$tagsContainer().data('open-title');
            this.$tagsCloseTitle = this.$tagsContainer().data('close-title');
            this.init();
        }
    
        _createClass(Tags, [{
            key: 'init',
            value: function init() {
                var _this = this;
    
                if (window.tagsClosed === undefined) window.tagsClosed = true;
                this.setBtnTitle();
                this.initLinkToggle();
    
                var containerHeight = this.$tagsContainer().height();
                if (this.$tagsMaxCount < containerHeight / this.tagHeight && this.$btn().length) {
                    this.$btn().show();
                    if (window.tagsClosed) {
                        this.$btn().removeClass(_helpers.css.active);
                        this.$tagsContainer().height(this.$tagsMaxCount * this.tagHeight);
                        this.initHideBtn(this.$tagsContainer(), this.$tagsOpenTitle, this.$tagsCloseTitle, containerHeight, this.tagHeight * this.$tagsMaxCount);
                    } else {
                        this.$btn().addClass(_helpers.css.active);
                        this.initHideBtn(this.$tagsContainer(), this.$tagsOpenTitle, this.$tagsCloseTitle, containerHeight, this.tagHeight * this.$tagsMaxCount);
                    }
    
                    _helpers.$window.on('resize', function () {
                        document.getElementsByClassName('tags__cont')[0].removeAttribute("style");
                        _this.$btn().unbind('click tap');
                        _this.init();
                    });
                } else {
                    this.$btn().hide();
                }
            }
        }, {
            key: 'setBtnTitle',
            value: function setBtnTitle() {
                window.tagsClosed ? this.$text().text(this.$tagsOpenTitle).attr('data-hover', this.$tagsOpenTitle) : this.$text().text(this.$tagsCloseTitle).attr('data-hover', this.$tagsCloseTitle);
            }
        }, {
            key: 'initHideBtn',
            value: function initHideBtn($container, openText, closeText, max, min) {
                this.$btn().on('click tap', function (e) {
                    var $this = $(this),
                        $text = $this.find('span'),
                        duration = 400;
    
                    if ($this.hasClass('is-active')) {
                        window.tagsClosed = true;
                        $container.animate({
                            height: min + 'px'
                        }, duration);
                        $text.text(openText).attr('data-hover', openText);
                    } else {
                        window.tagsClosed = false;
                        $text.text(closeText).attr('data-hover', closeText);
                        $container.animate({
                            height: max + 'px'
                        }, duration);
                    }
                    $this.toggleClass(_helpers.css.active);
                });
            }
        }, {
            key: 'initLinkToggle',
            value: function initLinkToggle() {
                this.$tags.on('click tap', function () {
                    var $this = $(this);
    
                    $this.toggleClass('active');
                });
            }
        }]);
    
        return Tags;
    }();
    
    var TagsAPI = exports.TagsAPI = new Tags();
    
    /***/ }),
    /* 151 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.ScreenAPI = undefined;
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _gsap = __webpack_require__(12);
    
    __webpack_require__(61);
    
    var _ScrollMagic = __webpack_require__(35);
    
    var _ScrollMagic2 = _interopRequireDefault(_ScrollMagic);
    
    var _dot = __webpack_require__(62);
    
    var _dot2 = _interopRequireDefault(_dot);
    
    __webpack_require__(52);
    
    var _sector = __webpack_require__(388);
    
    var _sector2 = _interopRequireDefault(_sector);
    
    var _helpers = __webpack_require__(3);
    
    var _link = __webpack_require__(21);
    
    var _link2 = _interopRequireDefault(_link);
    
    var _preloader = __webpack_require__(78);
    
    var _lazyVideo = __webpack_require__(152);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var Screen = function () {
        function Screen() {
            var _this2 = this;
    
            _classCallCheck(this, Screen);
    
            this.screen = '.screen';
            this.$screen = $('.screen');
            this.$slider = $('.screen__slider');
            this.$screenCanvas = $('.screen__canvas');
            this.$scrollBtn = $('.screen__scroll');
            this.$video = function () {
                return _this2.$screen.find('video');
            };
            this.$title = this.$screen.find('.screen__title');
            this.startTl = new _gsap.TimelineMax({ paused: true });
            this.$button = this.$screen.find('.screen__btn');
            this.$svg = this.$screen.find('.screen__svg');
            this.$sector = this.$svg.find('.screen__svg-path');
            this.$blogDescription = $('.screen__description_blog');
            this.$mainScreenDescr = $('.screen__description-bot');
            this.sliderSpeed = 6;
            this.sector = {};
        }
    
        _createClass(Screen, [{
            key: 'init',
            value: function init() {
                var _this3 = this;
    
                if (this.$screen.length) {
                    if (!this.$screenCanvas.length) return;
    
                    this.setScreenHeight();
                    this.initScrollBtn();
                    if (_helpers.Resp.isDesk) {
                        setTimeout(function () {
                            _this3.initVideo();
                        }, 0);
                    }
                    this.createController();
                    this.createAnimTitle();
                    this.createAnimButton();
                    this.createAnimLine();
                    this.createAnimSector();
                    this.createAnimSectorSmall();
                    this.prepareText();
                    this.dot();
    
                    if (!_helpers.Resp.isDesk && _helpers.currentPage === 'home') {
                        this.interval = setInterval(function () {
                            if (!document.hidden) {
                                _this3.changeText();
                            }
                        }, this.sliderSpeed * 1000);
                    }
                }
            }
        }, {
            key: 'dot',
            value: function dot() {
                if (this.$blogDescription.length === 0) {
                    new _dot2.default(this.$mainScreenDescr);
                }
            }
        }, {
            key: 'setScreenHeight',
            value: function setScreenHeight() {
                var mainScreen = document.getElementsByClassName('screen')[0];
                if (!_helpers.Resp.isMobile) getFullHeight(mainScreen);
                if (_helpers.Resp.isMobile && window.innerWidth > window.innerHeight) getFullHeight(mainScreen);
    
                if (_helpers.Resp.isMobile) {
                    _helpers.$window.on('resize', function () {
                        if (window.innerWidth > window.innerHeight) {
                            getFullHeight(mainScreen);
                        } else {
                            mainScreen.removeAttribute('style');
                        }
                    });
                } else {
                    window.addEventListener('orientationchange', function () {
                        getFullHeight(mainScreen);
                        if (_helpers.Resp.isTablet && _helpers.$window.width() > _helpers.$window.height()) {
                            var fixHeight = document.documentElement.clientWidth * 720 / 1024;
                            mainScreen.style.setProperty('min-height', fixHeight + 'px', '');
                        }
                    });
                }
    
                function getFullHeight(screen) {
                    if ($('show-video').length) return false;
    
                    screen.style.setProperty('height', document.documentElement.clientHeight + 'px', '');
                    screen.style.setProperty('min-height', document.documentElement.clientHeight + 'px', '');
                }
    
                if (_helpers.Resp.isTablet && _helpers.$window.width() > _helpers.$window.height()) {
                    if (screenCanvas.classList.contains('screen__canvas_vertical-arc')) {
                        mainScreen.style.setProperty('min-height', 100 + 'vh', '');
                        mainScreen.style.setProperty('margin-top', 0 + 'px', '');
                    } else {
                        var fixHeight = document.documentElement.clientWidth * 780 / 1024;
                        mainScreen.style.setProperty('min-height', fixHeight + 'px', '');
    
                        if (fixHeight > document.documentElement.clientHeight) {
                            mainScreen.style.setProperty('margin-top', document.documentElement.clientHeight - fixHeight + 'px', '');
                            $('.preloader').css('margin-top', document.documentElement.clientHeight - fixHeight + 'px');
                        }
                    }
                } else {
                    mainScreen.style.setProperty('margin-top', 'auto', '');
                    $('.preloader').css('margin-top', 'auto');
                }
            }
        }, {
            key: 'prepareText',
            value: function prepareText() {
                var _this4 = this;
    
                var textTl = new _gsap.TimelineMax();
                var $item = this.$slider.children();
                var splitText = [];
                var speed = 1;
    
                if ($item.hasClass('screen__slider-item')) {
                    $item.each(function (index, el) {
                        splitText.push(new SplitText(el, {
                            linesClass: _this4.screen.substr(1) + '__slider-item-line',
                            wordsClass: _this4.screen.substr(1) + '__slider-item-word',
                            charsClass: _this4.screen.substr(1) + '__slider-item-char'
                        }));
                    });
                } else return false;
    
                textTl.staggerTo($($(splitText[0].words).toArray().reverse()), speed, {
                    autoAlpha: 1,
                    y: 0,
                    ease: Power1.easeOut
                }, 0.175);
    
                this.startTl.add(textTl, 0.75);
    
                $item.eq(0).addClass(_helpers.css.active);
    
                this.changeText = function () {
                    var changeTextTl = new _gsap.TimelineMax();
                    var currentIndex = $item.filter('.' + _helpers.css.active).index();
                    var nextIndex = currentIndex + 1 < $item.length ? currentIndex + 1 : 0;
    
                    changeTextTl.staggerTo($($(splitText[currentIndex].words).toArray().reverse()), speed / 2, {
                        autoAlpha: 0,
                        y: 15,
                        ease: Power1.easeIn
                    }, 0.1).staggerFromTo($($(splitText[nextIndex].words).toArray().reverse()), speed, {
                        autoAlpha: 0,
                        y: -30
                    }, {
                        autoAlpha: 1,
                        y: 0,
                        ease: Power1.easeOut
                    }, 0.175).add(function () {
                        $item.eq(currentIndex).removeClass(_helpers.css.active);
                        $item.eq(nextIndex).addClass(_helpers.css.active);
                    });
                };
            }
        }, {
            key: 'createAnimSectorSmall',
            value: function createAnimSectorSmall() {
                var sectorSmallTl = new _gsap.TimelineMax();
                this.$sectorSmall = this.$screen.find('.screen__svg-circle circle');
                var speed = 1;
    
                _gsap.TweenMax.set(this.$sectorSmall, {
                    alpha: 1,
                    drawSVG: '100% 100%',
                    rotation: -90,
                    transformOrigin: 'center center'
                });
    
                sectorSmallTl.to(this.$sectorSmall, speed, {
                    drawSVG: '0% 25%',
                    rotation: -135,
                    transformOrigin: 'center center',
                    onComplete: function onComplete() {
                        $('.preloader').hide();
                    }
                });
    
                this.startTl.add(sectorSmallTl, 0.5);
            }
        }, {
            key: 'nextSlide',
            value: function nextSlide() {
                var _this5 = this;
    
                this.nextTl = new _gsap.TimelineMax();
                var speed = 1;
    
                this.nextTl.set(this.$sectorSmall, {
                    drawSVG: '0% 25%',
                    rotation: -135,
                    transformOrigin: 'center center'
                }).to(this.$sectorSmall, speed, {
                    drawSVG: '75% 100%',
                    rotation: -45,
                    transformOrigin: 'center center'
                });
    
                setTimeout(function () {
                    //this.sector.nextSlide();
                    if (!_this5.$screen.hasClass(_this5.screen.substr(1) + '_no-sector')) {
                        //this.sector.nextSlide();
                    }
                }, speed / 3 * 1000);
                this.changeText();
            }
        }, {
            key: 'createAnimSector',
            value: function createAnimSector() {
                var _this6 = this;
    
                this.sector = new _sector2.default();
    
                this.startTl.add(function () {
                    _this6.sector.startAnim();
                }, 0.25);
            }
        }, {
            key: 'createAnimLine',
            value: function createAnimLine() {
                var $line = $('.screen__svg-line path');
                var lineTl = new _gsap.TimelineMax();
                var speed = 0.5;
    
                _gsap.TweenMax.set($line, {
                    alpha: 1,
                    drawSVG: '0% 0%'
                });
    
                lineTl.to($line, speed, {
                    drawSVG: '66.666% 33.333%',
                    ease: Power1.easeIn
                }).to($line, speed, {
                    drawSVG: '100% 100%',
                    ease: Power1.easeOut
                });
    
                this.startTl.add(lineTl, 0);
            }
        }, {
            key: 'createAnimButton',
            value: function createAnimButton() {
                var _this7 = this;
    
                this.startTl.add(function () {
                    if (_this7.$button.get(0) !== undefined && _this7.$button.get(0).hasAttribute('data-prepare-anim')) {
                        _this7.$button.removeAttr('data-prepare-anim');
                    }
                }, 1.25);
            }
        }, {
            key: 'playStartAnim',
            value: function playStartAnim() {
                var _this8 = this;
    
                _preloader.PreloaderAPI.wait().then(function () {
                    _this8.startTl.play();
                });
            }
        }, {
            key: 'createAnimTitle',
            value: function createAnimTitle() {
                var _this9 = this;
    
                _helpers.$window.on('load', function () {
                    _this9.titleTl = new _gsap.TimelineMax();
                    _this9.$title.each(function (index, el) {
    
                        if (longestWord(_this9.$title.text()) > 8) {
                            _this9.$title.addClass('screen__title_small');
                        }
    
                        _this9.animTitle(el, index);
    
                        // Get longest word length:
                        function longer(champ, contender) {
                            return contender.length > champ.length ? contender : champ;
                        }
    
                        function longestWord(str) {
                            var words = str.split(' ');
    
                            return words.reduce(longer).length;
                        }
                    });
    
                    _this9.startTl.add(_this9.titleTl, 0.75);
                    _this9.playStartAnim();
                });
            }
        }, {
            key: 'animTitle',
            value: function animTitle(el, index) {
                var $title = $(el);
                var tl = new _gsap.TimelineMax();
    
                var splitText = new SplitText($title, {
                    linesClass: this.screen.substr(1) + '__title-line',
                    wordsClass: this.screen.substr(1) + '__title-word',
                    charsClass: this.screen.substr(1) + '__title-char',
                    position: 'relative'
                });
    
                tl.set($title.parent(), { alpha: 1 });
    
                $(splitText.chars).each(function (index, el) {
                    var $el = $(el);
                    var random = Math.floor(Math.random() * 4) + 2;
    
                    switch (random) {
                        case 1:
                            break;
                        case 2:
                            $el.css('transform', 'rotateY(180deg)');
                            break;
                        case 3:
                            $el.css('transform', 'rotateX(180detg)');
                            break;
                        case 4:
                            $el.css('transform', 'rotateY(120deg)');
                            break;
                        case 5:
                            $el.css('transform', 'rotateX(120deg)');
                            break;
                        default:
                            return;
                    }
                });
    
                tl.fromTo(splitText.lines, 1, {
                    y: '100%',
                    opacity: 0
                }, {
                    y: '0%',
                    opacity: 1,
                    ease: Power2.easeOut
                }, 0).to(splitText.chars, 0.8, {
                    transform: 'rotateX(0deg) rotateY(0deg)',
                    ease: Power1.easeOut,
                    delay: 0.2
                }, 0);
    
                this.titleTl.add(tl, index * 0.25);
            }
        }, {
            key: 'initScrollBtn',
            value: function initScrollBtn() {
                var _this = this;
                var $btn = this.$scrollBtn;
                var $btnText = $btn.find('span');
                this.scrollTl = new _gsap.TimelineMax();
                var speed = 0.5;
    
                _this.startTl.add(_this.scrollTl, 1.75);
    
                new _link2.default($btn, { type: 'vertical' });
    
                $btnText.addClass(_helpers.css.offTransition);
    
                var $btnCircle = $btn.find('path');
                _gsap.TweenMax.set($btnText, { y: 21 });
                setTimeout(function () {
                    $btnText.removeClass(_helpers.css.offTransition);
                }, 0);
    
                _gsap.TweenMax.set($btn, { alpha: 1 });
    
                _gsap.TweenMax.set($btnCircle, {
                    drawSVG: '0% 0%',
                    rotation: 90,
                    transformOrigin: 'center center'
                });
    
                this.scrollTl.to($btnText, speed, {
                    y: 0,
                    ease: Power1.easeOut,
                    onStart: function onStart() {
                        $(this.target).addClass(_helpers.css.offTransition);
                    },
                    onComplete: function onComplete() {
                        $(this.target).removeClass(_helpers.css.offTransition);
                    }
                }, 0).staggerTo($($btnCircle.toArray().reverse()), speed, {
                    drawSVG: '0% 90%',
                    rotation: 135,
                    transformOrigin: 'center center',
                    ease: Power1.easeIn,
                    onComplete: function onComplete() {
                        _gsap.TweenMax.to(this.target, speed, {
                            drawSVG: '66.666% 100%',
                            rotation: 320,
                            transformOrigin: 'center center',
                            ease: Power1.easeOut,
                            onComplete: function onComplete() {
                                setTimeout(function () {
                                    _this.$scrollBtn.removeClass(_helpers.css.active);
                                }, 1000);
                            }
                        });
                    }
                }, 0.125, '-=0.1');
    
                $btn.on('click', function () {
                    _helpers.$scrolledElements.animate({ scrollTop: window.innerHeight }, 1000, 'linear', function () {
                        _helpers.$body.removeClass(_helpers.css.overflow);
                    });
    
                    _this.$screen.off('mousewheel DOMMouseScroll');
                });
    
                if (_helpers.Resp.isDesk) {
                    if (!$('.page-404').length > 0) {
                        _preloader.PreloaderAPI.wait().then(function () {
                            initScreenScroll();
                        });
    
                        // $body.addClass(css.overflow);
                        // PreloaderAPI.wait().then(() => {
                        // 	if ($body.hasClass(css.overflow)) {
                        // 		initScreenScroll();
                        // 	}
                        // });
                    }
                }
    
                function initScreenScroll() {
                    _this.$screen.on('mousewheel DOMMouseScroll', function (event) {
                        if (!(event.originalEvent.wheelDelta > 0 || event.originalEvent.detail < 0)) {
                            _gsap.TweenMax.to(_helpers.$window, 1, {
                                scrollTo: window.innerHeight,
                                ease: Power2.easeInOut,
                                onComplete: function onComplete() {
                                    _helpers.$body.removeClass(_helpers.css.overflow);
                                }
                            });
    
                            _this.$screen.off('mousewheel DOMMouseScroll');
                        }
                    });
                }
            }
        }, {
            key: 'initVideo',
            value: function () {
                var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                    var _this10 = this;
    
                    var $video;
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    $video = this.$video();
    
                                    if (!($video.length && _helpers.currentPage === 'home')) {
                                        _context.next = 8;
                                        break;
                                    }
    
                                    _context.next = 4;
                                    return _lazyVideo.lazyVideo.wait();
    
                                case 4:
                                    $video.get(0).load();
                                    $video.get(0).addEventListener('loadeddata', function () {
                                        $video.get(0).play();
                                        _gsap.TweenMax.set($video.closest(_this10.screen + '__video'), { alpha: 1 });
    
                                        new _ScrollMagic2.default.Scene({
                                            triggerElement: _this10.$screen.get(0),
                                            triggerHook: 0,
                                            duration: '100%'
                                        }).on('enter', function () {
                                            _this10.interval = setInterval(function () {
                                                if (!document.hidden) {
                                                    _this10.nextSlide();
                                                }
                                            }, _this10.sliderSpeed * 1000);
                                        }).on('leave', function () {
                                            clearInterval(_this10.interval);
                                        }).addTo(_this10.controller);
                                    });
                                    _context.next = 20;
                                    break;
    
                                case 8:
                                    if (!($video.length && !(_helpers.currentPage.split(' ')[0] === 'about'))) {
                                        _context.next = 15;
                                        break;
                                    }
    
                                    _context.next = 11;
                                    return _lazyVideo.lazyVideo.wait();
    
                                case 11:
                                    $video.get(0).load();
                                    $video.get(0).addEventListener('loadeddata', function () {
                                        $video.get(0).play();
                                        _gsap.TweenMax.set($video.closest(_this10.screen + '__video'), { alpha: 1 });
                                    });
                                    _context.next = 20;
                                    break;
    
                                case 15:
                                    if (!$video.length) {
                                        _context.next = 20;
                                        break;
                                    }
    
                                    _context.next = 18;
                                    return _lazyVideo.lazyVideo.wait();
    
                                case 18:
                                    $video.get(0).load();
                                    $video.get(0).addEventListener('loadeddata', function () {
                                        $video.get(0).pause();
                                        _gsap.TweenMax.set($video.closest(_this10.screen + '__video'), { alpha: 1 });
                                    });
    
                                case 20:
                                case 'end':
                                    return _context.stop();
                            }
                        }
                    }, _callee, this);
                }));
    
                function initVideo() {
                    return _ref.apply(this, arguments);
                }
    
                return initVideo;
            }()
        }, {
            key: 'createController',
            value: function createController() {
                this.controller = new _ScrollMagic2.default.Controller();
            }
        }]);
    
        return Screen;
    }();
    
    var ScreenAPI = exports.ScreenAPI = new Screen();
    
    /***/ }),
    /* 152 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.lazyVideo = undefined;
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _helpers = __webpack_require__(3);
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var LazyVideo = function () {
        function LazyVideo() {
            _classCallCheck(this, LazyVideo);
    
            this.$el = $('video[data-lazy-src]');
    
            this.init();
        }
    
        _createClass(LazyVideo, [{
            key: 'init',
            value: function init() {
                var _this = this;
    
                this.resolve = new Promise(function (resolve) {
                    _helpers.$window.on('load', function () {
                        setTimeout(function () {
                            _this.$el.each(function (index, el) {
                                if (!_helpers.Resp.isMobile) {
                                    $(el).each(function (index2, el2) {
                                        $(el2).children().attr('src', $(el2).children().data('lazy-src'));
                                    });
                                }
                            });
                            resolve();
                        }, 3000);
                    });
                });
            }
        }, {
            key: 'wait',
            value: function wait() {
                return this.resolve;
            }
        }]);
    
        return LazyVideo;
    }();
    
    var lazyVideo = exports.lazyVideo = new LazyVideo();
    
    /***/ }),
    /* 153 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.PaginationAPI = undefined;
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _link = __webpack_require__(21);
    
    var _link2 = _interopRequireDefault(_link);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var Pagination = function () {
        function Pagination() {
            _classCallCheck(this, Pagination);
    
            this.$pagination = function () {
                return $('.pagination');
            };
    
            this.init();
        }
    
        _createClass(Pagination, [{
            key: 'init',
            value: function init() {
                if (this.$pagination().length !== 0) {
                    this.initPagination();
                }
            }
        }, {
            key: 'initPagination',
            value: function initPagination() {
                var $arrows = $('.pagination__arrow');
    
                new _link2.default($arrows, {
                    type: 'single-reverse'
                });
            }
        }]);
    
        return Pagination;
    }();
    
    var PaginationAPI = exports.PaginationAPI = new Pagination();
    
    /***/ }),
    /* 154 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    __webpack_require__(155);
    
    __webpack_require__(77);
    
    __webpack_require__(357);
    
    __webpack_require__(589);
    
    /***/ }),
    /* 155 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    /* WEBPACK VAR INJECTION */(function(global) {
    
    __webpack_require__(156);
    
    __webpack_require__(353);
    
    __webpack_require__(354);
    
    if (global._babelPolyfill) {
      throw new Error("only one instance of babel-polyfill is allowed");
    }
    global._babelPolyfill = true;
    
    var DEFINE_PROPERTY = "defineProperty";
    function define(O, key, value) {
      O[key] || Object[DEFINE_PROPERTY](O, key, {
        writable: true,
        configurable: true,
        value: value
      });
    }
    
    define(String.prototype, "padLeft", "".padStart);
    define(String.prototype, "padRight", "".padEnd);
    
    "pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
      [][key] && define(Array, key, Function.call.bind([][key]));
    });
    /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(22)))
    
    /***/ }),
    /* 156 */
    /***/ (function(module, exports, __webpack_require__) {
    
    __webpack_require__(157);
    __webpack_require__(159);
    __webpack_require__(160);
    __webpack_require__(161);
    __webpack_require__(162);
    __webpack_require__(163);
    __webpack_require__(164);
    __webpack_require__(165);
    __webpack_require__(166);
    __webpack_require__(167);
    __webpack_require__(168);
    __webpack_require__(169);
    __webpack_require__(170);
    __webpack_require__(171);
    __webpack_require__(172);
    __webpack_require__(173);
    __webpack_require__(175);
    __webpack_require__(176);
    __webpack_require__(177);
    __webpack_require__(178);
    __webpack_require__(179);
    __webpack_require__(180);
    __webpack_require__(181);
    __webpack_require__(182);
    __webpack_require__(183);
    __webpack_require__(184);
    __webpack_require__(185);
    __webpack_require__(186);
    __webpack_require__(187);
    __webpack_require__(188);
    __webpack_require__(189);
    __webpack_require__(190);
    __webpack_require__(191);
    __webpack_require__(192);
    __webpack_require__(193);
    __webpack_require__(194);
    __webpack_require__(195);
    __webpack_require__(196);
    __webpack_require__(197);
    __webpack_require__(198);
    __webpack_require__(199);
    __webpack_require__(200);
    __webpack_require__(201);
    __webpack_require__(202);
    __webpack_require__(203);
    __webpack_require__(204);
    __webpack_require__(205);
    __webpack_require__(206);
    __webpack_require__(207);
    __webpack_require__(208);
    __webpack_require__(209);
    __webpack_require__(210);
    __webpack_require__(211);
    __webpack_require__(212);
    __webpack_require__(213);
    __webpack_require__(214);
    __webpack_require__(215);
    __webpack_require__(216);
    __webpack_require__(217);
    __webpack_require__(218);
    __webpack_require__(219);
    __webpack_require__(220);
    __webpack_require__(221);
    __webpack_require__(222);
    __webpack_require__(223);
    __webpack_require__(224);
    __webpack_require__(225);
    __webpack_require__(226);
    __webpack_require__(227);
    __webpack_require__(228);
    __webpack_require__(229);
    __webpack_require__(230);
    __webpack_require__(231);
    __webpack_require__(232);
    __webpack_require__(233);
    __webpack_require__(234);
    __webpack_require__(235);
    __webpack_require__(237);
    __webpack_require__(238);
    __webpack_require__(240);
    __webpack_require__(241);
    __webpack_require__(242);
    __webpack_require__(243);
    __webpack_require__(244);
    __webpack_require__(245);
    __webpack_require__(246);
    __webpack_require__(248);
    __webpack_require__(249);
    __webpack_require__(250);
    __webpack_require__(251);
    __webpack_require__(252);
    __webpack_require__(253);
    __webpack_require__(254);
    __webpack_require__(255);
    __webpack_require__(256);
    __webpack_require__(257);
    __webpack_require__(258);
    __webpack_require__(259);
    __webpack_require__(260);
    __webpack_require__(103);
    __webpack_require__(261);
    __webpack_require__(262);
    __webpack_require__(129);
    __webpack_require__(263);
    __webpack_require__(264);
    __webpack_require__(265);
    __webpack_require__(266);
    __webpack_require__(267);
    __webpack_require__(132);
    __webpack_require__(134);
    __webpack_require__(135);
    __webpack_require__(268);
    __webpack_require__(269);
    __webpack_require__(270);
    __webpack_require__(271);
    __webpack_require__(272);
    __webpack_require__(273);
    __webpack_require__(274);
    __webpack_require__(275);
    __webpack_require__(276);
    __webpack_require__(277);
    __webpack_require__(278);
    __webpack_require__(279);
    __webpack_require__(280);
    __webpack_require__(281);
    __webpack_require__(282);
    __webpack_require__(283);
    __webpack_require__(284);
    __webpack_require__(285);
    __webpack_require__(286);
    __webpack_require__(287);
    __webpack_require__(288);
    __webpack_require__(289);
    __webpack_require__(290);
    __webpack_require__(291);
    __webpack_require__(292);
    __webpack_require__(293);
    __webpack_require__(294);
    __webpack_require__(295);
    __webpack_require__(296);
    __webpack_require__(297);
    __webpack_require__(298);
    __webpack_require__(299);
    __webpack_require__(300);
    __webpack_require__(301);
    __webpack_require__(302);
    __webpack_require__(303);
    __webpack_require__(304);
    __webpack_require__(305);
    __webpack_require__(306);
    __webpack_require__(307);
    __webpack_require__(308);
    __webpack_require__(309);
    __webpack_require__(310);
    __webpack_require__(311);
    __webpack_require__(312);
    __webpack_require__(313);
    __webpack_require__(314);
    __webpack_require__(315);
    __webpack_require__(316);
    __webpack_require__(317);
    __webpack_require__(318);
    __webpack_require__(319);
    __webpack_require__(320);
    __webpack_require__(321);
    __webpack_require__(322);
    __webpack_require__(323);
    __webpack_require__(324);
    __webpack_require__(325);
    __webpack_require__(326);
    __webpack_require__(327);
    __webpack_require__(328);
    __webpack_require__(329);
    __webpack_require__(330);
    __webpack_require__(331);
    __webpack_require__(332);
    __webpack_require__(333);
    __webpack_require__(334);
    __webpack_require__(335);
    __webpack_require__(336);
    __webpack_require__(337);
    __webpack_require__(338);
    __webpack_require__(339);
    __webpack_require__(340);
    __webpack_require__(341);
    __webpack_require__(342);
    __webpack_require__(343);
    __webpack_require__(344);
    __webpack_require__(345);
    __webpack_require__(346);
    __webpack_require__(347);
    __webpack_require__(348);
    __webpack_require__(349);
    __webpack_require__(350);
    __webpack_require__(351);
    __webpack_require__(352);
    module.exports = __webpack_require__(26);
    
    
    /***/ }),
    /* 157 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // ECMAScript 6 symbols shim
    var global = __webpack_require__(2);
    var has = __webpack_require__(13);
    var DESCRIPTORS = __webpack_require__(7);
    var $export = __webpack_require__(0);
    var redefine = __webpack_require__(15);
    var META = __webpack_require__(36).KEY;
    var $fails = __webpack_require__(4);
    var shared = __webpack_require__(63);
    var setToStringTag = __webpack_require__(53);
    var uid = __webpack_require__(41);
    var wks = __webpack_require__(6);
    var wksExt = __webpack_require__(112);
    var wksDefine = __webpack_require__(83);
    var enumKeys = __webpack_require__(158);
    var isArray = __webpack_require__(66);
    var anObject = __webpack_require__(1);
    var toIObject = __webpack_require__(17);
    var toPrimitive = __webpack_require__(27);
    var createDesc = __webpack_require__(40);
    var _create = __webpack_require__(45);
    var gOPNExt = __webpack_require__(115);
    var $GOPD = __webpack_require__(18);
    var $DP = __webpack_require__(8);
    var $keys = __webpack_require__(43);
    var gOPD = $GOPD.f;
    var dP = $DP.f;
    var gOPN = gOPNExt.f;
    var $Symbol = global.Symbol;
    var $JSON = global.JSON;
    var _stringify = $JSON && $JSON.stringify;
    var PROTOTYPE = 'prototype';
    var HIDDEN = wks('_hidden');
    var TO_PRIMITIVE = wks('toPrimitive');
    var isEnum = {}.propertyIsEnumerable;
    var SymbolRegistry = shared('symbol-registry');
    var AllSymbols = shared('symbols');
    var OPSymbols = shared('op-symbols');
    var ObjectProto = Object[PROTOTYPE];
    var USE_NATIVE = typeof $Symbol == 'function';
    var QObject = global.QObject;
    // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
    var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
    
    // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
    var setSymbolDesc = DESCRIPTORS && $fails(function () {
      return _create(dP({}, 'a', {
        get: function () { return dP(this, 'a', { value: 7 }).a; }
      })).a != 7;
    }) ? function (it, key, D) {
      var protoDesc = gOPD(ObjectProto, key);
      if (protoDesc) delete ObjectProto[key];
      dP(it, key, D);
      if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
    } : dP;
    
    var wrap = function (tag) {
      var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
      sym._k = tag;
      return sym;
    };
    
    var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
      return typeof it == 'symbol';
    } : function (it) {
      return it instanceof $Symbol;
    };
    
    var $defineProperty = function defineProperty(it, key, D) {
      if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
      anObject(it);
      key = toPrimitive(key, true);
      anObject(D);
      if (has(AllSymbols, key)) {
        if (!D.enumerable) {
          if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
          it[HIDDEN][key] = true;
        } else {
          if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
          D = _create(D, { enumerable: createDesc(0, false) });
        } return setSymbolDesc(it, key, D);
      } return dP(it, key, D);
    };
    var $defineProperties = function defineProperties(it, P) {
      anObject(it);
      var keys = enumKeys(P = toIObject(P));
      var i = 0;
      var l = keys.length;
      var key;
      while (l > i) $defineProperty(it, key = keys[i++], P[key]);
      return it;
    };
    var $create = function create(it, P) {
      return P === undefined ? _create(it) : $defineProperties(_create(it), P);
    };
    var $propertyIsEnumerable = function propertyIsEnumerable(key) {
      var E = isEnum.call(this, key = toPrimitive(key, true));
      if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
      return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
    };
    var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
      it = toIObject(it);
      key = toPrimitive(key, true);
      if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
      var D = gOPD(it, key);
      if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
      return D;
    };
    var $getOwnPropertyNames = function getOwnPropertyNames(it) {
      var names = gOPN(toIObject(it));
      var result = [];
      var i = 0;
      var key;
      while (names.length > i) {
        if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
      } return result;
    };
    var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
      var IS_OP = it === ObjectProto;
      var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
      var result = [];
      var i = 0;
      var key;
      while (names.length > i) {
        if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
      } return result;
    };
    
    // 19.4.1.1 Symbol([description])
    if (!USE_NATIVE) {
      $Symbol = function Symbol() {
        if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
        var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
        var $set = function (value) {
          if (this === ObjectProto) $set.call(OPSymbols, value);
          if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
          setSymbolDesc(this, tag, createDesc(1, value));
        };
        if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
        return wrap(tag);
      };
      redefine($Symbol[PROTOTYPE], 'toString', function toString() {
        return this._k;
      });
    
      $GOPD.f = $getOwnPropertyDescriptor;
      $DP.f = $defineProperty;
      __webpack_require__(46).f = gOPNExt.f = $getOwnPropertyNames;
      __webpack_require__(59).f = $propertyIsEnumerable;
      __webpack_require__(65).f = $getOwnPropertySymbols;
    
      if (DESCRIPTORS && !__webpack_require__(42)) {
        redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
      }
    
      wksExt.f = function (name) {
        return wrap(wks(name));
      };
    }
    
    $export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });
    
    for (var es6Symbols = (
      // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
      'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
    ).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);
    
    for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);
    
    $export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
      // 19.4.2.1 Symbol.for(key)
      'for': function (key) {
        return has(SymbolRegistry, key += '')
          ? SymbolRegistry[key]
          : SymbolRegistry[key] = $Symbol(key);
      },
      // 19.4.2.5 Symbol.keyFor(sym)
      keyFor: function keyFor(sym) {
        if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
        for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
      },
      useSetter: function () { setter = true; },
      useSimple: function () { setter = false; }
    });
    
    $export($export.S + $export.F * !USE_NATIVE, 'Object', {
      // 19.1.2.2 Object.create(O [, Properties])
      create: $create,
      // 19.1.2.4 Object.defineProperty(O, P, Attributes)
      defineProperty: $defineProperty,
      // 19.1.2.3 Object.defineProperties(O, Properties)
      defineProperties: $defineProperties,
      // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
      getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
      // 19.1.2.7 Object.getOwnPropertyNames(O)
      getOwnPropertyNames: $getOwnPropertyNames,
      // 19.1.2.8 Object.getOwnPropertySymbols(O)
      getOwnPropertySymbols: $getOwnPropertySymbols
    });
    
    // 24.3.2 JSON.stringify(value [, replacer [, space]])
    $JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
      var S = $Symbol();
      // MS Edge converts symbol values to JSON as {}
      // WebKit converts symbol values to JSON as null
      // V8 throws on boxed symbols
      return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
    })), 'JSON', {
      stringify: function stringify(it) {
        if (it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
        var args = [it];
        var i = 1;
        var replacer, $replacer;
        while (arguments.length > i) args.push(arguments[i++]);
        replacer = args[1];
        if (typeof replacer == 'function') $replacer = replacer;
        if ($replacer || !isArray(replacer)) replacer = function (key, value) {
          if ($replacer) value = $replacer.call(this, key, value);
          if (!isSymbol(value)) return value;
        };
        args[1] = replacer;
        return _stringify.apply($JSON, args);
      }
    });
    
    // 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
    $Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(14)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
    // 19.4.3.5 Symbol.prototype[@@toStringTag]
    setToStringTag($Symbol, 'Symbol');
    // 20.2.1.9 Math[@@toStringTag]
    setToStringTag(Math, 'Math', true);
    // 24.3.3 JSON[@@toStringTag]
    setToStringTag(global.JSON, 'JSON', true);
    
    
    /***/ }),
    /* 158 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // all enumerable object keys, includes symbols
    var getKeys = __webpack_require__(43);
    var gOPS = __webpack_require__(65);
    var pIE = __webpack_require__(59);
    module.exports = function (it) {
      var result = getKeys(it);
      var getSymbols = gOPS.f;
      if (getSymbols) {
        var symbols = getSymbols(it);
        var isEnum = pIE.f;
        var i = 0;
        var key;
        while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
      } return result;
    };
    
    
    /***/ }),
    /* 159 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var $export = __webpack_require__(0);
    // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
    $export($export.S, 'Object', { create: __webpack_require__(45) });
    
    
    /***/ }),
    /* 160 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var $export = __webpack_require__(0);
    // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
    $export($export.S + $export.F * !__webpack_require__(7), 'Object', { defineProperty: __webpack_require__(8).f });
    
    
    /***/ }),
    /* 161 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var $export = __webpack_require__(0);
    // 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
    $export($export.S + $export.F * !__webpack_require__(7), 'Object', { defineProperties: __webpack_require__(114) });
    
    
    /***/ }),
    /* 162 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
    var toIObject = __webpack_require__(17);
    var $getOwnPropertyDescriptor = __webpack_require__(18).f;
    
    __webpack_require__(30)('getOwnPropertyDescriptor', function () {
      return function getOwnPropertyDescriptor(it, key) {
        return $getOwnPropertyDescriptor(toIObject(it), key);
      };
    });
    
    
    /***/ }),
    /* 163 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 19.1.2.9 Object.getPrototypeOf(O)
    var toObject = __webpack_require__(10);
    var $getPrototypeOf = __webpack_require__(19);
    
    __webpack_require__(30)('getPrototypeOf', function () {
      return function getPrototypeOf(it) {
        return $getPrototypeOf(toObject(it));
      };
    });
    
    
    /***/ }),
    /* 164 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 19.1.2.14 Object.keys(O)
    var toObject = __webpack_require__(10);
    var $keys = __webpack_require__(43);
    
    __webpack_require__(30)('keys', function () {
      return function keys(it) {
        return $keys(toObject(it));
      };
    });
    
    
    /***/ }),
    /* 165 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 19.1.2.7 Object.getOwnPropertyNames(O)
    __webpack_require__(30)('getOwnPropertyNames', function () {
      return __webpack_require__(115).f;
    });
    
    
    /***/ }),
    /* 166 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 19.1.2.5 Object.freeze(O)
    var isObject = __webpack_require__(5);
    var meta = __webpack_require__(36).onFreeze;
    
    __webpack_require__(30)('freeze', function ($freeze) {
      return function freeze(it) {
        return $freeze && isObject(it) ? $freeze(meta(it)) : it;
      };
    });
    
    
    /***/ }),
    /* 167 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 19.1.2.17 Object.seal(O)
    var isObject = __webpack_require__(5);
    var meta = __webpack_require__(36).onFreeze;
    
    __webpack_require__(30)('seal', function ($seal) {
      return function seal(it) {
        return $seal && isObject(it) ? $seal(meta(it)) : it;
      };
    });
    
    
    /***/ }),
    /* 168 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 19.1.2.15 Object.preventExtensions(O)
    var isObject = __webpack_require__(5);
    var meta = __webpack_require__(36).onFreeze;
    
    __webpack_require__(30)('preventExtensions', function ($preventExtensions) {
      return function preventExtensions(it) {
        return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
      };
    });
    
    
    /***/ }),
    /* 169 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 19.1.2.12 Object.isFrozen(O)
    var isObject = __webpack_require__(5);
    
    __webpack_require__(30)('isFrozen', function ($isFrozen) {
      return function isFrozen(it) {
        return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
      };
    });
    
    
    /***/ }),
    /* 170 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 19.1.2.13 Object.isSealed(O)
    var isObject = __webpack_require__(5);
    
    __webpack_require__(30)('isSealed', function ($isSealed) {
      return function isSealed(it) {
        return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
      };
    });
    
    
    /***/ }),
    /* 171 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 19.1.2.11 Object.isExtensible(O)
    var isObject = __webpack_require__(5);
    
    __webpack_require__(30)('isExtensible', function ($isExtensible) {
      return function isExtensible(it) {
        return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
      };
    });
    
    
    /***/ }),
    /* 172 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 19.1.3.1 Object.assign(target, source)
    var $export = __webpack_require__(0);
    
    $export($export.S + $export.F, 'Object', { assign: __webpack_require__(116) });
    
    
    /***/ }),
    /* 173 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 19.1.3.10 Object.is(value1, value2)
    var $export = __webpack_require__(0);
    $export($export.S, 'Object', { is: __webpack_require__(174) });
    
    
    /***/ }),
    /* 174 */
    /***/ (function(module, exports) {
    
    // 7.2.9 SameValue(x, y)
    module.exports = Object.is || function is(x, y) {
      // eslint-disable-next-line no-self-compare
      return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
    };
    
    
    /***/ }),
    /* 175 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 19.1.3.19 Object.setPrototypeOf(O, proto)
    var $export = __webpack_require__(0);
    $export($export.S, 'Object', { setPrototypeOf: __webpack_require__(87).set });
    
    
    /***/ }),
    /* 176 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // 19.1.3.6 Object.prototype.toString()
    var classof = __webpack_require__(60);
    var test = {};
    test[__webpack_require__(6)('toStringTag')] = 'z';
    if (test + '' != '[object z]') {
      __webpack_require__(15)(Object.prototype, 'toString', function toString() {
        return '[object ' + classof(this) + ']';
      }, true);
    }
    
    
    /***/ }),
    /* 177 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
    var $export = __webpack_require__(0);
    
    $export($export.P, 'Function', { bind: __webpack_require__(117) });
    
    
    /***/ }),
    /* 178 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var dP = __webpack_require__(8).f;
    var FProto = Function.prototype;
    var nameRE = /^\s*function ([^ (]*)/;
    var NAME = 'name';
    
    // 19.2.4.2 name
    NAME in FProto || __webpack_require__(7) && dP(FProto, NAME, {
      configurable: true,
      get: function () {
        try {
          return ('' + this).match(nameRE)[1];
        } catch (e) {
          return '';
        }
      }
    });
    
    
    /***/ }),
    /* 179 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var isObject = __webpack_require__(5);
    var getPrototypeOf = __webpack_require__(19);
    var HAS_INSTANCE = __webpack_require__(6)('hasInstance');
    var FunctionProto = Function.prototype;
    // 19.2.3.6 Function.prototype[@@hasInstance](V)
    if (!(HAS_INSTANCE in FunctionProto)) __webpack_require__(8).f(FunctionProto, HAS_INSTANCE, { value: function (O) {
      if (typeof this != 'function' || !isObject(O)) return false;
      if (!isObject(this.prototype)) return O instanceof this;
      // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
      while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
      return false;
    } });
    
    
    /***/ }),
    /* 180 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var $export = __webpack_require__(0);
    var $parseInt = __webpack_require__(119);
    // 18.2.5 parseInt(string, radix)
    $export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });
    
    
    /***/ }),
    /* 181 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var $export = __webpack_require__(0);
    var $parseFloat = __webpack_require__(120);
    // 18.2.4 parseFloat(string)
    $export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });
    
    
    /***/ }),
    /* 182 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var global = __webpack_require__(2);
    var has = __webpack_require__(13);
    var cof = __webpack_require__(24);
    var inheritIfRequired = __webpack_require__(89);
    var toPrimitive = __webpack_require__(27);
    var fails = __webpack_require__(4);
    var gOPN = __webpack_require__(46).f;
    var gOPD = __webpack_require__(18).f;
    var dP = __webpack_require__(8).f;
    var $trim = __webpack_require__(54).trim;
    var NUMBER = 'Number';
    var $Number = global[NUMBER];
    var Base = $Number;
    var proto = $Number.prototype;
    // Opera ~12 has broken Object#toString
    var BROKEN_COF = cof(__webpack_require__(45)(proto)) == NUMBER;
    var TRIM = 'trim' in String.prototype;
    
    // 7.1.3 ToNumber(argument)
    var toNumber = function (argument) {
      var it = toPrimitive(argument, false);
      if (typeof it == 'string' && it.length > 2) {
        it = TRIM ? it.trim() : $trim(it, 3);
        var first = it.charCodeAt(0);
        var third, radix, maxCode;
        if (first === 43 || first === 45) {
          third = it.charCodeAt(2);
          if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
        } else if (first === 48) {
          switch (it.charCodeAt(1)) {
            case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
            case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
            default: return +it;
          }
          for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
            code = digits.charCodeAt(i);
            // parseInt parses a string to a first unavailable symbol
            // but ToNumber should return NaN if a string contains unavailable symbols
            if (code < 48 || code > maxCode) return NaN;
          } return parseInt(digits, radix);
        }
      } return +it;
    };
    
    if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
      $Number = function Number(value) {
        var it = arguments.length < 1 ? 0 : value;
        var that = this;
        return that instanceof $Number
          // check on 1..constructor(foo) case
          && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)
            ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
      };
      for (var keys = __webpack_require__(7) ? gOPN(Base) : (
        // ES3:
        'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
        // ES6 (in case, if modules with ES6 Number statics required before):
        'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
        'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
      ).split(','), j = 0, key; keys.length > j; j++) {
        if (has(Base, key = keys[j]) && !has($Number, key)) {
          dP($Number, key, gOPD(Base, key));
        }
      }
      $Number.prototype = proto;
      proto.constructor = $Number;
      __webpack_require__(15)(global, NUMBER, $Number);
    }
    
    
    /***/ }),
    /* 183 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var $export = __webpack_require__(0);
    var toInteger = __webpack_require__(29);
    var aNumberValue = __webpack_require__(121);
    var repeat = __webpack_require__(90);
    var $toFixed = 1.0.toFixed;
    var floor = Math.floor;
    var data = [0, 0, 0, 0, 0, 0];
    var ERROR = 'Number.toFixed: incorrect invocation!';
    var ZERO = '0';
    
    var multiply = function (n, c) {
      var i = -1;
      var c2 = c;
      while (++i < 6) {
        c2 += n * data[i];
        data[i] = c2 % 1e7;
        c2 = floor(c2 / 1e7);
      }
    };
    var divide = function (n) {
      var i = 6;
      var c = 0;
      while (--i >= 0) {
        c += data[i];
        data[i] = floor(c / n);
        c = (c % n) * 1e7;
      }
    };
    var numToString = function () {
      var i = 6;
      var s = '';
      while (--i >= 0) {
        if (s !== '' || i === 0 || data[i] !== 0) {
          var t = String(data[i]);
          s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
        }
      } return s;
    };
    var pow = function (x, n, acc) {
      return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
    };
    var log = function (x) {
      var n = 0;
      var x2 = x;
      while (x2 >= 4096) {
        n += 12;
        x2 /= 4096;
      }
      while (x2 >= 2) {
        n += 1;
        x2 /= 2;
      } return n;
    };
    
    $export($export.P + $export.F * (!!$toFixed && (
      0.00008.toFixed(3) !== '0.000' ||
      0.9.toFixed(0) !== '1' ||
      1.255.toFixed(2) !== '1.25' ||
      1000000000000000128.0.toFixed(0) !== '1000000000000000128'
    ) || !__webpack_require__(4)(function () {
      // V8 ~ Android 4.3-
      $toFixed.call({});
    })), 'Number', {
      toFixed: function toFixed(fractionDigits) {
        var x = aNumberValue(this, ERROR);
        var f = toInteger(fractionDigits);
        var s = '';
        var m = ZERO;
        var e, z, j, k;
        if (f < 0 || f > 20) throw RangeError(ERROR);
        // eslint-disable-next-line no-self-compare
        if (x != x) return 'NaN';
        if (x <= -1e21 || x >= 1e21) return String(x);
        if (x < 0) {
          s = '-';
          x = -x;
        }
        if (x > 1e-21) {
          e = log(x * pow(2, 69, 1)) - 69;
          z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
          z *= 0x10000000000000;
          e = 52 - e;
          if (e > 0) {
            multiply(0, z);
            j = f;
            while (j >= 7) {
              multiply(1e7, 0);
              j -= 7;
            }
            multiply(pow(10, j, 1), 0);
            j = e - 1;
            while (j >= 23) {
              divide(1 << 23);
              j -= 23;
            }
            divide(1 << j);
            multiply(1, 1);
            divide(2);
            m = numToString();
          } else {
            multiply(0, z);
            multiply(1 << -e, 0);
            m = numToString() + repeat.call(ZERO, f);
          }
        }
        if (f > 0) {
          k = m.length;
          m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
        } else {
          m = s + m;
        } return m;
      }
    });
    
    
    /***/ }),
    /* 184 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var $export = __webpack_require__(0);
    var $fails = __webpack_require__(4);
    var aNumberValue = __webpack_require__(121);
    var $toPrecision = 1.0.toPrecision;
    
    $export($export.P + $export.F * ($fails(function () {
      // IE7-
      return $toPrecision.call(1, undefined) !== '1';
    }) || !$fails(function () {
      // V8 ~ Android 4.3-
      $toPrecision.call({});
    })), 'Number', {
      toPrecision: function toPrecision(precision) {
        var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
        return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
      }
    });
    
    
    /***/ }),
    /* 185 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 20.1.2.1 Number.EPSILON
    var $export = __webpack_require__(0);
    
    $export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });
    
    
    /***/ }),
    /* 186 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 20.1.2.2 Number.isFinite(number)
    var $export = __webpack_require__(0);
    var _isFinite = __webpack_require__(2).isFinite;
    
    $export($export.S, 'Number', {
      isFinite: function isFinite(it) {
        return typeof it == 'number' && _isFinite(it);
      }
    });
    
    
    /***/ }),
    /* 187 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 20.1.2.3 Number.isInteger(number)
    var $export = __webpack_require__(0);
    
    $export($export.S, 'Number', { isInteger: __webpack_require__(122) });
    
    
    /***/ }),
    /* 188 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 20.1.2.4 Number.isNaN(number)
    var $export = __webpack_require__(0);
    
    $export($export.S, 'Number', {
      isNaN: function isNaN(number) {
        // eslint-disable-next-line no-self-compare
        return number != number;
      }
    });
    
    
    /***/ }),
    /* 189 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 20.1.2.5 Number.isSafeInteger(number)
    var $export = __webpack_require__(0);
    var isInteger = __webpack_require__(122);
    var abs = Math.abs;
    
    $export($export.S, 'Number', {
      isSafeInteger: function isSafeInteger(number) {
        return isInteger(number) && abs(number) <= 0x1fffffffffffff;
      }
    });
    
    
    /***/ }),
    /* 190 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 20.1.2.6 Number.MAX_SAFE_INTEGER
    var $export = __webpack_require__(0);
    
    $export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });
    
    
    /***/ }),
    /* 191 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 20.1.2.10 Number.MIN_SAFE_INTEGER
    var $export = __webpack_require__(0);
    
    $export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });
    
    
    /***/ }),
    /* 192 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var $export = __webpack_require__(0);
    var $parseFloat = __webpack_require__(120);
    // 20.1.2.12 Number.parseFloat(string)
    $export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });
    
    
    /***/ }),
    /* 193 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var $export = __webpack_require__(0);
    var $parseInt = __webpack_require__(119);
    // 20.1.2.13 Number.parseInt(string, radix)
    $export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });
    
    
    /***/ }),
    /* 194 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 20.2.2.3 Math.acosh(x)
    var $export = __webpack_require__(0);
    var log1p = __webpack_require__(123);
    var sqrt = Math.sqrt;
    var $acosh = Math.acosh;
    
    $export($export.S + $export.F * !($acosh
      // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
      && Math.floor($acosh(Number.MAX_VALUE)) == 710
      // Tor Browser bug: Math.acosh(Infinity) -> NaN
      && $acosh(Infinity) == Infinity
    ), 'Math', {
      acosh: function acosh(x) {
        return (x = +x) < 1 ? NaN : x > 94906265.62425156
          ? Math.log(x) + Math.LN2
          : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
      }
    });
    
    
    /***/ }),
    /* 195 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 20.2.2.5 Math.asinh(x)
    var $export = __webpack_require__(0);
    var $asinh = Math.asinh;
    
    function asinh(x) {
      return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
    }
    
    // Tor Browser bug: Math.asinh(0) -> -0
    $export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });
    
    
    /***/ }),
    /* 196 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 20.2.2.7 Math.atanh(x)
    var $export = __webpack_require__(0);
    var $atanh = Math.atanh;
    
    // Tor Browser bug: Math.atanh(-0) -> 0
    $export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
      atanh: function atanh(x) {
        return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
      }
    });
    
    
    /***/ }),
    /* 197 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 20.2.2.9 Math.cbrt(x)
    var $export = __webpack_require__(0);
    var sign = __webpack_require__(91);
    
    $export($export.S, 'Math', {
      cbrt: function cbrt(x) {
        return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
      }
    });
    
    
    /***/ }),
    /* 198 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 20.2.2.11 Math.clz32(x)
    var $export = __webpack_require__(0);
    
    $export($export.S, 'Math', {
      clz32: function clz32(x) {
        return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
      }
    });
    
    
    /***/ }),
    /* 199 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 20.2.2.12 Math.cosh(x)
    var $export = __webpack_require__(0);
    var exp = Math.exp;
    
    $export($export.S, 'Math', {
      cosh: function cosh(x) {
        return (exp(x = +x) + exp(-x)) / 2;
      }
    });
    
    
    /***/ }),
    /* 200 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 20.2.2.14 Math.expm1(x)
    var $export = __webpack_require__(0);
    var $expm1 = __webpack_require__(92);
    
    $export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });
    
    
    /***/ }),
    /* 201 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 20.2.2.16 Math.fround(x)
    var $export = __webpack_require__(0);
    
    $export($export.S, 'Math', { fround: __webpack_require__(124) });
    
    
    /***/ }),
    /* 202 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
    var $export = __webpack_require__(0);
    var abs = Math.abs;
    
    $export($export.S, 'Math', {
      hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
        var sum = 0;
        var i = 0;
        var aLen = arguments.length;
        var larg = 0;
        var arg, div;
        while (i < aLen) {
          arg = abs(arguments[i++]);
          if (larg < arg) {
            div = larg / arg;
            sum = sum * div * div + 1;
            larg = arg;
          } else if (arg > 0) {
            div = arg / larg;
            sum += div * div;
          } else sum += arg;
        }
        return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
      }
    });
    
    
    /***/ }),
    /* 203 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 20.2.2.18 Math.imul(x, y)
    var $export = __webpack_require__(0);
    var $imul = Math.imul;
    
    // some WebKit versions fails with big numbers, some has wrong arity
    $export($export.S + $export.F * __webpack_require__(4)(function () {
      return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
    }), 'Math', {
      imul: function imul(x, y) {
        var UINT16 = 0xffff;
        var xn = +x;
        var yn = +y;
        var xl = UINT16 & xn;
        var yl = UINT16 & yn;
        return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
      }
    });
    
    
    /***/ }),
    /* 204 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 20.2.2.21 Math.log10(x)
    var $export = __webpack_require__(0);
    
    $export($export.S, 'Math', {
      log10: function log10(x) {
        return Math.log(x) * Math.LOG10E;
      }
    });
    
    
    /***/ }),
    /* 205 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 20.2.2.20 Math.log1p(x)
    var $export = __webpack_require__(0);
    
    $export($export.S, 'Math', { log1p: __webpack_require__(123) });
    
    
    /***/ }),
    /* 206 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 20.2.2.22 Math.log2(x)
    var $export = __webpack_require__(0);
    
    $export($export.S, 'Math', {
      log2: function log2(x) {
        return Math.log(x) / Math.LN2;
      }
    });
    
    
    /***/ }),
    /* 207 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 20.2.2.28 Math.sign(x)
    var $export = __webpack_require__(0);
    
    $export($export.S, 'Math', { sign: __webpack_require__(91) });
    
    
    /***/ }),
    /* 208 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 20.2.2.30 Math.sinh(x)
    var $export = __webpack_require__(0);
    var expm1 = __webpack_require__(92);
    var exp = Math.exp;
    
    // V8 near Chromium 38 has a problem with very small numbers
    $export($export.S + $export.F * __webpack_require__(4)(function () {
      return !Math.sinh(-2e-17) != -2e-17;
    }), 'Math', {
      sinh: function sinh(x) {
        return Math.abs(x = +x) < 1
          ? (expm1(x) - expm1(-x)) / 2
          : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
      }
    });
    
    
    /***/ }),
    /* 209 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 20.2.2.33 Math.tanh(x)
    var $export = __webpack_require__(0);
    var expm1 = __webpack_require__(92);
    var exp = Math.exp;
    
    $export($export.S, 'Math', {
      tanh: function tanh(x) {
        var a = expm1(x = +x);
        var b = expm1(-x);
        return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
      }
    });
    
    
    /***/ }),
    /* 210 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 20.2.2.34 Math.trunc(x)
    var $export = __webpack_require__(0);
    
    $export($export.S, 'Math', {
      trunc: function trunc(it) {
        return (it > 0 ? Math.floor : Math.ceil)(it);
      }
    });
    
    
    /***/ }),
    /* 211 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var $export = __webpack_require__(0);
    var toAbsoluteIndex = __webpack_require__(44);
    var fromCharCode = String.fromCharCode;
    var $fromCodePoint = String.fromCodePoint;
    
    // length should be 1, old FF problem
    $export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
      // 21.1.2.2 String.fromCodePoint(...codePoints)
      fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
        var res = [];
        var aLen = arguments.length;
        var i = 0;
        var code;
        while (aLen > i) {
          code = +arguments[i++];
          if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
          res.push(code < 0x10000
            ? fromCharCode(code)
            : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
          );
        } return res.join('');
      }
    });
    
    
    /***/ }),
    /* 212 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var $export = __webpack_require__(0);
    var toIObject = __webpack_require__(17);
    var toLength = __webpack_require__(9);
    
    $export($export.S, 'String', {
      // 21.1.2.4 String.raw(callSite, ...substitutions)
      raw: function raw(callSite) {
        var tpl = toIObject(callSite.raw);
        var len = toLength(tpl.length);
        var aLen = arguments.length;
        var res = [];
        var i = 0;
        while (len > i) {
          res.push(String(tpl[i++]));
          if (i < aLen) res.push(String(arguments[i]));
        } return res.join('');
      }
    });
    
    
    /***/ }),
    /* 213 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // 21.1.3.25 String.prototype.trim()
    __webpack_require__(54)('trim', function ($trim) {
      return function trim() {
        return $trim(this, 3);
      };
    });
    
    
    /***/ }),
    /* 214 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var $at = __webpack_require__(93)(true);
    
    // 21.1.3.27 String.prototype[@@iterator]()
    __webpack_require__(94)(String, 'String', function (iterated) {
      this._t = String(iterated); // target
      this._i = 0;                // next index
    // 21.1.5.2.1 %StringIteratorPrototype%.next()
    }, function () {
      var O = this._t;
      var index = this._i;
      var point;
      if (index >= O.length) return { value: undefined, done: true };
      point = $at(O, index);
      this._i += point.length;
      return { value: point, done: false };
    });
    
    
    /***/ }),
    /* 215 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var $export = __webpack_require__(0);
    var $at = __webpack_require__(93)(false);
    $export($export.P, 'String', {
      // 21.1.3.3 String.prototype.codePointAt(pos)
      codePointAt: function codePointAt(pos) {
        return $at(this, pos);
      }
    });
    
    
    /***/ }),
    /* 216 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    // 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
    
    var $export = __webpack_require__(0);
    var toLength = __webpack_require__(9);
    var context = __webpack_require__(96);
    var ENDS_WITH = 'endsWith';
    var $endsWith = ''[ENDS_WITH];
    
    $export($export.P + $export.F * __webpack_require__(97)(ENDS_WITH), 'String', {
      endsWith: function endsWith(searchString /* , endPosition = @length */) {
        var that = context(this, searchString, ENDS_WITH);
        var endPosition = arguments.length > 1 ? arguments[1] : undefined;
        var len = toLength(that.length);
        var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
        var search = String(searchString);
        return $endsWith
          ? $endsWith.call(that, search, end)
          : that.slice(end - search.length, end) === search;
      }
    });
    
    
    /***/ }),
    /* 217 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    // 21.1.3.7 String.prototype.includes(searchString, position = 0)
    
    var $export = __webpack_require__(0);
    var context = __webpack_require__(96);
    var INCLUDES = 'includes';
    
    $export($export.P + $export.F * __webpack_require__(97)(INCLUDES), 'String', {
      includes: function includes(searchString /* , position = 0 */) {
        return !!~context(this, searchString, INCLUDES)
          .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
      }
    });
    
    
    /***/ }),
    /* 218 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var $export = __webpack_require__(0);
    
    $export($export.P, 'String', {
      // 21.1.3.13 String.prototype.repeat(count)
      repeat: __webpack_require__(90)
    });
    
    
    /***/ }),
    /* 219 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    // 21.1.3.18 String.prototype.startsWith(searchString [, position ])
    
    var $export = __webpack_require__(0);
    var toLength = __webpack_require__(9);
    var context = __webpack_require__(96);
    var STARTS_WITH = 'startsWith';
    var $startsWith = ''[STARTS_WITH];
    
    $export($export.P + $export.F * __webpack_require__(97)(STARTS_WITH), 'String', {
      startsWith: function startsWith(searchString /* , position = 0 */) {
        var that = context(this, searchString, STARTS_WITH);
        var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
        var search = String(searchString);
        return $startsWith
          ? $startsWith.call(that, search, index)
          : that.slice(index, index + search.length) === search;
      }
    });
    
    
    /***/ }),
    /* 220 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // B.2.3.2 String.prototype.anchor(name)
    __webpack_require__(16)('anchor', function (createHTML) {
      return function anchor(name) {
        return createHTML(this, 'a', 'name', name);
      };
    });
    
    
    /***/ }),
    /* 221 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // B.2.3.3 String.prototype.big()
    __webpack_require__(16)('big', function (createHTML) {
      return function big() {
        return createHTML(this, 'big', '', '');
      };
    });
    
    
    /***/ }),
    /* 222 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // B.2.3.4 String.prototype.blink()
    __webpack_require__(16)('blink', function (createHTML) {
      return function blink() {
        return createHTML(this, 'blink', '', '');
      };
    });
    
    
    /***/ }),
    /* 223 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // B.2.3.5 String.prototype.bold()
    __webpack_require__(16)('bold', function (createHTML) {
      return function bold() {
        return createHTML(this, 'b', '', '');
      };
    });
    
    
    /***/ }),
    /* 224 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // B.2.3.6 String.prototype.fixed()
    __webpack_require__(16)('fixed', function (createHTML) {
      return function fixed() {
        return createHTML(this, 'tt', '', '');
      };
    });
    
    
    /***/ }),
    /* 225 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // B.2.3.7 String.prototype.fontcolor(color)
    __webpack_require__(16)('fontcolor', function (createHTML) {
      return function fontcolor(color) {
        return createHTML(this, 'font', 'color', color);
      };
    });
    
    
    /***/ }),
    /* 226 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // B.2.3.8 String.prototype.fontsize(size)
    __webpack_require__(16)('fontsize', function (createHTML) {
      return function fontsize(size) {
        return createHTML(this, 'font', 'size', size);
      };
    });
    
    
    /***/ }),
    /* 227 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // B.2.3.9 String.prototype.italics()
    __webpack_require__(16)('italics', function (createHTML) {
      return function italics() {
        return createHTML(this, 'i', '', '');
      };
    });
    
    
    /***/ }),
    /* 228 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // B.2.3.10 String.prototype.link(url)
    __webpack_require__(16)('link', function (createHTML) {
      return function link(url) {
        return createHTML(this, 'a', 'href', url);
      };
    });
    
    
    /***/ }),
    /* 229 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // B.2.3.11 String.prototype.small()
    __webpack_require__(16)('small', function (createHTML) {
      return function small() {
        return createHTML(this, 'small', '', '');
      };
    });
    
    
    /***/ }),
    /* 230 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // B.2.3.12 String.prototype.strike()
    __webpack_require__(16)('strike', function (createHTML) {
      return function strike() {
        return createHTML(this, 'strike', '', '');
      };
    });
    
    
    /***/ }),
    /* 231 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // B.2.3.13 String.prototype.sub()
    __webpack_require__(16)('sub', function (createHTML) {
      return function sub() {
        return createHTML(this, 'sub', '', '');
      };
    });
    
    
    /***/ }),
    /* 232 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // B.2.3.14 String.prototype.sup()
    __webpack_require__(16)('sup', function (createHTML) {
      return function sup() {
        return createHTML(this, 'sup', '', '');
      };
    });
    
    
    /***/ }),
    /* 233 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 20.3.3.1 / 15.9.4.4 Date.now()
    var $export = __webpack_require__(0);
    
    $export($export.S, 'Date', { now: function () { return new Date().getTime(); } });
    
    
    /***/ }),
    /* 234 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var $export = __webpack_require__(0);
    var toObject = __webpack_require__(10);
    var toPrimitive = __webpack_require__(27);
    
    $export($export.P + $export.F * __webpack_require__(4)(function () {
      return new Date(NaN).toJSON() !== null
        || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
    }), 'Date', {
      // eslint-disable-next-line no-unused-vars
      toJSON: function toJSON(key) {
        var O = toObject(this);
        var pv = toPrimitive(O);
        return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
      }
    });
    
    
    /***/ }),
    /* 235 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
    var $export = __webpack_require__(0);
    var toISOString = __webpack_require__(236);
    
    // PhantomJS / old WebKit has a broken implementations
    $export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
      toISOString: toISOString
    });
    
    
    /***/ }),
    /* 236 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
    var fails = __webpack_require__(4);
    var getTime = Date.prototype.getTime;
    var $toISOString = Date.prototype.toISOString;
    
    var lz = function (num) {
      return num > 9 ? num : '0' + num;
    };
    
    // PhantomJS / old WebKit has a broken implementations
    module.exports = (fails(function () {
      return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
    }) || !fails(function () {
      $toISOString.call(new Date(NaN));
    })) ? function toISOString() {
      if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
      var d = this;
      var y = d.getUTCFullYear();
      var m = d.getUTCMilliseconds();
      var s = y < 0 ? '-' : y > 9999 ? '+' : '';
      return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
        '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
        'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
        ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
    } : $toISOString;
    
    
    /***/ }),
    /* 237 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var DateProto = Date.prototype;
    var INVALID_DATE = 'Invalid Date';
    var TO_STRING = 'toString';
    var $toString = DateProto[TO_STRING];
    var getTime = DateProto.getTime;
    if (new Date(NaN) + '' != INVALID_DATE) {
      __webpack_require__(15)(DateProto, TO_STRING, function toString() {
        var value = getTime.call(this);
        // eslint-disable-next-line no-self-compare
        return value === value ? $toString.call(this) : INVALID_DATE;
      });
    }
    
    
    /***/ }),
    /* 238 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var TO_PRIMITIVE = __webpack_require__(6)('toPrimitive');
    var proto = Date.prototype;
    
    if (!(TO_PRIMITIVE in proto)) __webpack_require__(14)(proto, TO_PRIMITIVE, __webpack_require__(239));
    
    
    /***/ }),
    /* 239 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var anObject = __webpack_require__(1);
    var toPrimitive = __webpack_require__(27);
    var NUMBER = 'number';
    
    module.exports = function (hint) {
      if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
      return toPrimitive(anObject(this), hint != NUMBER);
    };
    
    
    /***/ }),
    /* 240 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
    var $export = __webpack_require__(0);
    
    $export($export.S, 'Array', { isArray: __webpack_require__(66) });
    
    
    /***/ }),
    /* 241 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var ctx = __webpack_require__(23);
    var $export = __webpack_require__(0);
    var toObject = __webpack_require__(10);
    var call = __webpack_require__(125);
    var isArrayIter = __webpack_require__(98);
    var toLength = __webpack_require__(9);
    var createProperty = __webpack_require__(99);
    var getIterFn = __webpack_require__(100);
    
    $export($export.S + $export.F * !__webpack_require__(68)(function (iter) { Array.from(iter); }), 'Array', {
      // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
      from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
        var O = toObject(arrayLike);
        var C = typeof this == 'function' ? this : Array;
        var aLen = arguments.length;
        var mapfn = aLen > 1 ? arguments[1] : undefined;
        var mapping = mapfn !== undefined;
        var index = 0;
        var iterFn = getIterFn(O);
        var length, result, step, iterator;
        if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
        // if object isn't iterable or it's array with default iterator - use simple case
        if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
          for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
            createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
          }
        } else {
          length = toLength(O.length);
          for (result = new C(length); length > index; index++) {
            createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
          }
        }
        result.length = index;
        return result;
      }
    });
    
    
    /***/ }),
    /* 242 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var $export = __webpack_require__(0);
    var createProperty = __webpack_require__(99);
    
    // WebKit Array.of isn't generic
    $export($export.S + $export.F * __webpack_require__(4)(function () {
      function F() { /* empty */ }
      return !(Array.of.call(F) instanceof F);
    }), 'Array', {
      // 22.1.2.3 Array.of( ...items)
      of: function of(/* ...args */) {
        var index = 0;
        var aLen = arguments.length;
        var result = new (typeof this == 'function' ? this : Array)(aLen);
        while (aLen > index) createProperty(result, index, arguments[index++]);
        result.length = aLen;
        return result;
      }
    });
    
    
    /***/ }),
    /* 243 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // 22.1.3.13 Array.prototype.join(separator)
    var $export = __webpack_require__(0);
    var toIObject = __webpack_require__(17);
    var arrayJoin = [].join;
    
    // fallback for not array-like strings
    $export($export.P + $export.F * (__webpack_require__(58) != Object || !__webpack_require__(25)(arrayJoin)), 'Array', {
      join: function join(separator) {
        return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
      }
    });
    
    
    /***/ }),
    /* 244 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var $export = __webpack_require__(0);
    var html = __webpack_require__(86);
    var cof = __webpack_require__(24);
    var toAbsoluteIndex = __webpack_require__(44);
    var toLength = __webpack_require__(9);
    var arraySlice = [].slice;
    
    // fallback for not array-like ES3 strings and DOM objects
    $export($export.P + $export.F * __webpack_require__(4)(function () {
      if (html) arraySlice.call(html);
    }), 'Array', {
      slice: function slice(begin, end) {
        var len = toLength(this.length);
        var klass = cof(this);
        end = end === undefined ? len : end;
        if (klass == 'Array') return arraySlice.call(this, begin, end);
        var start = toAbsoluteIndex(begin, len);
        var upTo = toAbsoluteIndex(end, len);
        var size = toLength(upTo - start);
        var cloned = Array(size);
        var i = 0;
        for (; i < size; i++) cloned[i] = klass == 'String'
          ? this.charAt(start + i)
          : this[start + i];
        return cloned;
      }
    });
    
    
    /***/ }),
    /* 245 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var $export = __webpack_require__(0);
    var aFunction = __webpack_require__(11);
    var toObject = __webpack_require__(10);
    var fails = __webpack_require__(4);
    var $sort = [].sort;
    var test = [1, 2, 3];
    
    $export($export.P + $export.F * (fails(function () {
      // IE8-
      test.sort(undefined);
    }) || !fails(function () {
      // V8 bug
      test.sort(null);
      // Old WebKit
    }) || !__webpack_require__(25)($sort)), 'Array', {
      // 22.1.3.25 Array.prototype.sort(comparefn)
      sort: function sort(comparefn) {
        return comparefn === undefined
          ? $sort.call(toObject(this))
          : $sort.call(toObject(this), aFunction(comparefn));
      }
    });
    
    
    /***/ }),
    /* 246 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var $export = __webpack_require__(0);
    var $forEach = __webpack_require__(31)(0);
    var STRICT = __webpack_require__(25)([].forEach, true);
    
    $export($export.P + $export.F * !STRICT, 'Array', {
      // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
      forEach: function forEach(callbackfn /* , thisArg */) {
        return $forEach(this, callbackfn, arguments[1]);
      }
    });
    
    
    /***/ }),
    /* 247 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var isObject = __webpack_require__(5);
    var isArray = __webpack_require__(66);
    var SPECIES = __webpack_require__(6)('species');
    
    module.exports = function (original) {
      var C;
      if (isArray(original)) {
        C = original.constructor;
        // cross-realm fallback
        if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
        if (isObject(C)) {
          C = C[SPECIES];
          if (C === null) C = undefined;
        }
      } return C === undefined ? Array : C;
    };
    
    
    /***/ }),
    /* 248 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var $export = __webpack_require__(0);
    var $map = __webpack_require__(31)(1);
    
    $export($export.P + $export.F * !__webpack_require__(25)([].map, true), 'Array', {
      // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
      map: function map(callbackfn /* , thisArg */) {
        return $map(this, callbackfn, arguments[1]);
      }
    });
    
    
    /***/ }),
    /* 249 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var $export = __webpack_require__(0);
    var $filter = __webpack_require__(31)(2);
    
    $export($export.P + $export.F * !__webpack_require__(25)([].filter, true), 'Array', {
      // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
      filter: function filter(callbackfn /* , thisArg */) {
        return $filter(this, callbackfn, arguments[1]);
      }
    });
    
    
    /***/ }),
    /* 250 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var $export = __webpack_require__(0);
    var $some = __webpack_require__(31)(3);
    
    $export($export.P + $export.F * !__webpack_require__(25)([].some, true), 'Array', {
      // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
      some: function some(callbackfn /* , thisArg */) {
        return $some(this, callbackfn, arguments[1]);
      }
    });
    
    
    /***/ }),
    /* 251 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var $export = __webpack_require__(0);
    var $every = __webpack_require__(31)(4);
    
    $export($export.P + $export.F * !__webpack_require__(25)([].every, true), 'Array', {
      // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
      every: function every(callbackfn /* , thisArg */) {
        return $every(this, callbackfn, arguments[1]);
      }
    });
    
    
    /***/ }),
    /* 252 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var $export = __webpack_require__(0);
    var $reduce = __webpack_require__(126);
    
    $export($export.P + $export.F * !__webpack_require__(25)([].reduce, true), 'Array', {
      // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
      reduce: function reduce(callbackfn /* , initialValue */) {
        return $reduce(this, callbackfn, arguments.length, arguments[1], false);
      }
    });
    
    
    /***/ }),
    /* 253 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var $export = __webpack_require__(0);
    var $reduce = __webpack_require__(126);
    
    $export($export.P + $export.F * !__webpack_require__(25)([].reduceRight, true), 'Array', {
      // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
      reduceRight: function reduceRight(callbackfn /* , initialValue */) {
        return $reduce(this, callbackfn, arguments.length, arguments[1], true);
      }
    });
    
    
    /***/ }),
    /* 254 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var $export = __webpack_require__(0);
    var $indexOf = __webpack_require__(64)(false);
    var $native = [].indexOf;
    var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;
    
    $export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(25)($native)), 'Array', {
      // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
      indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
        return NEGATIVE_ZERO
          // convert -0 to +0
          ? $native.apply(this, arguments) || 0
          : $indexOf(this, searchElement, arguments[1]);
      }
    });
    
    
    /***/ }),
    /* 255 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var $export = __webpack_require__(0);
    var toIObject = __webpack_require__(17);
    var toInteger = __webpack_require__(29);
    var toLength = __webpack_require__(9);
    var $native = [].lastIndexOf;
    var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;
    
    $export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(25)($native)), 'Array', {
      // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
      lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
        // convert -0 to +0
        if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
        var O = toIObject(this);
        var length = toLength(O.length);
        var index = length - 1;
        if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
        if (index < 0) index = length + index;
        for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
        return -1;
      }
    });
    
    
    /***/ }),
    /* 256 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
    var $export = __webpack_require__(0);
    
    $export($export.P, 'Array', { copyWithin: __webpack_require__(127) });
    
    __webpack_require__(37)('copyWithin');
    
    
    /***/ }),
    /* 257 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
    var $export = __webpack_require__(0);
    
    $export($export.P, 'Array', { fill: __webpack_require__(102) });
    
    __webpack_require__(37)('fill');
    
    
    /***/ }),
    /* 258 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
    var $export = __webpack_require__(0);
    var $find = __webpack_require__(31)(5);
    var KEY = 'find';
    var forced = true;
    // Shouldn't skip holes
    if (KEY in []) Array(1)[KEY](function () { forced = false; });
    $export($export.P + $export.F * forced, 'Array', {
      find: function find(callbackfn /* , that = undefined */) {
        return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      }
    });
    __webpack_require__(37)(KEY);
    
    
    /***/ }),
    /* 259 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
    var $export = __webpack_require__(0);
    var $find = __webpack_require__(31)(6);
    var KEY = 'findIndex';
    var forced = true;
    // Shouldn't skip holes
    if (KEY in []) Array(1)[KEY](function () { forced = false; });
    $export($export.P + $export.F * forced, 'Array', {
      findIndex: function findIndex(callbackfn /* , that = undefined */) {
        return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      }
    });
    __webpack_require__(37)(KEY);
    
    
    /***/ }),
    /* 260 */
    /***/ (function(module, exports, __webpack_require__) {
    
    __webpack_require__(47)('Array');
    
    
    /***/ }),
    /* 261 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var global = __webpack_require__(2);
    var inheritIfRequired = __webpack_require__(89);
    var dP = __webpack_require__(8).f;
    var gOPN = __webpack_require__(46).f;
    var isRegExp = __webpack_require__(67);
    var $flags = __webpack_require__(69);
    var $RegExp = global.RegExp;
    var Base = $RegExp;
    var proto = $RegExp.prototype;
    var re1 = /a/g;
    var re2 = /a/g;
    // "new" creates a new object, old webkit buggy here
    var CORRECT_NEW = new $RegExp(re1) !== re1;
    
    if (__webpack_require__(7) && (!CORRECT_NEW || __webpack_require__(4)(function () {
      re2[__webpack_require__(6)('match')] = false;
      // RegExp constructor can alter flags and IsRegExp works correct with @@match
      return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
    }))) {
      $RegExp = function RegExp(p, f) {
        var tiRE = this instanceof $RegExp;
        var piRE = isRegExp(p);
        var fiU = f === undefined;
        return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
          : inheritIfRequired(CORRECT_NEW
            ? new Base(piRE && !fiU ? p.source : p, f)
            : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
          , tiRE ? this : proto, $RegExp);
      };
      var proxy = function (key) {
        key in $RegExp || dP($RegExp, key, {
          configurable: true,
          get: function () { return Base[key]; },
          set: function (it) { Base[key] = it; }
        });
      };
      for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
      proto.constructor = $RegExp;
      $RegExp.prototype = proto;
      __webpack_require__(15)(global, 'RegExp', $RegExp);
    }
    
    __webpack_require__(47)('RegExp');
    
    
    /***/ }),
    /* 262 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    __webpack_require__(129);
    var anObject = __webpack_require__(1);
    var $flags = __webpack_require__(69);
    var DESCRIPTORS = __webpack_require__(7);
    var TO_STRING = 'toString';
    var $toString = /./[TO_STRING];
    
    var define = function (fn) {
      __webpack_require__(15)(RegExp.prototype, TO_STRING, fn, true);
    };
    
    // 21.2.5.14 RegExp.prototype.toString()
    if (__webpack_require__(4)(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
      define(function toString() {
        var R = anObject(this);
        return '/'.concat(R.source, '/',
          'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
      });
    // FF44- RegExp#toString has a wrong name
    } else if ($toString.name != TO_STRING) {
      define(function toString() {
        return $toString.call(this);
      });
    }
    
    
    /***/ }),
    /* 263 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // @@match logic
    __webpack_require__(70)('match', 1, function (defined, MATCH, $match) {
      // 21.1.3.11 String.prototype.match(regexp)
      return [function match(regexp) {
        'use strict';
        var O = defined(this);
        var fn = regexp == undefined ? undefined : regexp[MATCH];
        return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
      }, $match];
    });
    
    
    /***/ }),
    /* 264 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // @@replace logic
    __webpack_require__(70)('replace', 2, function (defined, REPLACE, $replace) {
      // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
      return [function replace(searchValue, replaceValue) {
        'use strict';
        var O = defined(this);
        var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
        return fn !== undefined
          ? fn.call(searchValue, O, replaceValue)
          : $replace.call(String(O), searchValue, replaceValue);
      }, $replace];
    });
    
    
    /***/ }),
    /* 265 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // @@search logic
    __webpack_require__(70)('search', 1, function (defined, SEARCH, $search) {
      // 21.1.3.15 String.prototype.search(regexp)
      return [function search(regexp) {
        'use strict';
        var O = defined(this);
        var fn = regexp == undefined ? undefined : regexp[SEARCH];
        return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
      }, $search];
    });
    
    
    /***/ }),
    /* 266 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // @@split logic
    __webpack_require__(70)('split', 2, function (defined, SPLIT, $split) {
      'use strict';
      var isRegExp = __webpack_require__(67);
      var _split = $split;
      var $push = [].push;
      var $SPLIT = 'split';
      var LENGTH = 'length';
      var LAST_INDEX = 'lastIndex';
      if (
        'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
        'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
        'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
        '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
        '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
        ''[$SPLIT](/.?/)[LENGTH]
      ) {
        var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
        // based on es5-shim implementation, need to rework it
        $split = function (separator, limit) {
          var string = String(this);
          if (separator === undefined && limit === 0) return [];
          // If `separator` is not a regex, use native split
          if (!isRegExp(separator)) return _split.call(string, separator, limit);
          var output = [];
          var flags = (separator.ignoreCase ? 'i' : '') +
                      (separator.multiline ? 'm' : '') +
                      (separator.unicode ? 'u' : '') +
                      (separator.sticky ? 'y' : '');
          var lastLastIndex = 0;
          var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
          // Make `global` and avoid `lastIndex` issues by working with a copy
          var separatorCopy = new RegExp(separator.source, flags + 'g');
          var separator2, match, lastIndex, lastLength, i;
          // Doesn't need flags gy, but they don't hurt
          if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
          while (match = separatorCopy.exec(string)) {
            // `separatorCopy.lastIndex` is not reliable cross-browser
            lastIndex = match.index + match[0][LENGTH];
            if (lastIndex > lastLastIndex) {
              output.push(string.slice(lastLastIndex, match.index));
              // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
              // eslint-disable-next-line no-loop-func
              if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {
                for (i = 1; i < arguments[LENGTH] - 2; i++) if (arguments[i] === undefined) match[i] = undefined;
              });
              if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
              lastLength = match[0][LENGTH];
              lastLastIndex = lastIndex;
              if (output[LENGTH] >= splitLimit) break;
            }
            if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
          }
          if (lastLastIndex === string[LENGTH]) {
            if (lastLength || !separatorCopy.test('')) output.push('');
          } else output.push(string.slice(lastLastIndex));
          return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
        };
      // Chakra, V8
      } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
        $split = function (separator, limit) {
          return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
        };
      }
      // 21.1.3.17 String.prototype.split(separator, limit)
      return [function split(separator, limit) {
        var O = defined(this);
        var fn = separator == undefined ? undefined : separator[SPLIT];
        return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
      }, $split];
    });
    
    
    /***/ }),
    /* 267 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var LIBRARY = __webpack_require__(42);
    var global = __webpack_require__(2);
    var ctx = __webpack_require__(23);
    var classof = __webpack_require__(60);
    var $export = __webpack_require__(0);
    var isObject = __webpack_require__(5);
    var aFunction = __webpack_require__(11);
    var anInstance = __webpack_require__(48);
    var forOf = __webpack_require__(49);
    var speciesConstructor = __webpack_require__(71);
    var task = __webpack_require__(104).set;
    var microtask = __webpack_require__(105)();
    var newPromiseCapabilityModule = __webpack_require__(106);
    var perform = __webpack_require__(130);
    var promiseResolve = __webpack_require__(131);
    var PROMISE = 'Promise';
    var TypeError = global.TypeError;
    var process = global.process;
    var $Promise = global[PROMISE];
    var isNode = classof(process) == 'process';
    var empty = function () { /* empty */ };
    var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
    var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;
    
    var USE_NATIVE = !!function () {
      try {
        // correct subclassing with @@species support
        var promise = $Promise.resolve(1);
        var FakePromise = (promise.constructor = {})[__webpack_require__(6)('species')] = function (exec) {
          exec(empty, empty);
        };
        // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
        return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
      } catch (e) { /* empty */ }
    }();
    
    // helpers
    var isThenable = function (it) {
      var then;
      return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
    };
    var notify = function (promise, isReject) {
      if (promise._n) return;
      promise._n = true;
      var chain = promise._c;
      microtask(function () {
        var value = promise._v;
        var ok = promise._s == 1;
        var i = 0;
        var run = function (reaction) {
          var handler = ok ? reaction.ok : reaction.fail;
          var resolve = reaction.resolve;
          var reject = reaction.reject;
          var domain = reaction.domain;
          var result, then;
          try {
            if (handler) {
              if (!ok) {
                if (promise._h == 2) onHandleUnhandled(promise);
                promise._h = 1;
              }
              if (handler === true) result = value;
              else {
                if (domain) domain.enter();
                result = handler(value);
                if (domain) domain.exit();
              }
              if (result === reaction.promise) {
                reject(TypeError('Promise-chain cycle'));
              } else if (then = isThenable(result)) {
                then.call(result, resolve, reject);
              } else resolve(result);
            } else reject(value);
          } catch (e) {
            reject(e);
          }
        };
        while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
        promise._c = [];
        promise._n = false;
        if (isReject && !promise._h) onUnhandled(promise);
      });
    };
    var onUnhandled = function (promise) {
      task.call(global, function () {
        var value = promise._v;
        var unhandled = isUnhandled(promise);
        var result, handler, console;
        if (unhandled) {
          result = perform(function () {
            if (isNode) {
              process.emit('unhandledRejection', value, promise);
            } else if (handler = global.onunhandledrejection) {
              handler({ promise: promise, reason: value });
            } else if ((console = global.console) && console.error) {
              console.error('Unhandled promise rejection', value);
            }
          });
          // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
          promise._h = isNode || isUnhandled(promise) ? 2 : 1;
        } promise._a = undefined;
        if (unhandled && result.e) throw result.v;
      });
    };
    var isUnhandled = function (promise) {
      if (promise._h == 1) return false;
      var chain = promise._a || promise._c;
      var i = 0;
      var reaction;
      while (chain.length > i) {
        reaction = chain[i++];
        if (reaction.fail || !isUnhandled(reaction.promise)) return false;
      } return true;
    };
    var onHandleUnhandled = function (promise) {
      task.call(global, function () {
        var handler;
        if (isNode) {
          process.emit('rejectionHandled', promise);
        } else if (handler = global.onrejectionhandled) {
          handler({ promise: promise, reason: promise._v });
        }
      });
    };
    var $reject = function (value) {
      var promise = this;
      if (promise._d) return;
      promise._d = true;
      promise = promise._w || promise; // unwrap
      promise._v = value;
      promise._s = 2;
      if (!promise._a) promise._a = promise._c.slice();
      notify(promise, true);
    };
    var $resolve = function (value) {
      var promise = this;
      var then;
      if (promise._d) return;
      promise._d = true;
      promise = promise._w || promise; // unwrap
      try {
        if (promise === value) throw TypeError("Promise can't be resolved itself");
        if (then = isThenable(value)) {
          microtask(function () {
            var wrapper = { _w: promise, _d: false }; // wrap
            try {
              then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
            } catch (e) {
              $reject.call(wrapper, e);
            }
          });
        } else {
          promise._v = value;
          promise._s = 1;
          notify(promise, false);
        }
      } catch (e) {
        $reject.call({ _w: promise, _d: false }, e); // wrap
      }
    };
    
    // constructor polyfill
    if (!USE_NATIVE) {
      // 25.4.3.1 Promise(executor)
      $Promise = function Promise(executor) {
        anInstance(this, $Promise, PROMISE, '_h');
        aFunction(executor);
        Internal.call(this);
        try {
          executor(ctx($resolve, this, 1), ctx($reject, this, 1));
        } catch (err) {
          $reject.call(this, err);
        }
      };
      // eslint-disable-next-line no-unused-vars
      Internal = function Promise(executor) {
        this._c = [];             // <- awaiting reactions
        this._a = undefined;      // <- checked in isUnhandled reactions
        this._s = 0;              // <- state
        this._d = false;          // <- done
        this._v = undefined;      // <- value
        this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
        this._n = false;          // <- notify
      };
      Internal.prototype = __webpack_require__(50)($Promise.prototype, {
        // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
        then: function then(onFulfilled, onRejected) {
          var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
          reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
          reaction.fail = typeof onRejected == 'function' && onRejected;
          reaction.domain = isNode ? process.domain : undefined;
          this._c.push(reaction);
          if (this._a) this._a.push(reaction);
          if (this._s) notify(this, false);
          return reaction.promise;
        },
        // 25.4.5.1 Promise.prototype.catch(onRejected)
        'catch': function (onRejected) {
          return this.then(undefined, onRejected);
        }
      });
      OwnPromiseCapability = function () {
        var promise = new Internal();
        this.promise = promise;
        this.resolve = ctx($resolve, promise, 1);
        this.reject = ctx($reject, promise, 1);
      };
      newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
        return C === $Promise || C === Wrapper
          ? new OwnPromiseCapability(C)
          : newGenericPromiseCapability(C);
      };
    }
    
    $export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
    __webpack_require__(53)($Promise, PROMISE);
    __webpack_require__(47)(PROMISE);
    Wrapper = __webpack_require__(26)[PROMISE];
    
    // statics
    $export($export.S + $export.F * !USE_NATIVE, PROMISE, {
      // 25.4.4.5 Promise.reject(r)
      reject: function reject(r) {
        var capability = newPromiseCapability(this);
        var $$reject = capability.reject;
        $$reject(r);
        return capability.promise;
      }
    });
    $export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
      // 25.4.4.6 Promise.resolve(x)
      resolve: function resolve(x) {
        return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
      }
    });
    $export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(68)(function (iter) {
      $Promise.all(iter)['catch'](empty);
    })), PROMISE, {
      // 25.4.4.1 Promise.all(iterable)
      all: function all(iterable) {
        var C = this;
        var capability = newPromiseCapability(C);
        var resolve = capability.resolve;
        var reject = capability.reject;
        var result = perform(function () {
          var values = [];
          var index = 0;
          var remaining = 1;
          forOf(iterable, false, function (promise) {
            var $index = index++;
            var alreadyCalled = false;
            values.push(undefined);
            remaining++;
            C.resolve(promise).then(function (value) {
              if (alreadyCalled) return;
              alreadyCalled = true;
              values[$index] = value;
              --remaining || resolve(values);
            }, reject);
          });
          --remaining || resolve(values);
        });
        if (result.e) reject(result.v);
        return capability.promise;
      },
      // 25.4.4.4 Promise.race(iterable)
      race: function race(iterable) {
        var C = this;
        var capability = newPromiseCapability(C);
        var reject = capability.reject;
        var result = perform(function () {
          forOf(iterable, false, function (promise) {
            C.resolve(promise).then(capability.resolve, reject);
          });
        });
        if (result.e) reject(result.v);
        return capability.promise;
      }
    });
    
    
    /***/ }),
    /* 268 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var weak = __webpack_require__(136);
    var validate = __webpack_require__(56);
    var WEAK_SET = 'WeakSet';
    
    // 23.4 WeakSet Objects
    __webpack_require__(72)(WEAK_SET, function (get) {
      return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
    }, {
      // 23.4.3.1 WeakSet.prototype.add(value)
      add: function add(value) {
        return weak.def(validate(this, WEAK_SET), value, true);
      }
    }, weak, false, true);
    
    
    /***/ }),
    /* 269 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var $export = __webpack_require__(0);
    var $typed = __webpack_require__(73);
    var buffer = __webpack_require__(107);
    var anObject = __webpack_require__(1);
    var toAbsoluteIndex = __webpack_require__(44);
    var toLength = __webpack_require__(9);
    var isObject = __webpack_require__(5);
    var ArrayBuffer = __webpack_require__(2).ArrayBuffer;
    var speciesConstructor = __webpack_require__(71);
    var $ArrayBuffer = buffer.ArrayBuffer;
    var $DataView = buffer.DataView;
    var $isView = $typed.ABV && ArrayBuffer.isView;
    var $slice = $ArrayBuffer.prototype.slice;
    var VIEW = $typed.VIEW;
    var ARRAY_BUFFER = 'ArrayBuffer';
    
    $export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });
    
    $export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
      // 24.1.3.1 ArrayBuffer.isView(arg)
      isView: function isView(it) {
        return $isView && $isView(it) || isObject(it) && VIEW in it;
      }
    });
    
    $export($export.P + $export.U + $export.F * __webpack_require__(4)(function () {
      return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
    }), ARRAY_BUFFER, {
      // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
      slice: function slice(start, end) {
        if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
        var len = anObject(this).byteLength;
        var first = toAbsoluteIndex(start, len);
        var final = toAbsoluteIndex(end === undefined ? len : end, len);
        var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first));
        var viewS = new $DataView(this);
        var viewT = new $DataView(result);
        var index = 0;
        while (first < final) {
          viewT.setUint8(index++, viewS.getUint8(first++));
        } return result;
      }
    });
    
    __webpack_require__(47)(ARRAY_BUFFER);
    
    
    /***/ }),
    /* 270 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var $export = __webpack_require__(0);
    $export($export.G + $export.W + $export.F * !__webpack_require__(73).ABV, {
      DataView: __webpack_require__(107).DataView
    });
    
    
    /***/ }),
    /* 271 */
    /***/ (function(module, exports, __webpack_require__) {
    
    __webpack_require__(32)('Int8', 1, function (init) {
      return function Int8Array(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
      };
    });
    
    
    /***/ }),
    /* 272 */
    /***/ (function(module, exports, __webpack_require__) {
    
    __webpack_require__(32)('Uint8', 1, function (init) {
      return function Uint8Array(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
      };
    });
    
    
    /***/ }),
    /* 273 */
    /***/ (function(module, exports, __webpack_require__) {
    
    __webpack_require__(32)('Uint8', 1, function (init) {
      return function Uint8ClampedArray(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
      };
    }, true);
    
    
    /***/ }),
    /* 274 */
    /***/ (function(module, exports, __webpack_require__) {
    
    __webpack_require__(32)('Int16', 2, function (init) {
      return function Int16Array(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
      };
    });
    
    
    /***/ }),
    /* 275 */
    /***/ (function(module, exports, __webpack_require__) {
    
    __webpack_require__(32)('Uint16', 2, function (init) {
      return function Uint16Array(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
      };
    });
    
    
    /***/ }),
    /* 276 */
    /***/ (function(module, exports, __webpack_require__) {
    
    __webpack_require__(32)('Int32', 4, function (init) {
      return function Int32Array(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
      };
    });
    
    
    /***/ }),
    /* 277 */
    /***/ (function(module, exports, __webpack_require__) {
    
    __webpack_require__(32)('Uint32', 4, function (init) {
      return function Uint32Array(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
      };
    });
    
    
    /***/ }),
    /* 278 */
    /***/ (function(module, exports, __webpack_require__) {
    
    __webpack_require__(32)('Float32', 4, function (init) {
      return function Float32Array(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
      };
    });
    
    
    /***/ }),
    /* 279 */
    /***/ (function(module, exports, __webpack_require__) {
    
    __webpack_require__(32)('Float64', 8, function (init) {
      return function Float64Array(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
      };
    });
    
    
    /***/ }),
    /* 280 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
    var $export = __webpack_require__(0);
    var aFunction = __webpack_require__(11);
    var anObject = __webpack_require__(1);
    var rApply = (__webpack_require__(2).Reflect || {}).apply;
    var fApply = Function.apply;
    // MS Edge argumentsList argument is optional
    $export($export.S + $export.F * !__webpack_require__(4)(function () {
      rApply(function () { /* empty */ });
    }), 'Reflect', {
      apply: function apply(target, thisArgument, argumentsList) {
        var T = aFunction(target);
        var L = anObject(argumentsList);
        return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
      }
    });
    
    
    /***/ }),
    /* 281 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
    var $export = __webpack_require__(0);
    var create = __webpack_require__(45);
    var aFunction = __webpack_require__(11);
    var anObject = __webpack_require__(1);
    var isObject = __webpack_require__(5);
    var fails = __webpack_require__(4);
    var bind = __webpack_require__(117);
    var rConstruct = (__webpack_require__(2).Reflect || {}).construct;
    
    // MS Edge supports only 2 arguments and argumentsList argument is optional
    // FF Nightly sets third argument as `new.target`, but does not create `this` from it
    var NEW_TARGET_BUG = fails(function () {
      function F() { /* empty */ }
      return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);
    });
    var ARGS_BUG = !fails(function () {
      rConstruct(function () { /* empty */ });
    });
    
    $export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
      construct: function construct(Target, args /* , newTarget */) {
        aFunction(Target);
        anObject(args);
        var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
        if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
        if (Target == newTarget) {
          // w/o altered newTarget, optimization for 0-4 arguments
          switch (args.length) {
            case 0: return new Target();
            case 1: return new Target(args[0]);
            case 2: return new Target(args[0], args[1]);
            case 3: return new Target(args[0], args[1], args[2]);
            case 4: return new Target(args[0], args[1], args[2], args[3]);
          }
          // w/o altered newTarget, lot of arguments case
          var $args = [null];
          $args.push.apply($args, args);
          return new (bind.apply(Target, $args))();
        }
        // with altered newTarget, not support built-in constructors
        var proto = newTarget.prototype;
        var instance = create(isObject(proto) ? proto : Object.prototype);
        var result = Function.apply.call(Target, instance, args);
        return isObject(result) ? result : instance;
      }
    });
    
    
    /***/ }),
    /* 282 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
    var dP = __webpack_require__(8);
    var $export = __webpack_require__(0);
    var anObject = __webpack_require__(1);
    var toPrimitive = __webpack_require__(27);
    
    // MS Edge has broken Reflect.defineProperty - throwing instead of returning false
    $export($export.S + $export.F * __webpack_require__(4)(function () {
      // eslint-disable-next-line no-undef
      Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
    }), 'Reflect', {
      defineProperty: function defineProperty(target, propertyKey, attributes) {
        anObject(target);
        propertyKey = toPrimitive(propertyKey, true);
        anObject(attributes);
        try {
          dP.f(target, propertyKey, attributes);
          return true;
        } catch (e) {
          return false;
        }
      }
    });
    
    
    /***/ }),
    /* 283 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 26.1.4 Reflect.deleteProperty(target, propertyKey)
    var $export = __webpack_require__(0);
    var gOPD = __webpack_require__(18).f;
    var anObject = __webpack_require__(1);
    
    $export($export.S, 'Reflect', {
      deleteProperty: function deleteProperty(target, propertyKey) {
        var desc = gOPD(anObject(target), propertyKey);
        return desc && !desc.configurable ? false : delete target[propertyKey];
      }
    });
    
    
    /***/ }),
    /* 284 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // 26.1.5 Reflect.enumerate(target)
    var $export = __webpack_require__(0);
    var anObject = __webpack_require__(1);
    var Enumerate = function (iterated) {
      this._t = anObject(iterated); // target
      this._i = 0;                  // next index
      var keys = this._k = [];      // keys
      var key;
      for (key in iterated) keys.push(key);
    };
    __webpack_require__(95)(Enumerate, 'Object', function () {
      var that = this;
      var keys = that._k;
      var key;
      do {
        if (that._i >= keys.length) return { value: undefined, done: true };
      } while (!((key = keys[that._i++]) in that._t));
      return { value: key, done: false };
    });
    
    $export($export.S, 'Reflect', {
      enumerate: function enumerate(target) {
        return new Enumerate(target);
      }
    });
    
    
    /***/ }),
    /* 285 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 26.1.6 Reflect.get(target, propertyKey [, receiver])
    var gOPD = __webpack_require__(18);
    var getPrototypeOf = __webpack_require__(19);
    var has = __webpack_require__(13);
    var $export = __webpack_require__(0);
    var isObject = __webpack_require__(5);
    var anObject = __webpack_require__(1);
    
    function get(target, propertyKey /* , receiver */) {
      var receiver = arguments.length < 3 ? target : arguments[2];
      var desc, proto;
      if (anObject(target) === receiver) return target[propertyKey];
      if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')
        ? desc.value
        : desc.get !== undefined
          ? desc.get.call(receiver)
          : undefined;
      if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
    }
    
    $export($export.S, 'Reflect', { get: get });
    
    
    /***/ }),
    /* 286 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
    var gOPD = __webpack_require__(18);
    var $export = __webpack_require__(0);
    var anObject = __webpack_require__(1);
    
    $export($export.S, 'Reflect', {
      getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
        return gOPD.f(anObject(target), propertyKey);
      }
    });
    
    
    /***/ }),
    /* 287 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 26.1.8 Reflect.getPrototypeOf(target)
    var $export = __webpack_require__(0);
    var getProto = __webpack_require__(19);
    var anObject = __webpack_require__(1);
    
    $export($export.S, 'Reflect', {
      getPrototypeOf: function getPrototypeOf(target) {
        return getProto(anObject(target));
      }
    });
    
    
    /***/ }),
    /* 288 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 26.1.9 Reflect.has(target, propertyKey)
    var $export = __webpack_require__(0);
    
    $export($export.S, 'Reflect', {
      has: function has(target, propertyKey) {
        return propertyKey in target;
      }
    });
    
    
    /***/ }),
    /* 289 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 26.1.10 Reflect.isExtensible(target)
    var $export = __webpack_require__(0);
    var anObject = __webpack_require__(1);
    var $isExtensible = Object.isExtensible;
    
    $export($export.S, 'Reflect', {
      isExtensible: function isExtensible(target) {
        anObject(target);
        return $isExtensible ? $isExtensible(target) : true;
      }
    });
    
    
    /***/ }),
    /* 290 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 26.1.11 Reflect.ownKeys(target)
    var $export = __webpack_require__(0);
    
    $export($export.S, 'Reflect', { ownKeys: __webpack_require__(138) });
    
    
    /***/ }),
    /* 291 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 26.1.12 Reflect.preventExtensions(target)
    var $export = __webpack_require__(0);
    var anObject = __webpack_require__(1);
    var $preventExtensions = Object.preventExtensions;
    
    $export($export.S, 'Reflect', {
      preventExtensions: function preventExtensions(target) {
        anObject(target);
        try {
          if ($preventExtensions) $preventExtensions(target);
          return true;
        } catch (e) {
          return false;
        }
      }
    });
    
    
    /***/ }),
    /* 292 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
    var dP = __webpack_require__(8);
    var gOPD = __webpack_require__(18);
    var getPrototypeOf = __webpack_require__(19);
    var has = __webpack_require__(13);
    var $export = __webpack_require__(0);
    var createDesc = __webpack_require__(40);
    var anObject = __webpack_require__(1);
    var isObject = __webpack_require__(5);
    
    function set(target, propertyKey, V /* , receiver */) {
      var receiver = arguments.length < 4 ? target : arguments[3];
      var ownDesc = gOPD.f(anObject(target), propertyKey);
      var existingDescriptor, proto;
      if (!ownDesc) {
        if (isObject(proto = getPrototypeOf(target))) {
          return set(proto, propertyKey, V, receiver);
        }
        ownDesc = createDesc(0);
      }
      if (has(ownDesc, 'value')) {
        if (ownDesc.writable === false || !isObject(receiver)) return false;
        existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);
        existingDescriptor.value = V;
        dP.f(receiver, propertyKey, existingDescriptor);
        return true;
      }
      return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
    }
    
    $export($export.S, 'Reflect', { set: set });
    
    
    /***/ }),
    /* 293 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // 26.1.14 Reflect.setPrototypeOf(target, proto)
    var $export = __webpack_require__(0);
    var setProto = __webpack_require__(87);
    
    if (setProto) $export($export.S, 'Reflect', {
      setPrototypeOf: function setPrototypeOf(target, proto) {
        setProto.check(target, proto);
        try {
          setProto.set(target, proto);
          return true;
        } catch (e) {
          return false;
        }
      }
    });
    
    
    /***/ }),
    /* 294 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // https://github.com/tc39/Array.prototype.includes
    var $export = __webpack_require__(0);
    var $includes = __webpack_require__(64)(true);
    
    $export($export.P, 'Array', {
      includes: function includes(el /* , fromIndex = 0 */) {
        return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
      }
    });
    
    __webpack_require__(37)('includes');
    
    
    /***/ }),
    /* 295 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap
    var $export = __webpack_require__(0);
    var flattenIntoArray = __webpack_require__(139);
    var toObject = __webpack_require__(10);
    var toLength = __webpack_require__(9);
    var aFunction = __webpack_require__(11);
    var arraySpeciesCreate = __webpack_require__(101);
    
    $export($export.P, 'Array', {
      flatMap: function flatMap(callbackfn /* , thisArg */) {
        var O = toObject(this);
        var sourceLen, A;
        aFunction(callbackfn);
        sourceLen = toLength(O.length);
        A = arraySpeciesCreate(O, 0);
        flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
        return A;
      }
    });
    
    __webpack_require__(37)('flatMap');
    
    
    /***/ }),
    /* 296 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten
    var $export = __webpack_require__(0);
    var flattenIntoArray = __webpack_require__(139);
    var toObject = __webpack_require__(10);
    var toLength = __webpack_require__(9);
    var toInteger = __webpack_require__(29);
    var arraySpeciesCreate = __webpack_require__(101);
    
    $export($export.P, 'Array', {
      flatten: function flatten(/* depthArg = 1 */) {
        var depthArg = arguments[0];
        var O = toObject(this);
        var sourceLen = toLength(O.length);
        var A = arraySpeciesCreate(O, 0);
        flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
        return A;
      }
    });
    
    __webpack_require__(37)('flatten');
    
    
    /***/ }),
    /* 297 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // https://github.com/mathiasbynens/String.prototype.at
    var $export = __webpack_require__(0);
    var $at = __webpack_require__(93)(true);
    
    $export($export.P, 'String', {
      at: function at(pos) {
        return $at(this, pos);
      }
    });
    
    
    /***/ }),
    /* 298 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // https://github.com/tc39/proposal-string-pad-start-end
    var $export = __webpack_require__(0);
    var $pad = __webpack_require__(140);
    
    $export($export.P, 'String', {
      padStart: function padStart(maxLength /* , fillString = ' ' */) {
        return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
      }
    });
    
    
    /***/ }),
    /* 299 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // https://github.com/tc39/proposal-string-pad-start-end
    var $export = __webpack_require__(0);
    var $pad = __webpack_require__(140);
    
    $export($export.P, 'String', {
      padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
        return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
      }
    });
    
    
    /***/ }),
    /* 300 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // https://github.com/sebmarkbage/ecmascript-string-left-right-trim
    __webpack_require__(54)('trimLeft', function ($trim) {
      return function trimLeft() {
        return $trim(this, 1);
      };
    }, 'trimStart');
    
    
    /***/ }),
    /* 301 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // https://github.com/sebmarkbage/ecmascript-string-left-right-trim
    __webpack_require__(54)('trimRight', function ($trim) {
      return function trimRight() {
        return $trim(this, 2);
      };
    }, 'trimEnd');
    
    
    /***/ }),
    /* 302 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // https://tc39.github.io/String.prototype.matchAll/
    var $export = __webpack_require__(0);
    var defined = __webpack_require__(28);
    var toLength = __webpack_require__(9);
    var isRegExp = __webpack_require__(67);
    var getFlags = __webpack_require__(69);
    var RegExpProto = RegExp.prototype;
    
    var $RegExpStringIterator = function (regexp, string) {
      this._r = regexp;
      this._s = string;
    };
    
    __webpack_require__(95)($RegExpStringIterator, 'RegExp String', function next() {
      var match = this._r.exec(this._s);
      return { value: match, done: match === null };
    });
    
    $export($export.P, 'String', {
      matchAll: function matchAll(regexp) {
        defined(this);
        if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');
        var S = String(this);
        var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);
        var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
        rx.lastIndex = toLength(regexp.lastIndex);
        return new $RegExpStringIterator(rx, S);
      }
    });
    
    
    /***/ }),
    /* 303 */
    /***/ (function(module, exports, __webpack_require__) {
    
    __webpack_require__(83)('asyncIterator');
    
    
    /***/ }),
    /* 304 */
    /***/ (function(module, exports, __webpack_require__) {
    
    __webpack_require__(83)('observable');
    
    
    /***/ }),
    /* 305 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // https://github.com/tc39/proposal-object-getownpropertydescriptors
    var $export = __webpack_require__(0);
    var ownKeys = __webpack_require__(138);
    var toIObject = __webpack_require__(17);
    var gOPD = __webpack_require__(18);
    var createProperty = __webpack_require__(99);
    
    $export($export.S, 'Object', {
      getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
        var O = toIObject(object);
        var getDesc = gOPD.f;
        var keys = ownKeys(O);
        var result = {};
        var i = 0;
        var key, desc;
        while (keys.length > i) {
          desc = getDesc(O, key = keys[i++]);
          if (desc !== undefined) createProperty(result, key, desc);
        }
        return result;
      }
    });
    
    
    /***/ }),
    /* 306 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // https://github.com/tc39/proposal-object-values-entries
    var $export = __webpack_require__(0);
    var $values = __webpack_require__(141)(false);
    
    $export($export.S, 'Object', {
      values: function values(it) {
        return $values(it);
      }
    });
    
    
    /***/ }),
    /* 307 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // https://github.com/tc39/proposal-object-values-entries
    var $export = __webpack_require__(0);
    var $entries = __webpack_require__(141)(true);
    
    $export($export.S, 'Object', {
      entries: function entries(it) {
        return $entries(it);
      }
    });
    
    
    /***/ }),
    /* 308 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var $export = __webpack_require__(0);
    var toObject = __webpack_require__(10);
    var aFunction = __webpack_require__(11);
    var $defineProperty = __webpack_require__(8);
    
    // B.2.2.2 Object.prototype.__defineGetter__(P, getter)
    __webpack_require__(7) && $export($export.P + __webpack_require__(74), 'Object', {
      __defineGetter__: function __defineGetter__(P, getter) {
        $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });
      }
    });
    
    
    /***/ }),
    /* 309 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var $export = __webpack_require__(0);
    var toObject = __webpack_require__(10);
    var aFunction = __webpack_require__(11);
    var $defineProperty = __webpack_require__(8);
    
    // B.2.2.3 Object.prototype.__defineSetter__(P, setter)
    __webpack_require__(7) && $export($export.P + __webpack_require__(74), 'Object', {
      __defineSetter__: function __defineSetter__(P, setter) {
        $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });
      }
    });
    
    
    /***/ }),
    /* 310 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var $export = __webpack_require__(0);
    var toObject = __webpack_require__(10);
    var toPrimitive = __webpack_require__(27);
    var getPrototypeOf = __webpack_require__(19);
    var getOwnPropertyDescriptor = __webpack_require__(18).f;
    
    // B.2.2.4 Object.prototype.__lookupGetter__(P)
    __webpack_require__(7) && $export($export.P + __webpack_require__(74), 'Object', {
      __lookupGetter__: function __lookupGetter__(P) {
        var O = toObject(this);
        var K = toPrimitive(P, true);
        var D;
        do {
          if (D = getOwnPropertyDescriptor(O, K)) return D.get;
        } while (O = getPrototypeOf(O));
      }
    });
    
    
    /***/ }),
    /* 311 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    var $export = __webpack_require__(0);
    var toObject = __webpack_require__(10);
    var toPrimitive = __webpack_require__(27);
    var getPrototypeOf = __webpack_require__(19);
    var getOwnPropertyDescriptor = __webpack_require__(18).f;
    
    // B.2.2.5 Object.prototype.__lookupSetter__(P)
    __webpack_require__(7) && $export($export.P + __webpack_require__(74), 'Object', {
      __lookupSetter__: function __lookupSetter__(P) {
        var O = toObject(this);
        var K = toPrimitive(P, true);
        var D;
        do {
          if (D = getOwnPropertyDescriptor(O, K)) return D.set;
        } while (O = getPrototypeOf(O));
      }
    });
    
    
    /***/ }),
    /* 312 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // https://github.com/DavidBruant/Map-Set.prototype.toJSON
    var $export = __webpack_require__(0);
    
    $export($export.P + $export.R, 'Map', { toJSON: __webpack_require__(142)('Map') });
    
    
    /***/ }),
    /* 313 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // https://github.com/DavidBruant/Map-Set.prototype.toJSON
    var $export = __webpack_require__(0);
    
    $export($export.P + $export.R, 'Set', { toJSON: __webpack_require__(142)('Set') });
    
    
    /***/ }),
    /* 314 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
    __webpack_require__(75)('Map');
    
    
    /***/ }),
    /* 315 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
    __webpack_require__(75)('Set');
    
    
    /***/ }),
    /* 316 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of
    __webpack_require__(75)('WeakMap');
    
    
    /***/ }),
    /* 317 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of
    __webpack_require__(75)('WeakSet');
    
    
    /***/ }),
    /* 318 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
    __webpack_require__(76)('Map');
    
    
    /***/ }),
    /* 319 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
    __webpack_require__(76)('Set');
    
    
    /***/ }),
    /* 320 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from
    __webpack_require__(76)('WeakMap');
    
    
    /***/ }),
    /* 321 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from
    __webpack_require__(76)('WeakSet');
    
    
    /***/ }),
    /* 322 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // https://github.com/tc39/proposal-global
    var $export = __webpack_require__(0);
    
    $export($export.G, { global: __webpack_require__(2) });
    
    
    /***/ }),
    /* 323 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // https://github.com/tc39/proposal-global
    var $export = __webpack_require__(0);
    
    $export($export.S, 'System', { global: __webpack_require__(2) });
    
    
    /***/ }),
    /* 324 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // https://github.com/ljharb/proposal-is-error
    var $export = __webpack_require__(0);
    var cof = __webpack_require__(24);
    
    $export($export.S, 'Error', {
      isError: function isError(it) {
        return cof(it) === 'Error';
      }
    });
    
    
    /***/ }),
    /* 325 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // https://rwaldron.github.io/proposal-math-extensions/
    var $export = __webpack_require__(0);
    
    $export($export.S, 'Math', {
      clamp: function clamp(x, lower, upper) {
        return Math.min(upper, Math.max(lower, x));
      }
    });
    
    
    /***/ }),
    /* 326 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // https://rwaldron.github.io/proposal-math-extensions/
    var $export = __webpack_require__(0);
    
    $export($export.S, 'Math', { DEG_PER_RAD: Math.PI / 180 });
    
    
    /***/ }),
    /* 327 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // https://rwaldron.github.io/proposal-math-extensions/
    var $export = __webpack_require__(0);
    var RAD_PER_DEG = 180 / Math.PI;
    
    $export($export.S, 'Math', {
      degrees: function degrees(radians) {
        return radians * RAD_PER_DEG;
      }
    });
    
    
    /***/ }),
    /* 328 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // https://rwaldron.github.io/proposal-math-extensions/
    var $export = __webpack_require__(0);
    var scale = __webpack_require__(144);
    var fround = __webpack_require__(124);
    
    $export($export.S, 'Math', {
      fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {
        return fround(scale(x, inLow, inHigh, outLow, outHigh));
      }
    });
    
    
    /***/ }),
    /* 329 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
    var $export = __webpack_require__(0);
    
    $export($export.S, 'Math', {
      iaddh: function iaddh(x0, x1, y0, y1) {
        var $x0 = x0 >>> 0;
        var $x1 = x1 >>> 0;
        var $y0 = y0 >>> 0;
        return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
      }
    });
    
    
    /***/ }),
    /* 330 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
    var $export = __webpack_require__(0);
    
    $export($export.S, 'Math', {
      isubh: function isubh(x0, x1, y0, y1) {
        var $x0 = x0 >>> 0;
        var $x1 = x1 >>> 0;
        var $y0 = y0 >>> 0;
        return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
      }
    });
    
    
    /***/ }),
    /* 331 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
    var $export = __webpack_require__(0);
    
    $export($export.S, 'Math', {
      imulh: function imulh(u, v) {
        var UINT16 = 0xffff;
        var $u = +u;
        var $v = +v;
        var u0 = $u & UINT16;
        var v0 = $v & UINT16;
        var u1 = $u >> 16;
        var v1 = $v >> 16;
        var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
        return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
      }
    });
    
    
    /***/ }),
    /* 332 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // https://rwaldron.github.io/proposal-math-extensions/
    var $export = __webpack_require__(0);
    
    $export($export.S, 'Math', { RAD_PER_DEG: 180 / Math.PI });
    
    
    /***/ }),
    /* 333 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // https://rwaldron.github.io/proposal-math-extensions/
    var $export = __webpack_require__(0);
    var DEG_PER_RAD = Math.PI / 180;
    
    $export($export.S, 'Math', {
      radians: function radians(degrees) {
        return degrees * DEG_PER_RAD;
      }
    });
    
    
    /***/ }),
    /* 334 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // https://rwaldron.github.io/proposal-math-extensions/
    var $export = __webpack_require__(0);
    
    $export($export.S, 'Math', { scale: __webpack_require__(144) });
    
    
    /***/ }),
    /* 335 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
    var $export = __webpack_require__(0);
    
    $export($export.S, 'Math', {
      umulh: function umulh(u, v) {
        var UINT16 = 0xffff;
        var $u = +u;
        var $v = +v;
        var u0 = $u & UINT16;
        var v0 = $v & UINT16;
        var u1 = $u >>> 16;
        var v1 = $v >>> 16;
        var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
        return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
      }
    });
    
    
    /***/ }),
    /* 336 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // http://jfbastien.github.io/papers/Math.signbit.html
    var $export = __webpack_require__(0);
    
    $export($export.S, 'Math', { signbit: function signbit(x) {
      // eslint-disable-next-line no-self-compare
      return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;
    } });
    
    
    /***/ }),
    /* 337 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    // https://github.com/tc39/proposal-promise-finally
    
    var $export = __webpack_require__(0);
    var core = __webpack_require__(26);
    var global = __webpack_require__(2);
    var speciesConstructor = __webpack_require__(71);
    var promiseResolve = __webpack_require__(131);
    
    $export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
      var C = speciesConstructor(this, core.Promise || global.Promise);
      var isFunction = typeof onFinally == 'function';
      return this.then(
        isFunction ? function (x) {
          return promiseResolve(C, onFinally()).then(function () { return x; });
        } : onFinally,
        isFunction ? function (e) {
          return promiseResolve(C, onFinally()).then(function () { throw e; });
        } : onFinally
      );
    } });
    
    
    /***/ }),
    /* 338 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // https://github.com/tc39/proposal-promise-try
    var $export = __webpack_require__(0);
    var newPromiseCapability = __webpack_require__(106);
    var perform = __webpack_require__(130);
    
    $export($export.S, 'Promise', { 'try': function (callbackfn) {
      var promiseCapability = newPromiseCapability.f(this);
      var result = perform(callbackfn);
      (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
      return promiseCapability.promise;
    } });
    
    
    /***/ }),
    /* 339 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var metadata = __webpack_require__(33);
    var anObject = __webpack_require__(1);
    var toMetaKey = metadata.key;
    var ordinaryDefineOwnMetadata = metadata.set;
    
    metadata.exp({ defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
      ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
    } });
    
    
    /***/ }),
    /* 340 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var metadata = __webpack_require__(33);
    var anObject = __webpack_require__(1);
    var toMetaKey = metadata.key;
    var getOrCreateMetadataMap = metadata.map;
    var store = metadata.store;
    
    metadata.exp({ deleteMetadata: function deleteMetadata(metadataKey, target /* , targetKey */) {
      var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);
      var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
      if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
      if (metadataMap.size) return true;
      var targetMetadata = store.get(target);
      targetMetadata['delete'](targetKey);
      return !!targetMetadata.size || store['delete'](target);
    } });
    
    
    /***/ }),
    /* 341 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var metadata = __webpack_require__(33);
    var anObject = __webpack_require__(1);
    var getPrototypeOf = __webpack_require__(19);
    var ordinaryHasOwnMetadata = metadata.has;
    var ordinaryGetOwnMetadata = metadata.get;
    var toMetaKey = metadata.key;
    
    var ordinaryGetMetadata = function (MetadataKey, O, P) {
      var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
      if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);
      var parent = getPrototypeOf(O);
      return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
    };
    
    metadata.exp({ getMetadata: function getMetadata(metadataKey, target /* , targetKey */) {
      return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
    } });
    
    
    /***/ }),
    /* 342 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var Set = __webpack_require__(134);
    var from = __webpack_require__(143);
    var metadata = __webpack_require__(33);
    var anObject = __webpack_require__(1);
    var getPrototypeOf = __webpack_require__(19);
    var ordinaryOwnMetadataKeys = metadata.keys;
    var toMetaKey = metadata.key;
    
    var ordinaryMetadataKeys = function (O, P) {
      var oKeys = ordinaryOwnMetadataKeys(O, P);
      var parent = getPrototypeOf(O);
      if (parent === null) return oKeys;
      var pKeys = ordinaryMetadataKeys(parent, P);
      return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
    };
    
    metadata.exp({ getMetadataKeys: function getMetadataKeys(target /* , targetKey */) {
      return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
    } });
    
    
    /***/ }),
    /* 343 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var metadata = __webpack_require__(33);
    var anObject = __webpack_require__(1);
    var ordinaryGetOwnMetadata = metadata.get;
    var toMetaKey = metadata.key;
    
    metadata.exp({ getOwnMetadata: function getOwnMetadata(metadataKey, target /* , targetKey */) {
      return ordinaryGetOwnMetadata(metadataKey, anObject(target)
        , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
    } });
    
    
    /***/ }),
    /* 344 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var metadata = __webpack_require__(33);
    var anObject = __webpack_require__(1);
    var ordinaryOwnMetadataKeys = metadata.keys;
    var toMetaKey = metadata.key;
    
    metadata.exp({ getOwnMetadataKeys: function getOwnMetadataKeys(target /* , targetKey */) {
      return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
    } });
    
    
    /***/ }),
    /* 345 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var metadata = __webpack_require__(33);
    var anObject = __webpack_require__(1);
    var getPrototypeOf = __webpack_require__(19);
    var ordinaryHasOwnMetadata = metadata.has;
    var toMetaKey = metadata.key;
    
    var ordinaryHasMetadata = function (MetadataKey, O, P) {
      var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
      if (hasOwn) return true;
      var parent = getPrototypeOf(O);
      return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
    };
    
    metadata.exp({ hasMetadata: function hasMetadata(metadataKey, target /* , targetKey */) {
      return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
    } });
    
    
    /***/ }),
    /* 346 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var metadata = __webpack_require__(33);
    var anObject = __webpack_require__(1);
    var ordinaryHasOwnMetadata = metadata.has;
    var toMetaKey = metadata.key;
    
    metadata.exp({ hasOwnMetadata: function hasOwnMetadata(metadataKey, target /* , targetKey */) {
      return ordinaryHasOwnMetadata(metadataKey, anObject(target)
        , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
    } });
    
    
    /***/ }),
    /* 347 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var $metadata = __webpack_require__(33);
    var anObject = __webpack_require__(1);
    var aFunction = __webpack_require__(11);
    var toMetaKey = $metadata.key;
    var ordinaryDefineOwnMetadata = $metadata.set;
    
    $metadata.exp({ metadata: function metadata(metadataKey, metadataValue) {
      return function decorator(target, targetKey) {
        ordinaryDefineOwnMetadata(
          metadataKey, metadataValue,
          (targetKey !== undefined ? anObject : aFunction)(target),
          toMetaKey(targetKey)
        );
      };
    } });
    
    
    /***/ }),
    /* 348 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
    var $export = __webpack_require__(0);
    var microtask = __webpack_require__(105)();
    var process = __webpack_require__(2).process;
    var isNode = __webpack_require__(24)(process) == 'process';
    
    $export($export.G, {
      asap: function asap(fn) {
        var domain = isNode && process.domain;
        microtask(domain ? domain.bind(fn) : fn);
      }
    });
    
    
    /***/ }),
    /* 349 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    // https://github.com/zenparsing/es-observable
    var $export = __webpack_require__(0);
    var global = __webpack_require__(2);
    var core = __webpack_require__(26);
    var microtask = __webpack_require__(105)();
    var OBSERVABLE = __webpack_require__(6)('observable');
    var aFunction = __webpack_require__(11);
    var anObject = __webpack_require__(1);
    var anInstance = __webpack_require__(48);
    var redefineAll = __webpack_require__(50);
    var hide = __webpack_require__(14);
    var forOf = __webpack_require__(49);
    var RETURN = forOf.RETURN;
    
    var getMethod = function (fn) {
      return fn == null ? undefined : aFunction(fn);
    };
    
    var cleanupSubscription = function (subscription) {
      var cleanup = subscription._c;
      if (cleanup) {
        subscription._c = undefined;
        cleanup();
      }
    };
    
    var subscriptionClosed = function (subscription) {
      return subscription._o === undefined;
    };
    
    var closeSubscription = function (subscription) {
      if (!subscriptionClosed(subscription)) {
        subscription._o = undefined;
        cleanupSubscription(subscription);
      }
    };
    
    var Subscription = function (observer, subscriber) {
      anObject(observer);
      this._c = undefined;
      this._o = observer;
      observer = new SubscriptionObserver(this);
      try {
        var cleanup = subscriber(observer);
        var subscription = cleanup;
        if (cleanup != null) {
          if (typeof cleanup.unsubscribe === 'function') cleanup = function () { subscription.unsubscribe(); };
          else aFunction(cleanup);
          this._c = cleanup;
        }
      } catch (e) {
        observer.error(e);
        return;
      } if (subscriptionClosed(this)) cleanupSubscription(this);
    };
    
    Subscription.prototype = redefineAll({}, {
      unsubscribe: function unsubscribe() { closeSubscription(this); }
    });
    
    var SubscriptionObserver = function (subscription) {
      this._s = subscription;
    };
    
    SubscriptionObserver.prototype = redefineAll({}, {
      next: function next(value) {
        var subscription = this._s;
        if (!subscriptionClosed(subscription)) {
          var observer = subscription._o;
          try {
            var m = getMethod(observer.next);
            if (m) return m.call(observer, value);
          } catch (e) {
            try {
              closeSubscription(subscription);
            } finally {
              throw e;
            }
          }
        }
      },
      error: function error(value) {
        var subscription = this._s;
        if (subscriptionClosed(subscription)) throw value;
        var observer = subscription._o;
        subscription._o = undefined;
        try {
          var m = getMethod(observer.error);
          if (!m) throw value;
          value = m.call(observer, value);
        } catch (e) {
          try {
            cleanupSubscription(subscription);
          } finally {
            throw e;
          }
        } cleanupSubscription(subscription);
        return value;
      },
      complete: function complete(value) {
        var subscription = this._s;
        if (!subscriptionClosed(subscription)) {
          var observer = subscription._o;
          subscription._o = undefined;
          try {
            var m = getMethod(observer.complete);
            value = m ? m.call(observer, value) : undefined;
          } catch (e) {
            try {
              cleanupSubscription(subscription);
            } finally {
              throw e;
            }
          } cleanupSubscription(subscription);
          return value;
        }
      }
    });
    
    var $Observable = function Observable(subscriber) {
      anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
    };
    
    redefineAll($Observable.prototype, {
      subscribe: function subscribe(observer) {
        return new Subscription(observer, this._f);
      },
      forEach: function forEach(fn) {
        var that = this;
        return new (core.Promise || global.Promise)(function (resolve, reject) {
          aFunction(fn);
          var subscription = that.subscribe({
            next: function (value) {
              try {
                return fn(value);
              } catch (e) {
                reject(e);
                subscription.unsubscribe();
              }
            },
            error: reject,
            complete: resolve
          });
        });
      }
    });
    
    redefineAll($Observable, {
      from: function from(x) {
        var C = typeof this === 'function' ? this : $Observable;
        var method = getMethod(anObject(x)[OBSERVABLE]);
        if (method) {
          var observable = anObject(method.call(x));
          return observable.constructor === C ? observable : new C(function (observer) {
            return observable.subscribe(observer);
          });
        }
        return new C(function (observer) {
          var done = false;
          microtask(function () {
            if (!done) {
              try {
                if (forOf(x, false, function (it) {
                  observer.next(it);
                  if (done) return RETURN;
                }) === RETURN) return;
              } catch (e) {
                if (done) throw e;
                observer.error(e);
                return;
              } observer.complete();
            }
          });
          return function () { done = true; };
        });
      },
      of: function of() {
        for (var i = 0, l = arguments.length, items = Array(l); i < l;) items[i] = arguments[i++];
        return new (typeof this === 'function' ? this : $Observable)(function (observer) {
          var done = false;
          microtask(function () {
            if (!done) {
              for (var j = 0; j < items.length; ++j) {
                observer.next(items[j]);
                if (done) return;
              } observer.complete();
            }
          });
          return function () { done = true; };
        });
      }
    });
    
    hide($Observable.prototype, OBSERVABLE, function () { return this; });
    
    $export($export.G, { Observable: $Observable });
    
    __webpack_require__(47)('Observable');
    
    
    /***/ }),
    /* 350 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // ie9- setTimeout & setInterval additional parameters fix
    var global = __webpack_require__(2);
    var $export = __webpack_require__(0);
    var navigator = global.navigator;
    var slice = [].slice;
    var MSIE = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check
    var wrap = function (set) {
      return function (fn, time /* , ...args */) {
        var boundArgs = arguments.length > 2;
        var args = boundArgs ? slice.call(arguments, 2) : false;
        return set(boundArgs ? function () {
          // eslint-disable-next-line no-new-func
          (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
        } : fn, time);
      };
    };
    $export($export.G + $export.B + $export.F * MSIE, {
      setTimeout: wrap(global.setTimeout),
      setInterval: wrap(global.setInterval)
    });
    
    
    /***/ }),
    /* 351 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var $export = __webpack_require__(0);
    var $task = __webpack_require__(104);
    $export($export.G + $export.B, {
      setImmediate: $task.set,
      clearImmediate: $task.clear
    });
    
    
    /***/ }),
    /* 352 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var $iterators = __webpack_require__(103);
    var getKeys = __webpack_require__(43);
    var redefine = __webpack_require__(15);
    var global = __webpack_require__(2);
    var hide = __webpack_require__(14);
    var Iterators = __webpack_require__(55);
    var wks = __webpack_require__(6);
    var ITERATOR = wks('iterator');
    var TO_STRING_TAG = wks('toStringTag');
    var ArrayValues = Iterators.Array;
    
    var DOMIterables = {
      CSSRuleList: true, // TODO: Not spec compliant, should be false.
      CSSStyleDeclaration: false,
      CSSValueList: false,
      ClientRectList: false,
      DOMRectList: false,
      DOMStringList: false,
      DOMTokenList: true,
      DataTransferItemList: false,
      FileList: false,
      HTMLAllCollection: false,
      HTMLCollection: false,
      HTMLFormElement: false,
      HTMLSelectElement: false,
      MediaList: true, // TODO: Not spec compliant, should be false.
      MimeTypeArray: false,
      NamedNodeMap: false,
      NodeList: true,
      PaintRequestList: false,
      Plugin: false,
      PluginArray: false,
      SVGLengthList: false,
      SVGNumberList: false,
      SVGPathSegList: false,
      SVGPointList: false,
      SVGStringList: false,
      SVGTransformList: false,
      SourceBufferList: false,
      StyleSheetList: true, // TODO: Not spec compliant, should be false.
      TextTrackCueList: false,
      TextTrackList: false,
      TouchList: false
    };
    
    for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
      var NAME = collections[i];
      var explicit = DOMIterables[NAME];
      var Collection = global[NAME];
      var proto = Collection && Collection.prototype;
      var key;
      if (proto) {
        if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
        if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
        Iterators[NAME] = ArrayValues;
        if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
      }
    }
    
    
    /***/ }),
    /* 353 */
    /***/ (function(module, exports, __webpack_require__) {
    
    /* WEBPACK VAR INJECTION */(function(global) {/**
     * Copyright (c) 2014, Facebook, Inc.
     * All rights reserved.
     *
     * This source code is licensed under the BSD-style license found in the
     * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
     * additional grant of patent rights can be found in the PATENTS file in
     * the same directory.
     */
    
    !(function(global) {
      "use strict";
    
      var Op = Object.prototype;
      var hasOwn = Op.hasOwnProperty;
      var undefined; // More compressible than void 0.
      var $Symbol = typeof Symbol === "function" ? Symbol : {};
      var iteratorSymbol = $Symbol.iterator || "@@iterator";
      var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
      var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    
      var inModule = typeof module === "object";
      var runtime = global.regeneratorRuntime;
      if (runtime) {
        if (inModule) {
          // If regeneratorRuntime is defined globally and we're in a module,
          // make the exports object identical to regeneratorRuntime.
          module.exports = runtime;
        }
        // Don't bother evaluating the rest of this file if the runtime was
        // already defined globally.
        return;
      }
    
      // Define the runtime globally (as expected by generated code) as either
      // module.exports (if we're in a module) or a new, empty object.
      runtime = global.regeneratorRuntime = inModule ? module.exports : {};
    
      function wrap(innerFn, outerFn, self, tryLocsList) {
        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []);
    
        // The ._invoke method unifies the implementations of the .next,
        // .throw, and .return methods.
        generator._invoke = makeInvokeMethod(innerFn, self, context);
    
        return generator;
      }
      runtime.wrap = wrap;
    
      // Try/catch helper to minimize deoptimizations. Returns a completion
      // record like context.tryEntries[i].completion. This interface could
      // have been (and was previously) designed to take a closure to be
      // invoked without arguments, but in all the cases we care about we
      // already have an existing method we want to call, so there's no need
      // to create a new function object. We can even get away with assuming
      // the method takes exactly one argument, since that happens to be true
      // in every case, so we don't have to touch the arguments object. The
      // only additional allocation required is the completion record, which
      // has a stable shape and so hopefully should be cheap to allocate.
      function tryCatch(fn, obj, arg) {
        try {
          return { type: "normal", arg: fn.call(obj, arg) };
        } catch (err) {
          return { type: "throw", arg: err };
        }
      }
    
      var GenStateSuspendedStart = "suspendedStart";
      var GenStateSuspendedYield = "suspendedYield";
      var GenStateExecuting = "executing";
      var GenStateCompleted = "completed";
    
      // Returning this object from the innerFn has the same effect as
      // breaking out of the dispatch switch statement.
      var ContinueSentinel = {};
    
      // Dummy constructor functions that we use as the .constructor and
      // .constructor.prototype properties for functions that return Generator
      // objects. For full spec compliance, you may wish to configure your
      // minifier not to mangle the names of these two functions.
      function Generator() {}
      function GeneratorFunction() {}
      function GeneratorFunctionPrototype() {}
    
      // This is a polyfill for %IteratorPrototype% for environments that
      // don't natively support it.
      var IteratorPrototype = {};
      IteratorPrototype[iteratorSymbol] = function () {
        return this;
      };
    
      var getProto = Object.getPrototypeOf;
      var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      if (NativeIteratorPrototype &&
          NativeIteratorPrototype !== Op &&
          hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
        // This environment has a native %IteratorPrototype%; use it instead
        // of the polyfill.
        IteratorPrototype = NativeIteratorPrototype;
      }
    
      var Gp = GeneratorFunctionPrototype.prototype =
        Generator.prototype = Object.create(IteratorPrototype);
      GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
      GeneratorFunctionPrototype.constructor = GeneratorFunction;
      GeneratorFunctionPrototype[toStringTagSymbol] =
        GeneratorFunction.displayName = "GeneratorFunction";
    
      // Helper for defining the .next, .throw, and .return methods of the
      // Iterator interface in terms of a single ._invoke method.
      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function(method) {
          prototype[method] = function(arg) {
            return this._invoke(method, arg);
          };
        });
      }
    
      runtime.isGeneratorFunction = function(genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor
          ? ctor === GeneratorFunction ||
            // For the native GeneratorFunction constructor, the best we can
            // do is to check its .name property.
            (ctor.displayName || ctor.name) === "GeneratorFunction"
          : false;
      };
    
      runtime.mark = function(genFun) {
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        } else {
          genFun.__proto__ = GeneratorFunctionPrototype;
          if (!(toStringTagSymbol in genFun)) {
            genFun[toStringTagSymbol] = "GeneratorFunction";
          }
        }
        genFun.prototype = Object.create(Gp);
        return genFun;
      };
    
      // Within the body of any async function, `await x` is transformed to
      // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
      // `hasOwn.call(value, "__await")` to determine if the yielded value is
      // meant to be awaited.
      runtime.awrap = function(arg) {
        return { __await: arg };
      };
    
      function AsyncIterator(generator) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);
          if (record.type === "throw") {
            reject(record.arg);
          } else {
            var result = record.arg;
            var value = result.value;
            if (value &&
                typeof value === "object" &&
                hasOwn.call(value, "__await")) {
              return Promise.resolve(value.__await).then(function(value) {
                invoke("next", value, resolve, reject);
              }, function(err) {
                invoke("throw", err, resolve, reject);
              });
            }
    
            return Promise.resolve(value).then(function(unwrapped) {
              // When a yielded Promise is resolved, its final value becomes
              // the .value of the Promise<{value,done}> result for the
              // current iteration. If the Promise is rejected, however, the
              // result for this iteration will be rejected with the same
              // reason. Note that rejections of yielded Promises are not
              // thrown back into the generator function, as is the case
              // when an awaited Promise is rejected. This difference in
              // behavior between yield and await is important, because it
              // allows the consumer to decide what to do with the yielded
              // rejection (swallow it and continue, manually .throw it back
              // into the generator, abandon iteration, whatever). With
              // await, by contrast, there is no opportunity to examine the
              // rejection reason outside the generator function, so the
              // only option is to throw it from the await expression, and
              // let the generator function handle the exception.
              result.value = unwrapped;
              resolve(result);
            }, reject);
          }
        }
    
        if (typeof global.process === "object" && global.process.domain) {
          invoke = global.process.domain.bind(invoke);
        }
    
        var previousPromise;
    
        function enqueue(method, arg) {
          function callInvokeWithMethodAndArg() {
            return new Promise(function(resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }
    
          return previousPromise =
            // If enqueue has been called before, then we want to wait until
            // all previous Promises have been resolved before calling invoke,
            // so that results are always delivered in the correct order. If
            // enqueue has not been called before, then it is important to
            // call invoke immediately, without waiting on a callback to fire,
            // so that the async generator function has the opportunity to do
            // any necessary setup in a predictable way. This predictability
            // is why the Promise constructor synchronously invokes its
            // executor callback, and why async functions synchronously
            // execute code before the first await. Since we implement simple
            // async functions in terms of async generators, it is especially
            // important to get this right, even though it requires care.
            previousPromise ? previousPromise.then(
              callInvokeWithMethodAndArg,
              // Avoid propagating failures to Promises returned by later
              // invocations of the iterator.
              callInvokeWithMethodAndArg
            ) : callInvokeWithMethodAndArg();
        }
    
        // Define the unified helper method that is used to implement .next,
        // .throw, and .return (see defineIteratorMethods).
        this._invoke = enqueue;
      }
    
      defineIteratorMethods(AsyncIterator.prototype);
      AsyncIterator.prototype[asyncIteratorSymbol] = function () {
        return this;
      };
      runtime.AsyncIterator = AsyncIterator;
    
      // Note that simple async functions are implemented on top of
      // AsyncIterator objects; they just return a Promise for the value of
      // the final result produced by the iterator.
      runtime.async = function(innerFn, outerFn, self, tryLocsList) {
        var iter = new AsyncIterator(
          wrap(innerFn, outerFn, self, tryLocsList)
        );
    
        return runtime.isGeneratorFunction(outerFn)
          ? iter // If outerFn is a generator, return the full iterator.
          : iter.next().then(function(result) {
              return result.done ? result.value : iter.next();
            });
      };
    
      function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;
    
        return function invoke(method, arg) {
          if (state === GenStateExecuting) {
            throw new Error("Generator is already running");
          }
    
          if (state === GenStateCompleted) {
            if (method === "throw") {
              throw arg;
            }
    
            // Be forgiving, per 25.3.3.3.3 of the spec:
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
            return doneResult();
          }
    
          context.method = method;
          context.arg = arg;
    
          while (true) {
            var delegate = context.delegate;
            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);
              if (delegateResult) {
                if (delegateResult === ContinueSentinel) continue;
                return delegateResult;
              }
            }
    
            if (context.method === "next") {
              // Setting context._sent for legacy support of Babel's
              // function.sent implementation.
              context.sent = context._sent = context.arg;
    
            } else if (context.method === "throw") {
              if (state === GenStateSuspendedStart) {
                state = GenStateCompleted;
                throw context.arg;
              }
    
              context.dispatchException(context.arg);
    
            } else if (context.method === "return") {
              context.abrupt("return", context.arg);
            }
    
            state = GenStateExecuting;
    
            var record = tryCatch(innerFn, self, context);
            if (record.type === "normal") {
              // If an exception is thrown from innerFn, we leave state ===
              // GenStateExecuting and loop back for another invocation.
              state = context.done
                ? GenStateCompleted
                : GenStateSuspendedYield;
    
              if (record.arg === ContinueSentinel) {
                continue;
              }
    
              return {
                value: record.arg,
                done: context.done
              };
    
            } else if (record.type === "throw") {
              state = GenStateCompleted;
              // Dispatch the exception by looping back around to the
              // context.dispatchException(context.arg) call above.
              context.method = "throw";
              context.arg = record.arg;
            }
          }
        };
      }
    
      // Call delegate.iterator[context.method](context.arg) and handle the
      // result, either by returning a { value, done } result from the
      // delegate iterator, or by modifying context.method and context.arg,
      // setting context.delegate to null, and returning the ContinueSentinel.
      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];
        if (method === undefined) {
          // A .throw or .return when the delegate iterator has no .throw
          // method always terminates the yield* loop.
          context.delegate = null;
    
          if (context.method === "throw") {
            if (delegate.iterator.return) {
              // If the delegate iterator has a return method, give it a
              // chance to clean up.
              context.method = "return";
              context.arg = undefined;
              maybeInvokeDelegate(delegate, context);
    
              if (context.method === "throw") {
                // If maybeInvokeDelegate(context) changed context.method from
                // "return" to "throw", let that override the TypeError below.
                return ContinueSentinel;
              }
            }
    
            context.method = "throw";
            context.arg = new TypeError(
              "The iterator does not provide a 'throw' method");
          }
    
          return ContinueSentinel;
        }
    
        var record = tryCatch(method, delegate.iterator, context.arg);
    
        if (record.type === "throw") {
          context.method = "throw";
          context.arg = record.arg;
          context.delegate = null;
          return ContinueSentinel;
        }
    
        var info = record.arg;
    
        if (! info) {
          context.method = "throw";
          context.arg = new TypeError("iterator result is not an object");
          context.delegate = null;
          return ContinueSentinel;
        }
    
        if (info.done) {
          // Assign the result of the finished delegate to the temporary
          // variable specified by delegate.resultName (see delegateYield).
          context[delegate.resultName] = info.value;
    
          // Resume execution at the desired location (see delegateYield).
          context.next = delegate.nextLoc;
    
          // If context.method was "throw" but the delegate handled the
          // exception, let the outer generator proceed normally. If
          // context.method was "next", forget context.arg since it has been
          // "consumed" by the delegate iterator. If context.method was
          // "return", allow the original .return call to continue in the
          // outer generator.
          if (context.method !== "return") {
            context.method = "next";
            context.arg = undefined;
          }
    
        } else {
          // Re-yield the result returned by the delegate method.
          return info;
        }
    
        // The delegate iterator is finished, so forget it and continue with
        // the outer generator.
        context.delegate = null;
        return ContinueSentinel;
      }
    
      // Define Generator.prototype.{next,throw,return} in terms of the
      // unified ._invoke helper method.
      defineIteratorMethods(Gp);
    
      Gp[toStringTagSymbol] = "Generator";
    
      // A Generator should always return itself as the iterator object when the
      // @@iterator function is called on it. Some browsers' implementations of the
      // iterator prototype chain incorrectly implement this, causing the Generator
      // object to not be returned from this call. This ensures that doesn't happen.
      // See https://github.com/facebook/regenerator/issues/274 for more details.
      Gp[iteratorSymbol] = function() {
        return this;
      };
    
      Gp.toString = function() {
        return "[object Generator]";
      };
    
      function pushTryEntry(locs) {
        var entry = { tryLoc: locs[0] };
    
        if (1 in locs) {
          entry.catchLoc = locs[1];
        }
    
        if (2 in locs) {
          entry.finallyLoc = locs[2];
          entry.afterLoc = locs[3];
        }
    
        this.tryEntries.push(entry);
      }
    
      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
      }
    
      function Context(tryLocsList) {
        // The root entry object (effectively a try statement without a catch
        // or a finally block) gives us a place to store values thrown from
        // locations where there is no enclosing try statement.
        this.tryEntries = [{ tryLoc: "root" }];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
      }
    
      runtime.keys = function(object) {
        var keys = [];
        for (var key in object) {
          keys.push(key);
        }
        keys.reverse();
    
        // Rather than returning an object with a next method, we keep
        // things simple and return the next function itself.
        return function next() {
          while (keys.length) {
            var key = keys.pop();
            if (key in object) {
              next.value = key;
              next.done = false;
              return next;
            }
          }
    
          // To avoid creating an additional object, we just hang the .value
          // and .done properties off the next function object itself. This
          // also ensures that the minifier will not anonymize the function.
          next.done = true;
          return next;
        };
      };
    
      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) {
            return iteratorMethod.call(iterable);
          }
    
          if (typeof iterable.next === "function") {
            return iterable;
          }
    
          if (!isNaN(iterable.length)) {
            var i = -1, next = function next() {
              while (++i < iterable.length) {
                if (hasOwn.call(iterable, i)) {
                  next.value = iterable[i];
                  next.done = false;
                  return next;
                }
              }
    
              next.value = undefined;
              next.done = true;
    
              return next;
            };
    
            return next.next = next;
          }
        }
    
        // Return an iterator with no values.
        return { next: doneResult };
      }
      runtime.values = values;
    
      function doneResult() {
        return { value: undefined, done: true };
      }
    
      Context.prototype = {
        constructor: Context,
    
        reset: function(skipTempReset) {
          this.prev = 0;
          this.next = 0;
          // Resetting context._sent for legacy support of Babel's
          // function.sent implementation.
          this.sent = this._sent = undefined;
          this.done = false;
          this.delegate = null;
    
          this.method = "next";
          this.arg = undefined;
    
          this.tryEntries.forEach(resetTryEntry);
    
          if (!skipTempReset) {
            for (var name in this) {
              // Not sure about the optimal order of these conditions:
              if (name.charAt(0) === "t" &&
                  hasOwn.call(this, name) &&
                  !isNaN(+name.slice(1))) {
                this[name] = undefined;
              }
            }
          }
        },
    
        stop: function() {
          this.done = true;
    
          var rootEntry = this.tryEntries[0];
          var rootRecord = rootEntry.completion;
          if (rootRecord.type === "throw") {
            throw rootRecord.arg;
          }
    
          return this.rval;
        },
    
        dispatchException: function(exception) {
          if (this.done) {
            throw exception;
          }
    
          var context = this;
          function handle(loc, caught) {
            record.type = "throw";
            record.arg = exception;
            context.next = loc;
    
            if (caught) {
              // If the dispatched exception was caught by a catch block,
              // then let that catch block handle the exception normally.
              context.method = "next";
              context.arg = undefined;
            }
    
            return !! caught;
          }
    
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            var record = entry.completion;
    
            if (entry.tryLoc === "root") {
              // Exception thrown outside of any try block that could handle
              // it, so set the completion value of the entire function to
              // throw the exception.
              return handle("end");
            }
    
            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc");
              var hasFinally = hasOwn.call(entry, "finallyLoc");
    
              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                } else if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
    
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) {
                  return handle(entry.catchLoc, true);
                }
    
              } else if (hasFinally) {
                if (this.prev < entry.finallyLoc) {
                  return handle(entry.finallyLoc);
                }
    
              } else {
                throw new Error("try statement without catch or finally");
              }
            }
          }
        },
    
        abrupt: function(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc <= this.prev &&
                hasOwn.call(entry, "finallyLoc") &&
                this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }
    
          if (finallyEntry &&
              (type === "break" ||
               type === "continue") &&
              finallyEntry.tryLoc <= arg &&
              arg <= finallyEntry.finallyLoc) {
            // Ignore the finally entry if control is not jumping to a
            // location outside the try/catch block.
            finallyEntry = null;
          }
    
          var record = finallyEntry ? finallyEntry.completion : {};
          record.type = type;
          record.arg = arg;
    
          if (finallyEntry) {
            this.method = "next";
            this.next = finallyEntry.finallyLoc;
            return ContinueSentinel;
          }
    
          return this.complete(record);
        },
    
        complete: function(record, afterLoc) {
          if (record.type === "throw") {
            throw record.arg;
          }
    
          if (record.type === "break" ||
              record.type === "continue") {
            this.next = record.arg;
          } else if (record.type === "return") {
            this.rval = this.arg = record.arg;
            this.method = "return";
            this.next = "end";
          } else if (record.type === "normal" && afterLoc) {
            this.next = afterLoc;
          }
    
          return ContinueSentinel;
        },
    
        finish: function(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) {
              this.complete(entry.completion, entry.afterLoc);
              resetTryEntry(entry);
              return ContinueSentinel;
            }
          }
        },
    
        "catch": function(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;
              if (record.type === "throw") {
                var thrown = record.arg;
                resetTryEntry(entry);
              }
              return thrown;
            }
          }
    
          // The context.catch method must only be called with a location
          // argument that corresponds to a known catch block.
          throw new Error("illegal catch attempt");
        },
    
        delegateYield: function(iterable, resultName, nextLoc) {
          this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          };
    
          if (this.method === "next") {
            // Deliberately forget the last sent value so that we don't
            // accidentally pass it on to the delegate.
            this.arg = undefined;
          }
    
          return ContinueSentinel;
        }
      };
    })(
      // Among the various tricks for obtaining a reference to the global
      // object, this seems to be the most reliable technique that does not
      // use indirect eval (which violates Content Security Policy).
      typeof global === "object" ? global :
      typeof window === "object" ? window :
      typeof self === "object" ? self : this
    );
    
    /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(22)))
    
    /***/ }),
    /* 354 */
    /***/ (function(module, exports, __webpack_require__) {
    
    __webpack_require__(355);
    module.exports = __webpack_require__(26).RegExp.escape;
    
    
    /***/ }),
    /* 355 */
    /***/ (function(module, exports, __webpack_require__) {
    
    // https://github.com/benjamingr/RexExp.escape
    var $export = __webpack_require__(0);
    var $re = __webpack_require__(356)(/[\\^$*+?.()|[\]{}]/g, '\\$&');
    
    $export($export.S, 'RegExp', { escape: function escape(it) { return $re(it); } });
    
    
    /***/ }),
    /* 356 */
    /***/ (function(module, exports) {
    
    module.exports = function (regExp, replace) {
      var replacer = replace === Object(replace) ? function (part) {
        return replace[part];
      } : replace;
      return function (it) {
        return String(it).replace(regExp, replacer);
      };
    };
    
    
    /***/ }),
    /* 357 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.Common = undefined;
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    // import '../modules/dep/fancybox/jquery.fancybox.pack';
    // import '../modules/dep/fancybox/jquery.fancybox-buttons';
    // import '../modules/dep/jquery.event.swipe';
    
    
    var _objectFitImages = __webpack_require__(358);
    
    var _objectFitImages2 = _interopRequireDefault(_objectFitImages);
    
    var _objectFitVideos = __webpack_require__(359);
    
    var _objectFitVideos2 = _interopRequireDefault(_objectFitVideos);
    
    var _perfectScrollbar = __webpack_require__(108);
    
    var _perfectScrollbar2 = _interopRequireDefault(_perfectScrollbar);
    
    __webpack_require__(146);
    
    var _stagger = __webpack_require__(374);
    
    var _animLines = __webpack_require__(80);
    
    __webpack_require__(376);
    
    var _helpers = __webpack_require__(3);
    
    __webpack_require__(377);
    
    __webpack_require__(378);
    
    __webpack_require__(148);
    
    __webpack_require__(150);
    
    __webpack_require__(379);
    
    __webpack_require__(380);
    
    __webpack_require__(62);
    
    __webpack_require__(381);
    
    __webpack_require__(382);
    
    __webpack_require__(383);
    
    __webpack_require__(384);
    
    __webpack_require__(387);
    
    var _bScreen = __webpack_require__(151);
    
    var _link = __webpack_require__(21);
    
    var _link2 = _interopRequireDefault(_link);
    
    __webpack_require__(389);
    
    __webpack_require__(77);
    
    __webpack_require__(78);
    
    __webpack_require__(152);
    
    __webpack_require__(80);
    
    __webpack_require__(390);
    
    __webpack_require__(391);
    
    __webpack_require__(395);
    
    __webpack_require__(153);
    
    __webpack_require__(396);
    
    __webpack_require__(397);
    
    __webpack_require__(398);
    
    __webpack_require__(399);
    
    __webpack_require__(579);
    
    var _pageResize = __webpack_require__(580);
    
    var _pageResize2 = _interopRequireDefault(_pageResize);
    
    __webpack_require__(581);
    
    __webpack_require__(582);
    
    __webpack_require__(583);
    
    __webpack_require__(584);
    
    __webpack_require__(587);
    
    __webpack_require__(588);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    /**
     * Website's common scripts.
     *
     * @module Common
     */
    var Common = exports.Common = function () {
        function Common() {
            _classCallCheck(this, Common);
        }
    
        _createClass(Common, [{
            key: 'init',
            value: function init() {
                _stagger.AnimStagger.init();
                _animLines.AnimLinesAPI.init();
                Common.initLinks();
                Common.addDataAttrToSVG();
                Common.detectEmptyBlockBlog4();
                this.resize();
                (0, _objectFitImages2.default)();
                (0, _objectFitVideos2.default)();
                (0, _objectFitVideos2.default)();
                _bScreen.ScreenAPI.init();
                _pageResize2.default.init();
    
                // Init select2:
                var $select2 = $(".js-select");
    
                $select2.select2().on('select2:open', function () {
                    setTimeout(function () {
                        var select2Container = document.getElementsByClassName('select2-results__options')[0],
                            height = $(select2Container).outerHeight(),
                            maxHeight = Number($(select2Container).css('max-height').slice(0, -2));
    
                        if (height >= maxHeight) {
                            _perfectScrollbar2.default.initialize(select2Container);
                        }
                    }, 0);
    
                    $('.select2-dropdown').on('click tap', function (e) {
                        e.stopPropagation();
                    });
                });
            }
        }, {
            key: 'resize',
            value: function resize() {
                var currentResp = Common.getResp();
    
                //reInit animations
                var throttleResize = (0, _helpers.throttle)(function () {
                    if (currentResp !== Common.getResp() && _helpers.Resp.isDesk) {
                        _stagger.AnimStagger.init();
                    }
    
                    currentResp = Common.getResp();
                }, 250, this);
    
                _helpers.$window.on('resize', throttleResize);
            }
    
            // static disableInputScroll() {
            //  $('.form-input').on('focusin focus', function(e) {
            //    e.preventDefault();
            //    const target = $(this);
            //
            //    $('html, body').animate({
            //      scrollTop: target.offset().top
            //    }, 500);
            //  })
            // }
    
        }], [{
            key: 'getResp',
            value: function getResp() {
                return '' + _helpers.Resp.isDesk + _helpers.Resp.isTablet + _helpers.Resp.isMobile;
            }
        }, {
            key: 'initLinks',
            value: function initLinks() {
                new _link2.default($('.js-link-circle'));
                new _link2.default($('.js-link-single-circle'), {
                    type: 'single'
                });
                new _link2.default($('.js-link-multiple-circle'), {
                    type: 'multiple'
                });
            }
        }, {
            key: 'detectEmptyBlockBlog4',
            value: function detectEmptyBlockBlog4() {
                var $smallCol = $('.blog-4__col.col__small');
    
                $smallCol.each(function (index, el) {
                    var $this = $(this);
    
                    if ($this.text() === '') $this.next().addClass('blog-4_mt-0-append-js');
                });
            }
        }, {
            key: 'addDataAttrToSVG',
            value: function addDataAttrToSVG() {
                var $svg = $('.solutions__item svg');
    
                if ($svg !== undefined) {
                    $svg.each(function (index, el) {
                        var $this = $(this);
    
                        $this.attr('data-anim-parent-trigger', 'data-anim-parent-trigger');
                        $this.attr('data-anim-stagger', 'fade-top');
    
                        window.reInitStagger($this);
                    });
                }
            }
        }]);
    
        return Common;
    }();
    
    /** Export initialized common scripts by default */
    
    
    exports.default = new Common().init();
    
    $(document).ready(function () {
        $(window).on("orientationchange", function (event) {
            var is_safari = navigator.userAgent.indexOf('Safari') != -1 && navigator.userAgent.indexOf('Chrome') == -1 && navigator.userAgent.indexOf('Android') == -1;
    
            if (is_safari && window.matchMedia('(min-width: 420px)').matches) {
                if (window.matchMedia('(max-width: 767px)').matches) {
                    // /* On folder hover lower featured image z-index and almost hide all folder icons */
                    $('.agree-popup').css('bottom', '40px');
                }
            }
        });
    });
    
    /***/ }),
    /* 358 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    /*! npm.im/object-fit-images 3.2.3 */
    
    
    var OFI = 'bfred-it:object-fit-images';
    var propRegex = /(object-fit|object-position)\s*:\s*([-\w\s%]+)/g;
    var testImg = typeof Image === 'undefined' ? {style: {'object-position': 1}} : new Image();
    var supportsObjectFit = 'object-fit' in testImg.style;
    var supportsObjectPosition = 'object-position' in testImg.style;
    var supportsOFI = 'background-size' in testImg.style;
    var supportsCurrentSrc = typeof testImg.currentSrc === 'string';
    var nativeGetAttribute = testImg.getAttribute;
    var nativeSetAttribute = testImg.setAttribute;
    var autoModeEnabled = false;
    
    function createPlaceholder(w, h) {
        return ("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='" + w + "' height='" + h + "'%3E%3C/svg%3E");
    }
    
    function polyfillCurrentSrc(el) {
        if (el.srcset && !supportsCurrentSrc && window.picturefill) {
            var pf = window.picturefill._;
            // parse srcset with picturefill where currentSrc isn't available
            if (!el[pf.ns] || !el[pf.ns].evaled) {
                // force synchronous srcset parsing
                pf.fillImg(el, {reselect: true});
            }
    
            if (!el[pf.ns].curSrc) {
                // force picturefill to parse srcset
                el[pf.ns].supported = false;
                pf.fillImg(el, {reselect: true});
            }
    
            // retrieve parsed currentSrc, if any
            el.currentSrc = el[pf.ns].curSrc || el.src;
        }
    }
    
    function getStyle(el) {
        var style = getComputedStyle(el).fontFamily;
        var parsed;
        var props = {};
        while ((parsed = propRegex.exec(style)) !== null) {
            props[parsed[1]] = parsed[2];
        }
        return props;
    }
    
    function setPlaceholder(img, width, height) {
        // Default: fill width, no height
        var placeholder = createPlaceholder(width || 1, height || 0);
    
        // Only set placeholder if it's different
        if (nativeGetAttribute.call(img, 'src') !== placeholder) {
            nativeSetAttribute.call(img, 'src', placeholder);
        }
    }
    
    function onImageReady(img, callback) {
        // naturalWidth is only available when the image headers are loaded,
        // this loop will poll it every 100ms.
        if (img.naturalWidth) {
            callback(img);
        } else {
            setTimeout(onImageReady, 100, img, callback);
        }
    }
    
    function fixOne(el) {
        var style = getStyle(el);
        var ofi = el[OFI];
        style['object-fit'] = style['object-fit'] || 'fill'; // default value
    
        // Avoid running where unnecessary, unless OFI had already done its deed
        if (!ofi.img) {
            // fill is the default behavior so no action is necessary
            if (style['object-fit'] === 'fill') {
                return;
            }
    
            // Where object-fit is supported and object-position isn't (Safari < 10)
            if (
                !ofi.skipTest && // unless user wants to apply regardless of browser support
                supportsObjectFit && // if browser already supports object-fit
                !style['object-position'] // unless object-position is used
            ) {
                return;
            }
        }
    
        // keep a clone in memory while resetting the original to a blank
        if (!ofi.img) {
            ofi.img = new Image(el.width, el.height);
            ofi.img.srcset = nativeGetAttribute.call(el, "data-ofi-srcset") || el.srcset;
            ofi.img.src = nativeGetAttribute.call(el, "data-ofi-src") || el.src;
    
            // preserve for any future cloneNode calls
            // https://github.com/bfred-it/object-fit-images/issues/53
            nativeSetAttribute.call(el, "data-ofi-src", el.src);
            if (el.srcset) {
                nativeSetAttribute.call(el, "data-ofi-srcset", el.srcset);
            }
    
            setPlaceholder(el, el.naturalWidth || el.width, el.naturalHeight || el.height);
    
            // remove srcset because it overrides src
            if (el.srcset) {
                el.srcset = '';
            }
            try {
                keepSrcUsable(el);
            } catch (err) {
                if (window.console) {
                    console.warn('https://bit.ly/ofi-old-browser');
                }
            }
        }
    
        polyfillCurrentSrc(ofi.img);
    
        el.style.backgroundImage = "url(\"" + ((ofi.img.currentSrc || ofi.img.src).replace(/"/g, '\\"')) + "\")";
        el.style.backgroundPosition = style['object-position'] || 'center';
        el.style.backgroundRepeat = 'no-repeat';
        el.style.backgroundOrigin = 'content-box';
    
        if (/scale-down/.test(style['object-fit'])) {
            onImageReady(ofi.img, function () {
                if (ofi.img.naturalWidth > el.width || ofi.img.naturalHeight > el.height) {
                    el.style.backgroundSize = 'contain';
                } else {
                    el.style.backgroundSize = 'auto';
                }
            });
        } else {
            el.style.backgroundSize = style['object-fit'].replace('none', 'auto').replace('fill', '100% 100%');
        }
    
        onImageReady(ofi.img, function (img) {
            setPlaceholder(el, img.naturalWidth, img.naturalHeight);
        });
    }
    
    function keepSrcUsable(el) {
        var descriptors = {
            get: function get(prop) {
                return el[OFI].img[prop ? prop : 'src'];
            },
            set: function set(value, prop) {
                el[OFI].img[prop ? prop : 'src'] = value;
                nativeSetAttribute.call(el, ("data-ofi-" + prop), value); // preserve for any future cloneNode
                fixOne(el);
                return value;
            }
        };
        Object.defineProperty(el, 'src', descriptors);
        Object.defineProperty(el, 'currentSrc', {
            get: function () { return descriptors.get('currentSrc'); }
        });
        Object.defineProperty(el, 'srcset', {
            get: function () { return descriptors.get('srcset'); },
            set: function (ss) { return descriptors.set(ss, 'srcset'); }
        });
    }
    
    function hijackAttributes() {
        function getOfiImageMaybe(el, name) {
            return el[OFI] && el[OFI].img && (name === 'src' || name === 'srcset') ? el[OFI].img : el;
        }
        if (!supportsObjectPosition) {
            HTMLImageElement.prototype.getAttribute = function (name) {
                return nativeGetAttribute.call(getOfiImageMaybe(this, name), name);
            };
    
            HTMLImageElement.prototype.setAttribute = function (name, value) {
                return nativeSetAttribute.call(getOfiImageMaybe(this, name), name, String(value));
            };
        }
    }
    
    function fix(imgs, opts) {
        var startAutoMode = !autoModeEnabled && !imgs;
        opts = opts || {};
        imgs = imgs || 'img';
    
        if ((supportsObjectPosition && !opts.skipTest) || !supportsOFI) {
            return false;
        }
    
        // use imgs as a selector or just select all images
        if (imgs === 'img') {
            imgs = document.getElementsByTagName('img');
        } else if (typeof imgs === 'string') {
            imgs = document.querySelectorAll(imgs);
        } else if (!('length' in imgs)) {
            imgs = [imgs];
        }
    
        // apply fix to all
        for (var i = 0; i < imgs.length; i++) {
            imgs[i][OFI] = imgs[i][OFI] || {
                skipTest: opts.skipTest
            };
            fixOne(imgs[i]);
        }
    
        if (startAutoMode) {
            document.body.addEventListener('load', function (e) {
                if (e.target.tagName === 'IMG') {
                    fix(e.target, {
                        skipTest: opts.skipTest
                    });
                }
            }, true);
            autoModeEnabled = true;
            imgs = 'img'; // reset to a generic selector for watchMQ
        }
    
        // if requested, watch media queries for object-fit change
        if (opts.watchMQ) {
            window.addEventListener('resize', fix.bind(null, imgs, {
                skipTest: opts.skipTest
            }));
        }
    }
    
    fix.supportsObjectFit = supportsObjectFit;
    fix.supportsObjectPosition = supportsObjectPosition;
    
    hijackAttributes();
    
    module.exports = fix;
    
    
    /***/ }),
    /* 359 */
    /***/ (function(module, exports) {
    
    /**
     * Object Fit Videos
     * Polyfill for object-fit and object-position CSS properties on video elements
     * Covers IE9, IE10, IE11, Edge, Safari <10
     *
     * Usage
     * In your CSS, add a special font-family tag for IE/Edge
     * video {
     *   object-fit: cover;
     *   font-family: 'object-fit: cover;';
     * }
     *
     * Before the closing body tag, or whenever the DOM is ready,
     * make the JavaScript call
     * objectFitVideos();
     *
     * All video elements with the special CSS property will be targeted
     *
     * @license  MIT (https://opensource.org/licenses/MIT)
     * @author   Todd Miller <todd.miller@tricomb2b.com>
     * @version  1.0.2
     * @changelog
     * 2016-08-19 - Adds object-position support.
     * 2016-08-19 - Add throttle function for more performant resize events
     * 2016-08-19 - Initial release with object-fit support, and
     *              object-position default 'center'
     * 2016-10-14 - No longer relies on window load event, instead requires a specific
     *              function call to initialize the videos for object fit and position.
     * 2016-11-28 - Support CommonJS environment, courtesy of @msorensson
     * 2016-12-05 - Refactors the throttling function to support IE
     * 2017-09-26 - Fix an issue with autplay not working on polyfilled videos
     *            - Adds the capability to specify elements to polyfill,
     *              instead of just checking every video element for the
     *              CSS property. Slight performance gain in most usecases,
     *              and a bigger gain in a few usecases.
     * 2017-10-24 - Add user agent check to enable polyfill for all Edge browsers.
     *              object-fit is supported on Edge >= 16, but currently just for images.
     */
    var objectFitVideos = function (videos) {
      'use strict';
    
      var isEdge = navigator.userAgent.indexOf('Edge/') >= 0;
    
      var testImg                = new Image(),
          supportsObjectFit      = 'object-fit' in testImg.style && !isEdge,
          supportsObjectPosition = 'object-position' in testImg.style && !isEdge,
          propRegex              = /(object-fit|object-position)\s*:\s*([-\w\s%]+)/g;
    
      if (!supportsObjectFit || !supportsObjectPosition) {
        initialize(videos);
        throttle('resize', 'optimizedResize');
      }
    
      /**
       * Parse the style and look for the special font-family tag
       * @param  {object} $el The element to parse
       * @return {object}     The font-family properties we're interested in
       */
      function getStyle ($el) {
        var style  = getComputedStyle($el).fontFamily,
            parsed = null,
            props  = {};
    
          while ((parsed = propRegex.exec(style)) !== null) {
            props[parsed[1]] = parsed[2];
          }
    
          if (props['object-position'])
            return parsePosition(props);
    
          return props;
      }
    
      /**
       * Initialize all the relevant video elements and get them fitted
       */
      function initialize (videos) {
        var index = -1;
    
        if (!videos) {
          // if no videos given, query all video elements
          videos = document.querySelectorAll('video');
        } else if (!('length' in videos)) {
          // convert to an array for proper looping if an array or NodeList
          // was not given
          videos = [videos];
        }
    
        while (videos[++index]) {
          var style = getStyle(videos[index]);
    
          // only do work if the property is on the element
          if (style['object-fit'] || style['object-position']) {
            // set the default values
            style['object-fit'] = style['object-fit'] || 'fill';
            fitIt(videos[index], style);
          }
        }
      }
    
      /**
       * Object Fit
       * @param  {object} $el Element to fit
       * @return {object}     The element's relevant properties
       */
      function fitIt ($el, style) {
        // fill is the default behavior, no action is necessary
        if (style['object-fit'] === 'fill')
          return;
    
        // convenience style properties on the source element
        var setCss = $el.style,
            getCss = window.getComputedStyle($el);
    
        // create and insert a wrapper element
        var $wrap = document.createElement('object-fit');
        $wrap.appendChild($el.parentNode.replaceChild($wrap, $el));
    
        // style the wrapper element to mostly match the source element
        var wrapCss = {
          height:    '100%',
          width:     '100%',
          boxSizing: 'content-box',
          display:   'inline-block',
          overflow:  'hidden'
        };
    
        'backgroundColor backgroundImage borderColor borderStyle borderWidth bottom fontSize lineHeight left opacity margin position right top visibility'.replace(/\w+/g, function (key) {
          wrapCss[key] = getCss[key];
        });
    
        for (var key in wrapCss)
          $wrap.style[key] = wrapCss[key];
    
        // give the source element some saner styles
        setCss.border  = setCss.margin = setCss.padding = 0;
        setCss.display = 'block';
        setCss.opacity = 1;
    
        // set up the event handlers
        $el.addEventListener('loadedmetadata', doWork);
        window.addEventListener('optimizedResize', doWork);
    
        // we may have missed the loadedmetadata event, so if the video has loaded
        // enough data, just drop the event listener and execute
        if ($el.readyState >= 1) {
          $el.removeEventListener('loadedmetadata', doWork);
          doWork();
        }
    
        /**
         * Do the actual sizing. Math.
         * @methodOf fitIt
         */
        function doWork () {
          // the actual size and ratio of the video
          // we do this here, even though it doesn't change, because
          // at this point we can be sure the metadata has loaded
          var videoWidth  = $el.videoWidth,
              videoHeight = $el.videoHeight,
              videoRatio  = videoWidth / videoHeight;
    
          var wrapWidth  = $wrap.clientWidth,
              wrapHeight = $wrap.clientHeight,
              wrapRatio  = wrapWidth / wrapHeight;
    
          var newHeight = 0,
              newWidth  = 0;
          setCss.marginLeft = setCss.marginTop = 0;
    
          // basically we do the opposite action for contain and cover,
          // depending on whether the video aspect ratio is less than or
          // greater than the wrapper's aspect ratio
          if (videoRatio < wrapRatio ?
              style['object-fit'] === 'contain' : style['object-fit'] === 'cover') {
            newHeight = wrapHeight * videoRatio;
            newWidth  = wrapWidth / videoRatio;
    
            setCss.width  = Math.round(newHeight) + 'px';
            setCss.height = wrapHeight + 'px';
    
            if (style['object-position-x'] === 'left')
              setCss.marginLeft = 0;
            else if (style['object-position-x'] === 'right')
              setCss.marginLeft = Math.round(wrapWidth - newHeight) + 'px';
            else
              setCss.marginLeft = Math.round((wrapWidth - newHeight) / 2) + 'px';
          } else {
            newWidth = wrapWidth / videoRatio;
    
            setCss.width     = wrapWidth + 'px';
            setCss.height    = Math.round(newWidth) + 'px';
    
            if (style['object-position-y'] === 'top')
              setCss.marginTop = 0;
            else if (style['object-position-y'] === 'bottom')
              setCss.marginTop = Math.round(wrapHeight - newWidth) + 'px';
            else
              setCss.marginTop = Math.round((wrapHeight - newWidth) / 2) + 'px';
          }
    
          // play the video if autoplay is set
          if ($el.autoplay)
            $el.play();
        }
      }
    
      /**
       * Split the object-position property into x and y position properties
       * @param  {object} style Relevant element styles
       * @return {object}       The style object with the added x and y props
       */
      function parsePosition (style) {
        if (~style['object-position'].indexOf('left'))
          style['object-position-x'] = 'left';
        else if (~style['object-position'].indexOf('right'))
          style['object-position-x'] = 'right';
        else
          style['object-position-x'] = 'center';
    
        if (~style['object-position'].indexOf('top'))
          style['object-position-y'] = 'top';
        else if (~style['object-position'].indexOf('bottom'))
          style['object-position-y'] = 'bottom';
        else
          style['object-position-y'] = 'center';
    
        return style;
      }
    
      /**
       * Throttle an event with RequestAnimationFrame API for better performance
       * @param  {string} type The event to throttle
       * @param  {string} name Custom event name to listen for
       * @param  {object} obj  Optional object to attach the event to
       */
      function throttle (type, name, obj) {
        obj = obj || window;
        var running = false,
            evt     = null;
    
        // IE does not support the CustomEvent constructor
        // so if that fails do it the old way
        try {
          evt = new CustomEvent(name);
        } catch (e) {
          evt = document.createEvent('Event');
          evt.initEvent(name, true, true);
        }
    
        var func = function () {
          if (running) return;
    
          running = true;
          requestAnimationFrame(function () {
            obj.dispatchEvent(evt);
            running = false;
          });
        };
    
        obj.addEventListener(type, func);
      }
    };
    
    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined')
      module.exports = objectFitVideos;
    
    
    /***/ }),
    /* 360 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    var destroy = __webpack_require__(361);
    var initialize = __webpack_require__(365);
    var update = __webpack_require__(373);
    
    module.exports = {
      initialize: initialize,
      update: update,
      destroy: destroy
    };
    
    
    /***/ }),
    /* 361 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    var _ = __webpack_require__(38);
    var dom = __webpack_require__(51);
    var instances = __webpack_require__(20);
    
    module.exports = function (element) {
      var i = instances.get(element);
    
      if (!i) {
        return;
      }
    
      i.event.unbindAll();
      dom.remove(i.scrollbarX);
      dom.remove(i.scrollbarY);
      dom.remove(i.scrollbarXRail);
      dom.remove(i.scrollbarYRail);
      _.removePsClasses(element);
    
      instances.remove(element);
    };
    
    
    /***/ }),
    /* 362 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    module.exports = function () {
      return {
        handlers: ['click-rail', 'drag-scrollbar', 'keyboard', 'wheel', 'touch'],
        maxScrollbarLength: null,
        minScrollbarLength: null,
        scrollXMarginOffset: 0,
        scrollYMarginOffset: 0,
        suppressScrollX: false,
        suppressScrollY: false,
        swipePropagation: true,
        swipeEasing: true,
        useBothWheelAxes: false,
        wheelPropagation: false,
        wheelSpeed: 1,
        theme: 'default'
      };
    };
    
    
    /***/ }),
    /* 363 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    var EventElement = function (element) {
      this.element = element;
      this.events = {};
    };
    
    EventElement.prototype.bind = function (eventName, handler) {
      if (typeof this.events[eventName] === 'undefined') {
        this.events[eventName] = [];
      }
      this.events[eventName].push(handler);
      this.element.addEventListener(eventName, handler, false);
    };
    
    EventElement.prototype.unbind = function (eventName, handler) {
      var isHandlerProvided = (typeof handler !== 'undefined');
      this.events[eventName] = this.events[eventName].filter(function (hdlr) {
        if (isHandlerProvided && hdlr !== handler) {
          return true;
        }
        this.element.removeEventListener(eventName, hdlr, false);
        return false;
      }, this);
    };
    
    EventElement.prototype.unbindAll = function () {
      for (var name in this.events) {
        this.unbind(name);
      }
    };
    
    var EventManager = function () {
      this.eventElements = [];
    };
    
    EventManager.prototype.eventElement = function (element) {
      var ee = this.eventElements.filter(function (eventElement) {
        return eventElement.element === element;
      })[0];
      if (typeof ee === 'undefined') {
        ee = new EventElement(element);
        this.eventElements.push(ee);
      }
      return ee;
    };
    
    EventManager.prototype.bind = function (element, eventName, handler) {
      this.eventElement(element).bind(eventName, handler);
    };
    
    EventManager.prototype.unbind = function (element, eventName, handler) {
      this.eventElement(element).unbind(eventName, handler);
    };
    
    EventManager.prototype.unbindAll = function () {
      for (var i = 0; i < this.eventElements.length; i++) {
        this.eventElements[i].unbindAll();
      }
    };
    
    EventManager.prototype.once = function (element, eventName, handler) {
      var ee = this.eventElement(element);
      var onceHandler = function (e) {
        ee.unbind(eventName, onceHandler);
        handler(e);
      };
      ee.bind(eventName, onceHandler);
    };
    
    module.exports = EventManager;
    
    
    /***/ }),
    /* 364 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    module.exports = (function () {
      function s4() {
        return Math.floor((1 + Math.random()) * 0x10000)
                   .toString(16)
                   .substring(1);
      }
      return function () {
        return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
               s4() + '-' + s4() + s4() + s4();
      };
    })();
    
    
    /***/ }),
    /* 365 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    var instances = __webpack_require__(20);
    var updateGeometry = __webpack_require__(34);
    
    // Handlers
    var handlers = {
      'click-rail': __webpack_require__(366),
      'drag-scrollbar': __webpack_require__(367),
      'keyboard': __webpack_require__(368),
      'wheel': __webpack_require__(369),
      'touch': __webpack_require__(370),
      'selection': __webpack_require__(371)
    };
    var nativeScrollHandler = __webpack_require__(372);
    
    module.exports = function (element, userSettings) {
      element.classList.add('ps');
    
      // Create a plugin instance.
      var i = instances.add(
        element,
        typeof userSettings === 'object' ? userSettings : {}
      );
    
      element.classList.add('ps--theme_' + i.settings.theme);
    
      i.settings.handlers.forEach(function (handlerName) {
        handlers[handlerName](element);
      });
    
      nativeScrollHandler(element);
    
      updateGeometry(element);
    };
    
    
    /***/ }),
    /* 366 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    var instances = __webpack_require__(20);
    var updateGeometry = __webpack_require__(34);
    var updateScroll = __webpack_require__(39);
    
    function bindClickRailHandler(element, i) {
      function pageOffset(el) {
        return el.getBoundingClientRect();
      }
      var stopPropagation = function (e) { e.stopPropagation(); };
    
      i.event.bind(i.scrollbarY, 'click', stopPropagation);
      i.event.bind(i.scrollbarYRail, 'click', function (e) {
        var positionTop = e.pageY - window.pageYOffset - pageOffset(i.scrollbarYRail).top;
        var direction = positionTop > i.scrollbarYTop ? 1 : -1;
    
        updateScroll(element, 'top', element.scrollTop + direction * i.containerHeight);
        updateGeometry(element);
    
        e.stopPropagation();
      });
    
      i.event.bind(i.scrollbarX, 'click', stopPropagation);
      i.event.bind(i.scrollbarXRail, 'click', function (e) {
        var positionLeft = e.pageX - window.pageXOffset - pageOffset(i.scrollbarXRail).left;
        var direction = positionLeft > i.scrollbarXLeft ? 1 : -1;
    
        updateScroll(element, 'left', element.scrollLeft + direction * i.containerWidth);
        updateGeometry(element);
    
        e.stopPropagation();
      });
    }
    
    module.exports = function (element) {
      var i = instances.get(element);
      bindClickRailHandler(element, i);
    };
    
    
    /***/ }),
    /* 367 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    var _ = __webpack_require__(38);
    var dom = __webpack_require__(51);
    var instances = __webpack_require__(20);
    var updateGeometry = __webpack_require__(34);
    var updateScroll = __webpack_require__(39);
    
    function bindMouseScrollXHandler(element, i) {
      var currentLeft = null;
      var currentPageX = null;
    
      function updateScrollLeft(deltaX) {
        var newLeft = currentLeft + (deltaX * i.railXRatio);
        var maxLeft = Math.max(0, i.scrollbarXRail.getBoundingClientRect().left) + (i.railXRatio * (i.railXWidth - i.scrollbarXWidth));
    
        if (newLeft < 0) {
          i.scrollbarXLeft = 0;
        } else if (newLeft > maxLeft) {
          i.scrollbarXLeft = maxLeft;
        } else {
          i.scrollbarXLeft = newLeft;
        }
    
        var scrollLeft = _.toInt(i.scrollbarXLeft * (i.contentWidth - i.containerWidth) / (i.containerWidth - (i.railXRatio * i.scrollbarXWidth))) - i.negativeScrollAdjustment;
        updateScroll(element, 'left', scrollLeft);
      }
    
      var mouseMoveHandler = function (e) {
        updateScrollLeft(e.pageX - currentPageX);
        updateGeometry(element);
        e.stopPropagation();
        e.preventDefault();
      };
    
      var mouseUpHandler = function () {
        _.stopScrolling(element, 'x');
        i.event.unbind(i.ownerDocument, 'mousemove', mouseMoveHandler);
      };
    
      i.event.bind(i.scrollbarX, 'mousedown', function (e) {
        currentPageX = e.pageX;
        currentLeft = _.toInt(dom.css(i.scrollbarX, 'left')) * i.railXRatio;
        _.startScrolling(element, 'x');
    
        i.event.bind(i.ownerDocument, 'mousemove', mouseMoveHandler);
        i.event.once(i.ownerDocument, 'mouseup', mouseUpHandler);
    
        e.stopPropagation();
        e.preventDefault();
      });
    }
    
    function bindMouseScrollYHandler(element, i) {
      var currentTop = null;
      var currentPageY = null;
    
      function updateScrollTop(deltaY) {
        var newTop = currentTop + (deltaY * i.railYRatio);
        var maxTop = Math.max(0, i.scrollbarYRail.getBoundingClientRect().top) + (i.railYRatio * (i.railYHeight - i.scrollbarYHeight));
    
        if (newTop < 0) {
          i.scrollbarYTop = 0;
        } else if (newTop > maxTop) {
          i.scrollbarYTop = maxTop;
        } else {
          i.scrollbarYTop = newTop;
        }
    
        var scrollTop = _.toInt(i.scrollbarYTop * (i.contentHeight - i.containerHeight) / (i.containerHeight - (i.railYRatio * i.scrollbarYHeight)));
        updateScroll(element, 'top', scrollTop);
      }
    
      var mouseMoveHandler = function (e) {
        updateScrollTop(e.pageY - currentPageY);
        updateGeometry(element);
        e.stopPropagation();
        e.preventDefault();
      };
    
      var mouseUpHandler = function () {
        _.stopScrolling(element, 'y');
        i.event.unbind(i.ownerDocument, 'mousemove', mouseMoveHandler);
      };
    
      i.event.bind(i.scrollbarY, 'mousedown', function (e) {
        currentPageY = e.pageY;
        currentTop = _.toInt(dom.css(i.scrollbarY, 'top')) * i.railYRatio;
        _.startScrolling(element, 'y');
    
        i.event.bind(i.ownerDocument, 'mousemove', mouseMoveHandler);
        i.event.once(i.ownerDocument, 'mouseup', mouseUpHandler);
    
        e.stopPropagation();
        e.preventDefault();
      });
    }
    
    module.exports = function (element) {
      var i = instances.get(element);
      bindMouseScrollXHandler(element, i);
      bindMouseScrollYHandler(element, i);
    };
    
    
    /***/ }),
    /* 368 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    var _ = __webpack_require__(38);
    var dom = __webpack_require__(51);
    var instances = __webpack_require__(20);
    var updateGeometry = __webpack_require__(34);
    var updateScroll = __webpack_require__(39);
    
    function bindKeyboardHandler(element, i) {
      var hovered = false;
      i.event.bind(element, 'mouseenter', function () {
        hovered = true;
      });
      i.event.bind(element, 'mouseleave', function () {
        hovered = false;
      });
    
      var shouldPrevent = false;
      function shouldPreventDefault(deltaX, deltaY) {
        var scrollTop = element.scrollTop;
        if (deltaX === 0) {
          if (!i.scrollbarYActive) {
            return false;
          }
          if ((scrollTop === 0 && deltaY > 0) || (scrollTop >= i.contentHeight - i.containerHeight && deltaY < 0)) {
            return !i.settings.wheelPropagation;
          }
        }
    
        var scrollLeft = element.scrollLeft;
        if (deltaY === 0) {
          if (!i.scrollbarXActive) {
            return false;
          }
          if ((scrollLeft === 0 && deltaX < 0) || (scrollLeft >= i.contentWidth - i.containerWidth && deltaX > 0)) {
            return !i.settings.wheelPropagation;
          }
        }
        return true;
      }
    
      i.event.bind(i.ownerDocument, 'keydown', function (e) {
        if ((e.isDefaultPrevented && e.isDefaultPrevented()) || e.defaultPrevented) {
          return;
        }
    
        var focused = dom.matches(i.scrollbarX, ':focus') ||
                      dom.matches(i.scrollbarY, ':focus');
    
        if (!hovered && !focused) {
          return;
        }
    
        var activeElement = document.activeElement ? document.activeElement : i.ownerDocument.activeElement;
        if (activeElement) {
          if (activeElement.tagName === 'IFRAME') {
            activeElement = activeElement.contentDocument.activeElement;
          } else {
            // go deeper if element is a webcomponent
            while (activeElement.shadowRoot) {
              activeElement = activeElement.shadowRoot.activeElement;
            }
          }
          if (_.isEditable(activeElement)) {
            return;
          }
        }
    
        var deltaX = 0;
        var deltaY = 0;
    
        switch (e.which) {
        case 37: // left
          if (e.metaKey) {
            deltaX = -i.contentWidth;
          } else if (e.altKey) {
            deltaX = -i.containerWidth;
          } else {
            deltaX = -30;
          }
          break;
        case 38: // up
          if (e.metaKey) {
            deltaY = i.contentHeight;
          } else if (e.altKey) {
            deltaY = i.containerHeight;
          } else {
            deltaY = 30;
          }
          break;
        case 39: // right
          if (e.metaKey) {
            deltaX = i.contentWidth;
          } else if (e.altKey) {
            deltaX = i.containerWidth;
          } else {
            deltaX = 30;
          }
          break;
        case 40: // down
          if (e.metaKey) {
            deltaY = -i.contentHeight;
          } else if (e.altKey) {
            deltaY = -i.containerHeight;
          } else {
            deltaY = -30;
          }
          break;
        case 33: // page up
          deltaY = 90;
          break;
        case 32: // space bar
          if (e.shiftKey) {
            deltaY = 90;
          } else {
            deltaY = -90;
          }
          break;
        case 34: // page down
          deltaY = -90;
          break;
        case 35: // end
          if (e.ctrlKey) {
            deltaY = -i.contentHeight;
          } else {
            deltaY = -i.containerHeight;
          }
          break;
        case 36: // home
          if (e.ctrlKey) {
            deltaY = element.scrollTop;
          } else {
            deltaY = i.containerHeight;
          }
          break;
        default:
          return;
        }
    
        updateScroll(element, 'top', element.scrollTop - deltaY);
        updateScroll(element, 'left', element.scrollLeft + deltaX);
        updateGeometry(element);
    
        shouldPrevent = shouldPreventDefault(deltaX, deltaY);
        if (shouldPrevent) {
          e.preventDefault();
        }
      });
    }
    
    module.exports = function (element) {
      var i = instances.get(element);
      bindKeyboardHandler(element, i);
    };
    
    
    /***/ }),
    /* 369 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    var instances = __webpack_require__(20);
    var updateGeometry = __webpack_require__(34);
    var updateScroll = __webpack_require__(39);
    
    function bindMouseWheelHandler(element, i) {
      var shouldPrevent = false;
    
      function shouldPreventDefault(deltaX, deltaY) {
        var scrollTop = element.scrollTop;
        if (deltaX === 0) {
          if (!i.scrollbarYActive) {
            return false;
          }
          if ((scrollTop === 0 && deltaY > 0) || (scrollTop >= i.contentHeight - i.containerHeight && deltaY < 0)) {
            return !i.settings.wheelPropagation;
          }
        }
    
        var scrollLeft = element.scrollLeft;
        if (deltaY === 0) {
          if (!i.scrollbarXActive) {
            return false;
          }
          if ((scrollLeft === 0 && deltaX < 0) || (scrollLeft >= i.contentWidth - i.containerWidth && deltaX > 0)) {
            return !i.settings.wheelPropagation;
          }
        }
        return true;
      }
    
      function getDeltaFromEvent(e) {
        var deltaX = e.deltaX;
        var deltaY = -1 * e.deltaY;
    
        if (typeof deltaX === "undefined" || typeof deltaY === "undefined") {
          // OS X Safari
          deltaX = -1 * e.wheelDeltaX / 6;
          deltaY = e.wheelDeltaY / 6;
        }
    
        if (e.deltaMode && e.deltaMode === 1) {
          // Firefox in deltaMode 1: Line scrolling
          deltaX *= 10;
          deltaY *= 10;
        }
    
        if (deltaX !== deltaX && deltaY !== deltaY/* NaN checks */) {
          // IE in some mouse drivers
          deltaX = 0;
          deltaY = e.wheelDelta;
        }
    
        if (e.shiftKey) {
          // reverse axis with shift key
          return [-deltaY, -deltaX];
        }
        return [deltaX, deltaY];
      }
    
      function shouldBeConsumedByChild(deltaX, deltaY) {
        var child = element.querySelector('textarea:hover, select[multiple]:hover, .ps-child:hover');
        if (child) {
          var style = window.getComputedStyle(child);
          var overflow = [
            style.overflow,
            style.overflowX,
            style.overflowY
          ].join('');
    
          if (!overflow.match(/(scroll|auto)/)) {
            // if not scrollable
            return false;
          }
    
          var maxScrollTop = child.scrollHeight - child.clientHeight;
          if (maxScrollTop > 0) {
            if (!(child.scrollTop === 0 && deltaY > 0) && !(child.scrollTop === maxScrollTop && deltaY < 0)) {
              return true;
            }
          }
          var maxScrollLeft = child.scrollLeft - child.clientWidth;
          if (maxScrollLeft > 0) {
            if (!(child.scrollLeft === 0 && deltaX < 0) && !(child.scrollLeft === maxScrollLeft && deltaX > 0)) {
              return true;
            }
          }
        }
        return false;
      }
    
      function mousewheelHandler(e) {
        var delta = getDeltaFromEvent(e);
    
        var deltaX = delta[0];
        var deltaY = delta[1];
    
        if (shouldBeConsumedByChild(deltaX, deltaY)) {
          return;
        }
    
        shouldPrevent = false;
        if (!i.settings.useBothWheelAxes) {
          // deltaX will only be used for horizontal scrolling and deltaY will
          // only be used for vertical scrolling - this is the default
          updateScroll(element, 'top', element.scrollTop - (deltaY * i.settings.wheelSpeed));
          updateScroll(element, 'left', element.scrollLeft + (deltaX * i.settings.wheelSpeed));
        } else if (i.scrollbarYActive && !i.scrollbarXActive) {
          // only vertical scrollbar is active and useBothWheelAxes option is
          // active, so let's scroll vertical bar using both mouse wheel axes
          if (deltaY) {
            updateScroll(element, 'top', element.scrollTop - (deltaY * i.settings.wheelSpeed));
          } else {
            updateScroll(element, 'top', element.scrollTop + (deltaX * i.settings.wheelSpeed));
          }
          shouldPrevent = true;
        } else if (i.scrollbarXActive && !i.scrollbarYActive) {
          // useBothWheelAxes and only horizontal bar is active, so use both
          // wheel axes for horizontal bar
          if (deltaX) {
            updateScroll(element, 'left', element.scrollLeft + (deltaX * i.settings.wheelSpeed));
          } else {
            updateScroll(element, 'left', element.scrollLeft - (deltaY * i.settings.wheelSpeed));
          }
          shouldPrevent = true;
        }
    
        updateGeometry(element);
    
        shouldPrevent = (shouldPrevent || shouldPreventDefault(deltaX, deltaY));
        if (shouldPrevent) {
          e.stopPropagation();
          e.preventDefault();
        }
      }
    
      if (typeof window.onwheel !== "undefined") {
        i.event.bind(element, 'wheel', mousewheelHandler);
      } else if (typeof window.onmousewheel !== "undefined") {
        i.event.bind(element, 'mousewheel', mousewheelHandler);
      }
    }
    
    module.exports = function (element) {
      var i = instances.get(element);
      bindMouseWheelHandler(element, i);
    };
    
    
    /***/ }),
    /* 370 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    var _ = __webpack_require__(38);
    var instances = __webpack_require__(20);
    var updateGeometry = __webpack_require__(34);
    var updateScroll = __webpack_require__(39);
    
    function bindTouchHandler(element, i, supportsTouch, supportsIePointer) {
      function shouldPreventDefault(deltaX, deltaY) {
        var scrollTop = element.scrollTop;
        var scrollLeft = element.scrollLeft;
        var magnitudeX = Math.abs(deltaX);
        var magnitudeY = Math.abs(deltaY);
    
        if (magnitudeY > magnitudeX) {
          // user is perhaps trying to swipe up/down the page
    
          if (((deltaY < 0) && (scrollTop === i.contentHeight - i.containerHeight)) ||
              ((deltaY > 0) && (scrollTop === 0))) {
            return !i.settings.swipePropagation;
          }
        } else if (magnitudeX > magnitudeY) {
          // user is perhaps trying to swipe left/right across the page
    
          if (((deltaX < 0) && (scrollLeft === i.contentWidth - i.containerWidth)) ||
              ((deltaX > 0) && (scrollLeft === 0))) {
            return !i.settings.swipePropagation;
          }
        }
    
        return true;
      }
    
      function applyTouchMove(differenceX, differenceY) {
        updateScroll(element, 'top', element.scrollTop - differenceY);
        updateScroll(element, 'left', element.scrollLeft - differenceX);
    
        updateGeometry(element);
      }
    
      var startOffset = {};
      var startTime = 0;
      var speed = {};
      var easingLoop = null;
      var inGlobalTouch = false;
      var inLocalTouch = false;
    
      function globalTouchStart() {
        inGlobalTouch = true;
      }
      function globalTouchEnd() {
        inGlobalTouch = false;
      }
    
      function getTouch(e) {
        if (e.targetTouches) {
          return e.targetTouches[0];
        } else {
          // Maybe IE pointer
          return e;
        }
      }
      function shouldHandle(e) {
        if (e.pointerType && e.pointerType === 'pen' && e.buttons === 0) {
          return false;
        }
        if (e.targetTouches && e.targetTouches.length === 1) {
          return true;
        }
        if (e.pointerType && e.pointerType !== 'mouse' && e.pointerType !== e.MSPOINTER_TYPE_MOUSE) {
          return true;
        }
        return false;
      }
      function touchStart(e) {
        if (shouldHandle(e)) {
          inLocalTouch = true;
    
          var touch = getTouch(e);
    
          startOffset.pageX = touch.pageX;
          startOffset.pageY = touch.pageY;
    
          startTime = (new Date()).getTime();
    
          if (easingLoop !== null) {
            clearInterval(easingLoop);
          }
    
          e.stopPropagation();
        }
      }
      function touchMove(e) {
        if (!inLocalTouch && i.settings.swipePropagation) {
          touchStart(e);
        }
        if (!inGlobalTouch && inLocalTouch && shouldHandle(e)) {
          var touch = getTouch(e);
    
          var currentOffset = {pageX: touch.pageX, pageY: touch.pageY};
    
          var differenceX = currentOffset.pageX - startOffset.pageX;
          var differenceY = currentOffset.pageY - startOffset.pageY;
    
          applyTouchMove(differenceX, differenceY);
          startOffset = currentOffset;
    
          var currentTime = (new Date()).getTime();
    
          var timeGap = currentTime - startTime;
          if (timeGap > 0) {
            speed.x = differenceX / timeGap;
            speed.y = differenceY / timeGap;
            startTime = currentTime;
          }
    
          if (shouldPreventDefault(differenceX, differenceY)) {
            e.stopPropagation();
            e.preventDefault();
          }
        }
      }
      function touchEnd() {
        if (!inGlobalTouch && inLocalTouch) {
          inLocalTouch = false;
    
          if (i.settings.swipeEasing) {
            clearInterval(easingLoop);
            easingLoop = setInterval(function () {
              if (!instances.get(element)) {
                clearInterval(easingLoop);
                return;
              }
    
              if (!speed.x && !speed.y) {
                clearInterval(easingLoop);
                return;
              }
    
              if (Math.abs(speed.x) < 0.01 && Math.abs(speed.y) < 0.01) {
                clearInterval(easingLoop);
                return;
              }
    
              applyTouchMove(speed.x * 30, speed.y * 30);
    
              speed.x *= 0.8;
              speed.y *= 0.8;
            }, 10);
          }
        }
      }
    
      if (supportsTouch) {
        i.event.bind(window, 'touchstart', globalTouchStart);
        i.event.bind(window, 'touchend', globalTouchEnd);
        i.event.bind(element, 'touchstart', touchStart);
        i.event.bind(element, 'touchmove', touchMove);
        i.event.bind(element, 'touchend', touchEnd);
      } else if (supportsIePointer) {
        if (window.PointerEvent) {
          i.event.bind(window, 'pointerdown', globalTouchStart);
          i.event.bind(window, 'pointerup', globalTouchEnd);
          i.event.bind(element, 'pointerdown', touchStart);
          i.event.bind(element, 'pointermove', touchMove);
          i.event.bind(element, 'pointerup', touchEnd);
        } else if (window.MSPointerEvent) {
          i.event.bind(window, 'MSPointerDown', globalTouchStart);
          i.event.bind(window, 'MSPointerUp', globalTouchEnd);
          i.event.bind(element, 'MSPointerDown', touchStart);
          i.event.bind(element, 'MSPointerMove', touchMove);
          i.event.bind(element, 'MSPointerUp', touchEnd);
        }
      }
    }
    
    module.exports = function (element) {
      if (!_.env.supportsTouch && !_.env.supportsIePointer) {
        return;
      }
    
      var i = instances.get(element);
      bindTouchHandler(element, i, _.env.supportsTouch, _.env.supportsIePointer);
    };
    
    
    /***/ }),
    /* 371 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    var _ = __webpack_require__(38);
    var instances = __webpack_require__(20);
    var updateGeometry = __webpack_require__(34);
    var updateScroll = __webpack_require__(39);
    
    function bindSelectionHandler(element, i) {
      function getRangeNode() {
        var selection = window.getSelection ? window.getSelection() :
                        document.getSelection ? document.getSelection() : '';
        if (selection.toString().length === 0) {
          return null;
        } else {
          return selection.getRangeAt(0).commonAncestorContainer;
        }
      }
    
      var scrollingLoop = null;
      var scrollDiff = {top: 0, left: 0};
      function startScrolling() {
        if (!scrollingLoop) {
          scrollingLoop = setInterval(function () {
            if (!instances.get(element)) {
              clearInterval(scrollingLoop);
              return;
            }
    
            updateScroll(element, 'top', element.scrollTop + scrollDiff.top);
            updateScroll(element, 'left', element.scrollLeft + scrollDiff.left);
            updateGeometry(element);
          }, 50); // every .1 sec
        }
      }
      function stopScrolling() {
        if (scrollingLoop) {
          clearInterval(scrollingLoop);
          scrollingLoop = null;
        }
        _.stopScrolling(element);
      }
    
      var isSelected = false;
      i.event.bind(i.ownerDocument, 'selectionchange', function () {
        if (element.contains(getRangeNode())) {
          isSelected = true;
        } else {
          isSelected = false;
          stopScrolling();
        }
      });
      i.event.bind(window, 'mouseup', function () {
        if (isSelected) {
          isSelected = false;
          stopScrolling();
        }
      });
      i.event.bind(window, 'keyup', function () {
        if (isSelected) {
          isSelected = false;
          stopScrolling();
        }
      });
    
      i.event.bind(window, 'mousemove', function (e) {
        if (isSelected) {
          var mousePosition = {x: e.pageX, y: e.pageY};
          var containerGeometry = {
            left: element.offsetLeft,
            right: element.offsetLeft + element.offsetWidth,
            top: element.offsetTop,
            bottom: element.offsetTop + element.offsetHeight
          };
    
          if (mousePosition.x < containerGeometry.left + 3) {
            scrollDiff.left = -5;
            _.startScrolling(element, 'x');
          } else if (mousePosition.x > containerGeometry.right - 3) {
            scrollDiff.left = 5;
            _.startScrolling(element, 'x');
          } else {
            scrollDiff.left = 0;
          }
    
          if (mousePosition.y < containerGeometry.top + 3) {
            if (containerGeometry.top + 3 - mousePosition.y < 5) {
              scrollDiff.top = -5;
            } else {
              scrollDiff.top = -20;
            }
            _.startScrolling(element, 'y');
          } else if (mousePosition.y > containerGeometry.bottom - 3) {
            if (mousePosition.y - containerGeometry.bottom + 3 < 5) {
              scrollDiff.top = 5;
            } else {
              scrollDiff.top = 20;
            }
            _.startScrolling(element, 'y');
          } else {
            scrollDiff.top = 0;
          }
    
          if (scrollDiff.top === 0 && scrollDiff.left === 0) {
            stopScrolling();
          } else {
            startScrolling();
          }
        }
      });
    }
    
    module.exports = function (element) {
      var i = instances.get(element);
      bindSelectionHandler(element, i);
    };
    
    
    /***/ }),
    /* 372 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    var instances = __webpack_require__(20);
    var updateGeometry = __webpack_require__(34);
    
    function bindNativeScrollHandler(element, i) {
      i.event.bind(element, 'scroll', function () {
        updateGeometry(element);
      });
    }
    
    module.exports = function (element) {
      var i = instances.get(element);
      bindNativeScrollHandler(element, i);
    };
    
    
    /***/ }),
    /* 373 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    var _ = __webpack_require__(38);
    var dom = __webpack_require__(51);
    var instances = __webpack_require__(20);
    var updateGeometry = __webpack_require__(34);
    var updateScroll = __webpack_require__(39);
    
    module.exports = function (element) {
      var i = instances.get(element);
    
      if (!i) {
        return;
      }
    
      // Recalcuate negative scrollLeft adjustment
      i.negativeScrollAdjustment = i.isNegativeScroll ? element.scrollWidth - element.clientWidth : 0;
    
      // Recalculate rail margins
      dom.css(i.scrollbarXRail, 'display', 'block');
      dom.css(i.scrollbarYRail, 'display', 'block');
      i.railXMarginWidth = _.toInt(dom.css(i.scrollbarXRail, 'marginLeft')) + _.toInt(dom.css(i.scrollbarXRail, 'marginRight'));
      i.railYMarginHeight = _.toInt(dom.css(i.scrollbarYRail, 'marginTop')) + _.toInt(dom.css(i.scrollbarYRail, 'marginBottom'));
    
      // Hide scrollbars not to affect scrollWidth and scrollHeight
      dom.css(i.scrollbarXRail, 'display', 'none');
      dom.css(i.scrollbarYRail, 'display', 'none');
    
      updateGeometry(element);
    
      // Update top/left scroll to trigger events
      updateScroll(element, 'top', element.scrollTop);
      updateScroll(element, 'left', element.scrollLeft);
    
      dom.css(i.scrollbarXRail, 'display', '');
      dom.css(i.scrollbarYRail, 'display', '');
    };
    
    
    /***/ }),
    /* 374 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.AnimStagger = undefined;
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _gsap = __webpack_require__(12);
    
    var _preloader = __webpack_require__(78);
    
    var _helpers = __webpack_require__(3);
    
    var _scrollTriggerAnimations = __webpack_require__(79);
    
    var _scrollTriggerAnimations2 = _interopRequireDefault(_scrollTriggerAnimations);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var Stagger = function () {
        function Stagger() {
            _classCallCheck(this, Stagger);
    
            this.scene = [];
        }
    
        _createClass(Stagger, [{
            key: 'init',
            value: function init() {
                var _this = this;
    
                var $el = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    
                _preloader.PreloaderAPI.wait().then(function () {
                    if (_helpers.Resp.isDesk) {
                        _this.$container = $el || $('[data-anim="group"]');
                        _this.$container.removeClass(_helpers.css.anim).find(_helpers.css.anim).removeClass(_helpers.css.anim);
                        _this.createAnim();
                    } else {
                        _this.$container = $el || $('[data-mob-anim="group"]');
                        _this.$container.removeClass(_helpers.css.anim).find(_helpers.css.anim).removeClass(_helpers.css.anim);
                        _this.createAnim('mob-');
                    }
                });
            }
    
            /**
       * @param {String} dataAnim - data trigger element
       */
    
        }, {
            key: 'createAnim',
            value: function createAnim() {
                var _this2 = this;
    
                var dataAnim = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    
                this.$container.each(function (index, container) {
                    var $el = void 0;
                    var delay = $(container).data(dataAnim + 'anim-delay') ? $(container).data(dataAnim + 'anim-delay') : .2;
                    var duration = $(container).data(dataAnim + 'anim-duration') ? $(container).data(dataAnim + 'anim-duration') : .6;
                    var triggerHook = $(container).data(dataAnim + 'anim-trigger-hook');
    
                    // check self animation
                    if ($(container).data(dataAnim + 'anim-stagger')) {
                        $el = $(container).find('[data-' + dataAnim + 'anim-stagger]').andSelf();
                        createAnim(container, $el, _this2);
                    } else if ($(container).data(dataAnim + 'anim-each')) {
                        $el = $(container).addClass(dataAnim + 'has-anim').children();
                        $el.each(function () {
                            $(this).attr('data-' + dataAnim + 'anim-stagger', $(container).data(dataAnim + 'anim-each'));
                            createAnim(this, $(this), this);
                        });
                    } else {
                        $el = $(container).find('[data-' + dataAnim + 'anim-stagger]');
                        createAnim(container, $el, _this2);
                    }
    
                    function createAnim() {
                        var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : container;
                        var el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : $el;
                        var that = arguments[2];
    
                        var tl = new _gsap.TimelineMax({ paused: true });
                        tl.staggerTo(el, duration, {
                            y: 0,
                            x: 0,
                            ease: Power4.easeOut,
                            onStart: function onStart() {
                                $(this.target).addClass(_helpers.css.offTransition);
                                if ($(this.target).data(dataAnim + 'anim-parent-trigger')) {
                                    $(this.target).parent().addClass(_helpers.css.anim);
                                }
    
                                if (this.target.hasAttribute('data-' + dataAnim + 'prepare-anim')) {
                                    $(this.target).removeAttr('data-' + dataAnim + 'prepare-anim');
                                }
    
                                _gsap.TweenMax.to($(this.target), .5, {
                                    alpha: 1,
                                    ease: Power2.easeIn
                                });
                            },
                            onComplete: function onComplete() {
                                $(this.target).removeClass(_helpers.css.offTransition).removeAttr('data-' + dataAnim + 'anim-stagger');
                            }
                        }, delay);
    
                        var scene = new _scrollTriggerAnimations2.default({
                            container: container,
                            triggerHook: triggerHook,
                            onStart: function onStart() {
                                setTimeout(function () {
                                    tl.play();
                                }, 0);
                            }
                        });
    
                        that.scene.push(scene);
                    }
                });
            }
        }, {
            key: 'destroy',
            value: function destroy() {
                this.scene.forEach(function (el) {
                    el.destroyScroll();
                });
            }
        }]);
    
        return Stagger;
    }();
    
    var AnimStagger = exports.AnimStagger = new Stagger();
    
    window.reInitStagger = function () {
        var $el = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    
        exports.AnimStagger = AnimStagger = new Stagger();
        AnimStagger.init($el);
    };
    
    window.removeStagger = removeStagger;
    function removeStagger() {
        AnimStagger.destroy();
    }
    
    /***/ }),
    /* 375 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
     * ScrollMagic v2.0.5 (2015-04-29)
     * The javascript library for magical scroll interactions.
     * (c) 2015 Jan Paepke (@janpaepke)
     * Project Website: http://scrollmagic.io
     * 
     * @version 2.0.5
     * @license Dual licensed under MIT license and GPL.
     * @author Jan Paepke - e-mail@janpaepke.de
     *
     * @file Debug Extension for ScrollMagic.
     */
    /**
     * This plugin was formerly known as the ScrollMagic debug extension.
     *
     * It enables you to add visual indicators to your page, to be able to see exactly when a scene is triggered.
     *
     * To have access to this extension, please include `plugins/debug.addIndicators.js`.
     * @mixin debug.addIndicators
     */
    (function (root, factory) {
        if (true) {
            // AMD. Register as an anonymous module.
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(35)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
                    __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
                    (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
                    __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        } else if (typeof exports === 'object') {
            // CommonJS
            factory(require('scrollmagic'));
        } else {
            // no browser global export needed, just execute
            factory(root.ScrollMagic || (root.jQuery && root.jQuery.ScrollMagic));
        }
    }(this, function (ScrollMagic) {
        "use strict";
        var NAMESPACE = "debug.addIndicators";
    
        var
        console = window.console || {},
            err = Function.prototype.bind.call(console.error || console.log ||
            function () {}, console);
        if (!ScrollMagic) {
            err("(" + NAMESPACE + ") -> ERROR: The ScrollMagic main module could not be found. Please make sure it's loaded before this plugin or use an asynchronous loader like requirejs.");
        }
    
        // plugin settings
        var
        FONT_SIZE = "0.85em",
            ZINDEX = "9999",
            EDGE_OFFSET = 15; // minimum edge distance, added to indentation
    
        // overall vars
        var
        _util = ScrollMagic._util,
            _autoindex = 0;
    
    
    
        ScrollMagic.Scene.extend(function () {
            var
            Scene = this,
                _indicator;
    
            var log = function () {
                if (Scene._log) { // not available, when main source minified
                    Array.prototype.splice.call(arguments, 1, 0, "(" + NAMESPACE + ")", "->");
                    Scene._log.apply(this, arguments);
                }
            };
    
            /**
             * Add visual indicators for a ScrollMagic.Scene.  
             * @memberof! debug.addIndicators#
             *
             * @example
             * // add basic indicators
             * scene.addIndicators()
             *
             * // passing options
             * scene.addIndicators({name: "pin scene", colorEnd: "#FFFFFF"});
             *
             * @param {object} [options] - An object containing one or more options for the indicators.
             * @param {(string|object)} [options.parent=undefined] - A selector, DOM Object or a jQuery object that the indicators should be added to.  
             If undefined, the controller's container will be used.
             * @param {number} [options.name=""] - This string will be displayed at the start and end indicators of the scene for identification purposes. If no name is supplied an automatic index will be used.
             * @param {number} [options.indent=0] - Additional position offset for the indicators (useful, when having multiple scenes starting at the same position).
             * @param {string} [options.colorStart=green] - CSS color definition for the start indicator.
             * @param {string} [options.colorEnd=red] - CSS color definition for the end indicator.
             * @param {string} [options.colorTrigger=blue] - CSS color definition for the trigger indicator.
             */
            Scene.addIndicators = function (options) {
                if (!_indicator) {
                    var
                    DEFAULT_OPTIONS = {
                        name: "",
                        indent: 0,
                        parent: undefined,
                        colorStart: "green",
                        colorEnd: "red",
                        colorTrigger: "blue",
                    };
    
                    options = _util.extend({}, DEFAULT_OPTIONS, options);
    
                    _autoindex++;
                    _indicator = new Indicator(Scene, options);
    
                    Scene.on("add.plugin_addIndicators", _indicator.add);
                    Scene.on("remove.plugin_addIndicators", _indicator.remove);
                    Scene.on("destroy.plugin_addIndicators", Scene.removeIndicators);
    
                    // it the scene already has a controller we can start right away.
                    if (Scene.controller()) {
                        _indicator.add();
                    }
                }
                return Scene;
            };
    
            /**
             * Removes visual indicators from a ScrollMagic.Scene.
             * @memberof! debug.addIndicators#
             *
             * @example
             * // remove previously added indicators
             * scene.removeIndicators()
             *
             */
            Scene.removeIndicators = function () {
                if (_indicator) {
                    _indicator.remove();
                    this.off("*.plugin_addIndicators");
                    _indicator = undefined;
                }
                return Scene;
            };
    
        });
    
    
    /*
         * ----------------------------------------------------------------
         * Extension for controller to store and update related indicators
         * ----------------------------------------------------------------
         */
        // add option to globally auto-add indicators to scenes
        /**
         * Every ScrollMagic.Controller instance now accepts an additional option.  
         * See {@link ScrollMagic.Controller} for a complete list of the standard options.
         * @memberof! debug.addIndicators#
         * @method new ScrollMagic.Controller(options)
         * @example
         * // make a controller and add indicators to all scenes attached
         * var controller = new ScrollMagic.Controller({addIndicators: true});
         * // this scene will automatically have indicators added to it
         * new ScrollMagic.Scene()
         *                .addTo(controller);
         *
         * @param {object} [options] - Options for the Controller.
         * @param {boolean} [options.addIndicators=false] - If set to `true` every scene that is added to the controller will automatically get indicators added to it.
         */
        ScrollMagic.Controller.addOption("addIndicators", false);
        // extend Controller
        ScrollMagic.Controller.extend(function () {
            var
            Controller = this,
                _info = Controller.info(),
                _container = _info.container,
                _isDocument = _info.isDocument,
                _vertical = _info.vertical,
                _indicators = { // container for all indicators and methods
                    groups: []
                };
    
            var log = function () {
                if (Controller._log) { // not available, when main source minified
                    Array.prototype.splice.call(arguments, 1, 0, "(" + NAMESPACE + ")", "->");
                    Controller._log.apply(this, arguments);
                }
            };
            if (Controller._indicators) {
                log(2, "WARNING: Scene already has a property '_indicators', which will be overwritten by plugin.");
            }
    
            // add indicators container
            this._indicators = _indicators;
    /*
                needed updates:
                +++++++++++++++
                start/end position on scene shift (handled in Indicator class)
                trigger parameters on triggerHook value change (handled in Indicator class)
                bounds position on container scroll or resize (to keep alignment to bottom/right)
                trigger position on container resize, window resize (if container isn't document) and window scroll (if container isn't document)
            */
    
            // event handler for when associated bounds markers need to be repositioned
            var handleBoundsPositionChange = function () {
                _indicators.updateBoundsPositions();
            };
    
            // event handler for when associated trigger groups need to be repositioned
            var handleTriggerPositionChange = function () {
                _indicators.updateTriggerGroupPositions();
            };
    
            _container.addEventListener("resize", handleTriggerPositionChange);
            if (!_isDocument) {
                window.addEventListener("resize", handleTriggerPositionChange);
                window.addEventListener("scroll", handleTriggerPositionChange);
            }
            // update all related bounds containers
            _container.addEventListener("resize", handleBoundsPositionChange);
            _container.addEventListener("scroll", handleBoundsPositionChange);
    
    
            // updates the position of the bounds container to aligned to the right for vertical containers and to the bottom for horizontal
            this._indicators.updateBoundsPositions = function (specificIndicator) {
                var // constant for all bounds
                groups = specificIndicator ? [_util.extend({}, specificIndicator.triggerGroup, {
                    members: [specificIndicator]
                })] : // create a group with only one element
                _indicators.groups,
                    // use all
                    g = groups.length,
                    css = {},
                    paramPos = _vertical ? "left" : "top",
                    paramDimension = _vertical ? "width" : "height",
                    edge = _vertical ? _util.get.scrollLeft(_container) + _util.get.width(_container) - EDGE_OFFSET : _util.get.scrollTop(_container) + _util.get.height(_container) - EDGE_OFFSET,
                    b, triggerSize, group;
                while (g--) { // group loop
                    group = groups[g];
                    b = group.members.length;
                    triggerSize = _util.get[paramDimension](group.element.firstChild);
                    while (b--) { // indicators loop
                        css[paramPos] = edge - triggerSize;
                        _util.css(group.members[b].bounds, css);
                    }
                }
            };
    
            // updates the positions of all trigger groups attached to a controller or a specific one, if provided
            this._indicators.updateTriggerGroupPositions = function (specificGroup) {
                var // constant vars
                groups = specificGroup ? [specificGroup] : _indicators.groups,
                    i = groups.length,
                    container = _isDocument ? document.body : _container,
                    containerOffset = _isDocument ? {
                        top: 0,
                        left: 0
                    } : _util.get.offset(container, true),
                    edge = _vertical ? _util.get.width(_container) - EDGE_OFFSET : _util.get.height(_container) - EDGE_OFFSET,
                    paramDimension = _vertical ? "width" : "height",
                    paramTransform = _vertical ? "Y" : "X";
                var // changing vars
                group, elem, pos, elemSize, transform;
                while (i--) {
                    group = groups[i];
                    elem = group.element;
                    pos = group.triggerHook * Controller.info("size");
                    elemSize = _util.get[paramDimension](elem.firstChild.firstChild);
                    transform = pos > elemSize ? "translate" + paramTransform + "(-100%)" : "";
    
                    _util.css(elem, {
                        top: containerOffset.top + (_vertical ? pos : edge - group.members[0].options.indent),
                        left: containerOffset.left + (_vertical ? edge - group.members[0].options.indent : pos)
                    });
                    _util.css(elem.firstChild.firstChild, {
                        "-ms-transform": transform,
                        "-webkit-transform": transform,
                        "transform": transform
                    });
                }
            };
    
            // updates the label for the group to contain the name, if it only has one member
            this._indicators.updateTriggerGroupLabel = function (group) {
                var
                text = "trigger" + (group.members.length > 1 ? "" : " " + group.members[0].options.name),
                    elem = group.element.firstChild.firstChild,
                    doUpdate = elem.textContent !== text;
                if (doUpdate) {
                    elem.textContent = text;
                    if (_vertical) { // bounds position is dependent on text length, so update
                        _indicators.updateBoundsPositions();
                    }
                }
            };
    
            // add indicators if global option is set
            this.addScene = function (newScene) {
    
                if (this._options.addIndicators && newScene instanceof ScrollMagic.Scene && newScene.controller() === Controller) {
                    newScene.addIndicators();
                }
                // call original destroy method
                this.$super.addScene.apply(this, arguments);
            };
    
            // remove all previously set listeners on destroy
            this.destroy = function () {
                _container.removeEventListener("resize", handleTriggerPositionChange);
                if (!_isDocument) {
                    window.removeEventListener("resize", handleTriggerPositionChange);
                    window.removeEventListener("scroll", handleTriggerPositionChange);
                }
                _container.removeEventListener("resize", handleBoundsPositionChange);
                _container.removeEventListener("scroll", handleBoundsPositionChange);
                // call original destroy method
                this.$super.destroy.apply(this, arguments);
            };
            return Controller;
    
        });
    
    /*
         * ----------------------------------------------------------------
         * Internal class for the construction of Indicators
         * ----------------------------------------------------------------
         */
        var Indicator = function (Scene, options) {
            var
            Indicator = this,
                _elemBounds = TPL.bounds(),
                _elemStart = TPL.start(options.colorStart),
                _elemEnd = TPL.end(options.colorEnd),
                _boundsContainer = options.parent && _util.get.elements(options.parent)[0],
                _vertical, _ctrl;
    
            var log = function () {
                if (Scene._log) { // not available, when main source minified
                    Array.prototype.splice.call(arguments, 1, 0, "(" + NAMESPACE + ")", "->");
                    Scene._log.apply(this, arguments);
                }
            };
    
            options.name = options.name || _autoindex;
    
            // prepare bounds elements
            _elemStart.firstChild.textContent += " " + options.name;
            _elemEnd.textContent += " " + options.name;
            _elemBounds.appendChild(_elemStart);
            _elemBounds.appendChild(_elemEnd);
    
            // set public variables
            Indicator.options = options;
            Indicator.bounds = _elemBounds;
            // will be set later
            Indicator.triggerGroup = undefined;
    
            // add indicators to DOM
            this.add = function () {
                _ctrl = Scene.controller();
                _vertical = _ctrl.info("vertical");
    
                var isDocument = _ctrl.info("isDocument");
    
                if (!_boundsContainer) {
                    // no parent supplied or doesnt exist
                    _boundsContainer = isDocument ? document.body : _ctrl.info("container"); // check if window/document (then use body)
                }
                if (!isDocument && _util.css(_boundsContainer, "position") === 'static') {
                    // position mode needed for correct positioning of indicators
                    _util.css(_boundsContainer, {
                        position: "relative"
                    });
                }
    
                // add listeners for updates
                Scene.on("change.plugin_addIndicators", handleTriggerParamsChange);
                Scene.on("shift.plugin_addIndicators", handleBoundsParamsChange);
    
                // updates trigger & bounds (will add elements if needed)
                updateTriggerGroup();
                updateBounds();
    
                setTimeout(function () { // do after all execution is finished otherwise sometimes size calculations are off
                    _ctrl._indicators.updateBoundsPositions(Indicator);
                }, 0);
    
                log(3, "added indicators");
            };
    
            // remove indicators from DOM
            this.remove = function () {
                if (Indicator.triggerGroup) { // if not set there's nothing to remove
                    Scene.off("change.plugin_addIndicators", handleTriggerParamsChange);
                    Scene.off("shift.plugin_addIndicators", handleBoundsParamsChange);
    
                    if (Indicator.triggerGroup.members.length > 1) {
                        // just remove from memberlist of old group
                        var group = Indicator.triggerGroup;
                        group.members.splice(group.members.indexOf(Indicator), 1);
                        _ctrl._indicators.updateTriggerGroupLabel(group);
                        _ctrl._indicators.updateTriggerGroupPositions(group);
                        Indicator.triggerGroup = undefined;
                    } else {
                        // remove complete group
                        removeTriggerGroup();
                    }
                    removeBounds();
    
                    log(3, "removed indicators");
                }
            };
    
    /*
             * ----------------------------------------------------------------
             * internal Event Handlers
             * ----------------------------------------------------------------
             */
    
            // event handler for when bounds params change
            var handleBoundsParamsChange = function () {
                updateBounds();
            };
    
            // event handler for when trigger params change
            var handleTriggerParamsChange = function (e) {
                if (e.what === "triggerHook") {
                    updateTriggerGroup();
                }
            };
    
    /*
             * ----------------------------------------------------------------
             * Bounds (start / stop) management
             * ----------------------------------------------------------------
             */
    
            // adds an new bounds elements to the array and to the DOM
            var addBounds = function () {
                var v = _ctrl.info("vertical");
                // apply stuff we didn't know before...
                _util.css(_elemStart.firstChild, {
                    "border-bottom-width": v ? 1 : 0,
                    "border-right-width": v ? 0 : 1,
                    "bottom": v ? -1 : options.indent,
                    "right": v ? options.indent : -1,
                    "padding": v ? "0 8px" : "2px 4px",
                });
                _util.css(_elemEnd, {
                    "border-top-width": v ? 1 : 0,
                    "border-left-width": v ? 0 : 1,
                    "top": v ? "100%" : "",
                    "right": v ? options.indent : "",
                    "bottom": v ? "" : options.indent,
                    "left": v ? "" : "100%",
                    "padding": v ? "0 8px" : "2px 4px"
                });
                // append
                _boundsContainer.appendChild(_elemBounds);
            };
    
            // remove bounds from list and DOM
            var removeBounds = function () {
                _elemBounds.parentNode.removeChild(_elemBounds);
            };
    
            // update the start and end positions of the scene
            var updateBounds = function () {
                if (_elemBounds.parentNode !== _boundsContainer) {
                    addBounds(); // Add Bounds elements (start/end)
                }
                var css = {};
                css[_vertical ? "top" : "left"] = Scene.triggerPosition();
                css[_vertical ? "height" : "width"] = Scene.duration();
                _util.css(_elemBounds, css);
                _util.css(_elemEnd, {
                    display: Scene.duration() > 0 ? "" : "none"
                });
            };
    
    /*
             * ----------------------------------------------------------------
             * trigger and trigger group management
             * ----------------------------------------------------------------
             */
    
            // adds an new trigger group to the array and to the DOM
            var addTriggerGroup = function () {
                var triggerElem = TPL.trigger(options.colorTrigger); // new trigger element
                var css = {};
                css[_vertical ? "right" : "bottom"] = 0;
                css[_vertical ? "border-top-width" : "border-left-width"] = 1;
                _util.css(triggerElem.firstChild, css);
                _util.css(triggerElem.firstChild.firstChild, {
                    padding: _vertical ? "0 8px 3px 8px" : "3px 4px"
                });
                document.body.appendChild(triggerElem); // directly add to body
                var newGroup = {
                    triggerHook: Scene.triggerHook(),
                    element: triggerElem,
                    members: [Indicator]
                };
                _ctrl._indicators.groups.push(newGroup);
                Indicator.triggerGroup = newGroup;
                // update right away
                _ctrl._indicators.updateTriggerGroupLabel(newGroup);
                _ctrl._indicators.updateTriggerGroupPositions(newGroup);
            };
    
            var removeTriggerGroup = function () {
                _ctrl._indicators.groups.splice(_ctrl._indicators.groups.indexOf(Indicator.triggerGroup), 1);
                Indicator.triggerGroup.element.parentNode.removeChild(Indicator.triggerGroup.element);
                Indicator.triggerGroup = undefined;
            };
    
            // updates the trigger group -> either join existing or add new one
    /*	
             * Logic:
             * 1 if a trigger group exist, check if it's in sync with Scene settings – if so, nothing else needs to happen
             * 2 try to find an existing one that matches Scene parameters
             * 	 2.1 If a match is found check if already assigned to an existing group
             *			 If so:
             *       A: it was the last member of existing group -> kill whole group
             *       B: the existing group has other members -> just remove from member list
             *	 2.2 Assign to matching group
             * 3 if no new match could be found, check if assigned to existing group
             *   A: yes, and it's the only member -> just update parameters and positions and keep using this group
             *   B: yes but there are other members -> remove from member list and create a new one
             *   C: no, so create a new one
             */
            var updateTriggerGroup = function () {
                var
                triggerHook = Scene.triggerHook(),
                    closeEnough = 0.0001;
    
                // Have a group, check if it still matches
                if (Indicator.triggerGroup) {
                    if (Math.abs(Indicator.triggerGroup.triggerHook - triggerHook) < closeEnough) {
                        // _util.log(0, "trigger", options.name, "->", "no need to change, still in sync");
                        return; // all good
                    }
                }
                // Don't have a group, check if a matching one exists
                // _util.log(0, "trigger", options.name, "->", "out of sync!");
                var
                groups = _ctrl._indicators.groups,
                    group, i = groups.length;
                while (i--) {
                    group = groups[i];
                    if (Math.abs(group.triggerHook - triggerHook) < closeEnough) {
                        // found a match!
                        // _util.log(0, "trigger", options.name, "->", "found match");
                        if (Indicator.triggerGroup) { // do I have an old group that is out of sync?
                            if (Indicator.triggerGroup.members.length === 1) { // is it the only remaining group?
                                // _util.log(0, "trigger", options.name, "->", "kill");
                                // was the last member, remove the whole group
                                removeTriggerGroup();
                            } else {
                                Indicator.triggerGroup.members.splice(Indicator.triggerGroup.members.indexOf(Indicator), 1); // just remove from memberlist of old group
                                _ctrl._indicators.updateTriggerGroupLabel(Indicator.triggerGroup);
                                _ctrl._indicators.updateTriggerGroupPositions(Indicator.triggerGroup);
                                // _util.log(0, "trigger", options.name, "->", "removing from previous member list");
                            }
                        }
                        // join new group
                        group.members.push(Indicator);
                        Indicator.triggerGroup = group;
                        _ctrl._indicators.updateTriggerGroupLabel(group);
                        return;
                    }
                }
    
                // at this point I am obviously out of sync and don't match any other group
                if (Indicator.triggerGroup) {
                    if (Indicator.triggerGroup.members.length === 1) {
                        // _util.log(0, "trigger", options.name, "->", "updating existing");
                        // out of sync but i'm the only member => just change and update
                        Indicator.triggerGroup.triggerHook = triggerHook;
                        _ctrl._indicators.updateTriggerGroupPositions(Indicator.triggerGroup);
                        return;
                    } else {
                        // _util.log(0, "trigger", options.name, "->", "removing from previous member list");
                        Indicator.triggerGroup.members.splice(Indicator.triggerGroup.members.indexOf(Indicator), 1); // just remove from memberlist of old group
                        _ctrl._indicators.updateTriggerGroupLabel(Indicator.triggerGroup);
                        _ctrl._indicators.updateTriggerGroupPositions(Indicator.triggerGroup);
                        Indicator.triggerGroup = undefined; // need a brand new group...
                    }
                }
                // _util.log(0, "trigger", options.name, "->", "add a new one");
                // did not find any match, make new trigger group
                addTriggerGroup();
            };
        };
    
    /*
         * ----------------------------------------------------------------
         * Templates for the indicators
         * ----------------------------------------------------------------
         */
        var TPL = {
            start: function (color) {
                // inner element (for bottom offset -1, while keeping top position 0)
                var inner = document.createElement("div");
                inner.textContent = "start";
                _util.css(inner, {
                    position: "absolute",
                    overflow: "visible",
                    "border-width": 0,
                    "border-style": "solid",
                    color: color,
                    "border-color": color
                });
                var e = document.createElement('div');
                // wrapper
                _util.css(e, {
                    position: "absolute",
                    overflow: "visible",
                    width: 0,
                    height: 0
                });
                e.appendChild(inner);
                return e;
            },
            end: function (color) {
                var e = document.createElement('div');
                e.textContent = "end";
                _util.css(e, {
                    position: "absolute",
                    overflow: "visible",
                    "border-width": 0,
                    "border-style": "solid",
                    color: color,
                    "border-color": color
                });
                return e;
            },
            bounds: function () {
                var e = document.createElement('div');
                _util.css(e, {
                    position: "absolute",
                    overflow: "visible",
                    "white-space": "nowrap",
                    "pointer-events": "none",
                    "font-size": FONT_SIZE
                });
                e.style.zIndex = ZINDEX;
                return e;
            },
            trigger: function (color) {
                // inner to be above or below line but keep position
                var inner = document.createElement('div');
                inner.textContent = "trigger";
                _util.css(inner, {
                    position: "relative",
                });
                // inner wrapper for right: 0 and main element has no size
                var w = document.createElement('div');
                _util.css(w, {
                    position: "absolute",
                    overflow: "visible",
                    "border-width": 0,
                    "border-style": "solid",
                    color: color,
                    "border-color": color
                });
                w.appendChild(inner);
                // wrapper
                var e = document.createElement('div');
                _util.css(e, {
                    position: "fixed",
                    overflow: "visible",
                    "white-space": "nowrap",
                    "pointer-events": "none",
                    "font-size": FONT_SIZE
                });
                e.style.zIndex = ZINDEX;
                e.appendChild(w);
                return e;
            },
        };
    
    }));
    
    /***/ }),
    /* 376 */
    /***/ (function(module, exports) {
    
    // ==================================================
    // fancyBox v3.4.1
    //
    // Licensed GPLv3 for open source use
    // or fancyBox Commercial License for commercial use
    //
    // http://fancyapps.com/fancybox/
    // Copyright 2018 fancyApps
    //
    // ==================================================
    !function(t,e,n,o){"use strict";function i(t,e){var o,i,a,s=[],r=0;t&&t.isDefaultPrevented()||(t.preventDefault(),e=e||{},t&&t.data&&(e=p(t.data.options,e)),o=e.$target||n(t.currentTarget).trigger("blur"),a=n.fancybox.getInstance(),a&&a.$trigger&&a.$trigger.is(o)||(e.selector?s=n(e.selector):(i=o.attr("data-fancybox")||"",i?(s=t.data?t.data.items:[],s=s.length?s.filter('[data-fancybox="'+i+'"]'):n('[data-fancybox="'+i+'"]')):s=[o]),r=n(s).index(o),r<0&&(r=0),a=n.fancybox.open(s,e,r),a.$trigger=o))}if(t.console=t.console||{info:function(t){}},n){if(n.fn.fancybox)return void console.info("fancyBox already initialized");var a={closeExisting:!1,loop:!1,gutter:50,keyboard:!0,arrows:!0,infobar:!0,smallBtn:"auto",toolbar:"auto",buttons:["zoom","thumbs","close"],idleTime:3,protect:!1,modal:!1,image:{preload:!1},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" frameborder="0" vspace="0" hspace="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen allowtransparency="true" src=""></iframe>',preload:!0,css:{},attr:{scrolling:"auto"}},video:{tpl:'<video class="fancybox-video" controls controlsList="nodownload"><source src="{{src}}" type="{{format}}" />Your browser doesn\'t support HTML5 video</video>',format:"",autoStart:!0},defaultType:"image",animationEffect:"zoom",animationDuration:366,zoomOpacity:"auto",transitionEffect:"fade",transitionDuration:366,slideClass:"",baseClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><div class="fancybox-toolbar">{{buttons}}</div><div class="fancybox-navigation">{{arrows}}</div><div class="fancybox-stage"></div><div class="fancybox-caption"></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>{{ERROR}}</p></div>',btnTpl:{download:'<a download data-fancybox-download class="fancybox-button fancybox-button--download" title="{{DOWNLOAD}}" href="javascript:;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.62 17.09V19H5.38v-1.91zm-2.97-6.96L17 11.45l-5 4.87-5-4.87 1.36-1.32 2.68 2.64V5h1.92v7.77z"/></svg></a>',zoom:'<button data-fancybox-zoom class="fancybox-button fancybox-button--zoom" title="{{ZOOM}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.7 17.3l-3-3a5.9 5.9 0 0 0-.6-7.6 5.9 5.9 0 0 0-8.4 0 5.9 5.9 0 0 0 0 8.4 5.9 5.9 0 0 0 7.7.7l3 3a1 1 0 0 0 1.3 0c.4-.5.4-1 0-1.5zM8.1 13.8a4 4 0 0 1 0-5.7 4 4 0 0 1 5.7 0 4 4 0 0 1 0 5.7 4 4 0 0 1-5.7 0z"/></svg></button>',close:'<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 10.6L6.6 5.2 5.2 6.6l5.4 5.4-5.4 5.4 1.4 1.4 5.4-5.4 5.4 5.4 1.4-1.4-5.4-5.4 5.4-5.4-1.4-1.4-5.4 5.4z"/></svg></button>',arrowLeft:'<button data-fancybox-prev class="fancybox-button fancybox-button--arrow_left" title="{{PREV}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M11.28 15.7l-1.34 1.37L5 12l4.94-5.07 1.34 1.38-2.68 2.72H19v1.94H8.6z"/></svg></div></button>',arrowRight:'<button data-fancybox-next class="fancybox-button fancybox-button--arrow_right" title="{{NEXT}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15.4 12.97l-2.68 2.72 1.34 1.38L19 12l-4.94-5.07-1.34 1.38 2.68 2.72H5v1.94z"/></svg></div></button>',smallBtn:'<button type="button" data-fancybox-close class="fancybox-button fancybox-close-small" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" version="1" viewBox="0 0 24 24"><path d="M13 12l5-5-1-1-5 5-5-5-1 1 5 5-5 5 1 1 5-5 5 5 1-1z"/></svg></button>'},parentEl:"body",hideScrollbar:!0,autoFocus:!0,backFocus:!0,trapFocus:!0,fullScreen:{autoStart:!1},touch:{vertical:!0,momentum:!0},hash:null,media:{},slideShow:{autoStart:!1,speed:3e3},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"},wheel:"auto",onInit:n.noop,beforeLoad:n.noop,afterLoad:n.noop,beforeShow:n.noop,afterShow:n.noop,beforeClose:n.noop,afterClose:n.noop,onActivate:n.noop,onDeactivate:n.noop,clickContent:function(t,e){return"image"===t.type&&"zoom"},clickSlide:"close",clickOutside:"close",dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1,mobile:{idleTime:!1,clickContent:function(t,e){return"image"===t.type&&"toggleControls"},clickSlide:function(t,e){return"image"===t.type?"toggleControls":"close"},dblclickContent:function(t,e){return"image"===t.type&&"zoom"},dblclickSlide:function(t,e){return"image"===t.type&&"zoom"}},lang:"en",i18n:{en:{CLOSE:"Close",NEXT:"Next",PREV:"Previous",ERROR:"The requested content cannot be loaded. <br/> Please try again later.",PLAY_START:"Start slideshow",PLAY_STOP:"Pause slideshow",FULL_SCREEN:"Full screen",THUMBS:"Thumbnails",DOWNLOAD:"Download",SHARE:"Share",ZOOM:"Zoom"},de:{CLOSE:"Schliessen",NEXT:"Weiter",PREV:"Zurück",ERROR:"Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es später nochmal.",PLAY_START:"Diaschau starten",PLAY_STOP:"Diaschau beenden",FULL_SCREEN:"Vollbild",THUMBS:"Vorschaubilder",DOWNLOAD:"Herunterladen",SHARE:"Teilen",ZOOM:"Maßstab"}}},s=n(t),r=n(e),c=0,l=function(t){return t&&t.hasOwnProperty&&t instanceof n},d=function(){return t.requestAnimationFrame||t.webkitRequestAnimationFrame||t.mozRequestAnimationFrame||t.oRequestAnimationFrame||function(e){return t.setTimeout(e,1e3/60)}}(),u=function(){var t,n=e.createElement("fakeelement"),i={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(t in i)if(n.style[t]!==o)return i[t];return"transitionend"}(),f=function(t){return t&&t.length&&t[0].offsetHeight},p=function(t,e){var o=n.extend(!0,{},t,e);return n.each(e,function(t,e){n.isArray(e)&&(o[t]=e)}),o},h=function(t,e,o){var i=this;i.opts=p({index:o},n.fancybox.defaults),n.isPlainObject(e)&&(i.opts=p(i.opts,e)),n.fancybox.isMobile&&(i.opts=p(i.opts,i.opts.mobile)),i.id=i.opts.id||++c,i.currIndex=parseInt(i.opts.index,10)||0,i.prevIndex=null,i.prevPos=null,i.currPos=0,i.firstRun=!0,i.group=[],i.slides={},i.addContent(t),i.group.length&&i.init()};n.extend(h.prototype,{init:function(){var i,a,s,r=this,c=r.group[r.currIndex],l=c.opts,d=n.fancybox.scrollbarWidth;l.closeExisting&&n.fancybox.close(!0),n("body").addClass("fancybox-active"),!n.fancybox.getInstance()&&l.hideScrollbar!==!1&&!n.fancybox.isMobile&&e.body.scrollHeight>t.innerHeight&&(d===o&&(i=n('<div style="width:100px;height:100px;overflow:scroll;" />').appendTo("body"),d=n.fancybox.scrollbarWidth=i[0].offsetWidth-i[0].clientWidth,i.remove()),n("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar { margin-right: '+d+"px; }</style>"),n("body").addClass("compensate-for-scrollbar")),s="",n.each(l.buttons,function(t,e){s+=l.btnTpl[e]||""}),a=n(r.translate(r,l.baseTpl.replace("{{buttons}}",s).replace("{{arrows}}",l.btnTpl.arrowLeft+l.btnTpl.arrowRight))).attr("id","fancybox-container-"+r.id).addClass(l.baseClass).data("FancyBox",r).appendTo(l.parentEl),r.$refs={container:a},["bg","inner","infobar","toolbar","stage","caption","navigation"].forEach(function(t){r.$refs[t]=a.find(".fancybox-"+t)}),r.trigger("onInit"),r.activate(),r.jumpTo(r.currIndex)},translate:function(t,e){var n=t.opts.i18n[t.opts.lang];return e.replace(/\{\{(\w+)\}\}/g,function(t,e){var i=n[e];return i===o?t:i})},addContent:function(t){var e,i=this,a=n.makeArray(t);n.each(a,function(t,e){var a,s,r,c,l,d={},u={};n.isPlainObject(e)?(d=e,u=e.opts||e):"object"===n.type(e)&&n(e).length?(a=n(e),u=a.data()||{},u=n.extend(!0,{},u,u.options),u.$orig=a,d.src=i.opts.src||u.src||a.attr("href"),d.type||d.src||(d.type="inline",d.src=e)):d={type:"html",src:e+""},d.opts=n.extend(!0,{},i.opts,u),n.isArray(u.buttons)&&(d.opts.buttons=u.buttons),n.fancybox.isMobile&&d.opts.mobile&&(d.opts=p(d.opts,d.opts.mobile)),s=d.type||d.opts.type,c=d.src||"",!s&&c&&((r=c.match(/\.(mp4|mov|ogv|webm)((\?|#).*)?$/i))?(s="video",d.opts.video.format||(d.opts.video.format="video/"+("ogv"===r[1]?"ogg":r[1]))):c.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?s="image":c.match(/\.(pdf)((\?|#).*)?$/i)?s="iframe":"#"===c.charAt(0)&&(s="inline")),s?d.type=s:i.trigger("objectNeedsType",d),d.contentType||(d.contentType=n.inArray(d.type,["html","inline","ajax"])>-1?"html":d.type),d.index=i.group.length,"auto"==d.opts.smallBtn&&(d.opts.smallBtn=n.inArray(d.type,["html","inline","ajax"])>-1),"auto"===d.opts.toolbar&&(d.opts.toolbar=!d.opts.smallBtn),d.opts.$trigger&&d.index===i.opts.index&&(d.opts.$thumb=d.opts.$trigger.find("img:first"),d.opts.$thumb.length&&(d.opts.$orig=d.opts.$trigger)),d.opts.$thumb&&d.opts.$thumb.length||!d.opts.$orig||(d.opts.$thumb=d.opts.$orig.find("img:first")),"function"===n.type(d.opts.caption)&&(d.opts.caption=d.opts.caption.apply(e,[i,d])),"function"===n.type(i.opts.caption)&&(d.opts.caption=i.opts.caption.apply(e,[i,d])),d.opts.caption instanceof n||(d.opts.caption=d.opts.caption===o?"":d.opts.caption+""),"ajax"===d.type&&(l=c.split(/\s+/,2),l.length>1&&(d.src=l.shift(),d.opts.filter=l.shift())),d.opts.modal&&(d.opts=n.extend(!0,d.opts,{infobar:0,toolbar:0,smallBtn:0,keyboard:0,slideShow:0,fullScreen:0,thumbs:0,touch:0,clickContent:!1,clickSlide:!1,clickOutside:!1,dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1})),i.group.push(d)}),Object.keys(i.slides).length&&(i.updateControls(),e=i.Thumbs,e&&e.isActive&&(e.create(),e.focus()))},addEvents:function(){var e=this;e.removeEvents(),e.$refs.container.on("click.fb-close","[data-fancybox-close]",function(t){t.stopPropagation(),t.preventDefault(),e.close(t)}).on("touchstart.fb-prev click.fb-prev","[data-fancybox-prev]",function(t){t.stopPropagation(),t.preventDefault(),e.previous()}).on("touchstart.fb-next click.fb-next","[data-fancybox-next]",function(t){t.stopPropagation(),t.preventDefault(),e.next()}).on("click.fb","[data-fancybox-zoom]",function(t){e[e.isScaledDown()?"scaleToActual":"scaleToFit"]()}),s.on("orientationchange.fb resize.fb",function(t){t&&t.originalEvent&&"resize"===t.originalEvent.type?d(function(){e.update()}):(e.current&&"iframe"===e.current.type&&e.$refs.stage.hide(),setTimeout(function(){e.$refs.stage.show(),e.update()},n.fancybox.isMobile?600:250))}),r.on("keydown.fb",function(t){var o=n.fancybox?n.fancybox.getInstance():null,i=o.current,a=t.keyCode||t.which;if(9==a)return void(i.opts.trapFocus&&e.focus(t));if(!(!i.opts.keyboard||t.ctrlKey||t.altKey||t.shiftKey||n(t.target).is("input")||n(t.target).is("textarea")))return 8===a||27===a?(t.preventDefault(),void e.close(t)):37===a||38===a?(t.preventDefault(),void e.previous()):39===a||40===a?(t.preventDefault(),void e.next()):void e.trigger("afterKeydown",t,a)}),e.group[e.currIndex].opts.idleTime&&(e.idleSecondsCounter=0,r.on("mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle",function(t){e.idleSecondsCounter=0,e.isIdle&&e.showControls(),e.isIdle=!1}),e.idleInterval=t.setInterval(function(){e.idleSecondsCounter++,e.idleSecondsCounter>=e.group[e.currIndex].opts.idleTime&&!e.isDragging&&(e.isIdle=!0,e.idleSecondsCounter=0,e.hideControls())},1e3))},removeEvents:function(){var e=this;s.off("orientationchange.fb resize.fb"),r.off("keydown.fb .fb-idle"),this.$refs.container.off(".fb-close .fb-prev .fb-next"),e.idleInterval&&(t.clearInterval(e.idleInterval),e.idleInterval=null)},previous:function(t){return this.jumpTo(this.currPos-1,t)},next:function(t){return this.jumpTo(this.currPos+1,t)},jumpTo:function(t,e){var i,a,s,r,c,l,d,u=this,f=u.group.length;if(!(u.isDragging||u.isClosing||u.isAnimating&&u.firstRun)){if(t=parseInt(t,10),s=u.current?u.current.opts.loop:u.opts.loop,!s&&(t<0||t>=f))return!1;if(i=u.firstRun=!Object.keys(u.slides).length,!(f<2&&!i&&u.isDragging)){if(c=u.current,u.prevIndex=u.currIndex,u.prevPos=u.currPos,r=u.createSlide(t),f>1&&((s||r.index<f-1)&&u.createSlide(t+1),(s||r.index>0)&&u.createSlide(t-1)),u.current=r,u.currIndex=r.index,u.currPos=r.pos,u.trigger("beforeShow",i),u.updateControls(),a=u.isMoved(r),r.forcedDuration=o,n.isNumeric(e)?r.forcedDuration=e:e=r.opts[i?"animationDuration":"transitionDuration"],e=parseInt(e,10),i)return r.opts.animationEffect&&e&&u.$refs.container.css("transition-duration",e+"ms"),u.$refs.container.addClass("fancybox-is-open"),r.$slide.addClass("fancybox-slide--previous"),u.loadSlide(r),r.$slide.removeClass("fancybox-slide--previous").addClass("fancybox-slide--current"),u.preload("image"),void u.$refs.container.trigger("focus");n.each(u.slides,function(t,e){n.fancybox.stop(e.$slide,!0),e.$slide.removeClass("fancybox-animated").removeClass(function(t,e){return(e.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")})}),r.$slide.removeClass("fancybox-slide--next fancybox-slide--previous").addClass("fancybox-slide--current"),a?(l=Math.round(r.$slide.width()),n.each(u.slides,function(t,o){var i=o.pos-r.pos;n.fancybox.animate(o.$slide,{top:0,left:i*l+i*o.opts.gutter},e,function(){o.$slide.removeAttr("style").removeClass("fancybox-slide--next fancybox-slide--previous"),o.pos===u.currPos&&u.complete()})})):u.$refs.stage.children().removeAttr("style"),r.isLoaded?u.revealContent(r):u.loadSlide(r),u.preload("image"),c.pos!==r.pos&&(d="fancybox-slide--"+(c.pos>r.pos?"next":"previous"),c.$slide.removeClass("fancybox-slide--complete fancybox-slide--current fancybox-slide--next fancybox-slide--previous"),c.isComplete=!1,e&&(a||r.opts.transitionEffect)&&(a?c.$slide.addClass(d):(d="fancybox-animated "+d+" fancybox-fx-"+r.opts.transitionEffect,n.fancybox.animate(c.$slide,d,e,null,!1))))}}},createSlide:function(t){var e,o,i=this;return o=t%i.group.length,o=o<0?i.group.length+o:o,!i.slides[t]&&i.group[o]&&(e=n('<div class="fancybox-slide"></div>').appendTo(i.$refs.stage),i.slides[t]=n.extend(!0,{},i.group[o],{pos:t,$slide:e,isLoaded:!1}),i.updateSlide(i.slides[t])),i.slides[t]},scaleToActual:function(t,e,i){var a,s,r,c,l,d=this,u=d.current,f=u.$content,p=n.fancybox.getTranslate(u.$slide).width,h=n.fancybox.getTranslate(u.$slide).height,g=u.width,b=u.height;!d.isAnimating&&f&&"image"==u.type&&u.isLoaded&&!u.hasError&&(n.fancybox.stop(f),d.isAnimating=!0,t=t===o?.5*p:t,e=e===o?.5*h:e,a=n.fancybox.getTranslate(f),a.top-=n.fancybox.getTranslate(u.$slide).top,a.left-=n.fancybox.getTranslate(u.$slide).left,c=g/a.width,l=b/a.height,s=.5*p-.5*g,r=.5*h-.5*b,g>p&&(s=a.left*c-(t*c-t),s>0&&(s=0),s<p-g&&(s=p-g)),b>h&&(r=a.top*l-(e*l-e),r>0&&(r=0),r<h-b&&(r=h-b)),d.updateCursor(g,b),n.fancybox.animate(f,{top:r,left:s,scaleX:c,scaleY:l},i||330,function(){d.isAnimating=!1}),d.SlideShow&&d.SlideShow.isActive&&d.SlideShow.stop())},scaleToFit:function(t){var e,o=this,i=o.current,a=i.$content;!o.isAnimating&&a&&"image"==i.type&&i.isLoaded&&!i.hasError&&(n.fancybox.stop(a),o.isAnimating=!0,e=o.getFitPos(i),o.updateCursor(e.width,e.height),n.fancybox.animate(a,{top:e.top,left:e.left,scaleX:e.width/a.width(),scaleY:e.height/a.height()},t||330,function(){o.isAnimating=!1}))},getFitPos:function(t){var e,o,i,a,s=this,r=t.$content,c=t.$slide,l=t.width||t.opts.width,d=t.height||t.opts.height,u={};return!!(t.isLoaded&&r&&r.length)&&(e=n.fancybox.getTranslate(s.$refs.stage).width,o=n.fancybox.getTranslate(s.$refs.stage).height,e-=parseFloat(c.css("paddingLeft"))+parseFloat(c.css("paddingRight"))+parseFloat(r.css("marginLeft"))+parseFloat(r.css("marginRight")),o-=parseFloat(c.css("paddingTop"))+parseFloat(c.css("paddingBottom"))+parseFloat(r.css("marginTop"))+parseFloat(r.css("marginBottom")),l&&d||(l=e,d=o),i=Math.min(1,e/l,o/d),l=Math.floor(i*l),d=Math.floor(i*d),"image"===t.type?(u.top=Math.floor(.5*(o-d))+parseFloat(c.css("paddingTop")),u.left=Math.floor(.5*(e-l))+parseFloat(c.css("paddingLeft"))):"video"===t.contentType&&(a=t.opts.width&&t.opts.height?l/d:t.opts.ratio||16/9,d>l/a?d=l/a:l>d*a&&(l=d*a)),u.width=l,u.height=d,u)},update:function(){var t=this;n.each(t.slides,function(e,n){t.updateSlide(n)})},updateSlide:function(t){var e=this,o=t&&t.$content,i=t.width||t.opts.width,a=t.height||t.opts.height,s=t.$slide;o&&(i||a||"video"===t.contentType)&&!t.hasError&&(n.fancybox.stop(o),n.fancybox.setTranslate(o,e.getFitPos(t)),t.pos===e.currPos&&(e.isAnimating=!1,e.updateCursor())),s.length&&(s.trigger("refresh"),e.$refs.toolbar.toggleClass("compensate-for-scrollbar",s.get(0).scrollHeight>s.get(0).clientHeight)),e.trigger("onUpdate",t)},centerSlide:function(t,e){var i,a,s=this;s.current&&(i=Math.round(t.$slide.width()),a=t.pos-s.current.pos,n.fancybox.animate(t.$slide,{top:0,left:a*i+a*t.opts.gutter,opacity:1},e===o?0:e,null,!1))},isMoved:function(t){var e=t||this.current,o=n.fancybox.getTranslate(e.$slide);return(0!==o.left||0!==o.top)&&!e.$slide.hasClass("fancybox-animated")},updateCursor:function(t,e){var o,i=this,a=i.current,s=i.$refs.container.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-zoomOut fancybox-can-swipe fancybox-can-pan");a&&!i.isClosing&&(o=i.isZoomable(),s.toggleClass("fancybox-is-zoomable",o),n("[data-fancybox-zoom]").prop("disabled",!o),i.canPan(t,e)?s.addClass("fancybox-can-pan"):o&&("zoom"===a.opts.clickContent||n.isFunction(a.opts.clickContent)&&"zoom"==a.opts.clickContent(a))?s.addClass("fancybox-can-zoomIn"):a.opts.touch&&(a.opts.touch.vertical||i.group.length>1)&&"video"!==a.contentType&&s.addClass("fancybox-can-swipe"))},isZoomable:function(){var t,e=this,n=e.current;if(n&&!e.isClosing&&"image"===n.type&&!n.hasError){if(!n.isLoaded)return!0;if(t=e.getFitPos(n),n.width>t.width||n.height>t.height)return!0}return!1},isScaledDown:function(t,e){var i=this,a=!1,s=i.current,r=s.$content;return t!==o&&e!==o?a=t<s.width&&e<s.height:r&&(a=n.fancybox.getTranslate(r),a=a.width<s.width&&a.height<s.height),a},canPan:function(t,e){var i,a,s=this,r=!1,c=s.current;return"image"===c.type&&(i=c.$content)&&!c.hasError&&(r=s.getFitPos(c),a=t!==o&&e!==o?{width:t,height:e}:n.fancybox.getTranslate(i),r=Math.abs(a.width-r.width)>1.5||Math.abs(a.height-r.height)>1.5),r},loadSlide:function(t){var e,o,i,a=this;if(!t.isLoading&&!t.isLoaded){switch(t.isLoading=!0,a.trigger("beforeLoad",t),e=t.type,o=t.$slide,o.off("refresh").trigger("onReset").addClass(t.opts.slideClass),e){case"image":a.setImage(t);break;case"iframe":a.setIframe(t);break;case"html":a.setContent(t,t.src||t.content);break;case"video":a.setContent(t,t.opts.video.tpl.replace("{{src}}",t.src).replace("{{format}}",t.opts.videoFormat||t.opts.video.format));break;case"inline":n(t.src).length?a.setContent(t,n(t.src)):a.setError(t);break;case"ajax":a.showLoading(t),i=n.ajax(n.extend({},t.opts.ajax.settings,{url:t.src,success:function(e,n){"success"===n&&a.setContent(t,e)},error:function(e,n){e&&"abort"!==n&&a.setError(t)}})),o.one("onReset",function(){i.abort()});break;default:a.setError(t)}return!0}},setImage:function(e){var o,i,a,s,r,c=this,l=e.opts.srcset||e.opts.image.srcset;if(e.timouts=setTimeout(function(){var t=e.$image;!e.isLoading||t&&t.length&&t[0].complete||e.hasError||c.showLoading(e)},350),l){s=t.devicePixelRatio||1,r=t.innerWidth*s,a=l.split(",").map(function(t){var e={};return t.trim().split(/\s+/).forEach(function(t,n){var o=parseInt(t.substring(0,t.length-1),10);return 0===n?e.url=t:void(o&&(e.value=o,e.postfix=t[t.length-1]))}),e}),a.sort(function(t,e){return t.value-e.value});for(var d=0;d<a.length;d++){var u=a[d];if("w"===u.postfix&&u.value>=r||"x"===u.postfix&&u.value>=s){i=u;break}}!i&&a.length&&(i=a[a.length-1]),i&&(e.src=i.url,e.width&&e.height&&"w"==i.postfix&&(e.height=e.width/e.height*i.value,e.width=i.value),e.opts.srcset=l)}e.$content=n('<div class="fancybox-content"></div>').addClass("fancybox-is-hidden").appendTo(e.$slide.addClass("fancybox-slide--image")),o=e.opts.thumb||!(!e.opts.$thumb||!e.opts.$thumb.length)&&e.opts.$thumb.attr("src"),e.opts.preload!==!1&&e.opts.width&&e.opts.height&&o&&(e.width=e.opts.width,e.height=e.opts.height,e.$ghost=n("<img />").one("error",function(){n(this).remove(),e.$ghost=null}).one("load",function(){c.afterLoad(e)}).addClass("fancybox-image").appendTo(e.$content).attr("src",o)),c.setBigImage(e)},setBigImage:function(t){var e=this,o=n("<img />");t.$image=o.one("error",function(){e.setError(t)}).one("load",function(){var n;t.$ghost||(e.resolveImageSlideSize(t,this.naturalWidth,this.naturalHeight),e.afterLoad(t)),t.timouts&&(clearTimeout(t.timouts),t.timouts=null),e.isClosing||(t.opts.srcset&&(n=t.opts.sizes,n&&"auto"!==n||(n=(t.width/t.height>1&&s.width()/s.height()>1?"100":Math.round(t.width/t.height*100))+"vw"),o.attr("sizes",n).attr("srcset",t.opts.srcset)),t.$ghost&&setTimeout(function(){t.$ghost&&!e.isClosing&&t.$ghost.hide()},Math.min(300,Math.max(1e3,t.height/1600))),e.hideLoading(t))}).addClass("fancybox-image").attr("src",t.src).appendTo(t.$content),(o[0].complete||"complete"==o[0].readyState)&&o[0].naturalWidth&&o[0].naturalHeight?o.trigger("load"):o[0].error&&o.trigger("error")},resolveImageSlideSize:function(t,e,n){var o=parseInt(t.opts.width,10),i=parseInt(t.opts.height,10);t.width=e,t.height=n,o>0&&(t.width=o,t.height=Math.floor(o*n/e)),i>0&&(t.width=Math.floor(i*e/n),t.height=i)},setIframe:function(t){var e,i=this,a=t.opts.iframe,s=t.$slide;t.$content=n('<div class="fancybox-content'+(a.preload?" fancybox-is-hidden":"")+'"></div>').css(a.css).appendTo(s),s.addClass("fancybox-slide--"+t.contentType),t.$iframe=e=n(a.tpl.replace(/\{rnd\}/g,(new Date).getTime())).attr(a.attr).appendTo(t.$content),a.preload?(i.showLoading(t),e.on("load.fb error.fb",function(e){this.isReady=1,t.$slide.trigger("refresh"),i.afterLoad(t)}),s.on("refresh.fb",function(){var n,i,r=t.$content,c=a.css.width,l=a.css.height;if(1===e[0].isReady){try{n=e.contents(),i=n.find("body")}catch(t){}i&&i.length&&i.children().length&&(s.css("overflow","visible"),r.css({width:"100%",height:""}),c===o&&(c=Math.ceil(Math.max(i[0].clientWidth,i.outerWidth(!0)))),c&&r.width(c),l===o&&(l=Math.ceil(Math.max(i[0].clientHeight,i.outerHeight(!0)))),l&&r.height(l),s.css("overflow","auto")),r.removeClass("fancybox-is-hidden")}})):this.afterLoad(t),e.attr("src",t.src),s.one("onReset",function(){try{n(this).find("iframe").hide().unbind().attr("src","//about:blank")}catch(t){}n(this).off("refresh.fb").empty(),t.isLoaded=!1})},setContent:function(t,e){var o=this;o.isClosing||(o.hideLoading(t),t.$content&&n.fancybox.stop(t.$content),t.$slide.empty(),l(e)&&e.parent().length?(e.hasClass("fancybox-content")&&e.parent(".fancybox-slide--html").trigger("onReset"),t.$placeholder=n("<div>").hide().insertAfter(e),e.css("display","inline-block")):t.hasError||("string"===n.type(e)&&(e=n("<div>").append(n.trim(e)).contents()),t.opts.filter&&(e=n("<div>").html(e).find(t.opts.filter))),t.$slide.one("onReset",function(){n(this).find("video,audio").trigger("pause"),t.$placeholder&&(t.$placeholder.after(e.removeClass("fancybox-content").hide()).remove(),t.$placeholder=null),t.$smallBtn&&(t.$smallBtn.remove(),t.$smallBtn=null),t.hasError||(n(this).empty(),t.isLoaded=!1,t.isRevealed=!1)}),n(e).appendTo(t.$slide),n(e).is("video,audio")&&(n(e).addClass("fancybox-video"),n(e).wrap("<div></div>"),t.contentType="video",t.opts.width=t.opts.width||n(e).attr("width"),t.opts.height=t.opts.height||n(e).attr("height")),t.$content=t.$slide.children().filter("div,form,main,video,audio,article,.fancybox-content").first(),t.$content.siblings().hide(),t.$content.length||(t.$content=t.$slide.wrapInner("<div></div>").children().first()),t.$content.addClass("fancybox-content"),t.$slide.addClass("fancybox-slide--"+t.contentType),this.afterLoad(t))},setError:function(t){t.hasError=!0,t.$slide.trigger("onReset").removeClass("fancybox-slide--"+t.contentType).addClass("fancybox-slide--error"),t.contentType="html",this.setContent(t,this.translate(t,t.opts.errorTpl)),t.pos===this.currPos&&(this.isAnimating=!1)},showLoading:function(t){var e=this;t=t||e.current,t&&!t.$spinner&&(t.$spinner=n(e.translate(e,e.opts.spinnerTpl)).appendTo(t.$slide))},hideLoading:function(t){var e=this;t=t||e.current,t&&t.$spinner&&(t.$spinner.remove(),delete t.$spinner)},afterLoad:function(t){var e=this;e.isClosing||(t.isLoading=!1,t.isLoaded=!0,e.trigger("afterLoad",t),e.hideLoading(t),t.pos===e.currPos&&e.updateCursor(),!t.opts.smallBtn||t.$smallBtn&&t.$smallBtn.length||(t.$smallBtn=n(e.translate(t,t.opts.btnTpl.smallBtn)).appendTo(t.$content)),t.opts.protect&&t.$content&&!t.hasError&&(t.$content.on("contextmenu.fb",function(t){return 2==t.button&&t.preventDefault(),!0}),"image"===t.type&&n('<div class="fancybox-spaceball"></div>').appendTo(t.$content)),e.revealContent(t))},revealContent:function(t){var e,i,a,s,r=this,c=t.$slide,l=!1,d=!1,u=r.isMoved(t),p=t.isRevealed;if(!u||!p){if(t.isRevealed=!0,e=t.opts[r.firstRun?"animationEffect":"transitionEffect"],a=t.opts[r.firstRun?"animationDuration":"transitionDuration"],a=parseInt(t.forcedDuration===o?a:t.forcedDuration,10),t.pos===r.currPos&&(t.isComplete?e=!1:r.isAnimating=!0),!u&&t.pos===r.currPos&&a||(e=!1),"zoom"===e&&(t.pos===r.currPos&&a&&"image"===t.type&&!t.hasError&&(d=r.getThumbPos(t))?l=r.getFitPos(t):e="fade"),"zoom"===e)return l.scaleX=l.width/d.width,l.scaleY=l.height/d.height,s=t.opts.zoomOpacity,"auto"==s&&(s=Math.abs(t.width/t.height-d.width/d.height)>.1),s&&(d.opacity=.1,l.opacity=1),n.fancybox.setTranslate(t.$content.removeClass("fancybox-is-hidden"),d),f(t.$content),void n.fancybox.animate(t.$content,l,a,function(){r.isAnimating=!1,r.complete()});if(r.updateSlide(t),!e)return f(c),p||t.$content.removeClass("fancybox-is-hidden").hide().fadeIn("fast"),void(t.pos===r.currPos&&r.complete());n.fancybox.stop(c),i="fancybox-animated fancybox-slide--"+(t.pos>=r.prevPos?"next":"previous")+" fancybox-fx-"+e,c.removeAttr("style").removeClass("fancybox-slide--current fancybox-slide--next fancybox-slide--previous").addClass(i),t.$content.removeClass("fancybox-is-hidden"),f(c),n.fancybox.animate(c,"fancybox-slide--current",a,function(){c.removeClass(i).removeAttr("style"),t.pos===r.currPos&&r.complete()},!0)}},getThumbPos:function(o){var i,a=this,s=!1,r=o.opts.$thumb,c=r&&r.length&&r[0].ownerDocument===e?r.offset():0,l=function(e){for(var o,i=e[0],a=i.getBoundingClientRect(),s=[];null!==i.parentElement;)"hidden"!==n(i.parentElement).css("overflow")&&"auto"!==n(i.parentElement).css("overflow")||s.push(i.parentElement.getBoundingClientRect()),i=i.parentElement;return o=s.every(function(t){var e=Math.min(a.right,t.right)-Math.max(a.left,t.left),n=Math.min(a.bottom,t.bottom)-Math.max(a.top,t.top);return e>0&&n>0}),o&&a.bottom>0&&a.right>0&&a.left<n(t).width()&&a.top<n(t).height()};return c&&l(r)&&(i=a.$refs.stage.offset(),s={top:c.top-i.top+parseFloat(r.css("border-top-width")||0),left:c.left-i.left+parseFloat(r.css("border-left-width")||0),width:r.width(),height:r.height(),scaleX:1,scaleY:1}),s},complete:function(){var t,e=this,o=e.current,i={};!e.isMoved()&&o.isLoaded&&(o.isComplete||(o.isComplete=!0,o.$slide.siblings().trigger("onReset"),e.preload("inline"),f(o.$slide),o.$slide.addClass("fancybox-slide--complete"),n.each(e.slides,function(t,o){o.pos>=e.currPos-1&&o.pos<=e.currPos+1?i[o.pos]=o:o&&(n.fancybox.stop(o.$slide),o.$slide.off().remove())}),e.slides=i),e.isAnimating=!1,e.updateCursor(),e.trigger("afterShow"),o.opts.video.autoStart&&o.$slide.find("video,audio").filter(":visible:first").trigger("play"),o.opts.autoFocus&&"html"===o.contentType&&(t=o.$content.find("input[autofocus]:enabled:visible:first"),t.length?t.trigger("focus"):e.focus(null,!0)),o.$slide.scrollTop(0).scrollLeft(0))},preload:function(t){var e=this,n=e.slides[e.currPos+1],o=e.slides[e.currPos-1];o&&o.type===t&&e.loadSlide(o),n&&n.type===t&&e.loadSlide(n)},focus:function(t,o){var i,a,s=this,r=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","[contenteditable]",'[tabindex]:not([tabindex^="-"])'].join(",");s.isClosing||(i=!t&&s.current&&s.current.isComplete?s.current.$slide.find("*:visible"+(o?":not(.fancybox-close-small)":"")):s.$refs.container.find("*:visible"),i=i.filter(r).filter(function(){return"hidden"!==n(this).css("visibility")&&!n(this).hasClass("disabled")}),i.length?(a=i.index(e.activeElement),t&&t.shiftKey?(a<0||0==a)&&(t.preventDefault(),i.eq(i.length-1).trigger("focus")):(a<0||a==i.length-1)&&(t&&t.preventDefault(),i.eq(0).trigger("focus"))):s.$refs.container.trigger("focus"))},activate:function(){var t=this;n(".fancybox-container").each(function(){var e=n(this).data("FancyBox");e&&e.id!==t.id&&!e.isClosing&&(e.trigger("onDeactivate"),e.removeEvents(),e.isVisible=!1)}),t.isVisible=!0,(t.current||t.isIdle)&&(t.update(),t.updateControls()),t.trigger("onActivate"),t.addEvents()},close:function(t,e){var o,i,a,s,r,c,l,p=this,h=p.current,g=function(){p.cleanUp(t)};return!p.isClosing&&(p.isClosing=!0,p.trigger("beforeClose",t)===!1?(p.isClosing=!1,d(function(){p.update()}),!1):(p.removeEvents(),h.timouts&&clearTimeout(h.timouts),a=h.$content,o=h.opts.animationEffect,i=n.isNumeric(e)?e:o?h.opts.animationDuration:0,h.$slide.off(u).removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"),h.$slide.siblings().trigger("onReset").remove(),i&&p.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing"),p.hideLoading(h),p.hideControls(),p.updateCursor(),"zoom"!==o||t!==!0&&a&&i&&"image"===h.type&&!h.hasError&&(l=p.getThumbPos(h))||(o="fade"),"zoom"===o?(n.fancybox.stop(a),s=n.fancybox.getTranslate(a),c={top:s.top,left:s.left,scaleX:s.width/l.width,scaleY:s.height/l.height,width:l.width,height:l.height},r=h.opts.zoomOpacity,"auto"==r&&(r=Math.abs(h.width/h.height-l.width/l.height)>.1),r&&(l.opacity=0),n.fancybox.setTranslate(a,c),f(a),n.fancybox.animate(a,l,i,g),!0):(o&&i?t===!0?setTimeout(g,i):n.fancybox.animate(h.$slide.removeClass("fancybox-slide--current"),"fancybox-animated fancybox-slide--previous fancybox-fx-"+o,i,g):g(),!0)))},cleanUp:function(e){var o,i,a,s=this,r=s.current.opts.$orig;s.current.$slide.trigger("onReset"),s.$refs.container.empty().remove(),s.trigger("afterClose",e),s.current.opts.backFocus&&(r&&r.length&&r.is(":visible")||(r=s.$trigger),r&&r.length&&(i=t.scrollX,a=t.scrollY,r.trigger("focus"),n("html, body").scrollTop(a).scrollLeft(i))),s.current=null,o=n.fancybox.getInstance(),o?o.activate():(n("body").removeClass("fancybox-active compensate-for-scrollbar"),n("#fancybox-style-noscroll").remove())},trigger:function(t,e){var o,i=Array.prototype.slice.call(arguments,1),a=this,s=e&&e.opts?e:a.current;return s?i.unshift(s):s=a,i.unshift(a),n.isFunction(s.opts[t])&&(o=s.opts[t].apply(s,i)),o===!1?o:void("afterClose"!==t&&a.$refs?a.$refs.container.trigger(t+".fb",i):r.trigger(t+".fb",i))},updateControls:function(){var t=this,o=t.current,i=o.index,a=o.opts.caption,s=t.$refs.container,r=t.$refs.caption;o.$slide.trigger("refresh"),t.$caption=a&&a.length?r.html(a):null,t.isHiddenControls||t.isIdle||t.showControls(),s.find("[data-fancybox-count]").html(t.group.length),s.find("[data-fancybox-index]").html(i+1),s.find("[data-fancybox-prev]").prop("disabled",!o.opts.loop&&i<=0),s.find("[data-fancybox-next]").prop("disabled",!o.opts.loop&&i>=t.group.length-1),"image"===o.type?s.find("[data-fancybox-zoom]").show().end().find("[data-fancybox-download]").attr("href",o.opts.image.src||o.src).show():o.opts.toolbar&&s.find("[data-fancybox-download],[data-fancybox-zoom]").hide(),n(e.activeElement).is(":hidden,[disabled]")&&t.$refs.container.trigger("focus")},hideControls:function(){this.isHiddenControls=!0,this.$refs.container.removeClass("fancybox-show-infobar fancybox-show-toolbar fancybox-show-caption fancybox-show-nav")},showControls:function(){var t=this,e=t.current?t.current.opts:t.opts,n=t.$refs.container;t.isHiddenControls=!1,
    t.idleSecondsCounter=0,n.toggleClass("fancybox-show-toolbar",!(!e.toolbar||!e.buttons)).toggleClass("fancybox-show-infobar",!!(e.infobar&&t.group.length>1)).toggleClass("fancybox-show-caption",!!t.$caption).toggleClass("fancybox-show-nav",!!(e.arrows&&t.group.length>1)).toggleClass("fancybox-is-modal",!!e.modal)},toggleControls:function(){this.isHiddenControls?this.showControls():this.hideControls()}}),n.fancybox={version:"3.4.1",defaults:a,getInstance:function(t){var e=n('.fancybox-container:not(".fancybox-is-closing"):last').data("FancyBox"),o=Array.prototype.slice.call(arguments,1);return e instanceof h&&("string"===n.type(t)?e[t].apply(e,o):"function"===n.type(t)&&t.apply(e,o),e)},open:function(t,e,n){return new h(t,e,n)},close:function(t){var e=this.getInstance();e&&(e.close(),t===!0&&this.close(t))},destroy:function(){this.close(!0),r.add("body").off("click.fb-start","**")},isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),use3d:function(){var n=e.createElement("div");return t.getComputedStyle&&t.getComputedStyle(n)&&t.getComputedStyle(n).getPropertyValue("transform")&&!(e.documentMode&&e.documentMode<11)}(),getTranslate:function(t){var e;return!(!t||!t.length)&&(e=t[0].getBoundingClientRect(),{top:e.top||0,left:e.left||0,width:e.width,height:e.height,opacity:parseFloat(t.css("opacity"))})},setTranslate:function(t,e){var n="",i={};if(t&&e)return e.left===o&&e.top===o||(n=(e.left===o?t.position().left:e.left)+"px, "+(e.top===o?t.position().top:e.top)+"px",n=this.use3d?"translate3d("+n+", 0px)":"translate("+n+")"),e.scaleX!==o&&e.scaleY!==o&&(n=(n.length?n+" ":"")+"scale("+e.scaleX+", "+e.scaleY+")"),n.length&&(i.transform=n),e.opacity!==o&&(i.opacity=e.opacity),e.width!==o&&(i.width=e.width),e.height!==o&&(i.height=e.height),t.css(i)},animate:function(t,e,i,a,s){var r,c=!1;n.isFunction(i)&&(a=i,i=null),n.isPlainObject(e)||t.removeAttr("style"),n.fancybox.stop(t),t.on(u,function(o){(!o||!o.originalEvent||t.is(o.originalEvent.target)&&"z-index"!=o.originalEvent.propertyName)&&(n.fancybox.stop(t),c&&n.fancybox.setTranslate(t,c),n.isNumeric(i)&&t.css("transition-duration",""),n.isPlainObject(e)?s===!1&&t.removeAttr("style"):s!==!0&&t.removeClass(e),n.isFunction(a)&&a(o))}),n.isNumeric(i)&&t.css("transition-duration",i+"ms"),n.isPlainObject(e)?(e.scaleX!==o&&e.scaleY!==o&&(r=n.fancybox.getTranslate(t),c=n.extend({},e,{width:r.width*e.scaleX,height:r.height*e.scaleY,scaleX:1,scaleY:1}),delete e.width,delete e.height,t.parent().hasClass("fancybox-slide--image")&&t.parent().addClass("fancybox-is-scaling")),n.fancybox.setTranslate(t,e)):t.addClass(e),t.data("timer",setTimeout(function(){t.trigger("transitionend")},i+16))},stop:function(t,e){t&&t.length&&(clearTimeout(t.data("timer")),e&&t.trigger(u),t.off(u).css("transition-duration",""),t.parent().removeClass("fancybox-is-scaling"))}},n.fn.fancybox=function(t){var e;return t=t||{},e=t.selector||!1,e?n("body").off("click.fb-start",e).on("click.fb-start",e,{options:t},i):this.off("click.fb-start").on("click.fb-start",{items:this,options:t},i),this},r.on("click.fb-start","[data-fancybox]",i),r.on("click.fb-start","[data-fancybox-trigger]",function(t){n('[data-fancybox="'+n(this).attr("data-fancybox-trigger")+'"]').eq(n(this).attr("data-fancybox-index")||0).trigger("click.fb-start",{$trigger:n(this)})}),function(){var t=".fancybox-button",e="fancybox-focus",o=null;r.on("mousedown mouseup focus blur",t,function(i){switch(i.type){case"mousedown":o=n(this);break;case"mouseup":o=null;break;case"focusin":n(t).removeClass(e),n(this).is(o)||n(this).is("[disabled]")||n(this).addClass(e);break;case"focusout":n(t).removeClass(e)}})}()}}(window,document,jQuery),function(t){"use strict";var e=function(e,n,o){if(e)return o=o||"","object"===t.type(o)&&(o=t.param(o,!0)),t.each(n,function(t,n){e=e.replace("$"+t,n||"")}),o.length&&(e+=(e.indexOf("?")>0?"&":"?")+o),e},n={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"//www.youtube-nocookie.com/embed/$4",thumb:"//img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1,api:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},gmap_place:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function(t){return"//maps.google."+t[2]+"/?ll="+(t[9]?t[9]+"&z="+Math.floor(t[10])+(t[12]?t[12].replace(/^\//,"&"):""):t[12]+"").replace(/\?/,"&")+"&output="+(t[12]&&t[12].indexOf("layer=c")>0?"svembed":"embed")}},gmap_search:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,type:"iframe",url:function(t){return"//maps.google."+t[2]+"/maps?q="+t[5].replace("query=","q=").replace("api=1","")+"&output=embed"}}};t(document).on("objectNeedsType.fb",function(o,i,a){var s,r,c,l,d,u,f,p=a.src||"",h=!1;s=t.extend(!0,{},n,a.opts.media),t.each(s,function(n,o){if(c=p.match(o.matcher)){if(h=o.type,f=n,u={},o.paramPlace&&c[o.paramPlace]){d=c[o.paramPlace],"?"==d[0]&&(d=d.substring(1)),d=d.split("&");for(var i=0;i<d.length;++i){var s=d[i].split("=",2);2==s.length&&(u[s[0]]=decodeURIComponent(s[1].replace(/\+/g," ")))}}return l=t.extend(!0,{},o.params,a.opts[n],u),p="function"===t.type(o.url)?o.url.call(this,c,l,a):e(o.url,c,l),r="function"===t.type(o.thumb)?o.thumb.call(this,c,l,a):e(o.thumb,c),"youtube"===n?p=p.replace(/&t=((\d+)m)?(\d+)s/,function(t,e,n,o){return"&start="+((n?60*parseInt(n,10):0)+parseInt(o,10))}):"vimeo"===n&&(p=p.replace("&%23","#")),!1}}),h?(a.opts.thumb||a.opts.$thumb&&a.opts.$thumb.length||(a.opts.thumb=r),"iframe"===h&&(a.opts=t.extend(!0,a.opts,{iframe:{preload:!1,attr:{scrolling:"no"}}})),t.extend(a,{type:h,src:p,origSrc:a.src,contentSource:f,contentType:"image"===h?"image":"gmap_place"==f||"gmap_search"==f?"map":"video"})):p&&(a.type=a.opts.defaultType)})}(jQuery),function(t,e,n){"use strict";var o=function(){return t.requestAnimationFrame||t.webkitRequestAnimationFrame||t.mozRequestAnimationFrame||t.oRequestAnimationFrame||function(e){return t.setTimeout(e,1e3/60)}}(),i=function(){return t.cancelAnimationFrame||t.webkitCancelAnimationFrame||t.mozCancelAnimationFrame||t.oCancelAnimationFrame||function(e){t.clearTimeout(e)}}(),a=function(e){var n=[];e=e.originalEvent||e||t.e,e=e.touches&&e.touches.length?e.touches:e.changedTouches&&e.changedTouches.length?e.changedTouches:[e];for(var o in e)e[o].pageX?n.push({x:e[o].pageX,y:e[o].pageY}):e[o].clientX&&n.push({x:e[o].clientX,y:e[o].clientY});return n},s=function(t,e,n){return e&&t?"x"===n?t.x-e.x:"y"===n?t.y-e.y:Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2)):0},r=function(t){if(t.is('a,area,button,[role="button"],input,label,select,summary,textarea,video,audio')||n.isFunction(t.get(0).onclick)||t.data("selectable"))return!0;for(var e=0,o=t[0].attributes,i=o.length;e<i;e++)if("data-fancybox-"===o[e].nodeName.substr(0,14))return!0;return!1},c=function(e){var n=t.getComputedStyle(e)["overflow-y"],o=t.getComputedStyle(e)["overflow-x"],i=("scroll"===n||"auto"===n)&&e.scrollHeight>e.clientHeight,a=("scroll"===o||"auto"===o)&&e.scrollWidth>e.clientWidth;return i||a},l=function(t){for(var e=!1;;){if(e=c(t.get(0)))break;if(t=t.parent(),!t.length||t.hasClass("fancybox-stage")||t.is("body"))break}return e},d=function(t){var e=this;e.instance=t,e.$bg=t.$refs.bg,e.$stage=t.$refs.stage,e.$container=t.$refs.container,e.destroy(),e.$container.on("touchstart.fb.touch mousedown.fb.touch",n.proxy(e,"ontouchstart"))};d.prototype.destroy=function(){this.$container.off(".fb.touch")},d.prototype.ontouchstart=function(o){var i=this,c=n(o.target),d=i.instance,u=d.current,f=u.$slide,p=u.$content,h="touchstart"==o.type;if(h&&i.$container.off("mousedown.fb.touch"),(!o.originalEvent||2!=o.originalEvent.button)&&f.length&&c.length&&!r(c)&&!r(c.parent())&&(c.is("img")||!(o.originalEvent.clientX>c[0].clientWidth+c.offset().left))){if(!u||d.isAnimating||d.isClosing)return o.stopPropagation(),void o.preventDefault();if(i.realPoints=i.startPoints=a(o),i.startPoints.length){if(u.touch&&o.stopPropagation(),i.startEvent=o,i.canTap=!0,i.$target=c,i.$content=p,i.opts=u.opts.touch,i.isPanning=!1,i.isSwiping=!1,i.isZooming=!1,i.isScrolling=!1,i.canPan=d.canPan(),i.startTime=(new Date).getTime(),i.distanceX=i.distanceY=i.distance=0,i.canvasWidth=Math.round(f[0].clientWidth),i.canvasHeight=Math.round(f[0].clientHeight),i.contentLastPos=null,i.contentStartPos=n.fancybox.getTranslate(i.$content)||{top:0,left:0},i.sliderStartPos=i.sliderLastPos||n.fancybox.getTranslate(f),i.stagePos=n.fancybox.getTranslate(d.$refs.stage),i.sliderStartPos.top-=i.stagePos.top,i.sliderStartPos.left-=i.stagePos.left,i.contentStartPos.top-=i.stagePos.top,i.contentStartPos.left-=i.stagePos.left,n(e).off(".fb.touch").on(h?"touchend.fb.touch touchcancel.fb.touch":"mouseup.fb.touch mouseleave.fb.touch",n.proxy(i,"ontouchend")).on(h?"touchmove.fb.touch":"mousemove.fb.touch",n.proxy(i,"ontouchmove")),n.fancybox.isMobile&&e.addEventListener("scroll",i.onscroll,!0),!i.opts&&!i.canPan||!c.is(i.$stage)&&!i.$stage.find(c).length)return void(c.is(".fancybox-image")&&o.preventDefault());i.isScrollable=l(c)||l(c.parent()),n.fancybox.isMobile&&i.isScrollable||o.preventDefault(),(1===i.startPoints.length||u.hasError)&&(i.canPan?(n.fancybox.stop(i.$content),i.$content.css("transition-duration",""),i.isPanning=!0):i.isSwiping=!0,i.$container.addClass("fancybox-is-grabbing")),2===i.startPoints.length&&"image"===u.type&&(u.isLoaded||u.$ghost)&&(i.canTap=!1,i.isSwiping=!1,i.isPanning=!1,i.isZooming=!0,n.fancybox.stop(i.$content),i.$content.css("transition-duration",""),i.centerPointStartX=.5*(i.startPoints[0].x+i.startPoints[1].x)-n(t).scrollLeft(),i.centerPointStartY=.5*(i.startPoints[0].y+i.startPoints[1].y)-n(t).scrollTop(),i.percentageOfImageAtPinchPointX=(i.centerPointStartX-i.contentStartPos.left)/i.contentStartPos.width,i.percentageOfImageAtPinchPointY=(i.centerPointStartY-i.contentStartPos.top)/i.contentStartPos.height,i.startDistanceBetweenFingers=s(i.startPoints[0],i.startPoints[1]))}}},d.prototype.onscroll=function(t){var n=this;n.isScrolling=!0,e.removeEventListener("scroll",n.onscroll,!0)},d.prototype.ontouchmove=function(t){var e=this;return void 0!==t.originalEvent.buttons&&0===t.originalEvent.buttons?void e.ontouchend(t):e.isScrolling?void(e.canTap=!1):(e.newPoints=a(t),void((e.opts||e.canPan)&&e.newPoints.length&&e.newPoints.length&&(e.isSwiping&&e.isSwiping===!0||t.preventDefault(),e.distanceX=s(e.newPoints[0],e.startPoints[0],"x"),e.distanceY=s(e.newPoints[0],e.startPoints[0],"y"),e.distance=s(e.newPoints[0],e.startPoints[0]),e.distance>0&&(e.isSwiping?e.onSwipe(t):e.isPanning?e.onPan():e.isZooming&&e.onZoom()))))},d.prototype.onSwipe=function(e){var a,s=this,r=s.isSwiping,c=s.sliderStartPos.left||0;if(r!==!0)"x"==r&&(s.distanceX>0&&(s.instance.group.length<2||0===s.instance.current.index&&!s.instance.current.opts.loop)?c+=Math.pow(s.distanceX,.8):s.distanceX<0&&(s.instance.group.length<2||s.instance.current.index===s.instance.group.length-1&&!s.instance.current.opts.loop)?c-=Math.pow(-s.distanceX,.8):c+=s.distanceX),s.sliderLastPos={top:"x"==r?0:s.sliderStartPos.top+s.distanceY,left:c},s.requestId&&(i(s.requestId),s.requestId=null),s.requestId=o(function(){s.sliderLastPos&&(n.each(s.instance.slides,function(t,e){var o=e.pos-s.instance.currPos;n.fancybox.setTranslate(e.$slide,{top:s.sliderLastPos.top,left:s.sliderLastPos.left+o*s.canvasWidth+o*e.opts.gutter})}),s.$container.addClass("fancybox-is-sliding"))});else if(Math.abs(s.distance)>10){if(s.canTap=!1,s.instance.group.length<2&&s.opts.vertical?s.isSwiping="y":s.instance.isDragging||s.opts.vertical===!1||"auto"===s.opts.vertical&&n(t).width()>800?s.isSwiping="x":(a=Math.abs(180*Math.atan2(s.distanceY,s.distanceX)/Math.PI),s.isSwiping=a>45&&a<135?"y":"x"),s.canTap=!1,"y"===s.isSwiping&&n.fancybox.isMobile&&s.isScrollable)return void(s.isScrolling=!0);s.instance.isDragging=s.isSwiping,s.startPoints=s.newPoints,n.each(s.instance.slides,function(t,e){n.fancybox.stop(e.$slide),e.$slide.css("transition-duration",""),e.inTransition=!1,e.pos===s.instance.current.pos&&(s.sliderStartPos.left=n.fancybox.getTranslate(e.$slide).left-n.fancybox.getTranslate(s.instance.$refs.stage).left)}),s.instance.SlideShow&&s.instance.SlideShow.isActive&&s.instance.SlideShow.stop()}},d.prototype.onPan=function(){var t=this;return s(t.newPoints[0],t.realPoints[0])<(n.fancybox.isMobile?10:5)?void(t.startPoints=t.newPoints):(t.canTap=!1,t.contentLastPos=t.limitMovement(),t.requestId&&(i(t.requestId),t.requestId=null),void(t.requestId=o(function(){n.fancybox.setTranslate(t.$content,t.contentLastPos)})))},d.prototype.limitMovement=function(){var t,e,n,o,i,a,s=this,r=s.canvasWidth,c=s.canvasHeight,l=s.distanceX,d=s.distanceY,u=s.contentStartPos,f=u.left,p=u.top,h=u.width,g=u.height;return i=h>r?f+l:f,a=p+d,t=Math.max(0,.5*r-.5*h),e=Math.max(0,.5*c-.5*g),n=Math.min(r-h,.5*r-.5*h),o=Math.min(c-g,.5*c-.5*g),l>0&&i>t&&(i=t-1+Math.pow(-t+f+l,.8)||0),l<0&&i<n&&(i=n+1-Math.pow(n-f-l,.8)||0),d>0&&a>e&&(a=e-1+Math.pow(-e+p+d,.8)||0),d<0&&a<o&&(a=o+1-Math.pow(o-p-d,.8)||0),{top:a,left:i}},d.prototype.limitPosition=function(t,e,n,o){var i=this,a=i.canvasWidth,s=i.canvasHeight;return n>a?(t=t>0?0:t,t=t<a-n?a-n:t):t=Math.max(0,a/2-n/2),o>s?(e=e>0?0:e,e=e<s-o?s-o:e):e=Math.max(0,s/2-o/2),{top:e,left:t}},d.prototype.onZoom=function(){var e=this,a=e.contentStartPos,r=a.width,c=a.height,l=a.left,d=a.top,u=s(e.newPoints[0],e.newPoints[1]),f=u/e.startDistanceBetweenFingers,p=Math.floor(r*f),h=Math.floor(c*f),g=(r-p)*e.percentageOfImageAtPinchPointX,b=(c-h)*e.percentageOfImageAtPinchPointY,m=(e.newPoints[0].x+e.newPoints[1].x)/2-n(t).scrollLeft(),v=(e.newPoints[0].y+e.newPoints[1].y)/2-n(t).scrollTop(),y=m-e.centerPointStartX,x=v-e.centerPointStartY,w=l+(g+y),$=d+(b+x),S={top:$,left:w,scaleX:f,scaleY:f};e.canTap=!1,e.newWidth=p,e.newHeight=h,e.contentLastPos=S,e.requestId&&(i(e.requestId),e.requestId=null),e.requestId=o(function(){n.fancybox.setTranslate(e.$content,e.contentLastPos)})},d.prototype.ontouchend=function(t){var o=this,s=Math.max((new Date).getTime()-o.startTime,1),r=o.isSwiping,c=o.isPanning,l=o.isZooming,d=o.isScrolling;return o.endPoints=a(t),o.$container.removeClass("fancybox-is-grabbing"),n(e).off(".fb.touch"),e.removeEventListener("scroll",o.onscroll,!0),o.requestId&&(i(o.requestId),o.requestId=null),o.isSwiping=!1,o.isPanning=!1,o.isZooming=!1,o.isScrolling=!1,o.instance.isDragging=!1,o.canTap?o.onTap(t):(o.speed=366,o.velocityX=o.distanceX/s*.5,o.velocityY=o.distanceY/s*.5,o.speedX=Math.max(.5*o.speed,Math.min(1.5*o.speed,1/Math.abs(o.velocityX)*o.speed)),void(c?o.endPanning():l?o.endZooming():o.endSwiping(r,d)))},d.prototype.endSwiping=function(t,e){var o=this,i=!1,a=o.instance.group.length;o.sliderLastPos=null,"y"==t&&!e&&Math.abs(o.distanceY)>50?(n.fancybox.animate(o.instance.current.$slide,{top:o.sliderStartPos.top+o.distanceY+150*o.velocityY,opacity:0},200),i=o.instance.close(!0,200)):"x"==t&&o.distanceX>50&&a>1?i=o.instance.previous(o.speedX):"x"==t&&o.distanceX<-50&&a>1&&(i=o.instance.next(o.speedX)),i!==!1||"x"!=t&&"y"!=t||(e||a<2?o.instance.centerSlide(o.instance.current,150):o.instance.jumpTo(o.instance.current.index)),o.$container.removeClass("fancybox-is-sliding")},d.prototype.endPanning=function(){var t,e,o,i=this;i.contentLastPos&&(i.opts.momentum===!1?(t=i.contentLastPos.left,e=i.contentLastPos.top):(t=i.contentLastPos.left+i.velocityX*i.speed,e=i.contentLastPos.top+i.velocityY*i.speed),o=i.limitPosition(t,e,i.contentStartPos.width,i.contentStartPos.height),o.width=i.contentStartPos.width,o.height=i.contentStartPos.height,n.fancybox.animate(i.$content,o,330))},d.prototype.endZooming=function(){var t,e,o,i,a=this,s=a.instance.current,r=a.newWidth,c=a.newHeight;a.contentLastPos&&(t=a.contentLastPos.left,e=a.contentLastPos.top,i={top:e,left:t,width:r,height:c,scaleX:1,scaleY:1},n.fancybox.setTranslate(a.$content,i),r<a.canvasWidth&&c<a.canvasHeight?a.instance.scaleToFit(150):r>s.width||c>s.height?a.instance.scaleToActual(a.centerPointStartX,a.centerPointStartY,150):(o=a.limitPosition(t,e,r,c),n.fancybox.setTranslate(a.$content,n.fancybox.getTranslate(a.$content)),n.fancybox.animate(a.$content,o,150)))},d.prototype.onTap=function(e){var o,i=this,s=n(e.target),r=i.instance,c=r.current,l=e&&a(e)||i.startPoints,d=l[0]?l[0].x-n(t).scrollLeft()-i.stagePos.left:0,u=l[0]?l[0].y-n(t).scrollTop()-i.stagePos.top:0,f=function(t){var o=c.opts[t];if(n.isFunction(o)&&(o=o.apply(r,[c,e])),o)switch(o){case"close":r.close(i.startEvent);break;case"toggleControls":r.toggleControls(!0);break;case"next":r.next();break;case"nextOrClose":r.group.length>1?r.next():r.close(i.startEvent);break;case"zoom":"image"==c.type&&(c.isLoaded||c.$ghost)&&(r.canPan()?r.scaleToFit():r.isScaledDown()?r.scaleToActual(d,u):r.group.length<2&&r.close(i.startEvent))}};if((!e.originalEvent||2!=e.originalEvent.button)&&(s.is("img")||!(d>s[0].clientWidth+s.offset().left))){if(s.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container"))o="Outside";else if(s.is(".fancybox-slide"))o="Slide";else{if(!r.current.$content||!r.current.$content.find(s).addBack().filter(s).length)return;o="Content"}if(i.tapped){if(clearTimeout(i.tapped),i.tapped=null,Math.abs(d-i.tapX)>50||Math.abs(u-i.tapY)>50)return this;f("dblclick"+o)}else i.tapX=d,i.tapY=u,c.opts["dblclick"+o]&&c.opts["dblclick"+o]!==c.opts["click"+o]?i.tapped=setTimeout(function(){i.tapped=null,f("click"+o)},500):f("click"+o);return this}},n(e).on("onActivate.fb",function(t,e){e&&!e.Guestures&&(e.Guestures=new d(e))})}(window,document,jQuery),function(t,e){"use strict";e.extend(!0,e.fancybox.defaults,{btnTpl:{slideShow:'<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M6.5 5.4v13.2l11-6.6z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8.33 5.75h2.2v12.5h-2.2V5.75zm5.15 0h2.2v12.5h-2.2V5.75z"/></svg></button>'},slideShow:{autoStart:!1,speed:3e3}});var n=function(t){this.instance=t,this.init()};e.extend(n.prototype,{timer:null,isActive:!1,$button:null,init:function(){var t=this;t.$button=t.instance.$refs.toolbar.find("[data-fancybox-play]").on("click",function(){t.toggle()}),(t.instance.group.length<2||!t.instance.group[t.instance.currIndex].opts.slideShow)&&t.$button.hide()},set:function(t){var e=this,n=e.instance,o=n.current,i=function(){e.isActive&&n.jumpTo((n.currIndex+1)%n.group.length)};o&&(t===!0||o.opts.loop||n.currIndex<n.group.length-1)?e.timer=setTimeout(function(){var t;e.isActive&&(t=o.$slide.find("video,audio").filter(":visible:first"),t.length?t.one("ended",i):i())},o.opts.slideShow.speed):(e.stop(),n.idleSecondsCounter=0,n.showControls())},clear:function(){var t=this;clearTimeout(t.timer),t.timer=null},start:function(){var t=this,e=t.instance.current;e&&(t.$button.attr("title",e.opts.i18n[e.opts.lang].PLAY_STOP).removeClass("fancybox-button--play").addClass("fancybox-button--pause"),t.isActive=!0,e.isComplete&&t.set(!0),t.instance.trigger("onSlideShowChange",!0))},stop:function(){var t=this,e=t.instance.current;t.clear(),t.$button.attr("title",e.opts.i18n[e.opts.lang].PLAY_START).removeClass("fancybox-button--pause").addClass("fancybox-button--play"),t.isActive=!1,t.instance.trigger("onSlideShowChange",!1)},toggle:function(){var t=this;t.isActive?t.stop():t.start()}}),e(t).on({"onInit.fb":function(t,e){e&&!e.SlideShow&&(e.SlideShow=new n(e))},"beforeShow.fb":function(t,e,n,o){var i=e&&e.SlideShow;o?i&&n.opts.slideShow.autoStart&&i.start():i&&i.isActive&&i.clear()},"afterShow.fb":function(t,e,n){var o=e&&e.SlideShow;o&&o.isActive&&o.set()},"afterKeydown.fb":function(n,o,i,a,s){var r=o&&o.SlideShow;!r||!i.opts.slideShow||80!==s&&32!==s||e(t.activeElement).is("button,a,input")||(a.preventDefault(),r.toggle())},"beforeClose.fb onDeactivate.fb":function(t,e){var n=e&&e.SlideShow;n&&n.stop()}}),e(t).on("visibilitychange",function(){var n=e.fancybox.getInstance(),o=n&&n.SlideShow;o&&o.isActive&&(t.hidden?o.clear():o.set())})}(document,jQuery),function(t,e){"use strict";var n=function(){for(var e=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],n={},o=0;o<e.length;o++){var i=e[o];if(i&&i[1]in t){for(var a=0;a<i.length;a++)n[e[0][a]]=i[a];return n}}return!1}();if(n){var o={request:function(e){e=e||t.documentElement,e[n.requestFullscreen](e.ALLOW_KEYBOARD_INPUT)},exit:function(){t[n.exitFullscreen]()},toggle:function(e){e=e||t.documentElement,this.isFullscreen()?this.exit():this.request(e)},isFullscreen:function(){return Boolean(t[n.fullscreenElement])},enabled:function(){return Boolean(t[n.fullscreenEnabled])}};e.extend(!0,e.fancybox.defaults,{btnTpl:{fullScreen:'<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fsenter" title="{{FULL_SCREEN}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5 16h3v3h2v-5H5zm3-8H5v2h5V5H8zm6 11h2v-3h3v-2h-5zm2-11V5h-2v5h5V8z"/></svg></button>'},fullScreen:{autoStart:!1}}),e(t).on(n.fullscreenchange,function(){var t=o.isFullscreen(),n=e.fancybox.getInstance();n&&(n.current&&"image"===n.current.type&&n.isAnimating&&(n.current.$content.css("transition","none"),n.isAnimating=!1,n.update(!0,!0,0)),n.trigger("onFullscreenChange",t),n.$refs.container.toggleClass("fancybox-is-fullscreen",t),n.$refs.toolbar.find("[data-fancybox-fullscreen]").toggleClass("fancybox-button--fsenter",!t).toggleClass("fancybox-button--fsexit",t))})}e(t).on({"onInit.fb":function(t,e){var i;return n?void(e&&e.group[e.currIndex].opts.fullScreen?(i=e.$refs.container,i.on("click.fb-fullscreen","[data-fancybox-fullscreen]",function(t){t.stopPropagation(),t.preventDefault(),o.toggle()}),e.opts.fullScreen&&e.opts.fullScreen.autoStart===!0&&o.request(),e.FullScreen=o):e&&e.$refs.toolbar.find("[data-fancybox-fullscreen]").hide()):void e.$refs.toolbar.find("[data-fancybox-fullscreen]").remove()},"afterKeydown.fb":function(t,e,n,o,i){e&&e.FullScreen&&70===i&&(o.preventDefault(),e.FullScreen.toggle())},"beforeClose.fb":function(t,e){e&&e.FullScreen&&e.$refs.container.hasClass("fancybox-is-fullscreen")&&o.exit()}})}(document,jQuery),function(t,e){"use strict";var n="fancybox-thumbs",o=n+"-active";e.fancybox.defaults=e.extend(!0,{btnTpl:{thumbs:'<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14.59 14.59h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76H5.65V5.65z"/></svg></button>'},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"}},e.fancybox.defaults);var i=function(t){this.init(t)};e.extend(i.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,isActive:!1,init:function(t){var e,n,o=this;o.instance=t,t.Thumbs=o,o.opts=t.group[t.currIndex].opts.thumbs,e=t.group[0],e=e.opts.thumb||!(!e.opts.$thumb||!e.opts.$thumb.length)&&e.opts.$thumb.attr("src"),t.group.length>1&&(n=t.group[1],n=n.opts.thumb||!(!n.opts.$thumb||!n.opts.$thumb.length)&&n.opts.$thumb.attr("src")),o.$button=t.$refs.toolbar.find("[data-fancybox-thumbs]"),o.opts&&e&&n?(o.$button.show().on("click",function(){o.toggle()}),o.isActive=!0):o.$button.hide()},create:function(){var t,o=this,i=o.instance,a=o.opts.parentEl,s=[];o.$grid||(o.$grid=e('<div class="'+n+" "+n+"-"+o.opts.axis+'"></div>').appendTo(i.$refs.container.find(a).addBack().filter(a)),o.$grid.on("click","a",function(){i.jumpTo(e(this).attr("data-index"))})),o.$list||(o.$list=e('<div class="'+n+'__list">').appendTo(o.$grid)),e.each(i.group,function(e,n){t=n.opts.thumb||(n.opts.$thumb?n.opts.$thumb.attr("src"):null),t||"image"!==n.type||(t=n.src),s.push('<a href="javascript:;" tabindex="0" data-index="'+e+'" '+(t&&t.length?' style="background-image:url('+t+')" />':"")+"></a>")}),o.$list[0].innerHTML=s.join(""),"x"===o.opts.axis&&o.$list.width(parseInt(o.$grid.css("padding-right"),10)+i.group.length*o.$list.children().eq(0).outerWidth(!0))},focus:function(t){var e,n,i=this,a=i.$list,s=i.$grid;i.instance.current&&(e=a.children().removeClass(o).filter('[data-index="'+i.instance.current.index+'"]').addClass(o),n=e.position(),"y"===i.opts.axis&&(n.top<0||n.top>a.height()-e.outerHeight())?a.stop().animate({scrollTop:a.scrollTop()+n.top},t):"x"===i.opts.axis&&(n.left<s.scrollLeft()||n.left>s.scrollLeft()+(s.width()-e.outerWidth()))&&a.parent().stop().animate({scrollLeft:n.left},t))},update:function(){var t=this;t.instance.$refs.container.toggleClass("fancybox-show-thumbs",this.isVisible),t.isVisible?(t.$grid||t.create(),t.instance.trigger("onThumbsShow"),t.focus(0)):t.$grid&&t.instance.trigger("onThumbsHide"),t.instance.update()},hide:function(){this.isVisible=!1,this.update()},show:function(){this.isVisible=!0,this.update()},toggle:function(){this.isVisible=!this.isVisible,this.update()}}),e(t).on({"onInit.fb":function(t,e){var n;e&&!e.Thumbs&&(n=new i(e),n.isActive&&n.opts.autoStart===!0&&n.show())},"beforeShow.fb":function(t,e,n,o){var i=e&&e.Thumbs;i&&i.isVisible&&i.focus(o?0:250)},"afterKeydown.fb":function(t,e,n,o,i){var a=e&&e.Thumbs;a&&a.isActive&&71===i&&(o.preventDefault(),a.toggle())},"beforeClose.fb":function(t,e){var n=e&&e.Thumbs;n&&n.isVisible&&n.opts.hideOnClose!==!1&&n.$grid.hide()}})}(document,jQuery),function(t,e){"use strict";function n(t){var e={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"};return String(t).replace(/[&<>"'`=\/]/g,function(t){return e[t]})}e.extend(!0,e.fancybox.defaults,{btnTpl:{share:'<button data-fancybox-share class="fancybox-button fancybox-button--share" title="{{SHARE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2.55 19c1.4-8.4 9.1-9.8 11.9-9.8V5l7 7-7 6.3v-3.5c-2.8 0-10.5 2.1-11.9 4.2z"/></svg></button>'},share:{url:function(t,e){return!t.currentHash&&"inline"!==e.type&&"html"!==e.type&&(e.origSrc||e.src)||window.location},tpl:'<div class="fancybox-share"><h1>{{SHARE}}</h1><p><a class="fancybox-share__button fancybox-share__button--fb" href="https://www.facebook.com/sharer/sharer.php?u={{url}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m287 456v-299c0-21 6-35 35-35h38v-63c-7-1-29-3-55-3-54 0-91 33-91 94v306m143-254h-205v72h196" /></svg><span>Facebook</span></a><a class="fancybox-share__button fancybox-share__button--tw" href="https://twitter.com/intent/tweet?url={{url}}&text={{descr}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m456 133c-14 7-31 11-47 13 17-10 30-27 37-46-15 10-34 16-52 20-61-62-157-7-141 75-68-3-129-35-169-85-22 37-11 86 26 109-13 0-26-4-37-9 0 39 28 72 65 80-12 3-25 4-37 2 10 33 41 57 77 57-42 30-77 38-122 34 170 111 378-32 359-208 16-11 30-25 41-42z" /></svg><span>Twitter</span></a><a class="fancybox-share__button fancybox-share__button--pt" href="https://www.pinterest.com/pin/create/button/?url={{url}}&description={{descr}}&media={{media}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m265 56c-109 0-164 78-164 144 0 39 15 74 47 87 5 2 10 0 12-5l4-19c2-6 1-8-3-13-9-11-15-25-15-45 0-58 43-110 113-110 62 0 96 38 96 88 0 67-30 122-73 122-24 0-42-19-36-44 6-29 20-60 20-81 0-19-10-35-31-35-25 0-44 26-44 60 0 21 7 36 7 36l-30 125c-8 37-1 83 0 87 0 3 4 4 5 2 2-3 32-39 42-75l16-64c8 16 31 29 56 29 74 0 124-67 124-157 0-69-58-132-146-132z" fill="#fff"/></svg><span>Pinterest</span></a></p><p><input class="fancybox-share__input" type="text" value="{{url_raw}}" onclick="select()" /></p></div>'}}),e(t).on("click","[data-fancybox-share]",function(){var t,o,i=e.fancybox.getInstance(),a=i.current||null;a&&("function"===e.type(a.opts.share.url)&&(t=a.opts.share.url.apply(a,[i,a])),o=a.opts.share.tpl.replace(/\{\{media\}\}/g,"image"===a.type?encodeURIComponent(a.src):"").replace(/\{\{url\}\}/g,encodeURIComponent(t)).replace(/\{\{url_raw\}\}/g,n(t)).replace(/\{\{descr\}\}/g,i.$caption?encodeURIComponent(i.$caption.text()):""),e.fancybox.open({src:i.translate(i,o),type:"html",opts:{touch:!1,animationEffect:!1,afterLoad:function(t,e){i.$refs.container.one("beforeClose.fb",function(){t.close(null,0)}),e.$content.find(".fancybox-share__button").click(function(){return window.open(this.href,"Share","width=550, height=450"),!1})},mobile:{autoFocus:!1}}}))})}(document,jQuery),function(t,e,n){"use strict";function o(){var e=t.location.hash.substr(1),n=e.split("-"),o=n.length>1&&/^\+?\d+$/.test(n[n.length-1])?parseInt(n.pop(-1),10)||1:1,i=n.join("-");return{hash:e,index:o<1?1:o,gallery:i}}function i(t){""!==t.gallery&&n("[data-fancybox='"+n.escapeSelector(t.gallery)+"']").eq(t.index-1).focus().trigger("click.fb-start")}function a(t){var e,n;return!!t&&(e=t.current?t.current.opts:t.opts,n=e.hash||(e.$orig?e.$orig.data("fancybox")||e.$orig.data("fancybox-trigger"):""),""!==n&&n)}n.escapeSelector||(n.escapeSelector=function(t){var e=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,n=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t};return(t+"").replace(e,n)}),n(function(){n.fancybox.defaults.hash!==!1&&(n(e).on({"onInit.fb":function(t,e){var n,i;e.group[e.currIndex].opts.hash!==!1&&(n=o(),i=a(e),i&&n.gallery&&i==n.gallery&&(e.currIndex=n.index-1))},"beforeShow.fb":function(n,o,i,s){var r;i&&i.opts.hash!==!1&&(r=a(o),r&&(o.currentHash=r+(o.group.length>1?"-"+(i.index+1):""),t.location.hash!=="#"+o.currentHash&&(s&&!o.origHash&&(o.origHash=t.location.hash),o.hashTimer&&clearTimeout(o.hashTimer),o.hashTimer=setTimeout(function(){"replaceState"in t.history?(t.history[s?"pushState":"replaceState"]({},e.title,t.location.pathname+t.location.search+"#"+o.currentHash),s&&(o.hasCreatedHistory=!0)):t.location.hash=o.currentHash,o.hashTimer=null},300))))},"beforeClose.fb":function(n,o,i){i.opts.hash!==!1&&(clearTimeout(o.hashTimer),o.currentHash&&o.hasCreatedHistory?t.history.back():o.currentHash&&("replaceState"in t.history?t.history.replaceState({},e.title,t.location.pathname+t.location.search+(o.origHash||"")):t.location.hash=o.origHash),o.currentHash=null)}}),n(t).on("hashchange.fb",function(){var t=o(),e=null;n.each(n(".fancybox-container").get().reverse(),function(t,o){var i=n(o).data("FancyBox");if(i&&i.currentHash)return e=i,!1}),e?e.currentHash===t.gallery+"-"+t.index||1===t.index&&e.currentHash==t.gallery||(e.currentHash=null,e.close()):""!==t.gallery&&i(t)}),setTimeout(function(){n.fancybox.getInstance()||i(o())},50))})}(window,document,jQuery),function(t,e){"use strict";var n=(new Date).getTime();e(t).on({"onInit.fb":function(t,e,o){e.$refs.stage.on("mousewheel DOMMouseScroll wheel MozMousePixelScroll",function(t){
    var o=e.current,i=(new Date).getTime();e.group.length<2||o.opts.wheel===!1||"auto"===o.opts.wheel&&"image"!==o.type||(t.preventDefault(),t.stopPropagation(),o.$slide.hasClass("fancybox-animated")||(t=t.originalEvent||t,i-n<250||(n=i,e[(-t.deltaY||-t.deltaX||t.wheelDelta||-t.detail)<0?"next":"previous"]())))})}})}(document,jQuery);
    
    /***/ }),
    /* 377 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _gsap = __webpack_require__(12);
    
    var _ScrollMagic = __webpack_require__(35);
    
    var _ScrollMagic2 = _interopRequireDefault(_ScrollMagic);
    
    __webpack_require__(52);
    
    var _title = __webpack_require__(147);
    
    var _title2 = _interopRequireDefault(_title);
    
    var _helpers = __webpack_require__(3);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var Expertise = function () {
        function Expertise() {
            _classCallCheck(this, Expertise);
    
            this.el = '.expertise';
            this.$el = $(this.el);
            this.text = this.el + '__text';
            this.flagPlay = false;
            this.activeTl = new _gsap.TimelineMax();
            this.activeTlTop = new _gsap.TimelineMax();
            this.activeTlBot = new _gsap.TimelineMax();
            this.minIndex = 6;
            this.maxIndex = 11;
            this.maxSubs = 7;
            this.minSubs = 5;
    
            if (this.$el.length) {
                this.init();
            }
        }
    
        _createClass(Expertise, [{
            key: 'init',
            value: function init() {
                if (_helpers.Resp.isDeskLg) {
                    this.minIndex = 6;
                    this.minSubs = 11;
                }
    
                if (_helpers.Resp.isTablet) {
                    this.maxIndex = 15;
                    this.minIndex = 5;
                    this.maxSubs = 16;
                    this.minSubs = 4;
                }
    
                new _title2.default(this.el, false);
                this.createController();
                this.startAnim();
                this.bindEvents();
            }
        }, {
            key: 'bindEvents',
            value: function bindEvents() {
                var _this2 = this;
    
                if (_helpers.Resp.isDesk) {
                    this.$navUl.on('mouseenter', function () {
                        _this2.$navCircle.addClass(_helpers.css.active);
                    });
                    this.$navUl.on('mouseleave', function () {
                        _this2.$navCircle.removeClass(_helpers.css.active);
                    });
                } else {
                    this.$navCircle.addClass(_helpers.css.active);
                }
    
                this.$arrowPrev.on('click', function () {
                    if (_this2.flagPlay) return;
                    _this2.changeNav('prev');
                });
    
                this.$arrowNext.on('click', function () {
                    if (_this2.flagPlay) return;
                    _this2.changeNav('next');
                });
    
                this.$navLi.on('click', function (e) {
                    if (_this2.flagPlay) return;
                    _this2.changeNav($(e.currentTarget).index());
                });
            }
    
            /**
       * Go to nav item
       *
       * @param {String|Number} direction - prev/next or number
       */
    
        }, {
            key: 'changeNav',
            value: function changeNav(direction) {
                var currentIndex = this.getActiveLi;
    
                if (direction === 'prev') {
                    if (currentIndex === 0) return;
    
                    this.setActiveLi(currentIndex - 1);
                    this.changeSubnav(currentIndex - 1);
                    this.animCircle(direction);
                } else if (direction === 'next') {
                    if (currentIndex === this.$navLi.length - 1) return;
    
                    this.setActiveLi(currentIndex + 1);
                    this.changeSubnav(currentIndex + 1);
                    this.animCircle(direction);
                } else if (typeof direction === 'number') {
                    if (currentIndex === direction) return;
    
                    this.setActiveLi(direction);
                    this.changeSubnav(direction);
    
                    if (currentIndex < direction) {
                        this.animCircle('next');
                    } else {
                        this.animCircle('prev');
                    }
                }
            }
    
            /**
       * Change subnav items
       *
       * @param {String|Number} direction - prev/next or number
       */
    
        }, {
            key: 'changeSubnav',
            value: function changeSubnav(direction) {
                var $currentUl = this.$subnav().children().eq(0);
                var $newUl = this.$navLi.eq(direction).find('ul').clone();
                var tl = new _gsap.TimelineMax({ paused: true });
                var speed = 0.5;
                var maxOffset = $newUl.children().length - this.maxSubs;
    
                if (maxOffset > this.minSubs) maxOffset = this.minSubs;
    
                $newUl.appendTo(this.$subnav());
    
                if (maxOffset > 0) {
                    $newUl.css({
                        'margin-top': ($newUl.children().length - this.maxSubs) * -.5 * $newUl.children().height() + $newUl.children().height() / 2
                    });
                }
    
                tl.addLabel('go', 0).to($currentUl, speed, {
                    x: -20,
                    alpha: 0,
                    ease: Power1.easeIn,
                    onComplete: function onComplete() {
                        $(this.target).remove();
                    }
                }).fromTo($newUl, speed * 2, {
                    x: 60,
                    alpha: 0
                }, {
                    x: 0,
                    ease: Power1.easeOut,
                    onStart: function onStart() {
                        _gsap.TweenMax.to(this.target, speed, {
                            alpha: 1,
                            delay: speed / 3,
                            ease: Power1.easeInOut
                        });
                    }
                }, '-=' + speed / 3);
    
                tl.play();
            }
    
            /**
       * get active nav item
       *
       * @return {Number}
       */
    
        }, {
            key: 'setActiveLi',
    
    
            /**
       * set active nav item
       *
       * @param {Number} index
       */
            value: function setActiveLi(index) {
                var _this3 = this;
    
                var nextIndex = index;
                var currentIndex = this.getActiveLi;
                var navOffset = -nextIndex * this.$navLi.height();
                var speed = 1;
    
                if (index === 0) {
                    this.$arrowPrev.addClass(_helpers.css.disabled);
                } else {
                    this.$arrowPrev.removeClass(_helpers.css.disabled);
                }
    
                if (index === this.$navLi.length - 1) {
                    this.$arrowNext.addClass(_helpers.css.disabled);
                } else {
                    this.$arrowNext.removeClass(_helpers.css.disabled);
                }
    
                this.activeTlTop.clear();
                this.activeTlBot.clear();
                this.activeTl.clear();
    
                this.$navLi.removeClass(_helpers.css.active).eq(nextIndex).addClass(_helpers.css.active);
    
                if (nextIndex > currentIndex) {
                    this.$navLi.each(function (index, el) {
                        if (index <= nextIndex + _this3.maxIndex && $(el).css('pointer-events') === 'none' && index > nextIndex) {
                            _this3.activeTlBot.to(el, speed / 2, {
                                alpha: 1,
                                delay: speed / 10,
                                onStart: function onStart() {
                                    $(this.target).addClass(_helpers.css.offTransition).css('pointer-events', 'auto');
                                },
                                onComplete: function onComplete() {
                                    $(this.target).removeClass(_helpers.css.offTransition);
                                }
                            }, '-=' + speed / 2);
                        } else if (index <= nextIndex - _this3.minIndex && $(el).css('pointer-events') === 'auto') {
                            _this3.activeTlTop.to(el, speed / 2, {
                                alpha: 0,
                                delay: speed / 10,
                                onStart: function onStart() {
                                    $(this.target).addClass(_helpers.css.offTransition).css('pointer-events', 'none');
                                },
                                onComplete: function onComplete() {
                                    $(this.target).removeClass(_helpers.css.offTransition);
                                }
                            }, '-=' + speed / 2);
                        }
                    });
                } else {
                    $(this.$navLi.get().reverse()).each(function (index, el) {
                        if (_this3.$navLi.length - 1 - index > nextIndex + _this3.maxIndex && $(el).css('pointer-events') === 'auto') {
                            _this3.activeTlBot.to(el, speed / 2, {
                                alpha: 0,
                                delay: speed / 10,
                                onStart: function onStart() {
                                    $(this.target).addClass(_helpers.css.offTransition).css('pointer-events', 'none');
                                },
                                onComplete: function onComplete() {
                                    $(this.target).removeClass(_helpers.css.offTransition);
                                }
                            }, '-=' + speed / 2);
                        } else if (_this3.$navLi.length - 1 - index > nextIndex - _this3.minIndex && $(el).css('pointer-events') === 'none' && _this3.$navLi.length - 1 - index < nextIndex) {
                            _this3.activeTlTop.to(el, speed / 2, {
                                alpha: 1,
                                delay: speed / 10,
                                onStart: function onStart() {
                                    $(this.target).addClass(_helpers.css.offTransition).css('pointer-events', 'auto');
                                },
                                onComplete: function onComplete() {
                                    $(this.target).removeClass(_helpers.css.offTransition);
                                }
                            }, '-=' + speed / 2);
                        }
                    });
                }
    
                this.activeTlTop.play();
                this.activeTlBot.play();
                this.activeTl.to(this.$nav, speed, {
                    y: navOffset,
                    ease: Power2.easeInOut
                }, 0);
            }
        }, {
            key: 'createController',
            value: function createController() {
                this.controller = new _ScrollMagic2.default.Controller();
            }
        }, {
            key: 'startAnim',
            value: function startAnim() {
                var _this4 = this;
    
                var _this = this;
                this.exp = '.expertise-nav';
                this.$svg = $(this.exp + '__svg').find('svg');
                this.$navCircle = $(this.exp + '__nav-circle');
                this.$line = this.$svg.find('.line line');
                this.$circle = this.$svg.find('.circle circle');
                this.$sector = this.$svg.find('.sector circle');
                this.$nav = $(this.exp + '__list');
                this.$navUl = this.$nav.find('> ul');
                this.$navLi = this.$navUl.find('> li');
                this.$subnav = function () {
                    return $(_this4.exp + '__sublist');
                };
                this.circleLength = this.$circle.length;
                this.$arrowPrev = $(this.exp + '__nav-circle-top');
                this.$arrowNext = $(this.exp + '__nav-circle-bot');
                this.circlePos = [{ r: 0, alpha: 0 }, { r: 70 / 2, alpha: 0.05 }, { r: 270 / 2, alpha: 0.1 }, { r: 470 / 2, alpha: 0.2 }, { r: 670 / 2, alpha: 0.3 }, { r: 870 / 2, alpha: 0.4 }, { r: 1140 / 2, alpha: 0.5 }, { r: 1370 / 2, alpha: 0 }];
                var tl = new _gsap.TimelineMax({ paused: true });
                var speed = 0.5;
    
                this.$arrowPrev.addClass(_helpers.css.disabled);
    
                this.$navLi.eq(0).addClass(_helpers.css.active).find('ul').clone().appendTo(this.$subnav());
                _gsap.TweenMax.set(this.$navCircle, { y: _helpers.Resp.isDeskLg ? -400 : -230 });
                _gsap.TweenMax.set(this.$navLi, { alpha: 0, y: -25 });
                _gsap.TweenMax.set(this.$line, { alpha: 0 });
                _gsap.TweenMax.set(this.$circle, { alpha: 0 });
                _gsap.TweenMax.set(this.$sector, { rotation: -90, transformOrigin: 'center center', drawSVG: '0% 0%' });
                _gsap.TweenMax.set(this.$subnav(), { alpha: 0, x: 50 });
    
                this.$navLi.css('pointer-events', 'none');
    
                tl.add('go').to(this.$navCircle, speed, { y: '-50%', ease: Power1.easeOut }, 'go').to(this.$line, speed, { alpha: 0.1, ease: Power1.easeOut }, 'go+=' + speed / 2).add('circle');
    
                $(this.$circle.get().reverse()).each(function (index, el) {
                    var _this = _this4;
                    var thisIndex = _this.circleLength - index - 1;
    
                    if (thisIndex === 0) return;
    
                    tl.add(_gsap.TweenMax.to(el, speed * 3, {
                        attr: {
                            r: _this.circlePos[thisIndex].r
                        },
                        onStart: function onStart() {
                            _gsap.TweenMax.to(this.target, speed, {
                                alpha: _this.circlePos[thisIndex].alpha,
                                delay: speed / 2
                            });
                        },
    
                        ease: Power3.easeOut
                    }), 'go+=' + ((index - 1) * 0.1 + speed / 2));
                });
    
                tl.staggerTo(this.$navLi, speed / 2, {
                    y: 0,
                    onStart: function onStart() {
                        if ($(this.target).index() <= _this.maxIndex) {
                            _gsap.TweenMax.to(this.target, speed, {
                                alpha: 1,
                                delay: speed / 4,
                                onStart: function onStart() {
                                    $(this.target).css('pointer-events', 'auto');
                                }
                            });
                        }
                    }
                }, 0.075, 'go+=' + speed / 2).to(this.$subnav(), speed, {
                    alpha: 1,
                    x: 0,
                    ease: Power1.easeInOut
                }, 'go+=' + speed * 5 / 2).to(this.$sector.eq(0), speed * 3 / 2, {
                    rotation: -40.5,
                    transformOrigin: 'center center',
                    drawSVG: '0% 22.5%',
                    ease: Power1.easeInOut
                }, 'go+=' + speed * 3);
    
                tl.vars.onComplete = function () {
                    $(_this4.exp).addClass(_helpers.css.anim);
                };
    
                if (!_helpers.Resp.isDesk) {
                    tl.progress(1);
                }
    
                if (_helpers.Resp.isDesk) {
                    var triggerHook = 0.85;
                    var triggerElement = this.$el.children().toArray();
                    if (_helpers.Resp.isDeskLg) {
                        triggerHook = 0.8;
                        triggerElement = this.$el.toArray();
                    }
                    new _ScrollMagic2.default.Scene({
                        triggerElement: triggerElement,
                        triggerHook: triggerHook
                    }).on('start', function () {
                        setTimeout(function () {
                            tl.play();
                        }, 1000);
                    }).addTo(this.controller);
                }
            }
    
            /**
       * Animate circles and sectors
       *
       * @param {String} direction - prev/next
       */
    
        }, {
            key: 'animCircle',
            value: function animCircle(direction) {
                var _this5 = this;
    
                var tl = new _gsap.TimelineMax({ paused: true });
                var speed = 1.75;
    
                $(this.$circle.get().reverse()).each(function (index, el) {
                    var _this = _this5;
                    var thisIndex = _this.circleLength - index;
    
                    tl.addLabel('start', 0).to(el, speed * 2 / 3, {
                        attr: {
                            r: _this.circlePos[thisIndex].r
                        },
                        alpha: _this.circlePos[thisIndex].alpha,
                        ease: Power2.easeInOut
                    }, 0).set(_this5.$sector.eq(1), {
                        rotation: -40.5,
                        transformOrigin: 'center center',
                        drawSVG: '0% 22.5%'
                    }, 0);
                });
    
                if (direction === 'next') {
                    tl.to(this.$sector.get(1), speed * 2.5 / 6, {
                        rotation: 90,
                        transformOrigin: 'center center',
                        drawSVG: '0% 0%',
                        ease: Power1.easeInOut
                    }, 0).set(this.$sector.eq(0), {
                        rotation: -90,
                        transformOrigin: 'center center',
                        drawSVG: '0% 0%'
                    }, 0).to(this.$sector.get(0), speed * 2.5 / 6, {
                        rotation: -40.5,
                        transformOrigin: 'center center',
                        drawSVG: '0% 22.5%',
                        ease: Power1.easeInOut
                    }, 'start+=' + speed / 6);
                } else if (direction === 'prev') {
                    tl.to(this.$sector.get(1), speed * 2.5 / 6, {
                        rotation: -90,
                        transformOrigin: 'center center',
                        drawSVG: '0% 0%',
                        ease: Power1.easeInOut
                    }, 0).set(this.$sector.eq(0), {
                        rotation: 90,
                        transformOrigin: 'center center',
                        drawSVG: '0% 0%'
                    }, 0).to(this.$sector.get(0), speed * 2.5 / 6, {
                        rotation: -40.5,
                        transformOrigin: 'center center',
                        drawSVG: '0% 22.5%',
                        ease: Power1.easeInOut
                    }, 'start+=' + speed / 6);
                }
    
                function resetCircles() {
                    var _this = this;
                    this.$circle.each(function (index, el) {
                        _gsap.TweenMax.set(el, {
                            attr: {
                                r: _this.circlePos[index].r
                            },
                            alpha: _this.circlePos[index].alpha
                        });
                    });
                }
    
                tl.vars.onStart = function () {
                    _this5.flagPlay = true;
                };
                tl.vars.onComplete = function () {
                    _this5.flagPlay = false;
                    resetCircles.call(_this5);
                };
                tl.play();
            }
        }, {
            key: 'getActiveLi',
            get: function get() {
                return this.$navLi.filter('.' + _helpers.css.active).index();
            }
        }]);
    
        return Expertise;
    }();
    
    exports.default = new Expertise();
    
    /***/ }),
    /* 378 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _gsap = __webpack_require__(12);
    
    __webpack_require__(61);
    
    __webpack_require__(81);
    
    var _dot = __webpack_require__(62);
    
    var _dot2 = _interopRequireDefault(_dot);
    
    __webpack_require__(52);
    
    var _scrollTriggerAnimations = __webpack_require__(79);
    
    var _scrollTriggerAnimations2 = _interopRequireDefault(_scrollTriggerAnimations);
    
    var _helpers = __webpack_require__(3);
    
    var _link = __webpack_require__(21);
    
    var _link2 = _interopRequireDefault(_link);
    
    var _video = __webpack_require__(109);
    
    var _video2 = _interopRequireDefault(_video);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var HalfBlock = function () {
        function HalfBlock() {
            _classCallCheck(this, HalfBlock);
    
            this.container = 'half';
            this.$container = $('.' + this.container);
            this.inner = this.container + '__inner';
            this.item = this.container + '__item';
            this.text = this.container + '__text';
            this.videoBlock = '_video';
            this.$bgItem = $('.' + this.container + '__bg-item');
    
            if (this.$container.length) {
                this.init();
            }
        }
    
        _createClass(HalfBlock, [{
            key: 'init',
            value: function init() {
                var _this2 = this;
    
                this.initSlider();
                this.initSwipe();
                this.dot();
                _helpers.$window.on('load', function () {
                    _this2.initVideoButton();
                });
            }
        }, {
            key: 'dot',
            value: function dot() {
                new _dot2.default('.' + this.text);
            }
        }, {
            key: 'initSwipe',
            value: function initSwipe() {
                var _this3 = this;
    
                var $container = $('.' + this.inner);
    
                $container.each(function (index, el) {
                    var $item = $(el).find('.' + _this3.item);
                    var $dot = $(el).find('.dots__item');
    
                    if ($item.length < 2) return;
    
                    $container.get(0).addEventListener('touchstart', handleTouchStart, false);
                    $container.get(0).addEventListener('touchmove', handleTouchMove, false);
    
                    var xDown = null;
                    var yDown = null;
    
                    function handleTouchStart(evt) {
                        xDown = evt.touches[0].clientX;
                        yDown = evt.touches[0].clientY;
                    }
    
                    function handleTouchMove(evt) {
                        if (!xDown || !yDown) {
                            return;
                        }
    
                        var xUp = evt.touches[0].clientX;
                        var yUp = evt.touches[0].clientY;
    
                        var xDiff = xDown - xUp;
                        var yDiff = yDown - yUp;
    
                        if (Math.abs(xDiff) > Math.abs(yDiff)) {
                            /*most significant*/
                            if (xDiff > 0) {
                                /* left swipe */
                                var $currentDot = $dot.filter('.' + _helpers.css.active);
                                if ($currentDot.index() < $dot.length - 1) {
                                    $dot.eq($currentDot.index() + 1).trigger('click');
                                } else {
                                    $dot.eq(0).trigger('click');
                                }
                            } else {
                                /* right swipe */
                                var _$currentDot = $dot.filter('.' + _helpers.css.active);
                                if (_$currentDot.index() > 0) {
                                    $dot.eq(_$currentDot.index() - 1).trigger('click');
                                } else {
                                    $dot.eq($dot.length - 1).trigger('click');
                                }
                            }
                        }
                        /* reset values */
                        xDown = null;
                        yDown = null;
                    }
                });
            }
        }, {
            key: 'initSlider',
            value: function initSlider() {
                var _this4 = this;
    
                this.$container.each(function (index, el) {
                    var $el = $(el);
                    var $slider = $el.find('.' + _this4.inner);
                    var $item = $slider.find('.' + _this4.item);
    
                    if ($item.length < 2) return;
    
                    var $dots = $('<div></div>', { class: _this4.container + '__dots dots' }).attr('data-anim-stagger', 'fade-top');
                    var $dotsItem = $('<div></div>', { class: 'dots__item' });
                    var $dotsItemIn = $('<div></div>', { class: 'dots__item-in' });
                    var tl = new _gsap.TimelineMax();
                    var icon = '\n\t\t\t\t<div class="icon">\n\t\t\t\t\t<svg viewBox="0 0 8 8">\n\t\t\t\t\t\t<path d="M8,1.6L6.1,0C5.6,0.5,4.8,0.7,4,0.7C3.2,0.7,2.4,0.5,1.9,0L0,1.6C1,2.5,2.4,3,4,3C5.6,3,7,2.5,8,1.6z"/>\n\t\t\t\t\t</svg>\n\t\t\t\t</div>';
    
                    $item.each(function (index, el) {
                        if (index === 0) return;
                        $(el).find('[data-anim-stagger]').removeAttr('data-anim-stagger');
                    });
    
                    $dots.appendTo($slider);
                    for (var i = 0, len = $item.length; i < len; i++) {
                        $dotsItem.clone().wrapInner($dotsItemIn.clone().wrapInner($(icon))).appendTo($dots);
                    }
                    $dotsItem = $dots.children();
                    $dotsItem.eq(0).addClass(_helpers.css.active);
                    $item.eq(0).addClass(_helpers.css.active);
    
                    $dotsItem.on('click', function (e) {
                        e.preventDefault();
                        var $this = $(e.currentTarget);
                        var index = $this.index();
    
                        if (!$this.hasClass(_helpers.css.active)) {
                            $dotsItem.removeClass(_helpers.css.active);
                            $this.addClass(_helpers.css.active);
                            _this4.goToSlide(index);
                        }
                    });
    
                    _this4.goToSlide = function (index) {
                        $item.removeClass(_helpers.css.active);
                        if (_helpers.Resp.isDesk) {
                            setTimeout(function () {
                                _this4.$bgItem.filter('.' + _helpers.css.active).removeClass(_helpers.css.active).fadeOut(750);
                                _this4.$bgItem.eq(index).addClass(_helpers.css.active).fadeIn(750);
                            }, 500);
                        } else {
                            _this4.$bgItem.filter('.' + _helpers.css.active).removeClass(_helpers.css.active).fadeOut(500, function () {
                                _this4.$bgItem.eq(index).addClass(_helpers.css.active).fadeIn(1000);
                            });
                        }
                        _this4.animReverse($item.filter(':visible').children()).then(function () {
                            _this4.anim($item.eq(index).children());
                        });
                    };
    
                    _this4.anim = function (el) {
                        tl.vars.onComplete = function () {
                            return _this4;
                        };
                        _gsap.TweenMax.set(el, {
                            y: 80,
                            alpha: 0
                        });
                        el.parent().addClass(_helpers.css.active).show();
                        el.filter('.' + _this4.text).length ? el.filter('.' + _this4.text).trigger('update.dot') : null;
                        tl.staggerTo(el, 0.8, {
                            y: 0,
                            x: 0,
                            ease: Power4.easeOut,
                            onStart: function onStart() {
                                _gsap.TweenMax.to($(this.target), 0.5, {
                                    alpha: 1,
                                    ease: Power2.easeIn
                                });
                            }
                        }, 0.200);
                    };
    
                    _this4.animReverse = function (el) {
                        return new Promise(function (resolve) {
                            tl.staggerTo(el, 0.2, {
                                y: -20,
                                alpha: 0,
                                ease: Power1.easeIn
                            }, 0.200 / 2);
    
                            tl.vars.onComplete = function () {
                                el.parent().hide();
                                resolve();
                            };
                        });
                    };
                });
            }
        }, {
            key: 'initVideoButton',
            value: function initVideoButton() {
                var _this5 = this;
    
                var videoIncrement = 0;
    
                this.$container.each(function (index, el) {
                    var $this = $(el);
    
                    if (!$this.hasClass(_this5.container + _this5.videoBlock)) return false;
    
                    var _this = _this5,
                        $picture = $this.find('img'),
                        $video = $this.find('video'),
                        $videoItem = $this.find('.half__bg-item'),
                        windowScrollTop = _helpers.$window.scrollTop,
                        video = [];
    
                    if (!$video.length) return false;
    
                    $videoItem.eq(0).addClass(_helpers.css.active).nextAll().hide();
    
                    $video.each(function (index, el) {
                        var $el = $(el);
    
                        $el.children().attr('src', $el.children().data('load-src'));
                        video.push(new _video2.default().init($el.get(0), videoIncrement));
                        videoIncrement++;
                    });
    
                    var $thisHeight = $this.height();
    
                    // Create close btn:
                    var $closeBtn = $(createCloseBtn($this));
    
                    // Create play-button and append this at half-container with video:
                    var $icon = $('\n\t\t\t\t<div class="' + _this5.container + '__play-btn">\n\t\t\t\t\t<svg class="play-btn" viewBox="0 0 294 294">\n\t\t\t\t\t\t<path class="play-btn__triangle" d="M132.5,165V129l29,18Z"/>\n\t\t\t\t\t\t<line class="play-btn__line-top" x1="275.5" y1="216.5" x2="27.5" y2="63.5"/>\n\t\t\t\t\t\t<line class="play-btn__line-left" x1="27.5" y1="231.5" x2="275.5" y2="76.5"/>\n\t\t\t\t\t\t<line class="play-btn__line-right" x1="132.5" y1="1.5" x2="132.5" y2="292.5"/>\n\t\t\t\t\t\t<circle class="play-btn__circle-lg" cx="147" cy="147" r="146"/>\n\t\t\t\t\t\t<circle class="play-btn__circle-sm" cx="147" cy="147" r="113.5"/>\n\t\t\t\t\t</svg>\n\t\t\t\t</div>\n\t\t\t'),
                        $iconCircleLg = $icon.find('.play-btn__circle-lg'),
                        $iconCircleSm = $icon.find('.play-btn__circle-sm'),
                        $iconTriangle = $icon.find('.play-btn__triangle'),
                        $iconLineTop = $icon.find('.play-btn__line-top'),
                        $iconLineLeft = $icon.find('.play-btn__line-left'),
                        $iconLineRight = $icon.find('.play-btn__line-right');
    
                    var tl = new _gsap.TimelineMax({ paused: true });
    
                    $icon = $icon.appendTo($this.find('.' + _this5.inner));
    
                    setStartState();
                    createStartAnim.call(_this5);
                    createScrollAnim.call(_this5);
    
                    // Drawing svg icon at play-button:
                    function setStartState() {
                        _gsap.TweenMax.set($iconTriangle, { alpha: 0 });
                        _gsap.TweenMax.set($iconCircleLg, {
                            drawSVG: '0%', rotation: -90, transformOrigin: 'center center'
                        });
                        _gsap.TweenMax.set($iconCircleSm, {
                            drawSVG: '0%', rotation: 135, transformOrigin: 'center center'
                        });
                        _gsap.TweenMax.set([$iconLineTop, $iconLineLeft, $iconLineRight], { drawSVG: '0%' });
                    }
    
                    // Add mouse move listener at play btn svg icon:
                    function createScrollAnim() {
                        new _scrollTriggerAnimations2.default({
                            container: el,
                            onStart: function onStart() {
                                setTimeout(function () {
                                    tl.play();
                                }, 750);
                            }
                        });
                    }
    
                    // resize section height on orientationChange
                    function resizeSectionOnOrientationChange() {
                        if (!$this.hasClass(_helpers.css.play)) return;
    
                        var $videoHeight = _helpers.$window.width() * 0.5625;
    
                        _gsap.TweenMax.to($this, 0.2, {
                            height: $videoHeight,
                            ease: Power1.easeInOut
                        });
                    }
    
                    _helpers.$window.on('orientationchange', (0, _helpers.debounce)(resizeSectionOnOrientationChange, _this5, 250));
    
                    // Add close btn:
                    function createCloseBtn($videoContainer) {
                        var $container = $videoContainer.find('.half__bg-video'),
                            $btn = $('<div></div>', { class: 'half__video-close' }).append($('<span>Close</span>')),
                            $newBtn = [];
    
                        $container.each(function (index, el) {
                            $newBtn.push($btn.clone());
                            $newBtn[index].prependTo($videoContainer);
                            new _link2.default($newBtn[index], { type: 'close' });
                        });
    
                        return $newBtn;
                    }
    
                    function createStartAnim() {
                        var _this6 = this;
    
                        var speed = 1;
                        tl.add('start').to($iconCircleLg, speed * 2 / 3, { drawSVG: '100%', ease: Power1.easeInOut }, 'start').to([$iconLineTop, $iconLineLeft, $iconLineRight], speed / 2, {
                            drawSVG: '25% 75%', ease: Power4.easeIn
                        }, 'start').to([$iconLineTop, $iconLineLeft, $iconLineRight], speed / 3, {
                            drawSVG: '100% 100%', ease: Power2.easeOut
                        }, 'start+=' + speed / 2).to($iconTriangle, speed / 4, { alpha: 1 }, 'start+=' + speed / 2).to($iconCircleSm, speed * 2 / 10, {
                            drawSVG: '17.5% 52.5%', ease: Power1.easeIn
                        }, 'start+=' + speed / 2).to($iconCircleSm, speed / 10, {
                            drawSVG: '42.5% 70%', ease: Linear.easeNone
                        }, 'start+=' + (speed / 2 + speed * 2 / 10)).to($iconCircleSm, speed / 10, {
                            drawSVG: '50% 75%', ease: Power1.easeOut
                        }, 'start+=' + (speed / 2 + speed * 2 / 10 + speed / 10));
    
                        if (_helpers.Resp.isDesk) {
                            tl.vars.onComplete = function () {
                                bindPlayEvent.call(_this6);
                                setMouseEvent.call(_this6);
                            };
                        } else {
                            tl.vars.onComplete = function () {
                                bindPlayEvent.call(_this6);
                            };
                        }
    
                        function setMouseEvent() {
                            var rotation = 0;
                            var prevRotation = 0;
                            var counter = 0;
                            var speedMouse = 2;
                            var circleX = $icon.offset().left + $icon.width() / 2;
                            var circleY = $icon.offset().top + $icon.height() / 2;
    
                            _helpers.$window.on('resize', (0, _helpers.throttle)(function () {
                                circleX = $icon.offset().left + $icon.width() / 2;
                                circleY = $icon.offset().top + $icon.height() / 2;
                            }, 250, this));
    
                            $this.on('mousemove', function (e) {
                                rotation = Math.atan2(e.pageY - circleY, e.pageX - circleX) * 180 / Math.PI;
                                if (rotation + counter * 360 - prevRotation >= 180) {
                                    counter--;
                                } else if (prevRotation - counter * 360 - rotation >= 180) {
                                    counter++;
                                }
                                rotation += counter * 360;
                                _gsap.TweenMax.to($iconCircleSm, speedMouse, {
                                    rotation: rotation + 135,
                                    transformOrigin: 'center center',
                                    ease: Power3.easeOut
                                });
                                prevRotation = rotation;
                            });
                        }
                    }
    
                    function bindPlayEvent() {
                        var _this7 = this;
    
                        var fadeSpeed = 0.4;
                        var $videoHeight = $(video[_this.$bgItem.filter('.' + _helpers.css.active).index()].el_).height();
    
                        if (!_helpers.Resp.isDesk) {
                            fadeSpeed /= 2;
                        }
    
                        $video.each(function (index, el) {
                            el.addEventListener('ended', function () {
                                _helpers.$body.trigger('closeVideo');
                            });
                        });
    
                        $closeBtn.each(function (index, el) {
                            $(el).on('click', function () {
                                _helpers.$body.trigger('closeVideo');
                            });
                        });
    
                        _helpers.$body.bind('closeVideo', function () {
                            video[_this.$bgItem.filter('.' + _helpers.css.active).index()].pause();
                            $this.addClass(_helpers.css.noEvents).removeClass(_helpers.css.play);
                            _gsap.TweenMax.to($closeBtn[_this.$bgItem.filter('.' + _helpers.css.active).index()], fadeSpeed, {
                                y: 20,
                                alpha: 0,
                                ease: Power1.easeInOut
                            });
                            _gsap.TweenMax.to($this, fadeSpeed, {
                                height: $thisHeight,
                                ease: Power1.easeInOut
                            });
                            _gsap.TweenMax.to(video[_this.$bgItem.filter('.' + _helpers.css.active).index()].el_, fadeSpeed, {
                                alpha: 0,
                                onComplete: function onComplete() {
                                    $this.find('.half__bg-w').removeClass(_helpers.css.play);
                                    _gsap.TweenMax.to($picture.eq(_this.$bgItem.filter('.' + _helpers.css.active).index()).parent(), 1.5 * fadeSpeed, {
                                        y: '0%',
                                        alpha: 1,
                                        ease: Power1.easeOut,
                                        onComplete: function onComplete() {
                                            _gsap.TweenMax.to([$this.find('.half__item'), $this.find('.half__dots')], fadeSpeed, {
                                                y: 0,
                                                alpha: 1,
                                                ease: Power1.easeOut,
                                                onComplete: function onComplete() {
                                                    _gsap.TweenMax.to($icon, fadeSpeed, {
                                                        alpha: 1,
                                                        scale: 1,
                                                        onComplete: function onComplete() {
                                                            $this.removeClass(_helpers.css.noEvents);
                                                        }
                                                    });
                                                }
                                            });
                                        }
                                    });
                                }
                            });
                        });
    
                        $icon.on('click tap', function () {
                            var activeItem = _this.$bgItem.filter('.' + _helpers.css.active);
                            var activeIndex = activeItem.index();
    
                            video[activeIndex].load();
    
                            $this.addClass(_helpers.css.play);
    
                            if (!_helpers.Resp.isDesk) {
                                video[activeIndex].play();
                            }
    
                            var thisTl = new _gsap.TimelineMax();
                            windowScrollTop = _helpers.$window.scrollTop();
                            $this.addClass(_helpers.css.noEvents);
                            thisTl.to($icon, fadeSpeed, {
                                alpha: 0,
                                scale: 0.8
                            }).to([$this.find('.' + _this7.container + '__item'), $this.find('.' + _this7.container + '__dots')], fadeSpeed, {
                                y: 200,
                                alpha: 0,
                                ease: Power1.easeIn
                            }).to($picture.eq(activeIndex).parent(), 1.5 * fadeSpeed, {
                                y: '100%',
                                alpha: 0,
                                ease: Power1.easeIn,
                                onComplete: function onComplete() {
                                    $this.find('.half__bg-w').addClass(_helpers.css.play);
                                    $videoHeight = _helpers.Resp.isDesk ? _helpers.$window.height() : _helpers.$window.width() * 0.5625;
                                    if (_helpers.Resp.isDesk) {
                                        _gsap.TweenMax.to(_helpers.$window, fadeSpeed, {
                                            scrollTo: $this.get(0),
                                            ease: Power1.easeInOut
                                        });
                                    }
                                    _gsap.TweenMax.to($this, fadeSpeed, {
                                        height: $videoHeight,
                                        ease: Power1.easeInOut
                                    });
                                    _gsap.TweenMax.to(video[activeIndex].el_, fadeSpeed, {
                                        alpha: 1,
                                        onComplete: function onComplete() {
                                            _gsap.TweenMax.to($closeBtn[activeIndex], fadeSpeed, {
                                                y: 0,
                                                alpha: 1,
                                                ease: Power1.easeInOut
                                            });
                                            $this.removeClass(_helpers.css.noEvents);
                                            video[activeIndex].play();
                                            $('.header').addClass(_helpers.css.hide);
                                        }
                                    });
                                }
                            });
                        });
                    }
                });
            }
        }]);
    
        return HalfBlock;
    }();
    
    exports.default = new HalfBlock();
    
    /***/ }),
    /* 379 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _gsap = __webpack_require__(12);
    
    var _scrollTriggerAnimations = __webpack_require__(79);
    
    var _scrollTriggerAnimations2 = _interopRequireDefault(_scrollTriggerAnimations);
    
    var _helpers = __webpack_require__(3);
    
    var _dot = __webpack_require__(62);
    
    var _dot2 = _interopRequireDefault(_dot);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var Slider = function () {
        function Slider() {
            var _this2 = this;
    
            _classCallCheck(this, Slider);
    
            this.el = '.slider';
            this.$el = $(this.el);
            this.flagDot = false;
            this.flagPlay = false;
            this.reverseAnim = false;
            this.$dotTarget = $('.slider__item-text-paragraph');
    
            if (this.$el.length) {
                this.$el.each(function (index, el) {
                    _this2.init(el);
                });
            }
        }
    
        _createClass(Slider, [{
            key: 'init',
            value: function init(el) {
                this.prepareSlider(el);
                this.initSwipe(el);
                this.dot();
            }
        }, {
            key: 'dot',
            value: function dot() {
                new _dot2.default(this.$dotTarget);
            }
        }, {
            key: 'initSwipe',
            value: function initSwipe(el) {
                var _this = this;
                var $container = $(el).find(this.el + '__in');
    
                $container.get(0).addEventListener('touchstart', handleTouchStart, false);
                $container.get(0).addEventListener('touchmove', handleTouchMove, false);
    
                var xDown = null;
                var yDown = null;
    
                function handleTouchStart(evt) {
                    xDown = evt.touches[0].clientX;
                    yDown = evt.touches[0].clientY;
                };
    
                function handleTouchMove(evt) {
                    if (!xDown || !yDown) {
                        return;
                    }
    
                    var xUp = evt.touches[0].clientX;
                    var yUp = evt.touches[0].clientY;
    
                    var xDiff = xDown - xUp;
                    var yDiff = yDown - yUp;
    
                    if (Math.abs(xDiff) > Math.abs(yDiff)) {
                        /*most significant*/
                        if (xDiff > 0) {
                            /* left swipe */
                            if (_this.flagPlay) return;
    
                            var prevDot = _this.$dotsItem.filter('.' + _helpers.css.active).next();
                            if (!prevDot.length) {
                                prevDot = _this.$dotsItem.first();
                            }
    
                            _this.reverseAnim = true;
                            prevDot.trigger('click');
                        } else {
                            /* right swipe */
                            if (_this.flagPlay) return;
    
                            var nextDot = _this.$dotsItem.filter('.' + _helpers.css.active).prev();
                            if (!nextDot.length) {
                                nextDot = _this.$dotsItem.last();
                            }
    
                            _this.reverseAnim = true;
                            nextDot.trigger('click');
                        }
                    }
                    /* reset values */
                    xDown = null;
                    yDown = null;
                };
            }
        }, {
            key: 'initArrows',
            value: function initArrows() {
                var _this3 = this;
    
                var $arrowsContainer = this.$inner.parent();
                var $arrowLeft = $('<div></div>', { class: this.el.substr(1) + '__arrow ' + this.el.substr(1) + '__arrow_left' });
                var $arrowRight = $('<div></div>', { class: this.el.substr(1) + '__arrow ' + this.el.substr(1) + '__arrow_right' });
                var iconLeft = (0, _helpers.svgIcon)('arrow-left');
                var iconRight = (0, _helpers.svgIcon)('arrow-right');
    
                $arrowLeft.add($arrowRight).appendTo($arrowsContainer);
                $(iconLeft).appendTo($arrowLeft);
                $(iconRight).appendTo($arrowRight);
    
                $arrowLeft.on('click', function () {
                    if (_this3.flagPlay) return;
    
                    var nextDot = _this3.$dotsItem.filter('.' + _helpers.css.active).prev();
                    if (!nextDot.length) {
                        nextDot = _this3.$dotsItem.last();
                    }
    
                    _this3.reverseAnim = true;
                    nextDot.trigger('click');
                });
    
                $arrowRight.on('click', function () {
                    if (_this3.flagPlay) return;
    
                    var prevDot = _this3.$dotsItem.filter('.' + _helpers.css.active).next();
                    if (!prevDot.length) {
                        prevDot = _this3.$dotsItem.first();
                    }
    
                    _this3.reverseAnim = true;
                    prevDot.trigger('click');
                });
            }
    
            /**
       *
       * @param {Number} direction - number of slide
       */
    
        }, {
            key: 'changeSlide',
            value: function changeSlide(direction) {
                var _this4 = this;
    
                var _this = this;
                var currentSlide = this.$item.filter(':visible');
                var delay = 0;
                if (_helpers.Resp.isDesk) {
                    delay = this.animSlide();
                }
    
                setTimeout(function () {
                    var tl = new _gsap.TimelineMax();
    
                    if (_helpers.Resp.isDesk) {
                        currentSlide.hide();
    
                        _this4.$item.eq(direction).show().find(_this4.el + '__item-text-paragraph').trigger('update.dot');
                    } else {
                        var anim = function anim(el) {
                            tl.vars.onComplete = function () {
                                return _this4;
                            };
                            _gsap.TweenMax.set(el, {
                                y: 80,
                                alpha: 0
                            });
    
                            var nextSlideItem = el.parent().parent(),
                                $dotText = nextSlideItem.find('.slider__item-text-paragraph');
    
                            nextSlideItem.addClass(_helpers.css.active).show();
                            $dotText.length ? $dotText.trigger('update.dot') : null;
    
                            tl.to(el.parent().next(), 0.5, {
                                alpha: 1,
                                ease: Power1.easeInOut
                            }).staggerTo(el, 0.8, {
                                y: 0,
                                x: 0,
                                ease: Power4.easeOut,
                                onStart: function onStart() {
                                    _gsap.TweenMax.to($(this.target), 0.25, {
                                        alpha: 1,
                                        ease: Power2.easeIn
                                    });
                                }
                            }, 0.100, 0.5);
                        };
    
                        var animReverse = function animReverse(el) {
                            return new Promise(function (resolve) {
                                tl.to(el.parent().next(), 0.3, {
                                    alpha: 0,
                                    ease: Power1.easeInOut
                                }, 0).staggerTo(el, 0.2, {
                                    y: -20,
                                    alpha: 0,
                                    ease: Power1.easeIn
                                }, 0.100 / 2, 0);
    
                                tl.vars.onComplete = function () {
                                    el.parent().parent().hide();
                                    resolve();
                                };
                            });
                        };
    
                        animReverse(currentSlide.find(_this4.el + '__item-text').children()).then(function () {
                            anim(_this4.$item.eq(direction).find(_this4.el + '__item-text').children());
                        });
                    }
                }, delay * 1000);
            }
        }, {
            key: 'prepareSlider',
            value: function prepareSlider(el) {
                var _this5 = this;
    
                this.$slider = $(el);
                this.$inner = this.$slider.find(this.el + '__inner');
                this.$item = this.$slider.find(this.el + '__item');
                this.$bg = this.$slider.find(this.el + '__bg');
                this.$paragraph = this.$slider.find(this.el + '__item-text-paragraph');
                this.itemLength = this.$item.length;
                this.$anim = this.$slider.find(this.el + '__anim');
    
                // this.initDotDotDot();
    
                if (this.itemLength < 2) return;
    
                this.initDots();
                this.initArrows();
                setTimeout(function () {
                    _this5.$item.eq(0).addClass(_helpers.css.active).nextAll().hide();
                }, 100);
                this.$slider.addClass(_helpers.css.init);
                this.initScrollAnim(this.$inner, this.$bg);
            }
    
            /**
       *
       * @return {number} time of half anim duration
       */
    
        }, {
            key: 'animSlide',
            value: function animSlide() {
                var _this6 = this;
    
                var $circle = this.$anim.find('circle');
                var tl = new _gsap.TimelineMax({ paused: true });
                var tlReverse = new _gsap.TimelineMax({ paused: true });
                var speed = 1.25;
    
                $circle.attr({
                    cx: 45,
                    cy: 196,
                    r: 14,
                    'stroke-width': 14
                });
    
                tl.add('start').to($circle.eq(0), speed, {
                    attr: {
                        'stroke-width': 451,
                        r: 1100
                    },
                    ease: Power2.easeInOut
                }, 'start').to($circle.eq(1), speed, {
                    attr: {
                        'stroke-width': 351,
                        r: 750
                    },
                    ease: Power2.easeInOut
                }, 'start+=0.15').to($circle.eq(2), speed, {
                    attr: {
                        'stroke-width': 451,
                        r: 400
                    },
                    ease: Power2.easeInOut
                }, 'start+=0.3').to($circle.eq(3), speed, {
                    attr: {
                        'stroke-width': 301,
                        r: 50
                    },
                    ease: Power2.easeInOut
                }, 'start+=0.45');
    
                tlReverse.staggerTo($circle.toArray().reverse(), speed / 2, {
                    attr: {
                        'stroke-width': 0,
                        r: '+=200'
                    },
                    ease: Power1.easeIn
                }, 0.15);
    
                var timeToNext = tl.duration() * 3 / 4;
                tlReverse.vars.onComplete = function () {
                    _this6.flagPlay = false;
                };
                tl.vars.onStart = function () {
                    _this6.flagPlay = true;
                    setTimeout(function () {
                        tlReverse.play();
                    }, timeToNext * 1000);
                };
                tl.play();
    
                return timeToNext;
            }
        }, {
            key: 'initDots',
            value: function initDots() {
                var _this7 = this;
    
                var $dotsContainer = this.$slider.find(this.el + '__controls-dots');
                var $dots = $('<div></div>', { class: this.el.substr(1) + '__dots dots dots_turquoise' });
                this.$dotsItem = $('<div></div>', { class: 'dots__item' });
                var $dotsItemIn = $('<div></div>', { class: 'dots__item-in' });
                var tl = new _gsap.TimelineMax();
                var icon = '\n\t\t\t<div class="icon">\n\t\t\t\t<svg viewBox="0 0 8 8">\n\t\t\t\t\t<path d="M8,1.6L6.1,0C5.6,0.5,4.8,0.7,4,0.7C3.2,0.7,2.4,0.5,1.9,0L0,1.6C1,2.5,2.4,3,4,3C5.6,3,7,2.5,8,1.6z"/>\n\t\t\t\t</svg>\n\t\t\t</div>';
                this.$item.each(function (index, el) {
                    if (index === 0) return;
    
                    $(el).find('[data-anim-stagger]').removeAttr('data-anim-stagger');
                });
                $dots.appendTo($dotsContainer);
                for (var i = 0, len = this.$item.length; i < len; i++) {
                    this.$dotsItem.clone().wrapInner($dotsItemIn.clone().wrapInner($(icon))).appendTo($dots);
                }
                this.$dotsItem = $dots.children();
                this.$dotsItem.eq(0).addClass(_helpers.css.active);
                this.$inner.eq(0).addClass(_helpers.css.active);
    
                this.$dotsItem.on('click', function (e) {
                    e.preventDefault();
                    if (_this7.flagPlay) return;
                    var $this = $(e.currentTarget);
                    var index = $this.index();
    
                    _gsap.TweenMax.set(_this7.$anim, { rotation: 0 });
                    if (_this7.$dotsItem.filter('.' + _helpers.css.active).index() === _this7.itemLength - 1 && index === 0 && _this7.reverseAnim) {
                        _gsap.TweenMax.set(_this7.$anim, { rotation: 180 });
                    } else if (_this7.$dotsItem.filter('.' + _helpers.css.active).index() === 0 && index === _this7.$item.length - 1 && _this7.reverseAnim) {
                        _gsap.TweenMax.set(_this7.$anim, { rotation: 0 });
                    } else if (index > _this7.$dotsItem.filter('.' + _helpers.css.active).index()) {
                        _gsap.TweenMax.set(_this7.$anim, { rotation: 180 });
                    }
    
                    _this7.reverseAnim = false;
    
                    if (!$this.hasClass(_helpers.css.active)) {
                        _this7.$dotsItem.removeClass(_helpers.css.active);
                        $this.addClass(_helpers.css.active);
                        _this7.changeSlide(index);
                    }
                });
            }
        }, {
            key: 'initScrollAnim',
            value: function initScrollAnim($container, $anim) {
                var func = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    
                new _scrollTriggerAnimations2.default({
                    container: $container.get(0),
                    onStart: function onStart() {
                        setTimeout(function () {
                            if (func) {
                                func();
                            } else {
                                $anim.addClass(_helpers.css.anim);
                            }
                        }, 200);
                    }
                });
            }
        }]);
    
        return Slider;
    }();
    
    exports.default = new Slider();
    
    /***/ }),
    /* 380 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _helpers = __webpack_require__(3);
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var Filters = function () {
        function Filters() {
            _classCallCheck(this, Filters);
    
            this.$filterContent = $('.filters__item__container');
    
            this.init();
        }
    
        _createClass(Filters, [{
            key: 'initContainerType',
            value: function initContainerType() {
                if (this.$filterContent.length > 0) {
                    this.$filterContent.each(function (index, el) {
                        var $el = $(el),
                            $containerCheckItems = void 0;
    
                        $containerCheckItems = $el.find('.filters__item__checkbox');
                        $containerCheckItems.length < 9 ? $el.addClass('filters__item__container_single') : null;
                    });
                }
            }
        }, {
            key: 'filtersTab',
            value: function filtersTab() {
                var $dropper = $('.js-dropper'),
                    $dropEl = $('.js-drop-in'),
                    $label = $dropEl.next(),
                    $tab = $('.filters__item'),
                    $checkInput = $tab.find('input');
    
                $tab.on('click tap', function () {
                    var $this = $(this);
    
                    if (!$this.hasClass('active')) {
                        $tab.removeClass('active');
                        $this.addClass('active');
                    } else {
                        $this.removeClass('active');
                    }
                });
    
                $checkInput.on('change', function (e) {
                    var $this = $(this),
                        $parentTitle = $this.closest('.filters__item__container').siblings('.filters__item__link'),
                        textTarget = $parentTitle.find('span'),
                        defaultText = $parentTitle.attr('data-inner'),
                        countChecked = $this.closest('.filters__item__container').find('input:checked').length;
    
                    if (countChecked >= 1) {
                        textTarget.text(defaultText + ' ( ' + countChecked + ' selected )');
                        if (_helpers.Resp.isTablet || _helpers.Resp.isMobile) textTarget.text(defaultText + ' (' + countChecked + ')');
                    } else {
                        textTarget.text('' + defaultText);
                    }
                });
    
                _helpers.$document.mouseup(function (e) {
                    var container = $tab;
    
                    if (container.has(e.target).length === 0) {
                        $tab.removeClass('active');
                    }
                });
    
                $dropper.parent().on('click tap', function (e) {
                    if (!$(this).children('input').hasClass('active')) {
                        $dropper.removeClass('active');
                        $(this).children('input').addClass('active');
                    } else {
                        $dropper.removeClass('active');
                    }
                });
    
                _helpers.$document.mouseup(function (e) {
                    var container = $('.form__item__container');
    
                    // if (container.has(e.target).length === 0) {
                    if (!$dropper.parent().filter(e.target).length && !$dropper.parent().find(e.target).length) {
                        $dropper.removeClass('active');
                    }
                });
    
                $label.on('click tap', function () {
                    var $this = $(this),
                        label = $this.parents('.form-group').children('label'),
                        span = label.find('span'),
                        defaultText = label.attr('data-inner'),
                        $input = $this.prev();
    
                    if ($input.attr('type') === 'radio') {
                        if ($input.prop('checked')) {
                            $input.prop('checked', false);
                            span.text('' + defaultText);
                            return false;
                        } else {
                            span.text(defaultText + ' ( 1 selected)');
                        }
                    }
                });
    
                $dropEl.on('change', function (e) {
                    var _this = $(this);
    
                    var label = _this.parents('.form-group').children('label');
                    var span = label.find('span');
                    var defaultText = label.attr('data-inner');
                    var countChecked = _this.parents('.form__item__container').find('input:checked').length;
    
                    if (_this.attr('type') !== 'radio') {
                        if (countChecked >= 1) {
                            span.text(defaultText + ' ( ' + countChecked + ' selected )');
                        } else {
                            span.text('' + defaultText);
                        }
                    }
                });
            }
        }, {
            key: 'checkActive',
            value: function checkActive() {
                var $checkContainer = $('.form__item__container'),
                    $checkContainer2 = $('.filters__item__container');
    
                $checkContainer.each(function (index2, item2) {
                    var $container = $(item2),
                        defaulttext = $container.siblings('.form-input-label').attr('data-inner'),
                        $label = $container.siblings('.form-input-label').find('span'),
                        $inputs = $container.find('input'),
                        count = 0;
    
                    $inputs.each(function (index, item) {
                        var $this = $(item);
    
                        if ($this.attr("checked")) {
                            count++;
                        }
                    });
    
                    if (count !== 0) {
                        $label.text(defaulttext + ' ( ' + count + ' selected )');
                    }
                });
    
                $checkContainer2.each(function (index2, item2) {
                    var $container = $(item2).siblings('.filters__item__link'),
                        defaulttext = $container.attr('data-inner'),
                        $label = $container.find('span'),
                        $inputs = $(item2).find('input'),
                        count = 0;
    
                    $inputs.each(function (index, item) {
                        var $this = $(item);
    
                        if ($this.attr("checked")) {
                            count++;
                        }
                    });
    
                    if (count !== 0) {
                        $label.text(defaulttext + ' ( ' + count + ' selected)');
                        if (_helpers.Resp.isTablet || _helpers.Resp.isMobile) $label.text(defaulttext + ' (' + count + ')');
                    }
                });
            }
        }, {
            key: 'init',
            value: function init() {
                this.filtersTab();
                this.initContainerType();
                this.checkActive();
            }
        }]);
    
        return Filters;
    }();
    
    exports.default = new Filters();
    
    /***/ }),
    /* 381 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _link = __webpack_require__(21);
    
    var _link2 = _interopRequireDefault(_link);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var FooterBlock = function () {
        function FooterBlock() {
            _classCallCheck(this, FooterBlock);
    
            this.$footer = $('.footer');
            this.$circleBtn = this.$footer.find('.footer__top-nav a');
            this.$circleSingleBtn = this.$footer.find('.footer__top-controls a');
    
            this.init();
        }
    
        _createClass(FooterBlock, [{
            key: 'init',
            value: function init() {
                this.initCircleBtn();
            }
        }, {
            key: 'initCircleBtn',
            value: function initCircleBtn() {
                new _link2.default(this.$circleBtn);
                new _link2.default(this.$circleSingleBtn, {
                    type: 'single'
                });
            }
        }]);
    
        return FooterBlock;
    }();
    
    exports.default = new FooterBlock();
    
    /***/ }),
    /* 382 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _helpers = __webpack_require__(3);
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var Form = function () {
        function Form() {
            _classCallCheck(this, Form);
    
            this.$form = $('.form');
            this.$input = this.$form.find('.form-input');
            this.$textarea = this.$form.find('.form-textarea');
    
            this.init();
        }
    
        _createClass(Form, [{
            key: 'init',
            value: function init() {
                this.checkFill();
                this.resizeTextarea();
                this.removeError();
                this.jobFormInputControls();
            }
        }, {
            key: 'resizeTextarea',
            value: function resizeTextarea() {
                $.each(this.$textarea, function () {
                    var resizeTextarea = function resizeTextarea(el) {
                        $(el).css('height', '').css('height', el.scrollHeight);
                    };
                    resizeTextarea(this);
                    $(this).on('keyup input', function () {
                        resizeTextarea(this);
                    });
                });
            }
        }, {
            key: 'checkFill',
            value: function checkFill() {
                this.$input.add(this.$textarea).each(function () {
                    checkInput($(this));
                });
                this.$input.add(this.$textarea).blur(function () {
                    checkInput($(this));
                });
    
                function checkInput(el) {
                    if (el.val() !== '') {
                        el.addClass(_helpers.css.fill);
                    } else {
                        el.removeClass(_helpers.css.fill);
                    }
                }
            }
        }, {
            key: 'jobFormInputControls',
            value: function jobFormInputControls() {
                var $inputFile = $('.input-file');
    
                checkInputTypeFile($inputFile);
    
                function checkInputTypeFile(input) {
                    input.on("change", function () {
                        var $this = $(this);
    
                        $this.get(0).files.length !== 0 ? $this.addClass('not-empty') : $this.removeClass('not-empty');
                    });
    
                    input.on("click", function (e) {
                        var $this = $(this);
    
                        if ($this.get(0).files.length !== 0) {
                            e.preventDefault();
    
                            $this.replaceWith(input.val('').clone(true).removeClass('not-empty'));
                            // refresh variables and func:
                            $inputFile = $('.input-file');
                            checkInputTypeFile($inputFile);
                        }
                    });
                }
            }
        }, {
            key: 'removeError',
            value: function removeError() {
                this.$input.add(this.$textarea).on('click focus', function (ev) {
                    $(ev.currentTarget).parent().removeClass(_helpers.css.error);
                });
            }
        }]);
    
        return Form;
    }();
    
    exports.default = new Form();
    
    /***/ }),
    /* 383 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.HeaderAPI = undefined;
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _gsap = __webpack_require__(12);
    
    __webpack_require__(52);
    
    __webpack_require__(149);
    
    var _helpers = __webpack_require__(3);
    
    var _link = __webpack_require__(21);
    
    var _link2 = _interopRequireDefault(_link);
    
    var _preloader = __webpack_require__(78);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var Header = function () {
        function Header() {
            _classCallCheck(this, Header);
    
            this.header = '.header';
            this.$header = $('.header');
            this.$menuBtn = $('.header__menu');
            this.$logo = this.$header.find('.header__logo-icon');
            this.$nav = this.$header.find('.header__nav');
            this.$link = this.$header.find('.header__nav > ul > li > a');
            this.$linkMobSubmenu = this.$header.find('.header__nav > ul > li > a:not(.disabled)');
            this.$closeBtn = this.$header.find('.header__search-close');
            this.$searchBtn = this.$header.find('.header__search-btn');
            this.$form = this.$header.find('.header__form');
            this.$searchInput = this.$form.find('.form-input');
            this.$submitBtn = this.$form.find('.form-submit-search');
            this.submitBtnFlag = false;
    
            this.init();
        }
    
        _createClass(Header, [{
            key: 'init',
            value: function init() {
                var _this2 = this;
    
                this.initToggle();
                this.createCloseBtn();
                this.fixLinks();
    
                if (_helpers.Resp.isDesk) {
                    this.initSearch();
                    this.initSubNav();
                    new _link2.default(this.$link, { state: 'header' });
                }
    
                if (!_helpers.Resp.isDesk) {
                    this.prepareMobileMenu();
                    this.initMenuBtn();
                    this.initMobileMenu();
                }
    
                _preloader.PreloaderAPI.wait().then(function () {
                    _this2.startAnim();
                });
            }
        }, {
            key: 'fixLinks',
            value: function fixLinks() {
                var _this3 = this;
    
                var isTouchDevice = 'ontouchstart' in window || navigator.msMaxTouchPoints;
    
                if (isTouchDevice && _helpers.Resp.isDesk) {
                    this.$link.on('click', function (e) {
                        $(e.currentTarget).parent().siblings().children().removeClass(_helpers.css.init);
                        if (!$(e.currentTarget).hasClass(_helpers.css.init) && $(e.currentTarget).siblings('ul').length) e.preventDefault();
                        $(e.currentTarget).addClass(_helpers.css.init);
                    });
                }
    
                _helpers.$window.on('click', function (e) {
                    if (!(0, _helpers.checkClosest)(e, _this3.$link)) _this3.$link.removeClass(_helpers.css.init);
                });
            }
        }, {
            key: 'prepareMobileMenu',
            value: function prepareMobileMenu() {
                var _this4 = this;
    
                this.$subnav = this.$link.siblings('ul');
    
                this.$nav.appendTo($(this.header + '__mobile-nav').children());
                this.$subnav.appendTo($(this.header + '__mobile-subnav').children());
                this.$searchBtn.appendTo(this.$nav.children());
                this.$form.appendTo(this.$nav.children());
    
                // like at desktop behaviour, just make list shorten and add more-btn:
                this.$subnav.each(function (index, item) {
                    _this4.setupMoreBtn($(item));
                });
                // duplicate parent link to sub-menu< just because of
                // on mobile main nav is just a toggler for sub-menu, not a real link:
                this.$linkMobSubmenu.each(function (index, item) {
                    var $item = $(item);
                    var $subMenu = _this4.$subnav.eq($item.parent().index());
                    var $li = $('<li></li>');
    
                    $li.append($item.clone());
                    $subMenu.prepend($li);
                });
            }
        }, {
            key: 'initMobileMenu',
            value: function initMobileMenu() {
                var _this5 = this;
    
                this.$menuBtn.on('click', function () {
                    _this5.openMobileMenu();
                });
    
                this.$closeBtn.on('click', function () {
                    _this5.closeMobileMenu();
                });
    
                this.$searchBtn.on('click', function () {
                    _this5.$link.parent().removeClass(_helpers.css.active);
                    _this5.$nav.children().removeClass(_helpers.css.active);
                    _this5.$subnav.removeClass(_helpers.css.active).parent().parent().removeClass(_helpers.css.active);
                    _this5.$form.fadeToggle();
                });
    
                this.$linkMobSubmenu.on('click', function (e) {
                    e.preventDefault();
    
                    var $currentTarget = $(e.currentTarget);
                    var $sublist = $currentTarget.siblings('ul');
    
                    if ($currentTarget.parent().hasClass(_helpers.css.active)) {
                        $currentTarget.parent().removeClass(_helpers.css.active).parent().removeClass(_helpers.css.active);
                        _this5.$subnav.removeClass(_helpers.css.active).parent().parent().removeClass(_helpers.css.active);
    
                        return;
                    }
    
                    _this5.$subnav.removeClass(_helpers.css.active).eq($currentTarget.parent().index()).addClass(_helpers.css.active).parent().parent().addClass(_helpers.css.active);
    
                    _this5.$link.parent().removeClass(_helpers.css.active).find('ul').removeClass(_helpers.css.active);
                    $currentTarget.parent().addClass(_helpers.css.active).parent().addClass(_helpers.css.active);
                    $sublist.addClass(_helpers.css.active);
                });
            }
        }, {
            key: 'openMobileMenu',
            value: function openMobileMenu() {
                var _this6 = this;
    
                var _this = this;
    
                this.beforeOpen();
                this.$menuBtn.fadeOut(function () {
                    _this6.$closeBtn.fadeIn();
                    _helpers.$body.addClass(_helpers.css.menuActive);
                });
                this.$header.addClass(_helpers.css.white).addClass(_helpers.css.menuActive);
                this.$nav.show();
                _gsap.TweenMax.staggerTo(this.$link.parent(), 0.3, {
                    alpha: 1,
                    y: 0,
                    delay: 0.1,
                    ease: Power1.easeOut,
                    onComplete: function onComplete() {
                        _gsap.TweenMax.to(_this.$searchBtn, 0.3, {
                            alpha: 1,
                            y: 0,
                            delay: 0.05,
                            ease: Power1.easeOut
                        });
                    }
                }, 0.05);
    
                if (!this.$header.hasClass(_helpers.css.active)) {
                    setTimeout(function () {
                        _this6.$header.addClass(_helpers.css.active);
                        new _link2.default(_this6.$link, { type: 'single' });
                    }, 0);
                }
            }
        }, {
            key: 'closeMobileMenu',
            value: function closeMobileMenu() {
                var _this7 = this;
    
                _helpers.$body.removeClass(_helpers.css.menuActive);
                this.beforeClose();
                this.$closeBtn.fadeOut(function () {
                    _this7.$menuBtn.fadeIn();
                });
                this.$header.removeClass(_helpers.css.white);
                this.$link.parent().removeClass(_helpers.css.active);
                this.$nav.hide().children().removeClass(_helpers.css.active);
                this.$subnav.removeClass(_helpers.css.active).parent().parent().removeClass(_helpers.css.active);
                _gsap.TweenMax.set([this.$link.parent(), this.$searchBtn], {
                    alpha: 0,
                    y: -20
                });
                this.$form.hide();
                if (_helpers.$window.scrollTop() > 5) {
                    this.$header.addClass(_helpers.css.blue);
                }
            }
        }, {
            key: 'beforeOpen',
            value: function beforeOpen() {
                this.scrollTop = _helpers.$window.scrollTop();
            }
        }, {
            key: 'beforeClose',
            value: function beforeClose() {
                var _this8 = this;
    
                _helpers.$scrolledElements.scrollTop(this.scrollTop);
                setTimeout(function () {
                    _this8.$header.removeClass(_helpers.css.menuActive);
                }, 0);
            }
    
            /**
       * Hide header on scroll down.
       */
    
        }, {
            key: 'initToggle',
            value: function initToggle() {
                var _this9 = this;
    
                var lastScrollTop = _helpers.$window.scrollTop();
                var $header = this.$header;
                var delta = 5;
                var headerHeight = $header.height();
    
                var checkWithThrottle = (0, _helpers.throttle)(function () {
                    var scrollTop = _helpers.$window.scrollTop();
    
                    // not enough scroll!!..
                    if (Math.abs(lastScrollTop - scrollTop) <= delta) return;
    
                    if (scrollTop <= delta) {
                        $header.removeClass(_helpers.css.blue);
                    }
    
                    if (scrollTop > lastScrollTop && scrollTop > headerHeight && !_this9.$header.hasClass(_helpers.css.menuActive)) {
                        $header.addClass(_helpers.css.hide).addClass(_helpers.css.blue);
                    } else if (scrollTop + _helpers.$window.height() < _helpers.$document.height()) {
                        $header.removeClass(_helpers.css.hide);
                    }
    
                    lastScrollTop = scrollTop;
                }, 50, this);
    
                _helpers.$window.on('scroll', checkWithThrottle);
    
                return this;
            }
        }, {
            key: 'initSubNav',
            value: function initSubNav() {
                var _this10 = this;
    
                this.$link.parent().on('mouseenter', function (e) {
                    var sleep = false;
                    var $currentTarget = $(e.currentTarget);
    
                    $currentTarget.on('mouseleave', function () {
                        sleep = true;
                    });
    
                    setTimeout(function () {
                        if (!sleep) {
                            $currentTarget.siblings('.' + _helpers.css.active).removeClass(_helpers.css.active);
                            $currentTarget.siblings().find('ul').removeClass(_helpers.css.active);
                            $currentTarget.find('ul').addClass(_helpers.css.active);
    
                            if (!$currentTarget.find('ul').hasClass(_helpers.css.anim)) {
                                _this10.setupMoreBtn($currentTarget.find('ul'));
                            }
    
                            _this10.$header.addClass(_this10.header.substr(1) + '_nav');
                            _this10.addHeaderWhite();
                        }
                    }, 100);
                });
    
                this.$header.on('mouseleave', function () {
                    _this10.$link.parent().filter('.' + _helpers.css.active).removeClass(_helpers.css.active);
    
                    _this10.$link.parent().find('ul').removeClass(_helpers.css.active);
                    if (_this10.$header.hasClass(_this10.header.substr(1) + '_nav')) {
                        _this10.removeHeaderWhite();
                        _this10.$header.removeClass(_this10.header.substr(1) + '_nav');
                    }
                });
            }
    
            /**
       * Expected sub-menu <ul> as $container
       * @param {jQuery} $container
       */
    
        }, {
            key: 'setupMoreBtn',
            value: function setupMoreBtn($container) {
                var urlMore = $container.data('more-url'),
                    textMore = $container.data('more-text'),
                    hideIndex = $container.data('hide-index'),
                    htmlMore = '<li class="more ' + (!_helpers.Resp.isDesk ? 'more-btn' : '') + '">\n                    <a href="' + urlMore + '" data-hover="' + textMore + '">\n                      <span>' + textMore + '</span>\n                    </a>\n                  </li>',
                    $htmlMore = $(htmlMore),
                    listItems = $container.find('li'),
                    listCount = listItems.length;
    
                new _link2.default($container.find('a'));
                $container.addClass(_helpers.css.anim);
    
                if (hideIndex < listCount) {
                    $container.append($htmlMore);
                    new _link2.default($htmlMore.children());
                    hideLink();
                }
    
                function hideLink() {
                    if (hideIndex < listCount) {
                        listItems.eq(hideIndex).addClass(_helpers.css.hide);
                        hideIndex++;
                        hideLink();
                    }
                }
            }
        }, {
            key: 'addHeaderWhite',
            value: function addHeaderWhite() {
                this.$header.addClass(this.header.substr(1) + '_white');
            }
        }, {
            key: 'removeHeaderWhite',
            value: function removeHeaderWhite() {
                this.$header.removeClass(this.header.substr(1) + '_white');
            }
        }, {
            key: 'initSearch',
            value: function initSearch() {
                var _this11 = this;
    
                var _this = this;
                var $nav = this.$nav;
                var $form = this.$form;
                var $searchBtn = this.$searchBtn;
                var $closeBtn = this.$closeBtn;
                var searchOpenTl = new _gsap.TimelineMax({ paused: true, onComplete: function onComplete() {
                        _this.$searchInput.focus();
                    }
                });
                var searchHideTl = new _gsap.TimelineMax({ paused: true });
                var speed = 0.5;
    
                $searchBtn.on('click', function () {
                    _this11.$link.parent().filter('.' + _helpers.css.active).removeClass(_helpers.css.active);
                    _this11.$link.parent().find('ul').removeClass(_helpers.css.active);
    
                    _this11.$header.removeClass(_this11.header.substr(1) + '_nav');
                    searchOpenTl.progress(0);
                    searchOpenTl.play();
                    _this11.addHeaderWhite();
                });
    
                $closeBtn.on('click', function () {
                    _this11.$header.removeClass(_this11.header.substr(1) + '_nav');
                    searchHideTl.progress(0);
                    searchHideTl.play();
                    _this11.removeHeaderWhite();
                });
    
                searchOpenTl.to([$nav, $searchBtn], speed, {
                    y: '-100%',
                    ease: Power1.easeIn,
                    onComplete: function onComplete() {
                        $(this.target).each(function (index, el) {
                            $(el).hide();
                        });
    
                        $form.add($closeBtn).show();
    
                        if (!_this.submitBtnFlag) {
                            _this.submitBtnFlag = true;
                            new _link2.default(_this.$submitBtn, { type: 'single' });
                        }
                    }
                }).set([$form, $closeBtn], { alpha: 0, y: '-100%' }).to([$form, $closeBtn], speed, {
                    alpha: 1,
                    y: '0%',
                    ease: Power1.easeOut
                });
    
                searchHideTl.to([$form, $closeBtn], speed, {
                    alpha: 0,
                    y: '-100%',
                    ease: Power1.easeIn,
                    onComplete: function onComplete() {
                        $(this.target).each(function (index, el) {
                            $(el).hide();
                        });
                        $nav.add($searchBtn).show();
                    }
                }).to([$nav, $searchBtn], speed, {
                    alpha: 1,
                    y: '0%',
                    ease: Power1.easeOut
                });
            }
        }, {
            key: 'startAnim',
            value: function startAnim() {
                var _this12 = this;
    
                var speed = 0.5;
                var tl = new _gsap.TimelineMax();
                var tlLogo = new _gsap.TimelineMax();
                var tlControls = new _gsap.TimelineMax();
    
                // logo animation
                tlLogo.fromTo(this.$logo, speed * 3 / 2, {
                    y: '-100%'
                }, {
                    y: '0%',
                    ease: Power1.easeOut,
                    onComplete: function onComplete() {
                        $(this.target).parent().css('overflow', 'visible');
                    }
                });
    
                // controls animation
                tlControls.set([this.$nav, this.$searchBtn], { y: '-100%' }).to([this.$nav, this.$searchBtn], speed * 3 / 2, {
                    y: '0%',
                    ease: Power1.easeOut
                });
    
                tl.addLabel('go', 0).set(this.$header, { alpha: 1 }).add(tlControls, 'go').add(tlLogo, 'go+=0.5').add(function () {
                    _this12.$header.addClass(_helpers.css.anim);
                });
    
                tl.play();
    
                if (_helpers.$window.scrollTop() > 0) {
                    this.$header.removeClass(_helpers.css.hide).addClass(_helpers.css.blue);
                }
            }
        }, {
            key: 'initMenuBtn',
            value: function initMenuBtn() {
                new _link2.default(this.$menuBtn, {
                    type: 'menu'
                });
            }
        }, {
            key: 'createCloseBtn',
            value: function createCloseBtn() {
                new _link2.default(this.$closeBtn, { type: 'close' });
            }
        }]);
    
        return Header;
    }();
    
    var HeaderAPI = exports.HeaderAPI = new Header();
    
    /***/ }),
    /* 384 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    __webpack_require__(385);
    
    var _googleMaps = __webpack_require__(386);
    
    var _googleMaps2 = _interopRequireDefault(_googleMaps);
    
    var _helpers = __webpack_require__(3);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var mapStyle = [{
        "featureType": "all",
        "elementType": "all",
        "stylers": [{
            "hue": "#ff0000"
        }]
    }, {
        "featureType": "administrative",
        "elementType": "geometry.fill",
        "stylers": [{
            "visibility": "off"
        }]
    }, {
        "featureType": "administrative",
        "elementType": "geometry.stroke",
        "stylers": [{
            "visibility": "off"
        }]
    }, {
        "featureType": "administrative",
        "elementType": "labels",
        "stylers": [{
            "visibility": "off"
        }]
    }, {
        "featureType": "administrative.country",
        "elementType": "geometry",
        "stylers": [{
            "weight": "1.00"
        }]
    }, {
        "featureType": "administrative.country",
        "elementType": "geometry.fill",
        "stylers": [{
            "visibility": "off"
        }, {
            "color": "#ffffff"
        }]
    }, {
        "featureType": "administrative.country",
        "elementType": "geometry.stroke",
        "stylers": [{
            "visibility": "on"
        }, {
            "color": "#2e3a4d"
        }, {
            "gamma": "1"
        }, {
            "weight": "1"
        }, {
            "saturation": "0"
        }, {
            "lightness": "0"
        }]
    }, {
        "featureType": "administrative.country",
        "elementType": "labels.text",
        "stylers": [{
            "visibility": "on"
        }, {
            "weight": "0.01"
        }, {
            "lightness": "91"
        }]
    }, {
        "featureType": "administrative.country",
        "elementType": "labels.text.fill",
        "stylers": [{
            "visibility": "off"
        }, {
            "weight": "1.00"
        }]
    }, {
        "featureType": "administrative.country",
        "elementType": "labels.text.stroke",
        "stylers": [{
            "saturation": "62"
        }, {
            "lightness": "-20"
        }, {
            "gamma": "0.00"
        }, {
            "color": "#2e3a4d"
        }, {
            "weight": "0.20"
        }]
    }, {
        "featureType": "administrative.province",
        "elementType": "geometry.stroke",
        "stylers": [{
            "visibility": "on"
        }, {
            "color": "#2e3a4d"
        }, {
            "weight": "0.75"
        }]
    }, {
        "featureType": "administrative.locality",
        "elementType": "geometry.fill",
        "stylers": [{
            "visibility": "simplified"
        }]
    }, {
        "featureType": "administrative.locality",
        "elementType": "geometry.stroke",
        "stylers": [{
            "visibility": "off"
        }]
    }, {
        "featureType": "administrative.land_parcel",
        "elementType": "all",
        "stylers": [{
            "visibility": "simplified"
        }]
    }, {
        "featureType": "landscape",
        "elementType": "geometry",
        "stylers": [{
            "visibility": "on"
        }, {
            "color": "#e3e3e3"
        }]
    }, {
        "featureType": "landscape",
        "elementType": "geometry.fill",
        "stylers": [{
            "color": "#236373"
        }]
    }, {
        "featureType": "landscape.natural",
        "elementType": "labels",
        "stylers": [{
            "visibility": "off"
        }]
    }, {
        "featureType": "poi",
        "elementType": "all",
        "stylers": [{
            "visibility": "off"
        }]
    }, {
        "featureType": "road",
        "elementType": "all",
        "stylers": [{
            "color": "#cccccc"
        }]
    }, {
        "featureType": "road",
        "elementType": "geometry.fill",
        "stylers": [{
            "color": "#454f5f"
        }, {
            "weight": "0.40"
        }]
    }, {
        "featureType": "road",
        "elementType": "geometry.stroke",
        "stylers": [{
            "color": "#2e3a4d"
        }, {
            "visibility": "off"
        }]
    }, {
        "featureType": "road",
        "elementType": "labels",
        "stylers": [{
            "visibility": "off"
        }]
    }, {
        "featureType": "road",
        "elementType": "labels.text",
        "stylers": [{
            "visibility": "on"
        }, {
            "weight": "0.05"
        }, {
            "color": "#2d353f"
        }, {
            "gamma": "1"
        }]
    }, {
        "featureType": "road.highway",
        "elementType": "geometry.fill",
        "stylers": [{
            "visibility": "on"
        }, {
            "weight": "0"
        }]
    }, {
        "featureType": "road.highway",
        "elementType": "geometry.stroke",
        "stylers": [{
            "visibility": "off"
        }, {
            "weight": "0.00"
        }]
    }, {
        "featureType": "transit",
        "elementType": "geometry.fill",
        "stylers": [{
            "hue": "#ff0000"
        }]
    }, {
        "featureType": "transit",
        "elementType": "labels.icon",
        "stylers": [{
            "visibility": "off"
        }]
    }, {
        "featureType": "transit.line",
        "elementType": "geometry",
        "stylers": [{
            "visibility": "off"
        }]
    }, {
        "featureType": "transit.line",
        "elementType": "labels.text",
        "stylers": [{
            "visibility": "off"
        }]
    }, {
        "featureType": "transit.station.airport",
        "elementType": "geometry",
        "stylers": [{
            "visibility": "off"
        }]
    }, {
        "featureType": "transit.station.airport",
        "elementType": "labels",
        "stylers": [{
            "visibility": "off"
        }]
    }, {
        "featureType": "water",
        "elementType": "geometry",
        "stylers": [{
            "color": "#FFFFFF"
        }]
    }, {
        "featureType": "water",
        "elementType": "geometry.fill",
        "stylers": [{
            "color": "#2e3a4d"
        }]
    }, {
        "featureType": "water",
        "elementType": "labels",
        "stylers": [{
            "visibility": "off"
        }]
    }],
        mapSettings = [];
    
    var GoogleMap = function () {
        function GoogleMap() {
            _classCallCheck(this, GoogleMap);
    
            this.$map = $('.google-map');
    
            this.init();
        }
    
        _createClass(GoogleMap, [{
            key: 'init',
            value: function init() {
                if (this.$map.length) {
                    this.initMap();
                }
            }
        }, {
            key: 'initMap',
            value: function initMap() {
                var $countryTab = $('.country__item');
    
                if (this.$map.length) {
                    var dataJSON = this.$map.data('map');
    
                    // If programmers want to specify the initial zoom and map coordinates:
                    if (dataJSON.center) {
                        mapSettings.center = dataJSON.center;
                    }
                    if (dataJSON.zoom) {
                        mapSettings.zoom = dataJSON.zoom;
                    }
    
                    mapSettings.minZoom = 2;
                    mapSettings.maxZoom = 18;
                    mapSettings.styles = mapStyle;
                    mapSettings.scrollwheel = false;
    
                    // Clusters settings:
                    mapSettings.clusters = {
                        gridSize: 20,
                        styles: [{
                            url: dataJSON.clusterIcon,
                            height: dataJSON.clusterIconHeight,
                            width: dataJSON.clusterIconWidth,
                            anchor: [0, 0],
                            textColor: '#344152',
                            textSize: 10
                        }]
                    };
    
                    _googleMaps2.default.KEY = dataJSON.key + '&language=' + dataJSON.lang;
    
                    _googleMaps2.default.load(function (google) {
                        var map = new google.maps.Map(document.getElementsByClassName('google-map')[0], mapSettings),
                            markersArray = [],
                            infoWindowArray = [],
                            bounds = new google.maps.LatLngBounds();
    
                        var _loop = function _loop(i, max) {
                            var url = dataJSON.markers[i].icon.url,
                                width = dataJSON.markers[i].icon.width,
                                height = dataJSON.markers[i].icon.height;
    
                            // Create markers:
                            markersArray.push(new google.maps.Marker({
                                map: map,
                                position: dataJSON.markers[i].position,
                                title: dataJSON.markers[i].title,
                                icon: {
                                    url: url,
                                    size: new google.maps.Size(width, height),
                                    anchor: new google.maps.Point(width / 2, height)
                                },
                                tooltip: dataJSON.markers[i].tooltip
                            }));
    
                            if (markersArray[i].tooltip) {
                                infoWindowArray[i] = new google.maps.InfoWindow({
                                    content: markersArray[i].tooltip
                                });
                            }
    
                            // Create tooltips if marker has tooltip:
                            google.maps.event.addListener(markersArray[i], 'click', function () {
                                var $this = this;
    
                                closeInfoWindow();
                                infoWindowArray[i].open(map, $this);
    
                                // Create custom close btn:
                                $('.gm-style-iw').append('<div class="google-map__tooltip-close"></div>').parent().css("height", "auto");
                                // console.log(	$('.gm-style-iw').parent());
                                // $('.gm-style-iw').parent().css("height", "400");
                                $('.google-map__tooltip-close').on("click tap", function () {
                                    closeInfoWindow();
                                });
                            });
    
                            // Get markers parameters for settings autozoom and autocenter map:
                            if (dataJSON.autozoom) {
                                var loc = new google.maps.LatLng(dataJSON.markers[i].position.lat, dataJSON.markers[i].position.lng);
                                bounds.extend(loc);
                            }
                        };
    
                        for (var i = 0, max = dataJSON.markers.length; i < max; i++) {
                            _loop(i, max);
                        }
    
                        // Autozoom and autocenter map:
                        if (dataJSON.autozoom && markersArray.length > 1) {
                            map.fitBounds(bounds);
                            map.panToBounds(bounds);
                        }
    
                        // CreateClusters
                        var markerCluster = new MarkerClusterer(map, markersArray, {
                            styles: mapSettings.clusters.styles,
                            gridSize: mapSettings.clusters.gridSize
                        });
    
                        // Bounds for map area:
                        var strictBounds = new google.maps.LatLngBounds(new google.maps.LatLng(-20, -125), new google.maps.LatLng(80, 125));
    
                        // Listen for the dragend event and return map:
                        google.maps.event.addListener(map, 'drag', function () {
    
                            if (strictBounds.contains(map.getCenter())) return;
    
                            var c = map.getCenter(),
                                x = c.lng(),
                                y = c.lat(),
                                maxX = strictBounds.getNorthEast().lng(),
                                maxY = strictBounds.getNorthEast().lat(),
                                minX = strictBounds.getSouthWest().lng(),
                                minY = strictBounds.getSouthWest().lat();
    
                            if (x < minX) x = minX;
                            if (x > maxX) x = maxX;
                            if (y < minY) y = minY;
                            if (y > maxY) y = maxY;
    
                            map.setCenter(new google.maps.LatLng(y, x));
                        });
    
                        // Close all tooltip after click at map field:
                        google.maps.event.addListener(map, "click", function (event) {
                            closeInfoWindow();
                        });
    
                        function closeInfoWindow() {
                            for (var i = 0; i < infoWindowArray.length; i++) {
                                infoWindowArray[i].close();
                            }
                        }
    
                        $countryTab.on('click tap', function () {
                            var $this = $(this);
    
                            if ($this.hasClass(_helpers.css.active)) {
                                return false;
                            }
    
                            closeInfoWindow();
    
                            // Set active tab:
                            $countryTab.removeClass(_helpers.css.active);
                            $this.addClass(_helpers.css.active);
    
                            // Set zoom and coordinates:
                            map.setZoom($this.data('zoom'));
                            map.setCenter(new google.maps.LatLng({
                                "lat": $this.data('coordinate-lat'),
                                "lng": $this.data('coordinate-lng')
                            }));
                        });
                    });
                }
                return this;
            }
        }]);
    
        return GoogleMap;
    }();
    
    exports.default = new GoogleMap();
    
    /***/ }),
    /* 385 */
    /***/ (function(module, exports) {
    
    // ==ClosureCompiler==
    // @compilation_level ADVANCED_OPTIMIZATIONS
    // @externs_url http://closure-compiler.googlecode.com/svn/trunk/contrib/externs/maps/google_maps_api_v3_3.js
    // ==/ClosureCompiler==
    
    /**
     * @name MarkerClusterer for Google Maps v3
     * @version version 1.0
     * @author Luke Mahe
     * @fileoverview
     * The library creates and manages per-zoom-level clusters for large amounts of
     * markers.
     * <br/>
     * This is a v3 implementation of the
     * <a href="http://gmaps-utility-library-dev.googlecode.com/svn/tags/markerclusterer/"
     * >v2 MarkerClusterer</a>.
     */
    
    /**
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    
    
    /**
     * A Marker Clusterer that clusters markers.
     *
     * @param {google.maps.Map} map The Google map to attach to.
     * @param {Array.<google.maps.Marker>=} opt_markers Optional markers to add to
     *   the cluster.
     * @param {Object=} opt_options support the following options:
     *     'gridSize': (number) The grid size of a cluster in pixels.
     *     'maxZoom': (number) The maximum zoom level that a marker can be part of a
     *                cluster.
     *     'zoomOnClick': (boolean) Whether the default behaviour of clicking on a
     *                    cluster is to zoom into it.
     *     'averageCenter': (boolean) Wether the center of each cluster should be
     *                      the average of all markers in the cluster.
     *     'minimumClusterSize': (number) The minimum number of markers to be in a
     *                           cluster before the markers are hidden and a count
     *                           is shown.
     *     'styles': (object) An object that has style properties:
     *       'url': (string) The image url.
     *       'height': (number) The image height.
     *       'width': (number) The image width.
     *       'anchor': (Array) The anchor position of the label text.
     *       'textColor': (string) The text color.
     *       'textSize': (number) The text size.
     *       'backgroundPosition': (string) The position of the backgound x, y.
     *       'iconAnchor': (Array) The anchor position of the icon x, y.
     * @constructor
     * @extends google.maps.OverlayView
     */
    function MarkerClusterer(map, opt_markers, opt_options) {
      // MarkerClusterer implements google.maps.OverlayView interface. We use the
      // extend function to extend MarkerClusterer with google.maps.OverlayView
      // because it might not always be available when the code is defined so we
      // look for it at the last possible moment. If it doesn't exist now then
      // there is no point going ahead :)
      this.extend(MarkerClusterer, google.maps.OverlayView);
      this.map_ = map;
    
      /**
       * @type {Array.<google.maps.Marker>}
       * @private
       */
      this.markers_ = [];
    
      /**
       *  @type {Array.<Cluster>}
       */
      this.clusters_ = [];
    
      this.sizes = [53, 56, 66, 78, 90];
    
      /**
       * @private
       */
      this.styles_ = [];
    
      /**
       * @type {boolean}
       * @private
       */
      this.ready_ = false;
    
      var options = opt_options || {};
    
      /**
       * @type {number}
       * @private
       */
      this.gridSize_ = options['gridSize'] || 60;
    
      /**
       * @private
       */
      this.minClusterSize_ = options['minimumClusterSize'] || 2;
    
    
      /**
       * @type {?number}
       * @private
       */
      this.maxZoom_ = options['maxZoom'] || null;
    
      this.styles_ = options['styles'] || [];
    
      /**
       * @type {string}
       * @private
       */
      this.imagePath_ = options['imagePath'] ||
          this.MARKER_CLUSTER_IMAGE_PATH_;
    
      /**
       * @type {string}
       * @private
       */
      this.imageExtension_ = options['imageExtension'] ||
          this.MARKER_CLUSTER_IMAGE_EXTENSION_;
    
      /**
       * @type {boolean}
       * @private
       */
      this.zoomOnClick_ = true;
    
      if (options['zoomOnClick'] != undefined) {
        this.zoomOnClick_ = options['zoomOnClick'];
      }
    
      /**
       * @type {boolean}
       * @private
       */
      this.averageCenter_ = false;
    
      if (options['averageCenter'] != undefined) {
        this.averageCenter_ = options['averageCenter'];
      }
    
      this.setupStyles_();
    
      this.setMap(map);
    
      /**
       * @type {number}
       * @private
       */
      this.prevZoom_ = this.map_.getZoom();
    
      // Add the map event listeners
      var that = this;
      google.maps.event.addListener(this.map_, 'zoom_changed', function() {
        var zoom = that.map_.getZoom();
    
        if (that.prevZoom_ != zoom) {
          that.prevZoom_ = zoom;
          that.resetViewport();
        }
      });
    
      google.maps.event.addListener(this.map_, 'idle', function() {
        that.redraw();
      });
    
      // Finally, add the markers
      if (opt_markers && opt_markers.length) {
        this.addMarkers(opt_markers, false);
      }
    }
    
    
    /**
     * The marker cluster image path.
     *
     * @type {string}
     * @private
     */
    MarkerClusterer.prototype.MARKER_CLUSTER_IMAGE_PATH_ =
        'http://google-maps-utility-library-v3.googlecode.com/svn/trunk/markerclusterer/' +
        'images/m';
    
    
    /**
     * The marker cluster image path.
     *
     * @type {string}
     * @private
     */
    MarkerClusterer.prototype.MARKER_CLUSTER_IMAGE_EXTENSION_ = 'png';
    
    
    /**
     * Extends a objects prototype by anothers.
     *
     * @param {Object} obj1 The object to be extended.
     * @param {Object} obj2 The object to extend with.
     * @return {Object} The new extended object.
     * @ignore
     */
    MarkerClusterer.prototype.extend = function(obj1, obj2) {
      return (function(object) {
        for (var property in object.prototype) {
          this.prototype[property] = object.prototype[property];
        }
        return this;
      }).apply(obj1, [obj2]);
    };
    
    
    /**
     * Implementaion of the interface method.
     * @ignore
     */
    MarkerClusterer.prototype.onAdd = function() {
      this.setReady_(true);
    };
    
    /**
     * Implementaion of the interface method.
     * @ignore
     */
    MarkerClusterer.prototype.draw = function() {};
    
    /**
     * Sets up the styles object.
     *
     * @private
     */
    MarkerClusterer.prototype.setupStyles_ = function() {
      if (this.styles_.length) {
        return;
      }
    
      for (var i = 0, size; size = this.sizes[i]; i++) {
        this.styles_.push({
          url: this.imagePath_ + (i + 1) + '.' + this.imageExtension_,
          height: size,
          width: size
        });
      }
    };
    
    /**
     *  Fit the map to the bounds of the markers in the clusterer.
     */
    MarkerClusterer.prototype.fitMapToMarkers = function() {
      var markers = this.getMarkers();
      var bounds = new google.maps.LatLngBounds();
      for (var i = 0, marker; marker = markers[i]; i++) {
        bounds.extend(marker.getPosition());
      }
    
      this.map_.fitBounds(bounds);
    };
    
    
    /**
     *  Sets the styles.
     *
     *  @param {Object} styles The style to set.
     */
    MarkerClusterer.prototype.setStyles = function(styles) {
      this.styles_ = styles;
    };
    
    
    /**
     *  Gets the styles.
     *
     *  @return {Object} The styles object.
     */
    MarkerClusterer.prototype.getStyles = function() {
      return this.styles_;
    };
    
    
    /**
     * Whether zoom on click is set.
     *
     * @return {boolean} True if zoomOnClick_ is set.
     */
    MarkerClusterer.prototype.isZoomOnClick = function() {
      return this.zoomOnClick_;
    };
    
    /**
     * Whether average center is set.
     *
     * @return {boolean} True if averageCenter_ is set.
     */
    MarkerClusterer.prototype.isAverageCenter = function() {
      return this.averageCenter_;
    };
    
    
    /**
     *  Returns the array of markers in the clusterer.
     *
     *  @return {Array.<google.maps.Marker>} The markers.
     */
    MarkerClusterer.prototype.getMarkers = function() {
      return this.markers_;
    };
    
    
    /**
     *  Returns the number of markers in the clusterer
     *
     *  @return {Number} The number of markers.
     */
    MarkerClusterer.prototype.getTotalMarkers = function() {
      return this.markers_.length;
    };
    
    
    /**
     *  Sets the max zoom for the clusterer.
     *
     *  @param {number} maxZoom The max zoom level.
     */
    MarkerClusterer.prototype.setMaxZoom = function(maxZoom) {
      this.maxZoom_ = maxZoom;
    };
    
    
    /**
     *  Gets the max zoom for the clusterer.
     *
     *  @return {number} The max zoom level.
     */
    MarkerClusterer.prototype.getMaxZoom = function() {
      return this.maxZoom_;
    };
    
    
    /**
     *  The function for calculating the cluster icon image.
     *
     *  @param {Array.<google.maps.Marker>} markers The markers in the clusterer.
     *  @param {number} numStyles The number of styles available.
     *  @return {Object} A object properties: 'text' (string) and 'index' (number).
     *  @private
     */
    MarkerClusterer.prototype.calculator_ = function(markers, numStyles) {
      var index = 0;
      var count = markers.length;
      var dv = count;
      while (dv !== 0) {
        dv = parseInt(dv / 10, 10);
        index++;
      }
    
      index = Math.min(index, numStyles);
      return {
        text: count,
        index: index
      };
    };
    
    
    /**
     * Set the calculator function.
     *
     * @param {function(Array, number)} calculator The function to set as the
     *     calculator. The function should return a object properties:
     *     'text' (string) and 'index' (number).
     *
     */
    MarkerClusterer.prototype.setCalculator = function(calculator) {
      this.calculator_ = calculator;
    };
    
    
    /**
     * Get the calculator function.
     *
     * @return {function(Array, number)} the calculator function.
     */
    MarkerClusterer.prototype.getCalculator = function() {
      return this.calculator_;
    };
    
    
    /**
     * Add an array of markers to the clusterer.
     *
     * @param {Array.<google.maps.Marker>} markers The markers to add.
     * @param {boolean=} opt_nodraw Whether to redraw the clusters.
     */
    MarkerClusterer.prototype.addMarkers = function(markers, opt_nodraw) {
      for (var i = 0, marker; marker = markers[i]; i++) {
        this.pushMarkerTo_(marker);
      }
      if (!opt_nodraw) {
        this.redraw();
      }
    };
    
    
    /**
     * Pushes a marker to the clusterer.
     *
     * @param {google.maps.Marker} marker The marker to add.
     * @private
     */
    MarkerClusterer.prototype.pushMarkerTo_ = function(marker) {
      marker.isAdded = false;
      if (marker['draggable']) {
        // If the marker is draggable add a listener so we update the clusters on
        // the drag end.
        var that = this;
        google.maps.event.addListener(marker, 'dragend', function() {
          marker.isAdded = false;
          that.repaint();
        });
      }
      this.markers_.push(marker);
    };
    
    
    /**
     * Adds a marker to the clusterer and redraws if needed.
     *
     * @param {google.maps.Marker} marker The marker to add.
     * @param {boolean=} opt_nodraw Whether to redraw the clusters.
     */
    MarkerClusterer.prototype.addMarker = function(marker, opt_nodraw) {
      this.pushMarkerTo_(marker);
      if (!opt_nodraw) {
        this.redraw();
      }
    };
    
    
    /**
     * Removes a marker and returns true if removed, false if not
     *
     * @param {google.maps.Marker} marker The marker to remove
     * @return {boolean} Whether the marker was removed or not
     * @private
     */
    MarkerClusterer.prototype.removeMarker_ = function(marker) {
      var index = -1;
      if (this.markers_.indexOf) {
        index = this.markers_.indexOf(marker);
      } else {
        for (var i = 0, m; m = this.markers_[i]; i++) {
          if (m == marker) {
            index = i;
            break;
          }
        }
      }
    
      if (index == -1) {
        // Marker is not in our list of markers.
        return false;
      }
    
      marker.setMap(null);
    
      this.markers_.splice(index, 1);
    
      return true;
    };
    
    
    /**
     * Remove a marker from the cluster.
     *
     * @param {google.maps.Marker} marker The marker to remove.
     * @param {boolean=} opt_nodraw Optional boolean to force no redraw.
     * @return {boolean} True if the marker was removed.
     */
    MarkerClusterer.prototype.removeMarker = function(marker, opt_nodraw) {
      var removed = this.removeMarker_(marker);
    
      if (!opt_nodraw && removed) {
        this.resetViewport();
        this.redraw();
        return true;
      } else {
       return false;
      }
    };
    
    
    /**
     * Removes an array of markers from the cluster.
     *
     * @param {Array.<google.maps.Marker>} markers The markers to remove.
     * @param {boolean=} opt_nodraw Optional boolean to force no redraw.
     */
    MarkerClusterer.prototype.removeMarkers = function(markers, opt_nodraw) {
      var removed = false;
    
      for (var i = 0, marker; marker = markers[i]; i++) {
        var r = this.removeMarker_(marker);
        removed = removed || r;
      }
    
      if (!opt_nodraw && removed) {
        this.resetViewport();
        this.redraw();
        return true;
      }
    };
    
    
    /**
     * Sets the clusterer's ready state.
     *
     * @param {boolean} ready The state.
     * @private
     */
    MarkerClusterer.prototype.setReady_ = function(ready) {
      if (!this.ready_) {
        this.ready_ = ready;
        this.createClusters_();
      }
    };
    
    
    /**
     * Returns the number of clusters in the clusterer.
     *
     * @return {number} The number of clusters.
     */
    MarkerClusterer.prototype.getTotalClusters = function() {
      return this.clusters_.length;
    };
    
    
    /**
     * Returns the google map that the clusterer is associated with.
     *
     * @return {google.maps.Map} The map.
     */
    MarkerClusterer.prototype.getMap = function() {
      return this.map_;
    };
    
    
    /**
     * Sets the google map that the clusterer is associated with.
     *
     * @param {google.maps.Map} map The map.
     */
    MarkerClusterer.prototype.setMap = function(map) {
      this.map_ = map;
    };
    
    
    /**
     * Returns the size of the grid.
     *
     * @return {number} The grid size.
     */
    MarkerClusterer.prototype.getGridSize = function() {
      return this.gridSize_;
    };
    
    
    /**
     * Sets the size of the grid.
     *
     * @param {number} size The grid size.
     */
    MarkerClusterer.prototype.setGridSize = function(size) {
      this.gridSize_ = size;
    };
    
    
    /**
     * Returns the min cluster size.
     *
     * @return {number} The grid size.
     */
    MarkerClusterer.prototype.getMinClusterSize = function() {
      return this.minClusterSize_;
    };
    
    /**
     * Sets the min cluster size.
     *
     * @param {number} size The grid size.
     */
    MarkerClusterer.prototype.setMinClusterSize = function(size) {
      this.minClusterSize_ = size;
    };
    
    
    /**
     * Extends a bounds object by the grid size.
     *
     * @param {google.maps.LatLngBounds} bounds The bounds to extend.
     * @return {google.maps.LatLngBounds} The extended bounds.
     */
    MarkerClusterer.prototype.getExtendedBounds = function(bounds) {
      var projection = this.getProjection();
    
      // Turn the bounds into latlng.
      var tr = new google.maps.LatLng(bounds.getNorthEast().lat(),
          bounds.getNorthEast().lng());
      var bl = new google.maps.LatLng(bounds.getSouthWest().lat(),
          bounds.getSouthWest().lng());
    
      // Convert the points to pixels and the extend out by the grid size.
      var trPix = projection.fromLatLngToDivPixel(tr);
      trPix.x += this.gridSize_;
      trPix.y -= this.gridSize_;
    
      var blPix = projection.fromLatLngToDivPixel(bl);
      blPix.x -= this.gridSize_;
      blPix.y += this.gridSize_;
    
      // Convert the pixel points back to LatLng
      var ne = projection.fromDivPixelToLatLng(trPix);
      var sw = projection.fromDivPixelToLatLng(blPix);
    
      // Extend the bounds to contain the new bounds.
      bounds.extend(ne);
      bounds.extend(sw);
    
      return bounds;
    };
    
    
    /**
     * Determins if a marker is contained in a bounds.
     *
     * @param {google.maps.Marker} marker The marker to check.
     * @param {google.maps.LatLngBounds} bounds The bounds to check against.
     * @return {boolean} True if the marker is in the bounds.
     * @private
     */
    MarkerClusterer.prototype.isMarkerInBounds_ = function(marker, bounds) {
      return bounds.contains(marker.getPosition());
    };
    
    
    /**
     * Clears all clusters and markers from the clusterer.
     */
    MarkerClusterer.prototype.clearMarkers = function() {
      this.resetViewport(true);
    
      // Set the markers a empty array.
      this.markers_ = [];
    };
    
    
    /**
     * Clears all existing clusters and recreates them.
     * @param {boolean} opt_hide To also hide the marker.
     */
    MarkerClusterer.prototype.resetViewport = function(opt_hide) {
      // Remove all the clusters
      for (var i = 0, cluster; cluster = this.clusters_[i]; i++) {
        cluster.remove();
      }
    
      // Reset the markers to not be added and to be invisible.
      for (var i = 0, marker; marker = this.markers_[i]; i++) {
        marker.isAdded = false;
        if (opt_hide) {
          marker.setMap(null);
        }
      }
    
      this.clusters_ = [];
    };
    
    /**
     *
     */
    MarkerClusterer.prototype.repaint = function() {
      var oldClusters = this.clusters_.slice();
      this.clusters_.length = 0;
      this.resetViewport();
      this.redraw();
    
      // Remove the old clusters.
      // Do it in a timeout so the other clusters have been drawn first.
      window.setTimeout(function() {
        for (var i = 0, cluster; cluster = oldClusters[i]; i++) {
          cluster.remove();
        }
      }, 0);
    };
    
    
    /**
     * Redraws the clusters.
     */
    MarkerClusterer.prototype.redraw = function() {
      this.createClusters_();
    };
    
    
    /**
     * Calculates the distance between two latlng locations in km.
     * @see http://www.movable-type.co.uk/scripts/latlong.html
     *
     * @param {google.maps.LatLng} p1 The first lat lng point.
     * @param {google.maps.LatLng} p2 The second lat lng point.
     * @return {number} The distance between the two points in km.
     * @private
    */
    MarkerClusterer.prototype.distanceBetweenPoints_ = function(p1, p2) {
      if (!p1 || !p2) {
        return 0;
      }
    
      var R = 6371; // Radius of the Earth in km
      var dLat = (p2.lat() - p1.lat()) * Math.PI / 180;
      var dLon = (p2.lng() - p1.lng()) * Math.PI / 180;
      var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.cos(p1.lat() * Math.PI / 180) * Math.cos(p2.lat() * Math.PI / 180) *
        Math.sin(dLon / 2) * Math.sin(dLon / 2);
      var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      var d = R * c;
      return d;
    };
    
    
    /**
     * Add a marker to a cluster, or creates a new cluster.
     *
     * @param {google.maps.Marker} marker The marker to add.
     * @private
     */
    MarkerClusterer.prototype.addToClosestCluster_ = function(marker) {
      var distance = 40000; // Some large number
      var clusterToAddTo = null;
      var pos = marker.getPosition();
      for (var i = 0, cluster; cluster = this.clusters_[i]; i++) {
        var center = cluster.getCenter();
        if (center) {
          var d = this.distanceBetweenPoints_(center, marker.getPosition());
          if (d < distance) {
            distance = d;
            clusterToAddTo = cluster;
          }
        }
      }
    
      if (clusterToAddTo && clusterToAddTo.isMarkerInClusterBounds(marker)) {
        clusterToAddTo.addMarker(marker);
      } else {
        var cluster = new Cluster(this);
        cluster.addMarker(marker);
        this.clusters_.push(cluster);
      }
    };
    
    
    /**
     * Creates the clusters.
     *
     * @private
     */
    MarkerClusterer.prototype.createClusters_ = function() {
      if (!this.ready_) {
        return;
      }
    
      // Get our current map view bounds.
      // Create a new bounds object so we don't affect the map.
      var mapBounds = new google.maps.LatLngBounds(this.map_.getBounds().getSouthWest(),
          this.map_.getBounds().getNorthEast());
      var bounds = this.getExtendedBounds(mapBounds);
    
      for (var i = 0, marker; marker = this.markers_[i]; i++) {
        if (!marker.isAdded && this.isMarkerInBounds_(marker, bounds)) {
          this.addToClosestCluster_(marker);
        }
      }
    };
    
    
    /**
     * A cluster that contains markers.
     *
     * @param {MarkerClusterer} markerClusterer The markerclusterer that this
     *     cluster is associated with.
     * @constructor
     * @ignore
     */
    function Cluster(markerClusterer) {
      this.markerClusterer_ = markerClusterer;
      this.map_ = markerClusterer.getMap();
      this.gridSize_ = markerClusterer.getGridSize();
      this.minClusterSize_ = markerClusterer.getMinClusterSize();
      this.averageCenter_ = markerClusterer.isAverageCenter();
      this.center_ = null;
      this.markers_ = [];
      this.bounds_ = null;
      this.clusterIcon_ = new ClusterIcon(this, markerClusterer.getStyles(),
          markerClusterer.getGridSize());
    }
    
    /**
     * Determins if a marker is already added to the cluster.
     *
     * @param {google.maps.Marker} marker The marker to check.
     * @return {boolean} True if the marker is already added.
     */
    Cluster.prototype.isMarkerAlreadyAdded = function(marker) {
      if (this.markers_.indexOf) {
        return this.markers_.indexOf(marker) != -1;
      } else {
        for (var i = 0, m; m = this.markers_[i]; i++) {
          if (m == marker) {
            return true;
          }
        }
      }
      return false;
    };
    
    
    /**
     * Add a marker the cluster.
     *
     * @param {google.maps.Marker} marker The marker to add.
     * @return {boolean} True if the marker was added.
     */
    Cluster.prototype.addMarker = function(marker) {
      if (this.isMarkerAlreadyAdded(marker)) {
        return false;
      }
    
      if (!this.center_) {
        this.center_ = marker.getPosition();
        this.calculateBounds_();
      } else {
        if (this.averageCenter_) {
          var l = this.markers_.length + 1;
          var lat = (this.center_.lat() * (l-1) + marker.getPosition().lat()) / l;
          var lng = (this.center_.lng() * (l-1) + marker.getPosition().lng()) / l;
          this.center_ = new google.maps.LatLng(lat, lng);
          this.calculateBounds_();
        }
      }
    
      marker.isAdded = true;
      this.markers_.push(marker);
    
      var len = this.markers_.length;
      if (len < this.minClusterSize_ && marker.getMap() != this.map_) {
        // Min cluster size not reached so show the marker.
        marker.setMap(this.map_);
      }
    
      if (len == this.minClusterSize_) {
        // Hide the markers that were showing.
        for (var i = 0; i < len; i++) {
          this.markers_[i].setMap(null);
        }
      }
    
      if (len >= this.minClusterSize_) {
        marker.setMap(null);
      }
    
      this.updateIcon();
      return true;
    };
    
    
    /**
     * Returns the marker clusterer that the cluster is associated with.
     *
     * @return {MarkerClusterer} The associated marker clusterer.
     */
    Cluster.prototype.getMarkerClusterer = function() {
      return this.markerClusterer_;
    };
    
    
    /**
     * Returns the bounds of the cluster.
     *
     * @return {google.maps.LatLngBounds} the cluster bounds.
     */
    Cluster.prototype.getBounds = function() {
      var bounds = new google.maps.LatLngBounds(this.center_, this.center_);
      var markers = this.getMarkers();
      for (var i = 0, marker; marker = markers[i]; i++) {
        bounds.extend(marker.getPosition());
      }
      return bounds;
    };
    
    
    /**
     * Removes the cluster
     */
    Cluster.prototype.remove = function() {
      this.clusterIcon_.remove();
      this.markers_.length = 0;
      delete this.markers_;
    };
    
    
    /**
     * Returns the center of the cluster.
     *
     * @return {number} The cluster center.
     */
    Cluster.prototype.getSize = function() {
      return this.markers_.length;
    };
    
    
    /**
     * Returns the center of the cluster.
     *
     * @return {Array.<google.maps.Marker>} The cluster center.
     */
    Cluster.prototype.getMarkers = function() {
      return this.markers_;
    };
    
    
    /**
     * Returns the center of the cluster.
     *
     * @return {google.maps.LatLng} The cluster center.
     */
    Cluster.prototype.getCenter = function() {
      return this.center_;
    };
    
    
    /**
     * Calculated the extended bounds of the cluster with the grid.
     *
     * @private
     */
    Cluster.prototype.calculateBounds_ = function() {
      var bounds = new google.maps.LatLngBounds(this.center_, this.center_);
      this.bounds_ = this.markerClusterer_.getExtendedBounds(bounds);
    };
    
    
    /**
     * Determines if a marker lies in the clusters bounds.
     *
     * @param {google.maps.Marker} marker The marker to check.
     * @return {boolean} True if the marker lies in the bounds.
     */
    Cluster.prototype.isMarkerInClusterBounds = function(marker) {
      return this.bounds_.contains(marker.getPosition());
    };
    
    
    /**
     * Returns the map that the cluster is associated with.
     *
     * @return {google.maps.Map} The map.
     */
    Cluster.prototype.getMap = function() {
      return this.map_;
    };
    
    
    /**
     * Updates the cluster icon
     */
    Cluster.prototype.updateIcon = function() {
      var zoom = this.map_.getZoom();
      var mz = this.markerClusterer_.getMaxZoom();
    
      if (mz && zoom > mz) {
        // The zoom is greater than our max zoom so show all the markers in cluster.
        for (var i = 0, marker; marker = this.markers_[i]; i++) {
          marker.setMap(this.map_);
        }
        return;
      }
    
      if (this.markers_.length < this.minClusterSize_) {
        // Min cluster size not yet reached.
        this.clusterIcon_.hide();
        return;
      }
    
      var numStyles = this.markerClusterer_.getStyles().length;
      var sums = this.markerClusterer_.getCalculator()(this.markers_, numStyles);
      this.clusterIcon_.setCenter(this.center_);
      this.clusterIcon_.setSums(sums);
      this.clusterIcon_.show();
    };
    
    
    /**
     * A cluster icon
     *
     * @param {Cluster} cluster The cluster to be associated with.
     * @param {Object} styles An object that has style properties:
     *     'url': (string) The image url.
     *     'height': (number) The image height.
     *     'width': (number) The image width.
     *     'anchor': (Array) The anchor position of the label text.
     *     'textColor': (string) The text color.
     *     'textSize': (number) The text size.
     *     'backgroundPosition: (string) The background postition x, y.
     * @param {number=} opt_padding Optional padding to apply to the cluster icon.
     * @constructor
     * @extends google.maps.OverlayView
     * @ignore
     */
    function ClusterIcon(cluster, styles, opt_padding) {
      cluster.getMarkerClusterer().extend(ClusterIcon, google.maps.OverlayView);
    
      this.styles_ = styles;
      this.padding_ = opt_padding || 0;
      this.cluster_ = cluster;
      this.center_ = null;
      this.map_ = cluster.getMap();
      this.div_ = null;
      this.sums_ = null;
      this.visible_ = false;
    
      this.setMap(this.map_);
    }
    
    
    /**
     * Triggers the clusterclick event and zoom's if the option is set.
     */
    ClusterIcon.prototype.triggerClusterClick = function() {
      var markerClusterer = this.cluster_.getMarkerClusterer();
    
      // Trigger the clusterclick event.
      google.maps.event.trigger(markerClusterer, 'clusterclick', this.cluster_);
    
      if (markerClusterer.isZoomOnClick()) {
        // Zoom into the cluster.
        this.map_.fitBounds(this.cluster_.getBounds());
      }
    };
    
    
    /**
     * Adding the cluster icon to the dom.
     * @ignore
     */
    ClusterIcon.prototype.onAdd = function() {
      this.div_ = document.createElement('DIV');
      if (this.visible_) {
        var pos = this.getPosFromLatLng_(this.center_);
        this.div_.style.cssText = this.createCss(pos);
        this.div_.innerHTML = this.sums_.text;
      }
    
      var panes = this.getPanes();
      panes.overlayMouseTarget.appendChild(this.div_);
    
      var that = this;
      google.maps.event.addDomListener(this.div_, 'click', function() {
        that.triggerClusterClick();
      });
    };
    
    
    /**
     * Returns the position to place the div dending on the latlng.
     *
     * @param {google.maps.LatLng} latlng The position in latlng.
     * @return {google.maps.Point} The position in pixels.
     * @private
     */
    ClusterIcon.prototype.getPosFromLatLng_ = function(latlng) {
      var pos = this.getProjection().fromLatLngToDivPixel(latlng);
    
      if (typeof this.iconAnchor_ === 'object' && this.iconAnchor_.length === 2) {
        pos.x -= this.iconAnchor_[0];
        pos.y -= this.iconAnchor_[1];
      } else {
        pos.x -= parseInt(this.width_ / 2, 10);
        pos.y -= parseInt(this.height_ / 2, 10);
      }
      return pos;
    };
    
    
    /**
     * Draw the icon.
     * @ignore
     */
    ClusterIcon.prototype.draw = function() {
      if (this.visible_) {
        var pos = this.getPosFromLatLng_(this.center_);
        this.div_.style.top = pos.y + 'px';
        this.div_.style.left = pos.x + 'px';
      }
    };
    
    
    /**
     * Hide the icon.
     */
    ClusterIcon.prototype.hide = function() {
      if (this.div_) {
        this.div_.style.display = 'none';
      }
      this.visible_ = false;
    };
    
    
    /**
     * Position and show the icon.
     */
    ClusterIcon.prototype.show = function() {
      if (this.div_) {
        var pos = this.getPosFromLatLng_(this.center_);
        this.div_.style.cssText = this.createCss(pos);
        this.div_.style.display = '';
      }
      this.visible_ = true;
    };
    
    
    /**
     * Remove the icon from the map
     */
    ClusterIcon.prototype.remove = function() {
      this.setMap(null);
    };
    
    
    /**
     * Implementation of the onRemove interface.
     * @ignore
     */
    ClusterIcon.prototype.onRemove = function() {
      if (this.div_ && this.div_.parentNode) {
        this.hide();
        this.div_.parentNode.removeChild(this.div_);
        this.div_ = null;
      }
    };
    
    
    /**
     * Set the sums of the icon.
     *
     * @param {Object} sums The sums containing:
     *   'text': (string) The text to display in the icon.
     *   'index': (number) The style index of the icon.
     */
    ClusterIcon.prototype.setSums = function(sums) {
      this.sums_ = sums;
      this.text_ = sums.text;
      this.index_ = sums.index;
      if (this.div_) {
        this.div_.innerHTML = sums.text;
      }
    
      this.useStyle();
    };
    
    
    /**
     * Sets the icon to the the styles.
     */
    ClusterIcon.prototype.useStyle = function() {
      var index = Math.max(0, this.sums_.index - 1);
      index = Math.min(this.styles_.length - 1, index);
      var style = this.styles_[index];
      this.url_ = style['url'];
      this.height_ = style['height'];
      this.width_ = style['width'];
      this.textColor_ = style['textColor'];
      this.anchor_ = style['anchor'];
      this.textSize_ = style['textSize'];
      this.backgroundPosition_ = style['backgroundPosition'];
      this.iconAnchor_ = style['iconAnchor'];
    };
    
    
    /**
     * Sets the center of the icon.
     *
     * @param {google.maps.LatLng} center The latlng to set as the center.
     */
    ClusterIcon.prototype.setCenter = function(center) {
      this.center_ = center;
    };
    
    
    /**
     * Create the css text based on the position of the icon.
     *
     * @param {google.maps.Point} pos The position.
     * @return {string} The css style text.
     */
    ClusterIcon.prototype.createCss = function(pos) {
      var style = [];
      style.push('background-image:url(' + this.url_ + ');');
      var backgroundPosition = this.backgroundPosition_ ? this.backgroundPosition_ : '0 0';
      style.push('background-position:' + backgroundPosition + ';');
    
      if (typeof this.anchor_ === 'object') {
        if (typeof this.anchor_[0] === 'number' && this.anchor_[0] > 0 &&
            this.anchor_[0] < this.height_) {
          style.push('height:' + (this.height_ - this.anchor_[0]) +
              'px; padding-top:' + this.anchor_[0] + 'px;');
        } else if (typeof this.anchor_[0] === 'number' && this.anchor_[0] < 0 &&
            -this.anchor_[0] < this.height_) {
          style.push('height:' + this.height_ + 'px; line-height:' + (this.height_ + this.anchor_[0]) +
              'px;');
        } else {
          style.push('height:' + this.height_ + 'px; line-height:' + this.height_ +
              'px;');
        }
        if (typeof this.anchor_[1] === 'number' && this.anchor_[1] > 0 &&
            this.anchor_[1] < this.width_) {
          style.push('width:' + (this.width_ - this.anchor_[1]) +
              'px; padding-left:' + this.anchor_[1] + 'px;');
        } else {
          style.push('width:' + this.width_ + 'px; text-align:center;');
        }
      } else {
        style.push('height:' + this.height_ + 'px; line-height:' +
            this.height_ + 'px; width:' + this.width_ + 'px; text-align:center;');
      }
    
      var txtColor = this.textColor_ ? this.textColor_ : 'black';
      var txtSize = this.textSize_ ? this.textSize_ : 11;
    
      style.push('cursor:pointer; top:' + pos.y + 'px; left:' +
          pos.x + 'px; color:' + txtColor + '; position:absolute; font-size:' +
          txtSize + 'px; font-family:Arial,sans-serif; font-weight:bold');
      return style.join('');
    };
    
    
    // Export Symbols for Closure
    // If you are not going to compile with closure then you can remove the
    // code below.
    window['MarkerClusterer'] = MarkerClusterer;
    MarkerClusterer.prototype['addMarker'] = MarkerClusterer.prototype.addMarker;
    MarkerClusterer.prototype['addMarkers'] = MarkerClusterer.prototype.addMarkers;
    MarkerClusterer.prototype['clearMarkers'] =
        MarkerClusterer.prototype.clearMarkers;
    MarkerClusterer.prototype['fitMapToMarkers'] =
        MarkerClusterer.prototype.fitMapToMarkers;
    MarkerClusterer.prototype['getCalculator'] =
        MarkerClusterer.prototype.getCalculator;
    MarkerClusterer.prototype['getGridSize'] =
        MarkerClusterer.prototype.getGridSize;
    MarkerClusterer.prototype['getExtendedBounds'] =
        MarkerClusterer.prototype.getExtendedBounds;
    MarkerClusterer.prototype['getMap'] = MarkerClusterer.prototype.getMap;
    MarkerClusterer.prototype['getMarkers'] = MarkerClusterer.prototype.getMarkers;
    MarkerClusterer.prototype['getMaxZoom'] = MarkerClusterer.prototype.getMaxZoom;
    MarkerClusterer.prototype['getStyles'] = MarkerClusterer.prototype.getStyles;
    MarkerClusterer.prototype['getTotalClusters'] =
        MarkerClusterer.prototype.getTotalClusters;
    MarkerClusterer.prototype['getTotalMarkers'] =
        MarkerClusterer.prototype.getTotalMarkers;
    MarkerClusterer.prototype['redraw'] = MarkerClusterer.prototype.redraw;
    MarkerClusterer.prototype['removeMarker'] =
        MarkerClusterer.prototype.removeMarker;
    MarkerClusterer.prototype['removeMarkers'] =
        MarkerClusterer.prototype.removeMarkers;
    MarkerClusterer.prototype['resetViewport'] =
        MarkerClusterer.prototype.resetViewport;
    MarkerClusterer.prototype['repaint'] =
        MarkerClusterer.prototype.repaint;
    MarkerClusterer.prototype['setCalculator'] =
        MarkerClusterer.prototype.setCalculator;
    MarkerClusterer.prototype['setGridSize'] =
        MarkerClusterer.prototype.setGridSize;
    MarkerClusterer.prototype['setMaxZoom'] =
        MarkerClusterer.prototype.setMaxZoom;
    MarkerClusterer.prototype['onAdd'] = MarkerClusterer.prototype.onAdd;
    MarkerClusterer.prototype['draw'] = MarkerClusterer.prototype.draw;
    
    Cluster.prototype['getCenter'] = Cluster.prototype.getCenter;
    Cluster.prototype['getSize'] = Cluster.prototype.getSize;
    Cluster.prototype['getMarkers'] = Cluster.prototype.getMarkers;
    
    ClusterIcon.prototype['onAdd'] = ClusterIcon.prototype.onAdd;
    ClusterIcon.prototype['draw'] = ClusterIcon.prototype.draw;
    ClusterIcon.prototype['onRemove'] = ClusterIcon.prototype.onRemove;
    
    
    /***/ }),
    /* 386 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(root, factory) {
    
        if (root === null) {
            throw new Error('Google-maps package can be used only in browser');
        }
    
        if (true) {
            !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
                    __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
                    (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
                    __WEBPACK_AMD_DEFINE_FACTORY__),
                    __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        } else if (typeof exports === 'object') {
            module.exports = factory();
        } else {
            root.GoogleMapsLoader = factory();
        }
    
    })(typeof window !== 'undefined' ? window : null, function() {
    
    
        'use strict';
    
    
        var googleVersion = '3.18';
    
        var script = null;
    
        var google = null;
    
        var loading = false;
    
        var callbacks = [];
    
        var onLoadEvents = [];
    
        var originalCreateLoaderMethod = null;
    
    
        var GoogleMapsLoader = {};
    
    
        GoogleMapsLoader.URL = 'https://maps.googleapis.com/maps/api/js';
    
        GoogleMapsLoader.KEY = null;
    
        GoogleMapsLoader.LIBRARIES = [];
    
        GoogleMapsLoader.CLIENT = null;
    
        GoogleMapsLoader.CHANNEL = null;
    
        GoogleMapsLoader.LANGUAGE = null;
    
        GoogleMapsLoader.REGION = null;
    
        GoogleMapsLoader.VERSION = googleVersion;
    
        GoogleMapsLoader.WINDOW_CALLBACK_NAME = '__google_maps_api_provider_initializator__';
    
    
        GoogleMapsLoader._googleMockApiObject = {};
    
    
        GoogleMapsLoader.load = function(fn) {
            if (google === null) {
                if (loading === true) {
                    if (fn) {
                        callbacks.push(fn);
                    }
                } else {
                    loading = true;
    
                    window[GoogleMapsLoader.WINDOW_CALLBACK_NAME] = function() {
                        ready(fn);
                    };
    
                    GoogleMapsLoader.createLoader();
                }
            } else if (fn) {
                fn(google);
            }
        };
    
    
        GoogleMapsLoader.createLoader = function() {
            script = document.createElement('script');
            script.type = 'text/javascript';
            script.src = GoogleMapsLoader.createUrl();
    
            document.body.appendChild(script);
        };
    
    
        GoogleMapsLoader.isLoaded = function() {
            return google !== null;
        };
    
    
        GoogleMapsLoader.createUrl = function() {
            var url = GoogleMapsLoader.URL;
    
            url += '?callback=' + GoogleMapsLoader.WINDOW_CALLBACK_NAME;
    
            if (GoogleMapsLoader.KEY) {
                url += '&key=' + GoogleMapsLoader.KEY;
            }
    
            if (GoogleMapsLoader.LIBRARIES.length > 0) {
                url += '&libraries=' + GoogleMapsLoader.LIBRARIES.join(',');
            }
    
            if (GoogleMapsLoader.CLIENT) {
                url += '&client=' + GoogleMapsLoader.CLIENT + '&v=' + GoogleMapsLoader.VERSION;
            }
    
            if (GoogleMapsLoader.CHANNEL) {
                url += '&channel=' + GoogleMapsLoader.CHANNEL;
            }
    
            if (GoogleMapsLoader.LANGUAGE) {
                url += '&language=' + GoogleMapsLoader.LANGUAGE;
            }
    
            if (GoogleMapsLoader.REGION) {
                url += '&region=' + GoogleMapsLoader.REGION;
            }
    
            return url;
        };
    
    
        GoogleMapsLoader.release = function(fn) {
            var release = function() {
                GoogleMapsLoader.KEY = null;
                GoogleMapsLoader.LIBRARIES = [];
                GoogleMapsLoader.CLIENT = null;
                GoogleMapsLoader.CHANNEL = null;
                GoogleMapsLoader.LANGUAGE = null;
                GoogleMapsLoader.REGION = null;
                GoogleMapsLoader.VERSION = googleVersion;
    
                google = null;
                loading = false;
                callbacks = [];
                onLoadEvents = [];
    
                if (typeof window.google !== 'undefined') {
                    delete window.google;
                }
    
                if (typeof window[GoogleMapsLoader.WINDOW_CALLBACK_NAME] !== 'undefined') {
                    delete window[GoogleMapsLoader.WINDOW_CALLBACK_NAME];
                }
    
                if (originalCreateLoaderMethod !== null) {
                    GoogleMapsLoader.createLoader = originalCreateLoaderMethod;
                    originalCreateLoaderMethod = null;
                }
    
                if (script !== null) {
                    script.parentElement.removeChild(script);
                    script = null;
                }
    
                if (fn) {
                    fn();
                }
            };
    
            if (loading) {
                GoogleMapsLoader.load(function() {
                    release();
                });
            } else {
                release();
            }
        };
    
    
        GoogleMapsLoader.onLoad = function(fn) {
            onLoadEvents.push(fn);
        };
    
    
        GoogleMapsLoader.makeMock = function() {
            originalCreateLoaderMethod = GoogleMapsLoader.createLoader;
    
            GoogleMapsLoader.createLoader = function() {
                window.google = GoogleMapsLoader._googleMockApiObject;
                window[GoogleMapsLoader.WINDOW_CALLBACK_NAME]();
            };
        };
    
    
        var ready = function(fn) {
            var i;
    
            loading = false;
    
            if (google === null) {
                google = window.google;
            }
    
            for (i = 0; i < onLoadEvents.length; i++) {
                onLoadEvents[i](google);
            }
    
            if (fn) {
                fn(google);
            }
    
            for (i = 0; i < callbacks.length; i++) {
                callbacks[i](google);
            }
    
            callbacks = [];
        };
    
    
        return GoogleMapsLoader;
    
    });
    
    
    /***/ }),
    /* 387 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var Statistic = function () {
        function Statistic() {
            _classCallCheck(this, Statistic);
    
            this.$statistic = $('.statistic');
            this.$statisticItem = this.$statistic.find('.statistic__title');
    
            this.init();
        }
    
        _createClass(Statistic, [{
            key: 'init',
            value: function init() {
                if (this.$statistic.length) {
                    this.initFontReduce();
                }
            }
        }, {
            key: 'initFontReduce',
            value: function initFontReduce() {
                var textItems = void 0,
                    textItemsCount = void 0,
                    textWidth = void 0,
                    symbolItems = void 0,
                    symbolItemsCount = void 0,
                    maxTextWidth = 0,
                    maxTextElementIndex = void 0,
                    containerWidth = void 0,
                    newFontSize = void 0,
                    maxFontSize = void 0;
    
                this.$statistic.each(function (i, parentContainer) {
                    maxTextWidth = 0;
                    maxTextElementIndex = 0;
    
                    textItems = parentContainer.getElementsByClassName('statistic__title');
                    symbolItems = parentContainer.getElementsByClassName('statistic__symbol');
                    textItemsCount = textItems.length;
                    for (var j = 0; j < textItemsCount; j++) {
                        textWidth = textItems[j].scrollWidth;
                        containerWidth = textItems[j].clientWidth;
    
                        if (maxTextWidth < textWidth) {
                            maxTextWidth = textWidth;
                            maxTextElementIndex = j;
                        }
                    }
    
                    maxFontSize = window.getComputedStyle(textItems[maxTextElementIndex], null).getPropertyValue('font-size');
    
                    // Found and set new font size:
                    if (textItems[maxTextElementIndex].scrollWidth > textItems[maxTextElementIndex].clientWidth) {
    
                        reduceFontSize(textItems, textItems[maxTextElementIndex], parentContainer, maxFontSize);
    
                        // Set fontsize for upper symbol:
                        symbolItemsCount = symbolItems.length;
                        for (var k = 0; k < symbolItemsCount; k++) {
                            symbolItems[k].style.fontSize = .5 * newFontSize + 'px';
                        }
                    }
    
                    // Recursion selection new font size for 'statictic__number':
                    function reduceFontSize(textItems, textItemsMax, parentContainer, maxFontSize) {
                        var currentFontSize = window.getComputedStyle(textItemsMax, null).getPropertyValue('font-size'),
                            fontSizeNumber = parseFloat(currentFontSize),
                            containerWidth = textItemsMax.clientWidth,
                            textItemsCount = textItems.length;
    
                        if (textItemsMax.scrollWidth > containerWidth) {
                            fontSizeNumber--;
                            textItemsMax.style.fontSize = fontSizeNumber + 'px';
                            reduceFontSize(textItems, textItemsMax, parentContainer, maxFontSize);
                        } else {
                            if (fontSizeNumber > maxFontSize) {
                                for (var _i = 0; _i < textItemsCount; _i++) {
                                    textItems[_i].style.fontSize = maxFontSize + 'px';
                                }
                                return false;
                            } else {
                                for (var _i2 = 0; _i2 < textItemsCount; _i2++) {
                                    textItems[_i2].style.fontSize = fontSizeNumber + 'px';
                                }
                                newFontSize = fontSizeNumber;
                            }
                        }
                    }
                });
            }
        }]);
    
        return Statistic;
    }();
    
    exports.default = new Statistic();
    
    /***/ }),
    /* 388 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _gsap = __webpack_require__(12);
    
    var _noTouch = __webpack_require__(77);
    
    var _helpers = __webpack_require__(3);
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var Sector = function () {
        function Sector() {
            _classCallCheck(this, Sector);
    
            this.canvas = document.getElementById('screenCanvas');
            this.$canvas = $(this.canvas);
            this.ctx = this.canvas.getContext('2d');
    
            this.init();
        }
    
        _createClass(Sector, [{
            key: 'init',
            value: function init() {
                this.setCanvasSize();
                this.resizeCanvas();
                this.setOptions();
                this.draw();
            }
        }, {
            key: 'resizeCanvas',
            value: function resizeCanvas() {
                var _this2 = this;
    
                if (!_helpers.Resp.isDesk) {
                    _helpers.$window.on('orientationchange', function () {
                        setTimeout(function () {
                            _this2.setCanvasSize('resize');
                            _this2.setOptions();
                            _this2.render();
                        }, 200);
                    });
                }
            }
        }, {
            key: 'setCanvasSize',
            value: function setCanvasSize(state) {
                this.canvas.width = this.$canvas.width();
                this.canvas.height = this.$canvas.height();
                this.canvasVerticalType = this.canvas.classList.contains('screen__canvas_vertical-arc'); // - return false from home page;
    
                // Set default options:
                if (!this.canvasVerticalType) {
                    this.options = {
                        sectorRadius: 980,
                        sectorWidth: 600,
                        sectorColor: 'rgb(46, 58, 77)',
                        posX: this.canvas.width / 2 - 540,
                        posY: this.canvas.height + 510,
                        sAngle: -Math.PI / 3.99,
                        yAngle: Math.PI * 7.01 / 4,
                        speed: 1
                    };
    
                    // Correct options (if canvas section starting from center screen):
                    if (this.canvas.classList.contains('screen__canvas_center')) this.options.posX = this.canvas.width / 2 - 764;
                    // Correct options (if canvas section starting from middle position of screen):
                    if (this.canvas.classList.contains('screen__canvas_middle')) this.options.posX = this.canvas.width / 2 - 670;
                } else {
                    // Set options from canvas with vertical arc:
                    this.options = {
                        sectorRadius: 1000,
                        sectorWidth: 425,
                        sectorColor: 'rgb(46, 58, 77)',
                        posX: this.canvas.width / 2 - 970,
                        posY: window.innerHeight / 2 + 20,
                        sAngle: 2 * Math.PI,
                        yAngle: 0,
                        sectorInnerRadius: 900,
                        speed: 1
                    };
                }
    
                switch (true) {
                    case _helpers.Resp.isMac:
                        if (this.canvasVerticalType) {
                            this.options.posX = this.canvas.width / 2 - 770, this.options.sectorInnerRadius = 700;
                        } else {
                            this.options.posY = this.options.posY = 1280 + 25;
                        }
                        break;
                    case _helpers.Resp.isTablet:
                        if (this.canvasVerticalType) {
                            this.options.posX = this.canvas.width / 2 - 770, this.options.posY = window.innerHeight / 2 - 200, this.options.sectorRadius = 600, this.options.sectorWidth = 340, this.options.sectorInnerRadius = 600, this.options.sAngle = 2 * Math.PI + .8, this.options.yAngle = 0.8;
                        } else {
                            this.options.posX = this.canvas.width / 2 - 775;
                            this.options.posY = 1280 + 60;
                        }
                        break;
                    case _helpers.Resp.isMobile:
                        if (this.canvasVerticalType) {
                            this.options.posX = -180, this.options.posY = 80, this.options.sectorRadius = 280, this.options.sectorWidth = 170, this.options.sectorInnerRadius = 280, this.options.sAngle = 2 * Math.PI + .77, this.options.yAngle = .77;
                            if (window.innerHeight < window.innerWidth) {
                                this.options.posX = this.canvas.width / 2 - 312;
                            }
                        } else {
                            if (window.innerWidth > window.innerHeight) {
                                this.options.posX = this.canvas.width / 2 - 880;
                                this.options.posY = 1280 - 260;
                            } else {
                                this.options.posX = this.canvas.width / 2 - 880;
                                this.options.posY = 1280 - 220;
                            }
                        }
                        break;
                    default:
                        return;
                }
    
                if (state === 'resize') {
                    if (this.canvasVerticalType) {
                        _helpers.Resp.isTablet || _helpers.Resp.isMobile ? _gsap.TweenMax.set(this.options, { sAngle: Math.PI }) : _gsap.TweenMax.set(this.options, { yAngle: Math.PI, sAngle: Math.PI });
                    } else {
                        _gsap.TweenMax.set(this.options, { yAngle: Math.PI * 5 / 4 });
                    }
                }
            }
        }, {
            key: 'setOptions',
            value: function setOptions() {
                this.sectorRadius = this.options.sectorRadius;
                this.sectorWidth = this.options.sectorWidth;
                this.sectorColor = this.options.sectorColor;
                this.posX = this.options.posX;
                this.posY = this.options.posY;
                this.sAngle = this.options.sAngle;
                this.yAngle = this.options.yAngle;
                this.sectorInnerRadius = this.options.sectorInnerRadius;
            }
        }, {
            key: 'startAnim',
            value: function startAnim() {
                var _this = this;
                if (this.canvasVerticalType) {
                    if (_helpers.Resp.isTablet || _helpers.Resp.isMobile) {
                        _gsap.TweenMax.to(this, this.options.speed, {
                            sAngle: Math.PI,
                            ease: Power1.easeInOut,
                            delay: .8
                        });
                    } else {
                        _gsap.TweenMax.to(this, this.options.speed, {
                            yAngle: Math.PI,
                            sAngle: Math.PI,
                            ease: Power1.easeInOut,
                            delay: .8
                        });
                    }
                } else {
                    _gsap.TweenMax.to(this, this.options.speed, {
                        yAngle: Math.PI * 5 / 4,
                        ease: Power1.easeInOut
                    });
                }
            }
        }, {
            key: 'screenAnim',
            value: function screenAnim() {
                _gsap.TweenMax.to(this, 1, {
                    yAngle: Math.PI * 7.01 / 4,
                    ease: Power1.easeInOut
                });
            }
        }, {
            key: 'nextSlide',
            value: function nextSlide() {
                var _this = this;
    
                _gsap.TweenMax.to(this, this.options.speed * 2 / 3, {
                    sAngle: -Math.PI * 5 / 4,
                    ease: Power1.easeIn,
                    onComplete: function onComplete() {
                        _gsap.TweenMax.set(_this, { sAngle: -Math.PI / 3.99 });
                        _gsap.TweenMax.set(_this, { yAngle: Math.PI * 7.01 / 4 });
    
                        _gsap.TweenMax.to(_this, _this.options.speed * 2 / 3, {
                            yAngle: Math.PI * 5 / 4,
                            ease: Power1.easeInOut
                        });
                    }
                });
            }
        }, {
            key: 'createInnerCircle',
            value: function createInnerCircle() {
                var ctx = this.ctx;
    
                ctx.save();
                ctx.beginPath();
                this.canvasVerticalType ? ctx.arc(this.posX, this.posY, this.sectorInnerRadius - this.sectorWidth / 2 + 2, 0, 2 * Math.PI) : ctx.arc(this.posX, this.posY, this.sectorRadius - this.sectorWidth / 2 + 2, 0, 2 * Math.PI);
                ctx.fill();
                ctx.closePath();
                ctx.restore();
            }
        }, {
            key: 'createWrapCircle',
            value: function createWrapCircle() {
                var ctx = this.ctx;
    
                ctx.save();
                ctx.beginPath();
                ctx.arc(this.posX, this.posY, 3000 - 2, 0, 2 * Math.PI);
                ctx.fillStyle = 'transparent';
                this.canvasVerticalType ? ctx.lineWidth = 2 * (3000 - this.sectorInnerRadius - this.sectorWidth / 2) : ctx.lineWidth = 2 * (3000 - this.sectorRadius - this.sectorWidth / 2);
                ctx.fill();
                ctx.stroke();
                ctx.closePath();
                ctx.restore();
            }
        }, {
            key: 'render',
            value: function render() {
                var _this = this;
                var ctx = this.ctx;
                ctx.clearRect(0, 0, _this.canvas.width, _this.canvas.height);
                ctx.lineWidth = _this.sectorWidth;
                ctx.strokeStyle = _this.sectorColor;
                ctx.fillStyle = _this.sectorColor;
    
                _this.createInnerCircle();
                _this.createWrapCircle();
                ctx.save();
                ctx.beginPath();
                this.canvasVerticalType ? ctx.arc(_this.posX, _this.posY, _this.sectorInnerRadius, _this.sAngle, _this.yAngle, true) : ctx.arc(_this.posX, _this.posY, _this.sectorRadius, _this.sAngle, _this.yAngle, false);
                ctx.stroke();
                ctx.closePath();
                ctx.restore();
            }
        }, {
            key: 'draw',
            value: function draw() {
                this.render();
                this.ref = window.requestAnimationFrame(this.draw.bind(this));
            }
        }]);
    
        return Sector;
    }();
    
    exports.default = Sector;
    
    /***/ }),
    /* 389 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _gsap = __webpack_require__(12);
    
    __webpack_require__(61);
    
    __webpack_require__(52);
    
    var _helpers = __webpack_require__(3);
    
    var _bScreen = __webpack_require__(151);
    
    var _link = __webpack_require__(21);
    
    var _link2 = _interopRequireDefault(_link);
    
    var _noTouch = __webpack_require__(77);
    
    var _video = __webpack_require__(109);
    
    var _video2 = _interopRequireDefault(_video);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var ScreenVideoPlay = function () {
        function ScreenVideoPlay() {
            _classCallCheck(this, ScreenVideoPlay);
    
            this.$container = $('.screen_ceo');
            this.$canvas = this.$container.find('canvas');
    
            if (this.$container.length !== 0) {
                this.init();
            }
        }
    
        _createClass(ScreenVideoPlay, [{
            key: 'init',
            value: function init() {
                var _this = this;
    
                _helpers.$window.on('load', function () {
                    if (_this.$container.length) {
                        _this.initVideoButton();
                    }
                });
            }
        }, {
            key: 'initVideoButton',
            value: function initVideoButton() {
                var $this = this.$container;
    
                var $video = $this.find('video'),
                    $breadcrumbs = $('.breadcrumbs'),
                    video = void 0;
    
                $video.children().attr('src', $video.children().data('load-src'));
                video = new _video2.default().init($video.get(0), 0);
    
                // Create close btn:
                var $closeBtn = $(createCloseBtn($this));
    
                // Create play-button and append this at half-container with video:
                var $icon = $('\n\t\t\t<div class="screen__play-btn">\n\t\t\t\t<svg class="play-btn" viewBox="0 0 294 294">\n\t\t\t\t\t<path class="play-btn__triangle" d="M132.5,165V129l29,18Z"/>\n\t\t\t\t\t<line class="play-btn__line-top" x1="275.5" y1="216.5" x2="27.5" y2="63.5"/>\n\t\t\t\t\t<line class="play-btn__line-left" x1="27.5" y1="231.5" x2="275.5" y2="76.5"/>\n\t\t\t\t\t<line class="play-btn__line-right" x1="132.5" y1="1.5" x2="132.5" y2="292.5"/>\n\t\t\t\t\t<circle class="play-btn__circle-lg" cx="147" cy="147" r="146"/>\n\t\t\t\t\t<circle class="play-btn__circle-sm" cx="147" cy="147" r="113.5"/>\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t'),
                    $iconCircleLg = $icon.find('.play-btn__circle-lg'),
                    $iconCircleSm = $icon.find('.play-btn__circle-sm'),
                    $iconTriangle = $icon.find('.play-btn__triangle'),
                    $iconLineTop = $icon.find('.play-btn__line-top'),
                    $iconLineLeft = $icon.find('.play-btn__line-left'),
                    $iconLineRight = $icon.find('.play-btn__line-right');
    
                var tl = new _gsap.TimelineMax({ paused: true });
    
                $icon = $icon.appendTo($this);
    
                setStartState();
                createStartAnim.call(this);
                createScrollAnim.call(this);
    
                // Drawing svg icon at play-button:
                function setStartState() {
                    _gsap.TweenMax.set($iconTriangle, { alpha: 0 });
                    _gsap.TweenMax.set($iconCircleLg, {
                        drawSVG: '0%', rotation: -90, transformOrigin: 'center center'
                    });
                    _gsap.TweenMax.set($iconCircleSm, {
                        drawSVG: '0%', rotation: 135, transformOrigin: 'center center'
                    });
                    _gsap.TweenMax.set([$iconLineTop, $iconLineLeft, $iconLineRight], { drawSVG: '0%' });
                }
    
                // Play animations btn svg icon:
                function createScrollAnim() {
                    setTimeout(function () {
                        tl.play();
                    }, 2000);
                }
    
                // Add close btn:
                function createCloseBtn($videoContainer) {
                    var $btn = $('<div></div>', { class: 'screen__video-close' }).append($('<span>Close</span>'));
    
                    $btn.prependTo($videoContainer);
                    new _link2.default($btn, { type: 'close' });
    
                    return $btn;
                }
    
                function createStartAnim() {
                    var _this2 = this;
    
                    var speed = 1;
                    tl.add('start').to($iconCircleLg, speed * 2 / 3, { drawSVG: '100%', ease: Power1.easeInOut }, 'start').to([$iconLineTop, $iconLineLeft, $iconLineRight], speed / 2, {
                        drawSVG: '25% 75%', ease: Power4.easeIn
                    }, 'start').to([$iconLineTop, $iconLineLeft, $iconLineRight], speed / 3, {
                        drawSVG: '100% 100%', ease: Power2.easeOut
                    }, 'start+=' + speed / 2).to($iconTriangle, speed / 4, { alpha: 1 }, 'start+=' + speed / 2).to($iconCircleSm, speed * 2 / 10, {
                        drawSVG: '17.5% 52.5%', ease: Power1.easeIn
                    }, 'start+=' + speed / 2).to($iconCircleSm, speed / 10, {
                        drawSVG: '42.5% 70%', ease: Linear.easeNone
                    }, 'start+=' + (speed / 2 + speed * 2 / 10)).to($iconCircleSm, speed / 10, {
                        drawSVG: '50% 75%', ease: Power1.easeOut
                    }, 'start+=' + (speed / 2 + speed * 2 / 10 + speed / 10));
    
                    if (_helpers.Resp.isDesk) {
                        tl.vars.onComplete = function () {
                            bindPlayEvent.call(_this2);
                            setMouseEvent.call(_this2);
                        };
                    } else {
                        tl.vars.onComplete = function () {
                            bindPlayEvent.call(_this2);
                        };
                    }
                    function setMouseEvent() {
                        var rotation = 0;
                        var prevRotation = 0;
                        var counter = 0;
                        var speedMouse = 2;
                        var circleX = $icon.offset().left + $icon.width() / 2;
                        var circleY = $icon.offset().top + $icon.height() / 2;
    
                        _helpers.$window.on('resize', (0, _helpers.throttle)(function () {
                            circleX = $icon.offset().left + $icon.width() / 2;
                            circleY = $icon.offset().top + $icon.height() / 2;
                        }, 250, this));
    
                        $this.on('mousemove', function (e) {
                            rotation = Math.atan2(e.pageY - circleY, e.pageX - circleX) * 180 / Math.PI;
                            if (rotation + counter * 360 - prevRotation >= 180) {
                                counter--;
                            } else if (prevRotation - counter * 360 - rotation >= 180) {
                                counter++;
                            }
                            rotation += counter * 360;
                            _gsap.TweenMax.to($iconCircleSm, speedMouse, {
                                rotation: rotation + 135,
                                transformOrigin: 'center center',
                                ease: Power3.easeOut
                            });
                            prevRotation = rotation;
                        });
                    }
                }
    
                function bindPlayEvent() {
                    var _this3 = this;
    
                    var screenHeight = this.$container.height();
                    var videoHeight = $('.vjs-tech').height();
    
                    _helpers.Resp.isDesk ? $('.vjs-tech').height(window.innerHeight) : null;
    
                    $video.each(function (index, el) {
                        el.addEventListener('ended', function () {
                            _helpers.$body.trigger('closeVideo');
                        });
                    });
    
                    $closeBtn.on('click', function () {
                        _helpers.$body.trigger('closeVideo');
                    });
    
                    // $body.bind('playVideoAndResize', () => {
                    //
                    // });
    
                    _helpers.$body.bind('closeVideo', function () {
                        video.pause();
                        _this3.$container.removeClass('show-video');
    
                        setTimeout(function () {
                            if (!_helpers.Resp.isMobile && !_helpers.Resp.isTablet) {
                                $('.screen_ceo').animate({
                                    height: document.documentElement.clientHeight,
                                    "min-height": document.documentElement.clientHeight
                                }, 1000);
                                console.log('not mobile');
                                // setTimeout(function(){
                                //    video.pause();
                                // }, 300)
                            } else if (_helpers.Resp.isTablet && _helpers.$window.width() < _helpers.$window.height()) {
                                $('.screen_ceo').animate({
                                    height: document.documentElement.clientHeight,
                                    "min-height": document.documentElement.clientHeight
                                }, 1000);
                            } else if (_helpers.Resp.isTablet && _helpers.$window.width() > _helpers.$window.height()) {
                                console.log('tablet');
                                setTimeout(function () {
                                    var fixHeight = document.documentElement.clientWidth * 780 / 1024;
                                    var mainScreen = document.getElementsByClassName('screen')[0];
                                    mainScreen.style.setProperty('min-height', fixHeight + 'px', '');
    
                                    if (fixHeight > document.documentElement.clientHeight) {
                                        mainScreen.style.setProperty('margin-top', document.documentElement.clientHeight - fixHeight + 'px', '');
                                        $('.preloader').css('margin-top', document.documentElement.clientHeight - fixHeight + 'px');
                                    }
                                }, 1100);
                            } else if (_helpers.Resp.isMobile && _helpers.$window.width() > _helpers.$window.height()) {
                                console.log('is mobile portrait');
                                $('.screen_ceo').animate({
                                    height: document.documentElement.clientHeight,
                                    "min-height": document.documentElement.clientHeight
                                }, 1000);
                            } else {
                                console.log('else screen resolution');
                                $('.screen_ceo').animate({
                                    height: 480,
                                    "min-height": 480
                                }, 1000);
                            }
    
                            _bScreen.ScreenAPI.sector.startAnim();
                            $breadcrumbs.removeClass(_helpers.css.active);
                            _helpers.$header.removeClass('is-hide is-disabled');
                            // video.load();
                            video.pause();
                        }, 1000);
                    });
    
                    $icon.on('click tap', function () {
                        video.load();
                        if (!_helpers.Resp.isDesk) {
                            setTimeout(function () {
                                $('.screen_ceo').animate({
                                    height: $('.vjs-tech').height(),
                                    'min-height': 0
                                }, 1000);
                            }, 1000);
                        }
                        // Close canvas:
                        _bScreen.ScreenAPI.sector.screenAnim();
                        // Init css anim:
                        $breadcrumbs.addClass(_helpers.css.active);
                        _helpers.$header.addClass(_helpers.css.hide);
                        _this3.$container.addClass('show-video');
                        disabledHeader();
                        setTimeout(function () {
                            video.play();
                            if (_helpers.Resp.isTablet && _helpers.$window.width() > _helpers.$window.height()) {
                                var mainScreen = document.getElementsByClassName('screen')[0];
                                mainScreen.style.setProperty('margin-top', 0 + 'px', '');
                            }
                        }, 1200);
                    });
    
                    function disabledHeader() {
                        var windowHeight = _helpers.$window.innerHeight();
    
                        _helpers.$window.on('scroll', function () {
                            if ($('.show-video').length !== 0) {
                                _helpers.$window.scrollTop() > videoHeight ? _helpers.$header.removeClass(_helpers.css.disabled) : _helpers.$header.addClass(_helpers.css.disabled);
                            }
                        });
    
                        _helpers.$window.on('resize', function () {
                            if ($('.screen_ceo').hasClass('show-video')) {
                                setTimeout(function () {
                                    $('.screen_ceo').css('height', $('.vjs-tech').height());
                                    $('.screen_ceo').css('min-height', $('.vjs-tech').height());
                                }, 5);
                            }
                        });
                    }
                }
            }
        }]);
    
        return ScreenVideoPlay;
    }();
    
    exports.default = new ScreenVideoPlay();
    
    /***/ }),
    /* 390 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _helpers = __webpack_require__(3);
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var ToggleBtn = function () {
        function ToggleBtn() {
            _classCallCheck(this, ToggleBtn);
    
            this.$solutionsItem = $('.solutions__item');
            this.$solutionsContainer = $('.solutions__row-2:not(.is-disabled)');
    
            this.init();
        }
    
        _createClass(ToggleBtn, [{
            key: 'init',
            value: function init() {
                this.createHTML();
            }
        }, {
            key: 'createHTML',
            value: function createHTML() {
                if (this.$solutionsItem.length && this.$solutionsContainer.length) {
                    var $itemContainer = this.$solutionsContainer,
                        $solutionsItem = this.$solutionsItem;
    
                    var limitItem = void 0,
                        initShowBtnIndex = void 0;
    
                    // Set parametrs:
                    if (_helpers.Resp.isMobile) {
                        limitItem = 6;
                        initShowBtnIndex = 5;
                    } else {
                        limitItem = 12;
                        initShowBtnIndex = 11;
                    }
    
                    // Create HTML:
                    this.$solutionsItem.each(function (index, el) {
                        if (index >= limitItem) {
                            if (index === limitItem) {
                                var $toggleItem = $solutionsItem.eq(initShowBtnIndex);
                                // Show btn:
                                $itemContainer.addClass(_helpers.css.hide).append('<button class="solutions__item solutions__item_hidden anim-line__item has-anim is-active" data-mob-anim="group"><svg class="solutions__toggle-icon" data-anim-parent-trigger="data-anim-parent-trigger" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 36.5 36.5"><g><g><path d="M18.25,0A18.25,18.25,0,1,0,36.5,18.25,18.25,18.25,0,0,0,18.25,0Zm0,20.69a2.44,2.44,0,1,1,2.44-2.44A2.44,2.44,0,0,1,18.25,20.69Z"/></g></g></svg><span class="solutions__title solutions__toggle-title h6" data-anim-parent-trigger="data-anim-parent-trigger">hide</span></button>');
                                // Hide btn:
                                $toggleItem.addClass(_helpers.css.active).append('<svg class="solutions__toggle-icon" data-anim-parent-trigger="data-anim-parent-trigger" data-anim-stagger="fade-top" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 36.5 36.5"><g><g><path d="M18.25,0A18.25,18.25,0,1,0,36.5,18.25,18.25,18.25,0,0,0,18.25,0ZM7.48,20.69a2.44,2.44,0,1,1,2.44-2.44A2.44,2.44,0,0,1,7.48,20.69Zm10.77,0a2.44,2.44,0,1,1,2.44-2.44A2.44,2.44,0,0,1,18.25,20.69Zm10.77,0a2.44,2.44,0,1,1,2.44-2.44A2.44,2.44,0,0,1,29,20.69Z"/></g></g></svg><span class="solutions__title solutions__toggle-title h6" data-anim-stagger="fade-top" data-anim-parent-trigger="data-anim-parent-trigger">all industries</span>');
                            }
                            $solutionsItem.eq(index).addClass('solutions__item_hidden');
                        }
                    });
    
                    // Init toggle btn:
                    this.initToggleBtn($itemContainer, $solutionsItem);
                }
            }
        }, {
            key: 'initToggleBtn',
            value: function initToggleBtn($itemContainer, $solutionsItem) {
                var $btnShow = $('.solutions__item.is-active'),
                    $solutionsItemHidden = $('.solutions__item_hidden');
    
                var initShowBtnIndex = void 0,
                    btnPosition = 0;
    
                if ($solutionsItemHidden.length) $solutionsItemHidden.wrapAll('<div class="solutions__wrap-hidden" />').wrapAll('<div />');
    
                $btnShow.on('click tap', function (e) {
                    var $this = $(this);
    
                    if ($this.closest('.solutions__row-2.is-hide').length === 1) {
                        e.preventDefault();
                    }
    
                    var $hiddenWrap = $(this).closest('.solutions__wrap-hidden');
    
                    if ($hiddenWrap.length) {
                        _helpers.Resp.isMobile ? initShowBtnIndex = 5 : initShowBtnIndex = 11;
                        $hiddenWrap.slideUp("linear");
                        $itemContainer.addClass(_helpers.css.hide);
                        if (btnPosition !== 0) _helpers.$body.animate({ scrollTop: btnPosition - 100 }, 700);
                        setTimeout(function () {
                            $solutionsItem.eq(initShowBtnIndex).addClass(_helpers.css.active);
                        }, 400);
                    } else {
                        btnPosition = $(this).offset().top;
                        $btnShow.next().slideDown("linear");
                        $itemContainer.removeClass(_helpers.css.hide);
                    }
                });
            }
        }]);
    
        return ToggleBtn;
    }();
    
    exports.default = new ToggleBtn();
    
    /***/ }),
    /* 391 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    __webpack_require__(81);
    
    var _dot = __webpack_require__(62);
    
    var _dot2 = _interopRequireDefault(_dot);
    
    var _animLines = __webpack_require__(80);
    
    var _helpers = __webpack_require__(3);
    
    __webpack_require__(392);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var SlickInit = function () {
        function SlickInit() {
            _classCallCheck(this, SlickInit);
    
            this.$slider = $('.slider-inner');
    
            if (this.$slider.length) {
                this.sliderClients = $('.slider-inner__slides_clients');
                this.sliderDevelopers = $('.slider-inner__slides_developers');
                this.sliderArticles = $('.slider-inner__slides_articles');
                this.sliderSectors = $('.slider-inner__slides_sectors');
                this.sliderCountry = $('.slider-inner__slides_country');
                this.sliderTimeline = $('.slider-inner__slides_timeline');
                this.sliderTimeline2 = $('.slider-inner__slides_timeline2');
                this.sliderGallery = $('.slider-inner__slides_gallery');
                this.sliderGalleryCareer = $('.gallery-career__slider');
                this.sliderLeaders = $('.blog-4__slides_leadership');
    
                this.init();
            }
        }
    
        _createClass(SlickInit, [{
            key: 'init',
            value: function init() {
                _animLines.AnimLinesAPI.init();
    
                if (this.sliderClients.length) this.initClientsSlider();
                if (this.sliderDevelopers.length) this.initDevelopersSlider();
                if (this.sliderArticles.length) this.initArticlesSlider();
                if (this.sliderSectors.length) this.initSectorsSlider();
                if (this.sliderCountry.length) this.initCountrySlider();
                if (this.sliderTimeline.length) this.initTimelineSlider();
                if (this.sliderTimeline2.length) this.initTimelineSlider2();
                if (this.sliderGallery.length) this.initGallerySlider();
                if (this.sliderGalleryCareer.length) this.initGalleryCareerSlider();
                if (this.sliderLeaders.length) this.initLeadersSlider();
            }
        }, {
            key: 'initClientsSlider',
            value: function initClientsSlider() {
                var $slides = $(this.sliderClients),
                    $prevArrow = $('.slider-inner__arrows_clients .slider-inner__prev'),
                    $nextArrow = $('.slider-inner__arrows_clients .slider-inner__next');
    
                // Init slider:
                $slides.slick({
                    rows: 2,
                    infinite: false,
                    autoplay: false,
                    dots: false,
                    cssEase: 'linear',
                    slidesToShow: 4,
                    slidesToScroll: 4,
                    prevArrow: $prevArrow,
                    nextArrow: $nextArrow,
                    responsive: [{
                        breakpoint: 768,
                        settings: {
                            rows: 3,
                            slidesToShow: 2,
                            slidesToScroll: 2
                        }
                    }]
                });
            }
        }, {
            key: 'initDevelopersSlider',
            value: function initDevelopersSlider() {
                var $slides = $(this.sliderDevelopers),
                    $prevArrow = $('.slider-inner__arrows_developers .slider-inner__prev'),
                    $nextArrow = $('.slider-inner__arrows_developers .slider-inner__next');
    
                // Init slider:
                $slides.slick({
                    infinite: false,
                    autoplay: false,
                    dots: false,
                    cssEase: 'linear',
                    slidesToShow: 4,
                    slidesToScroll: 4,
                    prevArrow: $prevArrow,
                    nextArrow: $nextArrow,
                    rows: 0,
                    responsive: [{
                        breakpoint: 1200,
                        settings: {
                            slidesToShow: 3,
                            slidesToScroll: 3
                        }
                    }, {
                        breakpoint: 768,
                        settings: {
                            slidesToShow: 1,
                            slidesToScroll: 1
                        }
                    }]
                });
            }
        }, {
            key: 'initArticlesSlider',
            value: function initArticlesSlider() {
                var $slides = $(this.sliderArticles),
                    $prevArrow = $('.slider-inner__arrows_articles .slider-inner__prev'),
                    $nextArrow = $('.slider-inner__arrows_articles .slider-inner__next');
    
                // Init slider:
                $slides.slick({
                    infinite: false,
                    autoplay: false,
                    accessibility: false,
                    dots: false,
                    speed: 400,
                    cssEase: 'linear',
                    slidesToShow: 2,
                    slidesToScroll: 2,
                    prevArrow: $prevArrow,
                    nextArrow: $nextArrow,
                    rows: 0,
                    responsive: [{
                        breakpoint: 1200,
                        settings: {
                            slidesToShow: 2,
                            slidesToScroll: 2
                        }
                    }, {
                        breakpoint: 768,
                        settings: {
                            slidesToShow: 1,
                            slidesToScroll: 1
                        }
                    }, {
                        breakpoint: 460,
                        settings: {
                            slidesToShow: 1,
                            slidesToScroll: 1
                        }
                    }]
                });
            }
        }, {
            key: 'initSectorsSlider',
            value: function initSectorsSlider() {
                var $slides = $(this.sliderSectors),
                    $prevArrow = $('.slider-inner__arrows_sectors .slider-inner__prev'),
                    $nextArrow = $('.slider-inner__arrows_sectors .slider-inner__next');
    
                // Add anim class first slides after init slider:
                $slides.on('init', function (event, slick) {
                    $slides.find('.slick-active').addClass(_helpers.css.anim);
                });
    
                // Init slider:
                $slides.slick({
                    dots: true,
                    fade: true,
                    swipe: false,
                    autoplay: false,
                    slidesToShow: 1,
                    cssEase: 'ease-out',
                    prevArrow: $prevArrow,
                    nextArrow: $nextArrow,
                    rows: 0,
                    responsive: [{
                        breakpoint: 768,
                        settings: {
                            swipe: true,
                            fade: false,
                            slidesToScroll: 1,
                            adaptiveHeight: true
                        }
                    }]
                });
            }
        }, {
            key: 'initGalleryCareerSlider',
            value: function initGalleryCareerSlider() {
                var $slides = $(this.sliderGalleryCareer),
                    $prevArrow = $('.gallery-career__slider-arrow_left'),
                    $nextArrow = $('.gallery-career__slider-arrow_right'),
                    $statusCurrent = $('.gallery-career__status-item_current'),
                    $statusTotal = $('.gallery-career__status-item_total');
    
                $slides.slick({
                    dots: false,
                    fade: true,
                    autoplay: false,
                    infinite: false,
                    speed: 1000,
                    slidesToShow: 1,
                    slidesToScroll: 1,
                    cssEase: 'linear',
                    prevArrow: $prevArrow,
                    nextArrow: $nextArrow,
                    rows: 0
                });
    
                setStatus();
    
                function setStatus() {
                    var current = $slides.slick('slickCurrentSlide') + 1;
                    var total = $slides.slick('getSlick').slideCount;
                    $statusCurrent.text(current);
                    $statusTotal.text(total);
                }
    
                $slides.on('afterChange', function () {
                    setStatus();
                });
            }
        }, {
            key: 'initCountrySlider',
            value: function initCountrySlider() {
                var $slides = $(this.sliderCountry),
                    $prevArrow = $('.slider-inner__arrows_country .slider-inner__prev'),
                    $nextArrow = $('.slider-inner__arrows_country .slider-inner__next'),
                    $sliderItems = $slides.find('.country__item'),
                    $slidesArrows = $('.slider-inner__arrows_country'),
                    $colSmall = $('.slider-inner_country .col__small');
    
                switch (true) {
                    case _helpers.Resp.isDesk && $sliderItems.length < 6:
                        $slidesArrows.addClass(_helpers.css.hide);
                        return false;
                        break;
                    case _helpers.Resp.isTablet && $sliderItems.length < 5:
                        $slidesArrows.addClass(_helpers.css.hide);
                        $slides.addClass('no-slick');
                        $colSmall.hide();
                        return false;
                        break;
                    case _helpers.Resp.isMobile && $sliderItems.length < 3:
                        $slidesArrows.addClass(_helpers.css.hide);
                        $slides.addClass('no-slick');
                        $colSmall.hide();
                        return false;
                        break;
                    default:
                        initSlider();
                };
    
                // Init slider:
                function initSlider() {
                    $slides.slick({
                        infinite: false,
                        autoplay: false,
                        dots: false,
                        cssEase: 'linear',
                        slidesToShow: 5,
                        slidesToScroll: 5,
                        rows: 0,
                        prevArrow: $prevArrow,
                        nextArrow: $nextArrow,
                        responsive: [{
                            breakpoint: 1200,
                            settings: {
                                slidesToShow: 3,
                                slidesToScroll: 3
                            }
                        }, {
                            breakpoint: 768,
                            settings: {
                                slidesToShow: 3,
                                slidesToScroll: 3
                            }
                        }, {
                            breakpoint: 400,
                            settings: {
                                slidesToShow: 2,
                                slidesToScroll: 2
                            }
                        }]
                    });
                }
            }
        }, {
            key: 'initTimelineSlider',
            value: function initTimelineSlider() {
                var $slides = $(this.sliderTimeline),
                    $timeline = $('.timeline'),
                    slideCount = $timeline.length,
                    slideAnimationTime = 200;
    
                // console.log(slideCount);
    
                // Dot timeline-slider content descr:
                new _dot2.default($('.timeline__text'));
    
                // Handler click/touch events after slick init:
                $slides.on('init', function (event, slick) {
                    var imgItem = $slides.find('img'),
    
    
                    // $prevArrow = $('.slider-inner__prev'),
                    // $nextArrow = $('.slider-inner__next');
                    $prevArrow = $('.slider-inner__next'),
                        $nextArrow = $('.slider-inner__prev');
    
                    arrowRefresh();
    
                    // Click/tap handler:
                    setTimeout(function () {
                        imgItem.on('click tap', function () {
                            var nextSlideIndex = $(this).closest('.timeline').data('slick-index'),
                                currentIndex = getCurrentSlide(),
                                offsetSlide_1 = 2,
                                offsetSlide_2 = 3,
                                offsetSlide_3 = 5;
    
                            $slides.addClass(_helpers.css.active);
                            if (currentIndex === nextSlideIndex) {
                                return false;
                            }
    
                            if (_helpers.Resp.isTablet) {
                                offsetSlide_1 = 1, offsetSlide_2 = offsetSlide_3 = 2;
                            }
    
                            if (currentIndex < 2) {
                                nextSlideIndex < 2 ? $slides.slick('slickGoTo', 0) : $slides.slick('slickGoTo', nextSlideIndex - offsetSlide_1);
                                $timeline.removeClass('slick-current');
                                $timeline.eq(nextSlideIndex).addClass('slick-current');
                            } else {
                                if (nextSlideIndex > slideCount - offsetSlide_2) {
                                    $slides.slick('slickGoTo', slideCount - offsetSlide_3);
                                } else {
                                    $slides.slick('slickGoTo', nextSlideIndex - offsetSlide_1);
                                }
                                $timeline.removeClass('slick-current');
                                $timeline.eq(nextSlideIndex).addClass('slick-current');
                            }
                            arrowRefresh();
                        });
                    }, slideAnimationTime);
    
                    // Arrow handler (left and right):
                    $prevArrow.on("click tap", function () {
                        getPrev();
                        setTimeout(function () {
                            arrowRefresh();
                        }, slideAnimationTime);
                    });
    
                    $nextArrow.on("click tap", function () {
                        getNext();
                        setTimeout(function () {
                            arrowRefresh();
                        }, slideAnimationTime);
                    });
    
                    function arrowRefresh() {
                        $prevArrow.removeClass('slick-disabled');
                        $nextArrow.removeClass('slick-disabled');
    
                        if ($timeline.eq(0).hasClass('slick-current')) {
                            $prevArrow.addClass('slick-disabled');
                        }
                        if ($timeline.eq(slideCount - 1).hasClass('slick-current')) {
                            $nextArrow.addClass('slick-disabled');
                        }
                    }
                });
    
                // Init slider:
                $slides.slick({
                    infinite: false,
                    // initialSlide: slideCount - 1,
                    rtl: true,
                    focusOnSelect: true,
                    // fade: false,
                    // centerMode: true,
                    // slidesToScroll: -1,
                    swipe: false,
                    autoplay: false,
                    slidesToShow: 5,
                    arrows: false,
                    speed: slideAnimationTime,
                    centerPadding: '10px',
                    rows: 0,
                    responsive: [{
                        breakpoint: 1200,
                        settings: {
                            slidesToShow: 3,
                            slidesToScroll: 1
                        }
                    }, {
                        breakpoint: 768,
                        settings: {
                            speed: 500,
                            swipe: true,
                            slidesToShow: 1,
                            slidesToScroll: 1
                        }
                    }]
                });
    
                function getPrev() {
                    var currentIndex = getCurrentSlide(),
                        nextIndex = currentIndex - 1;
    
                    $slides.addClass(_helpers.css.active);
    
                    if (_helpers.Resp.isMobile) {
                        $slides.slick('slickGoTo', nextIndex);
                        $timeline.removeClass('slick-current');
                        $timeline.eq(nextIndex).addClass('slick-current');
                    } else {
                        setTimeout(function () {
                            if (currentIndex === 0) {
                                return false;
                            } else {
                                if (currentIndex < 3) {
                                    $slides.slick('slickGoTo', 0);
                                } else {
                                    _helpers.Resp.isDesk ? $slides.slick('slickGoTo', nextIndex - 2) : $slides.slick('slickGoTo', nextIndex - 1);
                                }
                                $timeline.removeClass('slick-current');
                                $timeline.eq(nextIndex).addClass('slick-current');
                            }
                        }, slideAnimationTime);
                    }
                };
    
                function getNext() {
                    var currentIndex = getCurrentSlide(),
                        nextIndex = currentIndex + 1;
    
                    $slides.addClass(_helpers.css.active);
    
                    if (_helpers.Resp.isMobile) {
    
                        if (currentIndex === slideCount - 1) {
                            $slides.slick('slickGoTo', 0);
                            $timeline.removeClass('slick-current');
                            $timeline.eq(0).addClass('slick-current');
                        } else {
                            $slides.slick('slickGoTo', nextIndex);
                            $timeline.removeClass('slick-current');
                            $timeline.eq(nextIndex).addClass('slick-current');
                        }
                    } else {
                        setTimeout(function () {
                            if (currentIndex === slideCount - 1) {
                                $slides.slick('slickGoTo', 0);
                                $timeline.removeClass('slick-current');
                                $timeline.eq(0).addClass('slick-current');
                            } else {
                                if (currentIndex < 1) {
                                    $slides.slick('slickGoTo', 0);
                                } else {
                                    _helpers.Resp.isDesk ? $slides.slick('slickGoTo', nextIndex - 2) : $slides.slick('slickGoTo', nextIndex - 1);
                                }
                                $timeline.removeClass('slick-current');
                                $timeline.eq(nextIndex).addClass('slick-current');
                            }
                        }, slideAnimationTime);
                    }
                };
    
                function getCurrentSlide() {
                    return $slides.find('.slick-current').data('slick-index');
                };
            }
        }, {
            key: 'initTimelineSlider2',
            value: function initTimelineSlider2() {
                var $slides = $(this.sliderTimeline2),
                    $timeline = $('.timeline'),
                    slideCount = $timeline.length,
                    slideAnimationTime = 200;
    
                // console.log(slideCount);
    
                // Dot timeline-slider content descr:
                new _dot2.default($('.timeline__text'));
    
                // Handler click/touch events after slick init:
                $slides.on('init', function (event, slick) {
                    var imgItem = $slides.find('img'),
    
    
                    // $prevArrow = $('.slider-inner__prev'),
                    // $nextArrow = $('.slider-inner__next');
                    $prevArrow = $('.slider-inner__prev'),
                        $nextArrow = $('.slider-inner__next');
    
                    arrowRefresh();
    
                    // Click/tap handler:
                    setTimeout(function () {
                        imgItem.on('click tap', function () {
                            var nextSlideIndex = $(this).closest('.timeline').data('slick-index'),
                                currentIndex = getCurrentSlide(),
                                offsetSlide_1 = 2,
                                offsetSlide_2 = 3,
                                offsetSlide_3 = 5;
    
                            $slides.addClass(_helpers.css.active);
                            if (currentIndex === nextSlideIndex) {
                                return false;
                            }
    
                            if (_helpers.Resp.isTablet) {
                                offsetSlide_1 = 1, offsetSlide_2 = offsetSlide_3 = 2;
                            }
    
                            if (currentIndex < 2) {
                                nextSlideIndex < 2 ? $slides.slick('slickGoTo', 0) : $slides.slick('slickGoTo', nextSlideIndex - offsetSlide_1);
                                $timeline.removeClass('slick-current');
                                $timeline.eq(nextSlideIndex).addClass('slick-current');
                            } else {
                                if (nextSlideIndex > slideCount - offsetSlide_2) {
                                    $slides.slick('slickGoTo', slideCount - offsetSlide_3);
                                } else {
                                    $slides.slick('slickGoTo', nextSlideIndex - offsetSlide_1);
                                }
                                $timeline.removeClass('slick-current');
                                $timeline.eq(nextSlideIndex).addClass('slick-current');
                            }
                            arrowRefresh();
                        });
                    }, slideAnimationTime);
    
                    // Arrow handler (left and right):
                    $prevArrow.on("click tap", function () {
                        getPrev();
                        setTimeout(function () {
                            arrowRefresh();
                        }, slideAnimationTime);
                    });
    
                    $nextArrow.on("click tap", function () {
                        getNext();
                        setTimeout(function () {
                            arrowRefresh();
                        }, slideAnimationTime);
                    });
    
                    function arrowRefresh() {
                        $prevArrow.removeClass('slick-disabled');
                        $nextArrow.removeClass('slick-disabled');
    
                        if ($timeline.eq(0).hasClass('slick-current')) {
                            $prevArrow.addClass('slick-disabled');
                        }
                        if ($timeline.eq(slideCount - 1).hasClass('slick-current')) {
                            $nextArrow.addClass('slick-disabled');
                        }
                    }
                });
    
                // Init slider:
                $slides.slick({
                    infinite: false,
                    focusOnSelect: true,
                    // fade: false,
                    // centerMode: true,
                    // slidesToScroll: -1,
                    swipe: false,
                    autoplay: false,
                    slidesToShow: 5,
                    arrows: false,
                    speed: slideAnimationTime,
                    centerPadding: '10px',
                    rows: 0,
                    responsive: [{
                        breakpoint: 1200,
                        settings: {
                            slidesToShow: 3,
                            slidesToScroll: 1
                        }
                    }, {
                        breakpoint: 768,
                        settings: {
                            speed: 500,
                            swipe: true,
                            slidesToShow: 1,
                            slidesToScroll: 1
                        }
                    }]
                });
    
                function getPrev() {
                    var currentIndex = getCurrentSlide(),
                        nextIndex = currentIndex - 1;
    
                    $slides.addClass(_helpers.css.active);
    
                    if (_helpers.Resp.isMobile) {
                        $slides.slick('slickGoTo', nextIndex);
                        $timeline.removeClass('slick-current');
                        $timeline.eq(nextIndex).addClass('slick-current');
                    } else {
                        setTimeout(function () {
                            if (currentIndex === 0) {
                                return false;
                            } else {
                                if (currentIndex < 3) {
                                    $slides.slick('slickGoTo', 0);
                                } else {
                                    _helpers.Resp.isDesk ? $slides.slick('slickGoTo', nextIndex - 2) : $slides.slick('slickGoTo', nextIndex - 1);
                                }
                                $timeline.removeClass('slick-current');
                                $timeline.eq(nextIndex).addClass('slick-current');
                            }
                        }, slideAnimationTime);
                    }
                };
    
                function getNext() {
                    var currentIndex = getCurrentSlide(),
                        nextIndex = currentIndex + 1;
    
                    $slides.addClass(_helpers.css.active);
    
                    if (_helpers.Resp.isMobile) {
    
                        if (currentIndex === slideCount - 1) {
                            $slides.slick('slickGoTo', 0);
                            $timeline.removeClass('slick-current');
                            $timeline.eq(0).addClass('slick-current');
                        } else {
                            $slides.slick('slickGoTo', nextIndex);
                            $timeline.removeClass('slick-current');
                            $timeline.eq(nextIndex).addClass('slick-current');
                        }
                    } else {
                        setTimeout(function () {
                            if (currentIndex === slideCount - 1) {
                                $slides.slick('slickGoTo', 0);
                                $timeline.removeClass('slick-current');
                                $timeline.eq(0).addClass('slick-current');
                            } else {
                                if (currentIndex < 1) {
                                    $slides.slick('slickGoTo', 0);
                                } else {
                                    _helpers.Resp.isDesk ? $slides.slick('slickGoTo', nextIndex - 2) : $slides.slick('slickGoTo', nextIndex - 1);
                                }
                                $timeline.removeClass('slick-current');
                                $timeline.eq(nextIndex).addClass('slick-current');
                            }
                        }, slideAnimationTime);
                    }
                };
    
                function getCurrentSlide() {
                    return $slides.find('.slick-current').data('slick-index');
                };
            }
        }, {
            key: 'initGallerySlider',
            value: function initGallerySlider() {
                // $('.gallery-body').each( function( i, slides) {
                //
                // 	let thslider = $(slides),
                // 			sliderNav =
                // }
                $(this.sliderGallery).each(function (i, slides) {
    
                    var $slides = $(slides),
                        $wrapper = $slides.closest('.slider-inner_gallery'),
                        $prevArrow = $wrapper.find('.slider-inner__arrows_gallery .slider-inner__prev'),
                        $nextArrow = $wrapper.find('.slider-inner__arrows_gallery .slider-inner__next'),
                        $sliderSlide = $slides.find('.slider-inner__item'),
                        slideCount = $sliderSlide.length,
                        $sliderPreviewTarget = $wrapper.find('.slider-inner__preview img'),
                        $slideImages = $slides.find('.slider-inner__item img');
                    // console.log($slideImages);
    
                    var showCount = void 0;
                    switch (true) {
                        case _helpers.Resp.isDesk:
                            slideCount < 5 ? showCount = slideCount : showCount = 5;
                            break;
                        case _helpers.Resp.isTablet:
                            slideCount < 4 ? showCount = slideCount : showCount = 4;
                            break;
                        default:
                            showCount = 2;
                    }
    
                    $slides.on('init', function (event, slick) {
                        var currentImgSrc = $slides.find('.slick-slide img').eq(0).attr('src');
    
                        $sliderPreviewTarget.attr("src", currentImgSrc).data('index', 0);
                        arrowRefresh();
                    });
    
                    // $slides.on('beforeChange', function(event, slick, currentSlide, nextSlide) {
                    // 	let nextImgSrc = $slides.find('.slick-slide img').eq(nextSlide).attr('src');
                    // 	$sliderPreviewTarget.attr("src", nextImgSrc)
                    // 											.data('index', nextSlide);
                    // 											console.log('before change', event, slick, currentSlide, nextSlide);
                    // });
    
                    $sliderSlide.on("click tap", function () {
                        // const currentIndex = getCurrentSlide();
    
                        var $this = $(this),
                            nextImgSrc = $this.find('img').attr('src'),
                            index = $sliderSlide.index($this);
                        // console.log(nextImgSrc, index);
                        $sliderSlide.removeClass('slick-current');
                        $this.addClass('slick-current');
                        console.log(nextImgSrc);
                        $sliderPreviewTarget.attr("src", nextImgSrc).data('index', index);
    
                        // arrowRefresh();
                    });
    
                    $prevArrow.on("click tap", function () {
                        var currentIndex = getCurrentSlide(),
                            prevIndex = currentIndex - 1,
                            nextImgSrc = $sliderSlide.eq(prevIndex).find('img').attr('src');
    
                        if (currentIndex !== 0) {
                            $slides.slick('slickGoTo', prevIndex);
                            $sliderSlide.removeClass('slick-current');
                            $sliderSlide.eq(prevIndex).addClass('slick-current');
                            $sliderPreviewTarget.attr("src", nextImgSrc).data('index', prevIndex);
                        }
                        arrowRefresh();
                    });
    
                    $nextArrow.on("click tap", function () {
                        var currentIndex = getCurrentSlide(),
                            nextIndex = currentIndex + 1,
                            nextImgSrc = $sliderSlide.eq(nextIndex).find('img').attr('src');
    
                        if (currentIndex !== slideCount - 1) {
                            $slides.slick('slickGoTo', nextIndex);
                            $sliderSlide.removeClass('slick-current');
                            $sliderSlide.eq(nextIndex).addClass('slick-current');
                            $sliderPreviewTarget.attr("src", nextImgSrc).data('index', nextIndex);
                        }
                        arrowRefresh();
                    });
    
                    // Init slider:
                    $slides.slick({
                        infinite: false,
                        autoplay: false,
                        swipe: false,
                        arrows: false,
                        dots: false,
                        speed: 400,
                        cssEase: 'linear',
                        slidesToShow: showCount,
                        slidesToScroll: showCount,
                        prevArrow: $prevArrow,
                        nextArrow: $nextArrow,
                        rows: 0
                    });
    
                    // Init fancybox
                    // $wrapper.find(".open_fancybox").click(function() {
                    //
                    // 	 $.fancybox.open($slideImages,{
                    // 			prevEffect		: 'none',
                    // 			nextEffect		: 'none',
                    // 			closeBtn		: true,
                    // 			scrolling: false,
                    // 			showNavArrows: true,
                    // 			index: $sliderPreviewTarget.data('index'),
                    // 			helpers		: {
                    // 				title	: { type : 'inside' },
                    // 				buttons	: {}
                    // 			}
                    // 	 });
                    // 	 return false;
                    // });
    
                    $wrapper.find(".open_fancybox").click(function () {
    
                        $.fancybox.open($slideImages, {
                            toolbar: true,
                            hideScrollbar: true,
                            smallBtn: true,
                            iframe: {
                                preload: false
                            },
                            index: $sliderPreviewTarget.data('index')
                        });
    
                        return false;
                    });
    
                    // $(document).on('afterClose.fb', function( e, instance, slide ) {
                    // 	console.log(slide);
                    // 	// $slides.slick('destroy');
                    // 	// $slides.slick('init', {
                    // 	// 	initialSlide: slide
                    // 	// });
                    // 	// console.log($slides.slick('getSlick'));
                    // 	// $slides.slick({
                    // 	// 	initialSlide: 0
                    // 	// });
                    //  });
    
    
                    function arrowRefresh() {
                        $prevArrow.removeClass('slick-disabled');
                        $nextArrow.removeClass('slick-disabled');
    
                        if ($sliderSlide.eq(0).hasClass('slick-current')) {
                            $prevArrow.addClass('slick-disabled');
                        }
                        if ($sliderSlide.eq(slideCount - 1).hasClass('slick-current')) {
                            $nextArrow.addClass('slick-disabled');
                        }
                    }
    
                    function getCurrentSlide() {
                        return $slides.find('.slick-current').data('slick-index');
                    };
                });
            }
        }, {
            key: 'initLeadersSlider',
            value: function initLeadersSlider() {
                var $slides = $(this.sliderLeaders),
                    $prevArrow = $('.blog-4__arrows_leaders .blog-4__prev'),
                    $nextArrow = $('.blog-4__arrows_leaders .blog-4__next'),
                    $dots = $('.blog-4__slider-dots');
    
                $slides.slick({
                    infinite: false,
                    autoplay: false,
                    dots: true,
                    prevArrow: $prevArrow,
                    nextArrow: $nextArrow,
                    cssEase: 'linear',
                    slidesToShow: 3,
                    slidesToScroll: 3,
                    appendDots: $dots,
                    responsive: [{
                        breakpoint: 1024,
                        settings: {
                            slidesToShow: 2,
                            slidesToScroll: 2
                        }
                    }, {
                        breakpoint: 600,
                        settings: {
                            slidesToShow: 1,
                            slidesToScroll: 1
                        }
                    }]
                });
    
                var $li = $dots.find('li');
                $li.each(function (_, el) {
                    var icon = $('\n\t\t\t<div class="icon">\n\t\t\t\t<svg viewBox="0 0 8 8">\n\t\t\t\t\t<path d="M8,1.6L6.1,0C5.6,0.5,4.8,0.7,4,0.7C3.2,0.7,2.4,0.5,1.9,0L0,1.6C1,2.5,2.4,3,4,3C5.6,3,7,2.5,8,1.6z"/>\n\t\t\t\t</svg>\n\t\t\t</div>');
                    icon.appendTo(el);
                });
            }
        }]);
    
        return SlickInit;
    }();
    
    exports.default = new SlickInit();
    
    /***/ }),
    /* 392 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
         _ _      _       _
     ___| (_) ___| | __  (_)___
    / __| | |/ __| |/ /  | / __|
    \__ \ | | (__|   < _ | \__ \
    |___/_|_|\___|_|\_(_)/ |___/
                       |__/
    
     Version: 1.7.1
      Author: Ken Wheeler
     Website: http://kenwheeler.github.io
        Docs: http://kenwheeler.github.io/slick
        Repo: http://github.com/kenwheeler/slick
      Issues: http://github.com/kenwheeler/slick/issues
    
     */
    /* global window, document, define, jQuery, setInterval, clearInterval */
    ;(function(factory) {
        'use strict';
        if (true) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(110)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
                    __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
                    (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
                    __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        } else if (typeof exports !== 'undefined') {
            module.exports = factory(require('jquery'));
        } else {
            factory(jQuery);
        }
    
    }(function($) {
        'use strict';
        var Slick = window.Slick || {};
    
        Slick = (function() {
    
            var instanceUid = 0;
    
            function Slick(element, settings) {
    
                var _ = this, dataSettings;
    
                _.defaults = {
                    accessibility: true,
                    adaptiveHeight: false,
                    appendArrows: $(element),
                    appendDots: $(element),
                    arrows: true,
                    asNavFor: null,
                    prevArrow: '<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',
                    nextArrow: '<button class="slick-next" aria-label="Next" type="button">Next</button>',
                    autoplay: false,
                    autoplaySpeed: 3000,
                    centerMode: false,
                    centerPadding: '50px',
                    cssEase: 'ease',
                    customPaging: function(slider, i) {
                        return $('<button type="button" />').text(i + 1);
                    },
                    dots: false,
                    dotsClass: 'slick-dots',
                    draggable: true,
                    easing: 'linear',
                    edgeFriction: 0.35,
                    fade: false,
                    focusOnSelect: false,
                    infinite: true,
                    initialSlide: 0,
                    lazyLoad: 'ondemand',
                    mobileFirst: false,
                    pauseOnHover: true,
                    pauseOnFocus: true,
                    pauseOnDotsHover: false,
                    respondTo: 'window',
                    responsive: null,
                    rows: 1,
                    rtl: false,
                    slide: '',
                    slidesPerRow: 1,
                    slidesToShow: 1,
                    slidesToScroll: 1,
                    speed: 500,
                    swipe: true,
                    swipeToSlide: false,
                    touchMove: true,
                    touchThreshold: 5,
                    useCSS: true,
                    useTransform: true,
                    variableWidth: false,
                    vertical: false,
                    verticalSwiping: false,
                    waitForAnimate: true,
                    zIndex: 1000
                };
    
                _.initials = {
                    animating: false,
                    dragging: false,
                    autoPlayTimer: null,
                    currentDirection: 0,
                    currentLeft: null,
                    currentSlide: 0,
                    direction: 1,
                    $dots: null,
                    listWidth: null,
                    listHeight: null,
                    loadIndex: 0,
                    $nextArrow: null,
                    $prevArrow: null,
                    scrolling: false,
                    slideCount: null,
                    slideWidth: null,
                    $slideTrack: null,
                    $slides: null,
                    sliding: false,
                    slideOffset: 0,
                    swipeLeft: null,
                    swiping: false,
                    $list: null,
                    touchObject: {},
                    transformsEnabled: false,
                    unslicked: false
                };
    
                $.extend(_, _.initials);
    
                _.activeBreakpoint = null;
                _.animType = null;
                _.animProp = null;
                _.breakpoints = [];
                _.breakpointSettings = [];
                _.cssTransitions = false;
                _.focussed = false;
                _.interrupted = false;
                _.hidden = 'hidden';
                _.paused = true;
                _.positionProp = null;
                _.respondTo = null;
                _.rowCount = 1;
                _.shouldClick = true;
                _.$slider = $(element);
                _.$slidesCache = null;
                _.transformType = null;
                _.transitionType = null;
                _.visibilityChange = 'visibilitychange';
                _.windowWidth = 0;
                _.windowTimer = null;
    
                dataSettings = $(element).data('slick') || {};
    
                _.options = $.extend({}, _.defaults, settings, dataSettings);
    
                _.currentSlide = _.options.initialSlide;
    
                _.originalSettings = _.options;
    
                if (typeof document.mozHidden !== 'undefined') {
                    _.hidden = 'mozHidden';
                    _.visibilityChange = 'mozvisibilitychange';
                } else if (typeof document.webkitHidden !== 'undefined') {
                    _.hidden = 'webkitHidden';
                    _.visibilityChange = 'webkitvisibilitychange';
                }
    
                _.autoPlay = $.proxy(_.autoPlay, _);
                _.autoPlayClear = $.proxy(_.autoPlayClear, _);
                _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);
                _.changeSlide = $.proxy(_.changeSlide, _);
                _.clickHandler = $.proxy(_.clickHandler, _);
                _.selectHandler = $.proxy(_.selectHandler, _);
                _.setPosition = $.proxy(_.setPosition, _);
                _.swipeHandler = $.proxy(_.swipeHandler, _);
                _.dragHandler = $.proxy(_.dragHandler, _);
                _.keyHandler = $.proxy(_.keyHandler, _);
    
                _.instanceUid = instanceUid++;
    
                // A simple way to check for HTML strings
                // Strict HTML recognition (must start with <)
                // Extracted from jQuery v1.11 source
                _.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/;
    
    
                _.registerBreakpoints();
                _.init(true);
    
            }
    
            return Slick;
    
        }());
    
        Slick.prototype.activateADA = function() {
            var _ = this;
    
            _.$slideTrack.find('.slick-active').attr({
                'aria-hidden': 'false'
            }).find('a, input, button, select').attr({
                'tabindex': '0'
            });
    
        };
    
        Slick.prototype.addSlide = Slick.prototype.slickAdd = function(markup, index, addBefore) {
    
            var _ = this;
    
            if (typeof(index) === 'boolean') {
                addBefore = index;
                index = null;
            } else if (index < 0 || (index >= _.slideCount)) {
                return false;
            }
    
            _.unload();
    
            if (typeof(index) === 'number') {
                if (index === 0 && _.$slides.length === 0) {
                    $(markup).appendTo(_.$slideTrack);
                } else if (addBefore) {
                    $(markup).insertBefore(_.$slides.eq(index));
                } else {
                    $(markup).insertAfter(_.$slides.eq(index));
                }
            } else {
                if (addBefore === true) {
                    $(markup).prependTo(_.$slideTrack);
                } else {
                    $(markup).appendTo(_.$slideTrack);
                }
            }
    
            _.$slides = _.$slideTrack.children(this.options.slide);
    
            _.$slideTrack.children(this.options.slide).detach();
    
            _.$slideTrack.append(_.$slides);
    
            _.$slides.each(function(index, element) {
                $(element).attr('data-slick-index', index);
            });
    
            _.$slidesCache = _.$slides;
    
            _.reinit();
    
        };
    
        Slick.prototype.animateHeight = function() {
            var _ = this;
            if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
                var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
                _.$list.animate({
                    height: targetHeight
                }, _.options.speed);
            }
        };
    
        Slick.prototype.animateSlide = function(targetLeft, callback) {
    
            var animProps = {},
                _ = this;
    
            _.animateHeight();
    
            if (_.options.rtl === true && _.options.vertical === false) {
                targetLeft = -targetLeft;
            }
            if (_.transformsEnabled === false) {
                if (_.options.vertical === false) {
                    _.$slideTrack.animate({
                        left: targetLeft
                    }, _.options.speed, _.options.easing, callback);
                } else {
                    _.$slideTrack.animate({
                        top: targetLeft
                    }, _.options.speed, _.options.easing, callback);
                }
    
            } else {
    
                if (_.cssTransitions === false) {
                    if (_.options.rtl === true) {
                        _.currentLeft = -(_.currentLeft);
                    }
                    $({
                        animStart: _.currentLeft
                    }).animate({
                        animStart: targetLeft
                    }, {
                        duration: _.options.speed,
                        easing: _.options.easing,
                        step: function(now) {
                            now = Math.ceil(now);
                            if (_.options.vertical === false) {
                                animProps[_.animType] = 'translate(' +
                                    now + 'px, 0px)';
                                _.$slideTrack.css(animProps);
                            } else {
                                animProps[_.animType] = 'translate(0px,' +
                                    now + 'px)';
                                _.$slideTrack.css(animProps);
                            }
                        },
                        complete: function() {
                            if (callback) {
                                callback.call();
                            }
                        }
                    });
    
                } else {
    
                    _.applyTransition();
                    targetLeft = Math.ceil(targetLeft);
    
                    if (_.options.vertical === false) {
                        animProps[_.animType] = 'translate3d(' + targetLeft + 'px, 0px, 0px)';
                    } else {
                        animProps[_.animType] = 'translate3d(0px,' + targetLeft + 'px, 0px)';
                    }
                    _.$slideTrack.css(animProps);
    
                    if (callback) {
                        setTimeout(function() {
    
                            _.disableTransition();
    
                            callback.call();
                        }, _.options.speed);
                    }
    
                }
    
            }
    
        };
    
        Slick.prototype.getNavTarget = function() {
    
            var _ = this,
                asNavFor = _.options.asNavFor;
    
            if ( asNavFor && asNavFor !== null ) {
                asNavFor = $(asNavFor).not(_.$slider);
            }
    
            return asNavFor;
    
        };
    
        Slick.prototype.asNavFor = function(index) {
    
            var _ = this,
                asNavFor = _.getNavTarget();
    
            if ( asNavFor !== null && typeof asNavFor === 'object' ) {
                asNavFor.each(function() {
                    var target = $(this).slick('getSlick');
                    if(!target.unslicked) {
                        target.slideHandler(index, true);
                    }
                });
            }
    
        };
    
        Slick.prototype.applyTransition = function(slide) {
    
            var _ = this,
                transition = {};
    
            if (_.options.fade === false) {
                transition[_.transitionType] = _.transformType + ' ' + _.options.speed + 'ms ' + _.options.cssEase;
            } else {
                transition[_.transitionType] = 'opacity ' + _.options.speed + 'ms ' + _.options.cssEase;
            }
    
            if (_.options.fade === false) {
                _.$slideTrack.css(transition);
            } else {
                _.$slides.eq(slide).css(transition);
            }
    
        };
    
        Slick.prototype.autoPlay = function() {
    
            var _ = this;
    
            _.autoPlayClear();
    
            if ( _.slideCount > _.options.slidesToShow ) {
                _.autoPlayTimer = setInterval( _.autoPlayIterator, _.options.autoplaySpeed );
            }
    
        };
    
        Slick.prototype.autoPlayClear = function() {
    
            var _ = this;
    
            if (_.autoPlayTimer) {
                clearInterval(_.autoPlayTimer);
            }
    
        };
    
        Slick.prototype.autoPlayIterator = function() {
    
            var _ = this,
                slideTo = _.currentSlide + _.options.slidesToScroll;
    
            if ( !_.paused && !_.interrupted && !_.focussed ) {
    
                if ( _.options.infinite === false ) {
    
                    if ( _.direction === 1 && ( _.currentSlide + 1 ) === ( _.slideCount - 1 )) {
                        _.direction = 0;
                    }
    
                    else if ( _.direction === 0 ) {
    
                        slideTo = _.currentSlide - _.options.slidesToScroll;
    
                        if ( _.currentSlide - 1 === 0 ) {
                            _.direction = 1;
                        }
    
                    }
    
                }
    
                _.slideHandler( slideTo );
    
            }
    
        };
    
        Slick.prototype.buildArrows = function() {
    
            var _ = this;
    
            if (_.options.arrows === true ) {
    
                _.$prevArrow = $(_.options.prevArrow).addClass('slick-arrow');
                _.$nextArrow = $(_.options.nextArrow).addClass('slick-arrow');
    
                if( _.slideCount > _.options.slidesToShow ) {
    
                    _.$prevArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');
                    _.$nextArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');
    
                    if (_.htmlExpr.test(_.options.prevArrow)) {
                        _.$prevArrow.prependTo(_.options.appendArrows);
                    }
    
                    if (_.htmlExpr.test(_.options.nextArrow)) {
                        _.$nextArrow.appendTo(_.options.appendArrows);
                    }
    
                    if (_.options.infinite !== true) {
                        _.$prevArrow
                            .addClass('slick-disabled')
                            .attr('aria-disabled', 'true');
                    }
    
                } else {
    
                    _.$prevArrow.add( _.$nextArrow )
    
                        .addClass('slick-hidden')
                        .attr({
                            'aria-disabled': 'true',
                            'tabindex': '-1'
                        });
    
                }
    
            }
    
        };
    
        Slick.prototype.buildDots = function() {
    
            var _ = this,
                i, dot;
    
            if (_.options.dots === true) {
    
                _.$slider.addClass('slick-dotted');
    
                dot = $('<ul />').addClass(_.options.dotsClass);
    
                for (i = 0; i <= _.getDotCount(); i += 1) {
                    dot.append($('<li />').append(_.options.customPaging.call(this, _, i)));
                }
    
                _.$dots = dot.appendTo(_.options.appendDots);
    
                _.$dots.find('li').first().addClass('slick-active');
    
            }
    
        };
    
        Slick.prototype.buildOut = function() {
    
            var _ = this;
    
            _.$slides =
                _.$slider
                    .children( _.options.slide + ':not(.slick-cloned)')
                    .addClass('slick-slide');
    
            _.slideCount = _.$slides.length;
    
            _.$slides.each(function(index, element) {
                $(element)
                    .attr('data-slick-index', index)
                    .data('originalStyling', $(element).attr('style') || '');
            });
    
            _.$slider.addClass('slick-slider');
    
            _.$slideTrack = (_.slideCount === 0) ?
                $('<div class="slick-track"/>').appendTo(_.$slider) :
                _.$slides.wrapAll('<div class="slick-track"/>').parent();
    
            _.$list = _.$slideTrack.wrap(
                '<div class="slick-list"/>').parent();
            _.$slideTrack.css('opacity', 0);
    
            if (_.options.centerMode === true || _.options.swipeToSlide === true) {
                _.options.slidesToScroll = 1;
            }
    
            $('img[data-lazy]', _.$slider).not('[src]').addClass('slick-loading');
    
            _.setupInfinite();
    
            _.buildArrows();
    
            _.buildDots();
    
            _.updateDots();
    
    
            _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);
    
            if (_.options.draggable === true) {
                _.$list.addClass('draggable');
            }
    
        };
    
        Slick.prototype.buildRows = function() {
    
            var _ = this, a, b, c, newSlides, numOfSlides, originalSlides,slidesPerSection;
    
            newSlides = document.createDocumentFragment();
            originalSlides = _.$slider.children();
    
            if(_.options.rows > 1) {
    
                slidesPerSection = _.options.slidesPerRow * _.options.rows;
                numOfSlides = Math.ceil(
                    originalSlides.length / slidesPerSection
                );
    
                for(a = 0; a < numOfSlides; a++){
                    var slide = document.createElement('div');
                    for(b = 0; b < _.options.rows; b++) {
                        var row = document.createElement('div');
                        for(c = 0; c < _.options.slidesPerRow; c++) {
                            var target = (a * slidesPerSection + ((b * _.options.slidesPerRow) + c));
                            if (originalSlides.get(target)) {
                                row.appendChild(originalSlides.get(target));
                            }
                        }
                        slide.appendChild(row);
                    }
                    newSlides.appendChild(slide);
                }
    
                _.$slider.empty().append(newSlides);
                _.$slider.children().children().children()
                    .css({
                        'width':(100 / _.options.slidesPerRow) + '%',
                        'display': 'inline-block'
                    });
    
            }
    
        };
    
        Slick.prototype.checkResponsive = function(initial, forceUpdate) {
    
            var _ = this,
                breakpoint, targetBreakpoint, respondToWidth, triggerBreakpoint = false;
            var sliderWidth = _.$slider.width();
            var windowWidth = window.innerWidth || $(window).width();
    
            if (_.respondTo === 'window') {
                respondToWidth = windowWidth;
            } else if (_.respondTo === 'slider') {
                respondToWidth = sliderWidth;
            } else if (_.respondTo === 'min') {
                respondToWidth = Math.min(windowWidth, sliderWidth);
            }
    
            if ( _.options.responsive &&
                _.options.responsive.length &&
                _.options.responsive !== null) {
    
                targetBreakpoint = null;
    
                for (breakpoint in _.breakpoints) {
                    if (_.breakpoints.hasOwnProperty(breakpoint)) {
                        if (_.originalSettings.mobileFirst === false) {
                            if (respondToWidth < _.breakpoints[breakpoint]) {
                                targetBreakpoint = _.breakpoints[breakpoint];
                            }
                        } else {
                            if (respondToWidth > _.breakpoints[breakpoint]) {
                                targetBreakpoint = _.breakpoints[breakpoint];
                            }
                        }
                    }
                }
    
                if (targetBreakpoint !== null) {
                    if (_.activeBreakpoint !== null) {
                        if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {
                            _.activeBreakpoint =
                                targetBreakpoint;
                            if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                                _.unslick(targetBreakpoint);
                            } else {
                                _.options = $.extend({}, _.originalSettings,
                                    _.breakpointSettings[
                                        targetBreakpoint]);
                                if (initial === true) {
                                    _.currentSlide = _.options.initialSlide;
                                }
                                _.refresh(initial);
                            }
                            triggerBreakpoint = targetBreakpoint;
                        }
                    } else {
                        _.activeBreakpoint = targetBreakpoint;
                        if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                            _.unslick(targetBreakpoint);
                        } else {
                            _.options = $.extend({}, _.originalSettings,
                                _.breakpointSettings[
                                    targetBreakpoint]);
                            if (initial === true) {
                                _.currentSlide = _.options.initialSlide;
                            }
                            _.refresh(initial);
                        }
                        triggerBreakpoint = targetBreakpoint;
                    }
                } else {
                    if (_.activeBreakpoint !== null) {
                        _.activeBreakpoint = null;
                        _.options = _.originalSettings;
                        if (initial === true) {
                            _.currentSlide = _.options.initialSlide;
                        }
                        _.refresh(initial);
                        triggerBreakpoint = targetBreakpoint;
                    }
                }
    
                // only trigger breakpoints during an actual break. not on initialize.
                if( !initial && triggerBreakpoint !== false ) {
                    _.$slider.trigger('breakpoint', [_, triggerBreakpoint]);
                }
            }
    
        };
    
        Slick.prototype.changeSlide = function(event, dontAnimate) {
    
            var _ = this,
                $target = $(event.currentTarget),
                indexOffset, slideOffset, unevenOffset;
    
            // If target is a link, prevent default action.
            if($target.is('a')) {
                event.preventDefault();
            }
    
            // If target is not the <li> element (ie: a child), find the <li>.
            if(!$target.is('li')) {
                $target = $target.closest('li');
            }
    
            unevenOffset = (_.slideCount % _.options.slidesToScroll !== 0);
            indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;
    
            switch (event.data.message) {
    
                case 'previous':
                    slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;
                    if (_.slideCount > _.options.slidesToShow) {
                        _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);
                    }
                    break;
    
                case 'next':
                    slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;
                    if (_.slideCount > _.options.slidesToShow) {
                        _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);
                    }
                    break;
    
                case 'index':
                    var index = event.data.index === 0 ? 0 :
                        event.data.index || $target.index() * _.options.slidesToScroll;
    
                    _.slideHandler(_.checkNavigable(index), false, dontAnimate);
                    $target.children().trigger('focus');
                    break;
    
                default:
                    return;
            }
    
        };
    
        Slick.prototype.checkNavigable = function(index) {
    
            var _ = this,
                navigables, prevNavigable;
    
            navigables = _.getNavigableIndexes();
            prevNavigable = 0;
            if (index > navigables[navigables.length - 1]) {
                index = navigables[navigables.length - 1];
            } else {
                for (var n in navigables) {
                    if (index < navigables[n]) {
                        index = prevNavigable;
                        break;
                    }
                    prevNavigable = navigables[n];
                }
            }
    
            return index;
        };
    
        Slick.prototype.cleanUpEvents = function() {
    
            var _ = this;
    
            if (_.options.dots && _.$dots !== null) {
    
                $('li', _.$dots)
                    .off('click.slick', _.changeSlide)
                    .off('mouseenter.slick', $.proxy(_.interrupt, _, true))
                    .off('mouseleave.slick', $.proxy(_.interrupt, _, false));
    
                if (_.options.accessibility === true) {
                    _.$dots.off('keydown.slick', _.keyHandler);
                }
            }
    
            _.$slider.off('focus.slick blur.slick');
    
            if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
                _.$prevArrow && _.$prevArrow.off('click.slick', _.changeSlide);
                _.$nextArrow && _.$nextArrow.off('click.slick', _.changeSlide);
    
                if (_.options.accessibility === true) {
                    _.$prevArrow.off('keydown.slick', _.keyHandler);
                    _.$nextArrow.off('keydown.slick', _.keyHandler);
                }
            }
    
            _.$list.off('touchstart.slick mousedown.slick', _.swipeHandler);
            _.$list.off('touchmove.slick mousemove.slick', _.swipeHandler);
            _.$list.off('touchend.slick mouseup.slick', _.swipeHandler);
            _.$list.off('touchcancel.slick mouseleave.slick', _.swipeHandler);
    
            _.$list.off('click.slick', _.clickHandler);
    
            $(document).off(_.visibilityChange, _.visibility);
    
            _.cleanUpSlideEvents();
    
            if (_.options.accessibility === true) {
                _.$list.off('keydown.slick', _.keyHandler);
            }
    
            if (_.options.focusOnSelect === true) {
                $(_.$slideTrack).children().off('click.slick', _.selectHandler);
            }
    
            $(window).off('orientationchange.slick.slick-' + _.instanceUid, _.orientationChange);
    
            $(window).off('resize.slick.slick-' + _.instanceUid, _.resize);
    
            $('[draggable!=true]', _.$slideTrack).off('dragstart', _.preventDefault);
    
            $(window).off('load.slick.slick-' + _.instanceUid, _.setPosition);
    
        };
    
        Slick.prototype.cleanUpSlideEvents = function() {
    
            var _ = this;
    
            _.$list.off('mouseenter.slick', $.proxy(_.interrupt, _, true));
            _.$list.off('mouseleave.slick', $.proxy(_.interrupt, _, false));
    
        };
    
        Slick.prototype.cleanUpRows = function() {
    
            var _ = this, originalSlides;
    
            if(_.options.rows > 1) {
                originalSlides = _.$slides.children().children();
                originalSlides.removeAttr('style');
                _.$slider.empty().append(originalSlides);
            }
    
        };
    
        Slick.prototype.clickHandler = function(event) {
    
            var _ = this;
    
            if (_.shouldClick === false) {
                event.stopImmediatePropagation();
                event.stopPropagation();
                event.preventDefault();
            }
    
        };
    
        Slick.prototype.destroy = function(refresh) {
    
            var _ = this;
    
            _.autoPlayClear();
    
            _.touchObject = {};
    
            _.cleanUpEvents();
    
            $('.slick-cloned', _.$slider).detach();
    
            if (_.$dots) {
                _.$dots.remove();
            }
    
            if ( _.$prevArrow && _.$prevArrow.length ) {
    
                _.$prevArrow
                    .removeClass('slick-disabled slick-arrow slick-hidden')
                    .removeAttr('aria-hidden aria-disabled tabindex')
                    .css('display','');
    
                if ( _.htmlExpr.test( _.options.prevArrow )) {
                    _.$prevArrow.remove();
                }
            }
    
            if ( _.$nextArrow && _.$nextArrow.length ) {
    
                _.$nextArrow
                    .removeClass('slick-disabled slick-arrow slick-hidden')
                    .removeAttr('aria-hidden aria-disabled tabindex')
                    .css('display','');
    
                if ( _.htmlExpr.test( _.options.nextArrow )) {
                    _.$nextArrow.remove();
                }
            }
    
    
            if (_.$slides) {
    
                _.$slides
                    .removeClass('slick-slide slick-active slick-center slick-visible slick-current')
                    .removeAttr('aria-hidden')
                    .removeAttr('data-slick-index')
                    .each(function(){
                        $(this).attr('style', $(this).data('originalStyling'));
                    });
    
                _.$slideTrack.children(this.options.slide).detach();
    
                _.$slideTrack.detach();
    
                _.$list.detach();
    
                _.$slider.append(_.$slides);
            }
    
            _.cleanUpRows();
    
            _.$slider.removeClass('slick-slider');
            _.$slider.removeClass('slick-initialized');
            _.$slider.removeClass('slick-dotted');
    
            _.unslicked = true;
    
            if(!refresh) {
                _.$slider.trigger('destroy', [_]);
            }
    
        };
    
        Slick.prototype.disableTransition = function(slide) {
    
            var _ = this,
                transition = {};
    
            transition[_.transitionType] = '';
    
            if (_.options.fade === false) {
                _.$slideTrack.css(transition);
            } else {
                _.$slides.eq(slide).css(transition);
            }
    
        };
    
        Slick.prototype.fadeSlide = function(slideIndex, callback) {
    
            var _ = this;
    
            if (_.cssTransitions === false) {
    
                _.$slides.eq(slideIndex).css({
                    zIndex: _.options.zIndex
                });
    
                _.$slides.eq(slideIndex).animate({
                    opacity: 1
                }, _.options.speed, _.options.easing, callback);
    
            } else {
    
                _.applyTransition(slideIndex);
    
                _.$slides.eq(slideIndex).css({
                    opacity: 1,
                    zIndex: _.options.zIndex
                });
    
                if (callback) {
                    setTimeout(function() {
    
                        _.disableTransition(slideIndex);
    
                        callback.call();
                    }, _.options.speed);
                }
    
            }
    
        };
    
        Slick.prototype.fadeSlideOut = function(slideIndex) {
    
            var _ = this;
    
            if (_.cssTransitions === false) {
    
                _.$slides.eq(slideIndex).animate({
                    opacity: 0,
                    zIndex: _.options.zIndex - 2
                }, _.options.speed, _.options.easing);
    
            } else {
    
                _.applyTransition(slideIndex);
    
                _.$slides.eq(slideIndex).css({
                    opacity: 0,
                    zIndex: _.options.zIndex - 2
                });
    
            }
    
        };
    
        Slick.prototype.filterSlides = Slick.prototype.slickFilter = function(filter) {
    
            var _ = this;
    
            if (filter !== null) {
    
                _.$slidesCache = _.$slides;
    
                _.unload();
    
                _.$slideTrack.children(this.options.slide).detach();
    
                _.$slidesCache.filter(filter).appendTo(_.$slideTrack);
    
                _.reinit();
    
            }
    
        };
    
        Slick.prototype.focusHandler = function() {
    
            var _ = this;
    
            _.$slider
                .off('focus.slick blur.slick')
                .on('focus.slick blur.slick', '*', function(event) {
    
                event.stopImmediatePropagation();
                var $sf = $(this);
    
                setTimeout(function() {
    
                    if( _.options.pauseOnFocus ) {
                        _.focussed = $sf.is(':focus');
                        _.autoPlay();
                    }
    
                }, 0);
    
            });
        };
    
        Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function() {
    
            var _ = this;
            return _.currentSlide;
    
        };
    
        Slick.prototype.getDotCount = function() {
    
            var _ = this;
    
            var breakPoint = 0;
            var counter = 0;
            var pagerQty = 0;
    
            if (_.options.infinite === true) {
                if (_.slideCount <= _.options.slidesToShow) {
                     ++pagerQty;
                } else {
                    while (breakPoint < _.slideCount) {
                        ++pagerQty;
                        breakPoint = counter + _.options.slidesToScroll;
                        counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
                    }
                }
            } else if (_.options.centerMode === true) {
                pagerQty = _.slideCount;
            } else if(!_.options.asNavFor) {
                pagerQty = 1 + Math.ceil((_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll);
            }else {
                while (breakPoint < _.slideCount) {
                    ++pagerQty;
                    breakPoint = counter + _.options.slidesToScroll;
                    counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
                }
            }
    
            return pagerQty - 1;
    
        };
    
        Slick.prototype.getLeft = function(slideIndex) {
    
            var _ = this,
                targetLeft,
                verticalHeight,
                verticalOffset = 0,
                targetSlide;
    
            _.slideOffset = 0;
            verticalHeight = _.$slides.first().outerHeight(true);
    
            if (_.options.infinite === true) {
                if (_.slideCount > _.options.slidesToShow) {
                    _.slideOffset = (_.slideWidth * _.options.slidesToShow) * -1;
                    verticalOffset = (verticalHeight * _.options.slidesToShow) * -1;
                }
                if (_.slideCount % _.options.slidesToScroll !== 0) {
                    if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {
                        if (slideIndex > _.slideCount) {
                            _.slideOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth) * -1;
                            verticalOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight) * -1;
                        } else {
                            _.slideOffset = ((_.slideCount % _.options.slidesToScroll) * _.slideWidth) * -1;
                            verticalOffset = ((_.slideCount % _.options.slidesToScroll) * verticalHeight) * -1;
                        }
                    }
                }
            } else {
                if (slideIndex + _.options.slidesToShow > _.slideCount) {
                    _.slideOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * _.slideWidth;
                    verticalOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * verticalHeight;
                }
            }
    
            if (_.slideCount <= _.options.slidesToShow) {
                _.slideOffset = 0;
                verticalOffset = 0;
            }
    
            if (_.options.centerMode === true && _.slideCount <= _.options.slidesToShow) {
                _.slideOffset = ((_.slideWidth * Math.floor(_.options.slidesToShow)) / 2) - ((_.slideWidth * _.slideCount) / 2);
            } else if (_.options.centerMode === true && _.options.infinite === true) {
                _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;
            } else if (_.options.centerMode === true) {
                _.slideOffset = 0;
                _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);
            }
    
            if (_.options.vertical === false) {
                targetLeft = ((slideIndex * _.slideWidth) * -1) + _.slideOffset;
            } else {
                targetLeft = ((slideIndex * verticalHeight) * -1) + verticalOffset;
            }
    
            if (_.options.variableWidth === true) {
    
                if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
                } else {
                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow);
                }
    
                if (_.options.rtl === true) {
                    if (targetSlide[0]) {
                        targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
                    } else {
                        targetLeft =  0;
                    }
                } else {
                    targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
                }
    
                if (_.options.centerMode === true) {
                    if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                        targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
                    } else {
                        targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow + 1);
                    }
    
                    if (_.options.rtl === true) {
                        if (targetSlide[0]) {
                            targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
                        } else {
                            targetLeft =  0;
                        }
                    } else {
                        targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
                    }
    
                    targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;
                }
            }
    
            return targetLeft;
    
        };
    
        Slick.prototype.getOption = Slick.prototype.slickGetOption = function(option) {
    
            var _ = this;
    
            return _.options[option];
    
        };
    
        Slick.prototype.getNavigableIndexes = function() {
    
            var _ = this,
                breakPoint = 0,
                counter = 0,
                indexes = [],
                max;
    
            if (_.options.infinite === false) {
                max = _.slideCount;
            } else {
                breakPoint = _.options.slidesToScroll * -1;
                counter = _.options.slidesToScroll * -1;
                max = _.slideCount * 2;
            }
    
            while (breakPoint < max) {
                indexes.push(breakPoint);
                breakPoint = counter + _.options.slidesToScroll;
                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
            }
    
            return indexes;
    
        };
    
        Slick.prototype.getSlick = function() {
    
            return this;
    
        };
    
        Slick.prototype.getSlideCount = function() {
    
            var _ = this,
                slidesTraversed, swipedSlide, centerOffset;
    
            centerOffset = _.options.centerMode === true ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0;
    
            if (_.options.swipeToSlide === true) {
                _.$slideTrack.find('.slick-slide').each(function(index, slide) {
                    if (slide.offsetLeft - centerOffset + ($(slide).outerWidth() / 2) > (_.swipeLeft * -1)) {
                        swipedSlide = slide;
                        return false;
                    }
                });
    
                slidesTraversed = Math.abs($(swipedSlide).attr('data-slick-index') - _.currentSlide) || 1;
    
                return slidesTraversed;
    
            } else {
                return _.options.slidesToScroll;
            }
    
        };
    
        Slick.prototype.goTo = Slick.prototype.slickGoTo = function(slide, dontAnimate) {
    
            var _ = this;
    
            _.changeSlide({
                data: {
                    message: 'index',
                    index: parseInt(slide)
                }
            }, dontAnimate);
    
        };
    
        Slick.prototype.init = function(creation) {
    
            var _ = this;
    
            if (!$(_.$slider).hasClass('slick-initialized')) {
    
                $(_.$slider).addClass('slick-initialized');
    
                _.buildRows();
                _.buildOut();
                _.setProps();
                _.startLoad();
                _.loadSlider();
                _.initializeEvents();
                _.updateArrows();
                _.updateDots();
                _.checkResponsive(true);
                _.focusHandler();
    
            }
    
            if (creation) {
                _.$slider.trigger('init', [_]);
            }
    
            if (_.options.accessibility === true) {
                _.initADA();
            }
    
            if ( _.options.autoplay ) {
    
                _.paused = false;
                _.autoPlay();
    
            }
    
        };
    
        Slick.prototype.initADA = function() {
            var _ = this,
                    numDotGroups = Math.ceil(_.slideCount / _.options.slidesToShow),
                    tabControlIndexes = _.getNavigableIndexes().filter(function(val) {
                        return (val >= 0) && (val < _.slideCount);
                    });
    
            _.$slides.add(_.$slideTrack.find('.slick-cloned')).attr({
                'aria-hidden': 'true',
                'tabindex': '-1'
            }).find('a, input, button, select').attr({
                'tabindex': '-1'
            });
    
            if (_.$dots !== null) {
                _.$slides.not(_.$slideTrack.find('.slick-cloned')).each(function(i) {
                    var slideControlIndex = tabControlIndexes.indexOf(i);
    
                    $(this).attr({
                        'role': 'tabpanel',
                        'id': 'slick-slide' + _.instanceUid + i,
                        'tabindex': -1
                    });            
    
                    if (slideControlIndex !== -1) {
                        $(this).attr({
                            'aria-describedby': 'slick-slide-control' + _.instanceUid + slideControlIndex
                        });
                    }
                });
    
                _.$dots.attr('role', 'tablist').find('li').each(function(i) {
                    var mappedSlideIndex = tabControlIndexes[i];
            
                    $(this).attr({
                        'role': 'presentation'
                    });
    
                    $(this).find('button').first().attr({
                        'role': 'tab',
                        'id': 'slick-slide-control' + _.instanceUid + i,
                        'aria-controls': 'slick-slide' + _.instanceUid + mappedSlideIndex,
                        'aria-label': (i + 1) + ' of ' + numDotGroups,
                        'aria-selected': null,
                        'tabindex': '-1'
                    });
    
                }).eq(_.currentSlide).find('button').attr({
                    'aria-selected': 'true',
                    'tabindex': '0'
                }).end();
            }
    
            for (var i=_.currentSlide, max=i+_.options.slidesToShow; i < max; i++) {
                _.$slides.eq(i).attr('tabindex', 0);
            }
    
            _.activateADA();
    
        };
    
        Slick.prototype.initArrowEvents = function() {
    
            var _ = this;
    
            if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
                _.$prevArrow
                   .off('click.slick')
                   .on('click.slick', {
                        message: 'previous'
                   }, _.changeSlide);
                _.$nextArrow
                   .off('click.slick')
                   .on('click.slick', {
                        message: 'next'
                   }, _.changeSlide);
    
                if (_.options.accessibility === true) {
                    _.$prevArrow.on('keydown.slick', _.keyHandler);
                    _.$nextArrow.on('keydown.slick', _.keyHandler);
                }   
            }
    
        };
    
        Slick.prototype.initDotEvents = function() {
    
            var _ = this;
    
            if (_.options.dots === true) {
                $('li', _.$dots).on('click.slick', {
                    message: 'index'
                }, _.changeSlide);
    
                if (_.options.accessibility === true) {
                    _.$dots.on('keydown.slick', _.keyHandler);
                }
            }
    
            if ( _.options.dots === true && _.options.pauseOnDotsHover === true ) {
    
                $('li', _.$dots)
                    .on('mouseenter.slick', $.proxy(_.interrupt, _, true))
                    .on('mouseleave.slick', $.proxy(_.interrupt, _, false));
    
            }
    
        };
    
        Slick.prototype.initSlideEvents = function() {
    
            var _ = this;
    
            if ( _.options.pauseOnHover ) {
    
                _.$list.on('mouseenter.slick', $.proxy(_.interrupt, _, true));
                _.$list.on('mouseleave.slick', $.proxy(_.interrupt, _, false));
    
            }
    
        };
    
        Slick.prototype.initializeEvents = function() {
    
            var _ = this;
    
            _.initArrowEvents();
    
            _.initDotEvents();
            _.initSlideEvents();
    
            _.$list.on('touchstart.slick mousedown.slick', {
                action: 'start'
            }, _.swipeHandler);
            _.$list.on('touchmove.slick mousemove.slick', {
                action: 'move'
            }, _.swipeHandler);
            _.$list.on('touchend.slick mouseup.slick', {
                action: 'end'
            }, _.swipeHandler);
            _.$list.on('touchcancel.slick mouseleave.slick', {
                action: 'end'
            }, _.swipeHandler);
    
            _.$list.on('click.slick', _.clickHandler);
    
            $(document).on(_.visibilityChange, $.proxy(_.visibility, _));
    
            if (_.options.accessibility === true) {
                _.$list.on('keydown.slick', _.keyHandler);
            }
    
            if (_.options.focusOnSelect === true) {
                $(_.$slideTrack).children().on('click.slick', _.selectHandler);
            }
    
            $(window).on('orientationchange.slick.slick-' + _.instanceUid, $.proxy(_.orientationChange, _));
    
            $(window).on('resize.slick.slick-' + _.instanceUid, $.proxy(_.resize, _));
    
            $('[draggable!=true]', _.$slideTrack).on('dragstart', _.preventDefault);
    
            $(window).on('load.slick.slick-' + _.instanceUid, _.setPosition);
            $(_.setPosition);
    
        };
    
        Slick.prototype.initUI = function() {
    
            var _ = this;
    
            if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
    
                _.$prevArrow.show();
                _.$nextArrow.show();
    
            }
    
            if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
    
                _.$dots.show();
    
            }
    
        };
    
        Slick.prototype.keyHandler = function(event) {
    
            var _ = this;
             //Dont slide if the cursor is inside the form fields and arrow keys are pressed
            if(!event.target.tagName.match('TEXTAREA|INPUT|SELECT')) {
                if (event.keyCode === 37 && _.options.accessibility === true) {
                    _.changeSlide({
                        data: {
                            message: _.options.rtl === true ? 'next' :  'previous'
                        }
                    });
                } else if (event.keyCode === 39 && _.options.accessibility === true) {
                    _.changeSlide({
                        data: {
                            message: _.options.rtl === true ? 'previous' : 'next'
                        }
                    });
                }
            }
    
        };
    
        Slick.prototype.lazyLoad = function() {
    
            var _ = this,
                loadRange, cloneRange, rangeStart, rangeEnd;
    
            function loadImages(imagesScope) {
    
                $('img[data-lazy]', imagesScope).each(function() {
    
                    var image = $(this),
                        imageSource = $(this).attr('data-lazy'),
                        imageSrcSet = $(this).attr('data-srcset'),
                        imageSizes  = $(this).attr('data-sizes') || _.$slider.attr('data-sizes'),
                        imageToLoad = document.createElement('img');
    
                    imageToLoad.onload = function() {
    
                        image
                            .animate({ opacity: 0 }, 100, function() {
    
                                if (imageSrcSet) {
                                    image
                                        .attr('srcset', imageSrcSet );
    
                                    if (imageSizes) {
                                        image
                                            .attr('sizes', imageSizes );
                                    }
                                }
    
                                image
                                    .attr('src', imageSource)
                                    .animate({ opacity: 1 }, 200, function() {
                                        image
                                            .removeAttr('data-lazy data-srcset data-sizes')
                                            .removeClass('slick-loading');
                                    });
                                _.$slider.trigger('lazyLoaded', [_, image, imageSource]);
                            });
    
                    };
    
                    imageToLoad.onerror = function() {
    
                        image
                            .removeAttr( 'data-lazy' )
                            .removeClass( 'slick-loading' )
                            .addClass( 'slick-lazyload-error' );
    
                        _.$slider.trigger('lazyLoadError', [ _, image, imageSource ]);
    
                    };
    
                    imageToLoad.src = imageSource;
    
                });
    
            }
    
            if (_.options.centerMode === true) {
                if (_.options.infinite === true) {
                    rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);
                    rangeEnd = rangeStart + _.options.slidesToShow + 2;
                } else {
                    rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));
                    rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;
                }
            } else {
                rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;
                rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow);
                if (_.options.fade === true) {
                    if (rangeStart > 0) rangeStart--;
                    if (rangeEnd <= _.slideCount) rangeEnd++;
                }
            }
    
            loadRange = _.$slider.find('.slick-slide').slice(rangeStart, rangeEnd);
    
            if (_.options.lazyLoad === 'anticipated') {
                var prevSlide = rangeStart - 1,
                    nextSlide = rangeEnd,
                    $slides = _.$slider.find('.slick-slide');
    
                for (var i = 0; i < _.options.slidesToScroll; i++) {
                    if (prevSlide < 0) prevSlide = _.slideCount - 1;
                    loadRange = loadRange.add($slides.eq(prevSlide));
                    loadRange = loadRange.add($slides.eq(nextSlide));
                    prevSlide--;
                    nextSlide++;
                }
            }
    
            loadImages(loadRange);
    
            if (_.slideCount <= _.options.slidesToShow) {
                cloneRange = _.$slider.find('.slick-slide');
                loadImages(cloneRange);
            } else
            if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {
                cloneRange = _.$slider.find('.slick-cloned').slice(0, _.options.slidesToShow);
                loadImages(cloneRange);
            } else if (_.currentSlide === 0) {
                cloneRange = _.$slider.find('.slick-cloned').slice(_.options.slidesToShow * -1);
                loadImages(cloneRange);
            }
    
        };
    
        Slick.prototype.loadSlider = function() {
    
            var _ = this;
    
            _.setPosition();
    
            _.$slideTrack.css({
                opacity: 1
            });
    
            _.$slider.removeClass('slick-loading');
    
            _.initUI();
    
            if (_.options.lazyLoad === 'progressive') {
                _.progressiveLazyLoad();
            }
    
        };
    
        Slick.prototype.next = Slick.prototype.slickNext = function() {
    
            var _ = this;
    
            _.changeSlide({
                data: {
                    message: 'next'
                }
            });
    
        };
    
        Slick.prototype.orientationChange = function() {
    
            var _ = this;
    
            _.checkResponsive();
            _.setPosition();
    
        };
    
        Slick.prototype.pause = Slick.prototype.slickPause = function() {
    
            var _ = this;
    
            _.autoPlayClear();
            _.paused = true;
    
        };
    
        Slick.prototype.play = Slick.prototype.slickPlay = function() {
    
            var _ = this;
    
            _.autoPlay();
            _.options.autoplay = true;
            _.paused = false;
            _.focussed = false;
            _.interrupted = false;
    
        };
    
        Slick.prototype.postSlide = function(index) {
    
            var _ = this;
    
            if( !_.unslicked ) {
    
                _.$slider.trigger('afterChange', [_, index]);
    
                _.animating = false;
    
                if (_.slideCount > _.options.slidesToShow) {
                    _.setPosition();
                }
    
                _.swipeLeft = null;
    
                if ( _.options.autoplay ) {
                    _.autoPlay();
                }
    
                if (_.options.accessibility === true) {
                    _.initADA();
                    // for non-autoplay: once active slide (group) has updated, set focus on first newly showing slide 
                    if (!_.options.autoplay) {
                        var $currentSlide = $(_.$slides.get(_.currentSlide));
                        $currentSlide.attr('tabindex', 0).focus();
                    }
                }
    
            }
    
        };
    
        Slick.prototype.prev = Slick.prototype.slickPrev = function() {
    
            var _ = this;
    
            _.changeSlide({
                data: {
                    message: 'previous'
                }
            });
    
        };
    
        Slick.prototype.preventDefault = function(event) {
    
            event.preventDefault();
    
        };
    
        Slick.prototype.progressiveLazyLoad = function( tryCount ) {
    
            tryCount = tryCount || 1;
    
            var _ = this,
                $imgsToLoad = $( 'img[data-lazy]', _.$slider ),
                image,
                imageSource,
                imageSrcSet,
                imageSizes,
                imageToLoad;
    
            if ( $imgsToLoad.length ) {
    
                image = $imgsToLoad.first();
                imageSource = image.attr('data-lazy');
                imageSrcSet = image.attr('data-srcset');
                imageSizes  = image.attr('data-sizes') || _.$slider.attr('data-sizes');
                imageToLoad = document.createElement('img');
    
                imageToLoad.onload = function() {
    
                    if (imageSrcSet) {
                        image
                            .attr('srcset', imageSrcSet );
    
                        if (imageSizes) {
                            image
                                .attr('sizes', imageSizes );
                        }
                    }
    
                    image
                        .attr( 'src', imageSource )
                        .removeAttr('data-lazy data-srcset data-sizes')
                        .removeClass('slick-loading');
    
                    if ( _.options.adaptiveHeight === true ) {
                        _.setPosition();
                    }
    
                    _.$slider.trigger('lazyLoaded', [ _, image, imageSource ]);
                    _.progressiveLazyLoad();
    
                };
    
                imageToLoad.onerror = function() {
    
                    if ( tryCount < 3 ) {
    
                        /**
                         * try to load the image 3 times,
                         * leave a slight delay so we don't get
                         * servers blocking the request.
                         */
                        setTimeout( function() {
                            _.progressiveLazyLoad( tryCount + 1 );
                        }, 500 );
    
                    } else {
    
                        image
                            .removeAttr( 'data-lazy' )
                            .removeClass( 'slick-loading' )
                            .addClass( 'slick-lazyload-error' );
    
                        _.$slider.trigger('lazyLoadError', [ _, image, imageSource ]);
    
                        _.progressiveLazyLoad();
    
                    }
    
                };
    
                imageToLoad.src = imageSource;
    
            } else {
    
                _.$slider.trigger('allImagesLoaded', [ _ ]);
    
            }
    
        };
    
        Slick.prototype.refresh = function( initializing ) {
    
            var _ = this, currentSlide, lastVisibleIndex;
    
            lastVisibleIndex = _.slideCount - _.options.slidesToShow;
    
            // in non-infinite sliders, we don't want to go past the
            // last visible index.
            if( !_.options.infinite && ( _.currentSlide > lastVisibleIndex )) {
                _.currentSlide = lastVisibleIndex;
            }
    
            // if less slides than to show, go to start.
            if ( _.slideCount <= _.options.slidesToShow ) {
                _.currentSlide = 0;
    
            }
    
            currentSlide = _.currentSlide;
    
            _.destroy(true);
    
            $.extend(_, _.initials, { currentSlide: currentSlide });
    
            _.init();
    
            if( !initializing ) {
    
                _.changeSlide({
                    data: {
                        message: 'index',
                        index: currentSlide
                    }
                }, false);
    
            }
    
        };
    
        Slick.prototype.registerBreakpoints = function() {
    
            var _ = this, breakpoint, currentBreakpoint, l,
                responsiveSettings = _.options.responsive || null;
    
            if ( $.type(responsiveSettings) === 'array' && responsiveSettings.length ) {
    
                _.respondTo = _.options.respondTo || 'window';
    
                for ( breakpoint in responsiveSettings ) {
    
                    l = _.breakpoints.length-1;
    
                    if (responsiveSettings.hasOwnProperty(breakpoint)) {
                        currentBreakpoint = responsiveSettings[breakpoint].breakpoint;
    
                        // loop through the breakpoints and cut out any existing
                        // ones with the same breakpoint number, we don't want dupes.
                        while( l >= 0 ) {
                            if( _.breakpoints[l] && _.breakpoints[l] === currentBreakpoint ) {
                                _.breakpoints.splice(l,1);
                            }
                            l--;
                        }
    
                        _.breakpoints.push(currentBreakpoint);
                        _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;
    
                    }
    
                }
    
                _.breakpoints.sort(function(a, b) {
                    return ( _.options.mobileFirst ) ? a-b : b-a;
                });
    
            }
    
        };
    
        Slick.prototype.reinit = function() {
    
            var _ = this;
    
            _.$slides =
                _.$slideTrack
                    .children(_.options.slide)
                    .addClass('slick-slide');
    
            _.slideCount = _.$slides.length;
    
            if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {
                _.currentSlide = _.currentSlide - _.options.slidesToScroll;
            }
    
            if (_.slideCount <= _.options.slidesToShow) {
                _.currentSlide = 0;
            }
    
            _.registerBreakpoints();
    
            _.setProps();
            _.setupInfinite();
            _.buildArrows();
            _.updateArrows();
            _.initArrowEvents();
            _.buildDots();
            _.updateDots();
            _.initDotEvents();
            _.cleanUpSlideEvents();
            _.initSlideEvents();
    
            _.checkResponsive(false, true);
    
            if (_.options.focusOnSelect === true) {
                $(_.$slideTrack).children().on('click.slick', _.selectHandler);
            }
    
            _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);
    
            _.setPosition();
            _.focusHandler();
    
            _.paused = !_.options.autoplay;
            _.autoPlay();
    
            _.$slider.trigger('reInit', [_]);
    
        };
    
        Slick.prototype.resize = function() {
    
            var _ = this;
    
            if ($(window).width() !== _.windowWidth) {
                clearTimeout(_.windowDelay);
                _.windowDelay = window.setTimeout(function() {
                    _.windowWidth = $(window).width();
                    _.checkResponsive();
                    if( !_.unslicked ) { _.setPosition(); }
                }, 50);
            }
        };
    
        Slick.prototype.removeSlide = Slick.prototype.slickRemove = function(index, removeBefore, removeAll) {
    
            var _ = this;
    
            if (typeof(index) === 'boolean') {
                removeBefore = index;
                index = removeBefore === true ? 0 : _.slideCount - 1;
            } else {
                index = removeBefore === true ? --index : index;
            }
    
            if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {
                return false;
            }
    
            _.unload();
    
            if (removeAll === true) {
                _.$slideTrack.children().remove();
            } else {
                _.$slideTrack.children(this.options.slide).eq(index).remove();
            }
    
            _.$slides = _.$slideTrack.children(this.options.slide);
    
            _.$slideTrack.children(this.options.slide).detach();
    
            _.$slideTrack.append(_.$slides);
    
            _.$slidesCache = _.$slides;
    
            _.reinit();
    
        };
    
        Slick.prototype.setCSS = function(position) {
    
            var _ = this,
                positionProps = {},
                x, y;
    
            if (_.options.rtl === true) {
                position = -position;
            }
            x = _.positionProp == 'left' ? Math.ceil(position) + 'px' : '0px';
            y = _.positionProp == 'top' ? Math.ceil(position) + 'px' : '0px';
    
            positionProps[_.positionProp] = position;
    
            if (_.transformsEnabled === false) {
                _.$slideTrack.css(positionProps);
            } else {
                positionProps = {};
                if (_.cssTransitions === false) {
                    positionProps[_.animType] = 'translate(' + x + ', ' + y + ')';
                    _.$slideTrack.css(positionProps);
                } else {
                    positionProps[_.animType] = 'translate3d(' + x + ', ' + y + ', 0px)';
                    _.$slideTrack.css(positionProps);
                }
            }
    
        };
    
        Slick.prototype.setDimensions = function() {
    
            var _ = this;
    
            if (_.options.vertical === false) {
                if (_.options.centerMode === true) {
                    _.$list.css({
                        padding: ('0px ' + _.options.centerPadding)
                    });
                }
            } else {
                _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);
                if (_.options.centerMode === true) {
                    _.$list.css({
                        padding: (_.options.centerPadding + ' 0px')
                    });
                }
            }
    
            _.listWidth = _.$list.width();
            _.listHeight = _.$list.height();
    
    
            if (_.options.vertical === false && _.options.variableWidth === false) {
                _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);
                _.$slideTrack.width(Math.ceil((_.slideWidth * _.$slideTrack.children('.slick-slide').length)));
    
            } else if (_.options.variableWidth === true) {
                _.$slideTrack.width(5000 * _.slideCount);
            } else {
                _.slideWidth = Math.ceil(_.listWidth);
                _.$slideTrack.height(Math.ceil((_.$slides.first().outerHeight(true) * _.$slideTrack.children('.slick-slide').length)));
            }
    
            var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();
            if (_.options.variableWidth === false) _.$slideTrack.children('.slick-slide').width(_.slideWidth - offset);
    
        };
    
        Slick.prototype.setFade = function() {
    
            var _ = this,
                targetLeft;
    
            _.$slides.each(function(index, element) {
                targetLeft = (_.slideWidth * index) * -1;
                if (_.options.rtl === true) {
                    $(element).css({
                        position: 'relative',
                        right: targetLeft,
                        top: 0,
                        zIndex: _.options.zIndex - 2,
                        opacity: 0
                    });
                } else {
                    $(element).css({
                        position: 'relative',
                        left: targetLeft,
                        top: 0,
                        zIndex: _.options.zIndex - 2,
                        opacity: 0
                    });
                }
            });
    
            _.$slides.eq(_.currentSlide).css({
                zIndex: _.options.zIndex - 1,
                opacity: 1
            });
    
        };
    
        Slick.prototype.setHeight = function() {
    
            var _ = this;
    
            if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
                var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
                _.$list.css('height', targetHeight);
            }
    
        };
    
        Slick.prototype.setOption =
        Slick.prototype.slickSetOption = function() {
    
            /**
             * accepts arguments in format of:
             *
             *  - for changing a single option's value:
             *     .slick("setOption", option, value, refresh )
             *
             *  - for changing a set of responsive options:
             *     .slick("setOption", 'responsive', [{}, ...], refresh )
             *
             *  - for updating multiple values at once (not responsive)
             *     .slick("setOption", { 'option': value, ... }, refresh )
             */
    
            var _ = this, l, item, option, value, refresh = false, type;
    
            if( $.type( arguments[0] ) === 'object' ) {
    
                option =  arguments[0];
                refresh = arguments[1];
                type = 'multiple';
    
            } else if ( $.type( arguments[0] ) === 'string' ) {
    
                option =  arguments[0];
                value = arguments[1];
                refresh = arguments[2];
    
                if ( arguments[0] === 'responsive' && $.type( arguments[1] ) === 'array' ) {
    
                    type = 'responsive';
    
                } else if ( typeof arguments[1] !== 'undefined' ) {
    
                    type = 'single';
    
                }
    
            }
    
            if ( type === 'single' ) {
    
                _.options[option] = value;
    
    
            } else if ( type === 'multiple' ) {
    
                $.each( option , function( opt, val ) {
    
                    _.options[opt] = val;
    
                });
    
    
            } else if ( type === 'responsive' ) {
    
                for ( item in value ) {
    
                    if( $.type( _.options.responsive ) !== 'array' ) {
    
                        _.options.responsive = [ value[item] ];
    
                    } else {
    
                        l = _.options.responsive.length-1;
    
                        // loop through the responsive object and splice out duplicates.
                        while( l >= 0 ) {
    
                            if( _.options.responsive[l].breakpoint === value[item].breakpoint ) {
    
                                _.options.responsive.splice(l,1);
    
                            }
    
                            l--;
    
                        }
    
                        _.options.responsive.push( value[item] );
    
                    }
    
                }
    
            }
    
            if ( refresh ) {
    
                _.unload();
                _.reinit();
    
            }
    
        };
    
        Slick.prototype.setPosition = function() {
    
            var _ = this;
    
            _.setDimensions();
    
            _.setHeight();
    
            if (_.options.fade === false) {
                _.setCSS(_.getLeft(_.currentSlide));
            } else {
                _.setFade();
            }
    
            _.$slider.trigger('setPosition', [_]);
    
        };
    
        Slick.prototype.setProps = function() {
    
            var _ = this,
                bodyStyle = document.body.style;
    
            _.positionProp = _.options.vertical === true ? 'top' : 'left';
    
            if (_.positionProp === 'top') {
                _.$slider.addClass('slick-vertical');
            } else {
                _.$slider.removeClass('slick-vertical');
            }
    
            if (bodyStyle.WebkitTransition !== undefined ||
                bodyStyle.MozTransition !== undefined ||
                bodyStyle.msTransition !== undefined) {
                if (_.options.useCSS === true) {
                    _.cssTransitions = true;
                }
            }
    
            if ( _.options.fade ) {
                if ( typeof _.options.zIndex === 'number' ) {
                    if( _.options.zIndex < 3 ) {
                        _.options.zIndex = 3;
                    }
                } else {
                    _.options.zIndex = _.defaults.zIndex;
                }
            }
    
            if (bodyStyle.OTransform !== undefined) {
                _.animType = 'OTransform';
                _.transformType = '-o-transform';
                _.transitionType = 'OTransition';
                if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
            }
            if (bodyStyle.MozTransform !== undefined) {
                _.animType = 'MozTransform';
                _.transformType = '-moz-transform';
                _.transitionType = 'MozTransition';
                if (bodyStyle.perspectiveProperty === undefined && bodyStyle.MozPerspective === undefined) _.animType = false;
            }
            if (bodyStyle.webkitTransform !== undefined) {
                _.animType = 'webkitTransform';
                _.transformType = '-webkit-transform';
                _.transitionType = 'webkitTransition';
                if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
            }
            if (bodyStyle.msTransform !== undefined) {
                _.animType = 'msTransform';
                _.transformType = '-ms-transform';
                _.transitionType = 'msTransition';
                if (bodyStyle.msTransform === undefined) _.animType = false;
            }
            if (bodyStyle.transform !== undefined && _.animType !== false) {
                _.animType = 'transform';
                _.transformType = 'transform';
                _.transitionType = 'transition';
            }
            _.transformsEnabled = _.options.useTransform && (_.animType !== null && _.animType !== false);
        };
    
    
        Slick.prototype.setSlideClasses = function(index) {
    
            var _ = this,
                centerOffset, allSlides, indexOffset, remainder;
    
            allSlides = _.$slider
                .find('.slick-slide')
                .removeClass('slick-active slick-center slick-current')
                .attr('aria-hidden', 'true');
    
            _.$slides
                .eq(index)
                .addClass('slick-current');
    
            if (_.options.centerMode === true) {
    
                centerOffset = Math.floor(_.options.slidesToShow / 2);
    
                if (_.options.infinite === true) {
    
                    if (index >= centerOffset && index <= (_.slideCount - 1) - centerOffset) {
    
                        _.$slides
                            .slice(index - centerOffset, index + centerOffset + 1)
                            .addClass('slick-active')
                            .attr('aria-hidden', 'false');
    
                    } else {
    
                        indexOffset = _.options.slidesToShow + index;
                        allSlides
                            .slice(indexOffset - centerOffset + 1, indexOffset + centerOffset + 2)
                            .addClass('slick-active')
                            .attr('aria-hidden', 'false');
    
                    }
    
                    if (index === 0) {
    
                        allSlides
                            .eq(allSlides.length - 1 - _.options.slidesToShow)
                            .addClass('slick-center');
    
                    } else if (index === _.slideCount - 1) {
    
                        allSlides
                            .eq(_.options.slidesToShow)
                            .addClass('slick-center');
    
                    }
    
                }
    
                _.$slides
                    .eq(index)
                    .addClass('slick-center');
    
            } else {
    
                if (index >= 0 && index <= (_.slideCount - _.options.slidesToShow)) {
    
                    _.$slides
                        .slice(index, index + _.options.slidesToShow)
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');
    
                } else if (allSlides.length <= _.options.slidesToShow) {
    
                    allSlides
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');
    
                } else {
    
                    remainder = _.slideCount % _.options.slidesToShow;
                    indexOffset = _.options.infinite === true ? _.options.slidesToShow + index : index;
    
                    if (_.options.slidesToShow == _.options.slidesToScroll && (_.slideCount - index) < _.options.slidesToShow) {
    
                        allSlides
                            .slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder)
                            .addClass('slick-active')
                            .attr('aria-hidden', 'false');
    
                    } else {
    
                        allSlides
                            .slice(indexOffset, indexOffset + _.options.slidesToShow)
                            .addClass('slick-active')
                            .attr('aria-hidden', 'false');
    
                    }
    
                }
    
            }
    
            if (_.options.lazyLoad === 'ondemand' || _.options.lazyLoad === 'anticipated') {
                _.lazyLoad();
            }
        };
    
        Slick.prototype.setupInfinite = function() {
    
            var _ = this,
                i, slideIndex, infiniteCount;
    
            if (_.options.fade === true) {
                _.options.centerMode = false;
            }
    
            if (_.options.infinite === true && _.options.fade === false) {
    
                slideIndex = null;
    
                if (_.slideCount > _.options.slidesToShow) {
    
                    if (_.options.centerMode === true) {
                        infiniteCount = _.options.slidesToShow + 1;
                    } else {
                        infiniteCount = _.options.slidesToShow;
                    }
    
                    for (i = _.slideCount; i > (_.slideCount -
                            infiniteCount); i -= 1) {
                        slideIndex = i - 1;
                        $(_.$slides[slideIndex]).clone(true).attr('id', '')
                            .attr('data-slick-index', slideIndex - _.slideCount)
                            .prependTo(_.$slideTrack).addClass('slick-cloned');
                    }
                    for (i = 0; i < infiniteCount  + _.slideCount; i += 1) {
                        slideIndex = i;
                        $(_.$slides[slideIndex]).clone(true).attr('id', '')
                            .attr('data-slick-index', slideIndex + _.slideCount)
                            .appendTo(_.$slideTrack).addClass('slick-cloned');
                    }
                    _.$slideTrack.find('.slick-cloned').find('[id]').each(function() {
                        $(this).attr('id', '');
                    });
    
                }
    
            }
    
        };
    
        Slick.prototype.interrupt = function( toggle ) {
    
            var _ = this;
    
            if( !toggle ) {
                _.autoPlay();
            }
            _.interrupted = toggle;
    
        };
    
        Slick.prototype.selectHandler = function(event) {
    
            var _ = this;
    
            var targetElement =
                $(event.target).is('.slick-slide') ?
                    $(event.target) :
                    $(event.target).parents('.slick-slide');
    
            var index = parseInt(targetElement.attr('data-slick-index'));
    
            if (!index) index = 0;
    
            if (_.slideCount <= _.options.slidesToShow) {
    
                _.slideHandler(index, false, true);
                return;
    
            }
    
            _.slideHandler(index);
    
        };
    
        Slick.prototype.slideHandler = function(index, sync, dontAnimate) {
    
            var targetSlide, animSlide, oldSlide, slideLeft, targetLeft = null,
                _ = this, navTarget;
    
            sync = sync || false;
    
            if (_.animating === true && _.options.waitForAnimate === true) {
                return;
            }
    
            if (_.options.fade === true && _.currentSlide === index) {
                return;
            }
    
            if (sync === false) {
                _.asNavFor(index);
            }
    
            targetSlide = index;
            targetLeft = _.getLeft(targetSlide);
            slideLeft = _.getLeft(_.currentSlide);
    
            _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;
    
            if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {
                if (_.options.fade === false) {
                    targetSlide = _.currentSlide;
                    if (dontAnimate !== true) {
                        _.animateSlide(slideLeft, function() {
                            _.postSlide(targetSlide);
                        });
                    } else {
                        _.postSlide(targetSlide);
                    }
                }
                return;
            } else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > (_.slideCount - _.options.slidesToScroll))) {
                if (_.options.fade === false) {
                    targetSlide = _.currentSlide;
                    if (dontAnimate !== true) {
                        _.animateSlide(slideLeft, function() {
                            _.postSlide(targetSlide);
                        });
                    } else {
                        _.postSlide(targetSlide);
                    }
                }
                return;
            }
    
            if ( _.options.autoplay ) {
                clearInterval(_.autoPlayTimer);
            }
    
            if (targetSlide < 0) {
                if (_.slideCount % _.options.slidesToScroll !== 0) {
                    animSlide = _.slideCount - (_.slideCount % _.options.slidesToScroll);
                } else {
                    animSlide = _.slideCount + targetSlide;
                }
            } else if (targetSlide >= _.slideCount) {
                if (_.slideCount % _.options.slidesToScroll !== 0) {
                    animSlide = 0;
                } else {
                    animSlide = targetSlide - _.slideCount;
                }
            } else {
                animSlide = targetSlide;
            }
    
            _.animating = true;
    
            _.$slider.trigger('beforeChange', [_, _.currentSlide, animSlide]);
    
            oldSlide = _.currentSlide;
            _.currentSlide = animSlide;
    
            _.setSlideClasses(_.currentSlide);
    
            if ( _.options.asNavFor ) {
    
                navTarget = _.getNavTarget();
                navTarget = navTarget.slick('getSlick');
    
                if ( navTarget.slideCount <= navTarget.options.slidesToShow ) {
                    navTarget.setSlideClasses(_.currentSlide);
                }
    
            }
    
            _.updateDots();
            _.updateArrows();
    
            if (_.options.fade === true) {
                if (dontAnimate !== true) {
    
                    _.fadeSlideOut(oldSlide);
    
                    _.fadeSlide(animSlide, function() {
                        _.postSlide(animSlide);
                    });
    
                } else {
                    _.postSlide(animSlide);
                }
                _.animateHeight();
                return;
            }
    
            if (dontAnimate !== true) {
                _.animateSlide(targetLeft, function() {
                    _.postSlide(animSlide);
                });
            } else {
                _.postSlide(animSlide);
            }
    
        };
    
        Slick.prototype.startLoad = function() {
    
            var _ = this;
    
            if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
    
                _.$prevArrow.hide();
                _.$nextArrow.hide();
    
            }
    
            if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
    
                _.$dots.hide();
    
            }
    
            _.$slider.addClass('slick-loading');
    
        };
    
        Slick.prototype.swipeDirection = function() {
    
            var xDist, yDist, r, swipeAngle, _ = this;
    
            xDist = _.touchObject.startX - _.touchObject.curX;
            yDist = _.touchObject.startY - _.touchObject.curY;
            r = Math.atan2(yDist, xDist);
    
            swipeAngle = Math.round(r * 180 / Math.PI);
            if (swipeAngle < 0) {
                swipeAngle = 360 - Math.abs(swipeAngle);
            }
    
            if ((swipeAngle <= 45) && (swipeAngle >= 0)) {
                return (_.options.rtl === false ? 'left' : 'right');
            }
            if ((swipeAngle <= 360) && (swipeAngle >= 315)) {
                return (_.options.rtl === false ? 'left' : 'right');
            }
            if ((swipeAngle >= 135) && (swipeAngle <= 225)) {
                return (_.options.rtl === false ? 'right' : 'left');
            }
            if (_.options.verticalSwiping === true) {
                if ((swipeAngle >= 35) && (swipeAngle <= 135)) {
                    return 'down';
                } else {
                    return 'up';
                }
            }
    
            return 'vertical';
    
        };
    
        Slick.prototype.swipeEnd = function(event) {
    
            var _ = this,
                slideCount,
                direction;
    
            _.dragging = false;
            _.swiping = false;
    
            if (_.scrolling) {
                _.scrolling = false;
                return false;
            }
    
            _.interrupted = false;
            _.shouldClick = ( _.touchObject.swipeLength > 10 ) ? false : true;
    
            if ( _.touchObject.curX === undefined ) {
                return false;
            }
    
            if ( _.touchObject.edgeHit === true ) {
                _.$slider.trigger('edge', [_, _.swipeDirection() ]);
            }
    
            if ( _.touchObject.swipeLength >= _.touchObject.minSwipe ) {
    
                direction = _.swipeDirection();
    
                switch ( direction ) {
    
                    case 'left':
                    case 'down':
    
                        slideCount =
                            _.options.swipeToSlide ?
                                _.checkNavigable( _.currentSlide + _.getSlideCount() ) :
                                _.currentSlide + _.getSlideCount();
    
                        _.currentDirection = 0;
    
                        break;
    
                    case 'right':
                    case 'up':
    
                        slideCount =
                            _.options.swipeToSlide ?
                                _.checkNavigable( _.currentSlide - _.getSlideCount() ) :
                                _.currentSlide - _.getSlideCount();
    
                        _.currentDirection = 1;
    
                        break;
    
                    default:
    
    
                }
    
                if( direction != 'vertical' ) {
    
                    _.slideHandler( slideCount );
                    _.touchObject = {};
                    _.$slider.trigger('swipe', [_, direction ]);
    
                }
    
            } else {
    
                if ( _.touchObject.startX !== _.touchObject.curX ) {
    
                    _.slideHandler( _.currentSlide );
                    _.touchObject = {};
    
                }
    
            }
    
        };
    
        Slick.prototype.swipeHandler = function(event) {
    
            var _ = this;
    
            if ((_.options.swipe === false) || ('ontouchend' in document && _.options.swipe === false)) {
                return;
            } else if (_.options.draggable === false && event.type.indexOf('mouse') !== -1) {
                return;
            }
    
            _.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ?
                event.originalEvent.touches.length : 1;
    
            _.touchObject.minSwipe = _.listWidth / _.options
                .touchThreshold;
    
            if (_.options.verticalSwiping === true) {
                _.touchObject.minSwipe = _.listHeight / _.options
                    .touchThreshold;
            }
    
            switch (event.data.action) {
    
                case 'start':
                    _.swipeStart(event);
                    break;
    
                case 'move':
                    _.swipeMove(event);
                    break;
    
                case 'end':
                    _.swipeEnd(event);
                    break;
    
            }
    
        };
    
        Slick.prototype.swipeMove = function(event) {
    
            var _ = this,
                edgeWasHit = false,
                curLeft, swipeDirection, swipeLength, positionOffset, touches, verticalSwipeLength;
    
            touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;
    
            if (!_.dragging || _.scrolling || touches && touches.length !== 1) {
                return false;
            }
    
            curLeft = _.getLeft(_.currentSlide);
    
            _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;
            _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;
    
            _.touchObject.swipeLength = Math.round(Math.sqrt(
                Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));
    
            verticalSwipeLength = Math.round(Math.sqrt(
                Math.pow(_.touchObject.curY - _.touchObject.startY, 2)));
    
            if (!_.options.verticalSwiping && !_.swiping && verticalSwipeLength > 4) {
                _.scrolling = true;
                return false;
            }
    
            if (_.options.verticalSwiping === true) {
                _.touchObject.swipeLength = verticalSwipeLength;
            }
    
            swipeDirection = _.swipeDirection();
    
            if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {
                _.swiping = true;
                event.preventDefault();
            }
    
            positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);
            if (_.options.verticalSwiping === true) {
                positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;
            }
    
    
            swipeLength = _.touchObject.swipeLength;
    
            _.touchObject.edgeHit = false;
    
            if (_.options.infinite === false) {
                if ((_.currentSlide === 0 && swipeDirection === 'right') || (_.currentSlide >= _.getDotCount() && swipeDirection === 'left')) {
                    swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;
                    _.touchObject.edgeHit = true;
                }
            }
    
            if (_.options.vertical === false) {
                _.swipeLeft = curLeft + swipeLength * positionOffset;
            } else {
                _.swipeLeft = curLeft + (swipeLength * (_.$list.height() / _.listWidth)) * positionOffset;
            }
            if (_.options.verticalSwiping === true) {
                _.swipeLeft = curLeft + swipeLength * positionOffset;
            }
    
            if (_.options.fade === true || _.options.touchMove === false) {
                return false;
            }
    
            if (_.animating === true) {
                _.swipeLeft = null;
                return false;
            }
    
            _.setCSS(_.swipeLeft);
    
        };
    
        Slick.prototype.swipeStart = function(event) {
    
            var _ = this,
                touches;
    
            _.interrupted = true;
    
            if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {
                _.touchObject = {};
                return false;
            }
    
            if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {
                touches = event.originalEvent.touches[0];
            }
    
            _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX : event.clientX;
            _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY : event.clientY;
    
            _.dragging = true;
    
        };
    
        Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function() {
    
            var _ = this;
    
            if (_.$slidesCache !== null) {
    
                _.unload();
    
                _.$slideTrack.children(this.options.slide).detach();
    
                _.$slidesCache.appendTo(_.$slideTrack);
    
                _.reinit();
    
            }
    
        };
    
        Slick.prototype.unload = function() {
    
            var _ = this;
    
            $('.slick-cloned', _.$slider).remove();
    
            if (_.$dots) {
                _.$dots.remove();
            }
    
            if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {
                _.$prevArrow.remove();
            }
    
            if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {
                _.$nextArrow.remove();
            }
    
            _.$slides
                .removeClass('slick-slide slick-active slick-visible slick-current')
                .attr('aria-hidden', 'true')
                .css('width', '');
    
        };
    
        Slick.prototype.unslick = function(fromBreakpoint) {
    
            var _ = this;
            _.$slider.trigger('unslick', [_, fromBreakpoint]);
            _.destroy();
    
        };
    
        Slick.prototype.updateArrows = function() {
    
            var _ = this,
                centerOffset;
    
            centerOffset = Math.floor(_.options.slidesToShow / 2);
    
            if ( _.options.arrows === true &&
                _.slideCount > _.options.slidesToShow &&
                !_.options.infinite ) {
    
                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
                _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
    
                if (_.currentSlide === 0) {
    
                    _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                    _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
    
                } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === false) {
    
                    _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                    _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
    
                } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {
    
                    _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                    _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
    
                }
    
            }
    
        };
    
        Slick.prototype.updateDots = function() {
    
            var _ = this;
    
            if (_.$dots !== null) {
    
                _.$dots
                    .find('li')
                        .removeClass('slick-active')
                        .end();
    
                _.$dots
                    .find('li')
                    .eq(Math.floor(_.currentSlide / _.options.slidesToScroll))
                    .addClass('slick-active');
    
            }
    
        };
    
        Slick.prototype.visibility = function() {
    
            var _ = this;
    
            if ( _.options.autoplay ) {
    
                if ( document[_.hidden] ) {
    
                    _.interrupted = true;
    
                } else {
    
                    _.interrupted = false;
    
                }
    
            }
    
        };
    
        $.fn.slick = function() {
            var _ = this,
                opt = arguments[0],
                args = Array.prototype.slice.call(arguments, 1),
                l = _.length,
                i,
                ret;
            for (i = 0; i < l; i++) {
                if (typeof opt == 'object' || typeof opt == 'undefined')
                    _[i].slick = new Slick(_[i], opt);
                else
                    ret = _[i].slick[opt].apply(_[i].slick, args);
                if (typeof ret != 'undefined') return ret;
            }
            return _;
        };
    
    }));
    
    
    /***/ }),
    /* 393 */,
    /* 394 */,
    /* 395 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _link = __webpack_require__(21);
    
    var _link2 = _interopRequireDefault(_link);
    
    var _helpers = __webpack_require__(3);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var Breadcrumbs = function () {
        function Breadcrumbs() {
            _classCallCheck(this, Breadcrumbs);
    
            this.$breadcrumbs = $('.breadcrumbs');
            this.$breadcrumbsLink = this.$breadcrumbs.find('a');
    
            this.init();
        }
    
        _createClass(Breadcrumbs, [{
            key: 'init',
            value: function init() {
                this.initBreadcrumbs();
            }
        }, {
            key: 'initBreadcrumbs',
            value: function initBreadcrumbs() {
                var _this = this;
    
                new _link2.default(this.$breadcrumbsLink, {
                    type: 'single-reverse'
                });
    
                // Hide breadcrumbs after scroll:
                _helpers.$window.on('scroll', function () {
                    _helpers.$window.scrollTop() > 5 ? _this.$breadcrumbs.addClass(_helpers.css.hide) : _this.$breadcrumbs.removeClass(_helpers.css.hide);
                });
            }
        }]);
    
        return Breadcrumbs;
    }();
    
    exports.default = new Breadcrumbs();
    
    /***/ }),
    /* 396 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _link = __webpack_require__(21);
    
    var _link2 = _interopRequireDefault(_link);
    
    var _ScrollMagic = __webpack_require__(35);
    
    var _ScrollMagic2 = _interopRequireDefault(_ScrollMagic);
    
    var _helpers = __webpack_require__(3);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var Share = function () {
        function Share() {
            _classCallCheck(this, Share);
    
            this.$share = $('.share');
            this.$link = this.$share.find('a');
    
            this.init();
        }
    
        _createClass(Share, [{
            key: 'init',
            value: function init() {
                if (this.$share.length) {
                    this.initCircleBtn();
                    this.initFixedState();
                }
            }
        }, {
            key: 'initCircleBtn',
            value: function initCircleBtn() {
                new _link2.default(this.$link, {
                    type: 'single'
                });
            }
        }, {
            key: 'initFixedState',
            value: function initFixedState() {
    
                if (this.$link.length) {
                    var controller = new _ScrollMagic2.default.Controller(),
                        sectionBlueHeight = $('.blog-4_blue').height() + 215;
    
                    if (_helpers.Resp.isDesk) {
                        var share = document.getElementsByClassName('section_sharing')[0];
    
                        // Set fixed position:
                        new _ScrollMagic2.default.Scene({
                            triggerElement: share,
                            triggerHook: 'onEnter',
                            offset: 180
                        }).setClassToggle("body", "share-fixed").addTo(controller);
                        // Set bottom position:
                        new _ScrollMagic2.default.Scene({
                            triggerElement: ".redactor__signature",
                            triggerHook: 'onEnter',
                            offset: 100
                        }).setClassToggle("body", "share-bottom").addTo(controller);
    
                        // Change hover when block in blue section:
                        if ($('.blog-4_blue').length) {
                            new _ScrollMagic2.default.Scene({
                                triggerElement: ".blog-4_blue",
                                triggerHook: 'onEnter',
                                offset: 100,
                                duration: sectionBlueHeight
                            }).setClassToggle("body", "share-white-hover").addTo(controller);
                        }
                    } else return false;
                }
            }
        }]);
    
        return Share;
    }();
    
    exports.default = new Share();
    
    /***/ }),
    /* 397 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _link = __webpack_require__(21);
    
    var _link2 = _interopRequireDefault(_link);
    
    var _perfectScrollbar = __webpack_require__(108);
    
    var _perfectScrollbar2 = _interopRequireDefault(_perfectScrollbar);
    
    var _helpers = __webpack_require__(3);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var LeaderTooltip = function () {
        function LeaderTooltip() {
            _classCallCheck(this, LeaderTooltip);
    
            this.$leader = $('.leader');
            this.init();
        }
    
        _createClass(LeaderTooltip, [{
            key: 'init',
            value: function init() {
                if (this.$leader.length) {
                    this.initTooltip();
                }
            }
        }, {
            key: 'initTooltip',
            value: function initTooltip() {
                var $leader = $('.leader'),
                    $tooltips = $leader.find('.leader__tooltip'),
                    $closeBtn = $tooltips.find('.leader__tooltip-close'),
                    slideToggleDuration = 600;
    
                // Show tooltip after click:
                $leader.on('click tap', function () {
                    var $this = $(this),
                        $tooltip = $this.find('.leader__tooltip'),
                        $title = $this.find('.leader__title'),
                        $descr = $this.find('.leader__descr'),
                        $tooltipTitle = $tooltip.find('.leader__tooltip-title'),
                        $tooltipDescr = $tooltip.find('.leader__tooltip-descr'),
                        $tooltipText = $this.find('.leader__text'),
                        $leaderWidth = $this.outerWidth(),
                        $ps = $this.find('.ps__scrollbar-x-rail');
    
                    /* if slider, calculate tooltip position */
                    if ($leader.parent().hasClass('slick-track')) {
                        $tooltip.removeClass('right');
                        $tooltip.removeClass('left');
    
                        if (_helpers.Resp.isMobile) {
                            $tooltip.addClass('left');
                        } else {
                            var x = $this.get(0).getBoundingClientRect().left;
                            var edge = void 0;
                            if (_helpers.Resp.isDesk) {
                                edge = _helpers.Resp.currWidth < 1750 ? 890 : 1165;
                            } else if (_helpers.Resp.isTablet) {
                                edge = _helpers.Resp.currWidth < 1024 ? 384 : 666;
                            }
                            $tooltip.addClass(x >= edge ? 'right' : 'left');
                        }
                    }
    
                    if ($this.hasClass(_helpers.css.active)) return false;
                    $leader.removeClass(_helpers.css.active);
    
                    switch (true) {
                        case _helpers.Resp.isDesk:
                            $tooltip.css('width', 2 * $leaderWidth + 1);
                            break;
                        case _helpers.Resp.isTablet:
                            $tooltip.css('width', 2 * $leaderWidth + 1);
                            break;
                        case _helpers.Resp.isMobile:
                            $tooltip.css('width', $leaderWidth + 1);
                            break;
                        default:
                            return;
                    }
    
                    $tooltips.slideUp();
                    $tooltipTitle.text("");
                    $tooltipDescr.text("");
    
                    $this.addClass(_helpers.css.active);
                    $tooltipTitle.text($title.text());
                    $tooltipDescr.text($descr.text());
    
                    $tooltip.slideDown(slideToggleDuration);
                    new _link2.default($closeBtn, { type: 'close' });
    
                    if ($ps.length) {
                        _perfectScrollbar2.default.destroy($tooltipText.get(0));
                    }
    
                    $tooltipText.scrollTop(0);
    
                    var timeout = setTimeout(function () {
                        if ($tooltipText.height() >= Number($tooltipText.css('max-height').slice(0, -2))) {
                            _perfectScrollbar2.default.initialize($tooltipText.get(0));
                        }
                        clearTimeout(timeout);
                    }, 500);
                });
    
                $closeBtn.on('click tap', function (e) {
                    e.stopPropagation();
    
                    closeTooltip();
                });
    
                _helpers.$window.on('resize', function () {
    
                    closeTooltip();
                });
    
                _helpers.$document.on('click tap', function (e) {
                    if (!$leader.find(e.target).length) {
                        closeTooltip();
                    }
                });
    
                function closeTooltip() {
                    $tooltips.slideUp(slideToggleDuration);
                    $leader.removeClass(_helpers.css.active);
                }
            }
        }]);
    
        return LeaderTooltip;
    }();
    
    exports.default = new LeaderTooltip();
    
    /***/ }),
    /* 398 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _helpers = __webpack_require__(3);
    
    var _gsap = __webpack_require__(12);
    
    __webpack_require__(61);
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var SliderSectorNavigation = function () {
        function SliderSectorNavigation() {
            _classCallCheck(this, SliderSectorNavigation);
    
            this.$sectorsContainer = $('.navigation-sectors');
            this.$sectorItem = this.$sectorsContainer.find('.navigation-sectors__item');
            this.$sectorCircleField = this.$sectorsContainer.find('.navigation-sectors__circle');
            this.$sectorCircle = this.$sectorsContainer.find('.navigation-sectors__circle-border');
            this.init();
        }
    
        _createClass(SliderSectorNavigation, [{
            key: 'init',
            value: function init() {
                if (this.$sectorsContainer.length) {
                    this.initSectors();
                    this.changeSlide();
                }
            }
        }, {
            key: 'initSectors',
            value: function initSectors() {
                var _this = this;
    
                var radius = void 0;
                var $hoverBlock = $('.navigation-sectors__hover-block');
    
                $hoverBlock.eq(0).addClass('is-active');
                radius = this.$sectorsContainer.width() * 2;
    
                this.$sectorItem.each(function (index, el) {
                    var $el = $(el),
                        sectorCount = _this.$sectorItem.length;
    
                    // Set active sector:
                    if (index === 0) {
                        $el.addClass(_helpers.css.active);
                    } else {
                        if (index === 1) $el.addClass(_helpers.css.hide);
                        radius = radius - 2 * $el.width();
                    }
    
                    // Set css properties for animation circle:
                    _this.$sectorCircleField.eq(sectorCount - index - 1).css({
                        'width': radius + 'px',
                        'height': radius + 'px',
                        'border-width': $el.width() - 1 + 'px',
                        'z-index': index + 2
                    });
    
                    _this.$sectorCircle.eq(sectorCount - index - 1).css({
                        'width': radius + 'px',
                        'height': radius + 'px',
                        'border-width': $el.width() + 'px',
                        'z-index': index + 2
                    });
    
                    $hoverBlock.eq(sectorCount - index - 1).css({
                        'width': radius + 'px',
                        'height': radius + 'px',
                        'z-index': index + 2
                    });
                });
            }
        }, {
            key: 'changeSlide',
            value: function changeSlide() {
                this.$sectorItem.on('click tap', function (e) {
                    e.preventDefault();
                    var $this = $(e.currentTarget),
                        currentIndex = $this.index() - 2;
    
                    if ($this.hasClass(_helpers.css.active)) {
                        return false;
                    } else {
                        $('.navigation-sectors').toggleClass(_helpers.css.hide);
                        $('.slider-inner__item').removeClass(_helpers.css.anim);
                        setTimeout(function () {
                            // $('.navigation-sectors__hover-item').removeClass(css.anim);
                            $('.navigation-sectors__hover-block').removeClass(_helpers.css.active);
                            $('.navigation-sectors__item.is-active').removeClass(_helpers.css.active);
                            $('.navigation-sectors__item.is-overflow').removeClass(_helpers.css.overflow);
                            $this.addClass(_helpers.css.active);
                            $('.slider-inner__item').eq(currentIndex).addClass(_helpers.css.anim);
                            $('.navigation-sectors__hover-block').eq(currentIndex).addClass(_helpers.css.active);
                            $('.navigation-sectors__item.is-active').prev('.navigation-sectors__item').addClass(_helpers.css.overflow);
                            $('.navigation-sectors').toggleClass(_helpers.css.hide);
                        }, 800);
    
                        //Change slick-slide:
                        setTimeout(function () {
                            $('.slick-dots li').eq(currentIndex).trigger('click');
                        }, 600);
                    }
                });
    
                $('.navigation-sectors').on('mouseleave', function (e) {
                    $('.navigation-sectors__hover-block').removeClass(_helpers.css.anim);
                });
    
                this.$sectorItem.hover(function () {
                    $('.navigation-sectors__hover-block').removeClass(_helpers.css.anim);
                    $('.navigation-sectors__hover-block').eq($(this).index() - 2).addClass(_helpers.css.anim);
                });
            }
        }]);
    
        return SliderSectorNavigation;
    }();
    
    exports.default = new SliderSectorNavigation();
    
    /***/ }),
    /* 399 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _helpers = __webpack_require__(3);
    
    var _highlight = __webpack_require__(400);
    
    var _highlight2 = _interopRequireDefault(_highlight);
    
    __webpack_require__(578);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var Redactor = function () {
        function Redactor() {
            _classCallCheck(this, Redactor);
    
            this.$redactor = $('.redactor');
            this.$redactorAnchor = $('.redactor__anchor');
            this.$highlights = $('pre code');
            this.$list = $('.redactor ol');
    
            this.init();
        }
    
        _createClass(Redactor, [{
            key: 'init',
            value: function init() {
                if (this.$redactor.length) {
                    this.initHighlights();
                    this.initAnchorAnim();
                    this.removeMarginOfLastChild();
                    this.initStepCounter();
                }
            }
        }, {
            key: 'initHighlights',
            value: function initHighlights() {
                var highlightCount = this.$highlights.length;
    
                for (var i = 0; i < highlightCount; i++) {
                    _highlight2.default.highlightBlock(this.$highlights[i]);
                    _highlight2.default.lineNumbersBlock(this.$highlights[i]);
                }
            }
        }, {
            key: 'initAnchorAnim',
            value: function initAnchorAnim() {
                this.$redactorAnchor.on('click tap', function () {
                    _helpers.$scrolledElements.animate({
                        scrollTop: $($(this).attr('href')).offset().top
                    }, 600);
                    return false;
                });
            }
        }, {
            key: 'removeMarginOfLastChild',
            value: function removeMarginOfLastChild() {
                // Set last redactor element margin bottom 0 (independently of tag)
                this.$redactor.children().eq(this.$redactor.children().length - 1).css("margin-bottom", "0");
            }
        }, {
            key: 'initStepCounter',
            value: function initStepCounter() {
                this.$list.each(function (index, item) {
                    var $this = $(item),
                        start = $this.attr('start');
    
                    if (start) {
                        start = 'list ' + (start - 1);
                        $this.css('counter-reset', start);
                    }
                });
            }
        }]);
    
        return Redactor;
    }();
    
    exports.default = new Redactor();
    
    /***/ }),
    /* 400 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var hljs = __webpack_require__(401);
    
    hljs.registerLanguage('1c', __webpack_require__(402));
    hljs.registerLanguage('abnf', __webpack_require__(403));
    hljs.registerLanguage('accesslog', __webpack_require__(404));
    hljs.registerLanguage('actionscript', __webpack_require__(405));
    hljs.registerLanguage('ada', __webpack_require__(406));
    hljs.registerLanguage('apache', __webpack_require__(407));
    hljs.registerLanguage('applescript', __webpack_require__(408));
    hljs.registerLanguage('cpp', __webpack_require__(409));
    hljs.registerLanguage('arduino', __webpack_require__(410));
    hljs.registerLanguage('armasm', __webpack_require__(411));
    hljs.registerLanguage('xml', __webpack_require__(412));
    hljs.registerLanguage('asciidoc', __webpack_require__(413));
    hljs.registerLanguage('aspectj', __webpack_require__(414));
    hljs.registerLanguage('autohotkey', __webpack_require__(415));
    hljs.registerLanguage('autoit', __webpack_require__(416));
    hljs.registerLanguage('avrasm', __webpack_require__(417));
    hljs.registerLanguage('awk', __webpack_require__(418));
    hljs.registerLanguage('axapta', __webpack_require__(419));
    hljs.registerLanguage('bash', __webpack_require__(420));
    hljs.registerLanguage('basic', __webpack_require__(421));
    hljs.registerLanguage('bnf', __webpack_require__(422));
    hljs.registerLanguage('brainfuck', __webpack_require__(423));
    hljs.registerLanguage('cal', __webpack_require__(424));
    hljs.registerLanguage('capnproto', __webpack_require__(425));
    hljs.registerLanguage('ceylon', __webpack_require__(426));
    hljs.registerLanguage('clean', __webpack_require__(427));
    hljs.registerLanguage('clojure', __webpack_require__(428));
    hljs.registerLanguage('clojure-repl', __webpack_require__(429));
    hljs.registerLanguage('cmake', __webpack_require__(430));
    hljs.registerLanguage('coffeescript', __webpack_require__(431));
    hljs.registerLanguage('coq', __webpack_require__(432));
    hljs.registerLanguage('cos', __webpack_require__(433));
    hljs.registerLanguage('crmsh', __webpack_require__(434));
    hljs.registerLanguage('crystal', __webpack_require__(435));
    hljs.registerLanguage('cs', __webpack_require__(436));
    hljs.registerLanguage('csp', __webpack_require__(437));
    hljs.registerLanguage('css', __webpack_require__(438));
    hljs.registerLanguage('d', __webpack_require__(439));
    hljs.registerLanguage('markdown', __webpack_require__(440));
    hljs.registerLanguage('dart', __webpack_require__(441));
    hljs.registerLanguage('delphi', __webpack_require__(442));
    hljs.registerLanguage('diff', __webpack_require__(443));
    hljs.registerLanguage('django', __webpack_require__(444));
    hljs.registerLanguage('dns', __webpack_require__(445));
    hljs.registerLanguage('dockerfile', __webpack_require__(446));
    hljs.registerLanguage('dos', __webpack_require__(447));
    hljs.registerLanguage('dsconfig', __webpack_require__(448));
    hljs.registerLanguage('dts', __webpack_require__(449));
    hljs.registerLanguage('dust', __webpack_require__(450));
    hljs.registerLanguage('ebnf', __webpack_require__(451));
    hljs.registerLanguage('elixir', __webpack_require__(452));
    hljs.registerLanguage('elm', __webpack_require__(453));
    hljs.registerLanguage('ruby', __webpack_require__(454));
    hljs.registerLanguage('erb', __webpack_require__(455));
    hljs.registerLanguage('erlang-repl', __webpack_require__(456));
    hljs.registerLanguage('erlang', __webpack_require__(457));
    hljs.registerLanguage('excel', __webpack_require__(458));
    hljs.registerLanguage('fix', __webpack_require__(459));
    hljs.registerLanguage('flix', __webpack_require__(460));
    hljs.registerLanguage('fortran', __webpack_require__(461));
    hljs.registerLanguage('fsharp', __webpack_require__(462));
    hljs.registerLanguage('gams', __webpack_require__(463));
    hljs.registerLanguage('gauss', __webpack_require__(464));
    hljs.registerLanguage('gcode', __webpack_require__(465));
    hljs.registerLanguage('gherkin', __webpack_require__(466));
    hljs.registerLanguage('glsl', __webpack_require__(467));
    hljs.registerLanguage('go', __webpack_require__(468));
    hljs.registerLanguage('golo', __webpack_require__(469));
    hljs.registerLanguage('gradle', __webpack_require__(470));
    hljs.registerLanguage('groovy', __webpack_require__(471));
    hljs.registerLanguage('haml', __webpack_require__(472));
    hljs.registerLanguage('handlebars', __webpack_require__(473));
    hljs.registerLanguage('haskell', __webpack_require__(474));
    hljs.registerLanguage('haxe', __webpack_require__(475));
    hljs.registerLanguage('hsp', __webpack_require__(476));
    hljs.registerLanguage('htmlbars', __webpack_require__(477));
    hljs.registerLanguage('http', __webpack_require__(478));
    hljs.registerLanguage('hy', __webpack_require__(479));
    hljs.registerLanguage('inform7', __webpack_require__(480));
    hljs.registerLanguage('ini', __webpack_require__(481));
    hljs.registerLanguage('irpf90', __webpack_require__(482));
    hljs.registerLanguage('java', __webpack_require__(483));
    hljs.registerLanguage('javascript', __webpack_require__(484));
    hljs.registerLanguage('jboss-cli', __webpack_require__(485));
    hljs.registerLanguage('json', __webpack_require__(486));
    hljs.registerLanguage('julia', __webpack_require__(487));
    hljs.registerLanguage('julia-repl', __webpack_require__(488));
    hljs.registerLanguage('kotlin', __webpack_require__(489));
    hljs.registerLanguage('lasso', __webpack_require__(490));
    hljs.registerLanguage('ldif', __webpack_require__(491));
    hljs.registerLanguage('leaf', __webpack_require__(492));
    hljs.registerLanguage('less', __webpack_require__(493));
    hljs.registerLanguage('lisp', __webpack_require__(494));
    hljs.registerLanguage('livecodeserver', __webpack_require__(495));
    hljs.registerLanguage('livescript', __webpack_require__(496));
    hljs.registerLanguage('llvm', __webpack_require__(497));
    hljs.registerLanguage('lsl', __webpack_require__(498));
    hljs.registerLanguage('lua', __webpack_require__(499));
    hljs.registerLanguage('makefile', __webpack_require__(500));
    hljs.registerLanguage('mathematica', __webpack_require__(501));
    hljs.registerLanguage('matlab', __webpack_require__(502));
    hljs.registerLanguage('maxima', __webpack_require__(503));
    hljs.registerLanguage('mel', __webpack_require__(504));
    hljs.registerLanguage('mercury', __webpack_require__(505));
    hljs.registerLanguage('mipsasm', __webpack_require__(506));
    hljs.registerLanguage('mizar', __webpack_require__(507));
    hljs.registerLanguage('perl', __webpack_require__(508));
    hljs.registerLanguage('mojolicious', __webpack_require__(509));
    hljs.registerLanguage('monkey', __webpack_require__(510));
    hljs.registerLanguage('moonscript', __webpack_require__(511));
    hljs.registerLanguage('n1ql', __webpack_require__(512));
    hljs.registerLanguage('nginx', __webpack_require__(513));
    hljs.registerLanguage('nimrod', __webpack_require__(514));
    hljs.registerLanguage('nix', __webpack_require__(515));
    hljs.registerLanguage('nsis', __webpack_require__(516));
    hljs.registerLanguage('objectivec', __webpack_require__(517));
    hljs.registerLanguage('ocaml', __webpack_require__(518));
    hljs.registerLanguage('openscad', __webpack_require__(519));
    hljs.registerLanguage('oxygene', __webpack_require__(520));
    hljs.registerLanguage('parser3', __webpack_require__(521));
    hljs.registerLanguage('pf', __webpack_require__(522));
    hljs.registerLanguage('php', __webpack_require__(523));
    hljs.registerLanguage('pony', __webpack_require__(524));
    hljs.registerLanguage('powershell', __webpack_require__(525));
    hljs.registerLanguage('processing', __webpack_require__(526));
    hljs.registerLanguage('profile', __webpack_require__(527));
    hljs.registerLanguage('prolog', __webpack_require__(528));
    hljs.registerLanguage('protobuf', __webpack_require__(529));
    hljs.registerLanguage('puppet', __webpack_require__(530));
    hljs.registerLanguage('purebasic', __webpack_require__(531));
    hljs.registerLanguage('python', __webpack_require__(532));
    hljs.registerLanguage('q', __webpack_require__(533));
    hljs.registerLanguage('qml', __webpack_require__(534));
    hljs.registerLanguage('r', __webpack_require__(535));
    hljs.registerLanguage('rib', __webpack_require__(536));
    hljs.registerLanguage('roboconf', __webpack_require__(537));
    hljs.registerLanguage('routeros', __webpack_require__(538));
    hljs.registerLanguage('rsl', __webpack_require__(539));
    hljs.registerLanguage('ruleslanguage', __webpack_require__(540));
    hljs.registerLanguage('rust', __webpack_require__(541));
    hljs.registerLanguage('scala', __webpack_require__(542));
    hljs.registerLanguage('scheme', __webpack_require__(543));
    hljs.registerLanguage('scilab', __webpack_require__(544));
    hljs.registerLanguage('scss', __webpack_require__(545));
    hljs.registerLanguage('shell', __webpack_require__(546));
    hljs.registerLanguage('smali', __webpack_require__(547));
    hljs.registerLanguage('smalltalk', __webpack_require__(548));
    hljs.registerLanguage('sml', __webpack_require__(549));
    hljs.registerLanguage('sqf', __webpack_require__(550));
    hljs.registerLanguage('sql', __webpack_require__(551));
    hljs.registerLanguage('stan', __webpack_require__(552));
    hljs.registerLanguage('stata', __webpack_require__(553));
    hljs.registerLanguage('step21', __webpack_require__(554));
    hljs.registerLanguage('stylus', __webpack_require__(555));
    hljs.registerLanguage('subunit', __webpack_require__(556));
    hljs.registerLanguage('swift', __webpack_require__(557));
    hljs.registerLanguage('taggerscript', __webpack_require__(558));
    hljs.registerLanguage('yaml', __webpack_require__(559));
    hljs.registerLanguage('tap', __webpack_require__(560));
    hljs.registerLanguage('tcl', __webpack_require__(561));
    hljs.registerLanguage('tex', __webpack_require__(562));
    hljs.registerLanguage('thrift', __webpack_require__(563));
    hljs.registerLanguage('tp', __webpack_require__(564));
    hljs.registerLanguage('twig', __webpack_require__(565));
    hljs.registerLanguage('typescript', __webpack_require__(566));
    hljs.registerLanguage('vala', __webpack_require__(567));
    hljs.registerLanguage('vbnet', __webpack_require__(568));
    hljs.registerLanguage('vbscript', __webpack_require__(569));
    hljs.registerLanguage('vbscript-html', __webpack_require__(570));
    hljs.registerLanguage('verilog', __webpack_require__(571));
    hljs.registerLanguage('vhdl', __webpack_require__(572));
    hljs.registerLanguage('vim', __webpack_require__(573));
    hljs.registerLanguage('x86asm', __webpack_require__(574));
    hljs.registerLanguage('xl', __webpack_require__(575));
    hljs.registerLanguage('xquery', __webpack_require__(576));
    hljs.registerLanguage('zephir', __webpack_require__(577));
    
    module.exports = hljs;
    
    /***/ }),
    /* 401 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
    Syntax highlighting with language autodetection.
    https://highlightjs.org/
    */
    
    (function(factory) {
    
      // Find the global object for export to both the browser and web workers.
      var globalObject = typeof window === 'object' && window ||
                         typeof self === 'object' && self;
    
        // Export hljs globally even when using AMD for cases when this script
        // is loaded with others that may still expect a global hljs.
        globalObject.hljs = factory({});
        
        // Finally register the global hljs with AMD.
        if(true) {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
                return globalObject.hljs;
            }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
                    __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }
    
    }(function(hljs) {
      // Convenience variables for build-in objects
      var ArrayProto = [],
          objectKeys = Object.keys;
    
      // Global internal variables used within the highlight.js library.
      var languages = {},
          aliases   = {};
    
      // Regular expressions used throughout the highlight.js library.
      var noHighlightRe    = /^(no-?highlight|plain|text)$/i,
          languagePrefixRe = /\blang(?:uage)?-([\w-]+)\b/i,
          fixMarkupRe      = /((^(<[^>]+>|\t|)+|(?:\n)))/gm;
    
      var spanEndTag = '</span>';
    
      // Global options used when within external APIs. This is modified when
      // calling the `hljs.configure` function.
      var options = {
        classPrefix: 'hljs-',
        tabReplace: null,
        useBR: false,
        languages: undefined
      };
    
    
      /* Utility functions */
    
      function escape(value) {
        return value.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
      }
    
      function tag(node) {
        return node.nodeName.toLowerCase();
      }
    
      function testRe(re, lexeme) {
        var match = re && re.exec(lexeme);
        return match && match.index === 0;
      }
    
      function isNotHighlighted(language) {
        return noHighlightRe.test(language);
      }
    
      function blockLanguage(block) {
        var i, match, length, _class;
        var classes = block.className + ' ';
    
        classes += block.parentNode ? block.parentNode.className : '';
    
        // language-* takes precedence over non-prefixed class names.
        match = languagePrefixRe.exec(classes);
        if (match) {
          return getLanguage(match[1]) ? match[1] : 'no-highlight';
        }
    
        classes = classes.split(/\s+/);
    
        for (i = 0, length = classes.length; i < length; i++) {
          _class = classes[i]
    
          if (isNotHighlighted(_class) || getLanguage(_class)) {
            return _class;
          }
        }
      }
    
      function inherit(parent) {  // inherit(parent, override_obj, override_obj, ...)
        var key;
        var result = {};
        var objects = Array.prototype.slice.call(arguments, 1);
    
        for (key in parent)
          result[key] = parent[key];
        objects.forEach(function(obj) {
          for (key in obj)
            result[key] = obj[key];
        });
        return result;
      }
    
      /* Stream merging */
    
      function nodeStream(node) {
        var result = [];
        (function _nodeStream(node, offset) {
          for (var child = node.firstChild; child; child = child.nextSibling) {
            if (child.nodeType === 3)
              offset += child.nodeValue.length;
            else if (child.nodeType === 1) {
              result.push({
                event: 'start',
                offset: offset,
                node: child
              });
              offset = _nodeStream(child, offset);
              // Prevent void elements from having an end tag that would actually
              // double them in the output. There are more void elements in HTML
              // but we list only those realistically expected in code display.
              if (!tag(child).match(/br|hr|img|input/)) {
                result.push({
                  event: 'stop',
                  offset: offset,
                  node: child
                });
              }
            }
          }
          return offset;
        })(node, 0);
        return result;
      }
    
      function mergeStreams(original, highlighted, value) {
        var processed = 0;
        var result = '';
        var nodeStack = [];
    
        function selectStream() {
          if (!original.length || !highlighted.length) {
            return original.length ? original : highlighted;
          }
          if (original[0].offset !== highlighted[0].offset) {
            return (original[0].offset < highlighted[0].offset) ? original : highlighted;
          }
    
          /*
          To avoid starting the stream just before it should stop the order is
          ensured that original always starts first and closes last:
    
          if (event1 == 'start' && event2 == 'start')
            return original;
          if (event1 == 'start' && event2 == 'stop')
            return highlighted;
          if (event1 == 'stop' && event2 == 'start')
            return original;
          if (event1 == 'stop' && event2 == 'stop')
            return highlighted;
    
          ... which is collapsed to:
          */
          return highlighted[0].event === 'start' ? original : highlighted;
        }
    
        function open(node) {
          function attr_str(a) {return ' ' + a.nodeName + '="' + escape(a.value).replace('"', '&quot;') + '"';}
          result += '<' + tag(node) + ArrayProto.map.call(node.attributes, attr_str).join('') + '>';
        }
    
        function close(node) {
          result += '</' + tag(node) + '>';
        }
    
        function render(event) {
          (event.event === 'start' ? open : close)(event.node);
        }
    
        while (original.length || highlighted.length) {
          var stream = selectStream();
          result += escape(value.substring(processed, stream[0].offset));
          processed = stream[0].offset;
          if (stream === original) {
            /*
            On any opening or closing tag of the original markup we first close
            the entire highlighted node stack, then render the original tag along
            with all the following original tags at the same offset and then
            reopen all the tags on the highlighted stack.
            */
            nodeStack.reverse().forEach(close);
            do {
              render(stream.splice(0, 1)[0]);
              stream = selectStream();
            } while (stream === original && stream.length && stream[0].offset === processed);
            nodeStack.reverse().forEach(open);
          } else {
            if (stream[0].event === 'start') {
              nodeStack.push(stream[0].node);
            } else {
              nodeStack.pop();
            }
            render(stream.splice(0, 1)[0]);
          }
        }
        return result + escape(value.substr(processed));
      }
    
      /* Initialization */
    
      function expand_mode(mode) {
        if (mode.variants && !mode.cached_variants) {
          mode.cached_variants = mode.variants.map(function(variant) {
            return inherit(mode, {variants: null}, variant);
          });
        }
        return mode.cached_variants || (mode.endsWithParent && [inherit(mode)]) || [mode];
      }
    
      function compileLanguage(language) {
    
        function reStr(re) {
            return (re && re.source) || re;
        }
    
        function langRe(value, global) {
          return new RegExp(
            reStr(value),
            'm' + (language.case_insensitive ? 'i' : '') + (global ? 'g' : '')
          );
        }
    
        function compileMode(mode, parent) {
          if (mode.compiled)
            return;
          mode.compiled = true;
    
          mode.keywords = mode.keywords || mode.beginKeywords;
          if (mode.keywords) {
            var compiled_keywords = {};
    
            var flatten = function(className, str) {
              if (language.case_insensitive) {
                str = str.toLowerCase();
              }
              str.split(' ').forEach(function(kw) {
                var pair = kw.split('|');
                compiled_keywords[pair[0]] = [className, pair[1] ? Number(pair[1]) : 1];
              });
            };
    
            if (typeof mode.keywords === 'string') { // string
              flatten('keyword', mode.keywords);
            } else {
              objectKeys(mode.keywords).forEach(function (className) {
                flatten(className, mode.keywords[className]);
              });
            }
            mode.keywords = compiled_keywords;
          }
          mode.lexemesRe = langRe(mode.lexemes || /\w+/, true);
    
          if (parent) {
            if (mode.beginKeywords) {
              mode.begin = '\\b(' + mode.beginKeywords.split(' ').join('|') + ')\\b';
            }
            if (!mode.begin)
              mode.begin = /\B|\b/;
            mode.beginRe = langRe(mode.begin);
            if (!mode.end && !mode.endsWithParent)
              mode.end = /\B|\b/;
            if (mode.end)
              mode.endRe = langRe(mode.end);
            mode.terminator_end = reStr(mode.end) || '';
            if (mode.endsWithParent && parent.terminator_end)
              mode.terminator_end += (mode.end ? '|' : '') + parent.terminator_end;
          }
          if (mode.illegal)
            mode.illegalRe = langRe(mode.illegal);
          if (mode.relevance == null)
            mode.relevance = 1;
          if (!mode.contains) {
            mode.contains = [];
          }
          mode.contains = Array.prototype.concat.apply([], mode.contains.map(function(c) {
            return expand_mode(c === 'self' ? mode : c)
          }));
          mode.contains.forEach(function(c) {compileMode(c, mode);});
    
          if (mode.starts) {
            compileMode(mode.starts, parent);
          }
    
          var terminators =
            mode.contains.map(function(c) {
              return c.beginKeywords ? '\\.?(' + c.begin + ')\\.?' : c.begin;
            })
            .concat([mode.terminator_end, mode.illegal])
            .map(reStr)
            .filter(Boolean);
          mode.terminators = terminators.length ? langRe(terminators.join('|'), true) : {exec: function(/*s*/) {return null;}};
        }
    
        compileMode(language);
      }
    
      /*
      Core highlighting function. Accepts a language name, or an alias, and a
      string with the code to highlight. Returns an object with the following
      properties:
    
      - relevance (int)
      - value (an HTML string with highlighting markup)
    
      */
      function highlight(name, value, ignore_illegals, continuation) {
    
        function subMode(lexeme, mode) {
          var i, length;
    
          for (i = 0, length = mode.contains.length; i < length; i++) {
            if (testRe(mode.contains[i].beginRe, lexeme)) {
              return mode.contains[i];
            }
          }
        }
    
        function endOfMode(mode, lexeme) {
          if (testRe(mode.endRe, lexeme)) {
            while (mode.endsParent && mode.parent) {
              mode = mode.parent;
            }
            return mode;
          }
          if (mode.endsWithParent) {
            return endOfMode(mode.parent, lexeme);
          }
        }
    
        function isIllegal(lexeme, mode) {
          return !ignore_illegals && testRe(mode.illegalRe, lexeme);
        }
    
        function keywordMatch(mode, match) {
          var match_str = language.case_insensitive ? match[0].toLowerCase() : match[0];
          return mode.keywords.hasOwnProperty(match_str) && mode.keywords[match_str];
        }
    
        function buildSpan(classname, insideSpan, leaveOpen, noPrefix) {
          var classPrefix = noPrefix ? '' : options.classPrefix,
              openSpan    = '<span class="' + classPrefix,
              closeSpan   = leaveOpen ? '' : spanEndTag
    
          openSpan += classname + '">';
    
          return openSpan + insideSpan + closeSpan;
        }
    
        function processKeywords() {
          var keyword_match, last_index, match, result;
    
          if (!top.keywords)
            return escape(mode_buffer);
    
          result = '';
          last_index = 0;
          top.lexemesRe.lastIndex = 0;
          match = top.lexemesRe.exec(mode_buffer);
    
          while (match) {
            result += escape(mode_buffer.substring(last_index, match.index));
            keyword_match = keywordMatch(top, match);
            if (keyword_match) {
              relevance += keyword_match[1];
              result += buildSpan(keyword_match[0], escape(match[0]));
            } else {
              result += escape(match[0]);
            }
            last_index = top.lexemesRe.lastIndex;
            match = top.lexemesRe.exec(mode_buffer);
          }
          return result + escape(mode_buffer.substr(last_index));
        }
    
        function processSubLanguage() {
          var explicit = typeof top.subLanguage === 'string';
          if (explicit && !languages[top.subLanguage]) {
            return escape(mode_buffer);
          }
    
          var result = explicit ?
                       highlight(top.subLanguage, mode_buffer, true, continuations[top.subLanguage]) :
                       highlightAuto(mode_buffer, top.subLanguage.length ? top.subLanguage : undefined);
    
          // Counting embedded language score towards the host language may be disabled
          // with zeroing the containing mode relevance. Usecase in point is Markdown that
          // allows XML everywhere and makes every XML snippet to have a much larger Markdown
          // score.
          if (top.relevance > 0) {
            relevance += result.relevance;
          }
          if (explicit) {
            continuations[top.subLanguage] = result.top;
          }
          return buildSpan(result.language, result.value, false, true);
        }
    
        function processBuffer() {
          result += (top.subLanguage != null ? processSubLanguage() : processKeywords());
          mode_buffer = '';
        }
    
        function startNewMode(mode) {
          result += mode.className? buildSpan(mode.className, '', true): '';
          top = Object.create(mode, {parent: {value: top}});
        }
    
        function processLexeme(buffer, lexeme) {
    
          mode_buffer += buffer;
    
          if (lexeme == null) {
            processBuffer();
            return 0;
          }
    
          var new_mode = subMode(lexeme, top);
          if (new_mode) {
            if (new_mode.skip) {
              mode_buffer += lexeme;
            } else {
              if (new_mode.excludeBegin) {
                mode_buffer += lexeme;
              }
              processBuffer();
              if (!new_mode.returnBegin && !new_mode.excludeBegin) {
                mode_buffer = lexeme;
              }
            }
            startNewMode(new_mode, lexeme);
            return new_mode.returnBegin ? 0 : lexeme.length;
          }
    
          var end_mode = endOfMode(top, lexeme);
          if (end_mode) {
            var origin = top;
            if (origin.skip) {
              mode_buffer += lexeme;
            } else {
              if (!(origin.returnEnd || origin.excludeEnd)) {
                mode_buffer += lexeme;
              }
              processBuffer();
              if (origin.excludeEnd) {
                mode_buffer = lexeme;
              }
            }
            do {
              if (top.className) {
                result += spanEndTag;
              }
              if (!top.skip) {
                relevance += top.relevance;
              }
              top = top.parent;
            } while (top !== end_mode.parent);
            if (end_mode.starts) {
              startNewMode(end_mode.starts, '');
            }
            return origin.returnEnd ? 0 : lexeme.length;
          }
    
          if (isIllegal(lexeme, top))
            throw new Error('Illegal lexeme "' + lexeme + '" for mode "' + (top.className || '<unnamed>') + '"');
    
          /*
          Parser should not reach this point as all types of lexemes should be caught
          earlier, but if it does due to some bug make sure it advances at least one
          character forward to prevent infinite looping.
          */
          mode_buffer += lexeme;
          return lexeme.length || 1;
        }
    
        var language = getLanguage(name);
        if (!language) {
          throw new Error('Unknown language: "' + name + '"');
        }
    
        compileLanguage(language);
        var top = continuation || language;
        var continuations = {}; // keep continuations for sub-languages
        var result = '', current;
        for(current = top; current !== language; current = current.parent) {
          if (current.className) {
            result = buildSpan(current.className, '', true) + result;
          }
        }
        var mode_buffer = '';
        var relevance = 0;
        try {
          var match, count, index = 0;
          while (true) {
            top.terminators.lastIndex = index;
            match = top.terminators.exec(value);
            if (!match)
              break;
            count = processLexeme(value.substring(index, match.index), match[0]);
            index = match.index + count;
          }
          processLexeme(value.substr(index));
          for(current = top; current.parent; current = current.parent) { // close dangling modes
            if (current.className) {
              result += spanEndTag;
            }
          }
          return {
            relevance: relevance,
            value: result,
            language: name,
            top: top
          };
        } catch (e) {
          if (e.message && e.message.indexOf('Illegal') !== -1) {
            return {
              relevance: 0,
              value: escape(value)
            };
          } else {
            throw e;
          }
        }
      }
    
      /*
      Highlighting with language detection. Accepts a string with the code to
      highlight. Returns an object with the following properties:
    
      - language (detected language)
      - relevance (int)
      - value (an HTML string with highlighting markup)
      - second_best (object with the same structure for second-best heuristically
        detected language, may be absent)
    
      */
      function highlightAuto(text, languageSubset) {
        languageSubset = languageSubset || options.languages || objectKeys(languages);
        var result = {
          relevance: 0,
          value: escape(text)
        };
        var second_best = result;
        languageSubset.filter(getLanguage).forEach(function(name) {
          var current = highlight(name, text, false);
          current.language = name;
          if (current.relevance > second_best.relevance) {
            second_best = current;
          }
          if (current.relevance > result.relevance) {
            second_best = result;
            result = current;
          }
        });
        if (second_best.language) {
          result.second_best = second_best;
        }
        return result;
      }
    
      /*
      Post-processing of the highlighted markup:
    
      - replace TABs with something more useful
      - replace real line-breaks with '<br>' for non-pre containers
    
      */
      function fixMarkup(value) {
        return !(options.tabReplace || options.useBR)
          ? value
          : value.replace(fixMarkupRe, function(match, p1) {
              if (options.useBR && match === '\n') {
                return '<br>';
              } else if (options.tabReplace) {
                return p1.replace(/\t/g, options.tabReplace);
              }
              return '';
          });
      }
    
      function buildClassName(prevClassName, currentLang, resultLang) {
        var language = currentLang ? aliases[currentLang] : resultLang,
            result   = [prevClassName.trim()];
    
        if (!prevClassName.match(/\bhljs\b/)) {
          result.push('hljs');
        }
    
        if (prevClassName.indexOf(language) === -1) {
          result.push(language);
        }
    
        return result.join(' ').trim();
      }
    
      /*
      Applies highlighting to a DOM node containing code. Accepts a DOM node and
      two optional parameters for fixMarkup.
      */
      function highlightBlock(block) {
        var node, originalStream, result, resultNode, text;
        var language = blockLanguage(block);
    
        if (isNotHighlighted(language))
            return;
    
        if (options.useBR) {
          node = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');
          node.innerHTML = block.innerHTML.replace(/\n/g, '').replace(/<br[ \/]*>/g, '\n');
        } else {
          node = block;
        }
        text = node.textContent;
        result = language ? highlight(language, text, true) : highlightAuto(text);
    
        originalStream = nodeStream(node);
        if (originalStream.length) {
          resultNode = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');
          resultNode.innerHTML = result.value;
          result.value = mergeStreams(originalStream, nodeStream(resultNode), text);
        }
        result.value = fixMarkup(result.value);
    
        block.innerHTML = result.value;
        block.className = buildClassName(block.className, language, result.language);
        block.result = {
          language: result.language,
          re: result.relevance
        };
        if (result.second_best) {
          block.second_best = {
            language: result.second_best.language,
            re: result.second_best.relevance
          };
        }
      }
    
      /*
      Updates highlight.js global options with values passed in the form of an object.
      */
      function configure(user_options) {
        options = inherit(options, user_options);
      }
    
      /*
      Applies highlighting to all <pre><code>..</code></pre> blocks on a page.
      */
      function initHighlighting() {
        if (initHighlighting.called)
          return;
        initHighlighting.called = true;
    
        var blocks = document.querySelectorAll('pre code');
        ArrayProto.forEach.call(blocks, highlightBlock);
      }
    
      /*
      Attaches highlighting to the page load event.
      */
      function initHighlightingOnLoad() {
        addEventListener('DOMContentLoaded', initHighlighting, false);
        addEventListener('load', initHighlighting, false);
      }
    
      function registerLanguage(name, language) {
        var lang = languages[name] = language(hljs);
        if (lang.aliases) {
          lang.aliases.forEach(function(alias) {aliases[alias] = name;});
        }
      }
    
      function listLanguages() {
        return objectKeys(languages);
      }
    
      function getLanguage(name) {
        name = (name || '').toLowerCase();
        return languages[name] || languages[aliases[name]];
      }
    
      /* Interface definition */
    
      hljs.highlight = highlight;
      hljs.highlightAuto = highlightAuto;
      hljs.fixMarkup = fixMarkup;
      hljs.highlightBlock = highlightBlock;
      hljs.configure = configure;
      hljs.initHighlighting = initHighlighting;
      hljs.initHighlightingOnLoad = initHighlightingOnLoad;
      hljs.registerLanguage = registerLanguage;
      hljs.listLanguages = listLanguages;
      hljs.getLanguage = getLanguage;
      hljs.inherit = inherit;
    
      // Common regexps
      hljs.IDENT_RE = '[a-zA-Z]\\w*';
      hljs.UNDERSCORE_IDENT_RE = '[a-zA-Z_]\\w*';
      hljs.NUMBER_RE = '\\b\\d+(\\.\\d+)?';
      hljs.C_NUMBER_RE = '(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)'; // 0x..., 0..., decimal, float
      hljs.BINARY_NUMBER_RE = '\\b(0b[01]+)'; // 0b...
      hljs.RE_STARTERS_RE = '!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~';
    
      // Common modes
      hljs.BACKSLASH_ESCAPE = {
        begin: '\\\\[\\s\\S]', relevance: 0
      };
      hljs.APOS_STRING_MODE = {
        className: 'string',
        begin: '\'', end: '\'',
        illegal: '\\n',
        contains: [hljs.BACKSLASH_ESCAPE]
      };
      hljs.QUOTE_STRING_MODE = {
        className: 'string',
        begin: '"', end: '"',
        illegal: '\\n',
        contains: [hljs.BACKSLASH_ESCAPE]
      };
      hljs.PHRASAL_WORDS_MODE = {
        begin: /\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/
      };
      hljs.COMMENT = function (begin, end, inherits) {
        var mode = hljs.inherit(
          {
            className: 'comment',
            begin: begin, end: end,
            contains: []
          },
          inherits || {}
        );
        mode.contains.push(hljs.PHRASAL_WORDS_MODE);
        mode.contains.push({
          className: 'doctag',
          begin: '(?:TODO|FIXME|NOTE|BUG|XXX):',
          relevance: 0
        });
        return mode;
      };
      hljs.C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$');
      hljs.C_BLOCK_COMMENT_MODE = hljs.COMMENT('/\\*', '\\*/');
      hljs.HASH_COMMENT_MODE = hljs.COMMENT('#', '$');
      hljs.NUMBER_MODE = {
        className: 'number',
        begin: hljs.NUMBER_RE,
        relevance: 0
      };
      hljs.C_NUMBER_MODE = {
        className: 'number',
        begin: hljs.C_NUMBER_RE,
        relevance: 0
      };
      hljs.BINARY_NUMBER_MODE = {
        className: 'number',
        begin: hljs.BINARY_NUMBER_RE,
        relevance: 0
      };
      hljs.CSS_NUMBER_MODE = {
        className: 'number',
        begin: hljs.NUMBER_RE + '(' +
          '%|em|ex|ch|rem'  +
          '|vw|vh|vmin|vmax' +
          '|cm|mm|in|pt|pc|px' +
          '|deg|grad|rad|turn' +
          '|s|ms' +
          '|Hz|kHz' +
          '|dpi|dpcm|dppx' +
          ')?',
        relevance: 0
      };
      hljs.REGEXP_MODE = {
        className: 'regexp',
        begin: /\//, end: /\/[gimuy]*/,
        illegal: /\n/,
        contains: [
          hljs.BACKSLASH_ESCAPE,
          {
            begin: /\[/, end: /\]/,
            relevance: 0,
            contains: [hljs.BACKSLASH_ESCAPE]
          }
        ]
      };
      hljs.TITLE_MODE = {
        className: 'title',
        begin: hljs.IDENT_RE,
        relevance: 0
      };
      hljs.UNDERSCORE_TITLE_MODE = {
        className: 'title',
        begin: hljs.UNDERSCORE_IDENT_RE,
        relevance: 0
      };
      hljs.METHOD_GUARD = {
        // excludes method names from keyword processing
        begin: '\\.\\s*' + hljs.UNDERSCORE_IDENT_RE,
        relevance: 0
      };
    
      return hljs;
    }));
    
    
    /***/ }),
    /* 402 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs){
    
      // общий паттерн для определения идентификаторов
      var UNDERSCORE_IDENT_RE = '[A-Za-zА-Яа-яёЁ_][A-Za-zА-Яа-яёЁ_0-9]+';
      
      // v7 уникальные ключевые слова, отсутствующие в v8 ==> keyword
      var v7_keywords =
      'далее ';
    
      // v8 ключевые слова ==> keyword
      var v8_keywords =
      'возврат вызватьисключение выполнить для если и из или иначе иначеесли исключение каждого конецесли ' +
      'конецпопытки конеццикла не новый перейти перем по пока попытка прервать продолжить тогда цикл экспорт ';
    
      // keyword : ключевые слова
      var KEYWORD = v7_keywords + v8_keywords;
      
      // v7 уникальные директивы, отсутствующие в v8 ==> meta-keyword
      var v7_meta_keywords =
      'загрузитьизфайла ';
    
      // v8 ключевые слова в инструкциях препроцессора, директивах компиляции, аннотациях ==> meta-keyword
      var v8_meta_keywords =
      'вебклиент вместо внешнеесоединение клиент конецобласти мобильноеприложениеклиент мобильноеприложениесервер ' +
      'наклиенте наклиентенасервере наклиентенасерверебезконтекста насервере насерверебезконтекста область перед ' +
      'после сервер толстыйклиентобычноеприложение толстыйклиентуправляемоеприложение тонкийклиент ';
    
      // meta-keyword : ключевые слова в инструкциях препроцессора, директивах компиляции, аннотациях
      var METAKEYWORD = v7_meta_keywords + v8_meta_keywords;
    
      // v7 системные константы ==> built_in
      var v7_system_constants =
      'разделительстраниц разделительстрок символтабуляции ';
      
      // v7 уникальные методы глобального контекста, отсутствующие в v8 ==> built_in
      var v7_global_context_methods =
      'ansitooem oemtoansi ввестивидсубконто ввестиперечисление ввестипериод ввестиплансчетов выбранныйплансчетов ' +
      'датагод датамесяц датачисло заголовоксистемы значениевстроку значениеизстроки каталогиб каталогпользователя ' +
      'кодсимв конгода конецпериодаби конецрассчитанногопериодаби конецстандартногоинтервала конквартала конмесяца ' +
      'коннедели лог лог10 максимальноеколичествосубконто названиеинтерфейса названиенабораправ назначитьвид ' +
      'назначитьсчет найтиссылки началопериодаби началостандартногоинтервала начгода начквартала начмесяца ' +
      'начнедели номерднягода номерднянедели номернеделигода обработкаожидания основнойжурналрасчетов ' +
      'основнойплансчетов основнойязык очиститьокносообщений периодстр получитьвремята получитьдатута ' +
      'получитьдокументта получитьзначенияотбора получитьпозициюта получитьпустоезначение получитьта ' +
      'префиксавтонумерации пропись пустоезначение разм разобратьпозициюдокумента рассчитатьрегистрына ' +
      'рассчитатьрегистрыпо симв создатьобъект статусвозврата стрколичествострок сформироватьпозициюдокумента ' +
      'счетпокоду текущеевремя типзначения типзначениястр установитьтана установитьтапо фиксшаблон шаблон ';
      
      // v8 методы глобального контекста ==> built_in
      var v8_global_context_methods =
      'acos asin atan base64значение base64строка cos exp log log10 pow sin sqrt tan xmlзначение xmlстрока ' +
      'xmlтип xmlтипзнч активноеокно безопасныйрежим безопасныйрежимразделенияданных булево ввестидату ввестизначение ' +
      'ввестистроку ввестичисло возможностьчтенияxml вопрос восстановитьзначение врег выгрузитьжурналрегистрации ' +
      'выполнитьобработкуоповещения выполнитьпроверкуправдоступа вычислить год данныеформывзначение дата день деньгода ' +
      'деньнедели добавитьмесяц заблокироватьданныедляредактирования заблокироватьработупользователя завершитьработусистемы ' +
      'загрузитьвнешнююкомпоненту закрытьсправку записатьjson записатьxml записатьдатуjson записьжурналарегистрации ' +
      'заполнитьзначениясвойств запроситьразрешениепользователя запуститьприложение запуститьсистему зафиксироватьтранзакцию ' +
      'значениевданныеформы значениевстрокувнутр значениевфайл значениезаполнено значениеизстрокивнутр значениеизфайла ' +
      'изxmlтипа импортмоделиxdto имякомпьютера имяпользователя инициализироватьпредопределенныеданные информацияобошибке ' +
      'каталогбиблиотекимобильногоустройства каталогвременныхфайлов каталогдокументов каталогпрограммы кодироватьстроку ' +
      'кодлокализацииинформационнойбазы кодсимвола командасистемы конецгода конецдня конецквартала конецмесяца конецминуты ' +
      'конецнедели конецчаса конфигурациябазыданныхизмененадинамически конфигурацияизменена копироватьданныеформы ' +
      'копироватьфайл краткоепредставлениеошибки лев макс местноевремя месяц мин минута монопольныйрежим найти ' +
      'найтинедопустимыесимволыxml найтиокнопонавигационнойссылке найтипомеченныенаудаление найтипоссылкам найтифайлы ' +
      'началогода началодня началоквартала началомесяца началоминуты началонедели началочаса начатьзапросразрешенияпользователя ' +
      'начатьзапускприложения начатькопированиефайла начатьперемещениефайла начатьподключениевнешнейкомпоненты ' +
      'начатьподключениерасширенияработыскриптографией начатьподключениерасширенияработысфайлами начатьпоискфайлов ' +
      'начатьполучениекаталогавременныхфайлов начатьполучениекаталогадокументов начатьполучениерабочегокаталогаданныхпользователя ' +
      'начатьполучениефайлов начатьпомещениефайла начатьпомещениефайлов начатьсозданиедвоичныхданныхизфайла начатьсозданиекаталога ' +
      'начатьтранзакцию начатьудалениефайлов начатьустановкувнешнейкомпоненты начатьустановкурасширенияработыскриптографией ' +
      'начатьустановкурасширенияработысфайлами неделягода необходимостьзавершениясоединения номерсеансаинформационнойбазы ' +
      'номерсоединенияинформационнойбазы нрег нстр обновитьинтерфейс обновитьнумерациюобъектов обновитьповторноиспользуемыезначения ' +
      'обработкапрерыванияпользователя объединитьфайлы окр описаниеошибки оповестить оповеститьобизменении ' +
      'отключитьобработчикзапросанастроекклиенталицензирования отключитьобработчикожидания отключитьобработчикоповещения ' +
      'открытьзначение открытьиндекссправки открытьсодержаниесправки открытьсправку открытьформу открытьформумодально ' +
      'отменитьтранзакцию очиститьжурналрегистрации очиститьнастройкипользователя очиститьсообщения параметрыдоступа ' +
      'перейтипонавигационнойссылке переместитьфайл подключитьвнешнююкомпоненту ' +
      'подключитьобработчикзапросанастроекклиенталицензирования подключитьобработчикожидания подключитьобработчикоповещения ' +
      'подключитьрасширениеработыскриптографией подключитьрасширениеработысфайлами подробноепредставлениеошибки ' +
      'показатьвводдаты показатьвводзначения показатьвводстроки показатьвводчисла показатьвопрос показатьзначение ' +
      'показатьинформациюобошибке показатьнакарте показатьоповещениепользователя показатьпредупреждение полноеимяпользователя ' +
      'получитьcomобъект получитьxmlтип получитьадреспоместоположению получитьблокировкусеансов получитьвремязавершенияспящегосеанса ' +
      'получитьвремязасыпанияпассивногосеанса получитьвремяожиданияблокировкиданных получитьданныевыбора ' +
      'получитьдополнительныйпараметрклиенталицензирования получитьдопустимыекодылокализации получитьдопустимыечасовыепояса ' +
      'получитьзаголовокклиентскогоприложения получитьзаголовоксистемы получитьзначенияотборажурналарегистрации ' +
      'получитьидентификаторконфигурации получитьизвременногохранилища получитьимявременногофайла ' +
      'получитьимяклиенталицензирования получитьинформациюэкрановклиента получитьиспользованиежурналарегистрации ' +
      'получитьиспользованиесобытияжурналарегистрации получитькраткийзаголовокприложения получитьмакетоформления ' +
      'получитьмаскувсефайлы получитьмаскувсефайлыклиента получитьмаскувсефайлысервера получитьместоположениепоадресу ' +
      'получитьминимальнуюдлинупаролейпользователей получитьнавигационнуюссылку получитьнавигационнуюссылкуинформационнойбазы ' +
      'получитьобновлениеконфигурациибазыданных получитьобновлениепредопределенныхданныхинформационнойбазы получитьобщиймакет ' +
      'получитьобщуюформу получитьокна получитьоперативнуюотметкувремени получитьотключениебезопасногорежима ' +
      'получитьпараметрыфункциональныхопцийинтерфейса получитьполноеимяпредопределенногозначения ' +
      'получитьпредставлениянавигационныхссылок получитьпроверкусложностипаролейпользователей получитьразделительпути ' +
      'получитьразделительпутиклиента получитьразделительпутисервера получитьсеансыинформационнойбазы ' +
      'получитьскоростьклиентскогосоединения получитьсоединенияинформационнойбазы получитьсообщенияпользователю ' +
      'получитьсоответствиеобъектаиформы получитьсоставстандартногоинтерфейсаodata получитьструктурухранениябазыданных ' +
      'получитьтекущийсеансинформационнойбазы получитьфайл получитьфайлы получитьформу получитьфункциональнуюопцию ' +
      'получитьфункциональнуюопциюинтерфейса получитьчасовойпоясинформационнойбазы пользователиос поместитьвовременноехранилище ' +
      'поместитьфайл поместитьфайлы прав праводоступа предопределенноезначение представлениекодалокализации представлениепериода ' +
      'представлениеправа представлениеприложения представлениесобытияжурналарегистрации представлениечасовогопояса предупреждение ' +
      'прекратитьработусистемы привилегированныйрежим продолжитьвызов прочитатьjson прочитатьxml прочитатьдатуjson пустаястрока ' +
      'рабочийкаталогданныхпользователя разблокироватьданныедляредактирования разделитьфайл разорватьсоединениесвнешнимисточникомданных ' +
      'раскодироватьстроку рольдоступна секунда сигнал символ скопироватьжурналрегистрации смещениелетнеговремени ' +
      'смещениестандартноговремени соединитьбуферыдвоичныхданных создатькаталог создатьфабрикуxdto сокрл сокрлп сокрп сообщить ' +
      'состояние сохранитьзначение сохранитьнастройкипользователя сред стрдлина стрзаканчиваетсяна стрзаменить стрнайти стрначинаетсяс ' +
      'строка строкасоединенияинформационнойбазы стрполучитьстроку стрразделить стрсоединить стрсравнить стрчисловхождений '+
      'стрчислострок стршаблон текущаядата текущаядатасеанса текущаяуниверсальнаядата текущаяуниверсальнаядатавмиллисекундах ' +
      'текущийвариантинтерфейсаклиентскогоприложения текущийвариантосновногошрифтаклиентскогоприложения текущийкодлокализации ' +
      'текущийрежимзапуска текущийязык текущийязыксистемы тип типзнч транзакцияактивна трег удалитьданныеинформационнойбазы ' +
      'удалитьизвременногохранилища удалитьобъекты удалитьфайлы универсальноевремя установитьбезопасныйрежим ' +
      'установитьбезопасныйрежимразделенияданных установитьблокировкусеансов установитьвнешнююкомпоненту ' +
      'установитьвремязавершенияспящегосеанса установитьвремязасыпанияпассивногосеанса установитьвремяожиданияблокировкиданных ' +
      'установитьзаголовокклиентскогоприложения установитьзаголовоксистемы установитьиспользованиежурналарегистрации ' +
      'установитьиспользованиесобытияжурналарегистрации установитькраткийзаголовокприложения ' +
      'установитьминимальнуюдлинупаролейпользователей установитьмонопольныйрежим установитьнастройкиклиенталицензирования ' +
      'установитьобновлениепредопределенныхданныхинформационнойбазы установитьотключениебезопасногорежима ' +
      'установитьпараметрыфункциональныхопцийинтерфейса установитьпривилегированныйрежим ' +
      'установитьпроверкусложностипаролейпользователей установитьрасширениеработыскриптографией ' +
      'установитьрасширениеработысфайлами установитьсоединениесвнешнимисточникомданных установитьсоответствиеобъектаиформы ' +
      'установитьсоставстандартногоинтерфейсаodata установитьчасовойпоясинформационнойбазы установитьчасовойпояссеанса ' +
      'формат цел час часовойпояс часовойпояссеанса число числопрописью этоадресвременногохранилища ';
    
      // v8 свойства глобального контекста ==> built_in
      var v8_global_context_property =
      'wsссылки библиотекакартинок библиотекамакетовоформлениякомпоновкиданных библиотекастилей бизнеспроцессы ' +
      'внешниеисточникиданных внешниеобработки внешниеотчеты встроенныепокупки главныйинтерфейс главныйстиль ' +
      'документы доставляемыеуведомления журналыдокументов задачи информацияобинтернетсоединении использованиерабочейдаты ' +
      'историяработыпользователя константы критерииотбора метаданные обработки отображениерекламы отправкадоставляемыхуведомлений ' +
      'отчеты панельзадачос параметрзапуска параметрысеанса перечисления планывидоврасчета планывидовхарактеристик ' +
      'планыобмена планысчетов полнотекстовыйпоиск пользователиинформационнойбазы последовательности проверкавстроенныхпокупок ' +
      'рабочаядата расширенияконфигурации регистрыбухгалтерии регистрынакопления регистрырасчета регистрысведений ' +
      'регламентныезадания сериализаторxdto справочники средствагеопозиционирования средствакриптографии средствамультимедиа ' +
      'средстваотображениярекламы средствапочты средствателефонии фабрикаxdto файловыепотоки фоновыезадания хранилищанастроек ' +
      'хранилищевариантовотчетов хранилищенастроекданныхформ хранилищеобщихнастроек хранилищепользовательскихнастроекдинамическихсписков ' +
      'хранилищепользовательскихнастроекотчетов хранилищесистемныхнастроек ';
    
      // built_in : встроенные или библиотечные объекты (константы, классы, функции)
      var BUILTIN =
      v7_system_constants +
      v7_global_context_methods + v8_global_context_methods +
      v8_global_context_property;
      
      // v8 системные наборы значений ==> class
      var v8_system_sets_of_values =
      'webцвета windowsцвета windowsшрифты библиотекакартинок рамкистиля символы цветастиля шрифтыстиля ';
    
      // v8 системные перечисления - интерфейсные ==> class
      var v8_system_enums_interface =
      'автоматическоесохранениеданныхформывнастройках автонумерациявформе автораздвижениесерий ' +
      'анимациядиаграммы вариантвыравниванияэлементовизаголовков вариантуправлениявысотойтаблицы ' +
      'вертикальнаяпрокруткаформы вертикальноеположение вертикальноеположениеэлемента видгруппыформы ' +
      'виддекорацииформы виддополненияэлементаформы видизмененияданных видкнопкиформы видпереключателя ' +
      'видподписейкдиаграмме видполяформы видфлажка влияниеразмеранапузырекдиаграммы горизонтальноеположение ' +
      'горизонтальноеположениеэлемента группировкаколонок группировкаподчиненныхэлементовформы ' +
      'группыиэлементы действиеперетаскивания дополнительныйрежимотображения допустимыедействияперетаскивания ' +
      'интервалмеждуэлементамиформы использованиевывода использованиеполосыпрокрутки ' +
      'используемоезначениеточкибиржевойдиаграммы историявыборапривводе источникзначенийоситочекдиаграммы ' +
      'источникзначенияразмерапузырькадиаграммы категориягруппыкоманд максимумсерий начальноеотображениедерева ' +
      'начальноеотображениесписка обновлениетекстаредактирования ориентациядендрограммы ориентациядиаграммы ' +
      'ориентацияметокдиаграммы ориентацияметоксводнойдиаграммы ориентацияэлементаформы отображениевдиаграмме ' +
      'отображениевлегендедиаграммы отображениегруппыкнопок отображениезаголовкашкалыдиаграммы ' +
      'отображениезначенийсводнойдиаграммы отображениезначенияизмерительнойдиаграммы ' +
      'отображениеинтерваладиаграммыганта отображениекнопки отображениекнопкивыбора отображениеобсужденийформы ' +
      'отображениеобычнойгруппы отображениеотрицательныхзначенийпузырьковойдиаграммы отображениепанелипоиска ' +
      'отображениеподсказки отображениепредупрежденияприредактировании отображениеразметкиполосырегулирования ' +
      'отображениестраницформы отображениетаблицы отображениетекстазначениядиаграммыганта ' +
      'отображениеуправленияобычнойгруппы отображениефигурыкнопки палитрацветовдиаграммы поведениеобычнойгруппы ' +
      'поддержкамасштабадендрограммы поддержкамасштабадиаграммыганта поддержкамасштабасводнойдиаграммы ' +
      'поисквтаблицепривводе положениезаголовкаэлементаформы положениекартинкикнопкиформы ' +
      'положениекартинкиэлементаграфическойсхемы положениекоманднойпанелиформы положениекоманднойпанелиэлементаформы ' +
      'положениеопорнойточкиотрисовки положениеподписейкдиаграмме положениеподписейшкалызначенийизмерительнойдиаграммы ' +
      'положениесостоянияпросмотра положениестрокипоиска положениетекстасоединительнойлинии положениеуправленияпоиском ' +
      'положениешкалывремени порядокотображенияточекгоризонтальнойгистограммы порядоксерийвлегендедиаграммы ' +
      'размеркартинки расположениезаголовкашкалыдиаграммы растягиваниеповертикалидиаграммыганта ' +
      'режимавтоотображениясостояния режимвводастроктаблицы режимвыборанезаполненного режимвыделениядаты ' +
      'режимвыделениястрокитаблицы режимвыделениятаблицы режимизмененияразмера режимизменениясвязанногозначения ' +
      'режимиспользованиядиалогапечати режимиспользованияпараметракоманды режиммасштабированияпросмотра ' +
      'режимосновногоокнаклиентскогоприложения режимоткрытияокнаформы режимотображениявыделения ' +
      'режимотображениягеографическойсхемы режимотображениязначенийсерии режимотрисовкисеткиграфическойсхемы ' +
      'режимполупрозрачностидиаграммы режимпробеловдиаграммы режимразмещениянастранице режимредактированияколонки ' +
      'режимсглаживаниядиаграммы режимсглаживанияиндикатора режимсписказадач сквозноевыравнивание ' +
      'сохранениеданныхформывнастройках способзаполнениятекстазаголовкашкалыдиаграммы ' +
      'способопределенияограничивающегозначениядиаграммы стандартнаягруппакоманд стандартноеоформление ' +
      'статусоповещенияпользователя стильстрелки типаппроксимациилиниитрендадиаграммы типдиаграммы ' +
      'типединицышкалывремени типимпортасерийслоягеографическойсхемы типлиниигеографическойсхемы типлиниидиаграммы ' +
      'типмаркерагеографическойсхемы типмаркерадиаграммы типобластиоформления ' +
      'типорганизацииисточникаданныхгеографическойсхемы типотображениясериислоягеографическойсхемы ' +
      'типотображенияточечногообъектагеографическойсхемы типотображенияшкалыэлементалегендыгеографическойсхемы ' +
      'типпоискаобъектовгеографическойсхемы типпроекциигеографическойсхемы типразмещенияизмерений ' +
      'типразмещенияреквизитовизмерений типрамкиэлементауправления типсводнойдиаграммы ' +
      'типсвязидиаграммыганта типсоединениязначенийпосериямдиаграммы типсоединенияточекдиаграммы ' +
      'типсоединительнойлинии типстороныэлементаграфическойсхемы типформыотчета типшкалырадарнойдиаграммы ' +
      'факторлиниитрендадиаграммы фигуракнопки фигурыграфическойсхемы фиксациявтаблице форматдняшкалывремени ' +
      'форматкартинки ширинаподчиненныхэлементовформы ';
    
      // v8 системные перечисления - свойства прикладных объектов ==> class
      var v8_system_enums_objects_properties =
      'виддвижениябухгалтерии виддвижениянакопления видпериодарегистрарасчета видсчета видточкимаршрутабизнеспроцесса ' +
      'использованиеагрегатарегистранакопления использованиегруппиэлементов использованиережимапроведения ' +
      'использованиесреза периодичностьагрегатарегистранакопления режимавтовремя режимзаписидокумента режимпроведениядокумента ';
    
      // v8 системные перечисления - планы обмена ==> class
      var v8_system_enums_exchange_plans =
      'авторегистрацияизменений допустимыйномерсообщения отправкаэлементаданных получениеэлементаданных ';
    
      // v8 системные перечисления - табличный документ ==> class
      var v8_system_enums_tabular_document =
      'использованиерасшифровкитабличногодокумента ориентациястраницы положениеитоговколоноксводнойтаблицы ' +
      'положениеитоговстроксводнойтаблицы положениетекстаотносительнокартинки расположениезаголовкагруппировкитабличногодокумента ' +
      'способчтениязначенийтабличногодокумента типдвустороннейпечати типзаполненияобластитабличногодокумента ' +
      'типкурсоровтабличногодокумента типлиниирисункатабличногодокумента типлинииячейкитабличногодокумента ' +
      'типнаправленияпереходатабличногодокумента типотображениявыделениятабличногодокумента типотображениялинийсводнойтаблицы ' +
      'типразмещениятекстатабличногодокумента типрисункатабличногодокумента типсмещениятабличногодокумента ' +
      'типузоратабличногодокумента типфайлатабличногодокумента точностьпечати чередованиерасположениястраниц ';
    
      // v8 системные перечисления - планировщик ==> class
      var v8_system_enums_sheduler =
      'отображениевремениэлементовпланировщика ';
    
      // v8 системные перечисления - форматированный документ ==> class
      var v8_system_enums_formatted_document =
      'типфайлаформатированногодокумента ';
    
      // v8 системные перечисления - запрос ==> class
      var v8_system_enums_query =
      'обходрезультатазапроса типзаписизапроса ';
    
      // v8 системные перечисления - построитель отчета ==> class
      var v8_system_enums_report_builder =
      'видзаполнениярасшифровкипостроителяотчета типдобавленияпредставлений типизмеренияпостроителяотчета типразмещенияитогов ';
    
      // v8 системные перечисления - работа с файлами ==> class
      var v8_system_enums_files =
      'доступкфайлу режимдиалогавыборафайла режимоткрытияфайла ';
    
      // v8 системные перечисления - построитель запроса ==> class
      var v8_system_enums_query_builder =
      'типизмеренияпостроителязапроса ';
    
      // v8 системные перечисления - анализ данных ==> class
      var v8_system_enums_data_analysis =
      'видданныханализа методкластеризации типединицыинтервалавременианализаданных типзаполнениятаблицырезультатаанализаданных ' +
      'типиспользованиячисловыхзначенийанализаданных типисточникаданныхпоискаассоциаций типколонкианализаданныхдереворешений ' +
      'типколонкианализаданныхкластеризация типколонкианализаданныхобщаястатистика типколонкианализаданныхпоискассоциаций ' +
      'типколонкианализаданныхпоискпоследовательностей типколонкимоделипрогноза типмерырасстоянияанализаданных ' +
      'типотсеченияправилассоциации типполяанализаданных типстандартизациианализаданных типупорядочиванияправилассоциациианализаданных ' +
      'типупорядочиванияшаблоновпоследовательностейанализаданных типупрощениядереварешений ';
    
      // v8 системные перечисления - xml, json, xs, dom, xdto, web-сервисы ==> class
      var v8_system_enums_xml_json_xs_dom_xdto_ws =
      'wsнаправлениепараметра вариантxpathxs вариантзаписидатыjson вариантпростоготипаxs видгруппымоделиxs видфасетаxdto ' +
      'действиепостроителяdom завершенностьпростоготипаxs завершенностьсоставноготипаxs завершенностьсхемыxs запрещенныеподстановкиxs ' +
      'исключениягруппподстановкиxs категорияиспользованияатрибутаxs категорияограниченияидентичностиxs категорияограниченияпространствименxs ' +
      'методнаследованияxs модельсодержимогоxs назначениетипаxml недопустимыеподстановкиxs обработкапробельныхсимволовxs обработкасодержимогоxs ' +
      'ограничениезначенияxs параметрыотбораузловdom переносстрокjson позициявдокументеdom пробельныесимволыxml типатрибутаxml типзначенияjson ' +
      'типканоническогоxml типкомпонентыxs типпроверкиxml типрезультатаdomxpath типузлаdom типузлаxml формаxml формапредставленияxs ' +
      'форматдатыjson экранированиесимволовjson ';
    
      // v8 системные перечисления - система компоновки данных ==> class
      var v8_system_enums_data_composition_system =
      'видсравнениякомпоновкиданных действиеобработкирасшифровкикомпоновкиданных направлениесортировкикомпоновкиданных ' +
      'расположениевложенныхэлементоврезультатакомпоновкиданных расположениеитоговкомпоновкиданных расположениегруппировкикомпоновкиданных ' +
      'расположениеполейгруппировкикомпоновкиданных расположениеполякомпоновкиданных расположениереквизитовкомпоновкиданных ' +
      'расположениересурсовкомпоновкиданных типбухгалтерскогоостаткакомпоновкиданных типвыводатекстакомпоновкиданных ' +
      'типгруппировкикомпоновкиданных типгруппыэлементовотборакомпоновкиданных типдополненияпериодакомпоновкиданных ' +
      'типзаголовкаполейкомпоновкиданных типмакетагруппировкикомпоновкиданных типмакетаобластикомпоновкиданных типостаткакомпоновкиданных ' +
      'типпериодакомпоновкиданных типразмещениятекстакомпоновкиданных типсвязинаборовданныхкомпоновкиданных типэлементарезультатакомпоновкиданных ' +
      'расположениелегендыдиаграммыкомпоновкиданных типпримененияотборакомпоновкиданных режимотображенияэлементанастройкикомпоновкиданных ' +
      'режимотображениянастроеккомпоновкиданных состояниеэлементанастройкикомпоновкиданных способвосстановлениянастроеккомпоновкиданных ' +
      'режимкомпоновкирезультата использованиепараметракомпоновкиданных автопозицияресурсовкомпоновкиданных '+
      'вариантиспользованиягруппировкикомпоновкиданных расположениересурсоввдиаграммекомпоновкиданных фиксациякомпоновкиданных ' +
      'использованиеусловногооформлениякомпоновкиданных ';
    
      // v8 системные перечисления - почта ==> class
      var v8_system_enums_email =
      'важностьинтернетпочтовогосообщения обработкатекстаинтернетпочтовогосообщения способкодированияинтернетпочтовоговложения ' +
      'способкодированиянеasciiсимволовинтернетпочтовогосообщения типтекстапочтовогосообщения протоколинтернетпочты ' +
      'статусразборапочтовогосообщения ';
    
      // v8 системные перечисления - журнал регистрации ==> class
      var v8_system_enums_logbook =
      'режимтранзакциизаписижурналарегистрации статустранзакциизаписижурналарегистрации уровеньжурналарегистрации ';
    
      // v8 системные перечисления - криптография ==> class
      var v8_system_enums_cryptography =
      'расположениехранилищасертификатовкриптографии режимвключениясертификатовкриптографии режимпроверкисертификатакриптографии ' +
      'типхранилищасертификатовкриптографии ';
    
      // v8 системные перечисления - ZIP ==> class
      var v8_system_enums_zip =
      'кодировкаименфайловвzipфайле методсжатияzip методшифрованияzip режимвосстановленияпутейфайловzip режимобработкиподкаталоговzip ' +
      'режимсохраненияпутейzip уровеньсжатияzip ';
    
      // v8 системные перечисления - 
      // Блокировка данных, Фоновые задания, Автоматизированное тестирование,
      // Доставляемые уведомления, Встроенные покупки, Интернет, Работа с двоичными данными ==> class
      var v8_system_enums_other =
      'звуковоеоповещение направлениепереходакстроке позициявпотоке порядокбайтов режимблокировкиданных режимуправленияблокировкойданных ' +
      'сервисвстроенныхпокупок состояниефоновогозадания типподписчикадоставляемыхуведомлений уровеньиспользованиязащищенногосоединенияftp ';
    
      // v8 системные перечисления - схема запроса ==> class
      var v8_system_enums_request_schema =
      'направлениепорядкасхемызапроса типдополненияпериодамисхемызапроса типконтрольнойточкисхемызапроса типобъединениясхемызапроса ' +
      'типпараметрадоступнойтаблицысхемызапроса типсоединениясхемызапроса ';
    
      // v8 системные перечисления - свойства объектов метаданных ==> class
      var v8_system_enums_properties_of_metadata_objects =
      'httpметод автоиспользованиеобщегореквизита автопрефиксномеразадачи вариантвстроенногоязыка видиерархии видрегистранакопления ' +
      'видтаблицывнешнегоисточникаданных записьдвиженийприпроведении заполнениепоследовательностей индексирование ' +
      'использованиебазыпланавидоврасчета использованиебыстроговыбора использованиеобщегореквизита использованиеподчинения ' +
      'использованиеполнотекстовогопоиска использованиеразделяемыхданныхобщегореквизита использованиереквизита ' +
      'назначениеиспользованияприложения назначениерасширенияконфигурации направлениепередачи обновлениепредопределенныхданных ' +
      'оперативноепроведение основноепредставлениевидарасчета основноепредставлениевидахарактеристики основноепредставлениезадачи ' +
      'основноепредставлениепланаобмена основноепредставлениесправочника основноепредставлениесчета перемещениеграницыприпроведении ' +
      'периодичностьномерабизнеспроцесса периодичностьномерадокумента периодичностьрегистрарасчета периодичностьрегистрасведений ' +
      'повторноеиспользованиевозвращаемыхзначений полнотекстовыйпоискпривводепостроке принадлежностьобъекта проведение ' +
      'разделениеаутентификацииобщегореквизита разделениеданныхобщегореквизита разделениерасширенийконфигурацииобщегореквизита '+
      'режимавтонумерацииобъектов режимзаписирегистра режимиспользованиямодальности ' +
      'режимиспользованиясинхронныхвызововрасширенийплатформыивнешнихкомпонент режимповторногоиспользованиясеансов ' +
      'режимполученияданныхвыборапривводепостроке режимсовместимости режимсовместимостиинтерфейса ' +
      'режимуправленияблокировкойданныхпоумолчанию сериикодовпланавидовхарактеристик сериикодовпланасчетов ' +
      'сериикодовсправочника созданиепривводе способвыбора способпоискастрокипривводепостроке способредактирования ' +
      'типданныхтаблицывнешнегоисточникаданных типкодапланавидоврасчета типкодасправочника типмакета типномерабизнеспроцесса ' +
      'типномерадокумента типномеразадачи типформы удалениедвижений ';
    
      // v8 системные перечисления - разные ==> class
      var v8_system_enums_differents =
      'важностьпроблемыприменениярасширенияконфигурации вариантинтерфейсаклиентскогоприложения вариантмасштабаформклиентскогоприложения ' +
      'вариантосновногошрифтаклиентскогоприложения вариантстандартногопериода вариантстандартнойдатыначала видграницы видкартинки ' +
      'видотображенияполнотекстовогопоиска видрамки видсравнения видцвета видчисловогозначения видшрифта допустимаядлина допустимыйзнак ' +
      'использованиеbyteordermark использованиеметаданныхполнотекстовогопоиска источникрасширенийконфигурации клавиша кодвозвратадиалога ' +
      'кодировкаxbase кодировкатекста направлениепоиска направлениесортировки обновлениепредопределенныхданных обновлениеприизмененииданных ' +
      'отображениепанелиразделов проверказаполнения режимдиалогавопрос режимзапускаклиентскогоприложения режимокругления режимоткрытияформприложения ' +
      'режимполнотекстовогопоиска скоростьклиентскогосоединения состояниевнешнегоисточникаданных состояниеобновленияконфигурациибазыданных ' +
      'способвыборасертификатаwindows способкодированиястроки статуссообщения типвнешнейкомпоненты типплатформы типповеденияклавишиenter ' +
      'типэлементаинформацииовыполненииобновленияконфигурациибазыданных уровеньизоляциитранзакций хешфункция частидаты';
    
      // class: встроенные наборы значений, системные перечисления (содержат дочерние значения, обращения к которым через разыменование)
      var CLASS =
      v8_system_sets_of_values +
      v8_system_enums_interface +
      v8_system_enums_objects_properties +
      v8_system_enums_exchange_plans +
      v8_system_enums_tabular_document +
      v8_system_enums_sheduler +
      v8_system_enums_formatted_document +
      v8_system_enums_query +
      v8_system_enums_report_builder +
      v8_system_enums_files +
      v8_system_enums_query_builder +
      v8_system_enums_data_analysis +
      v8_system_enums_xml_json_xs_dom_xdto_ws +
      v8_system_enums_data_composition_system +
      v8_system_enums_email +
      v8_system_enums_logbook +
      v8_system_enums_cryptography +
      v8_system_enums_zip +
      v8_system_enums_other +
      v8_system_enums_request_schema +
      v8_system_enums_properties_of_metadata_objects +
      v8_system_enums_differents;
    
      // v8 общие объекты (у объектов есть конструктор, экземпляры создаются методом НОВЫЙ) ==> type
      var v8_shared_object =
      'comобъект ftpсоединение httpзапрос httpсервисответ httpсоединение wsопределения wsпрокси xbase анализданных аннотацияxs ' +
      'блокировкаданных буфердвоичныхданных включениеxs выражениекомпоновкиданных генераторслучайныхчисел географическаясхема ' +
      'географическиекоординаты графическаясхема группамоделиxs данныерасшифровкикомпоновкиданных двоичныеданные дендрограмма ' +
      'диаграмма диаграммаганта диалогвыборафайла диалогвыборацвета диалогвыборашрифта диалограсписаниярегламентногозадания ' +
      'диалогредактированиястандартногопериода диапазон документdom документhtml документацияxs доставляемоеуведомление ' +
      'записьdom записьfastinfoset записьhtml записьjson записьxml записьzipфайла записьданных записьтекста записьузловdom ' +
      'запрос защищенноесоединениеopenssl значенияполейрасшифровкикомпоновкиданных извлечениетекста импортxs интернетпочта ' +
      'интернетпочтовоесообщение интернетпочтовыйпрофиль интернетпрокси интернетсоединение информациядляприложенияxs ' +
      'использованиеатрибутаxs использованиесобытияжурналарегистрации источникдоступныхнастроеккомпоновкиданных ' +
      'итераторузловdom картинка квалификаторыдаты квалификаторыдвоичныхданных квалификаторыстроки квалификаторычисла ' +
      'компоновщикмакетакомпоновкиданных компоновщикнастроеккомпоновкиданных конструктормакетаоформлениякомпоновкиданных ' +
      'конструкторнастроеккомпоновкиданных конструкторформатнойстроки линия макеткомпоновкиданных макетобластикомпоновкиданных ' +
      'макетоформлениякомпоновкиданных маскаxs менеджеркриптографии наборсхемxml настройкикомпоновкиданных настройкисериализацииjson ' +
      'обработкакартинок обработкарасшифровкикомпоновкиданных обходдереваdom объявлениеатрибутаxs объявлениенотацииxs ' +
      'объявлениеэлементаxs описаниеиспользованиясобытиядоступжурналарегистрации ' +
      'описаниеиспользованиясобытияотказвдоступежурналарегистрации описаниеобработкирасшифровкикомпоновкиданных ' +
      'описаниепередаваемогофайла описаниетипов определениегруппыатрибутовxs определениегруппымоделиxs ' +
      'определениеограниченияидентичностиxs определениепростоготипаxs определениесоставноготипаxs определениетипадокументаdom ' +
      'определенияxpathxs отборкомпоновкиданных пакетотображаемыхдокументов параметрвыбора параметркомпоновкиданных ' +
      'параметрызаписиjson параметрызаписиxml параметрычтенияxml переопределениеxs планировщик полеанализаданных ' +
      'полекомпоновкиданных построительdom построительзапроса построительотчета построительотчетаанализаданных ' +
      'построительсхемxml поток потоквпамяти почта почтовоесообщение преобразованиеxsl преобразованиекканоническомуxml ' +
      'процессорвыводарезультатакомпоновкиданныхвколлекциюзначений процессорвыводарезультатакомпоновкиданныхвтабличныйдокумент ' +
      'процессоркомпоновкиданных разыменовательпространствименdom рамка расписаниерегламентногозадания расширенноеимяxml ' +
      'результатчтенияданных своднаядиаграмма связьпараметравыбора связьпотипу связьпотипукомпоновкиданных сериализаторxdto ' +
      'сертификатклиентаwindows сертификатклиентафайл сертификаткриптографии сертификатыудостоверяющихцентровwindows ' +
      'сертификатыудостоверяющихцентровфайл сжатиеданных системнаяинформация сообщениепользователю сочетаниеклавиш ' +
      'сравнениезначений стандартнаядатаначала стандартныйпериод схемаxml схемакомпоновкиданных табличныйдокумент ' +
      'текстовыйдокумент тестируемоеприложение типданныхxml уникальныйидентификатор фабрикаxdto файл файловыйпоток ' +
      'фасетдлиныxs фасетколичестваразрядовдробнойчастиxs фасетмаксимальноговключающегозначенияxs ' +
      'фасетмаксимальногоисключающегозначенияxs фасетмаксимальнойдлиныxs фасетминимальноговключающегозначенияxs ' +
      'фасетминимальногоисключающегозначенияxs фасетминимальнойдлиныxs фасетобразцаxs фасетобщегоколичестваразрядовxs ' +
      'фасетперечисленияxs фасетпробельныхсимволовxs фильтрузловdom форматированнаястрока форматированныйдокумент ' +
      'фрагментxs хешированиеданных хранилищезначения цвет чтениеfastinfoset чтениеhtml чтениеjson чтениеxml чтениеzipфайла ' +
      'чтениеданных чтениетекста чтениеузловdom шрифт элементрезультатакомпоновкиданных ';
    
      // v8 универсальные коллекции значений ==> type
      var v8_universal_collection =
      'comsafearray деревозначений массив соответствие списокзначений структура таблицазначений фиксированнаяструктура ' +
      'фиксированноесоответствие фиксированныймассив ';
    
      // type : встроенные типы
      var TYPE =
      v8_shared_object +
      v8_universal_collection;
    
      // literal : примитивные типы
      var LITERAL = 'null истина ложь неопределено';
      
      // number : числа
      var NUMBERS = hljs.inherit(hljs.NUMBER_MODE);
    
      // string : строки
      var STRINGS = {
        className: 'string',
        begin: '"|\\|', end: '"|$',
        contains: [{begin: '""'}]
      };
    
      // number : даты
      var DATE = {
        begin: "'", end: "'", excludeBegin: true, excludeEnd: true,
        contains: [
          {
            className: 'number',
            begin: '\\d{4}([\\.\\\\/:-]?\\d{2}){0,5}'
          }
        ]
      };
      
      // comment : комментарии
      var COMMENTS = hljs.inherit(hljs.C_LINE_COMMENT_MODE);
      
      // meta : инструкции препроцессора, директивы компиляции
      var META = {
        className: 'meta',
        lexemes: UNDERSCORE_IDENT_RE,
        begin: '#|&', end: '$',
        keywords: {'meta-keyword': KEYWORD + METAKEYWORD},
        contains: [
          COMMENTS
        ]
      };
      
      // symbol : метка goto
      var SYMBOL = {
        className: 'symbol',
        begin: '~', end: ';|:', excludeEnd: true
      };  
      
      // function : объявление процедур и функций
      var FUNCTION = {
        className: 'function',
        lexemes: UNDERSCORE_IDENT_RE,
        variants: [
          {begin: 'процедура|функция', end: '\\)', keywords: 'процедура функция'},
          {begin: 'конецпроцедуры|конецфункции', keywords: 'конецпроцедуры конецфункции'}
        ],
        contains: [
          {
            begin: '\\(', end: '\\)', endsParent : true,
            contains: [
              {
                className: 'params',
                lexemes: UNDERSCORE_IDENT_RE,
                begin: UNDERSCORE_IDENT_RE, end: ',', excludeEnd: true, endsWithParent: true,
                keywords: {
                  keyword: 'знач',
                  literal: LITERAL
                },
                contains: [
                  NUMBERS,
                  STRINGS,
                  DATE
                ]
              },
              COMMENTS
            ]
          },
          hljs.inherit(hljs.TITLE_MODE, {begin: UNDERSCORE_IDENT_RE})
        ]
      };
    
      return {
        case_insensitive: true,
        lexemes: UNDERSCORE_IDENT_RE,
        keywords: {
          keyword: KEYWORD,
          built_in: BUILTIN,
          class: CLASS,
          type: TYPE,
          literal: LITERAL
        },
        contains: [
          META,
          FUNCTION,
          COMMENTS,
          SYMBOL,
          NUMBERS,
          STRINGS,
          DATE
        ]  
      }
    };
    
    /***/ }),
    /* 403 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
        var regexes = {
            ruleDeclaration: "^[a-zA-Z][a-zA-Z0-9-]*",
            unexpectedChars: "[!@#$^&',?+~`|:]"
        };
    
        var keywords = [
            "ALPHA",
            "BIT",
            "CHAR",
            "CR",
            "CRLF",
            "CTL",
            "DIGIT",
            "DQUOTE",
            "HEXDIG",
            "HTAB",
            "LF",
            "LWSP",
            "OCTET",
            "SP",
            "VCHAR",
            "WSP"
        ];
    
        var commentMode = hljs.COMMENT(";", "$");
    
        var terminalBinaryMode = {
            className: "symbol",
            begin: /%b[0-1]+(-[0-1]+|(\.[0-1]+)+){0,1}/
        };
    
        var terminalDecimalMode = {
            className: "symbol",
            begin: /%d[0-9]+(-[0-9]+|(\.[0-9]+)+){0,1}/
        };
    
        var terminalHexadecimalMode = {
            className: "symbol",
            begin: /%x[0-9A-F]+(-[0-9A-F]+|(\.[0-9A-F]+)+){0,1}/,
        };
    
        var caseSensitivityIndicatorMode = {
            className: "symbol",
            begin: /%[si]/
        };
    
        var ruleDeclarationMode = {
            begin: regexes.ruleDeclaration + '\\s*=',
            returnBegin: true,
            end: /=/,
            relevance: 0,
            contains: [{className: "attribute", begin: regexes.ruleDeclaration}]
        };
    
        return {
          illegal: regexes.unexpectedChars,
          keywords: keywords.join(" "),
          contains: [
              ruleDeclarationMode,
              commentMode,
              terminalBinaryMode,
              terminalDecimalMode,
              terminalHexadecimalMode,
              caseSensitivityIndicatorMode,
              hljs.QUOTE_STRING_MODE,
              hljs.NUMBER_MODE
          ]
        };
    };
    
    /***/ }),
    /* 404 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        contains: [
          // IP
          {
            className: 'number',
            begin: '\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(:\\d{1,5})?\\b'
          },
          // Other numbers
          {
            className: 'number',
            begin: '\\b\\d+\\b',
            relevance: 0
          },
          // Requests
          {
            className: 'string',
            begin: '"(GET|POST|HEAD|PUT|DELETE|CONNECT|OPTIONS|PATCH|TRACE)', end: '"',
            keywords: 'GET POST HEAD PUT DELETE CONNECT OPTIONS PATCH TRACE',
            illegal: '\\n',
            relevance: 10
          },
          // Dates
          {
            className: 'string',
            begin: /\[/, end: /\]/,
            illegal: '\\n'
          },
          // Strings
          {
            className: 'string',
            begin: '"', end: '"',
            illegal: '\\n'
          }
        ]
      };
    };
    
    /***/ }),
    /* 405 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var IDENT_RE = '[a-zA-Z_$][a-zA-Z0-9_$]*';
      var IDENT_FUNC_RETURN_TYPE_RE = '([*]|[a-zA-Z_$][a-zA-Z0-9_$]*)';
    
      var AS3_REST_ARG_MODE = {
        className: 'rest_arg',
        begin: '[.]{3}', end: IDENT_RE,
        relevance: 10
      };
    
      return {
        aliases: ['as'],
        keywords: {
          keyword: 'as break case catch class const continue default delete do dynamic each ' +
            'else extends final finally for function get if implements import in include ' +
            'instanceof interface internal is namespace native new override package private ' +
            'protected public return set static super switch this throw try typeof use var void ' +
            'while with',
          literal: 'true false null undefined'
        },
        contains: [
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE,
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          hljs.C_NUMBER_MODE,
          {
            className: 'class',
            beginKeywords: 'package', end: '{',
            contains: [hljs.TITLE_MODE]
          },
          {
            className: 'class',
            beginKeywords: 'class interface', end: '{', excludeEnd: true,
            contains: [
              {
                beginKeywords: 'extends implements'
              },
              hljs.TITLE_MODE
            ]
          },
          {
            className: 'meta',
            beginKeywords: 'import include', end: ';',
            keywords: {'meta-keyword': 'import include'}
          },
          {
            className: 'function',
            beginKeywords: 'function', end: '[{;]', excludeEnd: true,
            illegal: '\\S',
            contains: [
              hljs.TITLE_MODE,
              {
                className: 'params',
                begin: '\\(', end: '\\)',
                contains: [
                  hljs.APOS_STRING_MODE,
                  hljs.QUOTE_STRING_MODE,
                  hljs.C_LINE_COMMENT_MODE,
                  hljs.C_BLOCK_COMMENT_MODE,
                  AS3_REST_ARG_MODE
                ]
              },
              {
                begin: ':\\s*' + IDENT_FUNC_RETURN_TYPE_RE
              }
            ]
          },
          hljs.METHOD_GUARD
        ],
        illegal: /#/
      };
    };
    
    /***/ }),
    /* 406 */
    /***/ (function(module, exports) {
    
    module.exports = // We try to support full Ada2012
    //
    // We highlight all appearances of types, keywords, literals (string, char, number, bool)
    // and titles (user defined function/procedure/package)
    // CSS classes are set accordingly
    //
    // Languages causing problems for language detection:
    // xml (broken by Foo : Bar type), elm (broken by Foo : Bar type), vbscript-html (broken by body keyword)
    // sql (ada default.txt has a lot of sql keywords)
    
    function(hljs) {
        // Regular expression for Ada numeric literals.
        // stolen form the VHDL highlighter
    
        // Decimal literal:
        var INTEGER_RE = '\\d(_|\\d)*';
        var EXPONENT_RE = '[eE][-+]?' + INTEGER_RE;
        var DECIMAL_LITERAL_RE = INTEGER_RE + '(\\.' + INTEGER_RE + ')?' + '(' + EXPONENT_RE + ')?';
    
        // Based literal:
        var BASED_INTEGER_RE = '\\w+';
        var BASED_LITERAL_RE = INTEGER_RE + '#' + BASED_INTEGER_RE + '(\\.' + BASED_INTEGER_RE + ')?' + '#' + '(' + EXPONENT_RE + ')?';
    
        var NUMBER_RE = '\\b(' + BASED_LITERAL_RE + '|' + DECIMAL_LITERAL_RE + ')';
    
        // Identifier regex
        var ID_REGEX = '[A-Za-z](_?[A-Za-z0-9.])*';
    
        // bad chars, only allowed in literals
        var BAD_CHARS = '[]{}%#\'\"'
    
        // Ada doesn't have block comments, only line comments
        var COMMENTS = hljs.COMMENT('--', '$');
    
        // variable declarations of the form
        // Foo : Bar := Baz;
        // where only Bar will be highlighted
        var VAR_DECLS = {
            // TODO: These spaces are not required by the Ada syntax
            // however, I have yet to see handwritten Ada code where
            // someone does not put spaces around :
            begin: '\\s+:\\s+', end: '\\s*(:=|;|\\)|=>|$)',
            // endsWithParent: true,
            // returnBegin: true,
            illegal: BAD_CHARS,
            contains: [
                {
                    // workaround to avoid highlighting
                    // named loops and declare blocks
                    beginKeywords: 'loop for declare others',
                    endsParent: true,
                },
                {
                    // properly highlight all modifiers
                    className: 'keyword',
                    beginKeywords: 'not null constant access function procedure in out aliased exception'
                },
                {
                    className: 'type',
                    begin: ID_REGEX,
                    endsParent: true,
                    relevance: 0,
                }
            ]
        };
    
        return {
            case_insensitive: true,
            keywords: {
                keyword:
                    'abort else new return abs elsif not reverse abstract end ' +
                    'accept entry select access exception of separate aliased exit or some ' +
                    'all others subtype and for out synchronized array function overriding ' +
                    'at tagged generic package task begin goto pragma terminate ' +
                    'body private then if procedure type case in protected constant interface ' +
                    'is raise use declare range delay limited record when delta loop rem while ' +
                    'digits renames with do mod requeue xor',
                literal:
                    'True False',
            },
            contains: [
                COMMENTS,
                // strings "foobar"
                {
                    className: 'string',
                    begin: /"/, end: /"/,
                    contains: [{begin: /""/, relevance: 0}]
                },
                // characters ''
                {
                    // character literals always contain one char
                    className: 'string',
                    begin: /'.'/
                },
                {
                    // number literals
                    className: 'number',
                    begin: NUMBER_RE,
                    relevance: 0
                },
                {
                    // Attributes
                    className: 'symbol',
                    begin: "'" + ID_REGEX,
                },
                {
                    // package definition, maybe inside generic
                    className: 'title',
                    begin: '(\\bwith\\s+)?(\\bprivate\\s+)?\\bpackage\\s+(\\bbody\\s+)?', end: '(is|$)',
                    keywords: 'package body',
                    excludeBegin: true,
                    excludeEnd: true,
                    illegal: BAD_CHARS
                },
                {
                    // function/procedure declaration/definition
                    // maybe inside generic
                    begin: '(\\b(with|overriding)\\s+)?\\b(function|procedure)\\s+', end: '(\\bis|\\bwith|\\brenames|\\)\\s*;)',
                    keywords: 'overriding function procedure with is renames return',
                    // we need to re-match the 'function' keyword, so that
                    // the title mode below matches only exactly once
                    returnBegin: true,
                    contains:
                    [
                        COMMENTS,
                        {
                            // name of the function/procedure
                            className: 'title',
                            begin: '(\\bwith\\s+)?\\b(function|procedure)\\s+',
                            end: '(\\(|\\s+|$)',
                            excludeBegin: true,
                            excludeEnd: true,
                            illegal: BAD_CHARS
                        },
                        // 'self'
                        // // parameter types
                        VAR_DECLS,
                        {
                            // return type
                            className: 'type',
                            begin: '\\breturn\\s+', end: '(\\s+|;|$)',
                            keywords: 'return',
                            excludeBegin: true,
                            excludeEnd: true,
                            // we are done with functions
                            endsParent: true,
                            illegal: BAD_CHARS
    
                        },
                    ]
                },
                {
                    // new type declarations
                    // maybe inside generic
                    className: 'type',
                    begin: '\\b(sub)?type\\s+', end: '\\s+',
                    keywords: 'type',
                    excludeBegin: true,
                    illegal: BAD_CHARS
                },
    
                // see comment above the definition
                VAR_DECLS,
    
                // no markup
                // relevance boosters for small snippets
                // {begin: '\\s*=>\\s*'},
                // {begin: '\\s*:=\\s*'},
                // {begin: '\\s+:=\\s+'},
            ]
        };
    };
    
    /***/ }),
    /* 407 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var NUMBER = {className: 'number', begin: '[\\$%]\\d+'};
      return {
        aliases: ['apacheconf'],
        case_insensitive: true,
        contains: [
          hljs.HASH_COMMENT_MODE,
          {className: 'section', begin: '</?', end: '>'},
          {
            className: 'attribute',
            begin: /\w+/,
            relevance: 0,
            // keywords aren’t needed for highlighting per se, they only boost relevance
            // for a very generally defined mode (starts with a word, ends with line-end
            keywords: {
              nomarkup:
                'order deny allow setenv rewriterule rewriteengine rewritecond documentroot ' +
                'sethandler errordocument loadmodule options header listen serverroot ' +
                'servername'
            },
            starts: {
              end: /$/,
              relevance: 0,
              keywords: {
                literal: 'on off all'
              },
              contains: [
                {
                  className: 'meta',
                  begin: '\\s\\[', end: '\\]$'
                },
                {
                  className: 'variable',
                  begin: '[\\$%]\\{', end: '\\}',
                  contains: ['self', NUMBER]
                },
                NUMBER,
                hljs.QUOTE_STRING_MODE
              ]
            }
          }
        ],
        illegal: /\S/
      };
    };
    
    /***/ }),
    /* 408 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: ''});
      var PARAMS = {
        className: 'params',
        begin: '\\(', end: '\\)',
        contains: ['self', hljs.C_NUMBER_MODE, STRING]
      };
      var COMMENT_MODE_1 = hljs.COMMENT('--', '$');
      var COMMENT_MODE_2 = hljs.COMMENT(
        '\\(\\*',
        '\\*\\)',
        {
          contains: ['self', COMMENT_MODE_1] //allow nesting
        }
      );
      var COMMENTS = [
        COMMENT_MODE_1,
        COMMENT_MODE_2,
        hljs.HASH_COMMENT_MODE
      ];
    
      return {
        aliases: ['osascript'],
        keywords: {
          keyword:
            'about above after against and around as at back before beginning ' +
            'behind below beneath beside between but by considering ' +
            'contain contains continue copy div does eighth else end equal ' +
            'equals error every exit fifth first for fourth from front ' +
            'get given global if ignoring in into is it its last local me ' +
            'middle mod my ninth not of on onto or over prop property put ref ' +
            'reference repeat returning script second set seventh since ' +
            'sixth some tell tenth that the|0 then third through thru ' +
            'timeout times to transaction try until where while whose with ' +
            'without',
          literal:
            'AppleScript false linefeed return pi quote result space tab true',
          built_in:
            'alias application boolean class constant date file integer list ' +
            'number real record string text ' +
            'activate beep count delay launch log offset read round ' +
            'run say summarize write ' +
            'character characters contents day frontmost id item length ' +
            'month name paragraph paragraphs rest reverse running time version ' +
            'weekday word words year'
        },
        contains: [
          STRING,
          hljs.C_NUMBER_MODE,
          {
            className: 'built_in',
            begin:
              '\\b(clipboard info|the clipboard|info for|list (disks|folder)|' +
              'mount volume|path to|(close|open for) access|(get|set) eof|' +
              'current date|do shell script|get volume settings|random number|' +
              'set volume|system attribute|system info|time to GMT|' +
              '(load|run|store) script|scripting components|' +
              'ASCII (character|number)|localized string|' +
              'choose (application|color|file|file name|' +
              'folder|from list|remote application|URL)|' +
              'display (alert|dialog))\\b|^\\s*return\\b'
          },
          {
            className: 'literal',
            begin:
              '\\b(text item delimiters|current application|missing value)\\b'
          },
          {
            className: 'keyword',
            begin:
              '\\b(apart from|aside from|instead of|out of|greater than|' +
              "isn't|(doesn't|does not) (equal|come before|come after|contain)|" +
              '(greater|less) than( or equal)?|(starts?|ends|begins?) with|' +
              'contained by|comes (before|after)|a (ref|reference)|POSIX file|' +
              'POSIX path|(date|time) string|quoted form)\\b'
          },
          {
            beginKeywords: 'on',
            illegal: '[${=;\\n]',
            contains: [hljs.UNDERSCORE_TITLE_MODE, PARAMS]
          }
        ].concat(COMMENTS),
        illegal: '//|->|=>|\\[\\['
      };
    };
    
    /***/ }),
    /* 409 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var CPP_PRIMITIVE_TYPES = {
        className: 'keyword',
        begin: '\\b[a-z\\d_]*_t\\b'
      };
    
      var STRINGS = {
        className: 'string',
        variants: [
          {
            begin: '(u8?|U)?L?"', end: '"',
            illegal: '\\n',
            contains: [hljs.BACKSLASH_ESCAPE]
          },
          {
            begin: '(u8?|U)?R"', end: '"',
            contains: [hljs.BACKSLASH_ESCAPE]
          },
          {
            begin: '\'\\\\?.', end: '\'',
            illegal: '.'
          }
        ]
      };
    
      var NUMBERS = {
        className: 'number',
        variants: [
          { begin: '\\b(0b[01\']+)' },
          { begin: '(-?)\\b([\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)(u|U|l|L|ul|UL|f|F|b|B)' },
          { begin: '(-?)(\\b0[xX][a-fA-F0-9\']+|(\\b[\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)([eE][-+]?[\\d\']+)?)' }
        ],
        relevance: 0
      };
    
      var PREPROCESSOR =       {
        className: 'meta',
        begin: /#\s*[a-z]+\b/, end: /$/,
        keywords: {
          'meta-keyword':
            'if else elif endif define undef warning error line ' +
            'pragma ifdef ifndef include'
        },
        contains: [
          {
            begin: /\\\n/, relevance: 0
          },
          hljs.inherit(STRINGS, {className: 'meta-string'}),
          {
            className: 'meta-string',
            begin: /<[^\n>]*>/, end: /$/,
            illegal: '\\n',
          },
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE
        ]
      };
    
      var FUNCTION_TITLE = hljs.IDENT_RE + '\\s*\\(';
    
      var CPP_KEYWORDS = {
        keyword: 'int float while private char catch import module export virtual operator sizeof ' +
          'dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace ' +
          'unsigned long volatile static protected bool template mutable if public friend ' +
          'do goto auto void enum else break extern using asm case typeid ' +
          'short reinterpret_cast|10 default double register explicit signed typename try this ' +
          'switch continue inline delete alignof constexpr decltype ' +
          'noexcept static_assert thread_local restrict _Bool complex _Complex _Imaginary ' +
          'atomic_bool atomic_char atomic_schar ' +
          'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' +
          'atomic_ullong new throw return ' +
          'and or not',
        built_in: 'std string cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream ' +
          'auto_ptr deque list queue stack vector map set bitset multiset multimap unordered_set ' +
          'unordered_map unordered_multiset unordered_multimap array shared_ptr abort abs acos ' +
          'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp ' +
          'fscanf isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper ' +
          'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow ' +
          'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp ' +
          'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan ' +
          'vfprintf vprintf vsprintf endl initializer_list unique_ptr',
        literal: 'true false nullptr NULL'
      };
    
      var EXPRESSION_CONTAINS = [
        CPP_PRIMITIVE_TYPES,
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        NUMBERS,
        STRINGS
      ];
    
      return {
        aliases: ['c', 'cc', 'h', 'c++', 'h++', 'hpp'],
        keywords: CPP_KEYWORDS,
        illegal: '</',
        contains: EXPRESSION_CONTAINS.concat([
          PREPROCESSOR,
          {
            begin: '\\b(deque|list|queue|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\s*<', end: '>',
            keywords: CPP_KEYWORDS,
            contains: ['self', CPP_PRIMITIVE_TYPES]
          },
          {
            begin: hljs.IDENT_RE + '::',
            keywords: CPP_KEYWORDS
          },
          {
            // This mode covers expression context where we can't expect a function
            // definition and shouldn't highlight anything that looks like one:
            // `return some()`, `else if()`, `(x*sum(1, 2))`
            variants: [
              {begin: /=/, end: /;/},
              {begin: /\(/, end: /\)/},
              {beginKeywords: 'new throw return else', end: /;/}
            ],
            keywords: CPP_KEYWORDS,
            contains: EXPRESSION_CONTAINS.concat([
              {
                begin: /\(/, end: /\)/,
                keywords: CPP_KEYWORDS,
                contains: EXPRESSION_CONTAINS.concat(['self']),
                relevance: 0
              }
            ]),
            relevance: 0
          },
          {
            className: 'function',
            begin: '(' + hljs.IDENT_RE + '[\\*&\\s]+)+' + FUNCTION_TITLE,
            returnBegin: true, end: /[{;=]/,
            excludeEnd: true,
            keywords: CPP_KEYWORDS,
            illegal: /[^\w\s\*&]/,
            contains: [
              {
                begin: FUNCTION_TITLE, returnBegin: true,
                contains: [hljs.TITLE_MODE],
                relevance: 0
              },
              {
                className: 'params',
                begin: /\(/, end: /\)/,
                keywords: CPP_KEYWORDS,
                relevance: 0,
                contains: [
                  hljs.C_LINE_COMMENT_MODE,
                  hljs.C_BLOCK_COMMENT_MODE,
                  STRINGS,
                  NUMBERS,
                  CPP_PRIMITIVE_TYPES
                ]
              },
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              PREPROCESSOR
            ]
          },
          {
            className: 'class',
            beginKeywords: 'class struct', end: /[{;:]/,
            contains: [
              {begin: /</, end: />/, contains: ['self']}, // skip generic stuff
              hljs.TITLE_MODE
            ]
          }
        ]),
        exports: {
          preprocessor: PREPROCESSOR,
          strings: STRINGS,
          keywords: CPP_KEYWORDS
        }
      };
    };
    
    /***/ }),
    /* 410 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var CPP = hljs.getLanguage('cpp').exports;
        return {
        keywords: {
          keyword:
            'boolean byte word string String array ' + CPP.keywords.keyword,
          built_in:
            'setup loop while catch for if do goto try switch case else ' +
            'default break continue return ' +
            'KeyboardController MouseController SoftwareSerial ' +
            'EthernetServer EthernetClient LiquidCrystal ' +
            'RobotControl GSMVoiceCall EthernetUDP EsploraTFT ' +
            'HttpClient RobotMotor WiFiClient GSMScanner ' +
            'FileSystem Scheduler GSMServer YunClient YunServer ' +
            'IPAddress GSMClient GSMModem Keyboard Ethernet ' +
            'Console GSMBand Esplora Stepper Process ' +
            'WiFiUDP GSM_SMS Mailbox USBHost Firmata PImage ' +
            'Client Server GSMPIN FileIO Bridge Serial ' +
            'EEPROM Stream Mouse Audio Servo File Task ' +
            'GPRS WiFi Wire TFT GSM SPI SD ' +
            'runShellCommandAsynchronously analogWriteResolution ' +
            'retrieveCallingNumber printFirmwareVersion ' +
            'analogReadResolution sendDigitalPortPair ' +
            'noListenOnLocalhost readJoystickButton setFirmwareVersion ' +
            'readJoystickSwitch scrollDisplayRight getVoiceCallStatus ' +
            'scrollDisplayLeft writeMicroseconds delayMicroseconds ' +
            'beginTransmission getSignalStrength runAsynchronously ' +
            'getAsynchronously listenOnLocalhost getCurrentCarrier ' +
            'readAccelerometer messageAvailable sendDigitalPorts ' +
            'lineFollowConfig countryNameWrite runShellCommand ' +
            'readStringUntil rewindDirectory readTemperature ' +
            'setClockDivider readLightSensor endTransmission ' +
            'analogReference detachInterrupt countryNameRead ' +
            'attachInterrupt encryptionType readBytesUntil ' +
            'robotNameWrite readMicrophone robotNameRead cityNameWrite ' +
            'userNameWrite readJoystickY readJoystickX mouseReleased ' +
            'openNextFile scanNetworks noInterrupts digitalWrite ' +
            'beginSpeaker mousePressed isActionDone mouseDragged ' +
            'displayLogos noAutoscroll addParameter remoteNumber ' +
            'getModifiers keyboardRead userNameRead waitContinue ' +
            'processInput parseCommand printVersion readNetworks ' +
            'writeMessage blinkVersion cityNameRead readMessage ' +
            'setDataMode parsePacket isListening setBitOrder ' +
            'beginPacket isDirectory motorsWrite drawCompass ' +
            'digitalRead clearScreen serialEvent rightToLeft ' +
            'setTextSize leftToRight requestFrom keyReleased ' +
            'compassRead analogWrite interrupts WiFiServer ' +
            'disconnect playMelody parseFloat autoscroll ' +
            'getPINUsed setPINUsed setTimeout sendAnalog ' +
            'readSlider analogRead beginWrite createChar ' +
            'motorsStop keyPressed tempoWrite readButton ' +
            'subnetMask debugPrint macAddress writeGreen ' +
            'randomSeed attachGPRS readString sendString ' +
            'remotePort releaseAll mouseMoved background ' +
            'getXChange getYChange answerCall getResult ' +
            'voiceCall endPacket constrain getSocket writeJSON ' +
            'getButton available connected findUntil readBytes ' +
            'exitValue readGreen writeBlue startLoop IPAddress ' +
            'isPressed sendSysex pauseMode gatewayIP setCursor ' +
            'getOemKey tuneWrite noDisplay loadImage switchPIN ' +
            'onRequest onReceive changePIN playFile noBuffer ' +
            'parseInt overflow checkPIN knobRead beginTFT ' +
            'bitClear updateIR bitWrite position writeRGB ' +
            'highByte writeRed setSpeed readBlue noStroke ' +
            'remoteIP transfer shutdown hangCall beginSMS ' +
            'endWrite attached maintain noCursor checkReg ' +
            'checkPUK shiftOut isValid shiftIn pulseIn ' +
            'connect println localIP pinMode getIMEI ' +
            'display noBlink process getBand running beginSD ' +
            'drawBMP lowByte setBand release bitRead prepare ' +
            'pointTo readRed setMode noFill remove listen ' +
            'stroke detach attach noTone exists buffer ' +
            'height bitSet circle config cursor random ' +
            'IRread setDNS endSMS getKey micros ' +
            'millis begin print write ready flush width ' +
            'isPIN blink clear press mkdir rmdir close ' +
            'point yield image BSSID click delay ' +
            'read text move peek beep rect line open ' +
            'seek fill size turn stop home find ' +
            'step tone sqrt RSSI SSID ' +
            'end bit tan cos sin pow map abs max ' +
            'min get run put',
          literal:
            'DIGITAL_MESSAGE FIRMATA_STRING ANALOG_MESSAGE ' +
            'REPORT_DIGITAL REPORT_ANALOG INPUT_PULLUP ' +
            'SET_PIN_MODE INTERNAL2V56 SYSTEM_RESET LED_BUILTIN ' +
            'INTERNAL1V1 SYSEX_START INTERNAL EXTERNAL ' +
            'DEFAULT OUTPUT INPUT HIGH LOW'
        },
        contains: [
          CPP.preprocessor,
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE,
          hljs.C_NUMBER_MODE
        ]
      };
    };
    
    /***/ }),
    /* 411 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
        //local labels: %?[FB]?[AT]?\d{1,2}\w+
      return {
        case_insensitive: true,
        aliases: ['arm'],
        lexemes: '\\.?' + hljs.IDENT_RE,
        keywords: {
          meta:
            //GNU preprocs
            '.2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .arm .thumb .code16 .code32 .force_thumb .thumb_func .ltorg '+
            //ARM directives
            'ALIAS ALIGN ARM AREA ASSERT ATTR CN CODE CODE16 CODE32 COMMON CP DATA DCB DCD DCDU DCDO DCFD DCFDU DCI DCQ DCQU DCW DCWU DN ELIF ELSE END ENDFUNC ENDIF ENDP ENTRY EQU EXPORT EXPORTAS EXTERN FIELD FILL FUNCTION GBLA GBLL GBLS GET GLOBAL IF IMPORT INCBIN INCLUDE INFO KEEP LCLA LCLL LCLS LTORG MACRO MAP MEND MEXIT NOFP OPT PRESERVE8 PROC QN READONLY RELOC REQUIRE REQUIRE8 RLIST FN ROUT SETA SETL SETS SN SPACE SUBT THUMB THUMBX TTL WHILE WEND ',
          built_in:
            'r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 '+ //standard registers
            'pc lr sp ip sl sb fp '+ //typical regs plus backward compatibility
            'a1 a2 a3 a4 v1 v2 v3 v4 v5 v6 v7 v8 f0 f1 f2 f3 f4 f5 f6 f7 '+ //more regs and fp
            'p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 '+ //coprocessor regs
            'c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 '+ //more coproc
            'q0 q1 q2 q3 q4 q5 q6 q7 q8 q9 q10 q11 q12 q13 q14 q15 '+ //advanced SIMD NEON regs
    
            //program status registers
            'cpsr_c cpsr_x cpsr_s cpsr_f cpsr_cx cpsr_cxs cpsr_xs cpsr_xsf cpsr_sf cpsr_cxsf '+
            'spsr_c spsr_x spsr_s spsr_f spsr_cx spsr_cxs spsr_xs spsr_xsf spsr_sf spsr_cxsf '+
    
            //NEON and VFP registers
            's0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 '+
            's16 s17 s18 s19 s20 s21 s22 s23 s24 s25 s26 s27 s28 s29 s30 s31 '+
            'd0 d1 d2 d3 d4 d5 d6 d7 d8 d9 d10 d11 d12 d13 d14 d15 '+
            'd16 d17 d18 d19 d20 d21 d22 d23 d24 d25 d26 d27 d28 d29 d30 d31 ' +
    
            '{PC} {VAR} {TRUE} {FALSE} {OPT} {CONFIG} {ENDIAN} {CODESIZE} {CPU} {FPU} {ARCHITECTURE} {PCSTOREOFFSET} {ARMASM_VERSION} {INTER} {ROPI} {RWPI} {SWST} {NOSWST} . @'
        },
        contains: [
          {
            className: 'keyword',
            begin: '\\b('+     //mnemonics
                'adc|'+
                '(qd?|sh?|u[qh]?)?add(8|16)?|usada?8|(q|sh?|u[qh]?)?(as|sa)x|'+
                'and|adrl?|sbc|rs[bc]|asr|b[lx]?|blx|bxj|cbn?z|tb[bh]|bic|'+
                'bfc|bfi|[su]bfx|bkpt|cdp2?|clz|clrex|cmp|cmn|cpsi[ed]|cps|'+
                'setend|dbg|dmb|dsb|eor|isb|it[te]{0,3}|lsl|lsr|ror|rrx|'+
                'ldm(([id][ab])|f[ds])?|ldr((s|ex)?[bhd])?|movt?|mvn|mra|mar|'+
                'mul|[us]mull|smul[bwt][bt]|smu[as]d|smmul|smmla|'+
                'mla|umlaal|smlal?([wbt][bt]|d)|mls|smlsl?[ds]|smc|svc|sev|'+
                'mia([bt]{2}|ph)?|mrr?c2?|mcrr2?|mrs|msr|orr|orn|pkh(tb|bt)|rbit|'+
                'rev(16|sh)?|sel|[su]sat(16)?|nop|pop|push|rfe([id][ab])?|'+
                'stm([id][ab])?|str(ex)?[bhd]?|(qd?)?sub|(sh?|q|u[qh]?)?sub(8|16)|'+
                '[su]xt(a?h|a?b(16)?)|srs([id][ab])?|swpb?|swi|smi|tst|teq|'+
                'wfe|wfi|yield'+
            ')'+
            '(eq|ne|cs|cc|mi|pl|vs|vc|hi|ls|ge|lt|gt|le|al|hs|lo)?'+ //condition codes
            '[sptrx]?' ,                                             //legal postfixes
            end: '\\s'
          },
          hljs.COMMENT('[;@]', '$', {relevance: 0}),
          hljs.C_BLOCK_COMMENT_MODE,
          hljs.QUOTE_STRING_MODE,
          {
            className: 'string',
            begin: '\'',
            end: '[^\\\\]\'',
            relevance: 0
          },
          {
            className: 'title',
            begin: '\\|', end: '\\|',
            illegal: '\\n',
            relevance: 0
          },
          {
            className: 'number',
            variants: [
                {begin: '[#$=]?0x[0-9a-f]+'}, //hex
                {begin: '[#$=]?0b[01]+'},     //bin
                {begin: '[#$=]\\d+'},        //literal
                {begin: '\\b\\d+'}           //bare number
            ],
            relevance: 0
          },
          {
            className: 'symbol',
            variants: [
                {begin: '^[a-z_\\.\\$][a-z0-9_\\.\\$]+'}, //ARM syntax
                {begin: '^\\s*[a-z_\\.\\$][a-z0-9_\\.\\$]+:'}, //GNU ARM syntax
                {begin: '[=#]\\w+' }  //label reference
            ],
            relevance: 0
          }
        ]
      };
    };
    
    /***/ }),
    /* 412 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var XML_IDENT_RE = '[A-Za-z0-9\\._:-]+';
      var TAG_INTERNALS = {
        endsWithParent: true,
        illegal: /</,
        relevance: 0,
        contains: [
          {
            className: 'attr',
            begin: XML_IDENT_RE,
            relevance: 0
          },
          {
            begin: /=\s*/,
            relevance: 0,
            contains: [
              {
                className: 'string',
                endsParent: true,
                variants: [
                  {begin: /"/, end: /"/},
                  {begin: /'/, end: /'/},
                  {begin: /[^\s"'=<>`]+/}
                ]
              }
            ]
          }
        ]
      };
      return {
        aliases: ['html', 'xhtml', 'rss', 'atom', 'xjb', 'xsd', 'xsl', 'plist'],
        case_insensitive: true,
        contains: [
          {
            className: 'meta',
            begin: '<!DOCTYPE', end: '>',
            relevance: 10,
            contains: [{begin: '\\[', end: '\\]'}]
          },
          hljs.COMMENT(
            '<!--',
            '-->',
            {
              relevance: 10
            }
          ),
          {
            begin: '<\\!\\[CDATA\\[', end: '\\]\\]>',
            relevance: 10
          },
          {
            begin: /<\?(php)?/, end: /\?>/,
            subLanguage: 'php',
            contains: [{begin: '/\\*', end: '\\*/', skip: true}]
          },
          {
            className: 'tag',
            /*
            The lookahead pattern (?=...) ensures that 'begin' only matches
            '<style' as a single word, followed by a whitespace or an
            ending braket. The '$' is needed for the lexeme to be recognized
            by hljs.subMode() that tests lexemes outside the stream.
            */
            begin: '<style(?=\\s|>|$)', end: '>',
            keywords: {name: 'style'},
            contains: [TAG_INTERNALS],
            starts: {
              end: '</style>', returnEnd: true,
              subLanguage: ['css', 'xml']
            }
          },
          {
            className: 'tag',
            // See the comment in the <style tag about the lookahead pattern
            begin: '<script(?=\\s|>|$)', end: '>',
            keywords: {name: 'script'},
            contains: [TAG_INTERNALS],
            starts: {
              end: '\<\/script\>', returnEnd: true,
              subLanguage: ['actionscript', 'javascript', 'handlebars', 'xml']
            }
          },
          {
            className: 'meta',
            variants: [
              {begin: /<\?xml/, end: /\?>/, relevance: 10},
              {begin: /<\?\w+/, end: /\?>/}
            ]
          },
          {
            className: 'tag',
            begin: '</?', end: '/?>',
            contains: [
              {
                className: 'name', begin: /[^\/><\s]+/, relevance: 0
              },
              TAG_INTERNALS
            ]
          }
        ]
      };
    };
    
    /***/ }),
    /* 413 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        aliases: ['adoc'],
        contains: [
          // block comment
          hljs.COMMENT(
            '^/{4,}\\n',
            '\\n/{4,}$',
            // can also be done as...
            //'^/{4,}$',
            //'^/{4,}$',
            {
              relevance: 10
            }
          ),
          // line comment
          hljs.COMMENT(
            '^//',
            '$',
            {
              relevance: 0
            }
          ),
          // title
          {
            className: 'title',
            begin: '^\\.\\w.*$'
          },
          // example, admonition & sidebar blocks
          {
            begin: '^[=\\*]{4,}\\n',
            end: '\\n^[=\\*]{4,}$',
            relevance: 10
          },
          // headings
          {
            className: 'section',
            relevance: 10,
            variants: [
              {begin: '^(={1,5}) .+?( \\1)?$'},
              {begin: '^[^\\[\\]\\n]+?\\n[=\\-~\\^\\+]{2,}$'},
            ]
          },
          // document attributes
          {
            className: 'meta',
            begin: '^:.+?:',
            end: '\\s',
            excludeEnd: true,
            relevance: 10
          },
          // block attributes
          {
            className: 'meta',
            begin: '^\\[.+?\\]$',
            relevance: 0
          },
          // quoteblocks
          {
            className: 'quote',
            begin: '^_{4,}\\n',
            end: '\\n_{4,}$',
            relevance: 10
          },
          // listing and literal blocks
          {
            className: 'code',
            begin: '^[\\-\\.]{4,}\\n',
            end: '\\n[\\-\\.]{4,}$',
            relevance: 10
          },
          // passthrough blocks
          {
            begin: '^\\+{4,}\\n',
            end: '\\n\\+{4,}$',
            contains: [
              {
                begin: '<', end: '>',
                subLanguage: 'xml',
                relevance: 0
              }
            ],
            relevance: 10
          },
          // lists (can only capture indicators)
          {
            className: 'bullet',
            begin: '^(\\*+|\\-+|\\.+|[^\\n]+?::)\\s+'
          },
          // admonition
          {
            className: 'symbol',
            begin: '^(NOTE|TIP|IMPORTANT|WARNING|CAUTION):\\s+',
            relevance: 10
          },
          // inline strong
          {
            className: 'strong',
            // must not follow a word character or be followed by an asterisk or space
            begin: '\\B\\*(?![\\*\\s])',
            end: '(\\n{2}|\\*)',
            // allow escaped asterisk followed by word char
            contains: [
              {
                begin: '\\\\*\\w',
                relevance: 0
              }
            ]
          },
          // inline emphasis
          {
            className: 'emphasis',
            // must not follow a word character or be followed by a single quote or space
            begin: '\\B\'(?![\'\\s])',
            end: '(\\n{2}|\')',
            // allow escaped single quote followed by word char
            contains: [
              {
                begin: '\\\\\'\\w',
                relevance: 0
              }
            ],
            relevance: 0
          },
          // inline emphasis (alt)
          {
            className: 'emphasis',
            // must not follow a word character or be followed by an underline or space
            begin: '_(?![_\\s])',
            end: '(\\n{2}|_)',
            relevance: 0
          },
          // inline smart quotes
          {
            className: 'string',
            variants: [
              {begin: "``.+?''"},
              {begin: "`.+?'"}
            ]
          },
          // inline code snippets (TODO should get same treatment as strong and emphasis)
          {
            className: 'code',
            begin: '(`.+?`|\\+.+?\\+)',
            relevance: 0
          },
          // indented literal block
          {
            className: 'code',
            begin: '^[ \\t]',
            end: '$',
            relevance: 0
          },
          // horizontal rules
          {
            begin: '^\'{3,}[ \\t]*$',
            relevance: 10
          },
          // images and links
          {
            begin: '(link:)?(http|https|ftp|file|irc|image:?):\\S+\\[.*?\\]',
            returnBegin: true,
            contains: [
              {
                begin: '(link|image:?):',
                relevance: 0
              },
              {
                className: 'link',
                begin: '\\w',
                end: '[^\\[]+',
                relevance: 0
              },
              {
                className: 'string',
                begin: '\\[',
                end: '\\]',
                excludeBegin: true,
                excludeEnd: true,
                relevance: 0
              }
            ],
            relevance: 10
          }
        ]
      };
    };
    
    /***/ }),
    /* 414 */
    /***/ (function(module, exports) {
    
    module.exports = function (hljs) {
      var KEYWORDS =
        'false synchronized int abstract float private char boolean static null if const ' +
        'for true while long throw strictfp finally protected import native final return void ' +
        'enum else extends implements break transient new catch instanceof byte super volatile case ' +
        'assert short package default double public try this switch continue throws privileged ' +
        'aspectOf adviceexecution proceed cflowbelow cflow initialization preinitialization ' +
        'staticinitialization withincode target within execution getWithinTypeName handler ' +
        'thisJoinPoint thisJoinPointStaticPart thisEnclosingJoinPointStaticPart declare parents '+
        'warning error soft precedence thisAspectInstance';
      var SHORTKEYS = 'get set args call';
      return {
        keywords : KEYWORDS,
        illegal : /<\/|#/,
        contains : [
          hljs.COMMENT(
            '/\\*\\*',
            '\\*/',
            {
              relevance : 0,
              contains : [
                {
                  // eat up @'s in emails to prevent them to be recognized as doctags
                  begin: /\w+@/, relevance: 0
                },
                {
                  className : 'doctag',
                  begin : '@[A-Za-z]+'
                }
              ]
            }
          ),
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE,
          {
            className : 'class',
            beginKeywords : 'aspect',
            end : /[{;=]/,
            excludeEnd : true,
            illegal : /[:;"\[\]]/,
            contains : [
              {
                beginKeywords : 'extends implements pertypewithin perthis pertarget percflowbelow percflow issingleton'
              },
              hljs.UNDERSCORE_TITLE_MODE,
              {
                begin : /\([^\)]*/,
                end : /[)]+/,
                keywords : KEYWORDS + ' ' + SHORTKEYS,
                excludeEnd : false
              }
            ]
          },
          {
            className : 'class',
            beginKeywords : 'class interface',
            end : /[{;=]/,
            excludeEnd : true,
            relevance: 0,
            keywords : 'class interface',
            illegal : /[:"\[\]]/,
            contains : [
              {beginKeywords : 'extends implements'},
              hljs.UNDERSCORE_TITLE_MODE
            ]
          },
          {
            // AspectJ Constructs
            beginKeywords : 'pointcut after before around throwing returning',
            end : /[)]/,
            excludeEnd : false,
            illegal : /["\[\]]/,
            contains : [
              {
                begin : hljs.UNDERSCORE_IDENT_RE + '\\s*\\(',
                returnBegin : true,
                contains : [hljs.UNDERSCORE_TITLE_MODE]
              }
            ]
          },
          {
            begin : /[:]/,
            returnBegin : true,
            end : /[{;]/,
            relevance: 0,
            excludeEnd : false,
            keywords : KEYWORDS,
            illegal : /["\[\]]/,
            contains : [
              {
                begin : hljs.UNDERSCORE_IDENT_RE + '\\s*\\(',
                keywords : KEYWORDS + ' ' + SHORTKEYS,
                relevance: 0
              },
              hljs.QUOTE_STRING_MODE
            ]
          },
          {
            // this prevents 'new Name(...), or throw ...' from being recognized as a function definition
            beginKeywords : 'new throw',
            relevance : 0
          },
          {
            // the function class is a bit different for AspectJ compared to the Java language
            className : 'function',
            begin : /\w+ +\w+(\.)?\w+\s*\([^\)]*\)\s*((throws)[\w\s,]+)?[\{;]/,
            returnBegin : true,
            end : /[{;=]/,
            keywords : KEYWORDS,
            excludeEnd : true,
            contains : [
              {
                begin : hljs.UNDERSCORE_IDENT_RE + '\\s*\\(',
                returnBegin : true,
                relevance: 0,
                contains : [hljs.UNDERSCORE_TITLE_MODE]
              },
              {
                className : 'params',
                begin : /\(/, end : /\)/,
                relevance: 0,
                keywords : KEYWORDS,
                contains : [
                  hljs.APOS_STRING_MODE,
                  hljs.QUOTE_STRING_MODE,
                  hljs.C_NUMBER_MODE,
                  hljs.C_BLOCK_COMMENT_MODE
                ]
              },
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE
            ]
          },
          hljs.C_NUMBER_MODE,
          {
            // annotation is also used in this language
            className : 'meta',
            begin : '@[A-Za-z]+'
          }
        ]
      };
    };
    
    /***/ }),
    /* 415 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var BACKTICK_ESCAPE = {
        begin: '`[\\s\\S]'
      };
    
      return {
        case_insensitive: true,
        aliases: [ 'ahk' ],
        keywords: {
          keyword: 'Break Continue Critical Exit ExitApp Gosub Goto New OnExit Pause return SetBatchLines SetTimer Suspend Thread Throw Until ahk_id ahk_class ahk_pid ahk_exe ahk_group',
          literal: 'A|0 true false NOT AND OR',
          built_in: 'ComSpec Clipboard ClipboardAll ErrorLevel',
        },
        contains: [
          {
            className: 'built_in',
            begin: 'A_[a-zA-Z0-9]+'
          },
          BACKTICK_ESCAPE,
          hljs.inherit(hljs.QUOTE_STRING_MODE, {contains: [BACKTICK_ESCAPE]}),
          hljs.COMMENT(';', '$', {relevance: 0}),
          hljs.C_BLOCK_COMMENT_MODE,
          {
            className: 'number',
            begin: hljs.NUMBER_RE,
            relevance: 0
          },
          {
            className: 'subst', // FIXED
            begin: '%(?=[a-zA-Z0-9#_$@])', end: '%',
            illegal: '[^a-zA-Z0-9#_$@]'
          },
          {
            className: 'built_in',
            begin: '^\\s*\\w+\\s*,'
            //I don't really know if this is totally relevant
          },
          {
            className: 'meta', 
            begin: '^\\s*#\w+', end:'$',
            relevance: 0
          },
          {
            className: 'symbol',
            contains: [BACKTICK_ESCAPE],
            variants: [
              {begin: '^[^\\n";]+::(?!=)'},
              {begin: '^[^\\n";]+:(?!=)', relevance: 0} // zero relevance as it catches a lot of things
                                                        // followed by a single ':' in many languages
            ]
          },
          {
            // consecutive commas, not for highlighting but just for relevance
            begin: ',\\s*,'
          }
        ]
      }
    };
    
    /***/ }),
    /* 416 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
        var KEYWORDS = 'ByRef Case Const ContinueCase ContinueLoop ' +
            'Default Dim Do Else ElseIf EndFunc EndIf EndSelect ' +
            'EndSwitch EndWith Enum Exit ExitLoop For Func ' +
            'Global If In Local Next ReDim Return Select Static ' +
            'Step Switch Then To Until Volatile WEnd While With',
    
            LITERAL = 'True False And Null Not Or',
    
            BUILT_IN =
              'Abs ACos AdlibRegister AdlibUnRegister Asc AscW ASin Assign ATan AutoItSetOption AutoItWinGetTitle AutoItWinSetTitle Beep Binary BinaryLen BinaryMid BinaryToString BitAND BitNOT BitOR BitRotate BitShift BitXOR BlockInput Break Call CDTray Ceiling Chr ChrW ClipGet ClipPut ConsoleRead ConsoleWrite ConsoleWriteError ControlClick ControlCommand ControlDisable ControlEnable ControlFocus ControlGetFocus ControlGetHandle ControlGetPos ControlGetText ControlHide ControlListView ControlMove ControlSend ControlSetText ControlShow ControlTreeView Cos Dec DirCopy DirCreate DirGetSize DirMove DirRemove DllCall DllCallAddress DllCallbackFree DllCallbackGetPtr DllCallbackRegister DllClose DllOpen DllStructCreate DllStructGetData DllStructGetPtr DllStructGetSize DllStructSetData DriveGetDrive DriveGetFileSystem DriveGetLabel DriveGetSerial DriveGetType DriveMapAdd DriveMapDel DriveMapGet DriveSetLabel DriveSpaceFree DriveSpaceTotal DriveStatus EnvGet EnvSet EnvUpdate Eval Execute Exp FileChangeDir FileClose FileCopy FileCreateNTFSLink FileCreateShortcut FileDelete FileExists FileFindFirstFile FileFindNextFile FileFlush FileGetAttrib FileGetEncoding FileGetLongName FileGetPos FileGetShortcut FileGetShortName FileGetSize FileGetTime FileGetVersion FileInstall FileMove FileOpen FileOpenDialog FileRead FileReadLine FileReadToArray FileRecycle FileRecycleEmpty FileSaveDialog FileSelectFolder FileSetAttrib FileSetEnd FileSetPos FileSetTime FileWrite FileWriteLine Floor FtpSetProxy FuncName GUICreate GUICtrlCreateAvi GUICtrlCreateButton GUICtrlCreateCheckbox GUICtrlCreateCombo GUICtrlCreateContextMenu GUICtrlCreateDate GUICtrlCreateDummy GUICtrlCreateEdit GUICtrlCreateGraphic GUICtrlCreateGroup GUICtrlCreateIcon GUICtrlCreateInput GUICtrlCreateLabel GUICtrlCreateList GUICtrlCreateListView GUICtrlCreateListViewItem GUICtrlCreateMenu GUICtrlCreateMenuItem GUICtrlCreateMonthCal GUICtrlCreateObj GUICtrlCreatePic GUICtrlCreateProgress GUICtrlCreateRadio GUICtrlCreateSlider GUICtrlCreateTab GUICtrlCreateTabItem GUICtrlCreateTreeView GUICtrlCreateTreeViewItem GUICtrlCreateUpdown GUICtrlDelete GUICtrlGetHandle GUICtrlGetState GUICtrlRead GUICtrlRecvMsg GUICtrlRegisterListViewSort GUICtrlSendMsg GUICtrlSendToDummy GUICtrlSetBkColor GUICtrlSetColor GUICtrlSetCursor GUICtrlSetData GUICtrlSetDefBkColor GUICtrlSetDefColor GUICtrlSetFont GUICtrlSetGraphic GUICtrlSetImage GUICtrlSetLimit GUICtrlSetOnEvent GUICtrlSetPos GUICtrlSetResizing GUICtrlSetState GUICtrlSetStyle GUICtrlSetTip GUIDelete GUIGetCursorInfo GUIGetMsg GUIGetStyle GUIRegisterMsg GUISetAccelerators GUISetBkColor GUISetCoord GUISetCursor GUISetFont GUISetHelp GUISetIcon GUISetOnEvent GUISetState GUISetStyle GUIStartGroup GUISwitch Hex HotKeySet HttpSetProxy HttpSetUserAgent HWnd InetClose InetGet InetGetInfo InetGetSize InetRead IniDelete IniRead IniReadSection IniReadSectionNames IniRenameSection IniWrite IniWriteSection InputBox Int IsAdmin IsArray IsBinary IsBool IsDeclared IsDllStruct IsFloat IsFunc IsHWnd IsInt IsKeyword IsNumber IsObj IsPtr IsString Log MemGetStats Mod MouseClick MouseClickDrag MouseDown MouseGetCursor MouseGetPos MouseMove MouseUp MouseWheel MsgBox Number ObjCreate ObjCreateInterface ObjEvent ObjGet ObjName OnAutoItExitRegister OnAutoItExitUnRegister Ping PixelChecksum PixelGetColor PixelSearch ProcessClose ProcessExists ProcessGetStats ProcessList ProcessSetPriority ProcessWait ProcessWaitClose ProgressOff ProgressOn ProgressSet Ptr Random RegDelete RegEnumKey RegEnumVal RegRead RegWrite Round Run RunAs RunAsWait RunWait Send SendKeepActive SetError SetExtended ShellExecute ShellExecuteWait Shutdown Sin Sleep SoundPlay SoundSetWaveVolume SplashImageOn SplashOff SplashTextOn Sqrt SRandom StatusbarGetText StderrRead StdinWrite StdioClose StdoutRead String StringAddCR StringCompare StringFormat StringFromASCIIArray StringInStr StringIsAlNum StringIsAlpha StringIsASCII StringIsDigit StringIsFloat StringIsInt StringIsLower StringIsSpace StringIsUpper StringIsXDigit StringLeft StringLen StringLower StringMid StringRegExp StringRegExpReplace StringReplace StringReverse StringRight StringSplit StringStripCR StringStripWS StringToASCIIArray StringToBinary StringTrimLeft StringTrimRight StringUpper Tan TCPAccept TCPCloseSocket TCPConnect TCPListen TCPNameToIP TCPRecv TCPSend TCPShutdown, UDPShutdown TCPStartup, UDPStartup TimerDiff TimerInit ToolTip TrayCreateItem TrayCreateMenu TrayGetMsg TrayItemDelete TrayItemGetHandle TrayItemGetState TrayItemGetText TrayItemSetOnEvent TrayItemSetState TrayItemSetText TraySetClick TraySetIcon TraySetOnEvent TraySetPauseIcon TraySetState TraySetToolTip TrayTip UBound UDPBind UDPCloseSocket UDPOpen UDPRecv UDPSend VarGetType WinActivate WinActive WinClose WinExists WinFlash WinGetCaretPos WinGetClassList WinGetClientSize WinGetHandle WinGetPos WinGetProcess WinGetState WinGetText WinGetTitle WinKill WinList WinMenuSelectItem WinMinimizeAll WinMinimizeAllUndo WinMove WinSetOnTop WinSetState WinSetTitle WinSetTrans WinWait',
    
            COMMENT = {
                variants: [
                  hljs.COMMENT(';', '$', {relevance: 0}),
                  hljs.COMMENT('#cs', '#ce'),
                  hljs.COMMENT('#comments-start', '#comments-end')
                ]
            },
    
            VARIABLE = {
                begin: '\\$[A-z0-9_]+'
            },
    
            STRING = {
                className: 'string',
                variants: [{
                    begin: /"/,
                    end: /"/,
                    contains: [{
                        begin: /""/,
                        relevance: 0
                    }]
                }, {
                    begin: /'/,
                    end: /'/,
                    contains: [{
                        begin: /''/,
                        relevance: 0
                    }]
                }]
            },
    
            NUMBER = {
                variants: [hljs.BINARY_NUMBER_MODE, hljs.C_NUMBER_MODE]
            },
    
            PREPROCESSOR = {
                className: 'meta',
                begin: '#',
                end: '$',
                keywords: {'meta-keyword': 'comments include include-once NoTrayIcon OnAutoItStartRegister pragma compile RequireAdmin'},
                contains: [{
                        begin: /\\\n/,
                        relevance: 0
                    }, {
                        beginKeywords: 'include',
                        keywords: {'meta-keyword': 'include'},
                        end: '$',
                        contains: [
                            STRING, {
                                className: 'meta-string',
                                variants: [{
                                    begin: '<',
                                    end: '>'
                                }, {
                                    begin: /"/,
                                    end: /"/,
                                    contains: [{
                                        begin: /""/,
                                        relevance: 0
                                    }]
                                }, {
                                    begin: /'/,
                                    end: /'/,
                                    contains: [{
                                        begin: /''/,
                                        relevance: 0
                                    }]
                                }]
                            }
                        ]
                    },
                    STRING,
                    COMMENT
                ]
            },
    
            CONSTANT = {
                className: 'symbol',
                // begin: '@',
                // end: '$',
                // keywords: 'AppDataCommonDir AppDataDir AutoItExe AutoItPID AutoItVersion AutoItX64 COM_EventObj CommonFilesDir Compiled ComputerName ComSpec CPUArch CR CRLF DesktopCommonDir DesktopDepth DesktopDir DesktopHeight DesktopRefresh DesktopWidth DocumentsCommonDir error exitCode exitMethod extended FavoritesCommonDir FavoritesDir GUI_CtrlHandle GUI_CtrlId GUI_DragFile GUI_DragId GUI_DropId GUI_WinHandle HomeDrive HomePath HomeShare HotKeyPressed HOUR IPAddress1 IPAddress2 IPAddress3 IPAddress4 KBLayout LF LocalAppDataDir LogonDNSDomain LogonDomain LogonServer MDAY MIN MON MSEC MUILang MyDocumentsDir NumParams OSArch OSBuild OSLang OSServicePack OSType OSVersion ProgramFilesDir ProgramsCommonDir ProgramsDir ScriptDir ScriptFullPath ScriptLineNumber ScriptName SEC StartMenuCommonDir StartMenuDir StartupCommonDir StartupDir SW_DISABLE SW_ENABLE SW_HIDE SW_LOCK SW_MAXIMIZE SW_MINIMIZE SW_RESTORE SW_SHOW SW_SHOWDEFAULT SW_SHOWMAXIMIZED SW_SHOWMINIMIZED SW_SHOWMINNOACTIVE SW_SHOWNA SW_SHOWNOACTIVATE SW_SHOWNORMAL SW_UNLOCK SystemDir TAB TempDir TRAY_ID TrayIconFlashing TrayIconVisible UserName UserProfileDir WDAY WindowsDir WorkingDir YDAY YEAR',
                // relevance: 5
                begin: '@[A-z0-9_]+'
            },
    
            FUNCTION = {
                className: 'function',
                beginKeywords: 'Func',
                end: '$',
                illegal: '\\$|\\[|%',
                contains: [
                    hljs.UNDERSCORE_TITLE_MODE, {
                        className: 'params',
                        begin: '\\(',
                        end: '\\)',
                        contains: [
                            VARIABLE,
                            STRING,
                            NUMBER
                        ]
                    }
                ]
            };
    
        return {
            case_insensitive: true,
            illegal: /\/\*/,
            keywords: {
                keyword: KEYWORDS,
                built_in: BUILT_IN,
                literal: LITERAL
            },
            contains: [
                COMMENT,
                VARIABLE,
                STRING,
                NUMBER,
                PREPROCESSOR,
                CONSTANT,
                FUNCTION
            ]
        }
    };
    
    /***/ }),
    /* 417 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        case_insensitive: true,
        lexemes: '\\.?' + hljs.IDENT_RE,
        keywords: {
          keyword:
            /* mnemonic */
            'adc add adiw and andi asr bclr bld brbc brbs brcc brcs break breq brge brhc brhs ' +
            'brid brie brlo brlt brmi brne brpl brsh brtc brts brvc brvs bset bst call cbi cbr ' +
            'clc clh cli cln clr cls clt clv clz com cp cpc cpi cpse dec eicall eijmp elpm eor ' +
            'fmul fmuls fmulsu icall ijmp in inc jmp ld ldd ldi lds lpm lsl lsr mov movw mul ' +
            'muls mulsu neg nop or ori out pop push rcall ret reti rjmp rol ror sbc sbr sbrc sbrs ' +
            'sec seh sbi sbci sbic sbis sbiw sei sen ser ses set sev sez sleep spm st std sts sub ' +
            'subi swap tst wdr',
          built_in:
            /* general purpose registers */
            'r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 ' +
            'r23 r24 r25 r26 r27 r28 r29 r30 r31 x|0 xh xl y|0 yh yl z|0 zh zl ' +
            /* IO Registers (ATMega128) */
            'ucsr1c udr1 ucsr1a ucsr1b ubrr1l ubrr1h ucsr0c ubrr0h tccr3c tccr3a tccr3b tcnt3h ' +
            'tcnt3l ocr3ah ocr3al ocr3bh ocr3bl ocr3ch ocr3cl icr3h icr3l etimsk etifr tccr1c ' +
            'ocr1ch ocr1cl twcr twdr twar twsr twbr osccal xmcra xmcrb eicra spmcsr spmcr portg ' +
            'ddrg ping portf ddrf sreg sph spl xdiv rampz eicrb eimsk gimsk gicr eifr gifr timsk ' +
            'tifr mcucr mcucsr tccr0 tcnt0 ocr0 assr tccr1a tccr1b tcnt1h tcnt1l ocr1ah ocr1al ' +
            'ocr1bh ocr1bl icr1h icr1l tccr2 tcnt2 ocr2 ocdr wdtcr sfior eearh eearl eedr eecr ' +
            'porta ddra pina portb ddrb pinb portc ddrc pinc portd ddrd pind spdr spsr spcr udr0 ' +
            'ucsr0a ucsr0b ubrr0l acsr admux adcsr adch adcl porte ddre pine pinf',
          meta:
            '.byte .cseg .db .def .device .dseg .dw .endmacro .equ .eseg .exit .include .list ' +
            '.listmac .macro .nolist .org .set'
        },
        contains: [
          hljs.C_BLOCK_COMMENT_MODE,
          hljs.COMMENT(
            ';',
            '$',
            {
              relevance: 0
            }
          ),
          hljs.C_NUMBER_MODE, // 0x..., decimal, float
          hljs.BINARY_NUMBER_MODE, // 0b...
          {
            className: 'number',
            begin: '\\b(\\$[a-zA-Z0-9]+|0o[0-7]+)' // $..., 0o...
          },
          hljs.QUOTE_STRING_MODE,
          {
            className: 'string',
            begin: '\'', end: '[^\\\\]\'',
            illegal: '[^\\\\][^\']'
          },
          {className: 'symbol',  begin: '^[A-Za-z0-9_.$]+:'},
          {className: 'meta', begin: '#', end: '$'},
          {  // подстановка в «.macro»
            className: 'subst',
            begin: '@[0-9]+'
          }
        ]
      };
    };
    
    /***/ }),
    /* 418 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var VARIABLE = {
        className: 'variable',
        variants: [
          {begin: /\$[\w\d#@][\w\d_]*/},
          {begin: /\$\{(.*?)}/}
        ]
      };
      var KEYWORDS = 'BEGIN END if else while do for in break continue delete next nextfile function func exit|10';
      var STRING = {
        className: 'string',
        contains: [hljs.BACKSLASH_ESCAPE],
        variants: [
          {
            begin: /(u|b)?r?'''/, end: /'''/,
            relevance: 10
          },
          {
            begin: /(u|b)?r?"""/, end: /"""/,
            relevance: 10
          },
          {
            begin: /(u|r|ur)'/, end: /'/,
            relevance: 10
          },
          {
            begin: /(u|r|ur)"/, end: /"/,
            relevance: 10
          },
          {
            begin: /(b|br)'/, end: /'/
          },
          {
            begin: /(b|br)"/, end: /"/
          },
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE
        ]
      };
      return {
         keywords: {
           keyword: KEYWORDS
        },
        contains: [
          VARIABLE,
          STRING,
          hljs.REGEXP_MODE,
          hljs.HASH_COMMENT_MODE,
          hljs.NUMBER_MODE
        ]
      }
    };
    
    /***/ }),
    /* 419 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        keywords: 'false int abstract private char boolean static null if for true ' +
          'while long throw finally protected final return void enum else ' +
          'break new catch byte super case short default double public try this switch ' +
          'continue reverse firstfast firstonly forupdate nofetch sum avg minof maxof count ' +
          'order group by asc desc index hint like dispaly edit client server ttsbegin ' +
          'ttscommit str real date container anytype common div mod',
        contains: [
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE,
          hljs.C_NUMBER_MODE,
          {
            className: 'meta',
            begin: '#', end: '$'
          },
          {
            className: 'class',
            beginKeywords: 'class interface', end: '{', excludeEnd: true,
            illegal: ':',
            contains: [
              {beginKeywords: 'extends implements'},
              hljs.UNDERSCORE_TITLE_MODE
            ]
          }
        ]
      };
    };
    
    /***/ }),
    /* 420 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var VAR = {
        className: 'variable',
        variants: [
          {begin: /\$[\w\d#@][\w\d_]*/},
          {begin: /\$\{(.*?)}/}
        ]
      };
      var QUOTE_STRING = {
        className: 'string',
        begin: /"/, end: /"/,
        contains: [
          hljs.BACKSLASH_ESCAPE,
          VAR,
          {
            className: 'variable',
            begin: /\$\(/, end: /\)/,
            contains: [hljs.BACKSLASH_ESCAPE]
          }
        ]
      };
      var APOS_STRING = {
        className: 'string',
        begin: /'/, end: /'/
      };
    
      return {
        aliases: ['sh', 'zsh'],
        lexemes: /\b-?[a-z\._]+\b/,
        keywords: {
          keyword:
            'if then else elif fi for while in do done case esac function',
          literal:
            'true false',
          built_in:
            // Shell built-ins
            // http://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html
            'break cd continue eval exec exit export getopts hash pwd readonly return shift test times ' +
            'trap umask unset ' +
            // Bash built-ins
            'alias bind builtin caller command declare echo enable help let local logout mapfile printf ' +
            'read readarray source type typeset ulimit unalias ' +
            // Shell modifiers
            'set shopt ' +
            // Zsh built-ins
            'autoload bg bindkey bye cap chdir clone comparguments compcall compctl compdescribe compfiles ' +
            'compgroups compquote comptags comptry compvalues dirs disable disown echotc echoti emulate ' +
            'fc fg float functions getcap getln history integer jobs kill limit log noglob popd print ' +
            'pushd pushln rehash sched setcap setopt stat suspend ttyctl unfunction unhash unlimit ' +
            'unsetopt vared wait whence where which zcompile zformat zftp zle zmodload zparseopts zprof ' +
            'zpty zregexparse zsocket zstyle ztcp',
          _:
            '-ne -eq -lt -gt -f -d -e -s -l -a' // relevance booster
        },
        contains: [
          {
            className: 'meta',
            begin: /^#![^\n]+sh\s*$/,
            relevance: 10
          },
          {
            className: 'function',
            begin: /\w[\w\d_]*\s*\(\s*\)\s*\{/,
            returnBegin: true,
            contains: [hljs.inherit(hljs.TITLE_MODE, {begin: /\w[\w\d_]*/})],
            relevance: 0
          },
          hljs.HASH_COMMENT_MODE,
          QUOTE_STRING,
          APOS_STRING,
          VAR
        ]
      };
    };
    
    /***/ }),
    /* 421 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        case_insensitive: true,
        illegal: '^\.',
        // Support explicitely typed variables that end with $%! or #.
        lexemes: '[a-zA-Z][a-zA-Z0-9_\$\%\!\#]*',
        keywords: {
            keyword:
              'ABS ASC AND ATN AUTO|0 BEEP BLOAD|10 BSAVE|10 CALL CALLS CDBL CHAIN CHDIR CHR$|10 CINT CIRCLE ' +
              'CLEAR CLOSE CLS COLOR COM COMMON CONT COS CSNG CSRLIN CVD CVI CVS DATA DATE$ ' +
              'DEFDBL DEFINT DEFSNG DEFSTR DEF|0 SEG USR DELETE DIM DRAW EDIT END ENVIRON ENVIRON$ ' +
              'EOF EQV ERASE ERDEV ERDEV$ ERL ERR ERROR EXP FIELD FILES FIX FOR|0 FRE GET GOSUB|10 GOTO ' +
              'HEX$ IF|0 THEN ELSE|0 INKEY$ INP INPUT INPUT# INPUT$ INSTR IMP INT IOCTL IOCTL$ KEY ON ' +
              'OFF LIST KILL LEFT$ LEN LET LINE LLIST LOAD LOC LOCATE LOF LOG LPRINT USING LSET ' +
              'MERGE MID$ MKDIR MKD$ MKI$ MKS$ MOD NAME NEW NEXT NOISE NOT OCT$ ON OR PEN PLAY STRIG OPEN OPTION ' +
              'BASE OUT PAINT PALETTE PCOPY PEEK PMAP POINT POKE POS PRINT PRINT] PSET PRESET ' +
              'PUT RANDOMIZE READ REM RENUM RESET|0 RESTORE RESUME RETURN|0 RIGHT$ RMDIR RND RSET ' +
              'RUN SAVE SCREEN SGN SHELL SIN SOUND SPACE$ SPC SQR STEP STICK STOP STR$ STRING$ SWAP ' +
              'SYSTEM TAB TAN TIME$ TIMER TROFF TRON TO USR VAL VARPTR VARPTR$ VIEW WAIT WHILE ' +
              'WEND WIDTH WINDOW WRITE XOR'
        },
        contains: [
          hljs.QUOTE_STRING_MODE,
          hljs.COMMENT('REM', '$', {relevance: 10}),
          hljs.COMMENT('\'', '$', {relevance: 0}),
          {
            // Match line numbers
            className: 'symbol',
            begin: '^[0-9]+\ ',
            relevance: 10
          },
          {
            // Match typed numeric constants (1000, 12.34!, 1.2e5, 1.5#, 1.2D2)
            className: 'number',
            begin: '\\b([0-9]+[0-9edED\.]*[#\!]?)',
            relevance: 0
          },
          {
            // Match hexadecimal numbers (&Hxxxx)
            className: 'number',
            begin: '(\&[hH][0-9a-fA-F]{1,4})'
          },
          {
            // Match octal numbers (&Oxxxxxx)
            className: 'number',
            begin: '(\&[oO][0-7]{1,6})'
          }
        ]
      };
    };
    
    /***/ }),
    /* 422 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs){
      return {
        contains: [
          // Attribute
          {
            className: 'attribute',
            begin: /</, end: />/
          },
          // Specific
          {
            begin: /::=/,
            starts: {
              end: /$/,
              contains: [
                {
                  begin: /</, end: />/
                },
                // Common
                hljs.C_LINE_COMMENT_MODE,
                hljs.C_BLOCK_COMMENT_MODE,
                hljs.APOS_STRING_MODE,
                hljs.QUOTE_STRING_MODE
              ]
            }
          }
        ]
      };
    };
    
    /***/ }),
    /* 423 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs){
      var LITERAL = {
        className: 'literal',
        begin: '[\\+\\-]',
        relevance: 0
      };
      return {
        aliases: ['bf'],
        contains: [
          hljs.COMMENT(
            '[^\\[\\]\\.,\\+\\-<> \r\n]',
            '[\\[\\]\\.,\\+\\-<> \r\n]',
            {
              returnEnd: true,
              relevance: 0
            }
          ),
          {
            className: 'title',
            begin: '[\\[\\]]',
            relevance: 0
          },
          {
            className: 'string',
            begin: '[\\.,]',
            relevance: 0
          },
          {
            // this mode works as the only relevance counter
            begin: /\+\+|\-\-/, returnBegin: true,
            contains: [LITERAL]
          },
          LITERAL
        ]
      };
    };
    
    /***/ }),
    /* 424 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var KEYWORDS =
        'div mod in and or not xor asserterror begin case do downto else end exit for if of repeat then to ' +
        'until while with var';
      var LITERALS = 'false true';
      var COMMENT_MODES = [
        hljs.C_LINE_COMMENT_MODE,
        hljs.COMMENT(
          /\{/,
          /\}/,
          {
            relevance: 0
          }
        ),
        hljs.COMMENT(
          /\(\*/,
          /\*\)/,
          {
            relevance: 10
          }
        )
      ];
      var STRING = {
        className: 'string',
        begin: /'/, end: /'/,
        contains: [{begin: /''/}]
      };
      var CHAR_STRING = {
        className: 'string', begin: /(#\d+)+/
      };
      var DATE = {
          className: 'number',
          begin: '\\b\\d+(\\.\\d+)?(DT|D|T)',
          relevance: 0
      };
      var DBL_QUOTED_VARIABLE = {
          className: 'string', // not a string technically but makes sense to be highlighted in the same style
          begin: '"',
          end: '"'
      };
    
      var PROCEDURE = {
        className: 'function',
        beginKeywords: 'procedure', end: /[:;]/,
        keywords: 'procedure|10',
        contains: [
          hljs.TITLE_MODE,
          {
            className: 'params',
            begin: /\(/, end: /\)/,
            keywords: KEYWORDS,
            contains: [STRING, CHAR_STRING]
          }
        ].concat(COMMENT_MODES)
      };
    
      var OBJECT = {
        className: 'class',
        begin: 'OBJECT (Table|Form|Report|Dataport|Codeunit|XMLport|MenuSuite|Page|Query) (\\d+) ([^\\r\\n]+)',
        returnBegin: true,
        contains: [
          hljs.TITLE_MODE,
            PROCEDURE
        ]
      };
    
      return {
        case_insensitive: true,
        keywords: { keyword: KEYWORDS, literal: LITERALS },
        illegal: /\/\*/,
        contains: [
          STRING, CHAR_STRING,
          DATE, DBL_QUOTED_VARIABLE,
          hljs.NUMBER_MODE,
          OBJECT,
          PROCEDURE
        ]
      };
    };
    
    /***/ }),
    /* 425 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        aliases: ['capnp'],
        keywords: {
          keyword:
            'struct enum interface union group import using const annotation extends in of on as with from fixed',
          built_in:
            'Void Bool Int8 Int16 Int32 Int64 UInt8 UInt16 UInt32 UInt64 Float32 Float64 ' +
            'Text Data AnyPointer AnyStruct Capability List',
          literal:
            'true false'
        },
        contains: [
          hljs.QUOTE_STRING_MODE,
          hljs.NUMBER_MODE,
          hljs.HASH_COMMENT_MODE,
          {
            className: 'meta',
            begin: /@0x[\w\d]{16};/,
            illegal: /\n/
          },
          {
            className: 'symbol',
            begin: /@\d+\b/
          },
          {
            className: 'class',
            beginKeywords: 'struct enum', end: /\{/,
            illegal: /\n/,
            contains: [
              hljs.inherit(hljs.TITLE_MODE, {
                starts: {endsWithParent: true, excludeEnd: true} // hack: eating everything after the first title
              })
            ]
          },
          {
            className: 'class',
            beginKeywords: 'interface', end: /\{/,
            illegal: /\n/,
            contains: [
              hljs.inherit(hljs.TITLE_MODE, {
                starts: {endsWithParent: true, excludeEnd: true} // hack: eating everything after the first title
              })
            ]
          }
        ]
      };
    };
    
    /***/ }),
    /* 426 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      // 2.3. Identifiers and keywords
      var KEYWORDS =
        'assembly module package import alias class interface object given value ' +
        'assign void function new of extends satisfies abstracts in out return ' +
        'break continue throw assert dynamic if else switch case for while try ' +
        'catch finally then let this outer super is exists nonempty';
      // 7.4.1 Declaration Modifiers
      var DECLARATION_MODIFIERS =
        'shared abstract formal default actual variable late native deprecated' +
        'final sealed annotation suppressWarnings small';
      // 7.4.2 Documentation
      var DOCUMENTATION =
        'doc by license see throws tagged';
      var SUBST = {
        className: 'subst', excludeBegin: true, excludeEnd: true,
        begin: /``/, end: /``/,
        keywords: KEYWORDS,
        relevance: 10
      };
      var EXPRESSIONS = [
        {
          // verbatim string
          className: 'string',
          begin: '"""',
          end: '"""',
          relevance: 10
        },
        {
          // string literal or template
          className: 'string',
          begin: '"', end: '"',
          contains: [SUBST]
        },
        {
          // character literal
          className: 'string',
          begin: "'",
          end: "'"
        },
        {
          // numeric literal
          className: 'number',
          begin: '#[0-9a-fA-F_]+|\\$[01_]+|[0-9_]+(?:\\.[0-9_](?:[eE][+-]?\\d+)?)?[kMGTPmunpf]?',
          relevance: 0
        }
      ];
      SUBST.contains = EXPRESSIONS;
    
      return {
        keywords: {
          keyword: KEYWORDS + ' ' + DECLARATION_MODIFIERS,
          meta: DOCUMENTATION
        },
        illegal: '\\$[^01]|#[^0-9a-fA-F]',
        contains: [
          hljs.C_LINE_COMMENT_MODE,
          hljs.COMMENT('/\\*', '\\*/', {contains: ['self']}),
          {
            // compiler annotation
            className: 'meta',
            begin: '@[a-z]\\w*(?:\\:\"[^\"]*\")?'
          }
        ].concat(EXPRESSIONS)
      };
    };
    
    /***/ }),
    /* 427 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        aliases: ['clean','icl','dcl'],
        keywords: {
          keyword:
            'if let in with where case of class instance otherwise ' +
            'implementation definition system module from import qualified as ' +
            'special code inline foreign export ccall stdcall generic derive ' +
            'infix infixl infixr',
          literal:
            'True False'
        },
        contains: [
    
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE,
          hljs.C_NUMBER_MODE,
    
          {begin: '->|<-[|:]?|::|#!?|>>=|\\{\\||\\|\\}|:==|=:|\\.\\.|<>|`'} // relevance booster
        ]
      };
    };
    
    /***/ }),
    /* 428 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var keywords = {
        'builtin-name':
          // Clojure keywords
          'def defonce cond apply if-not if-let if not not= = < > <= >= == + / * - rem '+
          'quot neg? pos? delay? symbol? keyword? true? false? integer? empty? coll? list? '+
          'set? ifn? fn? associative? sequential? sorted? counted? reversible? number? decimal? '+
          'class? distinct? isa? float? rational? reduced? ratio? odd? even? char? seq? vector? '+
          'string? map? nil? contains? zero? instance? not-every? not-any? libspec? -> ->> .. . '+
          'inc compare do dotimes mapcat take remove take-while drop letfn drop-last take-last '+
          'drop-while while intern condp case reduced cycle split-at split-with repeat replicate '+
          'iterate range merge zipmap declare line-seq sort comparator sort-by dorun doall nthnext '+
          'nthrest partition eval doseq await await-for let agent atom send send-off release-pending-sends '+
          'add-watch mapv filterv remove-watch agent-error restart-agent set-error-handler error-handler '+
          'set-error-mode! error-mode shutdown-agents quote var fn loop recur throw try monitor-enter '+
          'monitor-exit defmacro defn defn- macroexpand macroexpand-1 for dosync and or '+
          'when when-not when-let comp juxt partial sequence memoize constantly complement identity assert '+
          'peek pop doto proxy defstruct first rest cons defprotocol cast coll deftype defrecord last butlast '+
          'sigs reify second ffirst fnext nfirst nnext defmulti defmethod meta with-meta ns in-ns create-ns import '+
          'refer keys select-keys vals key val rseq name namespace promise into transient persistent! conj! '+
          'assoc! dissoc! pop! disj! use class type num float double short byte boolean bigint biginteger '+
          'bigdec print-method print-dup throw-if printf format load compile get-in update-in pr pr-on newline '+
          'flush read slurp read-line subvec with-open memfn time re-find re-groups rand-int rand mod locking '+
          'assert-valid-fdecl alias resolve ref deref refset swap! reset! set-validator! compare-and-set! alter-meta! '+
          'reset-meta! commute get-validator alter ref-set ref-history-count ref-min-history ref-max-history ensure sync io! '+
          'new next conj set! to-array future future-call into-array aset gen-class reduce map filter find empty '+
          'hash-map hash-set sorted-map sorted-map-by sorted-set sorted-set-by vec vector seq flatten reverse assoc dissoc list '+
          'disj get union difference intersection extend extend-type extend-protocol int nth delay count concat chunk chunk-buffer '+
          'chunk-append chunk-first chunk-rest max min dec unchecked-inc-int unchecked-inc unchecked-dec-inc unchecked-dec unchecked-negate '+
          'unchecked-add-int unchecked-add unchecked-subtract-int unchecked-subtract chunk-next chunk-cons chunked-seq? prn vary-meta '+
          'lazy-seq spread list* str find-keyword keyword symbol gensym force rationalize'
       };
    
      var SYMBOLSTART = 'a-zA-Z_\\-!.?+*=<>&#\'';
      var SYMBOL_RE = '[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:]*';
      var SIMPLE_NUMBER_RE = '[-+]?\\d+(\\.\\d+)?';
    
      var SYMBOL = {
        begin: SYMBOL_RE,
        relevance: 0
      };
      var NUMBER = {
        className: 'number', begin: SIMPLE_NUMBER_RE,
        relevance: 0
      };
      var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null});
      var COMMENT = hljs.COMMENT(
        ';',
        '$',
        {
          relevance: 0
        }
      );
      var LITERAL = {
        className: 'literal',
        begin: /\b(true|false|nil)\b/
      };
      var COLLECTION = {
        begin: '[\\[\\{]', end: '[\\]\\}]'
      };
      var HINT = {
        className: 'comment',
        begin: '\\^' + SYMBOL_RE
      };
      var HINT_COL = hljs.COMMENT('\\^\\{', '\\}');
      var KEY = {
        className: 'symbol',
        begin: '[:]{1,2}' + SYMBOL_RE
      };
      var LIST = {
        begin: '\\(', end: '\\)'
      };
      var BODY = {
        endsWithParent: true,
        relevance: 0
      };
      var NAME = {
        keywords: keywords,
        lexemes: SYMBOL_RE,
        className: 'name', begin: SYMBOL_RE,
        starts: BODY
      };
      var DEFAULT_CONTAINS = [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL, SYMBOL];
    
      LIST.contains = [hljs.COMMENT('comment', ''), NAME, BODY];
      BODY.contains = DEFAULT_CONTAINS;
      COLLECTION.contains = DEFAULT_CONTAINS;
      HINT_COL.contains = [COLLECTION];
    
      return {
        aliases: ['clj'],
        illegal: /\S/,
        contains: [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL]
      }
    };
    
    /***/ }),
    /* 429 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        contains: [
          {
            className: 'meta',
            begin: /^([\w.-]+|\s*#_)=>/,
            starts: {
              end: /$/,
              subLanguage: 'clojure'
            }
          }
        ]
      }
    };
    
    /***/ }),
    /* 430 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        aliases: ['cmake.in'],
        case_insensitive: true,
        keywords: {
          keyword:
            'add_custom_command add_custom_target add_definitions add_dependencies ' +
            'add_executable add_library add_subdirectory add_test aux_source_directory ' +
            'break build_command cmake_minimum_required cmake_policy configure_file ' +
            'create_test_sourcelist define_property else elseif enable_language enable_testing ' +
            'endforeach endfunction endif endmacro endwhile execute_process export find_file ' +
            'find_library find_package find_path find_program fltk_wrap_ui foreach function ' +
            'get_cmake_property get_directory_property get_filename_component get_property ' +
            'get_source_file_property get_target_property get_test_property if include ' +
            'include_directories include_external_msproject include_regular_expression install ' +
            'link_directories load_cache load_command macro mark_as_advanced message option ' +
            'output_required_files project qt_wrap_cpp qt_wrap_ui remove_definitions return ' +
            'separate_arguments set set_directory_properties set_property ' +
            'set_source_files_properties set_target_properties set_tests_properties site_name ' +
            'source_group string target_link_libraries try_compile try_run unset variable_watch ' +
            'while build_name exec_program export_library_dependencies install_files ' +
            'install_programs install_targets link_libraries make_directory remove subdir_depends ' +
            'subdirs use_mangled_mesa utility_source variable_requires write_file ' +
            'qt5_use_modules qt5_use_package qt5_wrap_cpp on off true false and or ' +
            'equal less greater strless strgreater strequal matches'
        },
        contains: [
          {
            className: 'variable',
            begin: '\\${', end: '}'
          },
          hljs.HASH_COMMENT_MODE,
          hljs.QUOTE_STRING_MODE,
          hljs.NUMBER_MODE
        ]
      };
    };
    
    /***/ }),
    /* 431 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var KEYWORDS = {
        keyword:
          // JS keywords
          'in if for while finally new do return else break catch instanceof throw try this ' +
          'switch continue typeof delete debugger super yield import export from as default await ' +
          // Coffee keywords
          'then unless until loop of by when and or is isnt not',
        literal:
          // JS literals
          'true false null undefined ' +
          // Coffee literals
          'yes no on off',
        built_in:
          'npm require console print module global window document'
      };
      var JS_IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';
      var SUBST = {
        className: 'subst',
        begin: /#\{/, end: /}/,
        keywords: KEYWORDS
      };
      var EXPRESSIONS = [
        hljs.BINARY_NUMBER_MODE,
        hljs.inherit(hljs.C_NUMBER_MODE, {starts: {end: '(\\s*/)?', relevance: 0}}), // a number tries to eat the following slash to prevent treating it as a regexp
        {
          className: 'string',
          variants: [
            {
              begin: /'''/, end: /'''/,
              contains: [hljs.BACKSLASH_ESCAPE]
            },
            {
              begin: /'/, end: /'/,
              contains: [hljs.BACKSLASH_ESCAPE]
            },
            {
              begin: /"""/, end: /"""/,
              contains: [hljs.BACKSLASH_ESCAPE, SUBST]
            },
            {
              begin: /"/, end: /"/,
              contains: [hljs.BACKSLASH_ESCAPE, SUBST]
            }
          ]
        },
        {
          className: 'regexp',
          variants: [
            {
              begin: '///', end: '///',
              contains: [SUBST, hljs.HASH_COMMENT_MODE]
            },
            {
              begin: '//[gim]*',
              relevance: 0
            },
            {
              // regex can't start with space to parse x / 2 / 3 as two divisions
              // regex can't start with *, and it supports an "illegal" in the main mode
              begin: /\/(?![ *])(\\\/|.)*?\/[gim]*(?=\W|$)/
            }
          ]
        },
        {
          begin: '@' + JS_IDENT_RE // relevance booster
        },
        {
          subLanguage: 'javascript',
          excludeBegin: true, excludeEnd: true,
          variants: [
            {
              begin: '```', end: '```',
            },
            {
              begin: '`', end: '`',
            }
          ]
        }
      ];
      SUBST.contains = EXPRESSIONS;
    
      var TITLE = hljs.inherit(hljs.TITLE_MODE, {begin: JS_IDENT_RE});
      var PARAMS_RE = '(\\(.*\\))?\\s*\\B[-=]>';
      var PARAMS = {
        className: 'params',
        begin: '\\([^\\(]', returnBegin: true,
        /* We need another contained nameless mode to not have every nested
        pair of parens to be called "params" */
        contains: [{
          begin: /\(/, end: /\)/,
          keywords: KEYWORDS,
          contains: ['self'].concat(EXPRESSIONS)
        }]
      };
    
      return {
        aliases: ['coffee', 'cson', 'iced'],
        keywords: KEYWORDS,
        illegal: /\/\*/,
        contains: EXPRESSIONS.concat([
          hljs.COMMENT('###', '###'),
          hljs.HASH_COMMENT_MODE,
          {
            className: 'function',
            begin: '^\\s*' + JS_IDENT_RE + '\\s*=\\s*' + PARAMS_RE, end: '[-=]>',
            returnBegin: true,
            contains: [TITLE, PARAMS]
          },
          {
            // anonymous function start
            begin: /[:\(,=]\s*/,
            relevance: 0,
            contains: [
              {
                className: 'function',
                begin: PARAMS_RE, end: '[-=]>',
                returnBegin: true,
                contains: [PARAMS]
              }
            ]
          },
          {
            className: 'class',
            beginKeywords: 'class',
            end: '$',
            illegal: /[:="\[\]]/,
            contains: [
              {
                beginKeywords: 'extends',
                endsWithParent: true,
                illegal: /[:="\[\]]/,
                contains: [TITLE]
              },
              TITLE
            ]
          },
          {
            begin: JS_IDENT_RE + ':', end: ':',
            returnBegin: true, returnEnd: true,
            relevance: 0
          }
        ])
      };
    };
    
    /***/ }),
    /* 432 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        keywords: {
          keyword:
            '_ as at cofix else end exists exists2 fix for forall fun if IF in let ' +
            'match mod Prop return Set then Type using where with ' +
            'Abort About Add Admit Admitted All Arguments Assumptions Axiom Back BackTo ' +
            'Backtrack Bind Blacklist Canonical Cd Check Class Classes Close Coercion ' +
            'Coercions CoFixpoint CoInductive Collection Combined Compute Conjecture ' +
            'Conjectures Constant constr Constraint Constructors Context Corollary ' +
            'CreateHintDb Cut Declare Defined Definition Delimit Dependencies Dependent' +
            'Derive Drop eauto End Equality Eval Example Existential Existentials ' +
            'Existing Export exporting Extern Extract Extraction Fact Field Fields File ' +
            'Fixpoint Focus for From Function Functional Generalizable Global Goal Grab ' +
            'Grammar Graph Guarded Heap Hint HintDb Hints Hypotheses Hypothesis ident ' +
            'Identity If Immediate Implicit Import Include Inductive Infix Info Initial ' +
            'Inline Inspect Instance Instances Intro Intros Inversion Inversion_clear ' +
            'Language Left Lemma Let Libraries Library Load LoadPath Local Locate Ltac ML ' +
            'Mode Module Modules Monomorphic Morphism Next NoInline Notation Obligation ' +
            'Obligations Opaque Open Optimize Options Parameter Parameters Parametric ' +
            'Path Paths pattern Polymorphic Preterm Print Printing Program Projections ' +
            'Proof Proposition Pwd Qed Quit Rec Record Recursive Redirect Relation Remark ' +
            'Remove Require Reserved Reset Resolve Restart Rewrite Right Ring Rings Save ' +
            'Scheme Scope Scopes Script Search SearchAbout SearchHead SearchPattern ' +
            'SearchRewrite Section Separate Set Setoid Show Solve Sorted Step Strategies ' +
            'Strategy Structure SubClass Table Tables Tactic Term Test Theorem Time ' +
            'Timeout Transparent Type Typeclasses Types Undelimit Undo Unfocus Unfocused ' +
            'Unfold Universe Universes Unset Unshelve using Variable Variables Variant ' +
            'Verbose Visibility where with',
          built_in:
            'abstract absurd admit after apply as assert assumption at auto autorewrite ' +
            'autounfold before bottom btauto by case case_eq cbn cbv change ' +
            'classical_left classical_right clear clearbody cofix compare compute ' +
            'congruence constr_eq constructor contradict contradiction cut cutrewrite ' +
            'cycle decide decompose dependent destruct destruction dintuition ' +
            'discriminate discrR do double dtauto eapply eassumption eauto ecase ' +
            'econstructor edestruct ediscriminate eelim eexact eexists einduction ' +
            'einjection eleft elim elimtype enough equality erewrite eright ' +
            'esimplify_eq esplit evar exact exactly_once exfalso exists f_equal fail ' +
            'field field_simplify field_simplify_eq first firstorder fix fold fourier ' +
            'functional generalize generalizing gfail give_up has_evar hnf idtac in ' +
            'induction injection instantiate intro intro_pattern intros intuition ' +
            'inversion inversion_clear is_evar is_var lapply lazy left lia lra move ' +
            'native_compute nia nsatz omega once pattern pose progress proof psatz quote ' +
            'record red refine reflexivity remember rename repeat replace revert ' +
            'revgoals rewrite rewrite_strat right ring ring_simplify rtauto set ' +
            'setoid_reflexivity setoid_replace setoid_rewrite setoid_symmetry ' +
            'setoid_transitivity shelve shelve_unifiable simpl simple simplify_eq solve ' +
            'specialize split split_Rabs split_Rmult stepl stepr subst sum swap ' +
            'symmetry tactic tauto time timeout top transitivity trivial try tryif ' +
            'unfold unify until using vm_compute with'
        },
        contains: [
          hljs.QUOTE_STRING_MODE,
          hljs.COMMENT('\\(\\*', '\\*\\)'),
          hljs.C_NUMBER_MODE,
          {
            className: 'type',
            excludeBegin: true,
            begin: '\\|\\s*',
            end: '\\w+'
          },
          {begin: /[-=]>/} // relevance booster
        ]
      };
    };
    
    /***/ }),
    /* 433 */
    /***/ (function(module, exports) {
    
    module.exports = function cos (hljs) {
    
      var STRINGS = {
        className: 'string',
        variants: [
          {
            begin: '"',
            end: '"',
            contains: [{ // escaped
              begin: "\"\"",
              relevance: 0
            }]
          }
        ]
      };
    
      var NUMBERS = {
        className: "number",
        begin: "\\b(\\d+(\\.\\d*)?|\\.\\d+)",
        relevance: 0
      };
    
      var COS_KEYWORDS =
        'property parameter class classmethod clientmethod extends as break ' +
        'catch close continue do d|0 else elseif for goto halt hang h|0 if job ' +
        'j|0 kill k|0 lock l|0 merge new open quit q|0 read r|0 return set s|0 ' +
        'tcommit throw trollback try tstart use view while write w|0 xecute x|0 ' +
        'zkill znspace zn ztrap zwrite zw zzdump zzwrite print zbreak zinsert ' +
        'zload zprint zremove zsave zzprint mv mvcall mvcrt mvdim mvprint zquit ' +
        'zsync ascii';
    
        // registered function - no need in them due to all functions are highlighted,
        // but I'll just leave this here.
    
        //"$bit", "$bitcount",
        //"$bitfind", "$bitlogic", "$case", "$char", "$classmethod", "$classname",
        //"$compile", "$data", "$decimal", "$double", "$extract", "$factor",
        //"$find", "$fnumber", "$get", "$increment", "$inumber", "$isobject",
        //"$isvaliddouble", "$isvalidnum", "$justify", "$length", "$list",
        //"$listbuild", "$listdata", "$listfind", "$listfromstring", "$listget",
        //"$listlength", "$listnext", "$listsame", "$listtostring", "$listvalid",
        //"$locate", "$match", "$method", "$name", "$nconvert", "$next",
        //"$normalize", "$now", "$number", "$order", "$parameter", "$piece",
        //"$prefetchoff", "$prefetchon", "$property", "$qlength", "$qsubscript",
        //"$query", "$random", "$replace", "$reverse", "$sconvert", "$select",
        //"$sortbegin", "$sortend", "$stack", "$text", "$translate", "$view",
        //"$wascii", "$wchar", "$wextract", "$wfind", "$wiswide", "$wlength",
        //"$wreverse", "$xecute", "$zabs", "$zarccos", "$zarcsin", "$zarctan",
        //"$zcos", "$zcot", "$zcsc", "$zdate", "$zdateh", "$zdatetime",
        //"$zdatetimeh", "$zexp", "$zhex", "$zln", "$zlog", "$zpower", "$zsec",
        //"$zsin", "$zsqr", "$ztan", "$ztime", "$ztimeh", "$zboolean",
        //"$zconvert", "$zcrc", "$zcyc", "$zdascii", "$zdchar", "$zf",
        //"$ziswide", "$zlascii", "$zlchar", "$zname", "$zposition", "$zqascii",
        //"$zqchar", "$zsearch", "$zseek", "$zstrip", "$zwascii", "$zwchar",
        //"$zwidth", "$zwpack", "$zwbpack", "$zwunpack", "$zwbunpack", "$zzenkaku",
        //"$change", "$mv", "$mvat", "$mvfmt", "$mvfmts", "$mviconv",
        //"$mviconvs", "$mvinmat", "$mvlover", "$mvoconv", "$mvoconvs", "$mvraise",
        //"$mvtrans", "$mvv", "$mvname", "$zbitand", "$zbitcount", "$zbitfind",
        //"$zbitget", "$zbitlen", "$zbitnot", "$zbitor", "$zbitset", "$zbitstr",
        //"$zbitxor", "$zincrement", "$znext", "$zorder", "$zprevious", "$zsort",
        //"device", "$ecode", "$estack", "$etrap", "$halt", "$horolog",
        //"$io", "$job", "$key", "$namespace", "$principal", "$quit", "$roles",
        //"$storage", "$system", "$test", "$this", "$tlevel", "$username",
        //"$x", "$y", "$za", "$zb", "$zchild", "$zeof", "$zeos", "$zerror",
        //"$zhorolog", "$zio", "$zjob", "$zmode", "$znspace", "$zparent", "$zpi",
        //"$zpos", "$zreference", "$zstorage", "$ztimestamp", "$ztimezone",
        //"$ztrap", "$zversion"
    
      return {
        case_insensitive: true,
        aliases: ["cos", "cls"],
        keywords: COS_KEYWORDS,
        contains: [
          NUMBERS,
          STRINGS,
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          {
            className: "comment",
            begin: /;/, end: "$",
            relevance: 0
          },
          { // Functions and user-defined functions: write $ztime(60*60*3), $$myFunc(10), $$^Val(1)
            className: "built_in",
            begin: /(?:\$\$?|\.\.)\^?[a-zA-Z]+/
          },
          { // Macro command: quit $$$OK
            className: "built_in",
            begin: /\$\$\$[a-zA-Z]+/
          },
          { // Special (global) variables: write %request.Content; Built-in classes: %Library.Integer
            className: "built_in",
            begin: /%[a-z]+(?:\.[a-z]+)*/
          },
          { // Global variable: set ^globalName = 12 write ^globalName
            className: "symbol",
            begin: /\^%?[a-zA-Z][\w]*/
          },
          { // Some control constructions: do ##class(Package.ClassName).Method(), ##super()
            className: "keyword",
            begin: /##class|##super|#define|#dim/
          },
    
          // sub-languages: are not fully supported by hljs by 11/15/2015
          // left for the future implementation.
          {
            begin: /&sql\(/,    end: /\)/,
            excludeBegin: true, excludeEnd: true,
            subLanguage: "sql"
          },
          {
            begin: /&(js|jscript|javascript)</, end: />/,
            excludeBegin: true, excludeEnd: true,
            subLanguage: "javascript"
          },
          {
            // this brakes first and last tag, but this is the only way to embed a valid html
            begin: /&html<\s*</, end: />\s*>/,
            subLanguage: "xml"
          }
        ]
      };
    };
    
    /***/ }),
    /* 434 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var RESOURCES = 'primitive rsc_template';
    
      var COMMANDS = 'group clone ms master location colocation order fencing_topology ' +
          'rsc_ticket acl_target acl_group user role ' +
          'tag xml';
    
      var PROPERTY_SETS = 'property rsc_defaults op_defaults';
    
      var KEYWORDS = 'params meta operations op rule attributes utilization';
    
      var OPERATORS = 'read write deny defined not_defined in_range date spec in ' +
          'ref reference attribute type xpath version and or lt gt tag ' +
          'lte gte eq ne \\';
    
      var TYPES = 'number string';
    
      var LITERALS = 'Master Started Slave Stopped start promote demote stop monitor true false';
    
      return {
        aliases: ['crm', 'pcmk'],
        case_insensitive: true,
        keywords: {
          keyword: KEYWORDS + ' ' + OPERATORS + ' ' + TYPES,
          literal: LITERALS
        },
        contains: [
          hljs.HASH_COMMENT_MODE,
          {
            beginKeywords: 'node',
            starts: {
              end: '\\s*([\\w_-]+:)?',
              starts: {
                className: 'title',
                end: '\\s*[\\$\\w_][\\w_-]*'
              }
            }
          },
          {
            beginKeywords: RESOURCES,
            starts: {
              className: 'title',
              end: '\\s*[\\$\\w_][\\w_-]*',
              starts: {
                end: '\\s*@?[\\w_][\\w_\\.:-]*'
              }
            }
          },
          {
            begin: '\\b(' + COMMANDS.split(' ').join('|') + ')\\s+',
            keywords: COMMANDS,
            starts: {
              className: 'title',
              end: '[\\$\\w_][\\w_-]*'
            }
          },
          {
            beginKeywords: PROPERTY_SETS,
            starts: {
              className: 'title',
              end: '\\s*([\\w_-]+:)?'
            }
          },
          hljs.QUOTE_STRING_MODE,
          {
            className: 'meta',
            begin: '(ocf|systemd|service|lsb):[\\w_:-]+',
            relevance: 0
          },
          {
            className: 'number',
            begin: '\\b\\d+(\\.\\d+)?(ms|s|h|m)?',
            relevance: 0
          },
          {
            className: 'literal',
            begin: '[-]?(infinity|inf)',
            relevance: 0
          },
          {
            className: 'attr',
            begin: /([A-Za-z\$_\#][\w_-]+)=/,
            relevance: 0
          },
          {
            className: 'tag',
            begin: '</?',
            end: '/?>',
            relevance: 0
          }
        ]
      };
    };
    
    /***/ }),
    /* 435 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var NUM_SUFFIX = '(_[uif](8|16|32|64))?';
      var CRYSTAL_IDENT_RE = '[a-zA-Z_]\\w*[!?=]?';
      var RE_STARTER = '!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|' +
        '>>|>|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~';
      var CRYSTAL_METHOD_RE = '[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\][=?]?';
      var CRYSTAL_KEYWORDS = {
        keyword:
          'abstract alias as as? asm begin break case class def do else elsif end ensure enum extend for fun if ' +
          'include instance_sizeof is_a? lib macro module next nil? of out pointerof private protected rescue responds_to? ' +
          'return require select self sizeof struct super then type typeof union uninitialized unless until when while with yield ' +
          '__DIR__ __END_LINE__ __FILE__ __LINE__',
        literal: 'false nil true'
      };
      var SUBST = {
        className: 'subst',
        begin: '#{', end: '}',
        keywords: CRYSTAL_KEYWORDS
      };
      var EXPANSION = {
        className: 'template-variable',
        variants: [
          {begin: '\\{\\{', end: '\\}\\}'},
          {begin: '\\{%', end: '%\\}'}
        ],
        keywords: CRYSTAL_KEYWORDS
      };
    
      function recursiveParen(begin, end) {
        var
        contains = [{begin: begin, end: end}];
        contains[0].contains = contains;
        return contains;
      }
      var STRING = {
        className: 'string',
        contains: [hljs.BACKSLASH_ESCAPE, SUBST],
        variants: [
          {begin: /'/, end: /'/},
          {begin: /"/, end: /"/},
          {begin: /`/, end: /`/},
          {begin: '%w?\\(', end: '\\)', contains: recursiveParen('\\(', '\\)')},
          {begin: '%w?\\[', end: '\\]', contains: recursiveParen('\\[', '\\]')},
          {begin: '%w?{', end: '}', contains: recursiveParen('{', '}')},
          {begin: '%w?<', end: '>', contains: recursiveParen('<', '>')},
          {begin: '%w?/', end: '/'},
          {begin: '%w?%', end: '%'},
          {begin: '%w?-', end: '-'},
          {begin: '%w?\\|', end: '\\|'},
          {begin: /<<-\w+$/, end: /^\s*\w+$/},
        ],
        relevance: 0,
      };
      var Q_STRING = {
        className: 'string',
        variants: [
          {begin: '%q\\(', end: '\\)', contains: recursiveParen('\\(', '\\)')},
          {begin: '%q\\[', end: '\\]', contains: recursiveParen('\\[', '\\]')},
          {begin: '%q{', end: '}', contains: recursiveParen('{', '}')},
          {begin: '%q<', end: '>', contains: recursiveParen('<', '>')},
          {begin: '%q/', end: '/'},
          {begin: '%q%', end: '%'},
          {begin: '%q-', end: '-'},
          {begin: '%q\\|', end: '\\|'},
          {begin: /<<-'\w+'$/, end: /^\s*\w+$/},
        ],
        relevance: 0,
      };
      var REGEXP = {
        begin: '(' + RE_STARTER + ')\\s*',
        contains: [
          {
            className: 'regexp',
            contains: [hljs.BACKSLASH_ESCAPE, SUBST],
            variants: [
              {begin: '//[a-z]*', relevance: 0},
              {begin: '/', end: '/[a-z]*'},
              {begin: '%r\\(', end: '\\)', contains: recursiveParen('\\(', '\\)')},
              {begin: '%r\\[', end: '\\]', contains: recursiveParen('\\[', '\\]')},
              {begin: '%r{', end: '}', contains: recursiveParen('{', '}')},
              {begin: '%r<', end: '>', contains: recursiveParen('<', '>')},
              {begin: '%r/', end: '/'},
              {begin: '%r%', end: '%'},
              {begin: '%r-', end: '-'},
              {begin: '%r\\|', end: '\\|'},
            ]
          }
        ],
        relevance: 0
      };
      var REGEXP2 = {
        className: 'regexp',
        contains: [hljs.BACKSLASH_ESCAPE, SUBST],
        variants: [
          {begin: '%r\\(', end: '\\)', contains: recursiveParen('\\(', '\\)')},
          {begin: '%r\\[', end: '\\]', contains: recursiveParen('\\[', '\\]')},
          {begin: '%r{', end: '}', contains: recursiveParen('{', '}')},
          {begin: '%r<', end: '>', contains: recursiveParen('<', '>')},
          {begin: '%r/', end: '/'},
          {begin: '%r%', end: '%'},
          {begin: '%r-', end: '-'},
          {begin: '%r\\|', end: '\\|'},
        ],
        relevance: 0
      };
      var ATTRIBUTE = {
        className: 'meta',
        begin: '@\\[', end: '\\]',
        contains: [
          hljs.inherit(hljs.QUOTE_STRING_MODE, {className: 'meta-string'})
        ]
      };
      var CRYSTAL_DEFAULT_CONTAINS = [
        EXPANSION,
        STRING,
        Q_STRING,
        REGEXP,
        REGEXP2,
        ATTRIBUTE,
        hljs.HASH_COMMENT_MODE,
        {
          className: 'class',
          beginKeywords: 'class module struct', end: '$|;',
          illegal: /=/,
          contains: [
            hljs.HASH_COMMENT_MODE,
            hljs.inherit(hljs.TITLE_MODE, {begin: '[A-Za-z_]\\w*(::\\w+)*(\\?|\\!)?'}),
            {begin: '<'} // relevance booster for inheritance
          ]
        },
        {
          className: 'class',
          beginKeywords: 'lib enum union', end: '$|;',
          illegal: /=/,
          contains: [
            hljs.HASH_COMMENT_MODE,
            hljs.inherit(hljs.TITLE_MODE, {begin: '[A-Za-z_]\\w*(::\\w+)*(\\?|\\!)?'}),
          ],
          relevance: 10
        },
        {
          className: 'function',
          beginKeywords: 'def', end: /\B\b/,
          contains: [
            hljs.inherit(hljs.TITLE_MODE, {
              begin: CRYSTAL_METHOD_RE,
              endsParent: true
            })
          ]
        },
        {
          className: 'function',
          beginKeywords: 'fun macro', end: /\B\b/,
          contains: [
            hljs.inherit(hljs.TITLE_MODE, {
              begin: CRYSTAL_METHOD_RE,
              endsParent: true
            })
          ],
          relevance: 5
        },
        {
          className: 'symbol',
          begin: hljs.UNDERSCORE_IDENT_RE + '(\\!|\\?)?:',
          relevance: 0
        },
        {
          className: 'symbol',
          begin: ':',
          contains: [STRING, {begin: CRYSTAL_METHOD_RE}],
          relevance: 0
        },
        {
          className: 'number',
          variants: [
            { begin: '\\b0b([01_]*[01])' + NUM_SUFFIX },
            { begin: '\\b0o([0-7_]*[0-7])' + NUM_SUFFIX },
            { begin: '\\b0x([A-Fa-f0-9_]*[A-Fa-f0-9])' + NUM_SUFFIX },
            { begin: '\\b(([0-9][0-9_]*[0-9]|[0-9])(\\.[0-9_]*[0-9])?([eE][+-]?[0-9_]*[0-9])?)' + NUM_SUFFIX}
          ],
          relevance: 0
        }
      ];
      SUBST.contains = CRYSTAL_DEFAULT_CONTAINS;
      EXPANSION.contains = CRYSTAL_DEFAULT_CONTAINS.slice(1); // without EXPANSION
    
      return {
        aliases: ['cr'],
        lexemes: CRYSTAL_IDENT_RE,
        keywords: CRYSTAL_KEYWORDS,
        contains: CRYSTAL_DEFAULT_CONTAINS
      };
    };
    
    /***/ }),
    /* 436 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var KEYWORDS = {
        keyword:
          // Normal keywords.
          'abstract as base bool break byte case catch char checked const continue decimal ' +
          'default delegate do double enum event explicit extern finally fixed float ' +
          'for foreach goto if implicit in int interface internal is lock long nameof ' +
          'object operator out override params private protected public readonly ref sbyte ' +
          'sealed short sizeof stackalloc static string struct switch this try typeof ' +
          'uint ulong unchecked unsafe ushort using virtual void volatile while ' +
          // Contextual keywords.
          'add alias ascending async await by descending dynamic equals from get global group into join ' +
          'let on orderby partial remove select set value var where yield',
        literal:
          'null false true'
      };
    
      var VERBATIM_STRING = {
        className: 'string',
        begin: '@"', end: '"',
        contains: [{begin: '""'}]
      };
      var VERBATIM_STRING_NO_LF = hljs.inherit(VERBATIM_STRING, {illegal: /\n/});
      var SUBST = {
        className: 'subst',
        begin: '{', end: '}',
        keywords: KEYWORDS
      };
      var SUBST_NO_LF = hljs.inherit(SUBST, {illegal: /\n/});
      var INTERPOLATED_STRING = {
        className: 'string',
        begin: /\$"/, end: '"',
        illegal: /\n/,
        contains: [{begin: '{{'}, {begin: '}}'}, hljs.BACKSLASH_ESCAPE, SUBST_NO_LF]
      };
      var INTERPOLATED_VERBATIM_STRING = {
        className: 'string',
        begin: /\$@"/, end: '"',
        contains: [{begin: '{{'}, {begin: '}}'}, {begin: '""'}, SUBST]
      };
      var INTERPOLATED_VERBATIM_STRING_NO_LF = hljs.inherit(INTERPOLATED_VERBATIM_STRING, {
        illegal: /\n/,
        contains: [{begin: '{{'}, {begin: '}}'}, {begin: '""'}, SUBST_NO_LF]
      });
      SUBST.contains = [
        INTERPOLATED_VERBATIM_STRING,
        INTERPOLATED_STRING,
        VERBATIM_STRING,
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.C_NUMBER_MODE,
        hljs.C_BLOCK_COMMENT_MODE
      ];
      SUBST_NO_LF.contains = [
        INTERPOLATED_VERBATIM_STRING_NO_LF,
        INTERPOLATED_STRING,
        VERBATIM_STRING_NO_LF,
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.C_NUMBER_MODE,
        hljs.inherit(hljs.C_BLOCK_COMMENT_MODE, {illegal: /\n/})
      ];
      var STRING = {
        variants: [
          INTERPOLATED_VERBATIM_STRING,
          INTERPOLATED_STRING,
          VERBATIM_STRING,
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE
        ]
      };
    
      var TYPE_IDENT_RE = hljs.IDENT_RE + '(<' + hljs.IDENT_RE + '(\\s*,\\s*' + hljs.IDENT_RE + ')*>)?(\\[\\])?';
    
      return {
        aliases: ['csharp'],
        keywords: KEYWORDS,
        illegal: /::/,
        contains: [
          hljs.COMMENT(
            '///',
            '$',
            {
              returnBegin: true,
              contains: [
                {
                  className: 'doctag',
                  variants: [
                    {
                      begin: '///', relevance: 0
                    },
                    {
                      begin: '<!--|-->'
                    },
                    {
                      begin: '</?', end: '>'
                    }
                  ]
                }
              ]
            }
          ),
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          {
            className: 'meta',
            begin: '#', end: '$',
            keywords: {
              'meta-keyword': 'if else elif endif define undef warning error line region endregion pragma checksum'
            }
          },
          STRING,
          hljs.C_NUMBER_MODE,
          {
            beginKeywords: 'class interface', end: /[{;=]/,
            illegal: /[^\s:]/,
            contains: [
              hljs.TITLE_MODE,
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE
            ]
          },
          {
            beginKeywords: 'namespace', end: /[{;=]/,
            illegal: /[^\s:]/,
            contains: [
              hljs.inherit(hljs.TITLE_MODE, {begin: '[a-zA-Z](\\.?\\w)*'}),
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE
            ]
          },
          {
            // [Attributes("")]
            className: 'meta',
            begin: '^\\s*\\[', excludeBegin: true, end: '\\]', excludeEnd: true,
            contains: [
              {className: 'meta-string', begin: /"/, end: /"/}
            ]
          },
          {
            // Expression keywords prevent 'keyword Name(...)' from being
            // recognized as a function definition
            beginKeywords: 'new return throw await else',
            relevance: 0
          },
          {
            className: 'function',
            begin: '(' + TYPE_IDENT_RE + '\\s+)+' + hljs.IDENT_RE + '\\s*\\(', returnBegin: true,
            end: /[{;=]/, excludeEnd: true,
            keywords: KEYWORDS,
            contains: [
              {
                begin: hljs.IDENT_RE + '\\s*\\(', returnBegin: true,
                contains: [hljs.TITLE_MODE],
                relevance: 0
              },
              {
                className: 'params',
                begin: /\(/, end: /\)/,
                excludeBegin: true,
                excludeEnd: true,
                keywords: KEYWORDS,
                relevance: 0,
                contains: [
                  STRING,
                  hljs.C_NUMBER_MODE,
                  hljs.C_BLOCK_COMMENT_MODE
                ]
              },
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE
            ]
          }
        ]
      };
    };
    
    /***/ }),
    /* 437 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        case_insensitive: false,
        lexemes: '[a-zA-Z][a-zA-Z0-9_-]*',
        keywords: {
          keyword: 'base-uri child-src connect-src default-src font-src form-action' +
            ' frame-ancestors frame-src img-src media-src object-src plugin-types' +
            ' report-uri sandbox script-src style-src', 
        },
        contains: [
        {
          className: 'string',
          begin: "'", end: "'"
        },
        {
          className: 'attribute',
          begin: '^Content', end: ':', excludeEnd: true,
        },
        ]
      };
    };
    
    /***/ }),
    /* 438 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var IDENT_RE = '[a-zA-Z-][a-zA-Z0-9_-]*';
      var RULE = {
        begin: /[A-Z\_\.\-]+\s*:/, returnBegin: true, end: ';', endsWithParent: true,
        contains: [
          {
            className: 'attribute',
            begin: /\S/, end: ':', excludeEnd: true,
            starts: {
              endsWithParent: true, excludeEnd: true,
              contains: [
                {
                  begin: /[\w-]+\(/, returnBegin: true,
                  contains: [
                    {
                      className: 'built_in',
                      begin: /[\w-]+/
                    },
                    {
                      begin: /\(/, end: /\)/,
                      contains: [
                        hljs.APOS_STRING_MODE,
                        hljs.QUOTE_STRING_MODE
                      ]
                    }
                  ]
                },
                hljs.CSS_NUMBER_MODE,
                hljs.QUOTE_STRING_MODE,
                hljs.APOS_STRING_MODE,
                hljs.C_BLOCK_COMMENT_MODE,
                {
                  className: 'number', begin: '#[0-9A-Fa-f]+'
                },
                {
                  className: 'meta', begin: '!important'
                }
              ]
            }
          }
        ]
      };
    
      return {
        case_insensitive: true,
        illegal: /[=\/|'\$]/,
        contains: [
          hljs.C_BLOCK_COMMENT_MODE,
          {
            className: 'selector-id', begin: /#[A-Za-z0-9_-]+/
          },
          {
            className: 'selector-class', begin: /\.[A-Za-z0-9_-]+/
          },
          {
            className: 'selector-attr',
            begin: /\[/, end: /\]/,
            illegal: '$'
          },
          {
            className: 'selector-pseudo',
            begin: /:(:)?[a-zA-Z0-9\_\-\+\(\)"'.]+/
          },
          {
            begin: '@(font-face|page)',
            lexemes: '[a-z-]+',
            keywords: 'font-face page'
          },
          {
            begin: '@', end: '[{;]', // at_rule eating first "{" is a good thing
                                     // because it doesn’t let it to be parsed as
                                     // a rule set but instead drops parser into
                                     // the default mode which is how it should be.
            illegal: /:/, // break on Less variables @var: ...
            contains: [
              {
                className: 'keyword',
                begin: /\w+/
              },
              {
                begin: /\s/, endsWithParent: true, excludeEnd: true,
                relevance: 0,
                contains: [
                  hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE,
                  hljs.CSS_NUMBER_MODE
                ]
              }
            ]
          },
          {
            className: 'selector-tag', begin: IDENT_RE,
            relevance: 0
          },
          {
            begin: '{', end: '}',
            illegal: /\S/,
            contains: [
              hljs.C_BLOCK_COMMENT_MODE,
              RULE,
            ]
          }
        ]
      };
    };
    
    /***/ }),
    /* 439 */
    /***/ (function(module, exports) {
    
    module.exports = /**
     * Known issues:
     *
     * - invalid hex string literals will be recognized as a double quoted strings
     *   but 'x' at the beginning of string will not be matched
     *
     * - delimited string literals are not checked for matching end delimiter
     *   (not possible to do with js regexp)
     *
     * - content of token string is colored as a string (i.e. no keyword coloring inside a token string)
     *   also, content of token string is not validated to contain only valid D tokens
     *
     * - special token sequence rule is not strictly following D grammar (anything following #line
     *   up to the end of line is matched as special token sequence)
     */
    
    function(hljs) {
      /**
       * Language keywords
       *
       * @type {Object}
       */
      var D_KEYWORDS = {
        keyword:
          'abstract alias align asm assert auto body break byte case cast catch class ' +
          'const continue debug default delete deprecated do else enum export extern final ' +
          'finally for foreach foreach_reverse|10 goto if immutable import in inout int ' +
          'interface invariant is lazy macro mixin module new nothrow out override package ' +
          'pragma private protected public pure ref return scope shared static struct ' +
          'super switch synchronized template this throw try typedef typeid typeof union ' +
          'unittest version void volatile while with __FILE__ __LINE__ __gshared|10 ' +
          '__thread __traits __DATE__ __EOF__ __TIME__ __TIMESTAMP__ __VENDOR__ __VERSION__',
        built_in:
          'bool cdouble cent cfloat char creal dchar delegate double dstring float function ' +
          'idouble ifloat ireal long real short string ubyte ucent uint ulong ushort wchar ' +
          'wstring',
        literal:
          'false null true'
      };
    
      /**
       * Number literal regexps
       *
       * @type {String}
       */
      var decimal_integer_re = '(0|[1-9][\\d_]*)',
        decimal_integer_nosus_re = '(0|[1-9][\\d_]*|\\d[\\d_]*|[\\d_]+?\\d)',
        binary_integer_re = '0[bB][01_]+',
        hexadecimal_digits_re = '([\\da-fA-F][\\da-fA-F_]*|_[\\da-fA-F][\\da-fA-F_]*)',
        hexadecimal_integer_re = '0[xX]' + hexadecimal_digits_re,
    
        decimal_exponent_re = '([eE][+-]?' + decimal_integer_nosus_re + ')',
        decimal_float_re = '(' + decimal_integer_nosus_re + '(\\.\\d*|' + decimal_exponent_re + ')|' +
                    '\\d+\\.' + decimal_integer_nosus_re + decimal_integer_nosus_re + '|' +
                    '\\.' + decimal_integer_re + decimal_exponent_re + '?' +
                  ')',
        hexadecimal_float_re = '(0[xX](' +
                      hexadecimal_digits_re + '\\.' + hexadecimal_digits_re + '|'+
                      '\\.?' + hexadecimal_digits_re +
                     ')[pP][+-]?' + decimal_integer_nosus_re + ')',
    
        integer_re = '(' +
          decimal_integer_re + '|' +
          binary_integer_re  + '|' +
           hexadecimal_integer_re   +
        ')',
    
        float_re = '(' +
          hexadecimal_float_re + '|' +
          decimal_float_re  +
        ')';
    
      /**
       * Escape sequence supported in D string and character literals
       *
       * @type {String}
       */
      var escape_sequence_re = '\\\\(' +
                  '[\'"\\?\\\\abfnrtv]|' +  // common escapes
                  'u[\\dA-Fa-f]{4}|' +     // four hex digit unicode codepoint
                  '[0-7]{1,3}|' +       // one to three octal digit ascii char code
                  'x[\\dA-Fa-f]{2}|' +    // two hex digit ascii char code
                  'U[\\dA-Fa-f]{8}' +      // eight hex digit unicode codepoint
                  ')|' +
                  '&[a-zA-Z\\d]{2,};';      // named character entity
    
      /**
       * D integer number literals
       *
       * @type {Object}
       */
      var D_INTEGER_MODE = {
        className: 'number',
          begin: '\\b' + integer_re + '(L|u|U|Lu|LU|uL|UL)?',
          relevance: 0
      };
    
      /**
       * [D_FLOAT_MODE description]
       * @type {Object}
       */
      var D_FLOAT_MODE = {
        className: 'number',
        begin: '\\b(' +
            float_re + '([fF]|L|i|[fF]i|Li)?|' +
            integer_re + '(i|[fF]i|Li)' +
          ')',
        relevance: 0
      };
    
      /**
       * D character literal
       *
       * @type {Object}
       */
      var D_CHARACTER_MODE = {
        className: 'string',
        begin: '\'(' + escape_sequence_re + '|.)', end: '\'',
        illegal: '.'
      };
    
      /**
       * D string escape sequence
       *
       * @type {Object}
       */
      var D_ESCAPE_SEQUENCE = {
        begin: escape_sequence_re,
        relevance: 0
      };
    
      /**
       * D double quoted string literal
       *
       * @type {Object}
       */
      var D_STRING_MODE = {
        className: 'string',
        begin: '"',
        contains: [D_ESCAPE_SEQUENCE],
        end: '"[cwd]?'
      };
    
      /**
       * D wysiwyg and delimited string literals
       *
       * @type {Object}
       */
      var D_WYSIWYG_DELIMITED_STRING_MODE = {
        className: 'string',
        begin: '[rq]"',
        end: '"[cwd]?',
        relevance: 5
      };
    
      /**
       * D alternate wysiwyg string literal
       *
       * @type {Object}
       */
      var D_ALTERNATE_WYSIWYG_STRING_MODE = {
        className: 'string',
        begin: '`',
        end: '`[cwd]?'
      };
    
      /**
       * D hexadecimal string literal
       *
       * @type {Object}
       */
      var D_HEX_STRING_MODE = {
        className: 'string',
        begin: 'x"[\\da-fA-F\\s\\n\\r]*"[cwd]?',
        relevance: 10
      };
    
      /**
       * D delimited string literal
       *
       * @type {Object}
       */
      var D_TOKEN_STRING_MODE = {
        className: 'string',
        begin: 'q"\\{',
        end: '\\}"'
      };
    
      /**
       * Hashbang support
       *
       * @type {Object}
       */
      var D_HASHBANG_MODE = {
        className: 'meta',
        begin: '^#!',
        end: '$',
        relevance: 5
      };
    
      /**
       * D special token sequence
       *
       * @type {Object}
       */
      var D_SPECIAL_TOKEN_SEQUENCE_MODE = {
        className: 'meta',
        begin: '#(line)',
        end: '$',
        relevance: 5
      };
    
      /**
       * D attributes
       *
       * @type {Object}
       */
      var D_ATTRIBUTE_MODE = {
        className: 'keyword',
        begin: '@[a-zA-Z_][a-zA-Z_\\d]*'
      };
    
      /**
       * D nesting comment
       *
       * @type {Object}
       */
      var D_NESTING_COMMENT_MODE = hljs.COMMENT(
        '\\/\\+',
        '\\+\\/',
        {
          contains: ['self'],
          relevance: 10
        }
      );
    
      return {
        lexemes: hljs.UNDERSCORE_IDENT_RE,
        keywords: D_KEYWORDS,
        contains: [
          hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE,
            D_NESTING_COMMENT_MODE,
            D_HEX_STRING_MODE,
            D_STRING_MODE,
            D_WYSIWYG_DELIMITED_STRING_MODE,
            D_ALTERNATE_WYSIWYG_STRING_MODE,
            D_TOKEN_STRING_MODE,
            D_FLOAT_MODE,
            D_INTEGER_MODE,
            D_CHARACTER_MODE,
            D_HASHBANG_MODE,
            D_SPECIAL_TOKEN_SEQUENCE_MODE,
            D_ATTRIBUTE_MODE
        ]
      };
    };
    
    /***/ }),
    /* 440 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        aliases: ['md', 'mkdown', 'mkd'],
        contains: [
          // highlight headers
          {
            className: 'section',
            variants: [
              { begin: '^#{1,6}', end: '$' },
              { begin: '^.+?\\n[=-]{2,}$' }
            ]
          },
          // inline html
          {
            begin: '<', end: '>',
            subLanguage: 'xml',
            relevance: 0
          },
          // lists (indicators only)
          {
            className: 'bullet',
            begin: '^([*+-]|(\\d+\\.))\\s+'
          },
          // strong segments
          {
            className: 'strong',
            begin: '[*_]{2}.+?[*_]{2}'
          },
          // emphasis segments
          {
            className: 'emphasis',
            variants: [
              { begin: '\\*.+?\\*' },
              { begin: '_.+?_'
              , relevance: 0
              }
            ]
          },
          // blockquotes
          {
            className: 'quote',
            begin: '^>\\s+', end: '$'
          },
          // code snippets
          {
            className: 'code',
            variants: [
              {
                begin: '^```\w*\s*$', end: '^```\s*$'
              },
              {
                begin: '`.+?`'
              },
              {
                begin: '^( {4}|\t)', end: '$',
                relevance: 0
              }
            ]
          },
          // horizontal rules
          {
            begin: '^[-\\*]{3,}', end: '$'
          },
          // using links - title and link
          {
            begin: '\\[.+?\\][\\(\\[].*?[\\)\\]]',
            returnBegin: true,
            contains: [
              {
                className: 'string',
                begin: '\\[', end: '\\]',
                excludeBegin: true,
                returnEnd: true,
                relevance: 0
              },
              {
                className: 'link',
                begin: '\\]\\(', end: '\\)',
                excludeBegin: true, excludeEnd: true
              },
              {
                className: 'symbol',
                begin: '\\]\\[', end: '\\]',
                excludeBegin: true, excludeEnd: true
              }
            ],
            relevance: 10
          },
          {
            begin: /^\[[^\n]+\]:/,
            returnBegin: true,
            contains: [
              {
                className: 'symbol',
                begin: /\[/, end: /\]/,
                excludeBegin: true, excludeEnd: true
              },
              {
                className: 'link',
                begin: /:\s*/, end: /$/,
                excludeBegin: true
              }
            ]
          }
        ]
      };
    };
    
    /***/ }),
    /* 441 */
    /***/ (function(module, exports) {
    
    module.exports = function (hljs) {
      var SUBST = {
        className: 'subst',
        begin: '\\$\\{', end: '}',
        keywords: 'true false null this is new super'
      };
    
      var STRING = {
        className: 'string',
        variants: [
          {
            begin: 'r\'\'\'', end: '\'\'\''
          },
          {
            begin: 'r"""', end: '"""'
          },
          {
            begin: 'r\'', end: '\'',
            illegal: '\\n'
          },
          {
            begin: 'r"', end: '"',
            illegal: '\\n'
          },
          {
            begin: '\'\'\'', end: '\'\'\'',
            contains: [hljs.BACKSLASH_ESCAPE, SUBST]
          },
          {
            begin: '"""', end: '"""',
            contains: [hljs.BACKSLASH_ESCAPE, SUBST]
          },
          {
            begin: '\'', end: '\'',
            illegal: '\\n',
            contains: [hljs.BACKSLASH_ESCAPE, SUBST]
          },
          {
            begin: '"', end: '"',
            illegal: '\\n',
            contains: [hljs.BACKSLASH_ESCAPE, SUBST]
          }
        ]
      };
      SUBST.contains = [
        hljs.C_NUMBER_MODE, STRING
      ];
    
      var KEYWORDS = {
        keyword: 'assert async await break case catch class const continue default do else enum extends false final ' +
          'finally for if in is new null rethrow return super switch sync this throw true try var void while with yield ' +
          'abstract as dynamic export external factory get implements import library operator part set static typedef',
        built_in:
          // dart:core
          'print Comparable DateTime Duration Function Iterable Iterator List Map Match Null Object Pattern RegExp Set ' +
          'Stopwatch String StringBuffer StringSink Symbol Type Uri bool double int num ' +
          // dart:html
          'document window querySelector querySelectorAll Element ElementList'
      };
    
      return {
        keywords: KEYWORDS,
        contains: [
          STRING,
          hljs.COMMENT(
            '/\\*\\*',
            '\\*/',
            {
              subLanguage: 'markdown'
            }
          ),
          hljs.COMMENT(
            '///',
            '$',
            {
              subLanguage: 'markdown'
            }
          ),
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          {
            className: 'class',
            beginKeywords: 'class interface', end: '{', excludeEnd: true,
            contains: [
              {
                beginKeywords: 'extends implements'
              },
              hljs.UNDERSCORE_TITLE_MODE
            ]
          },
          hljs.C_NUMBER_MODE,
          {
            className: 'meta', begin: '@[A-Za-z]+'
          },
          {
            begin: '=>' // No markup, just a relevance booster
          }
        ]
      }
    };
    
    /***/ }),
    /* 442 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var KEYWORDS =
        'exports register file shl array record property for mod while set ally label uses raise not ' +
        'stored class safecall var interface or private static exit index inherited to else stdcall ' +
        'override shr asm far resourcestring finalization packed virtual out and protected library do ' +
        'xorwrite goto near function end div overload object unit begin string on inline repeat until ' +
        'destructor write message program with read initialization except default nil if case cdecl in ' +
        'downto threadvar of try pascal const external constructor type public then implementation ' +
        'finally published procedure absolute reintroduce operator as is abstract alias assembler ' +
        'bitpacked break continue cppdecl cvar enumerator experimental platform deprecated ' +
        'unimplemented dynamic export far16 forward generic helper implements interrupt iochecks ' +
        'local name nodefault noreturn nostackframe oldfpccall otherwise saveregisters softfloat ' +
        'specialize strict unaligned varargs ';
      var COMMENT_MODES = [
        hljs.C_LINE_COMMENT_MODE,
        hljs.COMMENT(/\{/, /\}/, {relevance: 0}),
        hljs.COMMENT(/\(\*/, /\*\)/, {relevance: 10})
      ];
      var DIRECTIVE = {
        className: 'meta',
        variants: [
          {begin: /\{\$/, end: /\}/},
          {begin: /\(\*\$/, end: /\*\)/}
        ]
      };
      var STRING = {
        className: 'string',
        begin: /'/, end: /'/,
        contains: [{begin: /''/}]
      };
      var CHAR_STRING = {
        className: 'string', begin: /(#\d+)+/
      };
      var CLASS = {
        begin: hljs.IDENT_RE + '\\s*=\\s*class\\s*\\(', returnBegin: true,
        contains: [
          hljs.TITLE_MODE
        ]
      };
      var FUNCTION = {
        className: 'function',
        beginKeywords: 'function constructor destructor procedure', end: /[:;]/,
        keywords: 'function constructor|10 destructor|10 procedure|10',
        contains: [
          hljs.TITLE_MODE,
          {
            className: 'params',
            begin: /\(/, end: /\)/,
            keywords: KEYWORDS,
            contains: [STRING, CHAR_STRING, DIRECTIVE].concat(COMMENT_MODES)
          },
          DIRECTIVE
        ].concat(COMMENT_MODES)
      };
      return {
        aliases: ['dpr', 'dfm', 'pas', 'pascal', 'freepascal', 'lazarus', 'lpr', 'lfm'],
        case_insensitive: true,
        keywords: KEYWORDS,
        illegal: /"|\$[G-Zg-z]|\/\*|<\/|\|/,
        contains: [
          STRING, CHAR_STRING,
          hljs.NUMBER_MODE,
          CLASS,
          FUNCTION,
          DIRECTIVE
        ].concat(COMMENT_MODES)
      };
    };
    
    /***/ }),
    /* 443 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        aliases: ['patch'],
        contains: [
          {
            className: 'meta',
            relevance: 10,
            variants: [
              {begin: /^@@ +\-\d+,\d+ +\+\d+,\d+ +@@$/},
              {begin: /^\*\*\* +\d+,\d+ +\*\*\*\*$/},
              {begin: /^\-\-\- +\d+,\d+ +\-\-\-\-$/}
            ]
          },
          {
            className: 'comment',
            variants: [
              {begin: /Index: /, end: /$/},
              {begin: /={3,}/, end: /$/},
              {begin: /^\-{3}/, end: /$/},
              {begin: /^\*{3} /, end: /$/},
              {begin: /^\+{3}/, end: /$/},
              {begin: /\*{5}/, end: /\*{5}$/}
            ]
          },
          {
            className: 'addition',
            begin: '^\\+', end: '$'
          },
          {
            className: 'deletion',
            begin: '^\\-', end: '$'
          },
          {
            className: 'addition',
            begin: '^\\!', end: '$'
          }
        ]
      };
    };
    
    /***/ }),
    /* 444 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var FILTER = {
        begin: /\|[A-Za-z]+:?/,
        keywords: {
          name:
            'truncatewords removetags linebreaksbr yesno get_digit timesince random striptags ' +
            'filesizeformat escape linebreaks length_is ljust rjust cut urlize fix_ampersands ' +
            'title floatformat capfirst pprint divisibleby add make_list unordered_list urlencode ' +
            'timeuntil urlizetrunc wordcount stringformat linenumbers slice date dictsort ' +
            'dictsortreversed default_if_none pluralize lower join center default ' +
            'truncatewords_html upper length phone2numeric wordwrap time addslashes slugify first ' +
            'escapejs force_escape iriencode last safe safeseq truncatechars localize unlocalize ' +
            'localtime utc timezone'
        },
        contains: [
          hljs.QUOTE_STRING_MODE,
          hljs.APOS_STRING_MODE
        ]
      };
    
      return {
        aliases: ['jinja'],
        case_insensitive: true,
        subLanguage: 'xml',
        contains: [
          hljs.COMMENT(/\{%\s*comment\s*%}/, /\{%\s*endcomment\s*%}/),
          hljs.COMMENT(/\{#/, /#}/),
          {
            className: 'template-tag',
            begin: /\{%/, end: /%}/,
            contains: [
              {
                className: 'name',
                begin: /\w+/,
                keywords: {
                  name:
                    'comment endcomment load templatetag ifchanged endifchanged if endif firstof for ' +
                    'endfor ifnotequal endifnotequal widthratio extends include spaceless ' +
                    'endspaceless regroup ifequal endifequal ssi now with cycle url filter ' +
                    'endfilter debug block endblock else autoescape endautoescape csrf_token empty elif ' +
                    'endwith static trans blocktrans endblocktrans get_static_prefix get_media_prefix ' +
                    'plural get_current_language language get_available_languages ' +
                    'get_current_language_bidi get_language_info get_language_info_list localize ' +
                    'endlocalize localtime endlocaltime timezone endtimezone get_current_timezone ' +
                    'verbatim'
                },
                starts: {
                  endsWithParent: true,
                  keywords: 'in by as',
                  contains: [FILTER],
                  relevance: 0
                }
              }
            ]
          },
          {
            className: 'template-variable',
            begin: /\{\{/, end: /}}/,
            contains: [FILTER]
          }
        ]
      };
    };
    
    /***/ }),
    /* 445 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        aliases: ['bind', 'zone'],
        keywords: {
          keyword:
            'IN A AAAA AFSDB APL CAA CDNSKEY CDS CERT CNAME DHCID DLV DNAME DNSKEY DS HIP IPSECKEY KEY KX ' +
            'LOC MX NAPTR NS NSEC NSEC3 NSEC3PARAM PTR RRSIG RP SIG SOA SRV SSHFP TA TKEY TLSA TSIG TXT'
        },
        contains: [
          hljs.COMMENT(';', '$', {relevance: 0}),
          {
            className: 'meta',
            begin: /^\$(TTL|GENERATE|INCLUDE|ORIGIN)\b/
          },
          // IPv6
          {
            className: 'number',
            begin: '((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))\\b'
          },
          // IPv4
          {
            className: 'number',
            begin: '((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\b'
          },
          hljs.inherit(hljs.NUMBER_MODE, {begin: /\b\d+[dhwm]?/})
        ]
      };
    };
    
    /***/ }),
    /* 446 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        aliases: ['docker'],
        case_insensitive: true,
        keywords: 'from maintainer expose env arg user onbuild stopsignal',
        contains: [
          hljs.HASH_COMMENT_MODE,
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE,
          hljs.NUMBER_MODE,
          {
            beginKeywords: 'run cmd entrypoint volume add copy workdir label healthcheck shell',
            starts: {
              end: /[^\\]\n/,
              subLanguage: 'bash'
            }
          }
        ],
        illegal: '</'
      }
    };
    
    /***/ }),
    /* 447 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var COMMENT = hljs.COMMENT(
        /^\s*@?rem\b/, /$/,
        {
          relevance: 10
        }
      );
      var LABEL = {
        className: 'symbol',
        begin: '^\\s*[A-Za-z._?][A-Za-z0-9_$#@~.?]*(:|\\s+label)',
        relevance: 0
      };
      return {
        aliases: ['bat', 'cmd'],
        case_insensitive: true,
        illegal: /\/\*/,
        keywords: {
          keyword:
            'if else goto for in do call exit not exist errorlevel defined ' +
            'equ neq lss leq gtr geq',
          built_in:
            'prn nul lpt3 lpt2 lpt1 con com4 com3 com2 com1 aux ' +
            'shift cd dir echo setlocal endlocal set pause copy ' +
            'append assoc at attrib break cacls cd chcp chdir chkdsk chkntfs cls cmd color ' +
            'comp compact convert date dir diskcomp diskcopy doskey erase fs ' +
            'find findstr format ftype graftabl help keyb label md mkdir mode more move path ' +
            'pause print popd pushd promt rd recover rem rename replace restore rmdir shift' +
            'sort start subst time title tree type ver verify vol ' +
            // winutils
            'ping net ipconfig taskkill xcopy ren del'
        },
        contains: [
          {
            className: 'variable', begin: /%%[^ ]|%[^ ]+?%|![^ ]+?!/
          },
          {
            className: 'function',
            begin: LABEL.begin, end: 'goto:eof',
            contains: [
              hljs.inherit(hljs.TITLE_MODE, {begin: '([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*'}),
              COMMENT
            ]
          },
          {
            className: 'number', begin: '\\b\\d+',
            relevance: 0
          },
          COMMENT
        ]
      };
    };
    
    /***/ }),
    /* 448 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var QUOTED_PROPERTY = {
        className: 'string',
        begin: /"/, end: /"/
      };
      var APOS_PROPERTY = {
        className: 'string',
        begin: /'/, end: /'/
      };
      var UNQUOTED_PROPERTY = {
        className: 'string',
        begin: '[\\w-?]+:\\w+', end: '\\W',
        relevance: 0
      };
      var VALUELESS_PROPERTY = {
        className: 'string',
        begin: '\\w+-?\\w+', end: '\\W',
        relevance: 0
      };
    
      return {
        keywords: 'dsconfig',
        contains: [
          {
            className: 'keyword',
            begin: '^dsconfig', end: '\\s', excludeEnd: true,
            relevance: 10
          },
          {
            className: 'built_in',
            begin: '(list|create|get|set|delete)-(\\w+)', end: '\\s', excludeEnd: true,
            illegal: '!@#$%^&*()',
            relevance: 10
          },
          {
            className: 'built_in',
            begin: '--(\\w+)', end: '\\s', excludeEnd: true
          },
          QUOTED_PROPERTY,
          APOS_PROPERTY,
          UNQUOTED_PROPERTY,
          VALUELESS_PROPERTY,
          hljs.HASH_COMMENT_MODE
        ]
      };
    };
    
    /***/ }),
    /* 449 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var STRINGS = {
        className: 'string',
        variants: [
          hljs.inherit(hljs.QUOTE_STRING_MODE, { begin: '((u8?|U)|L)?"' }),
          {
            begin: '(u8?|U)?R"', end: '"',
            contains: [hljs.BACKSLASH_ESCAPE]
          },
          {
            begin: '\'\\\\?.', end: '\'',
            illegal: '.'
          }
        ]
      };
    
      var NUMBERS = {
        className: 'number',
        variants: [
          { begin: '\\b(\\d+(\\.\\d*)?|\\.\\d+)(u|U|l|L|ul|UL|f|F)' },
          { begin: hljs.C_NUMBER_RE }
        ],
        relevance: 0
      };
    
      var PREPROCESSOR = {
        className: 'meta',
        begin: '#', end: '$',
        keywords: {'meta-keyword': 'if else elif endif define undef ifdef ifndef'},
        contains: [
          {
            begin: /\\\n/, relevance: 0
          },
          {
            beginKeywords: 'include', end: '$',
            keywords: {'meta-keyword': 'include'},
            contains: [
              hljs.inherit(STRINGS, {className: 'meta-string'}),
              {
                className: 'meta-string',
                begin: '<', end: '>',
                illegal: '\\n'
              }
            ]
          },
          STRINGS,
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE
        ]
      };
    
      var DTS_REFERENCE = {
        className: 'variable',
        begin: '\\&[a-z\\d_]*\\b'
      };
    
      var DTS_KEYWORD = {
        className: 'meta-keyword',
        begin: '/[a-z][a-z\\d-]*/'
      };
    
      var DTS_LABEL = {
        className: 'symbol',
        begin: '^\\s*[a-zA-Z_][a-zA-Z\\d_]*:'
      };
    
      var DTS_CELL_PROPERTY = {
        className: 'params',
        begin: '<',
        end: '>',
        contains: [
          NUMBERS,
          DTS_REFERENCE
        ]
      };
    
      var DTS_NODE = {
        className: 'class',
        begin: /[a-zA-Z_][a-zA-Z\d_@]*\s{/,
        end: /[{;=]/,
        returnBegin: true,
        excludeEnd: true
      };
    
      var DTS_ROOT_NODE = {
        className: 'class',
        begin: '/\\s*{',
        end: '};',
        relevance: 10,
        contains: [
          DTS_REFERENCE,
          DTS_KEYWORD,
          DTS_LABEL,
          DTS_NODE,
          DTS_CELL_PROPERTY,
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          NUMBERS,
          STRINGS
        ]
      };
    
      return {
        keywords: "",
        contains: [
          DTS_ROOT_NODE,
          DTS_REFERENCE,
          DTS_KEYWORD,
          DTS_LABEL,
          DTS_NODE,
          DTS_CELL_PROPERTY,
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          NUMBERS,
          STRINGS,
          PREPROCESSOR,
          {
            begin: hljs.IDENT_RE + '::',
            keywords: ""
          }
        ]
      };
    };
    
    /***/ }),
    /* 450 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var EXPRESSION_KEYWORDS = 'if eq ne lt lte gt gte select default math sep';
      return {
        aliases: ['dst'],
        case_insensitive: true,
        subLanguage: 'xml',
        contains: [
          {
            className: 'template-tag',
            begin: /\{[#\/]/, end: /\}/, illegal: /;/,
            contains: [
              {
                className: 'name',
                begin: /[a-zA-Z\.-]+/,
                starts: {
                  endsWithParent: true, relevance: 0,
                  contains: [
                    hljs.QUOTE_STRING_MODE
                  ]
                }
              }
            ]
          },
          {
            className: 'template-variable',
            begin: /\{/, end: /\}/, illegal: /;/,
            keywords: EXPRESSION_KEYWORDS
          }
        ]
      };
    };
    
    /***/ }),
    /* 451 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
        var commentMode = hljs.COMMENT(/\(\*/, /\*\)/);
    
        var nonTerminalMode = {
            className: "attribute",
            begin: /^[ ]*[a-zA-Z][a-zA-Z-]*([\s-]+[a-zA-Z][a-zA-Z]*)*/
        };
    
        var specialSequenceMode = {
            className: "meta",
            begin: /\?.*\?/
        };
    
        var ruleBodyMode = {
            begin: /=/, end: /;/,
            contains: [
                commentMode,
                specialSequenceMode,
                // terminals
                hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE
            ]
        };
    
        return {
            illegal: /\S/,
            contains: [
                commentMode,
                nonTerminalMode,
                ruleBodyMode
            ]
        };
    };
    
    /***/ }),
    /* 452 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var ELIXIR_IDENT_RE = '[a-zA-Z_][a-zA-Z0-9_]*(\\!|\\?)?';
      var ELIXIR_METHOD_RE = '[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?';
      var ELIXIR_KEYWORDS =
        'and false then defined module in return redo retry end for true self when ' +
        'next until do begin unless nil break not case cond alias while ensure or ' +
        'include use alias fn quote';
      var SUBST = {
        className: 'subst',
        begin: '#\\{', end: '}',
        lexemes: ELIXIR_IDENT_RE,
        keywords: ELIXIR_KEYWORDS
      };
      var STRING = {
        className: 'string',
        contains: [hljs.BACKSLASH_ESCAPE, SUBST],
        variants: [
          {
            begin: /'/, end: /'/
          },
          {
            begin: /"/, end: /"/
          }
        ]
      };
      var FUNCTION = {
        className: 'function',
        beginKeywords: 'def defp defmacro', end: /\B\b/, // the mode is ended by the title
        contains: [
          hljs.inherit(hljs.TITLE_MODE, {
            begin: ELIXIR_IDENT_RE,
            endsParent: true
          })
        ]
      };
      var CLASS = hljs.inherit(FUNCTION, {
        className: 'class',
        beginKeywords: 'defimpl defmodule defprotocol defrecord', end: /\bdo\b|$|;/
      });
      var ELIXIR_DEFAULT_CONTAINS = [
        STRING,
        hljs.HASH_COMMENT_MODE,
        CLASS,
        FUNCTION,
        {
          className: 'symbol',
          begin: ':(?!\\s)',
          contains: [STRING, {begin: ELIXIR_METHOD_RE}],
          relevance: 0
        },
        {
          className: 'symbol',
          begin: ELIXIR_IDENT_RE + ':',
          relevance: 0
        },
        {
          className: 'number',
          begin: '(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b',
          relevance: 0
        },
        {
          className: 'variable',
          begin: '(\\$\\W)|((\\$|\\@\\@?)(\\w+))'
        },
        {
          begin: '->'
        },
        { // regexp container
          begin: '(' + hljs.RE_STARTERS_RE + ')\\s*',
          contains: [
            hljs.HASH_COMMENT_MODE,
            {
              className: 'regexp',
              illegal: '\\n',
              contains: [hljs.BACKSLASH_ESCAPE, SUBST],
              variants: [
                {
                  begin: '/', end: '/[a-z]*'
                },
                {
                  begin: '%r\\[', end: '\\][a-z]*'
                }
              ]
            }
          ],
          relevance: 0
        }
      ];
      SUBST.contains = ELIXIR_DEFAULT_CONTAINS;
    
      return {
        lexemes: ELIXIR_IDENT_RE,
        keywords: ELIXIR_KEYWORDS,
        contains: ELIXIR_DEFAULT_CONTAINS
      };
    };
    
    /***/ }),
    /* 453 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var COMMENT = {
        variants: [
          hljs.COMMENT('--', '$'),
          hljs.COMMENT(
            '{-',
            '-}',
            {
              contains: ['self']
            }
          )
        ]
      };
    
      var CONSTRUCTOR = {
        className: 'type',
        begin: '\\b[A-Z][\\w\']*', // TODO: other constructors (built-in, infix).
        relevance: 0
      };
    
      var LIST = {
        begin: '\\(', end: '\\)',
        illegal: '"',
        contains: [
          {className: 'type', begin: '\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?'},
          COMMENT
        ]
      };
    
      var RECORD = {
        begin: '{', end: '}',
        contains: LIST.contains
      };
    
      return {
        keywords:
          'let in if then else case of where module import exposing ' +
          'type alias as infix infixl infixr port effect command subscription',
        contains: [
    
          // Top-level constructions.
    
          {
            beginKeywords: 'port effect module', end: 'exposing',
            keywords: 'port effect module where command subscription exposing',
            contains: [LIST, COMMENT],
            illegal: '\\W\\.|;'
          },
          {
            begin: 'import', end: '$',
            keywords: 'import as exposing',
            contains: [LIST, COMMENT],
            illegal: '\\W\\.|;'
          },
          {
            begin: 'type', end: '$',
            keywords: 'type alias',
            contains: [CONSTRUCTOR, LIST, RECORD, COMMENT]
          },
          {
            beginKeywords: 'infix infixl infixr', end: '$',
            contains: [hljs.C_NUMBER_MODE, COMMENT]
          },
          {
            begin: 'port', end: '$',
            keywords: 'port',
            contains: [COMMENT]
          },
    
          // Literals and names.
    
          // TODO: characters.
          hljs.QUOTE_STRING_MODE,
          hljs.C_NUMBER_MODE,
          CONSTRUCTOR,
          hljs.inherit(hljs.TITLE_MODE, {begin: '^[_a-z][\\w\']*'}),
          COMMENT,
    
          {begin: '->|<-'} // No markup, relevance booster
        ],
        illegal: /;/
      };
    };
    
    /***/ }),
    /* 454 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var RUBY_METHOD_RE = '[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?';
      var RUBY_KEYWORDS = {
        keyword:
          'and then defined module in return redo if BEGIN retry end for self when ' +
          'next until do begin unless END rescue else break undef not super class case ' +
          'require yield alias while ensure elsif or include attr_reader attr_writer attr_accessor',
        literal:
          'true false nil'
      };
      var YARDOCTAG = {
        className: 'doctag',
        begin: '@[A-Za-z]+'
      };
      var IRB_OBJECT = {
        begin: '#<', end: '>'
      };
      var COMMENT_MODES = [
        hljs.COMMENT(
          '#',
          '$',
          {
            contains: [YARDOCTAG]
          }
        ),
        hljs.COMMENT(
          '^\\=begin',
          '^\\=end',
          {
            contains: [YARDOCTAG],
            relevance: 10
          }
        ),
        hljs.COMMENT('^__END__', '\\n$')
      ];
      var SUBST = {
        className: 'subst',
        begin: '#\\{', end: '}',
        keywords: RUBY_KEYWORDS
      };
      var STRING = {
        className: 'string',
        contains: [hljs.BACKSLASH_ESCAPE, SUBST],
        variants: [
          {begin: /'/, end: /'/},
          {begin: /"/, end: /"/},
          {begin: /`/, end: /`/},
          {begin: '%[qQwWx]?\\(', end: '\\)'},
          {begin: '%[qQwWx]?\\[', end: '\\]'},
          {begin: '%[qQwWx]?{', end: '}'},
          {begin: '%[qQwWx]?<', end: '>'},
          {begin: '%[qQwWx]?/', end: '/'},
          {begin: '%[qQwWx]?%', end: '%'},
          {begin: '%[qQwWx]?-', end: '-'},
          {begin: '%[qQwWx]?\\|', end: '\\|'},
          {
            // \B in the beginning suppresses recognition of ?-sequences where ?
            // is the last character of a preceding identifier, as in: `func?4`
            begin: /\B\?(\\\d{1,3}|\\x[A-Fa-f0-9]{1,2}|\\u[A-Fa-f0-9]{4}|\\?\S)\b/
          },
          {
            begin: /<<(-?)\w+$/, end: /^\s*\w+$/,
          }
        ]
      };
      var PARAMS = {
        className: 'params',
        begin: '\\(', end: '\\)', endsParent: true,
        keywords: RUBY_KEYWORDS
      };
    
      var RUBY_DEFAULT_CONTAINS = [
        STRING,
        IRB_OBJECT,
        {
          className: 'class',
          beginKeywords: 'class module', end: '$|;',
          illegal: /=/,
          contains: [
            hljs.inherit(hljs.TITLE_MODE, {begin: '[A-Za-z_]\\w*(::\\w+)*(\\?|\\!)?'}),
            {
              begin: '<\\s*',
              contains: [{
                begin: '(' + hljs.IDENT_RE + '::)?' + hljs.IDENT_RE
              }]
            }
          ].concat(COMMENT_MODES)
        },
        {
          className: 'function',
          beginKeywords: 'def', end: '$|;',
          contains: [
            hljs.inherit(hljs.TITLE_MODE, {begin: RUBY_METHOD_RE}),
            PARAMS
          ].concat(COMMENT_MODES)
        },
        {
          // swallow namespace qualifiers before symbols
          begin: hljs.IDENT_RE + '::'
        },
        {
          className: 'symbol',
          begin: hljs.UNDERSCORE_IDENT_RE + '(\\!|\\?)?:',
          relevance: 0
        },
        {
          className: 'symbol',
          begin: ':(?!\\s)',
          contains: [STRING, {begin: RUBY_METHOD_RE}],
          relevance: 0
        },
        {
          className: 'number',
          begin: '(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b',
          relevance: 0
        },
        {
          begin: '(\\$\\W)|((\\$|\\@\\@?)(\\w+))' // variables
        },
        {
          className: 'params',
          begin: /\|/, end: /\|/,
          keywords: RUBY_KEYWORDS
        },
        { // regexp container
          begin: '(' + hljs.RE_STARTERS_RE + '|unless)\\s*',
          keywords: 'unless',
          contains: [
            IRB_OBJECT,
            {
              className: 'regexp',
              contains: [hljs.BACKSLASH_ESCAPE, SUBST],
              illegal: /\n/,
              variants: [
                {begin: '/', end: '/[a-z]*'},
                {begin: '%r{', end: '}[a-z]*'},
                {begin: '%r\\(', end: '\\)[a-z]*'},
                {begin: '%r!', end: '![a-z]*'},
                {begin: '%r\\[', end: '\\][a-z]*'}
              ]
            }
          ].concat(COMMENT_MODES),
          relevance: 0
        }
      ].concat(COMMENT_MODES);
    
      SUBST.contains = RUBY_DEFAULT_CONTAINS;
      PARAMS.contains = RUBY_DEFAULT_CONTAINS;
    
      var SIMPLE_PROMPT = "[>?]>";
      var DEFAULT_PROMPT = "[\\w#]+\\(\\w+\\):\\d+:\\d+>";
      var RVM_PROMPT = "(\\w+-)?\\d+\\.\\d+\\.\\d(p\\d+)?[^>]+>";
    
      var IRB_DEFAULT = [
        {
          begin: /^\s*=>/,
          starts: {
            end: '$', contains: RUBY_DEFAULT_CONTAINS
          }
        },
        {
          className: 'meta',
          begin: '^('+SIMPLE_PROMPT+"|"+DEFAULT_PROMPT+'|'+RVM_PROMPT+')',
          starts: {
            end: '$', contains: RUBY_DEFAULT_CONTAINS
          }
        }
      ];
    
      return {
        aliases: ['rb', 'gemspec', 'podspec', 'thor', 'irb'],
        keywords: RUBY_KEYWORDS,
        illegal: /\/\*/,
        contains: COMMENT_MODES.concat(IRB_DEFAULT).concat(RUBY_DEFAULT_CONTAINS)
      };
    };
    
    /***/ }),
    /* 455 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        subLanguage: 'xml',
        contains: [
          hljs.COMMENT('<%#', '%>'),
          {
            begin: '<%[%=-]?', end: '[%-]?%>',
            subLanguage: 'ruby',
            excludeBegin: true,
            excludeEnd: true
          }
        ]
      };
    };
    
    /***/ }),
    /* 456 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        keywords: {
          built_in:
            'spawn spawn_link self',
          keyword:
            'after and andalso|10 band begin bnot bor bsl bsr bxor case catch cond div end fun if ' +
            'let not of or orelse|10 query receive rem try when xor'
        },
        contains: [
          {
            className: 'meta', begin: '^[0-9]+> ',
            relevance: 10
          },
          hljs.COMMENT('%', '$'),
          {
            className: 'number',
            begin: '\\b(\\d+#[a-fA-F0-9]+|\\d+(\\.\\d+)?([eE][-+]?\\d+)?)',
            relevance: 0
          },
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE,
          {
            begin: '\\?(::)?([A-Z]\\w*(::)?)+'
          },
          {
            begin: '->'
          },
          {
            begin: 'ok'
          },
          {
            begin: '!'
          },
          {
            begin: '(\\b[a-z\'][a-zA-Z0-9_\']*:[a-z\'][a-zA-Z0-9_\']*)|(\\b[a-z\'][a-zA-Z0-9_\']*)',
            relevance: 0
          },
          {
            begin: '[A-Z][a-zA-Z0-9_\']*',
            relevance: 0
          }
        ]
      };
    };
    
    /***/ }),
    /* 457 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var BASIC_ATOM_RE = '[a-z\'][a-zA-Z0-9_\']*';
      var FUNCTION_NAME_RE = '(' + BASIC_ATOM_RE + ':' + BASIC_ATOM_RE + '|' + BASIC_ATOM_RE + ')';
      var ERLANG_RESERVED = {
        keyword:
          'after and andalso|10 band begin bnot bor bsl bzr bxor case catch cond div end fun if ' +
          'let not of orelse|10 query receive rem try when xor',
        literal:
          'false true'
      };
    
      var COMMENT = hljs.COMMENT('%', '$');
      var NUMBER = {
        className: 'number',
        begin: '\\b(\\d+#[a-fA-F0-9]+|\\d+(\\.\\d+)?([eE][-+]?\\d+)?)',
        relevance: 0
      };
      var NAMED_FUN = {
        begin: 'fun\\s+' + BASIC_ATOM_RE + '/\\d+'
      };
      var FUNCTION_CALL = {
        begin: FUNCTION_NAME_RE + '\\(', end: '\\)',
        returnBegin: true,
        relevance: 0,
        contains: [
          {
            begin: FUNCTION_NAME_RE, relevance: 0
          },
          {
            begin: '\\(', end: '\\)', endsWithParent: true,
            returnEnd: true,
            relevance: 0
            // "contains" defined later
          }
        ]
      };
      var TUPLE = {
        begin: '{', end: '}',
        relevance: 0
        // "contains" defined later
      };
      var VAR1 = {
        begin: '\\b_([A-Z][A-Za-z0-9_]*)?',
        relevance: 0
      };
      var VAR2 = {
        begin: '[A-Z][a-zA-Z0-9_]*',
        relevance: 0
      };
      var RECORD_ACCESS = {
        begin: '#' + hljs.UNDERSCORE_IDENT_RE,
        relevance: 0,
        returnBegin: true,
        contains: [
          {
            begin: '#' + hljs.UNDERSCORE_IDENT_RE,
            relevance: 0
          },
          {
            begin: '{', end: '}',
            relevance: 0
            // "contains" defined later
          }
        ]
      };
    
      var BLOCK_STATEMENTS = {
        beginKeywords: 'fun receive if try case', end: 'end',
        keywords: ERLANG_RESERVED
      };
      BLOCK_STATEMENTS.contains = [
        COMMENT,
        NAMED_FUN,
        hljs.inherit(hljs.APOS_STRING_MODE, {className: ''}),
        BLOCK_STATEMENTS,
        FUNCTION_CALL,
        hljs.QUOTE_STRING_MODE,
        NUMBER,
        TUPLE,
        VAR1, VAR2,
        RECORD_ACCESS
      ];
    
      var BASIC_MODES = [
        COMMENT,
        NAMED_FUN,
        BLOCK_STATEMENTS,
        FUNCTION_CALL,
        hljs.QUOTE_STRING_MODE,
        NUMBER,
        TUPLE,
        VAR1, VAR2,
        RECORD_ACCESS
      ];
      FUNCTION_CALL.contains[1].contains = BASIC_MODES;
      TUPLE.contains = BASIC_MODES;
      RECORD_ACCESS.contains[1].contains = BASIC_MODES;
    
      var PARAMS = {
        className: 'params',
        begin: '\\(', end: '\\)',
        contains: BASIC_MODES
      };
      return {
        aliases: ['erl'],
        keywords: ERLANG_RESERVED,
        illegal: '(</|\\*=|\\+=|-=|/\\*|\\*/|\\(\\*|\\*\\))',
        contains: [
          {
            className: 'function',
            begin: '^' + BASIC_ATOM_RE + '\\s*\\(', end: '->',
            returnBegin: true,
            illegal: '\\(|#|//|/\\*|\\\\|:|;',
            contains: [
              PARAMS,
              hljs.inherit(hljs.TITLE_MODE, {begin: BASIC_ATOM_RE})
            ],
            starts: {
              end: ';|\\.',
              keywords: ERLANG_RESERVED,
              contains: BASIC_MODES
            }
          },
          COMMENT,
          {
            begin: '^-', end: '\\.',
            relevance: 0,
            excludeEnd: true,
            returnBegin: true,
            lexemes: '-' + hljs.IDENT_RE,
            keywords:
              '-module -record -undef -export -ifdef -ifndef -author -copyright -doc -vsn ' +
              '-import -include -include_lib -compile -define -else -endif -file -behaviour ' +
              '-behavior -spec',
            contains: [PARAMS]
          },
          NUMBER,
          hljs.QUOTE_STRING_MODE,
          RECORD_ACCESS,
          VAR1, VAR2,
          TUPLE,
          {begin: /\.$/} // relevance booster
        ]
      };
    };
    
    /***/ }),
    /* 458 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        aliases: ['xlsx', 'xls'],
        case_insensitive: true,
        lexemes: /[a-zA-Z][\w\.]*/,
        // built-in functions imported from https://web.archive.org/web/20160513042710/https://support.office.com/en-us/article/Excel-functions-alphabetical-b3944572-255d-4efb-bb96-c6d90033e188
        keywords: {
            built_in: 'ABS ACCRINT ACCRINTM ACOS ACOSH ACOT ACOTH AGGREGATE ADDRESS AMORDEGRC AMORLINC AND ARABIC AREAS ASC ASIN ASINH ATAN ATAN2 ATANH AVEDEV AVERAGE AVERAGEA AVERAGEIF AVERAGEIFS BAHTTEXT BASE BESSELI BESSELJ BESSELK BESSELY BETADIST BETA.DIST BETAINV BETA.INV BIN2DEC BIN2HEX BIN2OCT BINOMDIST BINOM.DIST BINOM.DIST.RANGE BINOM.INV BITAND BITLSHIFT BITOR BITRSHIFT BITXOR CALL CEILING CEILING.MATH CEILING.PRECISE CELL CHAR CHIDIST CHIINV CHITEST CHISQ.DIST CHISQ.DIST.RT CHISQ.INV CHISQ.INV.RT CHISQ.TEST CHOOSE CLEAN CODE COLUMN COLUMNS COMBIN COMBINA COMPLEX CONCAT CONCATENATE CONFIDENCE CONFIDENCE.NORM CONFIDENCE.T CONVERT CORREL COS COSH COT COTH COUNT COUNTA COUNTBLANK COUNTIF COUNTIFS COUPDAYBS COUPDAYS COUPDAYSNC COUPNCD COUPNUM COUPPCD COVAR COVARIANCE.P COVARIANCE.S CRITBINOM CSC CSCH CUBEKPIMEMBER CUBEMEMBER CUBEMEMBERPROPERTY CUBERANKEDMEMBER CUBESET CUBESETCOUNT CUBEVALUE CUMIPMT CUMPRINC DATE DATEDIF DATEVALUE DAVERAGE DAY DAYS DAYS360 DB DBCS DCOUNT DCOUNTA DDB DEC2BIN DEC2HEX DEC2OCT DECIMAL DEGREES DELTA DEVSQ DGET DISC DMAX DMIN DOLLAR DOLLARDE DOLLARFR DPRODUCT DSTDEV DSTDEVP DSUM DURATION DVAR DVARP EDATE EFFECT ENCODEURL EOMONTH ERF ERF.PRECISE ERFC ERFC.PRECISE ERROR.TYPE EUROCONVERT EVEN EXACT EXP EXPON.DIST EXPONDIST FACT FACTDOUBLE FALSE|0 F.DIST FDIST F.DIST.RT FILTERXML FIND FINDB F.INV F.INV.RT FINV FISHER FISHERINV FIXED FLOOR FLOOR.MATH FLOOR.PRECISE FORECAST FORECAST.ETS FORECAST.ETS.CONFINT FORECAST.ETS.SEASONALITY FORECAST.ETS.STAT FORECAST.LINEAR FORMULATEXT FREQUENCY F.TEST FTEST FV FVSCHEDULE GAMMA GAMMA.DIST GAMMADIST GAMMA.INV GAMMAINV GAMMALN GAMMALN.PRECISE GAUSS GCD GEOMEAN GESTEP GETPIVOTDATA GROWTH HARMEAN HEX2BIN HEX2DEC HEX2OCT HLOOKUP HOUR HYPERLINK HYPGEOM.DIST HYPGEOMDIST IF|0 IFERROR IFNA IFS IMABS IMAGINARY IMARGUMENT IMCONJUGATE IMCOS IMCOSH IMCOT IMCSC IMCSCH IMDIV IMEXP IMLN IMLOG10 IMLOG2 IMPOWER IMPRODUCT IMREAL IMSEC IMSECH IMSIN IMSINH IMSQRT IMSUB IMSUM IMTAN INDEX INDIRECT INFO INT INTERCEPT INTRATE IPMT IRR ISBLANK ISERR ISERROR ISEVEN ISFORMULA ISLOGICAL ISNA ISNONTEXT ISNUMBER ISODD ISREF ISTEXT ISO.CEILING ISOWEEKNUM ISPMT JIS KURT LARGE LCM LEFT LEFTB LEN LENB LINEST LN LOG LOG10 LOGEST LOGINV LOGNORM.DIST LOGNORMDIST LOGNORM.INV LOOKUP LOWER MATCH MAX MAXA MAXIFS MDETERM MDURATION MEDIAN MID MIDBs MIN MINIFS MINA MINUTE MINVERSE MIRR MMULT MOD MODE MODE.MULT MODE.SNGL MONTH MROUND MULTINOMIAL MUNIT N NA NEGBINOM.DIST NEGBINOMDIST NETWORKDAYS NETWORKDAYS.INTL NOMINAL NORM.DIST NORMDIST NORMINV NORM.INV NORM.S.DIST NORMSDIST NORM.S.INV NORMSINV NOT NOW NPER NPV NUMBERVALUE OCT2BIN OCT2DEC OCT2HEX ODD ODDFPRICE ODDFYIELD ODDLPRICE ODDLYIELD OFFSET OR PDURATION PEARSON PERCENTILE.EXC PERCENTILE.INC PERCENTILE PERCENTRANK.EXC PERCENTRANK.INC PERCENTRANK PERMUT PERMUTATIONA PHI PHONETIC PI PMT POISSON.DIST POISSON POWER PPMT PRICE PRICEDISC PRICEMAT PROB PRODUCT PROPER PV QUARTILE QUARTILE.EXC QUARTILE.INC QUOTIENT RADIANS RAND RANDBETWEEN RANK.AVG RANK.EQ RANK RATE RECEIVED REGISTER.ID REPLACE REPLACEB REPT RIGHT RIGHTB ROMAN ROUND ROUNDDOWN ROUNDUP ROW ROWS RRI RSQ RTD SEARCH SEARCHB SEC SECH SECOND SERIESSUM SHEET SHEETS SIGN SIN SINH SKEW SKEW.P SLN SLOPE SMALL SQL.REQUEST SQRT SQRTPI STANDARDIZE STDEV STDEV.P STDEV.S STDEVA STDEVP STDEVPA STEYX SUBSTITUTE SUBTOTAL SUM SUMIF SUMIFS SUMPRODUCT SUMSQ SUMX2MY2 SUMX2PY2 SUMXMY2 SWITCH SYD T TAN TANH TBILLEQ TBILLPRICE TBILLYIELD T.DIST T.DIST.2T T.DIST.RT TDIST TEXT TEXTJOIN TIME TIMEVALUE T.INV T.INV.2T TINV TODAY TRANSPOSE TREND TRIM TRIMMEAN TRUE|0 TRUNC T.TEST TTEST TYPE UNICHAR UNICODE UPPER VALUE VAR VAR.P VAR.S VARA VARP VARPA VDB VLOOKUP WEBSERVICE WEEKDAY WEEKNUM WEIBULL WEIBULL.DIST WORKDAY WORKDAY.INTL XIRR XNPV XOR YEAR YEARFRAC YIELD YIELDDISC YIELDMAT Z.TEST ZTEST'
        },
        contains: [
          {
            /* matches a beginning equal sign found in Excel formula examples */ 
            begin: /^=/,
            end: /[^=]/, returnEnd: true, illegal: /=/, /* only allow single equal sign at front of line */
            relevance: 10
          },
          /* technically, there can be more than 2 letters in column names, but this prevents conflict with some keywords */
          {
            /* matches a reference to a single cell */
            className: 'symbol',
            begin: /\b[A-Z]{1,2}\d+\b/,
            end: /[^\d]/, excludeEnd: true,
            relevance: 0
          },
          {
            /* matches a reference to a range of cells */
            className: 'symbol',
            begin: /[A-Z]{0,2}\d*:[A-Z]{0,2}\d*/,
            relevance: 0
          },
          hljs.BACKSLASH_ESCAPE,
          hljs.QUOTE_STRING_MODE,
          {
            className: 'number',
            begin: hljs.NUMBER_RE + '(%)?',
            relevance: 0
          },
          /* Excel formula comments are done by putting the comment in a function call to N() */
          hljs.COMMENT(/\bN\(/,/\)/,
          {
            excludeBegin: true,
            excludeEnd: true,
            illegal: /\n/
          })
        ]
      };
    };
    
    /***/ }),
    /* 459 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        contains: [
        {
          begin: /[^\u2401\u0001]+/,
          end: /[\u2401\u0001]/,
          excludeEnd: true,
          returnBegin: true,
          returnEnd: false,
          contains: [
          {
            begin: /([^\u2401\u0001=]+)/,
            end: /=([^\u2401\u0001=]+)/,
            returnEnd: true,
            returnBegin: false,
            className: 'attr'
          },
          {
            begin: /=/,
            end: /([\u2401\u0001])/,
            excludeEnd: true,
            excludeBegin: true,
            className: 'string'
          }]
        }],
        case_insensitive: true
      };
    };
    
    /***/ }),
    /* 460 */
    /***/ (function(module, exports) {
    
    module.exports = function (hljs) {
    
        var CHAR = {
            className: 'string',
            begin: /'(.|\\[xXuU][a-zA-Z0-9]+)'/
        };
    
        var STRING = {
            className: 'string',
            variants: [
                {
                    begin: '"', end: '"'
                }
            ]
        };
    
        var NAME = {
            className: 'title',
            begin: /[^0-9\n\t "'(),.`{}\[\]:;][^\n\t "'(),.`{}\[\]:;]+|[^0-9\n\t "'(),.`{}\[\]:;=]/
        };
    
        var METHOD = {
            className: 'function',
            beginKeywords: 'def',
            end: /[:={\[(\n;]/,
            excludeEnd: true,
            contains: [NAME]
        };
    
        return {
            keywords: {
                literal: 'true false',
                keyword: 'case class def else enum if impl import in lat rel index let match namespace switch type yield with'
            },
            contains: [
                hljs.C_LINE_COMMENT_MODE,
                hljs.C_BLOCK_COMMENT_MODE,
                CHAR,
                STRING,
                METHOD,
                hljs.C_NUMBER_MODE
            ]
        };
    };
    
    /***/ }),
    /* 461 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var PARAMS = {
        className: 'params',
        begin: '\\(', end: '\\)'
      };
    
      var F_KEYWORDS = {
        literal: '.False. .True.',
        keyword: 'kind do while private call intrinsic where elsewhere ' +
          'type endtype endmodule endselect endinterface end enddo endif if forall endforall only contains default return stop then ' +
          'public subroutine|10 function program .and. .or. .not. .le. .eq. .ge. .gt. .lt. ' +
          'goto save else use module select case ' +
          'access blank direct exist file fmt form formatted iostat name named nextrec number opened rec recl sequential status unformatted unit ' +
          'continue format pause cycle exit ' +
          'c_null_char c_alert c_backspace c_form_feed flush wait decimal round iomsg ' +
          'synchronous nopass non_overridable pass protected volatile abstract extends import ' +
          'non_intrinsic value deferred generic final enumerator class associate bind enum ' +
          'c_int c_short c_long c_long_long c_signed_char c_size_t c_int8_t c_int16_t c_int32_t c_int64_t c_int_least8_t c_int_least16_t ' +
          'c_int_least32_t c_int_least64_t c_int_fast8_t c_int_fast16_t c_int_fast32_t c_int_fast64_t c_intmax_t C_intptr_t c_float c_double ' +
          'c_long_double c_float_complex c_double_complex c_long_double_complex c_bool c_char c_null_ptr c_null_funptr ' +
          'c_new_line c_carriage_return c_horizontal_tab c_vertical_tab iso_c_binding c_loc c_funloc c_associated  c_f_pointer ' +
          'c_ptr c_funptr iso_fortran_env character_storage_size error_unit file_storage_size input_unit iostat_end iostat_eor ' +
          'numeric_storage_size output_unit c_f_procpointer ieee_arithmetic ieee_support_underflow_control ' +
          'ieee_get_underflow_mode ieee_set_underflow_mode newunit contiguous recursive ' +
          'pad position action delim readwrite eor advance nml interface procedure namelist include sequence elemental pure ' +
          'integer real character complex logical dimension allocatable|10 parameter ' +
          'external implicit|10 none double precision assign intent optional pointer ' +
          'target in out common equivalence data',
        built_in: 'alog alog10 amax0 amax1 amin0 amin1 amod cabs ccos cexp clog csin csqrt dabs dacos dasin datan datan2 dcos dcosh ddim dexp dint ' +
          'dlog dlog10 dmax1 dmin1 dmod dnint dsign dsin dsinh dsqrt dtan dtanh float iabs idim idint idnint ifix isign max0 max1 min0 min1 sngl ' +
          'algama cdabs cdcos cdexp cdlog cdsin cdsqrt cqabs cqcos cqexp cqlog cqsin cqsqrt dcmplx dconjg derf derfc dfloat dgamma dimag dlgama ' +
          'iqint qabs qacos qasin qatan qatan2 qcmplx qconjg qcos qcosh qdim qerf qerfc qexp qgamma qimag qlgama qlog qlog10 qmax1 qmin1 qmod ' +
          'qnint qsign qsin qsinh qsqrt qtan qtanh abs acos aimag aint anint asin atan atan2 char cmplx conjg cos cosh exp ichar index int log ' +
          'log10 max min nint sign sin sinh sqrt tan tanh print write dim lge lgt lle llt mod nullify allocate deallocate ' +
          'adjustl adjustr all allocated any associated bit_size btest ceiling count cshift date_and_time digits dot_product ' +
          'eoshift epsilon exponent floor fraction huge iand ibclr ibits ibset ieor ior ishft ishftc lbound len_trim matmul ' +
          'maxexponent maxloc maxval merge minexponent minloc minval modulo mvbits nearest pack present product ' +
          'radix random_number random_seed range repeat reshape rrspacing scale scan selected_int_kind selected_real_kind ' +
          'set_exponent shape size spacing spread sum system_clock tiny transpose trim ubound unpack verify achar iachar transfer ' +
          'dble entry dprod cpu_time command_argument_count get_command get_command_argument get_environment_variable is_iostat_end ' +
          'ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode ' +
          'is_iostat_eor move_alloc new_line selected_char_kind same_type_as extends_type_of'  +
          'acosh asinh atanh bessel_j0 bessel_j1 bessel_jn bessel_y0 bessel_y1 bessel_yn erf erfc erfc_scaled gamma log_gamma hypot norm2 ' +
          'atomic_define atomic_ref execute_command_line leadz trailz storage_size merge_bits ' +
          'bge bgt ble blt dshiftl dshiftr findloc iall iany iparity image_index lcobound ucobound maskl maskr ' +
          'num_images parity popcnt poppar shifta shiftl shiftr this_image'
      };
      return {
        case_insensitive: true,
        aliases: ['f90', 'f95'],
        keywords: F_KEYWORDS,
        illegal: /\/\*/,
        contains: [
          hljs.inherit(hljs.APOS_STRING_MODE, {className: 'string', relevance: 0}),
          hljs.inherit(hljs.QUOTE_STRING_MODE, {className: 'string', relevance: 0}),
          {
            className: 'function',
            beginKeywords: 'subroutine function program',
            illegal: '[${=\\n]',
            contains: [hljs.UNDERSCORE_TITLE_MODE, PARAMS]
          },
          hljs.COMMENT('!', '$', {relevance: 0}),
          {
            className: 'number',
            begin: '(?=\\b|\\+|\\-|\\.)(?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*)(?:[de][+-]?\\d+)?\\b\\.?',
            relevance: 0
          }
        ]
      };
    };
    
    /***/ }),
    /* 462 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var TYPEPARAM = {
        begin: '<', end: '>',
        contains: [
          hljs.inherit(hljs.TITLE_MODE, {begin: /'[a-zA-Z0-9_]+/})
        ]
      };
    
      return {
        aliases: ['fs'],
        keywords:
          'abstract and as assert base begin class default delegate do done ' +
          'downcast downto elif else end exception extern false finally for ' +
          'fun function global if in inherit inline interface internal lazy let ' +
          'match member module mutable namespace new null of open or ' +
          'override private public rec return sig static struct then to ' +
          'true try type upcast use val void when while with yield',
        illegal: /\/\*/,
        contains: [
          {
            // monad builder keywords (matches before non-bang kws)
            className: 'keyword',
            begin: /\b(yield|return|let|do)!/
          },
          {
            className: 'string',
            begin: '@"', end: '"',
            contains: [{begin: '""'}]
          },
          {
            className: 'string',
            begin: '"""', end: '"""'
          },
          hljs.COMMENT('\\(\\*', '\\*\\)'),
          {
            className: 'class',
            beginKeywords: 'type', end: '\\(|=|$', excludeEnd: true,
            contains: [
              hljs.UNDERSCORE_TITLE_MODE,
              TYPEPARAM
            ]
          },
          {
            className: 'meta',
            begin: '\\[<', end: '>\\]',
            relevance: 10
          },
          {
            className: 'symbol',
            begin: '\\B(\'[A-Za-z])\\b',
            contains: [hljs.BACKSLASH_ESCAPE]
          },
          hljs.C_LINE_COMMENT_MODE,
          hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null}),
          hljs.C_NUMBER_MODE
        ]
      };
    };
    
    /***/ }),
    /* 463 */
    /***/ (function(module, exports) {
    
    module.exports = function (hljs) {
      var KEYWORDS = {
        'keyword':
          'abort acronym acronyms alias all and assign binary card diag display ' +
          'else eq file files for free ge gt if integer le loop lt maximizing ' +
          'minimizing model models ne negative no not option options or ord ' +
          'positive prod put putpage puttl repeat sameas semicont semiint smax ' +
          'smin solve sos1 sos2 sum system table then until using while xor yes',
        'literal': 'eps inf na',
        'built-in':
          'abs arccos arcsin arctan arctan2 Beta betaReg binomial ceil centropy ' +
          'cos cosh cvPower div div0 eDist entropy errorf execSeed exp fact ' +
          'floor frac gamma gammaReg log logBeta logGamma log10 log2 mapVal max ' +
          'min mod ncpCM ncpF ncpVUpow ncpVUsin normal pi poly power ' +
          'randBinomial randLinear randTriangle round rPower sigmoid sign ' +
          'signPower sin sinh slexp sllog10 slrec sqexp sqlog10 sqr sqrec sqrt ' +
          'tan tanh trunc uniform uniformInt vcPower bool_and bool_eqv bool_imp ' +
          'bool_not bool_or bool_xor ifThen rel_eq rel_ge rel_gt rel_le rel_lt ' +
          'rel_ne gday gdow ghour gleap gmillisec gminute gmonth gsecond gyear ' +
          'jdate jnow jstart jtime errorLevel execError gamsRelease gamsVersion ' +
          'handleCollect handleDelete handleStatus handleSubmit heapFree ' +
          'heapLimit heapSize jobHandle jobKill jobStatus jobTerminate ' +
          'licenseLevel licenseStatus maxExecError sleep timeClose timeComp ' +
          'timeElapsed timeExec timeStart'
      };
      var PARAMS = {
        className: 'params',
        begin: /\(/, end: /\)/,
        excludeBegin: true,
        excludeEnd: true,
      };
      var SYMBOLS = {
        className: 'symbol',
        variants: [
          {begin: /\=[lgenxc]=/},
          {begin: /\$/},
        ]
      };
      var QSTR = { // One-line quoted comment string
        className: 'comment',
        variants: [
          {begin: '\'', end: '\''},
          {begin: '"', end: '"'},
        ],
        illegal: '\\n',
        contains: [hljs.BACKSLASH_ESCAPE]
      };
      var ASSIGNMENT = {
        begin: '/',
        end: '/',
        keywords: KEYWORDS,
        contains: [
          QSTR,
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          hljs.QUOTE_STRING_MODE,
          hljs.APOS_STRING_MODE,
          hljs.C_NUMBER_MODE,
        ],
      };
      var DESCTEXT = { // Parameter/set/variable description text
        begin: /[a-z][a-z0-9_]*(\([a-z0-9_, ]*\))?[ \t]+/,
        excludeBegin: true,
        end: '$',
        endsWithParent: true,
        contains: [
          QSTR,
          ASSIGNMENT,
          {
            className: 'comment',
            begin: /([ ]*[a-z0-9&#*=?@>\\<:\-,()$\[\]_.{}!+%^]+)+/,
            relevance: 0
          },
        ],
      };
    
      return {
        aliases: ['gms'],
        case_insensitive: true,
        keywords: KEYWORDS,
        contains: [
          hljs.COMMENT(/^\$ontext/, /^\$offtext/),
          {
            className: 'meta',
            begin: '^\\$[a-z0-9]+',
            end: '$',
            returnBegin: true,
            contains: [
              {
                className: 'meta-keyword',
                begin: '^\\$[a-z0-9]+',
              }
            ]
          },
          hljs.COMMENT('^\\*', '$'),
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          hljs.QUOTE_STRING_MODE,
          hljs.APOS_STRING_MODE,
          // Declarations
          {
            beginKeywords:
              'set sets parameter parameters variable variables ' +
              'scalar scalars equation equations',
            end: ';',
            contains: [
              hljs.COMMENT('^\\*', '$'),
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              hljs.QUOTE_STRING_MODE,
              hljs.APOS_STRING_MODE,
              ASSIGNMENT,
              DESCTEXT,
            ]
          },
          { // table environment
            beginKeywords: 'table',
            end: ';',
            returnBegin: true,
            contains: [
              { // table header row
                beginKeywords: 'table',
                end: '$',
                contains: [DESCTEXT],
              },
              hljs.COMMENT('^\\*', '$'),
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              hljs.QUOTE_STRING_MODE,
              hljs.APOS_STRING_MODE,
              hljs.C_NUMBER_MODE,
              // Table does not contain DESCTEXT or ASSIGNMENT
            ]
          },
          // Function definitions
          {
            className: 'function',
            begin: /^[a-z][a-z0-9_,\-+' ()$]+\.{2}/,
            returnBegin: true,
            contains: [
                  { // Function title
                    className: 'title',
                    begin: /^[a-z0-9_]+/,
                  },
                  PARAMS,
                  SYMBOLS,
                ],
          },
          hljs.C_NUMBER_MODE,
          SYMBOLS,
        ]
      };
    };
    
    /***/ }),
    /* 464 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var KEYWORDS = {
        keyword: 'and bool break call callexe checkinterrupt clear clearg closeall cls comlog compile ' +
                  'continue create debug declare delete disable dlibrary dllcall do dos ed edit else ' +
                  'elseif enable end endfor endif endp endo errorlog errorlogat expr external fn ' +
                  'for format goto gosub graph if keyword let lib library line load loadarray loadexe ' +
                  'loadf loadk loadm loadp loads loadx local locate loopnextindex lprint lpwidth lshow ' +
                  'matrix msym ndpclex new not open or output outwidth plot plotsym pop prcsn print ' +
                  'printdos proc push retp return rndcon rndmod rndmult rndseed run save saveall screen ' +
                  'scroll setarray show sparse stop string struct system trace trap threadfor ' +
                  'threadendfor threadbegin threadjoin threadstat threadend until use while winprint',
        built_in: 'abs acf aconcat aeye amax amean AmericanBinomCall AmericanBinomCall_Greeks AmericanBinomCall_ImpVol ' +
                  'AmericanBinomPut AmericanBinomPut_Greeks AmericanBinomPut_ImpVol AmericanBSCall AmericanBSCall_Greeks ' +
                  'AmericanBSCall_ImpVol AmericanBSPut AmericanBSPut_Greeks AmericanBSPut_ImpVol amin amult annotationGetDefaults ' +
                  'annotationSetBkd annotationSetFont annotationSetLineColor annotationSetLineStyle annotationSetLineThickness ' +
                  'annualTradingDays arccos arcsin areshape arrayalloc arrayindex arrayinit arraytomat asciiload asclabel astd ' +
                  'astds asum atan atan2 atranspose axmargin balance band bandchol bandcholsol bandltsol bandrv bandsolpd bar ' +
                  'base10 begwind besselj bessely beta box boxcox cdfBeta cdfBetaInv cdfBinomial cdfBinomialInv cdfBvn cdfBvn2 ' +
                  'cdfBvn2e cdfCauchy cdfCauchyInv cdfChic cdfChii cdfChinc cdfChincInv cdfExp cdfExpInv cdfFc cdfFnc cdfFncInv ' +
                  'cdfGam cdfGenPareto cdfHyperGeo cdfLaplace cdfLaplaceInv cdfLogistic cdfLogisticInv cdfmControlCreate cdfMvn ' +
                  'cdfMvn2e cdfMvnce cdfMvne cdfMvt2e cdfMvtce cdfMvte cdfN cdfN2 cdfNc cdfNegBinomial cdfNegBinomialInv cdfNi ' +
                  'cdfPoisson cdfPoissonInv cdfRayleigh cdfRayleighInv cdfTc cdfTci cdfTnc cdfTvn cdfWeibull cdfWeibullInv cdir ' +
                  'ceil ChangeDir chdir chiBarSquare chol choldn cholsol cholup chrs close code cols colsf combinate combinated ' +
                  'complex con cond conj cons ConScore contour conv convertsatostr convertstrtosa corrm corrms corrvc corrx corrxs ' +
                  'cos cosh counts countwts crossprd crout croutp csrcol csrlin csvReadM csvReadSA cumprodc cumsumc curve cvtos ' +
                  'datacreate datacreatecomplex datalist dataload dataloop dataopen datasave date datestr datestring datestrymd ' +
                  'dayinyr dayofweek dbAddDatabase dbClose dbCommit dbCreateQuery dbExecQuery dbGetConnectOptions dbGetDatabaseName ' +
                  'dbGetDriverName dbGetDrivers dbGetHostName dbGetLastErrorNum dbGetLastErrorText dbGetNumericalPrecPolicy ' +
                  'dbGetPassword dbGetPort dbGetTableHeaders dbGetTables dbGetUserName dbHasFeature dbIsDriverAvailable dbIsOpen ' +
                  'dbIsOpenError dbOpen dbQueryBindValue dbQueryClear dbQueryCols dbQueryExecPrepared dbQueryFetchAllM dbQueryFetchAllSA ' +
                  'dbQueryFetchOneM dbQueryFetchOneSA dbQueryFinish dbQueryGetBoundValue dbQueryGetBoundValues dbQueryGetField ' +
                  'dbQueryGetLastErrorNum dbQueryGetLastErrorText dbQueryGetLastInsertID dbQueryGetLastQuery dbQueryGetPosition ' +
                  'dbQueryIsActive dbQueryIsForwardOnly dbQueryIsNull dbQueryIsSelect dbQueryIsValid dbQueryPrepare dbQueryRows ' +
                  'dbQuerySeek dbQuerySeekFirst dbQuerySeekLast dbQuerySeekNext dbQuerySeekPrevious dbQuerySetForwardOnly ' +
                  'dbRemoveDatabase dbRollback dbSetConnectOptions dbSetDatabaseName dbSetHostName dbSetNumericalPrecPolicy ' +
                  'dbSetPort dbSetUserName dbTransaction DeleteFile delif delrows denseToSp denseToSpRE denToZero design det detl ' +
                  'dfft dffti diag diagrv digamma doswin DOSWinCloseall DOSWinOpen dotfeq dotfeqmt dotfge dotfgemt dotfgt dotfgtmt ' +
                  'dotfle dotflemt dotflt dotfltmt dotfne dotfnemt draw drop dsCreate dstat dstatmt dstatmtControlCreate dtdate dtday ' +
                  'dttime dttodtv dttostr dttoutc dtvnormal dtvtodt dtvtoutc dummy dummybr dummydn eig eigh eighv eigv elapsedTradingDays ' +
                  'endwind envget eof eqSolve eqSolvemt eqSolvemtControlCreate eqSolvemtOutCreate eqSolveset erf erfc erfccplx erfcplx error ' +
                  'etdays ethsec etstr EuropeanBinomCall EuropeanBinomCall_Greeks EuropeanBinomCall_ImpVol EuropeanBinomPut ' +
                  'EuropeanBinomPut_Greeks EuropeanBinomPut_ImpVol EuropeanBSCall EuropeanBSCall_Greeks EuropeanBSCall_ImpVol ' +
                  'EuropeanBSPut EuropeanBSPut_Greeks EuropeanBSPut_ImpVol exctsmpl exec execbg exp extern eye fcheckerr fclearerr feq ' +
                  'feqmt fflush fft ffti fftm fftmi fftn fge fgemt fgets fgetsa fgetsat fgetst fgt fgtmt fileinfo filesa fle flemt ' +
                  'floor flt fltmt fmod fne fnemt fonts fopen formatcv formatnv fputs fputst fseek fstrerror ftell ftocv ftos ftostrC ' +
                  'gamma gammacplx gammaii gausset gdaAppend gdaCreate gdaDStat gdaDStatMat gdaGetIndex gdaGetName gdaGetNames gdaGetOrders ' +
                  'gdaGetType gdaGetTypes gdaGetVarInfo gdaIsCplx gdaLoad gdaPack gdaRead gdaReadByIndex gdaReadSome gdaReadSparse ' +
                  'gdaReadStruct gdaReportVarInfo gdaSave gdaUpdate gdaUpdateAndPack gdaVars gdaWrite gdaWrite32 gdaWriteSome getarray ' +
                  'getdims getf getGAUSShome getmatrix getmatrix4D getname getnamef getNextTradingDay getNextWeekDay getnr getorders ' +
                  'getpath getPreviousTradingDay getPreviousWeekDay getRow getscalar3D getscalar4D getTrRow getwind glm gradcplx gradMT ' +
                  'gradMTm gradMTT gradMTTm gradp graphprt graphset hasimag header headermt hess hessMT hessMTg hessMTgw hessMTm ' +
                  'hessMTmw hessMTT hessMTTg hessMTTgw hessMTTm hessMTw hessp hist histf histp hsec imag indcv indexcat indices indices2 ' +
                  'indicesf indicesfn indnv indsav integrate1d integrateControlCreate intgrat2 intgrat3 inthp1 inthp2 inthp3 inthp4 ' +
                  'inthpControlCreate intquad1 intquad2 intquad3 intrleav intrleavsa intrsect intsimp inv invpd invswp iscplx iscplxf ' +
                  'isden isinfnanmiss ismiss key keyav keyw lag lag1 lagn lapEighb lapEighi lapEighvb lapEighvi lapgEig lapgEigh lapgEighv ' +
                  'lapgEigv lapgSchur lapgSvdcst lapgSvds lapgSvdst lapSvdcusv lapSvds lapSvdusv ldlp ldlsol linSolve listwise ln lncdfbvn ' +
                  'lncdfbvn2 lncdfmvn lncdfn lncdfn2 lncdfnc lnfact lngammacplx lnpdfmvn lnpdfmvt lnpdfn lnpdft loadd loadstruct loadwind ' +
                  'loess loessmt loessmtControlCreate log loglog logx logy lower lowmat lowmat1 ltrisol lu lusol machEpsilon make makevars ' +
                  'makewind margin matalloc matinit mattoarray maxbytes maxc maxindc maxv maxvec mbesselei mbesselei0 mbesselei1 mbesseli ' +
                  'mbesseli0 mbesseli1 meanc median mergeby mergevar minc minindc minv miss missex missrv moment momentd movingave ' +
                  'movingaveExpwgt movingaveWgt nextindex nextn nextnevn nextwind ntos null null1 numCombinations ols olsmt olsmtControlCreate ' +
                  'olsqr olsqr2 olsqrmt ones optn optnevn orth outtyp pacf packedToSp packr parse pause pdfCauchy pdfChi pdfExp pdfGenPareto ' +
                  'pdfHyperGeo pdfLaplace pdfLogistic pdfn pdfPoisson pdfRayleigh pdfWeibull pi pinv pinvmt plotAddArrow plotAddBar plotAddBox ' +
                  'plotAddHist plotAddHistF plotAddHistP plotAddPolar plotAddScatter plotAddShape plotAddTextbox plotAddTS plotAddXY plotArea ' +
                  'plotBar plotBox plotClearLayout plotContour plotCustomLayout plotGetDefaults plotHist plotHistF plotHistP plotLayout ' +
                  'plotLogLog plotLogX plotLogY plotOpenWindow plotPolar plotSave plotScatter plotSetAxesPen plotSetBar plotSetBarFill ' +
                  'plotSetBarStacked plotSetBkdColor plotSetFill plotSetGrid plotSetLegend plotSetLineColor plotSetLineStyle plotSetLineSymbol ' +
                  'plotSetLineThickness plotSetNewWindow plotSetTitle plotSetWhichYAxis plotSetXAxisShow plotSetXLabel plotSetXRange ' +
                  'plotSetXTicInterval plotSetXTicLabel plotSetYAxisShow plotSetYLabel plotSetYRange plotSetZAxisShow plotSetZLabel ' +
                  'plotSurface plotTS plotXY polar polychar polyeval polygamma polyint polymake polymat polymroot polymult polyroot ' +
                  'pqgwin previousindex princomp printfm printfmt prodc psi putarray putf putvals pvCreate pvGetIndex pvGetParNames ' +
                  'pvGetParVector pvLength pvList pvPack pvPacki pvPackm pvPackmi pvPacks pvPacksi pvPacksm pvPacksmi pvPutParVector ' +
                  'pvTest pvUnpack QNewton QNewtonmt QNewtonmtControlCreate QNewtonmtOutCreate QNewtonSet QProg QProgmt QProgmtInCreate ' +
                  'qqr qqre qqrep qr qre qrep qrsol qrtsol qtyr qtyre qtyrep quantile quantiled qyr qyre qyrep qz rank rankindx readr ' +
                  'real reclassify reclassifyCuts recode recserar recsercp recserrc rerun rescale reshape rets rev rfft rffti rfftip rfftn ' +
                  'rfftnp rfftp rndBernoulli rndBeta rndBinomial rndCauchy rndChiSquare rndCon rndCreateState rndExp rndGamma rndGeo rndGumbel ' +
                  'rndHyperGeo rndi rndKMbeta rndKMgam rndKMi rndKMn rndKMnb rndKMp rndKMu rndKMvm rndLaplace rndLCbeta rndLCgam rndLCi rndLCn ' +
                  'rndLCnb rndLCp rndLCu rndLCvm rndLogNorm rndMTu rndMVn rndMVt rndn rndnb rndNegBinomial rndp rndPoisson rndRayleigh ' +
                  'rndStateSkip rndu rndvm rndWeibull rndWishart rotater round rows rowsf rref sampleData satostrC saved saveStruct savewind ' +
                  'scale scale3d scalerr scalinfnanmiss scalmiss schtoc schur searchsourcepath seekr select selif seqa seqm setdif setdifsa ' +
                  'setvars setvwrmode setwind shell shiftr sin singleindex sinh sleep solpd sortc sortcc sortd sorthc sorthcc sortind ' +
                  'sortindc sortmc sortr sortrc spBiconjGradSol spChol spConjGradSol spCreate spDenseSubmat spDiagRvMat spEigv spEye spLDL ' +
                  'spline spLU spNumNZE spOnes spreadSheetReadM spreadSheetReadSA spreadSheetWrite spScale spSubmat spToDense spTrTDense ' +
                  'spTScalar spZeros sqpSolve sqpSolveMT sqpSolveMTControlCreate sqpSolveMTlagrangeCreate sqpSolveMToutCreate sqpSolveSet ' +
                  'sqrt statements stdc stdsc stocv stof strcombine strindx strlen strput strrindx strsect strsplit strsplitPad strtodt ' +
                  'strtof strtofcplx strtriml strtrimr strtrunc strtruncl strtruncpad strtruncr submat subscat substute subvec sumc sumr ' +
                  'surface svd svd1 svd2 svdcusv svds svdusv sysstate tab tan tanh tempname threadBegin threadEnd threadEndFor threadFor ' +
                  'threadJoin threadStat time timedt timestr timeutc title tkf2eps tkf2ps tocart todaydt toeplitz token topolar trapchk ' +
                  'trigamma trimr trunc type typecv typef union unionsa uniqindx uniqindxsa unique uniquesa upmat upmat1 upper utctodt ' +
                  'utctodtv utrisol vals varCovMS varCovXS varget vargetl varmall varmares varput varputl vartypef vcm vcms vcx vcxs ' +
                  'vec vech vecr vector vget view viewxyz vlist vnamecv volume vput vread vtypecv wait waitc walkindex where window ' +
                  'writer xlabel xlsGetSheetCount xlsGetSheetSize xlsGetSheetTypes xlsMakeRange xlsReadM xlsReadSA xlsWrite xlsWriteM ' +
                  'xlsWriteSA xpnd xtics xy xyz ylabel ytics zeros zeta zlabel ztics cdfEmpirical dot h5create h5open h5read h5readAttribute ' +
                  'h5write h5writeAttribute ldl plotAddErrorBar plotAddSurface plotCDFEmpirical plotSetColormap plotSetContourLabels ' +
                  'plotSetLegendFont plotSetTextInterpreter plotSetXTicCount plotSetYTicCount plotSetZLevels powerm strjoin strtrim sylvester',
        literal: 'DB_AFTER_LAST_ROW DB_ALL_TABLES DB_BATCH_OPERATIONS DB_BEFORE_FIRST_ROW DB_BLOB DB_EVENT_NOTIFICATIONS ' +
                 'DB_FINISH_QUERY DB_HIGH_PRECISION DB_LAST_INSERT_ID DB_LOW_PRECISION_DOUBLE DB_LOW_PRECISION_INT32 ' +
                 'DB_LOW_PRECISION_INT64 DB_LOW_PRECISION_NUMBERS DB_MULTIPLE_RESULT_SETS DB_NAMED_PLACEHOLDERS ' +
                 'DB_POSITIONAL_PLACEHOLDERS DB_PREPARED_QUERIES DB_QUERY_SIZE DB_SIMPLE_LOCKING DB_SYSTEM_TABLES DB_TABLES ' +
                 'DB_TRANSACTIONS DB_UNICODE DB_VIEWS'
      };
    
      var PREPROCESSOR =
      {
        className: 'meta',
        begin: '#', end: '$',
        keywords: {'meta-keyword': 'define definecs|10 undef ifdef ifndef iflight ifdllcall ifmac ifos2win ifunix else endif lineson linesoff srcfile srcline'},
        contains: [
          {
            begin: /\\\n/, relevance: 0
          },
          {
            beginKeywords: 'include', end: '$',
            keywords: {'meta-keyword': 'include'},
            contains: [
              {
                className: 'meta-string',
                begin: '"', end: '"',
                illegal: '\\n'
              }
            ]
          },
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE
        ]
      };
    
      var FUNCTION_TITLE = hljs.UNDERSCORE_IDENT_RE + '\\s*\\(?';
      var PARSE_PARAMS = [
        {
          className: 'params',
          begin: /\(/, end: /\)/,
          keywords: KEYWORDS,
          relevance: 0,
          contains: [
            hljs.C_NUMBER_MODE,
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE
          ]
        }
      ];
    
      return {
        aliases: ['gss'],
        case_insensitive: true, // language is case-insensitive
        keywords: KEYWORDS,
        illegal: '(\\{[%#]|[%#]\\})',
        contains: [
          hljs.C_NUMBER_MODE,
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          hljs.COMMENT('@', '@'),
          PREPROCESSOR,
          {
            className: 'string',
            begin: '"', end: '"',
            contains: [hljs.BACKSLASH_ESCAPE]
          },
          {
            className: 'function',
            beginKeywords: 'proc keyword',
            end: ';',
            excludeEnd: true,
            keywords: KEYWORDS,
            contains: [
              {
                begin: FUNCTION_TITLE, returnBegin: true,
                contains: [hljs.UNDERSCORE_TITLE_MODE],
                relevance: 0
              },
              hljs.C_NUMBER_MODE,
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              PREPROCESSOR
            ].concat(PARSE_PARAMS)
          },
          {
            className: 'function',
            beginKeywords: 'fn',
            end: ';',
            excludeEnd: true,
            keywords: KEYWORDS,
            contains: [
              {
                begin: FUNCTION_TITLE + hljs.IDENT_RE + '\\)?\\s*\\=\\s*', returnBegin: true,
                contains: [hljs.UNDERSCORE_TITLE_MODE],
                relevance: 0
              },
              hljs.C_NUMBER_MODE,
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE
            ].concat(PARSE_PARAMS)
          },
          {
            className: 'function',
            begin: '\\bexternal (proc|keyword|fn)\\s+',
            end: ';',
            excludeEnd: true,
            keywords: KEYWORDS,
            contains: [
              {
                begin: FUNCTION_TITLE, returnBegin: true,
                contains: [hljs.UNDERSCORE_TITLE_MODE],
                relevance: 0
              },
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE
            ]
          },
          {
            className: 'function',
            begin: '\\bexternal (matrix|string|array|sparse matrix|struct ' + hljs.IDENT_RE + ')\\s+',
            end: ';',
            excludeEnd: true,
            keywords: KEYWORDS,
            contains: [
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE
            ]
          }
        ]
      };
    };
    
    /***/ }),
    /* 465 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
        var GCODE_IDENT_RE = '[A-Z_][A-Z0-9_.]*';
        var GCODE_CLOSE_RE = '\\%';
        var GCODE_KEYWORDS =
          'IF DO WHILE ENDWHILE CALL ENDIF SUB ENDSUB GOTO REPEAT ENDREPEAT ' +
          'EQ LT GT NE GE LE OR XOR';
        var GCODE_START = {
            className: 'meta',
            begin: '([O])([0-9]+)'
        };
        var GCODE_CODE = [
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE,
            hljs.COMMENT(/\(/, /\)/),
            hljs.inherit(hljs.C_NUMBER_MODE, {begin: '([-+]?([0-9]*\\.?[0-9]+\\.?))|' + hljs.C_NUMBER_RE}),
            hljs.inherit(hljs.APOS_STRING_MODE, {illegal: null}),
            hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null}),
            {
                className: 'name',
                begin: '([G])([0-9]+\\.?[0-9]?)'
            },
            {
                className: 'name',
                begin: '([M])([0-9]+\\.?[0-9]?)'
            },
            {
                className: 'attr',
                begin: '(VC|VS|#)',
                end: '(\\d+)'
            },
            {
                className: 'attr',
                begin: '(VZOFX|VZOFY|VZOFZ)'
            },
            {
                className: 'built_in',
                begin: '(ATAN|ABS|ACOS|ASIN|SIN|COS|EXP|FIX|FUP|ROUND|LN|TAN)(\\[)',
                end: '([-+]?([0-9]*\\.?[0-9]+\\.?))(\\])'
            },
            {
                className: 'symbol',
                variants: [
                    {
                        begin: 'N', end: '\\d+',
                        illegal: '\\W'
                    }
                ]
            }
        ];
    
        return {
            aliases: ['nc'],
            // Some implementations (CNC controls) of G-code are interoperable with uppercase and lowercase letters seamlessly.
            // However, most prefer all uppercase and uppercase is customary.
            case_insensitive: true,
            lexemes: GCODE_IDENT_RE,
            keywords: GCODE_KEYWORDS,
            contains: [
                {
                    className: 'meta',
                    begin: GCODE_CLOSE_RE
                },
                GCODE_START
            ].concat(GCODE_CODE)
        };
    };
    
    /***/ }),
    /* 466 */
    /***/ (function(module, exports) {
    
    module.exports = function (hljs) {
      return {
        aliases: ['feature'],
        keywords: 'Feature Background Ability Business\ Need Scenario Scenarios Scenario\ Outline Scenario\ Template Examples Given And Then But When',
        contains: [
          {
            className: 'symbol',
            begin: '\\*',
            relevance: 0
          },
          {
            className: 'meta',
            begin: '@[^@\\s]+'
          },
          {
            begin: '\\|', end: '\\|\\w*$',
            contains: [
              {
                className: 'string',
                begin: '[^|]+'
              }
            ]
          },
          {
            className: 'variable',
            begin: '<', end: '>'
          },
          hljs.HASH_COMMENT_MODE,
          {
            className: 'string',
            begin: '"""', end: '"""'
          },
          hljs.QUOTE_STRING_MODE
        ]
      };
    };
    
    /***/ }),
    /* 467 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        keywords: {
          keyword:
            // Statements
            'break continue discard do else for if return while switch case default ' +
            // Qualifiers
            'attribute binding buffer ccw centroid centroid varying coherent column_major const cw ' +
            'depth_any depth_greater depth_less depth_unchanged early_fragment_tests equal_spacing ' +
            'flat fractional_even_spacing fractional_odd_spacing highp in index inout invariant ' +
            'invocations isolines layout line_strip lines lines_adjacency local_size_x local_size_y ' +
            'local_size_z location lowp max_vertices mediump noperspective offset origin_upper_left ' +
            'out packed patch pixel_center_integer point_mode points precise precision quads r11f_g11f_b10f '+
            'r16 r16_snorm r16f r16i r16ui r32f r32i r32ui r8 r8_snorm r8i r8ui readonly restrict ' +
            'rg16 rg16_snorm rg16f rg16i rg16ui rg32f rg32i rg32ui rg8 rg8_snorm rg8i rg8ui rgb10_a2 ' +
            'rgb10_a2ui rgba16 rgba16_snorm rgba16f rgba16i rgba16ui rgba32f rgba32i rgba32ui rgba8 ' +
            'rgba8_snorm rgba8i rgba8ui row_major sample shared smooth std140 std430 stream triangle_strip ' +
            'triangles triangles_adjacency uniform varying vertices volatile writeonly',
          type:
            'atomic_uint bool bvec2 bvec3 bvec4 dmat2 dmat2x2 dmat2x3 dmat2x4 dmat3 dmat3x2 dmat3x3 ' +
            'dmat3x4 dmat4 dmat4x2 dmat4x3 dmat4x4 double dvec2 dvec3 dvec4 float iimage1D iimage1DArray ' +
            'iimage2D iimage2DArray iimage2DMS iimage2DMSArray iimage2DRect iimage3D iimageBuffer' +
            'iimageCube iimageCubeArray image1D image1DArray image2D image2DArray image2DMS image2DMSArray ' +
            'image2DRect image3D imageBuffer imageCube imageCubeArray int isampler1D isampler1DArray ' +
            'isampler2D isampler2DArray isampler2DMS isampler2DMSArray isampler2DRect isampler3D ' +
            'isamplerBuffer isamplerCube isamplerCubeArray ivec2 ivec3 ivec4 mat2 mat2x2 mat2x3 ' +
            'mat2x4 mat3 mat3x2 mat3x3 mat3x4 mat4 mat4x2 mat4x3 mat4x4 sampler1D sampler1DArray ' +
            'sampler1DArrayShadow sampler1DShadow sampler2D sampler2DArray sampler2DArrayShadow ' +
            'sampler2DMS sampler2DMSArray sampler2DRect sampler2DRectShadow sampler2DShadow sampler3D ' +
            'samplerBuffer samplerCube samplerCubeArray samplerCubeArrayShadow samplerCubeShadow ' +
            'image1D uimage1DArray uimage2D uimage2DArray uimage2DMS uimage2DMSArray uimage2DRect ' +
            'uimage3D uimageBuffer uimageCube uimageCubeArray uint usampler1D usampler1DArray ' +
            'usampler2D usampler2DArray usampler2DMS usampler2DMSArray usampler2DRect usampler3D ' +
            'samplerBuffer usamplerCube usamplerCubeArray uvec2 uvec3 uvec4 vec2 vec3 vec4 void',
          built_in:
            // Constants
            'gl_MaxAtomicCounterBindings gl_MaxAtomicCounterBufferSize gl_MaxClipDistances gl_MaxClipPlanes ' +
            'gl_MaxCombinedAtomicCounterBuffers gl_MaxCombinedAtomicCounters gl_MaxCombinedImageUniforms ' +
            'gl_MaxCombinedImageUnitsAndFragmentOutputs gl_MaxCombinedTextureImageUnits gl_MaxComputeAtomicCounterBuffers ' +
            'gl_MaxComputeAtomicCounters gl_MaxComputeImageUniforms gl_MaxComputeTextureImageUnits ' +
            'gl_MaxComputeUniformComponents gl_MaxComputeWorkGroupCount gl_MaxComputeWorkGroupSize ' +
            'gl_MaxDrawBuffers gl_MaxFragmentAtomicCounterBuffers gl_MaxFragmentAtomicCounters ' +
            'gl_MaxFragmentImageUniforms gl_MaxFragmentInputComponents gl_MaxFragmentInputVectors ' +
            'gl_MaxFragmentUniformComponents gl_MaxFragmentUniformVectors gl_MaxGeometryAtomicCounterBuffers ' +
            'gl_MaxGeometryAtomicCounters gl_MaxGeometryImageUniforms gl_MaxGeometryInputComponents ' +
            'gl_MaxGeometryOutputComponents gl_MaxGeometryOutputVertices gl_MaxGeometryTextureImageUnits ' +
            'gl_MaxGeometryTotalOutputComponents gl_MaxGeometryUniformComponents gl_MaxGeometryVaryingComponents ' +
            'gl_MaxImageSamples gl_MaxImageUnits gl_MaxLights gl_MaxPatchVertices gl_MaxProgramTexelOffset ' +
            'gl_MaxTessControlAtomicCounterBuffers gl_MaxTessControlAtomicCounters gl_MaxTessControlImageUniforms ' +
            'gl_MaxTessControlInputComponents gl_MaxTessControlOutputComponents gl_MaxTessControlTextureImageUnits ' +
            'gl_MaxTessControlTotalOutputComponents gl_MaxTessControlUniformComponents ' +
            'gl_MaxTessEvaluationAtomicCounterBuffers gl_MaxTessEvaluationAtomicCounters ' +
            'gl_MaxTessEvaluationImageUniforms gl_MaxTessEvaluationInputComponents gl_MaxTessEvaluationOutputComponents ' +
            'gl_MaxTessEvaluationTextureImageUnits gl_MaxTessEvaluationUniformComponents ' +
            'gl_MaxTessGenLevel gl_MaxTessPatchComponents gl_MaxTextureCoords gl_MaxTextureImageUnits ' +
            'gl_MaxTextureUnits gl_MaxVaryingComponents gl_MaxVaryingFloats gl_MaxVaryingVectors ' +
            'gl_MaxVertexAtomicCounterBuffers gl_MaxVertexAtomicCounters gl_MaxVertexAttribs gl_MaxVertexImageUniforms ' +
            'gl_MaxVertexOutputComponents gl_MaxVertexOutputVectors gl_MaxVertexTextureImageUnits ' +
            'gl_MaxVertexUniformComponents gl_MaxVertexUniformVectors gl_MaxViewports gl_MinProgramTexelOffset ' +
            // Variables
            'gl_BackColor gl_BackLightModelProduct gl_BackLightProduct gl_BackMaterial ' +
            'gl_BackSecondaryColor gl_ClipDistance gl_ClipPlane gl_ClipVertex gl_Color ' +
            'gl_DepthRange gl_EyePlaneQ gl_EyePlaneR gl_EyePlaneS gl_EyePlaneT gl_Fog gl_FogCoord ' +
            'gl_FogFragCoord gl_FragColor gl_FragCoord gl_FragData gl_FragDepth gl_FrontColor ' +
            'gl_FrontFacing gl_FrontLightModelProduct gl_FrontLightProduct gl_FrontMaterial ' +
            'gl_FrontSecondaryColor gl_GlobalInvocationID gl_InstanceID gl_InvocationID gl_Layer gl_LightModel ' +
            'gl_LightSource gl_LocalInvocationID gl_LocalInvocationIndex gl_ModelViewMatrix ' +
            'gl_ModelViewMatrixInverse gl_ModelViewMatrixInverseTranspose gl_ModelViewMatrixTranspose ' +
            'gl_ModelViewProjectionMatrix gl_ModelViewProjectionMatrixInverse gl_ModelViewProjectionMatrixInverseTranspose ' +
            'gl_ModelViewProjectionMatrixTranspose gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 ' +
            'gl_MultiTexCoord3 gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 ' +
            'gl_Normal gl_NormalMatrix gl_NormalScale gl_NumSamples gl_NumWorkGroups gl_ObjectPlaneQ ' +
            'gl_ObjectPlaneR gl_ObjectPlaneS gl_ObjectPlaneT gl_PatchVerticesIn gl_Point gl_PointCoord ' +
            'gl_PointSize gl_Position gl_PrimitiveID gl_PrimitiveIDIn gl_ProjectionMatrix gl_ProjectionMatrixInverse ' +
            'gl_ProjectionMatrixInverseTranspose gl_ProjectionMatrixTranspose gl_SampleID gl_SampleMask ' +
            'gl_SampleMaskIn gl_SamplePosition gl_SecondaryColor gl_TessCoord gl_TessLevelInner gl_TessLevelOuter ' +
            'gl_TexCoord gl_TextureEnvColor gl_TextureMatrix gl_TextureMatrixInverse gl_TextureMatrixInverseTranspose ' +
            'gl_TextureMatrixTranspose gl_Vertex gl_VertexID gl_ViewportIndex gl_WorkGroupID gl_WorkGroupSize gl_in gl_out ' +
            // Functions
            'EmitStreamVertex EmitVertex EndPrimitive EndStreamPrimitive abs acos acosh all any asin ' +
            'asinh atan atanh atomicAdd atomicAnd atomicCompSwap atomicCounter atomicCounterDecrement ' +
            'atomicCounterIncrement atomicExchange atomicMax atomicMin atomicOr atomicXor barrier ' +
            'bitCount bitfieldExtract bitfieldInsert bitfieldReverse ceil clamp cos cosh cross ' +
            'dFdx dFdy degrees determinant distance dot equal exp exp2 faceforward findLSB findMSB ' +
            'floatBitsToInt floatBitsToUint floor fma fract frexp ftransform fwidth greaterThan ' +
            'greaterThanEqual groupMemoryBarrier imageAtomicAdd imageAtomicAnd imageAtomicCompSwap ' +
            'imageAtomicExchange imageAtomicMax imageAtomicMin imageAtomicOr imageAtomicXor imageLoad ' +
            'imageSize imageStore imulExtended intBitsToFloat interpolateAtCentroid interpolateAtOffset ' +
            'interpolateAtSample inverse inversesqrt isinf isnan ldexp length lessThan lessThanEqual log ' +
            'log2 matrixCompMult max memoryBarrier memoryBarrierAtomicCounter memoryBarrierBuffer ' +
            'memoryBarrierImage memoryBarrierShared min mix mod modf noise1 noise2 noise3 noise4 ' +
            'normalize not notEqual outerProduct packDouble2x32 packHalf2x16 packSnorm2x16 packSnorm4x8 ' +
            'packUnorm2x16 packUnorm4x8 pow radians reflect refract round roundEven shadow1D shadow1DLod ' +
            'shadow1DProj shadow1DProjLod shadow2D shadow2DLod shadow2DProj shadow2DProjLod sign sin sinh ' +
            'smoothstep sqrt step tan tanh texelFetch texelFetchOffset texture texture1D texture1DLod ' +
            'texture1DProj texture1DProjLod texture2D texture2DLod texture2DProj texture2DProjLod ' +
            'texture3D texture3DLod texture3DProj texture3DProjLod textureCube textureCubeLod ' +
            'textureGather textureGatherOffset textureGatherOffsets textureGrad textureGradOffset ' +
            'textureLod textureLodOffset textureOffset textureProj textureProjGrad textureProjGradOffset ' +
            'textureProjLod textureProjLodOffset textureProjOffset textureQueryLevels textureQueryLod ' +
            'textureSize transpose trunc uaddCarry uintBitsToFloat umulExtended unpackDouble2x32 ' +
            'unpackHalf2x16 unpackSnorm2x16 unpackSnorm4x8 unpackUnorm2x16 unpackUnorm4x8 usubBorrow',
          literal: 'true false'
        },
        illegal: '"',
        contains: [
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          hljs.C_NUMBER_MODE,
          {
            className: 'meta',
            begin: '#', end: '$'
          }
        ]
      };
    };
    
    /***/ }),
    /* 468 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var GO_KEYWORDS = {
        keyword:
          'break default func interface select case map struct chan else goto package switch ' +
          'const fallthrough if range type continue for import return var go defer ' +
          'bool byte complex64 complex128 float32 float64 int8 int16 int32 int64 string uint8 ' +
          'uint16 uint32 uint64 int uint uintptr rune',
        literal:
           'true false iota nil',
        built_in:
          'append cap close complex copy imag len make new panic print println real recover delete'
      };
      return {
        aliases: ['golang'],
        keywords: GO_KEYWORDS,
        illegal: '</',
        contains: [
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          {
            className: 'string',
            variants: [
              hljs.QUOTE_STRING_MODE,
              {begin: '\'', end: '[^\\\\]\''},
              {begin: '`', end: '`'},
            ]
          },
          {
            className: 'number',
            variants: [
              {begin: hljs.C_NUMBER_RE + '[dflsi]', relevance: 1},
              hljs.C_NUMBER_MODE
            ]
          },
          {
            begin: /:=/ // relevance booster
          },
          {
            className: 'function',
            beginKeywords: 'func', end: /\s*\{/, excludeEnd: true,
            contains: [
              hljs.TITLE_MODE,
              {
                className: 'params',
                begin: /\(/, end: /\)/,
                keywords: GO_KEYWORDS,
                illegal: /["']/
              }
            ]
          }
        ]
      };
    };
    
    /***/ }),
    /* 469 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
        return {
          keywords: {
            keyword:
              'println readln print import module function local return let var ' +
              'while for foreach times in case when match with break continue ' +
              'augment augmentation each find filter reduce ' +
              'if then else otherwise try catch finally raise throw orIfNull ' +
              'DynamicObject|10 DynamicVariable struct Observable map set vector list array',
            literal:
              'true false null'
          },
          contains: [
            hljs.HASH_COMMENT_MODE,
            hljs.QUOTE_STRING_MODE,
            hljs.C_NUMBER_MODE,
            {
              className: 'meta', begin: '@[A-Za-z]+'
            }
          ]
        }
    };
    
    /***/ }),
    /* 470 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        case_insensitive: true,
        keywords: {
          keyword:
            'task project allprojects subprojects artifacts buildscript configurations ' +
            'dependencies repositories sourceSets description delete from into include ' +
            'exclude source classpath destinationDir includes options sourceCompatibility ' +
            'targetCompatibility group flatDir doLast doFirst flatten todir fromdir ant ' +
            'def abstract break case catch continue default do else extends final finally ' +
            'for if implements instanceof native new private protected public return static ' +
            'switch synchronized throw throws transient try volatile while strictfp package ' +
            'import false null super this true antlrtask checkstyle codenarc copy boolean ' +
            'byte char class double float int interface long short void compile runTime ' +
            'file fileTree abs any append asList asWritable call collect compareTo count ' +
            'div dump each eachByte eachFile eachLine every find findAll flatten getAt ' +
            'getErr getIn getOut getText grep immutable inject inspect intersect invokeMethods ' +
            'isCase join leftShift minus multiply newInputStream newOutputStream newPrintWriter ' +
            'newReader newWriter next plus pop power previous print println push putAt read ' +
            'readBytes readLines reverse reverseEach round size sort splitEachLine step subMap ' +
            'times toInteger toList tokenize upto waitForOrKill withPrintWriter withReader ' +
            'withStream withWriter withWriterAppend write writeLine'
        },
        contains: [
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE,
          hljs.NUMBER_MODE,
          hljs.REGEXP_MODE
    
        ]
      }
    };
    
    /***/ }),
    /* 471 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
        return {
            keywords: {
                literal : 'true false null',
                keyword:
                'byte short char int long boolean float double void ' +
                // groovy specific keywords
                'def as in assert trait ' +
                // common keywords with Java
                'super this abstract static volatile transient public private protected synchronized final ' +
                'class interface enum if else for while switch case break default continue ' +
                'throw throws try catch finally implements extends new import package return instanceof'
            },
    
            contains: [
                hljs.COMMENT(
                    '/\\*\\*',
                    '\\*/',
                    {
                        relevance : 0,
                        contains : [
                          {
                              // eat up @'s in emails to prevent them to be recognized as doctags
                              begin: /\w+@/, relevance: 0
                          },
                          {
                              className : 'doctag',
                              begin : '@[A-Za-z]+'
                          }
                        ]
                    }
                ),
                hljs.C_LINE_COMMENT_MODE,
                hljs.C_BLOCK_COMMENT_MODE,
                {
                    className: 'string',
                    begin: '"""', end: '"""'
                },
                {
                    className: 'string',
                    begin: "'''", end: "'''"
                },
                {
                    className: 'string',
                    begin: "\\$/", end: "/\\$",
                    relevance: 10
                },
                hljs.APOS_STRING_MODE,
                {
                    className: 'regexp',
                    begin: /~?\/[^\/\n]+\//,
                    contains: [
                        hljs.BACKSLASH_ESCAPE
                    ]
                },
                hljs.QUOTE_STRING_MODE,
                {
                    className: 'meta',
                    begin: "^#!/usr/bin/env", end: '$',
                    illegal: '\n'
                },
                hljs.BINARY_NUMBER_MODE,
                {
                    className: 'class',
                    beginKeywords: 'class interface trait enum', end: '{',
                    illegal: ':',
                    contains: [
                        {beginKeywords: 'extends implements'},
                        hljs.UNDERSCORE_TITLE_MODE
                    ]
                },
                hljs.C_NUMBER_MODE,
                {
                    className: 'meta', begin: '@[A-Za-z]+'
                },
                {
                    // highlight map keys and named parameters as strings
                    className: 'string', begin: /[^\?]{0}[A-Za-z0-9_$]+ *:/
                },
                {
                    // catch middle element of the ternary operator
                    // to avoid highlight it as a label, named parameter, or map key
                    begin: /\?/, end: /\:/
                },
                {
                    // highlight labeled statements
                    className: 'symbol', begin: '^\\s*[A-Za-z0-9_$]+:',
                    relevance: 0
                }
            ],
            illegal: /#|<\//
        }
    };
    
    /***/ }),
    /* 472 */
    /***/ (function(module, exports) {
    
    module.exports = // TODO support filter tags like :javascript, support inline HTML
    function(hljs) {
      return {
        case_insensitive: true,
        contains: [
          {
            className: 'meta',
            begin: '^!!!( (5|1\\.1|Strict|Frameset|Basic|Mobile|RDFa|XML\\b.*))?$',
            relevance: 10
          },
          // FIXME these comments should be allowed to span indented lines
          hljs.COMMENT(
            '^\\s*(!=#|=#|-#|/).*$',
            false,
            {
              relevance: 0
            }
          ),
          {
            begin: '^\\s*(-|=|!=)(?!#)',
            starts: {
              end: '\\n',
              subLanguage: 'ruby'
            }
          },
          {
            className: 'tag',
            begin: '^\\s*%',
            contains: [
              {
                className: 'selector-tag',
                begin: '\\w+'
              },
              {
                className: 'selector-id',
                begin: '#[\\w-]+'
              },
              {
                className: 'selector-class',
                begin: '\\.[\\w-]+'
              },
              {
                begin: '{\\s*',
                end: '\\s*}',
                contains: [
                  {
                    begin: ':\\w+\\s*=>',
                    end: ',\\s+',
                    returnBegin: true,
                    endsWithParent: true,
                    contains: [
                      {
                        className: 'attr',
                        begin: ':\\w+'
                      },
                      hljs.APOS_STRING_MODE,
                      hljs.QUOTE_STRING_MODE,
                      {
                        begin: '\\w+',
                        relevance: 0
                      }
                    ]
                  }
                ]
              },
              {
                begin: '\\(\\s*',
                end: '\\s*\\)',
                excludeEnd: true,
                contains: [
                  {
                    begin: '\\w+\\s*=',
                    end: '\\s+',
                    returnBegin: true,
                    endsWithParent: true,
                    contains: [
                      {
                        className: 'attr',
                        begin: '\\w+',
                        relevance: 0
                      },
                      hljs.APOS_STRING_MODE,
                      hljs.QUOTE_STRING_MODE,
                      {
                        begin: '\\w+',
                        relevance: 0
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            begin: '^\\s*[=~]\\s*'
          },
          {
            begin: '#{',
            starts: {
              end: '}',
              subLanguage: 'ruby'
            }
          }
        ]
      };
    };
    
    /***/ }),
    /* 473 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var BUILT_INS = {'builtin-name': 'each in with if else unless bindattr action collection debugger log outlet template unbound view yield'};
      return {
        aliases: ['hbs', 'html.hbs', 'html.handlebars'],
        case_insensitive: true,
        subLanguage: 'xml',
        contains: [
        hljs.COMMENT('{{!(--)?', '(--)?}}'),
          {
            className: 'template-tag',
            begin: /\{\{[#\/]/, end: /\}\}/,
            contains: [
              {
                className: 'name',
                begin: /[a-zA-Z\.-]+/,
                keywords: BUILT_INS,
                starts: {
                  endsWithParent: true, relevance: 0,
                  contains: [
                    hljs.QUOTE_STRING_MODE
                  ]
                }
              }
            ]
          },
          {
            className: 'template-variable',
            begin: /\{\{/, end: /\}\}/,
            keywords: BUILT_INS
          }
        ]
      };
    };
    
    /***/ }),
    /* 474 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var COMMENT = {
        variants: [
          hljs.COMMENT('--', '$'),
          hljs.COMMENT(
            '{-',
            '-}',
            {
              contains: ['self']
            }
          )
        ]
      };
    
      var PRAGMA = {
        className: 'meta',
        begin: '{-#', end: '#-}'
      };
    
      var PREPROCESSOR = {
        className: 'meta',
        begin: '^#', end: '$'
      };
    
      var CONSTRUCTOR = {
        className: 'type',
        begin: '\\b[A-Z][\\w\']*', // TODO: other constructors (build-in, infix).
        relevance: 0
      };
    
      var LIST = {
        begin: '\\(', end: '\\)',
        illegal: '"',
        contains: [
          PRAGMA,
          PREPROCESSOR,
          {className: 'type', begin: '\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?'},
          hljs.inherit(hljs.TITLE_MODE, {begin: '[_a-z][\\w\']*'}),
          COMMENT
        ]
      };
    
      var RECORD = {
        begin: '{', end: '}',
        contains: LIST.contains
      };
    
      return {
        aliases: ['hs'],
        keywords:
          'let in if then else case of where do module import hiding ' +
          'qualified type data newtype deriving class instance as default ' +
          'infix infixl infixr foreign export ccall stdcall cplusplus ' +
          'jvm dotnet safe unsafe family forall mdo proc rec',
        contains: [
    
          // Top-level constructions.
    
          {
            beginKeywords: 'module', end: 'where',
            keywords: 'module where',
            contains: [LIST, COMMENT],
            illegal: '\\W\\.|;'
          },
          {
            begin: '\\bimport\\b', end: '$',
            keywords: 'import qualified as hiding',
            contains: [LIST, COMMENT],
            illegal: '\\W\\.|;'
          },
    
          {
            className: 'class',
            begin: '^(\\s*)?(class|instance)\\b', end: 'where',
            keywords: 'class family instance where',
            contains: [CONSTRUCTOR, LIST, COMMENT]
          },
          {
            className: 'class',
            begin: '\\b(data|(new)?type)\\b', end: '$',
            keywords: 'data family type newtype deriving',
            contains: [PRAGMA, CONSTRUCTOR, LIST, RECORD, COMMENT]
          },
          {
            beginKeywords: 'default', end: '$',
            contains: [CONSTRUCTOR, LIST, COMMENT]
          },
          {
            beginKeywords: 'infix infixl infixr', end: '$',
            contains: [hljs.C_NUMBER_MODE, COMMENT]
          },
          {
            begin: '\\bforeign\\b', end: '$',
            keywords: 'foreign import export ccall stdcall cplusplus jvm ' +
                      'dotnet safe unsafe',
            contains: [CONSTRUCTOR, hljs.QUOTE_STRING_MODE, COMMENT]
          },
          {
            className: 'meta',
            begin: '#!\\/usr\\/bin\\/env\ runhaskell', end: '$'
          },
    
          // "Whitespaces".
    
          PRAGMA,
          PREPROCESSOR,
    
          // Literals and names.
    
          // TODO: characters.
          hljs.QUOTE_STRING_MODE,
          hljs.C_NUMBER_MODE,
          CONSTRUCTOR,
          hljs.inherit(hljs.TITLE_MODE, {begin: '^[_a-z][\\w\']*'}),
    
          COMMENT,
    
          {begin: '->|<-'} // No markup, relevance booster
        ]
      };
    };
    
    /***/ }),
    /* 475 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var IDENT_RE = '[a-zA-Z_$][a-zA-Z0-9_$]*';
      var IDENT_FUNC_RETURN_TYPE_RE = '([*]|[a-zA-Z_$][a-zA-Z0-9_$]*)';
    
      var HAXE_BASIC_TYPES = 'Int Float String Bool Dynamic Void Array ';
    
      return {
        aliases: ['hx'],
        keywords: {
          keyword: 'break case cast catch continue default do dynamic else enum extern ' +
                   'for function here if import in inline never new override package private get set ' +
                   'public return static super switch this throw trace try typedef untyped using var while ' +
                   HAXE_BASIC_TYPES,
          built_in:
            'trace this',
          literal:
            'true false null _'
        },
        contains: [
          { className: 'string', // interpolate-able strings
            begin: '\'', end: '\'',
            contains: [
              hljs.BACKSLASH_ESCAPE,
              { className: 'subst', // interpolation
                begin: '\\$\\{', end: '\\}'
              },
              { className: 'subst', // interpolation
                begin: '\\$', end: '\\W}'
              }
            ]
          },
          hljs.QUOTE_STRING_MODE,
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          hljs.C_NUMBER_MODE,
          { className: 'meta', // compiler meta
            begin: '@:', end: '$'
          },
          { className: 'meta', // compiler conditionals
            begin: '#', end: '$',
            keywords: {'meta-keyword': 'if else elseif end error'}
          },
          { className: 'type', // function types
            begin: ':[ \t]*', end: '[^A-Za-z0-9_ \t\\->]',
            excludeBegin: true, excludeEnd: true,
            relevance: 0
          },
          { className: 'type', // types
            begin: ':[ \t]*', end: '\\W',
            excludeBegin: true, excludeEnd: true
          },
          { className: 'type', // instantiation
            begin: 'new *', end: '\\W',
            excludeBegin: true, excludeEnd: true
          },
          { className: 'class', // enums
            beginKeywords: 'enum', end: '\\{',
            contains: [
              hljs.TITLE_MODE
            ]
          },
          { className: 'class', // abstracts
            beginKeywords: 'abstract', end: '[\\{$]',
            contains: [
              { className: 'type',
                begin: '\\(', end: '\\)',
                excludeBegin: true, excludeEnd: true
              },
              { className: 'type',
                begin: 'from +', end: '\\W',
                excludeBegin: true, excludeEnd: true
              },
              { className: 'type',
                begin: 'to +', end: '\\W',
                excludeBegin: true, excludeEnd: true
              },
              hljs.TITLE_MODE
            ],
            keywords: {
              keyword: 'abstract from to'
            }
          },
          { className: 'class', // classes
            begin: '\\b(class|interface) +', end: '[\\{$]',  excludeEnd: true,
            keywords: 'class interface',
            contains: [
              { className: 'keyword',
                begin: '\\b(extends|implements) +',
                keywords: 'extends implements',
                contains: [
                  {
                    className: 'type',
                    begin: hljs.IDENT_RE,
                    relevance: 0
                  }
                ]
              },
              hljs.TITLE_MODE
            ]
          },
          { className: 'function',
            beginKeywords: 'function', end: '\\(', excludeEnd: true,
            illegal: '\\S',
            contains: [
              hljs.TITLE_MODE
            ]
          }
        ],
        illegal: /<\//
      };
    };
    
    /***/ }),
    /* 476 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        case_insensitive: true,
        lexemes: /[\w\._]+/,
        keywords: 'goto gosub return break repeat loop continue wait await dim sdim foreach dimtype dup dupptr end stop newmod delmod mref run exgoto on mcall assert logmes newlab resume yield onexit onerror onkey onclick oncmd exist delete mkdir chdir dirlist bload bsave bcopy memfile if else poke wpoke lpoke getstr chdpm memexpand memcpy memset notesel noteadd notedel noteload notesave randomize noteunsel noteget split strrep setease button chgdisp exec dialog mmload mmplay mmstop mci pset pget syscolor mes print title pos circle cls font sysfont objsize picload color palcolor palette redraw width gsel gcopy gzoom gmode bmpsave hsvcolor getkey listbox chkbox combox input mesbox buffer screen bgscr mouse objsel groll line clrobj boxf objprm objmode stick grect grotate gsquare gradf objimage objskip objenable celload celdiv celput newcom querycom delcom cnvstow comres axobj winobj sendmsg comevent comevarg sarrayconv callfunc cnvwtos comevdisp libptr system hspstat hspver stat cnt err strsize looplev sublev iparam wparam lparam refstr refdval int rnd strlen length length2 length3 length4 vartype gettime peek wpeek lpeek varptr varuse noteinfo instr abs limit getease str strmid strf getpath strtrim sin cos tan atan sqrt double absf expf logf limitf powf geteasef mousex mousey mousew hwnd hinstance hdc ginfo objinfo dirinfo sysinfo thismod __hspver__ __hsp30__ __date__ __time__ __line__ __file__ _debug __hspdef__ and or xor not screen_normal screen_palette screen_hide screen_fixedsize screen_tool screen_frame gmode_gdi gmode_mem gmode_rgb0 gmode_alpha gmode_rgb0alpha gmode_add gmode_sub gmode_pixela ginfo_mx ginfo_my ginfo_act ginfo_sel ginfo_wx1 ginfo_wy1 ginfo_wx2 ginfo_wy2 ginfo_vx ginfo_vy ginfo_sizex ginfo_sizey ginfo_winx ginfo_winy ginfo_mesx ginfo_mesy ginfo_r ginfo_g ginfo_b ginfo_paluse ginfo_dispx ginfo_dispy ginfo_cx ginfo_cy ginfo_intid ginfo_newid ginfo_sx ginfo_sy objinfo_mode objinfo_bmscr objinfo_hwnd notemax notesize dir_cur dir_exe dir_win dir_sys dir_cmdline dir_desktop dir_mydoc dir_tv font_normal font_bold font_italic font_underline font_strikeout font_antialias objmode_normal objmode_guifont objmode_usefont gsquare_grad msgothic msmincho do until while wend for next _break _continue switch case default swbreak swend ddim ldim alloc m_pi rad2deg deg2rad ease_linear ease_quad_in ease_quad_out ease_quad_inout ease_cubic_in ease_cubic_out ease_cubic_inout ease_quartic_in ease_quartic_out ease_quartic_inout ease_bounce_in ease_bounce_out ease_bounce_inout ease_shake_in ease_shake_out ease_shake_inout ease_loop',
        contains: [
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          hljs.QUOTE_STRING_MODE,
          hljs.APOS_STRING_MODE,
    
          {
            // multi-line string
            className: 'string',
            begin: '{"', end: '"}',
            contains: [hljs.BACKSLASH_ESCAPE]
          },
    
          hljs.COMMENT(';', '$', {relevance: 0}),
    
          {
            // pre-processor
            className: 'meta',
            begin: '#', end: '$',
            keywords: {'meta-keyword': 'addion cfunc cmd cmpopt comfunc const defcfunc deffunc define else endif enum epack func global if ifdef ifndef include modcfunc modfunc modinit modterm module pack packopt regcmd runtime undef usecom uselib'},
            contains: [
              hljs.inherit(hljs.QUOTE_STRING_MODE, {className: 'meta-string'}),
              hljs.NUMBER_MODE,
              hljs.C_NUMBER_MODE,
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE
            ]
          },
    
          {
            // label
            className: 'symbol',
            begin: '^\\*(\\w+|@)'
          },
    
          hljs.NUMBER_MODE,
          hljs.C_NUMBER_MODE
        ]
      };
    };
    
    /***/ }),
    /* 477 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var BUILT_INS = 'action collection component concat debugger each each-in else get hash if input link-to loc log mut outlet partial query-params render textarea unbound unless with yield view';
    
      var ATTR_ASSIGNMENT = {
        illegal: /\}\}/,
        begin: /[a-zA-Z0-9_]+=/,
        returnBegin: true,
        relevance: 0,
        contains: [
          {
            className: 'attr', begin: /[a-zA-Z0-9_]+/
          }
        ]
      };
    
      var SUB_EXPR = {
        illegal: /\}\}/,
        begin: /\)/, end: /\)/,
        contains: [
          {
            begin: /[a-zA-Z\.\-]+/,
            keywords: {built_in: BUILT_INS},
            starts: {
              endsWithParent: true, relevance: 0,
              contains: [
                hljs.QUOTE_STRING_MODE,
              ]
            }
          }
        ]
      };
    
      var TAG_INNARDS = {
        endsWithParent: true, relevance: 0,
        keywords: {keyword: 'as', built_in: BUILT_INS},
        contains: [
          hljs.QUOTE_STRING_MODE,
          ATTR_ASSIGNMENT,
          hljs.NUMBER_MODE
        ]
      };
    
      return {
        case_insensitive: true,
        subLanguage: 'xml',
        contains: [
          hljs.COMMENT('{{!(--)?', '(--)?}}'),
          {
            className: 'template-tag',
            begin: /\{\{[#\/]/, end: /\}\}/,
            contains: [
              {
                className: 'name',
                begin: /[a-zA-Z\.\-]+/,
                keywords: {'builtin-name': BUILT_INS},
                starts: TAG_INNARDS
              }
            ]
          },
          {
            className: 'template-variable',
            begin: /\{\{[a-zA-Z][a-zA-Z\-]+/, end: /\}\}/,
            keywords: {keyword: 'as', built_in: BUILT_INS},
            contains: [
              hljs.QUOTE_STRING_MODE
            ]
          }
        ]
      };
    };
    
    /***/ }),
    /* 478 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var VERSION = 'HTTP/[0-9\\.]+';
      return {
        aliases: ['https'],
        illegal: '\\S',
        contains: [
          {
            begin: '^' + VERSION, end: '$',
            contains: [{className: 'number', begin: '\\b\\d{3}\\b'}]
          },
          {
            begin: '^[A-Z]+ (.*?) ' + VERSION + '$', returnBegin: true, end: '$',
            contains: [
              {
                className: 'string',
                begin: ' ', end: ' ',
                excludeBegin: true, excludeEnd: true
              },
              {
                begin: VERSION
              },
              {
                className: 'keyword',
                begin: '[A-Z]+'
              }
            ]
          },
          {
            className: 'attribute',
            begin: '^\\w', end: ': ', excludeEnd: true,
            illegal: '\\n|\\s|=',
            starts: {end: '$', relevance: 0}
          },
          {
            begin: '\\n\\n',
            starts: {subLanguage: [], endsWithParent: true}
          }
        ]
      };
    };
    
    /***/ }),
    /* 479 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var keywords = {
        'builtin-name':
          // keywords
          '!= % %= & &= * ** **= *= *map ' +
          '+ += , --build-class-- --import-- -= . / // //= ' +
          '/= < << <<= <= = > >= >> >>= ' +
          '@ @= ^ ^= abs accumulate all and any ap-compose ' +
          'ap-dotimes ap-each ap-each-while ap-filter ap-first ap-if ap-last ap-map ap-map-when ap-pipe ' +
          'ap-reduce ap-reject apply as-> ascii assert assoc bin break butlast ' +
          'callable calling-module-name car case cdr chain chr coll? combinations compile ' +
          'compress cond cons cons? continue count curry cut cycle dec ' +
          'def default-method defclass defmacro defmacro-alias defmacro/g! defmain defmethod defmulti defn ' +
          'defn-alias defnc defnr defreader defseq del delattr delete-route dict-comp dir ' +
          'disassemble dispatch-reader-macro distinct divmod do doto drop drop-last drop-while empty? ' +
          'end-sequence eval eval-and-compile eval-when-compile even? every? except exec filter first ' +
          'flatten float? fn fnc fnr for for* format fraction genexpr ' +
          'gensym get getattr global globals group-by hasattr hash hex id ' +
          'identity if if* if-not if-python2 import in inc input instance? ' +
          'integer integer-char? integer? interleave interpose is is-coll is-cons is-empty is-even ' +
          'is-every is-float is-instance is-integer is-integer-char is-iterable is-iterator is-keyword is-neg is-none ' +
          'is-not is-numeric is-odd is-pos is-string is-symbol is-zero isinstance islice issubclass ' +
          'iter iterable? iterate iterator? keyword keyword? lambda last len let ' +
          'lif lif-not list* list-comp locals loop macro-error macroexpand macroexpand-1 macroexpand-all ' +
          'map max merge-with method-decorator min multi-decorator multicombinations name neg? next ' +
          'none? nonlocal not not-in not? nth numeric? oct odd? open ' +
          'or ord partition permutations pos? post-route postwalk pow prewalk print ' +
          'product profile/calls profile/cpu put-route quasiquote quote raise range read read-str ' +
          'recursive-replace reduce remove repeat repeatedly repr require rest round route ' +
          'route-with-methods rwm second seq set-comp setattr setv some sorted string ' +
          'string? sum switch symbol? take take-nth take-while tee try unless ' +
          'unquote unquote-splicing vars walk when while with with* with-decorator with-gensyms ' +
          'xi xor yield yield-from zero? zip zip-longest | |= ~'
       };
    
      var SYMBOLSTART = 'a-zA-Z_\\-!.?+*=<>&#\'';
      var SYMBOL_RE = '[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:]*';
      var SIMPLE_NUMBER_RE = '[-+]?\\d+(\\.\\d+)?';
    
      var SHEBANG = {
        className: 'meta',
        begin: '^#!', end: '$'
      };
    
      var SYMBOL = {
        begin: SYMBOL_RE,
        relevance: 0
      };
      var NUMBER = {
        className: 'number', begin: SIMPLE_NUMBER_RE,
        relevance: 0
      };
      var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null});
      var COMMENT = hljs.COMMENT(
        ';',
        '$',
        {
          relevance: 0
        }
      );
      var LITERAL = {
        className: 'literal',
        begin: /\b([Tt]rue|[Ff]alse|nil|None)\b/
      };
      var COLLECTION = {
        begin: '[\\[\\{]', end: '[\\]\\}]'
      };
      var HINT = {
        className: 'comment',
        begin: '\\^' + SYMBOL_RE
      };
      var HINT_COL = hljs.COMMENT('\\^\\{', '\\}');
      var KEY = {
        className: 'symbol',
        begin: '[:]{1,2}' + SYMBOL_RE
      };
      var LIST = {
        begin: '\\(', end: '\\)'
      };
      var BODY = {
        endsWithParent: true,
        relevance: 0
      };
      var NAME = {
        keywords: keywords,
        lexemes: SYMBOL_RE,
        className: 'name', begin: SYMBOL_RE,
        starts: BODY
      };
      var DEFAULT_CONTAINS = [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL, SYMBOL];
    
      LIST.contains = [hljs.COMMENT('comment', ''), NAME, BODY];
      BODY.contains = DEFAULT_CONTAINS;
      COLLECTION.contains = DEFAULT_CONTAINS;
    
      return {
        aliases: ['hylang'],
        illegal: /\S/,
        contains: [SHEBANG, LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL]
      }
    };
    
    /***/ }),
    /* 480 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var START_BRACKET = '\\[';
      var END_BRACKET = '\\]';
      return {
        aliases: ['i7'],
        case_insensitive: true,
        keywords: {
          // Some keywords more or less unique to I7, for relevance.
          keyword:
            // kind:
            'thing room person man woman animal container ' +
            'supporter backdrop door ' +
            // characteristic:
            'scenery open closed locked inside gender ' +
            // verb:
            'is are say understand ' +
            // misc keyword:
            'kind of rule'
        },
        contains: [
          {
            className: 'string',
            begin: '"', end: '"',
            relevance: 0,
            contains: [
              {
                className: 'subst',
                begin: START_BRACKET, end: END_BRACKET
              }
            ]
          },
          {
            className: 'section',
            begin: /^(Volume|Book|Part|Chapter|Section|Table)\b/,
            end: '$'
          },
          {
            // Rule definition
            // This is here for relevance.
            begin: /^(Check|Carry out|Report|Instead of|To|Rule|When|Before|After)\b/,
            end: ':',
            contains: [
              {
                //Rule name
                begin: '\\(This', end: '\\)'
              }
            ]
          },
          {
            className: 'comment',
            begin: START_BRACKET, end: END_BRACKET,
            contains: ['self']
          }
        ]
      };
    };
    
    /***/ }),
    /* 481 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var STRING = {
        className: "string",
        contains: [hljs.BACKSLASH_ESCAPE],
        variants: [
          {
            begin: "'''", end: "'''",
            relevance: 10
          }, {
            begin: '"""', end: '"""',
            relevance: 10
          }, {
            begin: '"', end: '"'
          }, {
            begin: "'", end: "'"
          }
        ]
      };
      return {
        aliases: ['toml'],
        case_insensitive: true,
        illegal: /\S/,
        contains: [
          hljs.COMMENT(';', '$'),
          hljs.HASH_COMMENT_MODE,
          {
            className: 'section',
            begin: /^\s*\[+/, end: /\]+/
          },
          {
            begin: /^[a-z0-9\[\]_-]+\s*=\s*/, end: '$',
            returnBegin: true,
            contains: [
              {
                className: 'attr',
                begin: /[a-z0-9\[\]_-]+/
              },
              {
                begin: /=/, endsWithParent: true,
                relevance: 0,
                contains: [
                  {
                    className: 'literal',
                    begin: /\bon|off|true|false|yes|no\b/
                  },
                  {
                    className: 'variable',
                    variants: [
                      {begin: /\$[\w\d"][\w\d_]*/},
                      {begin: /\$\{(.*?)}/}
                    ]
                  },
                  STRING,
                  {
                    className: 'number',
                    begin: /([\+\-]+)?[\d]+_[\d_]+/
                  },
                  hljs.NUMBER_MODE
                ]
              }
            ]
          }
        ]
      };
    };
    
    /***/ }),
    /* 482 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var PARAMS = {
        className: 'params',
        begin: '\\(', end: '\\)'
      };
    
      var F_KEYWORDS = {
        literal: '.False. .True.',
        keyword: 'kind do while private call intrinsic where elsewhere ' +
          'type endtype endmodule endselect endinterface end enddo endif if forall endforall only contains default return stop then ' +
          'public subroutine|10 function program .and. .or. .not. .le. .eq. .ge. .gt. .lt. ' +
          'goto save else use module select case ' +
          'access blank direct exist file fmt form formatted iostat name named nextrec number opened rec recl sequential status unformatted unit ' +
          'continue format pause cycle exit ' +
          'c_null_char c_alert c_backspace c_form_feed flush wait decimal round iomsg ' +
          'synchronous nopass non_overridable pass protected volatile abstract extends import ' +
          'non_intrinsic value deferred generic final enumerator class associate bind enum ' +
          'c_int c_short c_long c_long_long c_signed_char c_size_t c_int8_t c_int16_t c_int32_t c_int64_t c_int_least8_t c_int_least16_t ' +
          'c_int_least32_t c_int_least64_t c_int_fast8_t c_int_fast16_t c_int_fast32_t c_int_fast64_t c_intmax_t C_intptr_t c_float c_double ' +
          'c_long_double c_float_complex c_double_complex c_long_double_complex c_bool c_char c_null_ptr c_null_funptr ' +
          'c_new_line c_carriage_return c_horizontal_tab c_vertical_tab iso_c_binding c_loc c_funloc c_associated  c_f_pointer ' +
          'c_ptr c_funptr iso_fortran_env character_storage_size error_unit file_storage_size input_unit iostat_end iostat_eor ' +
          'numeric_storage_size output_unit c_f_procpointer ieee_arithmetic ieee_support_underflow_control ' +
          'ieee_get_underflow_mode ieee_set_underflow_mode newunit contiguous recursive ' +
          'pad position action delim readwrite eor advance nml interface procedure namelist include sequence elemental pure ' +
          'integer real character complex logical dimension allocatable|10 parameter ' +
          'external implicit|10 none double precision assign intent optional pointer ' +
          'target in out common equivalence data ' +
          // IRPF90 special keywords
          'begin_provider &begin_provider end_provider begin_shell end_shell begin_template end_template subst assert touch ' +
          'soft_touch provide no_dep free irp_if irp_else irp_endif irp_write irp_read',
        built_in: 'alog alog10 amax0 amax1 amin0 amin1 amod cabs ccos cexp clog csin csqrt dabs dacos dasin datan datan2 dcos dcosh ddim dexp dint ' +
          'dlog dlog10 dmax1 dmin1 dmod dnint dsign dsin dsinh dsqrt dtan dtanh float iabs idim idint idnint ifix isign max0 max1 min0 min1 sngl ' +
          'algama cdabs cdcos cdexp cdlog cdsin cdsqrt cqabs cqcos cqexp cqlog cqsin cqsqrt dcmplx dconjg derf derfc dfloat dgamma dimag dlgama ' +
          'iqint qabs qacos qasin qatan qatan2 qcmplx qconjg qcos qcosh qdim qerf qerfc qexp qgamma qimag qlgama qlog qlog10 qmax1 qmin1 qmod ' +
          'qnint qsign qsin qsinh qsqrt qtan qtanh abs acos aimag aint anint asin atan atan2 char cmplx conjg cos cosh exp ichar index int log ' +
          'log10 max min nint sign sin sinh sqrt tan tanh print write dim lge lgt lle llt mod nullify allocate deallocate ' +
          'adjustl adjustr all allocated any associated bit_size btest ceiling count cshift date_and_time digits dot_product ' +
          'eoshift epsilon exponent floor fraction huge iand ibclr ibits ibset ieor ior ishft ishftc lbound len_trim matmul ' +
          'maxexponent maxloc maxval merge minexponent minloc minval modulo mvbits nearest pack present product ' +
          'radix random_number random_seed range repeat reshape rrspacing scale scan selected_int_kind selected_real_kind ' +
          'set_exponent shape size spacing spread sum system_clock tiny transpose trim ubound unpack verify achar iachar transfer ' +
          'dble entry dprod cpu_time command_argument_count get_command get_command_argument get_environment_variable is_iostat_end ' +
          'ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode ' +
          'is_iostat_eor move_alloc new_line selected_char_kind same_type_as extends_type_of'  +
          'acosh asinh atanh bessel_j0 bessel_j1 bessel_jn bessel_y0 bessel_y1 bessel_yn erf erfc erfc_scaled gamma log_gamma hypot norm2 ' +
          'atomic_define atomic_ref execute_command_line leadz trailz storage_size merge_bits ' +
          'bge bgt ble blt dshiftl dshiftr findloc iall iany iparity image_index lcobound ucobound maskl maskr ' +
          'num_images parity popcnt poppar shifta shiftl shiftr this_image ' +
          // IRPF90 special built_ins
          'IRP_ALIGN irp_here'
      };
      return {
        case_insensitive: true,
        keywords: F_KEYWORDS,
        illegal: /\/\*/,
        contains: [
          hljs.inherit(hljs.APOS_STRING_MODE, {className: 'string', relevance: 0}),
          hljs.inherit(hljs.QUOTE_STRING_MODE, {className: 'string', relevance: 0}),
          {
            className: 'function',
            beginKeywords: 'subroutine function program',
            illegal: '[${=\\n]',
            contains: [hljs.UNDERSCORE_TITLE_MODE, PARAMS]
          },
          hljs.COMMENT('!', '$', {relevance: 0}),
          hljs.COMMENT('begin_doc', 'end_doc', {relevance: 10}),
          {
            className: 'number',
            begin: '(?=\\b|\\+|\\-|\\.)(?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*)(?:[de][+-]?\\d+)?\\b\\.?',
            relevance: 0
          }
        ]
      };
    };
    
    /***/ }),
    /* 483 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var JAVA_IDENT_RE = '[\u00C0-\u02B8a-zA-Z_$][\u00C0-\u02B8a-zA-Z_$0-9]*';
      var GENERIC_IDENT_RE = JAVA_IDENT_RE + '(<' + JAVA_IDENT_RE + '(\\s*,\\s*' + JAVA_IDENT_RE + ')*>)?';
      var KEYWORDS =
        'false synchronized int abstract float private char boolean static null if const ' +
        'for true while long strictfp finally protected import native final void ' +
        'enum else break transient catch instanceof byte super volatile case assert short ' +
        'package default double public try this switch continue throws protected public private ' +
        'module requires exports do';
    
      // https://docs.oracle.com/javase/7/docs/technotes/guides/language/underscores-literals.html
      var JAVA_NUMBER_RE = '\\b' +
        '(' +
          '0[bB]([01]+[01_]+[01]+|[01]+)' + // 0b...
          '|' +
          '0[xX]([a-fA-F0-9]+[a-fA-F0-9_]+[a-fA-F0-9]+|[a-fA-F0-9]+)' + // 0x...
          '|' +
          '(' +
            '([\\d]+[\\d_]+[\\d]+|[\\d]+)(\\.([\\d]+[\\d_]+[\\d]+|[\\d]+))?' +
            '|' +
            '\\.([\\d]+[\\d_]+[\\d]+|[\\d]+)' +
          ')' +
          '([eE][-+]?\\d+)?' + // octal, decimal, float
        ')' +
        '[lLfF]?';
      var JAVA_NUMBER_MODE = {
        className: 'number',
        begin: JAVA_NUMBER_RE,
        relevance: 0
      };
    
      return {
        aliases: ['jsp'],
        keywords: KEYWORDS,
        illegal: /<\/|#/,
        contains: [
          hljs.COMMENT(
            '/\\*\\*',
            '\\*/',
            {
              relevance : 0,
              contains : [
                {
                  // eat up @'s in emails to prevent them to be recognized as doctags
                  begin: /\w+@/, relevance: 0
                },
                {
                  className : 'doctag',
                  begin : '@[A-Za-z]+'
                }
              ]
            }
          ),
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE,
          {
            className: 'class',
            beginKeywords: 'class interface', end: /[{;=]/, excludeEnd: true,
            keywords: 'class interface',
            illegal: /[:"\[\]]/,
            contains: [
              {beginKeywords: 'extends implements'},
              hljs.UNDERSCORE_TITLE_MODE
            ]
          },
          {
            // Expression keywords prevent 'keyword Name(...)' from being
            // recognized as a function definition
            beginKeywords: 'new throw return else',
            relevance: 0
          },
          {
            className: 'function',
            begin: '(' + GENERIC_IDENT_RE + '\\s+)+' + hljs.UNDERSCORE_IDENT_RE + '\\s*\\(', returnBegin: true, end: /[{;=]/,
            excludeEnd: true,
            keywords: KEYWORDS,
            contains: [
              {
                begin: hljs.UNDERSCORE_IDENT_RE + '\\s*\\(', returnBegin: true,
                relevance: 0,
                contains: [hljs.UNDERSCORE_TITLE_MODE]
              },
              {
                className: 'params',
                begin: /\(/, end: /\)/,
                keywords: KEYWORDS,
                relevance: 0,
                contains: [
                  hljs.APOS_STRING_MODE,
                  hljs.QUOTE_STRING_MODE,
                  hljs.C_NUMBER_MODE,
                  hljs.C_BLOCK_COMMENT_MODE
                ]
              },
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE
            ]
          },
          JAVA_NUMBER_MODE,
          {
            className: 'meta', begin: '@[A-Za-z]+'
          }
        ]
      };
    };
    
    /***/ }),
    /* 484 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';
      var KEYWORDS = {
        keyword:
          'in of if for while finally var new function do return void else break catch ' +
          'instanceof with throw case default try this switch continue typeof delete ' +
          'let yield const export super debugger as async await static ' +
          // ECMAScript 6 modules import
          'import from as'
        ,
        literal:
          'true false null undefined NaN Infinity',
        built_in:
          'eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent ' +
          'encodeURI encodeURIComponent escape unescape Object Function Boolean Error ' +
          'EvalError InternalError RangeError ReferenceError StopIteration SyntaxError ' +
          'TypeError URIError Number Math Date String RegExp Array Float32Array ' +
          'Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array ' +
          'Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require ' +
          'module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect ' +
          'Promise'
      };
      var EXPRESSIONS;
      var NUMBER = {
        className: 'number',
        variants: [
          { begin: '\\b(0[bB][01]+)' },
          { begin: '\\b(0[oO][0-7]+)' },
          { begin: hljs.C_NUMBER_RE }
        ],
        relevance: 0
      };
      var SUBST = {
        className: 'subst',
        begin: '\\$\\{', end: '\\}',
        keywords: KEYWORDS,
        contains: []  // defined later
      };
      var TEMPLATE_STRING = {
        className: 'string',
        begin: '`', end: '`',
        contains: [
          hljs.BACKSLASH_ESCAPE,
          SUBST
        ]
      };
      SUBST.contains = [
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        TEMPLATE_STRING,
        NUMBER,
        hljs.REGEXP_MODE
      ]
      var PARAMS_CONTAINS = SUBST.contains.concat([
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.C_LINE_COMMENT_MODE
      ]);
    
      return {
        aliases: ['js', 'jsx'],
        keywords: KEYWORDS,
        contains: [
          {
            className: 'meta',
            relevance: 10,
            begin: /^\s*['"]use (strict|asm)['"]/
          },
          {
            className: 'meta',
            begin: /^#!/, end: /$/
          },
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE,
          TEMPLATE_STRING,
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          NUMBER,
          { // object attr container
            begin: /[{,]\s*/, relevance: 0,
            contains: [
              {
                begin: IDENT_RE + '\\s*:', returnBegin: true,
                relevance: 0,
                contains: [{className: 'attr', begin: IDENT_RE, relevance: 0}]
              }
            ]
          },
          { // "value" container
            begin: '(' + hljs.RE_STARTERS_RE + '|\\b(case|return|throw)\\b)\\s*',
            keywords: 'return throw case',
            contains: [
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              hljs.REGEXP_MODE,
              {
                className: 'function',
                begin: '(\\(.*?\\)|' + IDENT_RE + ')\\s*=>', returnBegin: true,
                end: '\\s*=>',
                contains: [
                  {
                    className: 'params',
                    variants: [
                      {
                        begin: IDENT_RE
                      },
                      {
                        begin: /\(\s*\)/,
                      },
                      {
                        begin: /\(/, end: /\)/,
                        excludeBegin: true, excludeEnd: true,
                        keywords: KEYWORDS,
                        contains: PARAMS_CONTAINS
                      }
                    ]
                  }
                ]
              },
              { // E4X / JSX
                begin: /</, end: /(\/\w+|\w+\/)>/,
                subLanguage: 'xml',
                contains: [
                  {begin: /<\w+\s*\/>/, skip: true},
                  {
                    begin: /<\w+/, end: /(\/\w+|\w+\/)>/, skip: true,
                    contains: [
                      {begin: /<\w+\s*\/>/, skip: true},
                      'self'
                    ]
                  }
                ]
              }
            ],
            relevance: 0
          },
          {
            className: 'function',
            beginKeywords: 'function', end: /\{/, excludeEnd: true,
            contains: [
              hljs.inherit(hljs.TITLE_MODE, {begin: IDENT_RE}),
              {
                className: 'params',
                begin: /\(/, end: /\)/,
                excludeBegin: true,
                excludeEnd: true,
                contains: PARAMS_CONTAINS
              }
            ],
            illegal: /\[|%/
          },
          {
            begin: /\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
          },
          hljs.METHOD_GUARD,
          { // ES6 class
            className: 'class',
            beginKeywords: 'class', end: /[{;=]/, excludeEnd: true,
            illegal: /[:"\[\]]/,
            contains: [
              {beginKeywords: 'extends'},
              hljs.UNDERSCORE_TITLE_MODE
            ]
          },
          {
            beginKeywords: 'constructor', end: /\{/, excludeEnd: true
          }
        ],
        illegal: /#(?!!)/
      };
    };
    
    /***/ }),
    /* 485 */
    /***/ (function(module, exports) {
    
    module.exports = function (hljs) {
      var PARAM = {
        begin: /[\w-]+ *=/, returnBegin: true,
        relevance: 0,
        contains: [{className: 'attr', begin: /[\w-]+/}]
      };
      var PARAMSBLOCK = {
        className: 'params',
        begin: /\(/,
        end: /\)/,
        contains: [PARAM],
        relevance : 0
      };
      var OPERATION = {
        className: 'function',
        begin: /:[\w\-.]+/,
        relevance: 0
      };
      var PATH = {
        className: 'string',
        begin: /\B(([\/.])[\w\-.\/=]+)+/,
      };
      var COMMAND_PARAMS = {
        className: 'params',
        begin: /--[\w\-=\/]+/,
      };
      return {
        aliases: ['wildfly-cli'],
        lexemes: '[a-z\-]+',
        keywords: {
          keyword: 'alias batch cd clear command connect connection-factory connection-info data-source deploy ' +
          'deployment-info deployment-overlay echo echo-dmr help history if jdbc-driver-info jms-queue|20 jms-topic|20 ls ' +
          'patch pwd quit read-attribute read-operation reload rollout-plan run-batch set shutdown try unalias ' +
          'undeploy unset version xa-data-source', // module
          literal: 'true false'
        },
        contains: [
          hljs.HASH_COMMENT_MODE,
          hljs.QUOTE_STRING_MODE,
          COMMAND_PARAMS,
          OPERATION,
          PATH,
          PARAMSBLOCK
        ]
      }
    };
    
    /***/ }),
    /* 486 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var LITERALS = {literal: 'true false null'};
      var TYPES = [
        hljs.QUOTE_STRING_MODE,
        hljs.C_NUMBER_MODE
      ];
      var VALUE_CONTAINER = {
        end: ',', endsWithParent: true, excludeEnd: true,
        contains: TYPES,
        keywords: LITERALS
      };
      var OBJECT = {
        begin: '{', end: '}',
        contains: [
          {
            className: 'attr',
            begin: /"/, end: /"/,
            contains: [hljs.BACKSLASH_ESCAPE],
            illegal: '\\n',
          },
          hljs.inherit(VALUE_CONTAINER, {begin: /:/})
        ],
        illegal: '\\S'
      };
      var ARRAY = {
        begin: '\\[', end: '\\]',
        contains: [hljs.inherit(VALUE_CONTAINER)], // inherit is a workaround for a bug that makes shared modes with endsWithParent compile only the ending of one of the parents
        illegal: '\\S'
      };
      TYPES.splice(TYPES.length, 0, OBJECT, ARRAY);
      return {
        contains: TYPES,
        keywords: LITERALS,
        illegal: '\\S'
      };
    };
    
    /***/ }),
    /* 487 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      // Since there are numerous special names in Julia, it is too much trouble
      // to maintain them by hand. Hence these names (i.e. keywords, literals and
      // built-ins) are automatically generated from Julia v0.6 itself through
      // the following scripts for each.
    
      var KEYWORDS = {
        // # keyword generator, multi-word keywords handled manually below
        // foreach(println, ["in", "isa", "where"])
        // for kw in Base.REPLCompletions.complete_keyword("")
        //     if !(contains(kw, " ") || kw == "struct")
        //         println(kw)
        //     end
        // end
        keyword:
          'in isa where ' +
          'baremodule begin break catch ccall const continue do else elseif end export false finally for function ' +
          'global if import importall let local macro module quote return true try using while ' +
          // legacy, to be deprecated in the next release
          'type immutable abstract bitstype typealias ',
    
        // # literal generator
        // println("true")
        // println("false")
        // for name in Base.REPLCompletions.completions("", 0)[1]
        //     try
        //         v = eval(Symbol(name))
        //         if !(v isa Function || v isa Type || v isa TypeVar || v isa Module || v isa Colon)
        //             println(name)
        //         end
        //     end
        // end
        literal:
          'true false ' +
          'ARGS C_NULL DevNull ENDIAN_BOM ENV I Inf Inf16 Inf32 Inf64 InsertionSort JULIA_HOME LOAD_PATH MergeSort ' +
          'NaN NaN16 NaN32 NaN64 PROGRAM_FILE QuickSort RoundDown RoundFromZero RoundNearest RoundNearestTiesAway ' +
          'RoundNearestTiesUp RoundToZero RoundUp STDERR STDIN STDOUT VERSION catalan e|0 eu|0 eulergamma golden im ' +
          'nothing pi γ π φ ',
    
        // # built_in generator:
        // for name in Base.REPLCompletions.completions("", 0)[1]
        //     try
        //         v = eval(Symbol(name))
        //         if v isa Type || v isa TypeVar
        //             println(name)
        //         end
        //     end
        // end
        built_in:
          'ANY AbstractArray AbstractChannel AbstractFloat AbstractMatrix AbstractRNG AbstractSerializer AbstractSet ' +
          'AbstractSparseArray AbstractSparseMatrix AbstractSparseVector AbstractString AbstractUnitRange AbstractVecOrMat ' +
          'AbstractVector Any ArgumentError Array AssertionError Associative Base64DecodePipe Base64EncodePipe Bidiagonal '+
          'BigFloat BigInt BitArray BitMatrix BitVector Bool BoundsError BufferStream CachingPool CapturedException ' +
          'CartesianIndex CartesianRange Cchar Cdouble Cfloat Channel Char Cint Cintmax_t Clong Clonglong ClusterManager ' +
          'Cmd CodeInfo Colon Complex Complex128 Complex32 Complex64 CompositeException Condition ConjArray ConjMatrix ' +
          'ConjVector Cptrdiff_t Cshort Csize_t Cssize_t Cstring Cuchar Cuint Cuintmax_t Culong Culonglong Cushort Cwchar_t ' +
          'Cwstring DataType Date DateFormat DateTime DenseArray DenseMatrix DenseVecOrMat DenseVector Diagonal Dict ' +
          'DimensionMismatch Dims DirectIndexString Display DivideError DomainError EOFError EachLine Enum Enumerate ' +
          'ErrorException Exception ExponentialBackOff Expr Factorization FileMonitor Float16 Float32 Float64 Function ' +
          'Future GlobalRef GotoNode HTML Hermitian IO IOBuffer IOContext IOStream IPAddr IPv4 IPv6 IndexCartesian IndexLinear ' +
          'IndexStyle InexactError InitError Int Int128 Int16 Int32 Int64 Int8 IntSet Integer InterruptException ' +
          'InvalidStateException Irrational KeyError LabelNode LinSpace LineNumberNode LoadError LowerTriangular MIME Matrix ' +
          'MersenneTwister Method MethodError MethodTable Module NTuple NewvarNode NullException Nullable Number ObjectIdDict ' +
          'OrdinalRange OutOfMemoryError OverflowError Pair ParseError PartialQuickSort PermutedDimsArray Pipe ' +
          'PollingFileWatcher ProcessExitedException Ptr QuoteNode RandomDevice Range RangeIndex Rational RawFD ' +
          'ReadOnlyMemoryError Real ReentrantLock Ref Regex RegexMatch RemoteChannel RemoteException RevString RoundingMode ' +
          'RowVector SSAValue SegmentationFault SerializationState Set SharedArray SharedMatrix SharedVector Signed ' +
          'SimpleVector Slot SlotNumber SparseMatrixCSC SparseVector StackFrame StackOverflowError StackTrace StepRange ' +
          'StepRangeLen StridedArray StridedMatrix StridedVecOrMat StridedVector String SubArray SubString SymTridiagonal ' +
          'Symbol Symmetric SystemError TCPSocket Task Text TextDisplay Timer Tridiagonal Tuple Type TypeError TypeMapEntry ' +
          'TypeMapLevel TypeName TypeVar TypedSlot UDPSocket UInt UInt128 UInt16 UInt32 UInt64 UInt8 UndefRefError UndefVarError ' +
          'UnicodeError UniformScaling Union UnionAll UnitRange Unsigned UpperTriangular Val Vararg VecElement VecOrMat Vector ' +
          'VersionNumber Void WeakKeyDict WeakRef WorkerConfig WorkerPool '
      };
    
      // ref: http://julia.readthedocs.org/en/latest/manual/variables/#allowed-variable-names
      var VARIABLE_NAME_RE = '[A-Za-z_\\u00A1-\\uFFFF][A-Za-z_0-9\\u00A1-\\uFFFF]*';
    
      // placeholder for recursive self-reference
      var DEFAULT = {
        lexemes: VARIABLE_NAME_RE, keywords: KEYWORDS, illegal: /<\//
      };
    
      // ref: http://julia.readthedocs.org/en/latest/manual/integers-and-floating-point-numbers/
      var NUMBER = {
        className: 'number',
        // supported numeric literals:
        //  * binary literal (e.g. 0x10)
        //  * octal literal (e.g. 0o76543210)
        //  * hexadecimal literal (e.g. 0xfedcba876543210)
        //  * hexadecimal floating point literal (e.g. 0x1p0, 0x1.2p2)
        //  * decimal literal (e.g. 9876543210, 100_000_000)
        //  * floating pointe literal (e.g. 1.2, 1.2f, .2, 1., 1.2e10, 1.2e-10)
        begin: /(\b0x[\d_]*(\.[\d_]*)?|0x\.\d[\d_]*)p[-+]?\d+|\b0[box][a-fA-F0-9][a-fA-F0-9_]*|(\b\d[\d_]*(\.[\d_]*)?|\.\d[\d_]*)([eEfF][-+]?\d+)?/,
        relevance: 0
      };
    
      var CHAR = {
        className: 'string',
        begin: /'(.|\\[xXuU][a-zA-Z0-9]+)'/
      };
    
      var INTERPOLATION = {
        className: 'subst',
        begin: /\$\(/, end: /\)/,
        keywords: KEYWORDS
      };
    
      var INTERPOLATED_VARIABLE = {
        className: 'variable',
        begin: '\\$' + VARIABLE_NAME_RE
      };
    
      // TODO: neatly escape normal code in string literal
      var STRING = {
        className: 'string',
        contains: [hljs.BACKSLASH_ESCAPE, INTERPOLATION, INTERPOLATED_VARIABLE],
        variants: [
          { begin: /\w*"""/, end: /"""\w*/, relevance: 10 },
          { begin: /\w*"/, end: /"\w*/ }
        ]
      };
    
      var COMMAND = {
        className: 'string',
        contains: [hljs.BACKSLASH_ESCAPE, INTERPOLATION, INTERPOLATED_VARIABLE],
        begin: '`', end: '`'
      };
    
      var MACROCALL = {
        className: 'meta',
        begin: '@' + VARIABLE_NAME_RE
      };
    
      var COMMENT = {
        className: 'comment',
        variants: [
          { begin: '#=', end: '=#', relevance: 10 },
          { begin: '#', end: '$' }
        ]
      };
    
      DEFAULT.contains = [
        NUMBER,
        CHAR,
        STRING,
        COMMAND,
        MACROCALL,
        COMMENT,
        hljs.HASH_COMMENT_MODE,
        {
          className: 'keyword',
          begin:
            '\\b(((abstract|primitive)\\s+)type|(mutable\\s+)?struct)\\b'
        },
        {begin: /<:/}  // relevance booster
      ];
      INTERPOLATION.contains = DEFAULT.contains;
    
      return DEFAULT;
    };
    
    /***/ }),
    /* 488 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        contains: [
          {
            className: 'meta',
            begin: /^julia>/,
            relevance: 10,
            starts: {
              // end the highlighting if we are on a new line and the line does not have at
              // least six spaces in the beginning
              end: /^(?![ ]{6})/,
              subLanguage: 'julia'
          },
          // jldoctest Markdown blocks are used in the Julia manual and package docs indicate
          // code snippets that should be verified when the documentation is built. They can be
          // either REPL-like or script-like, but are usually REPL-like and therefore we apply
          // julia-repl highlighting to them. More information can be found in Documenter's
          // manual: https://juliadocs.github.io/Documenter.jl/latest/man/doctests.html
          aliases: ['jldoctest']
          }
        ]
      }
    };
    
    /***/ }),
    /* 489 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var KEYWORDS = {
        keyword:
          'abstract as val var vararg get set class object open private protected public noinline ' +
          'crossinline dynamic final enum if else do while for when throw try catch finally ' +
          'import package is in fun override companion reified inline lateinit init' +
          'interface annotation data sealed internal infix operator out by constructor super ' +
          // to be deleted soon
          'trait volatile transient native default',
        built_in:
          'Byte Short Char Int Long Boolean Float Double Void Unit Nothing',
        literal:
          'true false null'
      };
      var KEYWORDS_WITH_LABEL = {
        className: 'keyword',
        begin: /\b(break|continue|return|this)\b/,
        starts: {
          contains: [
            {
              className: 'symbol',
              begin: /@\w+/
            }
          ]
        }
      };
      var LABEL = {
        className: 'symbol', begin: hljs.UNDERSCORE_IDENT_RE + '@'
      };
    
      // for string templates
      var SUBST = {
        className: 'subst',
        begin: '\\${', end: '}', contains: [hljs.APOS_STRING_MODE, hljs.C_NUMBER_MODE]
      };
      var VARIABLE = {
        className: 'variable', begin: '\\$' + hljs.UNDERSCORE_IDENT_RE
      };
      var STRING = {
        className: 'string',
        variants: [
          {
            begin: '"""', end: '"""',
            contains: [VARIABLE, SUBST]
          },
          // Can't use built-in modes easily, as we want to use STRING in the meta
          // context as 'meta-string' and there's no syntax to remove explicitly set
          // classNames in built-in modes.
          {
            begin: '\'', end: '\'',
            illegal: /\n/,
            contains: [hljs.BACKSLASH_ESCAPE]
          },
          {
            begin: '"', end: '"',
            illegal: /\n/,
            contains: [hljs.BACKSLASH_ESCAPE, VARIABLE, SUBST]
          }
        ]
      };
    
      var ANNOTATION_USE_SITE = {
        className: 'meta', begin: '@(?:file|property|field|get|set|receiver|param|setparam|delegate)\\s*:(?:\\s*' + hljs.UNDERSCORE_IDENT_RE + ')?'
      };
      var ANNOTATION = {
        className: 'meta', begin: '@' + hljs.UNDERSCORE_IDENT_RE,
        contains: [
          {
            begin: /\(/, end: /\)/,
            contains: [
              hljs.inherit(STRING, {className: 'meta-string'})
            ]
          }
        ]
      };
    
      return {
        keywords: KEYWORDS,
        contains : [
          hljs.COMMENT(
            '/\\*\\*',
            '\\*/',
            {
              relevance : 0,
              contains : [{
                className : 'doctag',
                begin : '@[A-Za-z]+'
              }]
            }
          ),
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          KEYWORDS_WITH_LABEL,
          LABEL,
          ANNOTATION_USE_SITE,
          ANNOTATION,
          {
            className: 'function',
            beginKeywords: 'fun', end: '[(]|$',
            returnBegin: true,
            excludeEnd: true,
            keywords: KEYWORDS,
            illegal: /fun\s+(<.*>)?[^\s\(]+(\s+[^\s\(]+)\s*=/,
            relevance: 5,
            contains: [
              {
                begin: hljs.UNDERSCORE_IDENT_RE + '\\s*\\(', returnBegin: true,
                relevance: 0,
                contains: [hljs.UNDERSCORE_TITLE_MODE]
              },
              {
                className: 'type',
                begin: /</, end: />/, keywords: 'reified',
                relevance: 0
              },
              {
                className: 'params',
                begin: /\(/, end: /\)/,
                endsParent: true,
                keywords: KEYWORDS,
                relevance: 0,
                contains: [
                  {
                    begin: /:/, end: /[=,\/]/, endsWithParent: true,
                    contains: [
                      {className: 'type', begin: hljs.UNDERSCORE_IDENT_RE},
                      hljs.C_LINE_COMMENT_MODE,
                      hljs.C_BLOCK_COMMENT_MODE
                    ],
                    relevance: 0
                  },
                  hljs.C_LINE_COMMENT_MODE,
                  hljs.C_BLOCK_COMMENT_MODE,
                  ANNOTATION_USE_SITE,
                  ANNOTATION,
                  STRING,
                  hljs.C_NUMBER_MODE
                ]
              },
              hljs.C_BLOCK_COMMENT_MODE
            ]
          },
          {
            className: 'class',
            beginKeywords: 'class interface trait', end: /[:\{(]|$/, // remove 'trait' when removed from KEYWORDS
            excludeEnd: true,
            illegal: 'extends implements',
            contains: [
              {beginKeywords: 'public protected internal private constructor'},
              hljs.UNDERSCORE_TITLE_MODE,
              {
                className: 'type',
                begin: /</, end: />/, excludeBegin: true, excludeEnd: true,
                relevance: 0
              },
              {
                className: 'type',
                begin: /[,:]\s*/, end: /[<\(,]|$/, excludeBegin: true, returnEnd: true
              },
              ANNOTATION_USE_SITE,
              ANNOTATION
            ]
          },
          STRING,
          {
            className: 'meta',
            begin: "^#!/usr/bin/env", end: '$',
            illegal: '\n'
          },
          hljs.C_NUMBER_MODE
        ]
      };
    };
    
    /***/ }),
    /* 490 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var LASSO_IDENT_RE = '[a-zA-Z_][\\w.]*';
      var LASSO_ANGLE_RE = '<\\?(lasso(script)?|=)';
      var LASSO_CLOSE_RE = '\\]|\\?>';
      var LASSO_KEYWORDS = {
        literal:
          'true false none minimal full all void and or not ' +
          'bw nbw ew new cn ncn lt lte gt gte eq neq rx nrx ft',
        built_in:
          'array date decimal duration integer map pair string tag xml null ' +
          'boolean bytes keyword list locale queue set stack staticarray ' +
          'local var variable global data self inherited currentcapture givenblock',
        keyword:
          'cache database_names database_schemanames database_tablenames ' +
          'define_tag define_type email_batch encode_set html_comment handle ' +
          'handle_error header if inline iterate ljax_target link ' +
          'link_currentaction link_currentgroup link_currentrecord link_detail ' +
          'link_firstgroup link_firstrecord link_lastgroup link_lastrecord ' +
          'link_nextgroup link_nextrecord link_prevgroup link_prevrecord log ' +
          'loop namespace_using output_none portal private protect records ' +
          'referer referrer repeating resultset rows search_args ' +
          'search_arguments select sort_args sort_arguments thread_atomic ' +
          'value_list while abort case else fail_if fail_ifnot fail if_empty ' +
          'if_false if_null if_true loop_abort loop_continue loop_count params ' +
          'params_up return return_value run_children soap_definetag ' +
          'soap_lastrequest soap_lastresponse tag_name ascending average by ' +
          'define descending do equals frozen group handle_failure import in ' +
          'into join let match max min on order parent protected provide public ' +
          'require returnhome skip split_thread sum take thread to trait type ' +
          'where with yield yieldhome'
      };
      var HTML_COMMENT = hljs.COMMENT(
        '<!--',
        '-->',
        {
          relevance: 0
        }
      );
      var LASSO_NOPROCESS = {
        className: 'meta',
        begin: '\\[noprocess\\]',
        starts: {
          end: '\\[/noprocess\\]',
          returnEnd: true,
          contains: [HTML_COMMENT]
        }
      };
      var LASSO_START = {
        className: 'meta',
        begin: '\\[/noprocess|' + LASSO_ANGLE_RE
      };
      var LASSO_DATAMEMBER = {
        className: 'symbol',
        begin: '\'' + LASSO_IDENT_RE + '\''
      };
      var LASSO_CODE = [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.inherit(hljs.C_NUMBER_MODE, {begin: hljs.C_NUMBER_RE + '|(-?infinity|NaN)\\b'}),
        hljs.inherit(hljs.APOS_STRING_MODE, {illegal: null}),
        hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null}),
        {
          className: 'string',
          begin: '`', end: '`'
        },
        { // variables
          variants: [
            {
              begin: '[#$]' + LASSO_IDENT_RE
            },
            {
              begin: '#', end: '\\d+',
              illegal: '\\W'
            }
          ]
        },
        {
          className: 'type',
          begin: '::\\s*', end: LASSO_IDENT_RE,
          illegal: '\\W'
        },
        {
          className: 'params',
          variants: [
            {
              begin: '-(?!infinity)' + LASSO_IDENT_RE,
              relevance: 0
            },
            {
              begin: '(\\.\\.\\.)'
            }
          ]
        },
        {
          begin: /(->|\.)\s*/,
          relevance: 0,
          contains: [LASSO_DATAMEMBER]
        },
        {
          className: 'class',
          beginKeywords: 'define',
          returnEnd: true, end: '\\(|=>',
          contains: [
            hljs.inherit(hljs.TITLE_MODE, {begin: LASSO_IDENT_RE + '(=(?!>))?|[-+*/%](?!>)'})
          ]
        }
      ];
      return {
        aliases: ['ls', 'lassoscript'],
        case_insensitive: true,
        lexemes: LASSO_IDENT_RE + '|&[lg]t;',
        keywords: LASSO_KEYWORDS,
        contains: [
          {
            className: 'meta',
            begin: LASSO_CLOSE_RE,
            relevance: 0,
            starts: { // markup
              end: '\\[|' + LASSO_ANGLE_RE,
              returnEnd: true,
              relevance: 0,
              contains: [HTML_COMMENT]
            }
          },
          LASSO_NOPROCESS,
          LASSO_START,
          {
            className: 'meta',
            begin: '\\[no_square_brackets',
            starts: {
              end: '\\[/no_square_brackets\\]', // not implemented in the language
              lexemes: LASSO_IDENT_RE + '|&[lg]t;',
              keywords: LASSO_KEYWORDS,
              contains: [
                {
                  className: 'meta',
                  begin: LASSO_CLOSE_RE,
                  relevance: 0,
                  starts: {
                    end: '\\[noprocess\\]|' + LASSO_ANGLE_RE,
                    returnEnd: true,
                    contains: [HTML_COMMENT]
                  }
                },
                LASSO_NOPROCESS,
                LASSO_START
              ].concat(LASSO_CODE)
            }
          },
          {
            className: 'meta',
            begin: '\\[',
            relevance: 0
          },
          {
            className: 'meta',
            begin: '^#!', end:'lasso9$',
            relevance: 10
          }
        ].concat(LASSO_CODE)
      };
    };
    
    /***/ }),
    /* 491 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        contains: [
          {
            className: 'attribute',
            begin: '^dn', end: ': ', excludeEnd: true,
            starts: {end: '$', relevance: 0},
            relevance: 10
          },
          {
            className: 'attribute',
            begin: '^\\w', end: ': ', excludeEnd: true,
            starts: {end: '$', relevance: 0}
          },
          {
            className: 'literal',
            begin: '^-', end: '$'
          },
          hljs.HASH_COMMENT_MODE
        ]
      };
    };
    
    /***/ }),
    /* 492 */
    /***/ (function(module, exports) {
    
    module.exports = function (hljs) {
      return {
        contains: [
          {
            className: 'function',
            begin: '#+' + '[A-Za-z_0-9]*' + '\\(',
            end:' {',
            returnBegin: true,
            excludeEnd: true,
            contains : [
              {
                className: 'keyword',
                begin: '#+'
              },
              {
                className: 'title',
                begin: '[A-Za-z_][A-Za-z_0-9]*'
              },
              {
                className: 'params',
                begin: '\\(', end: '\\)',
                endsParent: true,
                contains: [
                  {
                    className: 'string',
                    begin: '"',
                    end: '"'
                  },
                  {
                    className: 'variable',
                    begin: '[A-Za-z_][A-Za-z_0-9]*'
                  }
                ]
              }
            ]
          }
        ]
      };
    };
    
    /***/ }),
    /* 493 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var IDENT_RE        = '[\\w-]+'; // yes, Less identifiers may begin with a digit
      var INTERP_IDENT_RE = '(' + IDENT_RE + '|@{' + IDENT_RE + '})';
    
      /* Generic Modes */
    
      var RULES = [], VALUE = []; // forward def. for recursive modes
    
      var STRING_MODE = function(c) { return {
        // Less strings are not multiline (also include '~' for more consistent coloring of "escaped" strings)
        className: 'string', begin: '~?' + c + '.*?' + c
      };};
    
      var IDENT_MODE = function(name, begin, relevance) { return {
        className: name, begin: begin, relevance: relevance
      };};
    
      var PARENS_MODE = {
        // used only to properly balance nested parens inside mixin call, def. arg list
        begin: '\\(', end: '\\)', contains: VALUE, relevance: 0
      };
    
      // generic Less highlighter (used almost everywhere except selectors):
      VALUE.push(
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        STRING_MODE("'"),
        STRING_MODE('"'),
        hljs.CSS_NUMBER_MODE, // fixme: it does not include dot for numbers like .5em :(
        {
          begin: '(url|data-uri)\\(',
          starts: {className: 'string', end: '[\\)\\n]', excludeEnd: true}
        },
        IDENT_MODE('number', '#[0-9A-Fa-f]+\\b'),
        PARENS_MODE,
        IDENT_MODE('variable', '@@?' + IDENT_RE, 10),
        IDENT_MODE('variable', '@{'  + IDENT_RE + '}'),
        IDENT_MODE('built_in', '~?`[^`]*?`'), // inline javascript (or whatever host language) *multiline* string
        { // @media features (it’s here to not duplicate things in AT_RULE_MODE with extra PARENS_MODE overriding):
          className: 'attribute', begin: IDENT_RE + '\\s*:', end: ':', returnBegin: true, excludeEnd: true
        },
        {
          className: 'meta',
          begin: '!important'
        }
      );
    
      var VALUE_WITH_RULESETS = VALUE.concat({
        begin: '{', end: '}', contains: RULES
      });
    
      var MIXIN_GUARD_MODE = {
        beginKeywords: 'when', endsWithParent: true,
        contains: [{beginKeywords: 'and not'}].concat(VALUE) // using this form to override VALUE’s 'function' match
      };
    
      /* Rule-Level Modes */
    
      var RULE_MODE = {
        begin: INTERP_IDENT_RE + '\\s*:', returnBegin: true, end: '[;}]',
        relevance: 0,
        contains: [
          {
            className: 'attribute',
            begin: INTERP_IDENT_RE, end: ':', excludeEnd: true,
            starts: {
              endsWithParent: true, illegal: '[<=$]',
              relevance: 0,
              contains: VALUE
            }
          }
        ]
      };
    
      var AT_RULE_MODE = {
        className: 'keyword',
        begin: '@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\b',
        starts: {end: '[;{}]', returnEnd: true, contains: VALUE, relevance: 0}
      };
    
      // variable definitions and calls
      var VAR_RULE_MODE = {
        className: 'variable',
        variants: [
          // using more strict pattern for higher relevance to increase chances of Less detection.
          // this is *the only* Less specific statement used in most of the sources, so...
          // (we’ll still often loose to the css-parser unless there's '//' comment,
          // simply because 1 variable just can't beat 99 properties :)
          {begin: '@' + IDENT_RE + '\\s*:', relevance: 15},
          {begin: '@' + IDENT_RE}
        ],
        starts: {end: '[;}]', returnEnd: true, contains: VALUE_WITH_RULESETS}
      };
    
      var SELECTOR_MODE = {
        // first parse unambiguous selectors (i.e. those not starting with tag)
        // then fall into the scary lookahead-discriminator variant.
        // this mode also handles mixin definitions and calls
        variants: [{
          begin: '[\\.#:&\\[>]', end: '[;{}]'  // mixin calls end with ';'
          }, {
          begin: INTERP_IDENT_RE, end: '{'
        }],
        returnBegin: true,
        returnEnd:   true,
        illegal: '[<=\'$"]',
        relevance: 0,
        contains: [
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          MIXIN_GUARD_MODE,
          IDENT_MODE('keyword',  'all\\b'),
          IDENT_MODE('variable', '@{'  + IDENT_RE + '}'),     // otherwise it’s identified as tag
          IDENT_MODE('selector-tag',  INTERP_IDENT_RE + '%?', 0), // '%' for more consistent coloring of @keyframes "tags"
          IDENT_MODE('selector-id', '#' + INTERP_IDENT_RE),
          IDENT_MODE('selector-class', '\\.' + INTERP_IDENT_RE, 0),
          IDENT_MODE('selector-tag',  '&', 0),
          {className: 'selector-attr', begin: '\\[', end: '\\]'},
          {className: 'selector-pseudo', begin: /:(:)?[a-zA-Z0-9\_\-\+\(\)"'.]+/},
          {begin: '\\(', end: '\\)', contains: VALUE_WITH_RULESETS}, // argument list of parametric mixins
          {begin: '!important'} // eat !important after mixin call or it will be colored as tag
        ]
      };
    
      RULES.push(
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        AT_RULE_MODE,
        VAR_RULE_MODE,
        RULE_MODE,
        SELECTOR_MODE
      );
    
      return {
        case_insensitive: true,
        illegal: '[=>\'/<($"]',
        contains: RULES
      };
    };
    
    /***/ }),
    /* 494 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var LISP_IDENT_RE = '[a-zA-Z_\\-\\+\\*\\/\\<\\=\\>\\&\\#][a-zA-Z0-9_\\-\\+\\*\\/\\<\\=\\>\\&\\#!]*';
      var MEC_RE = '\\|[^]*?\\|';
      var LISP_SIMPLE_NUMBER_RE = '(\\-|\\+)?\\d+(\\.\\d+|\\/\\d+)?((d|e|f|l|s|D|E|F|L|S)(\\+|\\-)?\\d+)?';
      var SHEBANG = {
        className: 'meta',
        begin: '^#!', end: '$'
      };
      var LITERAL = {
        className: 'literal',
        begin: '\\b(t{1}|nil)\\b'
      };
      var NUMBER = {
        className: 'number',
        variants: [
          {begin: LISP_SIMPLE_NUMBER_RE, relevance: 0},
          {begin: '#(b|B)[0-1]+(/[0-1]+)?'},
          {begin: '#(o|O)[0-7]+(/[0-7]+)?'},
          {begin: '#(x|X)[0-9a-fA-F]+(/[0-9a-fA-F]+)?'},
          {begin: '#(c|C)\\(' + LISP_SIMPLE_NUMBER_RE + ' +' + LISP_SIMPLE_NUMBER_RE, end: '\\)'}
        ]
      };
      var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null});
      var COMMENT = hljs.COMMENT(
        ';', '$',
        {
          relevance: 0
        }
      );
      var VARIABLE = {
        begin: '\\*', end: '\\*'
      };
      var KEYWORD = {
        className: 'symbol',
        begin: '[:&]' + LISP_IDENT_RE
      };
      var IDENT = {
        begin: LISP_IDENT_RE,
        relevance: 0
      };
      var MEC = {
        begin: MEC_RE
      };
      var QUOTED_LIST = {
        begin: '\\(', end: '\\)',
        contains: ['self', LITERAL, STRING, NUMBER, IDENT]
      };
      var QUOTED = {
        contains: [NUMBER, STRING, VARIABLE, KEYWORD, QUOTED_LIST, IDENT],
        variants: [
          {
            begin: '[\'`]\\(', end: '\\)'
          },
          {
            begin: '\\(quote ', end: '\\)',
            keywords: {name: 'quote'}
          },
          {
            begin: '\'' + MEC_RE
          }
        ]
      };
      var QUOTED_ATOM = {
        variants: [
          {begin: '\'' + LISP_IDENT_RE},
          {begin: '#\'' + LISP_IDENT_RE + '(::' + LISP_IDENT_RE + ')*'}
        ]
      };
      var LIST = {
        begin: '\\(\\s*', end: '\\)'
      };
      var BODY = {
        endsWithParent: true,
        relevance: 0
      };
      LIST.contains = [
        {
          className: 'name',
          variants: [
            {begin: LISP_IDENT_RE},
            {begin: MEC_RE}
          ]
        },
        BODY
      ];
      BODY.contains = [QUOTED, QUOTED_ATOM, LIST, LITERAL, NUMBER, STRING, COMMENT, VARIABLE, KEYWORD, MEC, IDENT];
    
      return {
        illegal: /\S/,
        contains: [
          NUMBER,
          SHEBANG,
          LITERAL,
          STRING,
          COMMENT,
          QUOTED,
          QUOTED_ATOM,
          LIST,
          IDENT
        ]
      };
    };
    
    /***/ }),
    /* 495 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var VARIABLE = {
        begin: '\\b[gtps][A-Z]+[A-Za-z0-9_\\-]*\\b|\\$_[A-Z]+',
        relevance: 0
      };
      var COMMENT_MODES = [
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.HASH_COMMENT_MODE,
        hljs.COMMENT('--', '$'),
        hljs.COMMENT('[^:]//', '$')
      ];
      var TITLE1 = hljs.inherit(hljs.TITLE_MODE, {
        variants: [
          {begin: '\\b_*rig[A-Z]+[A-Za-z0-9_\\-]*'},
          {begin: '\\b_[a-z0-9\\-]+'}
        ]
      });
      var TITLE2 = hljs.inherit(hljs.TITLE_MODE, {begin: '\\b([A-Za-z0-9_\\-]+)\\b'});
      return {
        case_insensitive: false,
        keywords: {
          keyword:
            '$_COOKIE $_FILES $_GET $_GET_BINARY $_GET_RAW $_POST $_POST_BINARY $_POST_RAW $_SESSION $_SERVER ' +
            'codepoint codepoints segment segments codeunit codeunits sentence sentences trueWord trueWords paragraph ' +
            'after byte bytes english the until http forever descending using line real8 with seventh ' +
            'for stdout finally element word words fourth before black ninth sixth characters chars stderr ' +
            'uInt1 uInt1s uInt2 uInt2s stdin string lines relative rel any fifth items from middle mid ' +
            'at else of catch then third it file milliseconds seconds second secs sec int1 int1s int4 ' +
            'int4s internet int2 int2s normal text item last long detailed effective uInt4 uInt4s repeat ' +
            'end repeat URL in try into switch to words https token binfile each tenth as ticks tick ' +
            'system real4 by dateItems without char character ascending eighth whole dateTime numeric short ' +
            'first ftp integer abbreviated abbr abbrev private case while if ' +
            'div mod wrap and or bitAnd bitNot bitOr bitXor among not in a an within ' +
            'contains ends with begins the keys of keys',
          literal:
            'SIX TEN FORMFEED NINE ZERO NONE SPACE FOUR FALSE COLON CRLF PI COMMA ENDOFFILE EOF EIGHT FIVE ' +
            'QUOTE EMPTY ONE TRUE RETURN CR LINEFEED RIGHT BACKSLASH NULL SEVEN TAB THREE TWO ' +
            'six ten formfeed nine zero none space four false colon crlf pi comma endoffile eof eight five ' +
            'quote empty one true return cr linefeed right backslash null seven tab three two ' +
            'RIVERSION RISTATE FILE_READ_MODE FILE_WRITE_MODE FILE_WRITE_MODE DIR_WRITE_MODE FILE_READ_UMASK ' +
            'FILE_WRITE_UMASK DIR_READ_UMASK DIR_WRITE_UMASK',
          built_in:
            'put abs acos aliasReference annuity arrayDecode arrayEncode asin atan atan2 average avg avgDev base64Decode ' +
            'base64Encode baseConvert binaryDecode binaryEncode byteOffset byteToNum cachedURL cachedURLs charToNum ' +
            'cipherNames codepointOffset codepointProperty codepointToNum codeunitOffset commandNames compound compress ' +
            'constantNames cos date dateFormat decompress directories ' +
            'diskSpace DNSServers exp exp1 exp2 exp10 extents files flushEvents folders format functionNames geometricMean global ' +
            'globals hasMemory harmonicMean hostAddress hostAddressToName hostName hostNameToAddress isNumber ISOToMac itemOffset ' +
            'keys len length libURLErrorData libUrlFormData libURLftpCommand libURLLastHTTPHeaders libURLLastRHHeaders ' +
            'libUrlMultipartFormAddPart libUrlMultipartFormData libURLVersion lineOffset ln ln1 localNames log log2 log10 ' +
            'longFilePath lower macToISO matchChunk matchText matrixMultiply max md5Digest median merge millisec ' +
            'millisecs millisecond milliseconds min monthNames nativeCharToNum normalizeText num number numToByte numToChar ' +
            'numToCodepoint numToNativeChar offset open openfiles openProcesses openProcessIDs openSockets ' +
            'paragraphOffset paramCount param params peerAddress pendingMessages platform popStdDev populationStandardDeviation ' +
            'populationVariance popVariance processID random randomBytes replaceText result revCreateXMLTree revCreateXMLTreeFromFile ' +
            'revCurrentRecord revCurrentRecordIsFirst revCurrentRecordIsLast revDatabaseColumnCount revDatabaseColumnIsNull ' +
            'revDatabaseColumnLengths revDatabaseColumnNames revDatabaseColumnNamed revDatabaseColumnNumbered ' +
            'revDatabaseColumnTypes revDatabaseConnectResult revDatabaseCursors revDatabaseID revDatabaseTableNames ' +
            'revDatabaseType revDataFromQuery revdb_closeCursor revdb_columnbynumber revdb_columncount revdb_columnisnull ' +
            'revdb_columnlengths revdb_columnnames revdb_columntypes revdb_commit revdb_connect revdb_connections ' +
            'revdb_connectionerr revdb_currentrecord revdb_cursorconnection revdb_cursorerr revdb_cursors revdb_dbtype ' +
            'revdb_disconnect revdb_execute revdb_iseof revdb_isbof revdb_movefirst revdb_movelast revdb_movenext ' +
            'revdb_moveprev revdb_query revdb_querylist revdb_recordcount revdb_rollback revdb_tablenames ' +
            'revGetDatabaseDriverPath revNumberOfRecords revOpenDatabase revOpenDatabases revQueryDatabase ' +
            'revQueryDatabaseBlob revQueryResult revQueryIsAtStart revQueryIsAtEnd revUnixFromMacPath revXMLAttribute ' +
            'revXMLAttributes revXMLAttributeValues revXMLChildContents revXMLChildNames revXMLCreateTreeFromFileWithNamespaces ' +
            'revXMLCreateTreeWithNamespaces revXMLDataFromXPathQuery revXMLEvaluateXPath revXMLFirstChild revXMLMatchingNode ' +
            'revXMLNextSibling revXMLNodeContents revXMLNumberOfChildren revXMLParent revXMLPreviousSibling ' +
            'revXMLRootNode revXMLRPC_CreateRequest revXMLRPC_Documents revXMLRPC_Error ' +
            'revXMLRPC_GetHost revXMLRPC_GetMethod revXMLRPC_GetParam revXMLText revXMLRPC_Execute ' +
            'revXMLRPC_GetParamCount revXMLRPC_GetParamNode revXMLRPC_GetParamType revXMLRPC_GetPath revXMLRPC_GetPort ' +
            'revXMLRPC_GetProtocol revXMLRPC_GetRequest revXMLRPC_GetResponse revXMLRPC_GetSocket revXMLTree ' +
            'revXMLTrees revXMLValidateDTD revZipDescribeItem revZipEnumerateItems revZipOpenArchives round sampVariance ' +
            'sec secs seconds sentenceOffset sha1Digest shell shortFilePath sin specialFolderPath sqrt standardDeviation statRound ' +
            'stdDev sum sysError systemVersion tan tempName textDecode textEncode tick ticks time to tokenOffset toLower toUpper ' +
            'transpose truewordOffset trunc uniDecode uniEncode upper URLDecode URLEncode URLStatus uuid value variableNames ' +
            'variance version waitDepth weekdayNames wordOffset xsltApplyStylesheet xsltApplyStylesheetFromFile xsltLoadStylesheet ' +
            'xsltLoadStylesheetFromFile add breakpoint cancel clear local variable file word line folder directory URL close socket process ' +
            'combine constant convert create new alias folder directory decrypt delete variable word line folder ' +
            'directory URL dispatch divide do encrypt filter get include intersect kill libURLDownloadToFile ' +
            'libURLFollowHttpRedirects libURLftpUpload libURLftpUploadFile libURLresetAll libUrlSetAuthCallback ' +
            'libURLSetCustomHTTPHeaders libUrlSetExpect100 libURLSetFTPListCommand libURLSetFTPMode libURLSetFTPStopTime ' +
            'libURLSetStatusCallback load multiply socket prepare process post seek rel relative read from process rename ' +
            'replace require resetAll resolve revAddXMLNode revAppendXML revCloseCursor revCloseDatabase revCommitDatabase ' +
            'revCopyFile revCopyFolder revCopyXMLNode revDeleteFolder revDeleteXMLNode revDeleteAllXMLTrees ' +
            'revDeleteXMLTree revExecuteSQL revGoURL revInsertXMLNode revMoveFolder revMoveToFirstRecord revMoveToLastRecord ' +
            'revMoveToNextRecord revMoveToPreviousRecord revMoveToRecord revMoveXMLNode revPutIntoXMLNode revRollBackDatabase ' +
            'revSetDatabaseDriverPath revSetXMLAttribute revXMLRPC_AddParam revXMLRPC_DeleteAllDocuments revXMLAddDTD ' +
            'revXMLRPC_Free revXMLRPC_FreeAll revXMLRPC_DeleteDocument revXMLRPC_DeleteParam revXMLRPC_SetHost ' +
            'revXMLRPC_SetMethod revXMLRPC_SetPort revXMLRPC_SetProtocol revXMLRPC_SetSocket revZipAddItemWithData ' +
            'revZipAddItemWithFile revZipAddUncompressedItemWithData revZipAddUncompressedItemWithFile revZipCancel ' +
            'revZipCloseArchive revZipDeleteItem revZipExtractItemToFile revZipExtractItemToVariable revZipSetProgressCallback ' +
            'revZipRenameItem revZipReplaceItemWithData revZipReplaceItemWithFile revZipOpenArchive send set sort split start stop ' +
            'subtract union unload wait write'
        },
        contains: [
          VARIABLE,
          {
            className: 'keyword',
            begin: '\\bend\\sif\\b'
          },
          {
            className: 'function',
            beginKeywords: 'function', end: '$',
            contains: [
              VARIABLE,
              TITLE2,
              hljs.APOS_STRING_MODE,
              hljs.QUOTE_STRING_MODE,
              hljs.BINARY_NUMBER_MODE,
              hljs.C_NUMBER_MODE,
              TITLE1
            ]
          },
          {
            className: 'function',
            begin: '\\bend\\s+', end: '$',
            keywords: 'end',
            contains: [
              TITLE2,
              TITLE1
            ],
            relevance: 0
          },
          {
            beginKeywords: 'command on', end: '$',
            contains: [
              VARIABLE,
              TITLE2,
              hljs.APOS_STRING_MODE,
              hljs.QUOTE_STRING_MODE,
              hljs.BINARY_NUMBER_MODE,
              hljs.C_NUMBER_MODE,
              TITLE1
            ]
          },
          {
            className: 'meta',
            variants: [
              {
                begin: '<\\?(rev|lc|livecode)',
                relevance: 10
              },
              { begin: '<\\?' },
              { begin: '\\?>' }
            ]
          },
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE,
          hljs.BINARY_NUMBER_MODE,
          hljs.C_NUMBER_MODE,
          TITLE1
        ].concat(COMMENT_MODES),
        illegal: ';$|^\\[|^=|&|{'
      };
    };
    
    /***/ }),
    /* 496 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var KEYWORDS = {
        keyword:
          // JS keywords
          'in if for while finally new do return else break catch instanceof throw try this ' +
          'switch continue typeof delete debugger case default function var with ' +
          // LiveScript keywords
          'then unless until loop of by when and or is isnt not it that otherwise from to til fallthrough super ' +
          'case default function var void const let enum export import native ' +
          '__hasProp __extends __slice __bind __indexOf',
        literal:
          // JS literals
          'true false null undefined ' +
          // LiveScript literals
          'yes no on off it that void',
        built_in:
          'npm require console print module global window document'
      };
      var JS_IDENT_RE = '[A-Za-z$_](?:\-[0-9A-Za-z$_]|[0-9A-Za-z$_])*';
      var TITLE = hljs.inherit(hljs.TITLE_MODE, {begin: JS_IDENT_RE});
      var SUBST = {
        className: 'subst',
        begin: /#\{/, end: /}/,
        keywords: KEYWORDS
      };
      var SUBST_SIMPLE = {
        className: 'subst',
        begin: /#[A-Za-z$_]/, end: /(?:\-[0-9A-Za-z$_]|[0-9A-Za-z$_])*/,
        keywords: KEYWORDS
      };
      var EXPRESSIONS = [
        hljs.BINARY_NUMBER_MODE,
        {
          className: 'number',
          begin: '(\\b0[xX][a-fA-F0-9_]+)|(\\b\\d(\\d|_\\d)*(\\.(\\d(\\d|_\\d)*)?)?(_*[eE]([-+]\\d(_\\d|\\d)*)?)?[_a-z]*)',
          relevance: 0,
          starts: {end: '(\\s*/)?', relevance: 0} // a number tries to eat the following slash to prevent treating it as a regexp
        },
        {
          className: 'string',
          variants: [
            {
              begin: /'''/, end: /'''/,
              contains: [hljs.BACKSLASH_ESCAPE]
            },
            {
              begin: /'/, end: /'/,
              contains: [hljs.BACKSLASH_ESCAPE]
            },
            {
              begin: /"""/, end: /"""/,
              contains: [hljs.BACKSLASH_ESCAPE, SUBST, SUBST_SIMPLE]
            },
            {
              begin: /"/, end: /"/,
              contains: [hljs.BACKSLASH_ESCAPE, SUBST, SUBST_SIMPLE]
            },
            {
              begin: /\\/, end: /(\s|$)/,
              excludeEnd: true
            }
          ]
        },
        {
          className: 'regexp',
          variants: [
            {
              begin: '//', end: '//[gim]*',
              contains: [SUBST, hljs.HASH_COMMENT_MODE]
            },
            {
              // regex can't start with space to parse x / 2 / 3 as two divisions
              // regex can't start with *, and it supports an "illegal" in the main mode
              begin: /\/(?![ *])(\\\/|.)*?\/[gim]*(?=\W|$)/
            }
          ]
        },
        {
          begin: '@' + JS_IDENT_RE
        },
        {
          begin: '``', end: '``',
          excludeBegin: true, excludeEnd: true,
          subLanguage: 'javascript'
        }
      ];
      SUBST.contains = EXPRESSIONS;
    
      var PARAMS = {
        className: 'params',
        begin: '\\(', returnBegin: true,
        /* We need another contained nameless mode to not have every nested
        pair of parens to be called "params" */
        contains: [
          {
            begin: /\(/, end: /\)/,
            keywords: KEYWORDS,
            contains: ['self'].concat(EXPRESSIONS)
          }
        ]
      };
    
      return {
        aliases: ['ls'],
        keywords: KEYWORDS,
        illegal: /\/\*/,
        contains: EXPRESSIONS.concat([
          hljs.COMMENT('\\/\\*', '\\*\\/'),
          hljs.HASH_COMMENT_MODE,
          {
            className: 'function',
            contains: [TITLE, PARAMS],
            returnBegin: true,
            variants: [
              {
                begin: '(' + JS_IDENT_RE + '\\s*(?:=|:=)\\s*)?(\\(.*\\))?\\s*\\B\\->\\*?', end: '\\->\\*?'
              },
              {
                begin: '(' + JS_IDENT_RE + '\\s*(?:=|:=)\\s*)?!?(\\(.*\\))?\\s*\\B[-~]{1,2}>\\*?', end: '[-~]{1,2}>\\*?'
              },
              {
                begin: '(' + JS_IDENT_RE + '\\s*(?:=|:=)\\s*)?(\\(.*\\))?\\s*\\B!?[-~]{1,2}>\\*?', end: '!?[-~]{1,2}>\\*?'
              }
            ]
          },
          {
            className: 'class',
            beginKeywords: 'class',
            end: '$',
            illegal: /[:="\[\]]/,
            contains: [
              {
                beginKeywords: 'extends',
                endsWithParent: true,
                illegal: /[:="\[\]]/,
                contains: [TITLE]
              },
              TITLE
            ]
          },
          {
            begin: JS_IDENT_RE + ':', end: ':',
            returnBegin: true, returnEnd: true,
            relevance: 0
          }
        ])
      };
    };
    
    /***/ }),
    /* 497 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var identifier = '([-a-zA-Z$._][\\w\\-$.]*)';
      return {
        //lexemes: '[.%]?' + hljs.IDENT_RE,
        keywords:
          'begin end true false declare define global ' +
          'constant private linker_private internal ' +
          'available_externally linkonce linkonce_odr weak ' +
          'weak_odr appending dllimport dllexport common ' +
          'default hidden protected extern_weak external ' +
          'thread_local zeroinitializer undef null to tail ' +
          'target triple datalayout volatile nuw nsw nnan ' +
          'ninf nsz arcp fast exact inbounds align ' +
          'addrspace section alias module asm sideeffect ' +
          'gc dbg linker_private_weak attributes blockaddress ' +
          'initialexec localdynamic localexec prefix unnamed_addr ' +
          'ccc fastcc coldcc x86_stdcallcc x86_fastcallcc ' +
          'arm_apcscc arm_aapcscc arm_aapcs_vfpcc ptx_device ' +
          'ptx_kernel intel_ocl_bicc msp430_intrcc spir_func ' +
          'spir_kernel x86_64_sysvcc x86_64_win64cc x86_thiscallcc ' +
          'cc c signext zeroext inreg sret nounwind ' +
          'noreturn noalias nocapture byval nest readnone ' +
          'readonly inlinehint noinline alwaysinline optsize ssp ' +
          'sspreq noredzone noimplicitfloat naked builtin cold ' +
          'nobuiltin noduplicate nonlazybind optnone returns_twice ' +
          'sanitize_address sanitize_memory sanitize_thread sspstrong ' +
          'uwtable returned type opaque eq ne slt sgt ' +
          'sle sge ult ugt ule uge oeq one olt ogt ' +
          'ole oge ord uno ueq une x acq_rel acquire ' +
          'alignstack atomic catch cleanup filter inteldialect ' +
          'max min monotonic nand personality release seq_cst ' +
          'singlethread umax umin unordered xchg add fadd ' +
          'sub fsub mul fmul udiv sdiv fdiv urem srem ' +
          'frem shl lshr ashr and or xor icmp fcmp ' +
          'phi call trunc zext sext fptrunc fpext uitofp ' +
          'sitofp fptoui fptosi inttoptr ptrtoint bitcast ' +
          'addrspacecast select va_arg ret br switch invoke ' +
          'unwind unreachable indirectbr landingpad resume ' +
          'malloc alloca free load store getelementptr ' +
          'extractelement insertelement shufflevector getresult ' +
          'extractvalue insertvalue atomicrmw cmpxchg fence ' +
          'argmemonly double',
        contains: [
          {
            className: 'keyword',
            begin: 'i\\d+'
          },
          hljs.COMMENT(
            ';', '\\n', {relevance: 0}
          ),
          // Double quote string
          hljs.QUOTE_STRING_MODE,
          {
            className: 'string',
            variants: [
              // Double-quoted string
              { begin: '"', end: '[^\\\\]"' },
            ],
            relevance: 0
          },
          {
            className: 'title',
            variants: [
              { begin: '@' + identifier },
              { begin: '@\\d+' },
              { begin: '!' + identifier },
              { begin: '!\\d+' + identifier }
            ]
          },
          {
            className: 'symbol',
            variants: [
              { begin: '%' + identifier },
              { begin: '%\\d+' },
              { begin: '#\\d+' },
            ]
          },
          {
            className: 'number',
            variants: [
                { begin: '0[xX][a-fA-F0-9]+' },
                { begin: '-?\\d+(?:[.]\\d+)?(?:[eE][-+]?\\d+(?:[.]\\d+)?)?' }
            ],
            relevance: 0
          },
        ]
      };
    };
    
    /***/ }),
    /* 498 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
    
        var LSL_STRING_ESCAPE_CHARS = {
            className: 'subst',
            begin: /\\[tn"\\]/
        };
    
        var LSL_STRINGS = {
            className: 'string',
            begin: '"',
            end: '"',
            contains: [
                LSL_STRING_ESCAPE_CHARS
            ]
        };
    
        var LSL_NUMBERS = {
            className: 'number',
            begin: hljs.C_NUMBER_RE
        };
    
        var LSL_CONSTANTS = {
            className: 'literal',
            variants: [
                {
                    begin: '\\b(?:PI|TWO_PI|PI_BY_TWO|DEG_TO_RAD|RAD_TO_DEG|SQRT2)\\b'
                },
                {
                    begin: '\\b(?:XP_ERROR_(?:EXPERIENCES_DISABLED|EXPERIENCE_(?:DISABLED|SUSPENDED)|INVALID_(?:EXPERIENCE|PARAMETERS)|KEY_NOT_FOUND|MATURITY_EXCEEDED|NONE|NOT_(?:FOUND|PERMITTED(?:_LAND)?)|NO_EXPERIENCE|QUOTA_EXCEEDED|RETRY_UPDATE|STORAGE_EXCEPTION|STORE_DISABLED|THROTTLED|UNKNOWN_ERROR)|JSON_APPEND|STATUS_(?:PHYSICS|ROTATE_[XYZ]|PHANTOM|SANDBOX|BLOCK_GRAB(?:_OBJECT)?|(?:DIE|RETURN)_AT_EDGE|CAST_SHADOWS|OK|MALFORMED_PARAMS|TYPE_MISMATCH|BOUNDS_ERROR|NOT_(?:FOUND|SUPPORTED)|INTERNAL_ERROR|WHITELIST_FAILED)|AGENT(?:_(?:BY_(?:LEGACY_|USER)NAME|FLYING|ATTACHMENTS|SCRIPTED|MOUSELOOK|SITTING|ON_OBJECT|AWAY|WALKING|IN_AIR|TYPING|CROUCHING|BUSY|ALWAYS_RUN|AUTOPILOT|LIST_(?:PARCEL(?:_OWNER)?|REGION)))?|CAMERA_(?:PITCH|DISTANCE|BEHINDNESS_(?:ANGLE|LAG)|(?:FOCUS|POSITION)(?:_(?:THRESHOLD|LOCKED|LAG))?|FOCUS_OFFSET|ACTIVE)|ANIM_ON|LOOP|REVERSE|PING_PONG|SMOOTH|ROTATE|SCALE|ALL_SIDES|LINK_(?:ROOT|SET|ALL_(?:OTHERS|CHILDREN)|THIS)|ACTIVE|PASS(?:IVE|_(?:ALWAYS|IF_NOT_HANDLED|NEVER))|SCRIPTED|CONTROL_(?:FWD|BACK|(?:ROT_)?(?:LEFT|RIGHT)|UP|DOWN|(?:ML_)?LBUTTON)|PERMISSION_(?:RETURN_OBJECTS|DEBIT|OVERRIDE_ANIMATIONS|SILENT_ESTATE_MANAGEMENT|TAKE_CONTROLS|TRIGGER_ANIMATION|ATTACH|CHANGE_LINKS|(?:CONTROL|TRACK)_CAMERA|TELEPORT)|INVENTORY_(?:TEXTURE|SOUND|OBJECT|SCRIPT|LANDMARK|CLOTHING|NOTECARD|BODYPART|ANIMATION|GESTURE|ALL|NONE)|CHANGED_(?:INVENTORY|COLOR|SHAPE|SCALE|TEXTURE|LINK|ALLOWED_DROP|OWNER|REGION(?:_START)?|TELEPORT|MEDIA)|OBJECT_(?:CLICK_ACTION|HOVER_HEIGHT|LAST_OWNER_ID|(?:PHYSICS|SERVER|STREAMING)_COST|UNKNOWN_DETAIL|CHARACTER_TIME|PHANTOM|PHYSICS|TEMP_ON_REZ|NAME|DESC|POS|PRIM_(?:COUNT|EQUIVALENCE)|RETURN_(?:PARCEL(?:_OWNER)?|REGION)|REZZER_KEY|ROO?T|VELOCITY|OMEGA|OWNER|GROUP|CREATOR|ATTACHED_POINT|RENDER_WEIGHT|(?:BODY_SHAPE|PATHFINDING)_TYPE|(?:RUNNING|TOTAL)_SCRIPT_COUNT|TOTAL_INVENTORY_COUNT|SCRIPT_(?:MEMORY|TIME))|TYPE_(?:INTEGER|FLOAT|STRING|KEY|VECTOR|ROTATION|INVALID)|(?:DEBUG|PUBLIC)_CHANNEL|ATTACH_(?:AVATAR_CENTER|CHEST|HEAD|BACK|PELVIS|MOUTH|CHIN|NECK|NOSE|BELLY|[LR](?:SHOULDER|HAND|FOOT|EAR|EYE|[UL](?:ARM|LEG)|HIP)|(?:LEFT|RIGHT)_PEC|HUD_(?:CENTER_[12]|TOP_(?:RIGHT|CENTER|LEFT)|BOTTOM(?:_(?:RIGHT|LEFT))?)|[LR]HAND_RING1|TAIL_(?:BASE|TIP)|[LR]WING|FACE_(?:JAW|[LR]EAR|[LR]EYE|TOUNGE)|GROIN|HIND_[LR]FOOT)|LAND_(?:LEVEL|RAISE|LOWER|SMOOTH|NOISE|REVERT)|DATA_(?:ONLINE|NAME|BORN|SIM_(?:POS|STATUS|RATING)|PAYINFO)|PAYMENT_INFO_(?:ON_FILE|USED)|REMOTE_DATA_(?:CHANNEL|REQUEST|REPLY)|PSYS_(?:PART_(?:BF_(?:ZERO|ONE(?:_MINUS_(?:DEST_COLOR|SOURCE_(ALPHA|COLOR)))?|DEST_COLOR|SOURCE_(ALPHA|COLOR))|BLEND_FUNC_(DEST|SOURCE)|FLAGS|(?:START|END)_(?:COLOR|ALPHA|SCALE|GLOW)|MAX_AGE|(?:RIBBON|WIND|INTERP_(?:COLOR|SCALE)|BOUNCE|FOLLOW_(?:SRC|VELOCITY)|TARGET_(?:POS|LINEAR)|EMISSIVE)_MASK)|SRC_(?:MAX_AGE|PATTERN|ANGLE_(?:BEGIN|END)|BURST_(?:RATE|PART_COUNT|RADIUS|SPEED_(?:MIN|MAX))|ACCEL|TEXTURE|TARGET_KEY|OMEGA|PATTERN_(?:DROP|EXPLODE|ANGLE(?:_CONE(?:_EMPTY)?)?)))|VEHICLE_(?:REFERENCE_FRAME|TYPE_(?:NONE|SLED|CAR|BOAT|AIRPLANE|BALLOON)|(?:LINEAR|ANGULAR)_(?:FRICTION_TIMESCALE|MOTOR_DIRECTION)|LINEAR_MOTOR_OFFSET|HOVER_(?:HEIGHT|EFFICIENCY|TIMESCALE)|BUOYANCY|(?:LINEAR|ANGULAR)_(?:DEFLECTION_(?:EFFICIENCY|TIMESCALE)|MOTOR_(?:DECAY_)?TIMESCALE)|VERTICAL_ATTRACTION_(?:EFFICIENCY|TIMESCALE)|BANKING_(?:EFFICIENCY|MIX|TIMESCALE)|FLAG_(?:NO_DEFLECTION_UP|LIMIT_(?:ROLL_ONLY|MOTOR_UP)|HOVER_(?:(?:WATER|TERRAIN|UP)_ONLY|GLOBAL_HEIGHT)|MOUSELOOK_(?:STEER|BANK)|CAMERA_DECOUPLED))|PRIM_(?:ALPHA_MODE(?:_(?:BLEND|EMISSIVE|MASK|NONE))?|NORMAL|SPECULAR|TYPE(?:_(?:BOX|CYLINDER|PRISM|SPHERE|TORUS|TUBE|RING|SCULPT))?|HOLE_(?:DEFAULT|CIRCLE|SQUARE|TRIANGLE)|MATERIAL(?:_(?:STONE|METAL|GLASS|WOOD|FLESH|PLASTIC|RUBBER))?|SHINY_(?:NONE|LOW|MEDIUM|HIGH)|BUMP_(?:NONE|BRIGHT|DARK|WOOD|BARK|BRICKS|CHECKER|CONCRETE|TILE|STONE|DISKS|GRAVEL|BLOBS|SIDING|LARGETILE|STUCCO|SUCTION|WEAVE)|TEXGEN_(?:DEFAULT|PLANAR)|SCULPT_(?:TYPE_(?:SPHERE|TORUS|PLANE|CYLINDER|MASK)|FLAG_(?:MIRROR|INVERT))|PHYSICS(?:_(?:SHAPE_(?:CONVEX|NONE|PRIM|TYPE)))?|(?:POS|ROT)_LOCAL|SLICE|TEXT|FLEXIBLE|POINT_LIGHT|TEMP_ON_REZ|PHANTOM|POSITION|SIZE|ROTATION|TEXTURE|NAME|OMEGA|DESC|LINK_TARGET|COLOR|BUMP_SHINY|FULLBRIGHT|TEXGEN|GLOW|MEDIA_(?:ALT_IMAGE_ENABLE|CONTROLS|(?:CURRENT|HOME)_URL|AUTO_(?:LOOP|PLAY|SCALE|ZOOM)|FIRST_CLICK_INTERACT|(?:WIDTH|HEIGHT)_PIXELS|WHITELIST(?:_ENABLE)?|PERMS_(?:INTERACT|CONTROL)|PARAM_MAX|CONTROLS_(?:STANDARD|MINI)|PERM_(?:NONE|OWNER|GROUP|ANYONE)|MAX_(?:URL_LENGTH|WHITELIST_(?:SIZE|COUNT)|(?:WIDTH|HEIGHT)_PIXELS)))|MASK_(?:BASE|OWNER|GROUP|EVERYONE|NEXT)|PERM_(?:TRANSFER|MODIFY|COPY|MOVE|ALL)|PARCEL_(?:MEDIA_COMMAND_(?:STOP|PAUSE|PLAY|LOOP|TEXTURE|URL|TIME|AGENT|UNLOAD|AUTO_ALIGN|TYPE|SIZE|DESC|LOOP_SET)|FLAG_(?:ALLOW_(?:FLY|(?:GROUP_)?SCRIPTS|LANDMARK|TERRAFORM|DAMAGE|CREATE_(?:GROUP_)?OBJECTS)|USE_(?:ACCESS_(?:GROUP|LIST)|BAN_LIST|LAND_PASS_LIST)|LOCAL_SOUND_ONLY|RESTRICT_PUSHOBJECT|ALLOW_(?:GROUP|ALL)_OBJECT_ENTRY)|COUNT_(?:TOTAL|OWNER|GROUP|OTHER|SELECTED|TEMP)|DETAILS_(?:NAME|DESC|OWNER|GROUP|AREA|ID|SEE_AVATARS))|LIST_STAT_(?:MAX|MIN|MEAN|MEDIAN|STD_DEV|SUM(?:_SQUARES)?|NUM_COUNT|GEOMETRIC_MEAN|RANGE)|PAY_(?:HIDE|DEFAULT)|REGION_FLAG_(?:ALLOW_DAMAGE|FIXED_SUN|BLOCK_TERRAFORM|SANDBOX|DISABLE_(?:COLLISIONS|PHYSICS)|BLOCK_FLY|ALLOW_DIRECT_TELEPORT|RESTRICT_PUSHOBJECT)|HTTP_(?:METHOD|MIMETYPE|BODY_(?:MAXLENGTH|TRUNCATED)|CUSTOM_HEADER|PRAGMA_NO_CACHE|VERBOSE_THROTTLE|VERIFY_CERT)|STRING_(?:TRIM(?:_(?:HEAD|TAIL))?)|CLICK_ACTION_(?:NONE|TOUCH|SIT|BUY|PAY|OPEN(?:_MEDIA)?|PLAY|ZOOM)|TOUCH_INVALID_FACE|PROFILE_(?:NONE|SCRIPT_MEMORY)|RC_(?:DATA_FLAGS|DETECT_PHANTOM|GET_(?:LINK_NUM|NORMAL|ROOT_KEY)|MAX_HITS|REJECT_(?:TYPES|AGENTS|(?:NON)?PHYSICAL|LAND))|RCERR_(?:CAST_TIME_EXCEEDED|SIM_PERF_LOW|UNKNOWN)|ESTATE_ACCESS_(?:ALLOWED_(?:AGENT|GROUP)_(?:ADD|REMOVE)|BANNED_AGENT_(?:ADD|REMOVE))|DENSITY|FRICTION|RESTITUTION|GRAVITY_MULTIPLIER|KFM_(?:COMMAND|CMD_(?:PLAY|STOP|PAUSE)|MODE|FORWARD|LOOP|PING_PONG|REVERSE|DATA|ROTATION|TRANSLATION)|ERR_(?:GENERIC|PARCEL_PERMISSIONS|MALFORMED_PARAMS|RUNTIME_PERMISSIONS|THROTTLED)|CHARACTER_(?:CMD_(?:(?:SMOOTH_)?STOP|JUMP)|DESIRED_(?:TURN_)?SPEED|RADIUS|STAY_WITHIN_PARCEL|LENGTH|ORIENTATION|ACCOUNT_FOR_SKIPPED_FRAMES|AVOIDANCE_MODE|TYPE(?:_(?:[ABCD]|NONE))?|MAX_(?:DECEL|TURN_RADIUS|(?:ACCEL|SPEED)))|PURSUIT_(?:OFFSET|FUZZ_FACTOR|GOAL_TOLERANCE|INTERCEPT)|REQUIRE_LINE_OF_SIGHT|FORCE_DIRECT_PATH|VERTICAL|HORIZONTAL|AVOID_(?:CHARACTERS|DYNAMIC_OBSTACLES|NONE)|PU_(?:EVADE_(?:HIDDEN|SPOTTED)|FAILURE_(?:DYNAMIC_PATHFINDING_DISABLED|INVALID_(?:GOAL|START)|NO_(?:NAVMESH|VALID_DESTINATION)|OTHER|TARGET_GONE|(?:PARCEL_)?UNREACHABLE)|(?:GOAL|SLOWDOWN_DISTANCE)_REACHED)|TRAVERSAL_TYPE(?:_(?:FAST|NONE|SLOW))?|CONTENT_TYPE_(?:ATOM|FORM|HTML|JSON|LLSD|RSS|TEXT|XHTML|XML)|GCNP_(?:RADIUS|STATIC)|(?:PATROL|WANDER)_PAUSE_AT_WAYPOINTS|OPT_(?:AVATAR|CHARACTER|EXCLUSION_VOLUME|LEGACY_LINKSET|MATERIAL_VOLUME|OTHER|STATIC_OBSTACLE|WALKABLE)|SIM_STAT_PCT_CHARS_STEPPED)\\b'
                },
                {
                    begin: '\\b(?:FALSE|TRUE)\\b'
                },
                {
                    begin: '\\b(?:ZERO_ROTATION)\\b'
                },
                {
                    begin: '\\b(?:EOF|JSON_(?:ARRAY|DELETE|FALSE|INVALID|NULL|NUMBER|OBJECT|STRING|TRUE)|NULL_KEY|TEXTURE_(?:BLANK|DEFAULT|MEDIA|PLYWOOD|TRANSPARENT)|URL_REQUEST_(?:GRANTED|DENIED))\\b'
                },
                {
                    begin: '\\b(?:ZERO_VECTOR|TOUCH_INVALID_(?:TEXCOORD|VECTOR))\\b'
                }
            ]
        };
    
        var LSL_FUNCTIONS = {
            className: 'built_in',
            begin: '\\b(?:ll(?:AgentInExperience|(?:Create|DataSize|Delete|KeyCount|Keys|Read|Update)KeyValue|GetExperience(?:Details|ErrorMessage)|ReturnObjectsBy(?:ID|Owner)|Json(?:2List|[GS]etValue|ValueType)|Sin|Cos|Tan|Atan2|Sqrt|Pow|Abs|Fabs|Frand|Floor|Ceil|Round|Vec(?:Mag|Norm|Dist)|Rot(?:Between|2(?:Euler|Fwd|Left|Up))|(?:Euler|Axes)2Rot|Whisper|(?:Region|Owner)?Say|Shout|Listen(?:Control|Remove)?|Sensor(?:Repeat|Remove)?|Detected(?:Name|Key|Owner|Type|Pos|Vel|Grab|Rot|Group|LinkNumber)|Die|Ground|Wind|(?:[GS]et)(?:AnimationOverride|MemoryLimit|PrimMediaParams|ParcelMusicURL|Object(?:Desc|Name)|PhysicsMaterial|Status|Scale|Color|Alpha|Texture|Pos|Rot|Force|Torque)|ResetAnimationOverride|(?:Scale|Offset|Rotate)Texture|(?:Rot)?Target(?:Remove)?|(?:Stop)?MoveToTarget|Apply(?:Rotational)?Impulse|Set(?:KeyframedMotion|ContentType|RegionPos|(?:Angular)?Velocity|Buoyancy|HoverHeight|ForceAndTorque|TimerEvent|ScriptState|Damage|TextureAnim|Sound(?:Queueing|Radius)|Vehicle(?:Type|(?:Float|Vector|Rotation)Param)|(?:Touch|Sit)?Text|Camera(?:Eye|At)Offset|PrimitiveParams|ClickAction|Link(?:Alpha|Color|PrimitiveParams(?:Fast)?|Texture(?:Anim)?|Camera|Media)|RemoteScriptAccessPin|PayPrice|LocalRot)|ScaleByFactor|Get(?:(?:Max|Min)ScaleFactor|ClosestNavPoint|StaticPath|SimStats|Env|PrimitiveParams|Link(?:PrimitiveParams|Number(?:OfSides)?|Key|Name|Media)|HTTPHeader|FreeURLs|Object(?:Details|PermMask|PrimCount)|Parcel(?:MaxPrims|Details|Prim(?:Count|Owners))|Attached(?:List)?|(?:SPMax|Free|Used)Memory|Region(?:Name|TimeDilation|FPS|Corner|AgentCount)|Root(?:Position|Rotation)|UnixTime|(?:Parcel|Region)Flags|(?:Wall|GMT)clock|SimulatorHostname|BoundingBox|GeometricCenter|Creator|NumberOf(?:Prims|NotecardLines|Sides)|Animation(?:List)?|(?:Camera|Local)(?:Pos|Rot)|Vel|Accel|Omega|Time(?:stamp|OfDay)|(?:Object|CenterOf)?Mass|MassMKS|Energy|Owner|(?:Owner)?Key|SunDirection|Texture(?:Offset|Scale|Rot)|Inventory(?:Number|Name|Key|Type|Creator|PermMask)|Permissions(?:Key)?|StartParameter|List(?:Length|EntryType)|Date|Agent(?:Size|Info|Language|List)|LandOwnerAt|NotecardLine|Script(?:Name|State))|(?:Get|Reset|GetAndReset)Time|PlaySound(?:Slave)?|LoopSound(?:Master|Slave)?|(?:Trigger|Stop|Preload)Sound|(?:(?:Get|Delete)Sub|Insert)String|To(?:Upper|Lower)|Give(?:InventoryList|Money)|RezObject|(?:Stop)?LookAt|Sleep|CollisionFilter|(?:Take|Release)Controls|DetachFromAvatar|AttachToAvatar(?:Temp)?|InstantMessage|(?:GetNext)?Email|StopHover|MinEventDelay|RotLookAt|String(?:Length|Trim)|(?:Start|Stop)Animation|TargetOmega|Request(?:Experience)?Permissions|(?:Create|Break)Link|BreakAllLinks|(?:Give|Remove)Inventory|Water|PassTouches|Request(?:Agent|Inventory)Data|TeleportAgent(?:Home|GlobalCoords)?|ModifyLand|CollisionSound|ResetScript|MessageLinked|PushObject|PassCollisions|AxisAngle2Rot|Rot2(?:Axis|Angle)|A(?:cos|sin)|AngleBetween|AllowInventoryDrop|SubStringIndex|List2(?:CSV|Integer|Json|Float|String|Key|Vector|Rot|List(?:Strided)?)|DeleteSubList|List(?:Statistics|Sort|Randomize|(?:Insert|Find|Replace)List)|EdgeOfWorld|AdjustSoundVolume|Key2Name|TriggerSoundLimited|EjectFromLand|(?:CSV|ParseString)2List|OverMyLand|SameGroup|UnSit|Ground(?:Slope|Normal|Contour)|GroundRepel|(?:Set|Remove)VehicleFlags|(?:AvatarOn)?(?:Link)?SitTarget|Script(?:Danger|Profiler)|Dialog|VolumeDetect|ResetOtherScript|RemoteLoadScriptPin|(?:Open|Close)RemoteDataChannel|SendRemoteData|RemoteDataReply|(?:Integer|String)ToBase64|XorBase64|Log(?:10)?|Base64To(?:String|Integer)|ParseStringKeepNulls|RezAtRoot|RequestSimulatorData|ForceMouselook|(?:Load|Release|(?:E|Une)scape)URL|ParcelMedia(?:CommandList|Query)|ModPow|MapDestination|(?:RemoveFrom|AddTo|Reset)Land(?:Pass|Ban)List|(?:Set|Clear)CameraParams|HTTP(?:Request|Response)|TextBox|DetectedTouch(?:UV|Face|Pos|(?:N|Bin)ormal|ST)|(?:MD5|SHA1|DumpList2)String|Request(?:Secure)?URL|Clear(?:Prim|Link)Media|(?:Link)?ParticleSystem|(?:Get|Request)(?:Username|DisplayName)|RegionSayTo|CastRay|GenerateKey|TransferLindenDollars|ManageEstateAccess|(?:Create|Delete)Character|ExecCharacterCmd|Evade|FleeFrom|NavigateTo|PatrolPoints|Pursue|UpdateCharacter|WanderWithin))\\b'
        };
    
        return {
            illegal: ':',
            contains: [
                LSL_STRINGS,
                {
                    className: 'comment',
                    variants: [
                        hljs.COMMENT('//', '$'),
                        hljs.COMMENT('/\\*', '\\*/')
                    ]
                },
                LSL_NUMBERS,
                {
                    className: 'section',
                    variants: [
                        {
                            begin: '\\b(?:state|default)\\b'
                        },
                        {
                            begin: '\\b(?:state_(?:entry|exit)|touch(?:_(?:start|end))?|(?:land_)?collision(?:_(?:start|end))?|timer|listen|(?:no_)?sensor|control|(?:not_)?at_(?:rot_)?target|money|email|experience_permissions(?:_denied)?|run_time_permissions|changed|attach|dataserver|moving_(?:start|end)|link_message|(?:on|object)_rez|remote_data|http_re(?:sponse|quest)|path_update|transaction_result)\\b'
                        }
                    ]
                },
                LSL_FUNCTIONS,
                LSL_CONSTANTS,
                {
                    className: 'type',
                    begin: '\\b(?:integer|float|string|key|vector|quaternion|rotation|list)\\b'
                }
            ]
        };
    };
    
    /***/ }),
    /* 499 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var OPENING_LONG_BRACKET = '\\[=*\\[';
      var CLOSING_LONG_BRACKET = '\\]=*\\]';
      var LONG_BRACKETS = {
        begin: OPENING_LONG_BRACKET, end: CLOSING_LONG_BRACKET,
        contains: ['self']
      };
      var COMMENTS = [
        hljs.COMMENT('--(?!' + OPENING_LONG_BRACKET + ')', '$'),
        hljs.COMMENT(
          '--' + OPENING_LONG_BRACKET,
          CLOSING_LONG_BRACKET,
          {
            contains: [LONG_BRACKETS],
            relevance: 10
          }
        )
      ];
      return {
        lexemes: hljs.UNDERSCORE_IDENT_RE,
        keywords: {
          literal: "true false nil",
          keyword: "and break do else elseif end for goto if in local not or repeat return then until while",
          built_in:
            //Metatags and globals:
            '_G _ENV _VERSION __index __newindex __mode __call __metatable __tostring __len ' +
            '__gc __add __sub __mul __div __mod __pow __concat __unm __eq __lt __le assert ' +
            //Standard methods and properties:
            'collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring' +
            'module next pairs pcall print rawequal rawget rawset require select setfenv' +
            'setmetatable tonumber tostring type unpack xpcall arg self' +
            //Library methods and properties (one line per library):
            'coroutine resume yield status wrap create running debug getupvalue ' +
            'debug sethook getmetatable gethook setmetatable setlocal traceback setfenv getinfo setupvalue getlocal getregistry getfenv ' +
            'io lines write close flush open output type read stderr stdin input stdout popen tmpfile ' +
            'math log max acos huge ldexp pi cos tanh pow deg tan cosh sinh random randomseed frexp ceil floor rad abs sqrt modf asin min mod fmod log10 atan2 exp sin atan ' +
            'os exit setlocale date getenv difftime remove time clock tmpname rename execute package preload loadlib loaded loaders cpath config path seeall ' +
            'string sub upper len gfind rep find match char dump gmatch reverse byte format gsub lower ' +
            'table setn insert getn foreachi maxn foreach concat sort remove'
        },
        contains: COMMENTS.concat([
          {
            className: 'function',
            beginKeywords: 'function', end: '\\)',
            contains: [
              hljs.inherit(hljs.TITLE_MODE, {begin: '([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*'}),
              {
                className: 'params',
                begin: '\\(', endsWithParent: true,
                contains: COMMENTS
              }
            ].concat(COMMENTS)
          },
          hljs.C_NUMBER_MODE,
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE,
          {
            className: 'string',
            begin: OPENING_LONG_BRACKET, end: CLOSING_LONG_BRACKET,
            contains: [LONG_BRACKETS],
            relevance: 5
          }
        ])
      };
    };
    
    /***/ }),
    /* 500 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      /* Variables: simple (eg $(var)) and special (eg $@) */
      var VARIABLE = {
        className: 'variable',
        variants: [
          {
            begin: '\\$\\(' + hljs.UNDERSCORE_IDENT_RE + '\\)',
            contains: [hljs.BACKSLASH_ESCAPE],
          },
          {
            begin: /\$[@%<?\^\+\*]/
          },
        ]
      };
      /* Quoted string with variables inside */
      var QUOTE_STRING = {
        className: 'string',
        begin: /"/, end: /"/,
        contains: [
          hljs.BACKSLASH_ESCAPE,
          VARIABLE,
        ]
      };
      /* Function: $(func arg,...) */
      var FUNC = {
        className: 'variable',
        begin: /\$\([\w-]+\s/, end: /\)/,
        keywords: {
          built_in:
            'subst patsubst strip findstring filter filter-out sort ' +
            'word wordlist firstword lastword dir notdir suffix basename ' +
            'addsuffix addprefix join wildcard realpath abspath error warning ' +
            'shell origin flavor foreach if or and call eval file value',
        },
        contains: [
          VARIABLE,
        ]
      };
      /* Variable assignment */
      var VAR_ASSIG = {
        begin: '^' + hljs.UNDERSCORE_IDENT_RE + '\\s*[:+?]?=',
        illegal: '\\n',
        returnBegin: true,
        contains: [
          {
            begin: '^' + hljs.UNDERSCORE_IDENT_RE, end: '[:+?]?=',
            excludeEnd: true,
          }
        ]
      };
      /* Meta targets (.PHONY) */
      var META = {
        className: 'meta',
        begin: /^\.PHONY:/, end: /$/,
        keywords: {'meta-keyword': '.PHONY'},
        lexemes: /[\.\w]+/
      };
      /* Targets */
      var TARGET = {
        className: 'section',
        begin: /^[^\s]+:/, end: /$/,
        contains: [VARIABLE,]
      };
      return {
        aliases: ['mk', 'mak'],
        keywords:
          'define endef undefine ifdef ifndef ifeq ifneq else endif ' +
          'include -include sinclude override export unexport private vpath',
        lexemes: /[\w-]+/,
        contains: [
          hljs.HASH_COMMENT_MODE,
          VARIABLE,
          QUOTE_STRING,
          FUNC,
          VAR_ASSIG,
          META,
          TARGET,
        ]
      };
    };
    
    /***/ }),
    /* 501 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        aliases: ['mma'],
        lexemes: '(\\$|\\b)' + hljs.IDENT_RE + '\\b',
        keywords: 'AbelianGroup Abort AbortKernels AbortProtect Above Abs Absolute AbsoluteCorrelation AbsoluteCorrelationFunction AbsoluteCurrentValue AbsoluteDashing AbsoluteFileName AbsoluteOptions AbsolutePointSize AbsoluteThickness AbsoluteTime AbsoluteTiming AccountingForm Accumulate Accuracy AccuracyGoal ActionDelay ActionMenu ActionMenuBox ActionMenuBoxOptions Active ActiveItem ActiveStyle AcyclicGraphQ AddOnHelpPath AddTo AdjacencyGraph AdjacencyList AdjacencyMatrix AdjustmentBox AdjustmentBoxOptions AdjustTimeSeriesForecast AffineTransform After AiryAi AiryAiPrime AiryAiZero AiryBi AiryBiPrime AiryBiZero AlgebraicIntegerQ AlgebraicNumber AlgebraicNumberDenominator AlgebraicNumberNorm AlgebraicNumberPolynomial AlgebraicNumberTrace AlgebraicRules AlgebraicRulesData Algebraics AlgebraicUnitQ Alignment AlignmentMarker AlignmentPoint All AllowedDimensions AllowGroupClose AllowInlineCells AllowKernelInitialization AllowReverseGroupClose AllowScriptLevelChange AlphaChannel AlternatingGroup AlternativeHypothesis Alternatives AmbientLight Analytic AnchoredSearch And AndersonDarlingTest AngerJ AngleBracket AngularGauge Animate AnimationCycleOffset AnimationCycleRepetitions AnimationDirection AnimationDisplayTime AnimationRate AnimationRepetitions AnimationRunning Animator AnimatorBox AnimatorBoxOptions AnimatorElements Annotation Annuity AnnuityDue Antialiasing Antisymmetric Apart ApartSquareFree Appearance AppearanceElements AppellF1 Append AppendTo Apply ArcCos ArcCosh ArcCot ArcCoth ArcCsc ArcCsch ArcSec ArcSech ArcSin ArcSinDistribution ArcSinh ArcTan ArcTanh Arg ArgMax ArgMin ArgumentCountQ ARIMAProcess ArithmeticGeometricMean ARMAProcess ARProcess Array ArrayComponents ArrayDepth ArrayFlatten ArrayPad ArrayPlot ArrayQ ArrayReshape ArrayRules Arrays Arrow Arrow3DBox ArrowBox Arrowheads AspectRatio AspectRatioFixed Assert Assuming Assumptions AstronomicalData Asynchronous AsynchronousTaskObject AsynchronousTasks AtomQ Attributes AugmentedSymmetricPolynomial AutoAction AutoDelete AutoEvaluateEvents AutoGeneratedPackage AutoIndent AutoIndentSpacings AutoItalicWords AutoloadPath AutoMatch Automatic AutomaticImageSize AutoMultiplicationSymbol AutoNumberFormatting AutoOpenNotebooks AutoOpenPalettes AutorunSequencing AutoScaling AutoScroll AutoSpacing AutoStyleOptions AutoStyleWords Axes AxesEdge AxesLabel AxesOrigin AxesStyle Axis ' +
          'BabyMonsterGroupB Back Background BackgroundTasksSettings Backslash Backsubstitution Backward Band BandpassFilter BandstopFilter BarabasiAlbertGraphDistribution BarChart BarChart3D BarLegend BarlowProschanImportance BarnesG BarOrigin BarSpacing BartlettHannWindow BartlettWindow BaseForm Baseline BaselinePosition BaseStyle BatesDistribution BattleLemarieWavelet Because BeckmannDistribution Beep Before Begin BeginDialogPacket BeginFrontEndInteractionPacket BeginPackage BellB BellY Below BenfordDistribution BeniniDistribution BenktanderGibratDistribution BenktanderWeibullDistribution BernoulliB BernoulliDistribution BernoulliGraphDistribution BernoulliProcess BernsteinBasis BesselFilterModel BesselI BesselJ BesselJZero BesselK BesselY BesselYZero Beta BetaBinomialDistribution BetaDistribution BetaNegativeBinomialDistribution BetaPrimeDistribution BetaRegularized BetweennessCentrality BezierCurve BezierCurve3DBox BezierCurve3DBoxOptions BezierCurveBox BezierCurveBoxOptions BezierFunction BilateralFilter Binarize BinaryFormat BinaryImageQ BinaryRead BinaryReadList BinaryWrite BinCounts BinLists Binomial BinomialDistribution BinomialProcess BinormalDistribution BiorthogonalSplineWavelet BipartiteGraphQ BirnbaumImportance BirnbaumSaundersDistribution BitAnd BitClear BitGet BitLength BitNot BitOr BitSet BitShiftLeft BitShiftRight BitXor Black BlackmanHarrisWindow BlackmanNuttallWindow BlackmanWindow Blank BlankForm BlankNullSequence BlankSequence Blend Block BlockRandom BlomqvistBeta BlomqvistBetaTest Blue Blur BodePlot BohmanWindow Bold Bookmarks Boole BooleanConsecutiveFunction BooleanConvert BooleanCountingFunction BooleanFunction BooleanGraph BooleanMaxterms BooleanMinimize BooleanMinterms Booleans BooleanTable BooleanVariables BorderDimensions BorelTannerDistribution Bottom BottomHatTransform BoundaryStyle Bounds Box BoxBaselineShift BoxData BoxDimensions Boxed Boxes BoxForm BoxFormFormatTypes BoxFrame BoxID BoxMargins BoxMatrix BoxRatios BoxRotation BoxRotationPoint BoxStyle BoxWhiskerChart Bra BracketingBar BraKet BrayCurtisDistance BreadthFirstScan Break Brown BrownForsytheTest BrownianBridgeProcess BrowserCategory BSplineBasis BSplineCurve BSplineCurve3DBox BSplineCurveBox BSplineCurveBoxOptions BSplineFunction BSplineSurface BSplineSurface3DBox BubbleChart BubbleChart3D BubbleScale BubbleSizes BulletGauge BusinessDayQ ButterflyGraph ButterworthFilterModel Button ButtonBar ButtonBox ButtonBoxOptions ButtonCell ButtonContents ButtonData ButtonEvaluator ButtonExpandable ButtonFrame ButtonFunction ButtonMargins ButtonMinHeight ButtonNote ButtonNotebook ButtonSource ButtonStyle ButtonStyleMenuListing Byte ByteCount ByteOrdering ' +
          'C CachedValue CacheGraphics CalendarData CalendarType CallPacket CanberraDistance Cancel CancelButton CandlestickChart Cap CapForm CapitalDifferentialD CardinalBSplineBasis CarmichaelLambda Cases Cashflow Casoratian Catalan CatalanNumber Catch CauchyDistribution CauchyWindow CayleyGraph CDF CDFDeploy CDFInformation CDFWavelet Ceiling Cell CellAutoOverwrite CellBaseline CellBoundingBox CellBracketOptions CellChangeTimes CellContents CellContext CellDingbat CellDynamicExpression CellEditDuplicate CellElementsBoundingBox CellElementSpacings CellEpilog CellEvaluationDuplicate CellEvaluationFunction CellEventActions CellFrame CellFrameColor CellFrameLabelMargins CellFrameLabels CellFrameMargins CellGroup CellGroupData CellGrouping CellGroupingRules CellHorizontalScrolling CellID CellLabel CellLabelAutoDelete CellLabelMargins CellLabelPositioning CellMargins CellObject CellOpen CellPrint CellProlog Cells CellSize CellStyle CellTags CellularAutomaton CensoredDistribution Censoring Center CenterDot CentralMoment CentralMomentGeneratingFunction CForm ChampernowneNumber ChanVeseBinarize Character CharacterEncoding CharacterEncodingsPath CharacteristicFunction CharacteristicPolynomial CharacterRange Characters ChartBaseStyle ChartElementData ChartElementDataFunction ChartElementFunction ChartElements ChartLabels ChartLayout ChartLegends ChartStyle Chebyshev1FilterModel Chebyshev2FilterModel ChebyshevDistance ChebyshevT ChebyshevU Check CheckAbort CheckAll Checkbox CheckboxBar CheckboxBox CheckboxBoxOptions ChemicalData ChessboardDistance ChiDistribution ChineseRemainder ChiSquareDistribution ChoiceButtons ChoiceDialog CholeskyDecomposition Chop Circle CircleBox CircleDot CircleMinus CirclePlus CircleTimes CirculantGraph CityData Clear ClearAll ClearAttributes ClearSystemCache ClebschGordan ClickPane Clip ClipboardNotebook ClipFill ClippingStyle ClipPlanes ClipRange Clock ClockGauge ClockwiseContourIntegral Close Closed CloseKernels ClosenessCentrality Closing ClosingAutoSave ClosingEvent ClusteringComponents CMYKColor Coarse Coefficient CoefficientArrays CoefficientDomain CoefficientList CoefficientRules CoifletWavelet Collect Colon ColonForm ColorCombine ColorConvert ColorData ColorDataFunction ColorFunction ColorFunctionScaling Colorize ColorNegate ColorOutput ColorProfileData ColorQuantize ColorReplace ColorRules ColorSelectorSettings ColorSeparate ColorSetter ColorSetterBox ColorSetterBoxOptions ColorSlider ColorSpace Column ColumnAlignments ColumnBackgrounds ColumnForm ColumnLines ColumnsEqual ColumnSpacings ColumnWidths CommonDefaultFormatTypes Commonest CommonestFilter CommonUnits CommunityBoundaryStyle CommunityGraphPlot CommunityLabels CommunityRegionStyle CompatibleUnitQ CompilationOptions CompilationTarget Compile Compiled CompiledFunction Complement CompleteGraph CompleteGraphQ CompleteKaryTree CompletionsListPacket Complex Complexes ComplexExpand ComplexInfinity ComplexityFunction ComponentMeasurements ' +
          'ComponentwiseContextMenu Compose ComposeList ComposeSeries Composition CompoundExpression CompoundPoissonDistribution CompoundPoissonProcess CompoundRenewalProcess Compress CompressedData Condition ConditionalExpression Conditioned Cone ConeBox ConfidenceLevel ConfidenceRange ConfidenceTransform ConfigurationPath Congruent Conjugate ConjugateTranspose Conjunction Connect ConnectedComponents ConnectedGraphQ ConnesWindow ConoverTest ConsoleMessage ConsoleMessagePacket ConsolePrint Constant ConstantArray Constants ConstrainedMax ConstrainedMin ContentPadding ContentsBoundingBox ContentSelectable ContentSize Context ContextMenu Contexts ContextToFilename ContextToFileName Continuation Continue ContinuedFraction ContinuedFractionK ContinuousAction ContinuousMarkovProcess ContinuousTimeModelQ ContinuousWaveletData ContinuousWaveletTransform ContourDetect ContourGraphics ContourIntegral ContourLabels ContourLines ContourPlot ContourPlot3D Contours ContourShading ContourSmoothing ContourStyle ContraharmonicMean Control ControlActive ControlAlignment ControllabilityGramian ControllabilityMatrix ControllableDecomposition ControllableModelQ ControllerDuration ControllerInformation ControllerInformationData ControllerLinking ControllerManipulate ControllerMethod ControllerPath ControllerState ControlPlacement ControlsRendering ControlType Convergents ConversionOptions ConversionRules ConvertToBitmapPacket ConvertToPostScript ConvertToPostScriptPacket Convolve ConwayGroupCo1 ConwayGroupCo2 ConwayGroupCo3 CoordinateChartData CoordinatesToolOptions CoordinateTransform CoordinateTransformData CoprimeQ Coproduct CopulaDistribution Copyable CopyDirectory CopyFile CopyTag CopyToClipboard CornerFilter CornerNeighbors Correlation CorrelationDistance CorrelationFunction CorrelationTest Cos Cosh CoshIntegral CosineDistance CosineWindow CosIntegral Cot Coth Count CounterAssignments CounterBox CounterBoxOptions CounterClockwiseContourIntegral CounterEvaluator CounterFunction CounterIncrements CounterStyle CounterStyleMenuListing CountRoots CountryData Covariance CovarianceEstimatorFunction CovarianceFunction CoxianDistribution CoxIngersollRossProcess CoxModel CoxModelFit CramerVonMisesTest CreateArchive CreateDialog CreateDirectory CreateDocument CreateIntermediateDirectories CreatePalette CreatePalettePacket CreateScheduledTask CreateTemporary CreateWindow CriticalityFailureImportance CriticalitySuccessImportance CriticalSection Cross CrossingDetect CrossMatrix Csc Csch CubeRoot Cubics Cuboid CuboidBox Cumulant CumulantGeneratingFunction Cup CupCap Curl CurlyDoubleQuote CurlyQuote CurrentImage CurrentlySpeakingPacket CurrentValue CurvatureFlowFilter CurveClosed Cyan CycleGraph CycleIndexPolynomial Cycles CyclicGroup Cyclotomic Cylinder CylinderBox CylindricalDecomposition ' +
          'D DagumDistribution DamerauLevenshteinDistance DampingFactor Darker Dashed Dashing DataCompression DataDistribution DataRange DataReversed Date DateDelimiters DateDifference DateFunction DateList DateListLogPlot DateListPlot DatePattern DatePlus DateRange DateString DateTicksFormat DaubechiesWavelet DavisDistribution DawsonF DayCount DayCountConvention DayMatchQ DayName DayPlus DayRange DayRound DeBruijnGraph Debug DebugTag Decimal DeclareKnownSymbols DeclarePackage Decompose Decrement DedekindEta Default DefaultAxesStyle DefaultBaseStyle DefaultBoxStyle DefaultButton DefaultColor DefaultControlPlacement DefaultDuplicateCellStyle DefaultDuration DefaultElement DefaultFaceGridsStyle DefaultFieldHintStyle DefaultFont DefaultFontProperties DefaultFormatType DefaultFormatTypeForStyle DefaultFrameStyle DefaultFrameTicksStyle DefaultGridLinesStyle DefaultInlineFormatType DefaultInputFormatType DefaultLabelStyle DefaultMenuStyle DefaultNaturalLanguage DefaultNewCellStyle DefaultNewInlineCellStyle DefaultNotebook DefaultOptions DefaultOutputFormatType DefaultStyle DefaultStyleDefinitions DefaultTextFormatType DefaultTextInlineFormatType DefaultTicksStyle DefaultTooltipStyle DefaultValues Defer DefineExternal DefineInputStreamMethod DefineOutputStreamMethod Definition Degree DegreeCentrality DegreeGraphDistribution DegreeLexicographic DegreeReverseLexicographic Deinitialization Del Deletable Delete DeleteBorderComponents DeleteCases DeleteContents DeleteDirectory DeleteDuplicates DeleteFile DeleteSmallComponents DeleteWithContents DeletionWarning Delimiter DelimiterFlashTime DelimiterMatching Delimiters Denominator DensityGraphics DensityHistogram DensityPlot DependentVariables Deploy Deployed Depth DepthFirstScan Derivative DerivativeFilter DescriptorStateSpace DesignMatrix Det DGaussianWavelet DiacriticalPositioning Diagonal DiagonalMatrix Dialog DialogIndent DialogInput DialogLevel DialogNotebook DialogProlog DialogReturn DialogSymbols Diamond DiamondMatrix DiceDissimilarity DictionaryLookup DifferenceDelta DifferenceOrder DifferenceRoot DifferenceRootReduce Differences DifferentialD DifferentialRoot DifferentialRootReduce DifferentiatorFilter DigitBlock DigitBlockMinimum DigitCharacter DigitCount DigitQ DihedralGroup Dilation Dimensions DiracComb DiracDelta DirectedEdge DirectedEdges DirectedGraph DirectedGraphQ DirectedInfinity Direction Directive Directory DirectoryName DirectoryQ DirectoryStack DirichletCharacter DirichletConvolve DirichletDistribution DirichletL DirichletTransform DirichletWindow DisableConsolePrintPacket DiscreteChirpZTransform DiscreteConvolve DiscreteDelta DiscreteHadamardTransform DiscreteIndicator DiscreteLQEstimatorGains DiscreteLQRegulatorGains DiscreteLyapunovSolve DiscreteMarkovProcess DiscretePlot DiscretePlot3D DiscreteRatio DiscreteRiccatiSolve DiscreteShift DiscreteTimeModelQ DiscreteUniformDistribution DiscreteVariables DiscreteWaveletData DiscreteWaveletPacketTransform ' +
          'DiscreteWaveletTransform Discriminant Disjunction Disk DiskBox DiskMatrix Dispatch DispersionEstimatorFunction Display DisplayAllSteps DisplayEndPacket DisplayFlushImagePacket DisplayForm DisplayFunction DisplayPacket DisplayRules DisplaySetSizePacket DisplayString DisplayTemporary DisplayWith DisplayWithRef DisplayWithVariable DistanceFunction DistanceTransform Distribute Distributed DistributedContexts DistributeDefinitions DistributionChart DistributionDomain DistributionFitTest DistributionParameterAssumptions DistributionParameterQ Dithering Div Divergence Divide DivideBy Dividers Divisible Divisors DivisorSigma DivisorSum DMSList DMSString Do DockedCells DocumentNotebook DominantColors DOSTextFormat Dot DotDashed DotEqual Dotted DoubleBracketingBar DoubleContourIntegral DoubleDownArrow DoubleLeftArrow DoubleLeftRightArrow DoubleLeftTee DoubleLongLeftArrow DoubleLongLeftRightArrow DoubleLongRightArrow DoubleRightArrow DoubleRightTee DoubleUpArrow DoubleUpDownArrow DoubleVerticalBar DoublyInfinite Down DownArrow DownArrowBar DownArrowUpArrow DownLeftRightVector DownLeftTeeVector DownLeftVector DownLeftVectorBar DownRightTeeVector DownRightVector DownRightVectorBar Downsample DownTee DownTeeArrow DownValues DragAndDrop DrawEdges DrawFrontFaces DrawHighlighted Drop DSolve Dt DualLinearProgramming DualSystemsModel DumpGet DumpSave DuplicateFreeQ Dynamic DynamicBox DynamicBoxOptions DynamicEvaluationTimeout DynamicLocation DynamicModule DynamicModuleBox DynamicModuleBoxOptions DynamicModuleParent DynamicModuleValues DynamicName DynamicNamespace DynamicReference DynamicSetting DynamicUpdating DynamicWrapper DynamicWrapperBox DynamicWrapperBoxOptions ' +
          'E EccentricityCentrality EdgeAdd EdgeBetweennessCentrality EdgeCapacity EdgeCapForm EdgeColor EdgeConnectivity EdgeCost EdgeCount EdgeCoverQ EdgeDashing EdgeDelete EdgeDetect EdgeForm EdgeIndex EdgeJoinForm EdgeLabeling EdgeLabels EdgeLabelStyle EdgeList EdgeOpacity EdgeQ EdgeRenderingFunction EdgeRules EdgeShapeFunction EdgeStyle EdgeThickness EdgeWeight Editable EditButtonSettings EditCellTagsSettings EditDistance EffectiveInterest Eigensystem Eigenvalues EigenvectorCentrality Eigenvectors Element ElementData Eliminate EliminationOrder EllipticE EllipticExp EllipticExpPrime EllipticF EllipticFilterModel EllipticK EllipticLog EllipticNomeQ EllipticPi EllipticReducedHalfPeriods EllipticTheta EllipticThetaPrime EmitSound EmphasizeSyntaxErrors EmpiricalDistribution Empty EmptyGraphQ EnableConsolePrintPacket Enabled Encode End EndAdd EndDialogPacket EndFrontEndInteractionPacket EndOfFile EndOfLine EndOfString EndPackage EngineeringForm Enter EnterExpressionPacket EnterTextPacket Entropy EntropyFilter Environment Epilog Equal EqualColumns EqualRows EqualTilde EquatedTo Equilibrium EquirippleFilterKernel Equivalent Erf Erfc Erfi ErlangB ErlangC ErlangDistribution Erosion ErrorBox ErrorBoxOptions ErrorNorm ErrorPacket ErrorsDialogSettings EstimatedDistribution EstimatedProcess EstimatorGains EstimatorRegulator EuclideanDistance EulerE EulerGamma EulerianGraphQ EulerPhi Evaluatable Evaluate Evaluated EvaluatePacket EvaluationCell EvaluationCompletionAction EvaluationElements EvaluationMode EvaluationMonitor EvaluationNotebook EvaluationObject EvaluationOrder Evaluator EvaluatorNames EvenQ EventData EventEvaluator EventHandler EventHandlerTag EventLabels ExactBlackmanWindow ExactNumberQ ExactRootIsolation ExampleData Except ExcludedForms ExcludePods Exclusions ExclusionsStyle Exists Exit ExitDialog Exp Expand ExpandAll ExpandDenominator ExpandFileName ExpandNumerator Expectation ExpectationE ExpectedValue ExpGammaDistribution ExpIntegralE ExpIntegralEi Exponent ExponentFunction ExponentialDistribution ExponentialFamily ExponentialGeneratingFunction ExponentialMovingAverage ExponentialPowerDistribution ExponentPosition ExponentStep Export ExportAutoReplacements ExportPacket ExportString Expression ExpressionCell ExpressionPacket ExpToTrig ExtendedGCD Extension ExtentElementFunction ExtentMarkers ExtentSize ExternalCall ExternalDataCharacterEncoding Extract ExtractArchive ExtremeValueDistribution ' +
          'FaceForm FaceGrids FaceGridsStyle Factor FactorComplete Factorial Factorial2 FactorialMoment FactorialMomentGeneratingFunction FactorialPower FactorInteger FactorList FactorSquareFree FactorSquareFreeList FactorTerms FactorTermsList Fail FailureDistribution False FARIMAProcess FEDisableConsolePrintPacket FeedbackSector FeedbackSectorStyle FeedbackType FEEnableConsolePrintPacket Fibonacci FieldHint FieldHintStyle FieldMasked FieldSize File FileBaseName FileByteCount FileDate FileExistsQ FileExtension FileFormat FileHash FileInformation FileName FileNameDepth FileNameDialogSettings FileNameDrop FileNameJoin FileNames FileNameSetter FileNameSplit FileNameTake FilePrint FileType FilledCurve FilledCurveBox Filling FillingStyle FillingTransform FilterRules FinancialBond FinancialData FinancialDerivative FinancialIndicator Find FindArgMax FindArgMin FindClique FindClusters FindCurvePath FindDistributionParameters FindDivisions FindEdgeCover FindEdgeCut FindEulerianCycle FindFaces FindFile FindFit FindGeneratingFunction FindGeoLocation FindGeometricTransform FindGraphCommunities FindGraphIsomorphism FindGraphPartition FindHamiltonianCycle FindIndependentEdgeSet FindIndependentVertexSet FindInstance FindIntegerNullVector FindKClan FindKClique FindKClub FindKPlex FindLibrary FindLinearRecurrence FindList FindMaximum FindMaximumFlow FindMaxValue FindMinimum FindMinimumCostFlow FindMinimumCut FindMinValue FindPermutation FindPostmanTour FindProcessParameters FindRoot FindSequenceFunction FindSettings FindShortestPath FindShortestTour FindThreshold FindVertexCover FindVertexCut Fine FinishDynamic FiniteAbelianGroupCount FiniteGroupCount FiniteGroupData First FirstPassageTimeDistribution FischerGroupFi22 FischerGroupFi23 FischerGroupFi24Prime FisherHypergeometricDistribution FisherRatioTest FisherZDistribution Fit FitAll FittedModel FixedPoint FixedPointList FlashSelection Flat Flatten FlattenAt FlatTopWindow FlipView Floor FlushPrintOutputPacket Fold FoldList Font FontColor FontFamily FontForm FontName FontOpacity FontPostScriptName FontProperties FontReencoding FontSize FontSlant FontSubstitutions FontTracking FontVariations FontWeight For ForAll Format FormatRules FormatType FormatTypeAutoConvert FormatValues FormBox FormBoxOptions FortranForm Forward ForwardBackward Fourier FourierCoefficient FourierCosCoefficient FourierCosSeries FourierCosTransform FourierDCT FourierDCTFilter FourierDCTMatrix FourierDST FourierDSTMatrix FourierMatrix FourierParameters FourierSequenceTransform FourierSeries FourierSinCoefficient FourierSinSeries FourierSinTransform FourierTransform FourierTrigSeries FractionalBrownianMotionProcess FractionalPart FractionBox FractionBoxOptions FractionLine Frame FrameBox FrameBoxOptions Framed FrameInset FrameLabel Frameless FrameMargins FrameStyle FrameTicks FrameTicksStyle FRatioDistribution FrechetDistribution FreeQ FrequencySamplingFilterKernel FresnelC FresnelS Friday FrobeniusNumber FrobeniusSolve ' +
          'FromCharacterCode FromCoefficientRules FromContinuedFraction FromDate FromDigits FromDMS Front FrontEndDynamicExpression FrontEndEventActions FrontEndExecute FrontEndObject FrontEndResource FrontEndResourceString FrontEndStackSize FrontEndToken FrontEndTokenExecute FrontEndValueCache FrontEndVersion FrontFaceColor FrontFaceOpacity Full FullAxes FullDefinition FullForm FullGraphics FullOptions FullSimplify Function FunctionExpand FunctionInterpolation FunctionSpace FussellVeselyImportance ' +
          'GaborFilter GaborMatrix GaborWavelet GainMargins GainPhaseMargins Gamma GammaDistribution GammaRegularized GapPenalty Gather GatherBy GaugeFaceElementFunction GaugeFaceStyle GaugeFrameElementFunction GaugeFrameSize GaugeFrameStyle GaugeLabels GaugeMarkers GaugeStyle GaussianFilter GaussianIntegers GaussianMatrix GaussianWindow GCD GegenbauerC General GeneralizedLinearModelFit GenerateConditions GeneratedCell GeneratedParameters GeneratingFunction Generic GenericCylindricalDecomposition GenomeData GenomeLookup GeodesicClosing GeodesicDilation GeodesicErosion GeodesicOpening GeoDestination GeodesyData GeoDirection GeoDistance GeoGridPosition GeometricBrownianMotionProcess GeometricDistribution GeometricMean GeometricMeanFilter GeometricTransformation GeometricTransformation3DBox GeometricTransformation3DBoxOptions GeometricTransformationBox GeometricTransformationBoxOptions GeoPosition GeoPositionENU GeoPositionXYZ GeoProjectionData GestureHandler GestureHandlerTag Get GetBoundingBoxSizePacket GetContext GetEnvironment GetFileName GetFrontEndOptionsDataPacket GetLinebreakInformationPacket GetMenusPacket GetPageBreakInformationPacket Glaisher GlobalClusteringCoefficient GlobalPreferences GlobalSession Glow GoldenRatio GompertzMakehamDistribution GoodmanKruskalGamma GoodmanKruskalGammaTest Goto Grad Gradient GradientFilter GradientOrientationFilter Graph GraphAssortativity GraphCenter GraphComplement GraphData GraphDensity GraphDiameter GraphDifference GraphDisjointUnion ' +
          'GraphDistance GraphDistanceMatrix GraphElementData GraphEmbedding GraphHighlight GraphHighlightStyle GraphHub Graphics Graphics3D Graphics3DBox Graphics3DBoxOptions GraphicsArray GraphicsBaseline GraphicsBox GraphicsBoxOptions GraphicsColor GraphicsColumn GraphicsComplex GraphicsComplex3DBox GraphicsComplex3DBoxOptions GraphicsComplexBox GraphicsComplexBoxOptions GraphicsContents GraphicsData GraphicsGrid GraphicsGridBox GraphicsGroup GraphicsGroup3DBox GraphicsGroup3DBoxOptions GraphicsGroupBox GraphicsGroupBoxOptions GraphicsGrouping GraphicsHighlightColor GraphicsRow GraphicsSpacing GraphicsStyle GraphIntersection GraphLayout GraphLinkEfficiency GraphPeriphery GraphPlot GraphPlot3D GraphPower GraphPropertyDistribution GraphQ GraphRadius GraphReciprocity GraphRoot GraphStyle GraphUnion Gray GrayLevel GreatCircleDistance Greater GreaterEqual GreaterEqualLess GreaterFullEqual GreaterGreater GreaterLess GreaterSlantEqual GreaterTilde Green Grid GridBaseline GridBox GridBoxAlignment GridBoxBackground GridBoxDividers GridBoxFrame GridBoxItemSize GridBoxItemStyle GridBoxOptions GridBoxSpacings GridCreationSettings GridDefaultElement GridElementStyleOptions GridFrame GridFrameMargins GridGraph GridLines GridLinesStyle GroebnerBasis GroupActionBase GroupCentralizer GroupElementFromWord GroupElementPosition GroupElementQ GroupElements GroupElementToWord GroupGenerators GroupMultiplicationTable GroupOrbits GroupOrder GroupPageBreakWithin GroupSetwiseStabilizer GroupStabilizer GroupStabilizerChain Gudermannian GumbelDistribution ' +
          'HaarWavelet HadamardMatrix HalfNormalDistribution HamiltonianGraphQ HammingDistance HammingWindow HankelH1 HankelH2 HankelMatrix HannPoissonWindow HannWindow HaradaNortonGroupHN HararyGraph HarmonicMean HarmonicMeanFilter HarmonicNumber Hash HashTable Haversine HazardFunction Head HeadCompose Heads HeavisideLambda HeavisidePi HeavisideTheta HeldGroupHe HeldPart HelpBrowserLookup HelpBrowserNotebook HelpBrowserSettings HermiteDecomposition HermiteH HermitianMatrixQ HessenbergDecomposition Hessian HexadecimalCharacter Hexahedron HexahedronBox HexahedronBoxOptions HiddenSurface HighlightGraph HighlightImage HighpassFilter HigmanSimsGroupHS HilbertFilter HilbertMatrix Histogram Histogram3D HistogramDistribution HistogramList HistogramTransform HistogramTransformInterpolation HitMissTransform HITSCentrality HodgeDual HoeffdingD HoeffdingDTest Hold HoldAll HoldAllComplete HoldComplete HoldFirst HoldForm HoldPattern HoldRest HolidayCalendar HomeDirectory HomePage Horizontal HorizontalForm HorizontalGauge HorizontalScrollPosition HornerForm HotellingTSquareDistribution HoytDistribution HTMLSave Hue HumpDownHump HumpEqual HurwitzLerchPhi HurwitzZeta HyperbolicDistribution HypercubeGraph HyperexponentialDistribution Hyperfactorial Hypergeometric0F1 Hypergeometric0F1Regularized Hypergeometric1F1 Hypergeometric1F1Regularized Hypergeometric2F1 Hypergeometric2F1Regularized HypergeometricDistribution HypergeometricPFQ HypergeometricPFQRegularized HypergeometricU Hyperlink HyperlinkCreationSettings Hyphenation HyphenationOptions HypoexponentialDistribution HypothesisTestData ' +
          'I Identity IdentityMatrix If IgnoreCase Im Image Image3D Image3DSlices ImageAccumulate ImageAdd ImageAdjust ImageAlign ImageApply ImageAspectRatio ImageAssemble ImageCache ImageCacheValid ImageCapture ImageChannels ImageClip ImageColorSpace ImageCompose ImageConvolve ImageCooccurrence ImageCorners ImageCorrelate ImageCorrespondingPoints ImageCrop ImageData ImageDataPacket ImageDeconvolve ImageDemosaic ImageDifference ImageDimensions ImageDistance ImageEffect ImageFeatureTrack ImageFileApply ImageFileFilter ImageFileScan ImageFilter ImageForestingComponents ImageForwardTransformation ImageHistogram ImageKeypoints ImageLevels ImageLines ImageMargins ImageMarkers ImageMeasurements ImageMultiply ImageOffset ImagePad ImagePadding ImagePartition ImagePeriodogram ImagePerspectiveTransformation ImageQ ImageRangeCache ImageReflect ImageRegion ImageResize ImageResolution ImageRotate ImageRotated ImageScaled ImageScan ImageSize ImageSizeAction ImageSizeCache ImageSizeMultipliers ImageSizeRaw ImageSubtract ImageTake ImageTransformation ImageTrim ImageType ImageValue ImageValuePositions Implies Import ImportAutoReplacements ImportString ImprovementImportance In IncidenceGraph IncidenceList IncidenceMatrix IncludeConstantBasis IncludeFileExtension IncludePods IncludeSingularTerm Increment Indent IndentingNewlineSpacings IndentMaxFraction IndependenceTest IndependentEdgeSetQ IndependentUnit IndependentVertexSetQ Indeterminate IndexCreationOptions Indexed IndexGraph IndexTag Inequality InexactNumberQ InexactNumbers Infinity Infix Information Inherited InheritScope Initialization InitializationCell InitializationCellEvaluation InitializationCellWarning InlineCounterAssignments InlineCounterIncrements InlineRules Inner Inpaint Input InputAliases InputAssumptions InputAutoReplacements InputField InputFieldBox InputFieldBoxOptions InputForm InputGrouping InputNamePacket InputNotebook InputPacket InputSettings InputStream InputString InputStringPacket InputToBoxFormPacket Insert InsertionPointObject InsertResults Inset Inset3DBox Inset3DBoxOptions InsetBox InsetBoxOptions Install InstallService InString Integer IntegerDigits IntegerExponent IntegerLength IntegerPart IntegerPartitions IntegerQ Integers IntegerString Integral Integrate Interactive InteractiveTradingChart Interlaced Interleaving InternallyBalancedDecomposition InterpolatingFunction InterpolatingPolynomial Interpolation InterpolationOrder InterpolationPoints InterpolationPrecision Interpretation InterpretationBox InterpretationBoxOptions InterpretationFunction ' +
          'InterpretTemplate InterquartileRange Interrupt InterruptSettings Intersection Interval IntervalIntersection IntervalMemberQ IntervalUnion Inverse InverseBetaRegularized InverseCDF InverseChiSquareDistribution InverseContinuousWaveletTransform InverseDistanceTransform InverseEllipticNomeQ InverseErf InverseErfc InverseFourier InverseFourierCosTransform InverseFourierSequenceTransform InverseFourierSinTransform InverseFourierTransform InverseFunction InverseFunctions InverseGammaDistribution InverseGammaRegularized InverseGaussianDistribution InverseGudermannian InverseHaversine InverseJacobiCD InverseJacobiCN InverseJacobiCS InverseJacobiDC InverseJacobiDN InverseJacobiDS InverseJacobiNC InverseJacobiND InverseJacobiNS InverseJacobiSC InverseJacobiSD InverseJacobiSN InverseLaplaceTransform InversePermutation InverseRadon InverseSeries InverseSurvivalFunction InverseWaveletTransform InverseWeierstrassP InverseZTransform Invisible InvisibleApplication InvisibleTimes IrreduciblePolynomialQ IsolatingInterval IsomorphicGraphQ IsotopeData Italic Item ItemBox ItemBoxOptions ItemSize ItemStyle ItoProcess ' +
          'JaccardDissimilarity JacobiAmplitude Jacobian JacobiCD JacobiCN JacobiCS JacobiDC JacobiDN JacobiDS JacobiNC JacobiND JacobiNS JacobiP JacobiSC JacobiSD JacobiSN JacobiSymbol JacobiZeta JankoGroupJ1 JankoGroupJ2 JankoGroupJ3 JankoGroupJ4 JarqueBeraALMTest JohnsonDistribution Join Joined JoinedCurve JoinedCurveBox JoinForm JordanDecomposition JordanModelDecomposition ' +
          'K KagiChart KaiserBesselWindow KaiserWindow KalmanEstimator KalmanFilter KarhunenLoeveDecomposition KaryTree KatzCentrality KCoreComponents KDistribution KelvinBei KelvinBer KelvinKei KelvinKer KendallTau KendallTauTest KernelExecute KernelMixtureDistribution KernelObject Kernels Ket Khinchin KirchhoffGraph KirchhoffMatrix KleinInvariantJ KnightTourGraph KnotData KnownUnitQ KolmogorovSmirnovTest KroneckerDelta KroneckerModelDecomposition KroneckerProduct KroneckerSymbol KuiperTest KumaraswamyDistribution Kurtosis KuwaharaFilter ' +
          'Label Labeled LabeledSlider LabelingFunction LabelStyle LaguerreL LambdaComponents LambertW LanczosWindow LandauDistribution Language LanguageCategory LaplaceDistribution LaplaceTransform Laplacian LaplacianFilter LaplacianGaussianFilter Large Larger Last Latitude LatitudeLongitude LatticeData LatticeReduce Launch LaunchKernels LayeredGraphPlot LayerSizeFunction LayoutInformation LCM LeafCount LeapYearQ LeastSquares LeastSquaresFilterKernel Left LeftArrow LeftArrowBar LeftArrowRightArrow LeftDownTeeVector LeftDownVector LeftDownVectorBar LeftRightArrow LeftRightVector LeftTee LeftTeeArrow LeftTeeVector LeftTriangle LeftTriangleBar LeftTriangleEqual LeftUpDownVector LeftUpTeeVector LeftUpVector LeftUpVectorBar LeftVector LeftVectorBar LegendAppearance Legended LegendFunction LegendLabel LegendLayout LegendMargins LegendMarkers LegendMarkerSize LegendreP LegendreQ LegendreType Length LengthWhile LerchPhi Less LessEqual LessEqualGreater LessFullEqual LessGreater LessLess LessSlantEqual LessTilde LetterCharacter LetterQ Level LeveneTest LeviCivitaTensor LevyDistribution Lexicographic LibraryFunction LibraryFunctionError LibraryFunctionInformation LibraryFunctionLoad LibraryFunctionUnload LibraryLoad LibraryUnload LicenseID LiftingFilterData LiftingWaveletTransform LightBlue LightBrown LightCyan Lighter LightGray LightGreen Lighting LightingAngle LightMagenta LightOrange LightPink LightPurple LightRed LightSources LightYellow Likelihood Limit LimitsPositioning LimitsPositioningTokens LindleyDistribution Line Line3DBox LinearFilter LinearFractionalTransform LinearModelFit LinearOffsetFunction LinearProgramming LinearRecurrence LinearSolve LinearSolveFunction LineBox LineBreak LinebreakAdjustments LineBreakChart LineBreakWithin LineColor LineForm LineGraph LineIndent LineIndentMaxFraction LineIntegralConvolutionPlot LineIntegralConvolutionScale LineLegend LineOpacity LineSpacing LineWrapParts LinkActivate LinkClose LinkConnect LinkConnectedQ LinkCreate LinkError LinkFlush LinkFunction LinkHost LinkInterrupt LinkLaunch LinkMode LinkObject LinkOpen LinkOptions LinkPatterns LinkProtocol LinkRead LinkReadHeld LinkReadyQ Links LinkWrite LinkWriteHeld LiouvilleLambda List Listable ListAnimate ListContourPlot ListContourPlot3D ListConvolve ListCorrelate ListCurvePathPlot ListDeconvolve ListDensityPlot Listen ListFourierSequenceTransform ListInterpolation ListLineIntegralConvolutionPlot ListLinePlot ListLogLinearPlot ListLogLogPlot ListLogPlot ListPicker ListPickerBox ListPickerBoxBackground ListPickerBoxOptions ListPlay ListPlot ListPlot3D ListPointPlot3D ListPolarPlot ListQ ListStreamDensityPlot ListStreamPlot ListSurfacePlot3D ListVectorDensityPlot ListVectorPlot ListVectorPlot3D ListZTransform Literal LiteralSearch LocalClusteringCoefficient LocalizeVariables LocationEquivalenceTest LocationTest Locator LocatorAutoCreate LocatorBox LocatorBoxOptions LocatorCentering LocatorPane LocatorPaneBox LocatorPaneBoxOptions ' +
          'LocatorRegion Locked Log Log10 Log2 LogBarnesG LogGamma LogGammaDistribution LogicalExpand LogIntegral LogisticDistribution LogitModelFit LogLikelihood LogLinearPlot LogLogisticDistribution LogLogPlot LogMultinormalDistribution LogNormalDistribution LogPlot LogRankTest LogSeriesDistribution LongEqual Longest LongestAscendingSequence LongestCommonSequence LongestCommonSequencePositions LongestCommonSubsequence LongestCommonSubsequencePositions LongestMatch LongForm Longitude LongLeftArrow LongLeftRightArrow LongRightArrow Loopback LoopFreeGraphQ LowerCaseQ LowerLeftArrow LowerRightArrow LowerTriangularize LowpassFilter LQEstimatorGains LQGRegulator LQOutputRegulatorGains LQRegulatorGains LUBackSubstitution LucasL LuccioSamiComponents LUDecomposition LyapunovSolve LyonsGroupLy ' +
          'MachineID MachineName MachineNumberQ MachinePrecision MacintoshSystemPageSetup Magenta Magnification Magnify MainSolve MaintainDynamicCaches Majority MakeBoxes MakeExpression MakeRules MangoldtLambda ManhattanDistance Manipulate Manipulator MannWhitneyTest MantissaExponent Manual Map MapAll MapAt MapIndexed MAProcess MapThread MarcumQ MardiaCombinedTest MardiaKurtosisTest MardiaSkewnessTest MarginalDistribution MarkovProcessProperties Masking MatchingDissimilarity MatchLocalNameQ MatchLocalNames MatchQ Material MathematicaNotation MathieuC MathieuCharacteristicA MathieuCharacteristicB MathieuCharacteristicExponent MathieuCPrime MathieuGroupM11 MathieuGroupM12 MathieuGroupM22 MathieuGroupM23 MathieuGroupM24 MathieuS MathieuSPrime MathMLForm MathMLText Matrices MatrixExp MatrixForm MatrixFunction MatrixLog MatrixPlot MatrixPower MatrixQ MatrixRank Max MaxBend MaxDetect MaxExtraBandwidths MaxExtraConditions MaxFeatures MaxFilter Maximize MaxIterations MaxMemoryUsed MaxMixtureKernels MaxPlotPoints MaxPoints MaxRecursion MaxStableDistribution MaxStepFraction MaxSteps MaxStepSize MaxValue MaxwellDistribution McLaughlinGroupMcL Mean MeanClusteringCoefficient MeanDegreeConnectivity MeanDeviation MeanFilter MeanGraphDistance MeanNeighborDegree MeanShift MeanShiftFilter Median MedianDeviation MedianFilter Medium MeijerG MeixnerDistribution MemberQ MemoryConstrained MemoryInUse Menu MenuAppearance MenuCommandKey MenuEvaluator MenuItem MenuPacket MenuSortingValue MenuStyle MenuView MergeDifferences Mesh MeshFunctions MeshRange MeshShading MeshStyle Message MessageDialog MessageList MessageName MessageOptions MessagePacket Messages MessagesNotebook MetaCharacters MetaInformation Method MethodOptions MexicanHatWavelet MeyerWavelet Min MinDetect MinFilter MinimalPolynomial MinimalStateSpaceModel Minimize Minors MinRecursion MinSize MinStableDistribution Minus MinusPlus MinValue Missing MissingDataMethod MittagLefflerE MixedRadix MixedRadixQuantity MixtureDistribution Mod Modal Mode Modular ModularLambda Module Modulus MoebiusMu Moment Momentary MomentConvert MomentEvaluate MomentGeneratingFunction Monday Monitor MonomialList MonomialOrder MonsterGroupM MorletWavelet MorphologicalBinarize MorphologicalBranchPoints MorphologicalComponents MorphologicalEulerNumber MorphologicalGraph MorphologicalPerimeter MorphologicalTransform Most MouseAnnotation MouseAppearance MouseAppearanceTag MouseButtons Mouseover MousePointerNote MousePosition MovingAverage MovingMedian MoyalDistribution MultiedgeStyle MultilaunchWarning MultiLetterItalics MultiLetterStyle MultilineFunction Multinomial MultinomialDistribution MultinormalDistribution MultiplicativeOrder Multiplicity Multiselection MultivariateHypergeometricDistribution MultivariatePoissonDistribution MultivariateTDistribution ' +
          'N NakagamiDistribution NameQ Names NamespaceBox Nand NArgMax NArgMin NBernoulliB NCache NDSolve NDSolveValue Nearest NearestFunction NeedCurrentFrontEndPackagePacket NeedCurrentFrontEndSymbolsPacket NeedlemanWunschSimilarity Needs Negative NegativeBinomialDistribution NegativeMultinomialDistribution NeighborhoodGraph Nest NestedGreaterGreater NestedLessLess NestedScriptRules NestList NestWhile NestWhileList NevilleThetaC NevilleThetaD NevilleThetaN NevilleThetaS NewPrimitiveStyle NExpectation Next NextPrime NHoldAll NHoldFirst NHoldRest NicholsGridLines NicholsPlot NIntegrate NMaximize NMaxValue NMinimize NMinValue NominalVariables NonAssociative NoncentralBetaDistribution NoncentralChiSquareDistribution NoncentralFRatioDistribution NoncentralStudentTDistribution NonCommutativeMultiply NonConstants None NonlinearModelFit NonlocalMeansFilter NonNegative NonPositive Nor NorlundB Norm Normal NormalDistribution NormalGrouping Normalize NormalizedSquaredEuclideanDistance NormalsFunction NormFunction Not NotCongruent NotCupCap NotDoubleVerticalBar Notebook NotebookApply NotebookAutoSave NotebookClose NotebookConvertSettings NotebookCreate NotebookCreateReturnObject NotebookDefault NotebookDelete NotebookDirectory NotebookDynamicExpression NotebookEvaluate NotebookEventActions NotebookFileName NotebookFind NotebookFindReturnObject NotebookGet NotebookGetLayoutInformationPacket NotebookGetMisspellingsPacket NotebookInformation NotebookInterfaceObject NotebookLocate NotebookObject NotebookOpen NotebookOpenReturnObject NotebookPath NotebookPrint NotebookPut NotebookPutReturnObject NotebookRead NotebookResetGeneratedCells Notebooks NotebookSave NotebookSaveAs NotebookSelection NotebookSetupLayoutInformationPacket NotebooksMenu NotebookWrite NotElement NotEqualTilde NotExists NotGreater NotGreaterEqual NotGreaterFullEqual NotGreaterGreater NotGreaterLess NotGreaterSlantEqual NotGreaterTilde NotHumpDownHump NotHumpEqual NotLeftTriangle NotLeftTriangleBar NotLeftTriangleEqual NotLess NotLessEqual NotLessFullEqual NotLessGreater NotLessLess NotLessSlantEqual NotLessTilde NotNestedGreaterGreater NotNestedLessLess NotPrecedes NotPrecedesEqual NotPrecedesSlantEqual NotPrecedesTilde NotReverseElement NotRightTriangle NotRightTriangleBar NotRightTriangleEqual NotSquareSubset NotSquareSubsetEqual NotSquareSuperset NotSquareSupersetEqual NotSubset NotSubsetEqual NotSucceeds NotSucceedsEqual NotSucceedsSlantEqual NotSucceedsTilde NotSuperset NotSupersetEqual NotTilde NotTildeEqual NotTildeFullEqual NotTildeTilde NotVerticalBar NProbability NProduct NProductFactors NRoots NSolve NSum NSumTerms Null NullRecords NullSpace NullWords Number NumberFieldClassNumber NumberFieldDiscriminant NumberFieldFundamentalUnits NumberFieldIntegralBasis NumberFieldNormRepresentatives NumberFieldRegulator NumberFieldRootsOfUnity NumberFieldSignature NumberForm NumberFormat NumberMarks NumberMultiplier NumberPadding NumberPoint NumberQ NumberSeparator ' +
          'NumberSigns NumberString Numerator NumericFunction NumericQ NuttallWindow NValues NyquistGridLines NyquistPlot ' +
          'O ObservabilityGramian ObservabilityMatrix ObservableDecomposition ObservableModelQ OddQ Off Offset OLEData On ONanGroupON OneIdentity Opacity Open OpenAppend Opener OpenerBox OpenerBoxOptions OpenerView OpenFunctionInspectorPacket Opening OpenRead OpenSpecialOptions OpenTemporary OpenWrite Operate OperatingSystem OptimumFlowData Optional OptionInspectorSettings OptionQ Options OptionsPacket OptionsPattern OptionValue OptionValueBox OptionValueBoxOptions Or Orange Order OrderDistribution OrderedQ Ordering Orderless OrnsteinUhlenbeckProcess Orthogonalize Out Outer OutputAutoOverwrite OutputControllabilityMatrix OutputControllableModelQ OutputForm OutputFormData OutputGrouping OutputMathEditExpression OutputNamePacket OutputResponse OutputSizeLimit OutputStream Over OverBar OverDot Overflow OverHat Overlaps Overlay OverlayBox OverlayBoxOptions Overscript OverscriptBox OverscriptBoxOptions OverTilde OverVector OwenT OwnValues ' +
          'PackingMethod PaddedForm Padding PadeApproximant PadLeft PadRight PageBreakAbove PageBreakBelow PageBreakWithin PageFooterLines PageFooters PageHeaderLines PageHeaders PageHeight PageRankCentrality PageWidth PairedBarChart PairedHistogram PairedSmoothHistogram PairedTTest PairedZTest PaletteNotebook PalettePath Pane PaneBox PaneBoxOptions Panel PanelBox PanelBoxOptions Paneled PaneSelector PaneSelectorBox PaneSelectorBoxOptions PaperWidth ParabolicCylinderD ParagraphIndent ParagraphSpacing ParallelArray ParallelCombine ParallelDo ParallelEvaluate Parallelization Parallelize ParallelMap ParallelNeeds ParallelProduct ParallelSubmit ParallelSum ParallelTable ParallelTry Parameter ParameterEstimator ParameterMixtureDistribution ParameterVariables ParametricFunction ParametricNDSolve ParametricNDSolveValue ParametricPlot ParametricPlot3D ParentConnect ParentDirectory ParentForm Parenthesize ParentList ParetoDistribution Part PartialCorrelationFunction PartialD ParticleData Partition PartitionsP PartitionsQ ParzenWindow PascalDistribution PassEventsDown PassEventsUp Paste PasteBoxFormInlineCells PasteButton Path PathGraph PathGraphQ Pattern PatternSequence PatternTest PauliMatrix PaulWavelet Pause PausedTime PDF PearsonChiSquareTest PearsonCorrelationTest PearsonDistribution PerformanceGoal PeriodicInterpolation Periodogram PeriodogramArray PermutationCycles PermutationCyclesQ PermutationGroup PermutationLength PermutationList PermutationListQ PermutationMax PermutationMin PermutationOrder PermutationPower PermutationProduct PermutationReplace Permutations PermutationSupport Permute PeronaMalikFilter Perpendicular PERTDistribution PetersenGraph PhaseMargins Pi Pick PIDData PIDDerivativeFilter PIDFeedforward PIDTune Piecewise PiecewiseExpand PieChart PieChart3D PillaiTrace PillaiTraceTest Pink Pivoting PixelConstrained PixelValue PixelValuePositions Placed Placeholder PlaceholderReplace Plain PlanarGraphQ Play PlayRange Plot Plot3D Plot3Matrix PlotDivision PlotJoined PlotLabel PlotLayout PlotLegends PlotMarkers PlotPoints PlotRange PlotRangeClipping PlotRangePadding PlotRegion PlotStyle Plus PlusMinus Pochhammer PodStates PodWidth Point Point3DBox PointBox PointFigureChart PointForm PointLegend PointSize PoissonConsulDistribution PoissonDistribution PoissonProcess PoissonWindow PolarAxes PolarAxesOrigin PolarGridLines PolarPlot PolarTicks PoleZeroMarkers PolyaAeppliDistribution PolyGamma Polygon Polygon3DBox Polygon3DBoxOptions PolygonBox PolygonBoxOptions PolygonHoleScale PolygonIntersections PolygonScale PolyhedronData PolyLog PolynomialExtendedGCD PolynomialForm PolynomialGCD PolynomialLCM PolynomialMod PolynomialQ PolynomialQuotient PolynomialQuotientRemainder PolynomialReduce PolynomialRemainder Polynomials PopupMenu PopupMenuBox PopupMenuBoxOptions PopupView PopupWindow Position Positive PositiveDefiniteMatrixQ PossibleZeroQ Postfix PostScript Power PowerDistribution PowerExpand PowerMod PowerModList ' +
          'PowerSpectralDensity PowersRepresentations PowerSymmetricPolynomial Precedence PrecedenceForm Precedes PrecedesEqual PrecedesSlantEqual PrecedesTilde Precision PrecisionGoal PreDecrement PredictionRoot PreemptProtect PreferencesPath Prefix PreIncrement Prepend PrependTo PreserveImageOptions Previous PriceGraphDistribution PrimaryPlaceholder Prime PrimeNu PrimeOmega PrimePi PrimePowerQ PrimeQ Primes PrimeZetaP PrimitiveRoot PrincipalComponents PrincipalValue Print PrintAction PrintForm PrintingCopies PrintingOptions PrintingPageRange PrintingStartingPageNumber PrintingStyleEnvironment PrintPrecision PrintTemporary Prism PrismBox PrismBoxOptions PrivateCellOptions PrivateEvaluationOptions PrivateFontOptions PrivateFrontEndOptions PrivateNotebookOptions PrivatePaths Probability ProbabilityDistribution ProbabilityPlot ProbabilityPr ProbabilityScalePlot ProbitModelFit ProcessEstimator ProcessParameterAssumptions ProcessParameterQ ProcessStateDomain ProcessTimeDomain Product ProductDistribution ProductLog ProgressIndicator ProgressIndicatorBox ProgressIndicatorBoxOptions Projection Prolog PromptForm Properties Property PropertyList PropertyValue Proportion Proportional Protect Protected ProteinData Pruning PseudoInverse Purple Put PutAppend Pyramid PyramidBox PyramidBoxOptions ' +
          'QBinomial QFactorial QGamma QHypergeometricPFQ QPochhammer QPolyGamma QRDecomposition QuadraticIrrationalQ Quantile QuantilePlot Quantity QuantityForm QuantityMagnitude QuantityQ QuantityUnit Quartics QuartileDeviation Quartiles QuartileSkewness QueueingNetworkProcess QueueingProcess QueueProperties Quiet Quit Quotient QuotientRemainder ' +
          'RadialityCentrality RadicalBox RadicalBoxOptions RadioButton RadioButtonBar RadioButtonBox RadioButtonBoxOptions Radon RamanujanTau RamanujanTauL RamanujanTauTheta RamanujanTauZ Random RandomChoice RandomComplex RandomFunction RandomGraph RandomImage RandomInteger RandomPermutation RandomPrime RandomReal RandomSample RandomSeed RandomVariate RandomWalkProcess Range RangeFilter RangeSpecification RankedMax RankedMin Raster Raster3D Raster3DBox Raster3DBoxOptions RasterArray RasterBox RasterBoxOptions Rasterize RasterSize Rational RationalFunctions Rationalize Rationals Ratios Raw RawArray RawBoxes RawData RawMedium RayleighDistribution Re Read ReadList ReadProtected Real RealBlockDiagonalForm RealDigits RealExponent Reals Reap Record RecordLists RecordSeparators Rectangle RectangleBox RectangleBoxOptions RectangleChart RectangleChart3D RecurrenceFilter RecurrenceTable RecurringDigitsForm Red Reduce RefBox ReferenceLineStyle ReferenceMarkers ReferenceMarkerStyle Refine ReflectionMatrix ReflectionTransform Refresh RefreshRate RegionBinarize RegionFunction RegionPlot RegionPlot3D RegularExpression Regularization Reinstall Release ReleaseHold ReliabilityDistribution ReliefImage ReliefPlot Remove RemoveAlphaChannel RemoveAsynchronousTask Removed RemoveInputStreamMethod RemoveOutputStreamMethod RemoveProperty RemoveScheduledTask RenameDirectory RenameFile RenderAll RenderingOptions RenewalProcess RenkoChart Repeated RepeatedNull RepeatedString Replace ReplaceAll ReplaceHeldPart ReplaceImageValue ReplaceList ReplacePart ReplacePixelValue ReplaceRepeated Resampling Rescale RescalingTransform ResetDirectory ResetMenusPacket ResetScheduledTask Residue Resolve Rest Resultant ResumePacket Return ReturnExpressionPacket ReturnInputFormPacket ReturnPacket ReturnTextPacket Reverse ReverseBiorthogonalSplineWavelet ReverseElement ReverseEquilibrium ReverseGraph ReverseUpEquilibrium RevolutionAxis RevolutionPlot3D RGBColor RiccatiSolve RiceDistribution RidgeFilter RiemannR RiemannSiegelTheta RiemannSiegelZ Riffle Right RightArrow RightArrowBar RightArrowLeftArrow RightCosetRepresentative RightDownTeeVector RightDownVector RightDownVectorBar RightTee RightTeeArrow RightTeeVector RightTriangle RightTriangleBar RightTriangleEqual RightUpDownVector RightUpTeeVector RightUpVector RightUpVectorBar RightVector RightVectorBar RiskAchievementImportance RiskReductionImportance RogersTanimotoDissimilarity Root RootApproximant RootIntervals RootLocusPlot RootMeanSquare RootOfUnityQ RootReduce Roots RootSum Rotate RotateLabel RotateLeft RotateRight RotationAction RotationBox RotationBoxOptions RotationMatrix RotationTransform Round RoundImplies RoundingRadius Row RowAlignments RowBackgrounds RowBox RowHeights RowLines RowMinHeight RowReduce RowsEqual RowSpacings RSolve RudvalisGroupRu Rule RuleCondition RuleDelayed RuleForm RulerUnits Run RunScheduledTask RunThrough RuntimeAttributes RuntimeOptions RussellRaoDissimilarity ' +
          'SameQ SameTest SampleDepth SampledSoundFunction SampledSoundList SampleRate SamplingPeriod SARIMAProcess SARMAProcess SatisfiabilityCount SatisfiabilityInstances SatisfiableQ Saturday Save Saveable SaveAutoDelete SaveDefinitions SawtoothWave Scale Scaled ScaleDivisions ScaledMousePosition ScaleOrigin ScalePadding ScaleRanges ScaleRangeStyle ScalingFunctions ScalingMatrix ScalingTransform Scan ScheduledTaskActiveQ ScheduledTaskData ScheduledTaskObject ScheduledTasks SchurDecomposition ScientificForm ScreenRectangle ScreenStyleEnvironment ScriptBaselineShifts ScriptLevel ScriptMinSize ScriptRules ScriptSizeMultipliers Scrollbars ScrollingOptions ScrollPosition Sec Sech SechDistribution SectionGrouping SectorChart SectorChart3D SectorOrigin SectorSpacing SeedRandom Select Selectable SelectComponents SelectedCells SelectedNotebook Selection SelectionAnimate SelectionCell SelectionCellCreateCell SelectionCellDefaultStyle SelectionCellParentStyle SelectionCreateCell SelectionDebuggerTag SelectionDuplicateCell SelectionEvaluate SelectionEvaluateCreateCell SelectionMove SelectionPlaceholder SelectionSetStyle SelectWithContents SelfLoops SelfLoopStyle SemialgebraicComponentInstances SendMail Sequence SequenceAlignment SequenceForm SequenceHold SequenceLimit Series SeriesCoefficient SeriesData SessionTime Set SetAccuracy SetAlphaChannel SetAttributes Setbacks SetBoxFormNamesPacket SetDelayed SetDirectory SetEnvironment SetEvaluationNotebook SetFileDate SetFileLoadingContext SetNotebookStatusLine SetOptions SetOptionsPacket SetPrecision SetProperty SetSelectedNotebook SetSharedFunction SetSharedVariable SetSpeechParametersPacket SetStreamPosition SetSystemOptions Setter SetterBar SetterBox SetterBoxOptions Setting SetValue Shading Shallow ShannonWavelet ShapiroWilkTest Share Sharpen ShearingMatrix ShearingTransform ShenCastanMatrix Short ShortDownArrow Shortest ShortestMatch ShortestPathFunction ShortLeftArrow ShortRightArrow ShortUpArrow Show ShowAutoStyles ShowCellBracket ShowCellLabel ShowCellTags ShowClosedCellArea ShowContents ShowControls ShowCursorTracker ShowGroupOpenCloseIcon ShowGroupOpener ShowInvisibleCharacters ShowPageBreaks ShowPredictiveInterface ShowSelection ShowShortBoxForm ShowSpecialCharacters ShowStringCharacters ShowSyntaxStyles ShrinkingDelay ShrinkWrapBoundingBox SiegelTheta SiegelTukeyTest Sign Signature SignedRankTest SignificanceLevel SignPadding SignTest SimilarityRules SimpleGraph SimpleGraphQ Simplify Sin Sinc SinghMaddalaDistribution SingleEvaluation SingleLetterItalics SingleLetterStyle SingularValueDecomposition SingularValueList SingularValuePlot SingularValues Sinh SinhIntegral SinIntegral SixJSymbol Skeleton SkeletonTransform SkellamDistribution Skewness SkewNormalDistribution Skip SliceDistribution Slider Slider2D Slider2DBox Slider2DBoxOptions SliderBox SliderBoxOptions SlideView Slot SlotSequence Small SmallCircle Smaller SmithDelayCompensator SmithWatermanSimilarity ' +
          'SmoothDensityHistogram SmoothHistogram SmoothHistogram3D SmoothKernelDistribution SocialMediaData Socket SokalSneathDissimilarity Solve SolveAlways SolveDelayed Sort SortBy Sound SoundAndGraphics SoundNote SoundVolume Sow Space SpaceForm Spacer Spacings Span SpanAdjustments SpanCharacterRounding SpanFromAbove SpanFromBoth SpanFromLeft SpanLineThickness SpanMaxSize SpanMinSize SpanningCharacters SpanSymmetric SparseArray SpatialGraphDistribution Speak SpeakTextPacket SpearmanRankTest SpearmanRho Spectrogram SpectrogramArray Specularity SpellingCorrection SpellingDictionaries SpellingDictionariesPath SpellingOptions SpellingSuggestionsPacket Sphere SphereBox SphericalBesselJ SphericalBesselY SphericalHankelH1 SphericalHankelH2 SphericalHarmonicY SphericalPlot3D SphericalRegion SpheroidalEigenvalue SpheroidalJoiningFactor SpheroidalPS SpheroidalPSPrime SpheroidalQS SpheroidalQSPrime SpheroidalRadialFactor SpheroidalS1 SpheroidalS1Prime SpheroidalS2 SpheroidalS2Prime Splice SplicedDistribution SplineClosed SplineDegree SplineKnots SplineWeights Split SplitBy SpokenString Sqrt SqrtBox SqrtBoxOptions Square SquaredEuclideanDistance SquareFreeQ SquareIntersection SquaresR SquareSubset SquareSubsetEqual SquareSuperset SquareSupersetEqual SquareUnion SquareWave StabilityMargins StabilityMarginsStyle StableDistribution Stack StackBegin StackComplete StackInhibit StandardDeviation StandardDeviationFilter StandardForm Standardize StandbyDistribution Star StarGraph StartAsynchronousTask StartingStepSize StartOfLine StartOfString StartScheduledTask StartupSound StateDimensions StateFeedbackGains StateOutputEstimator StateResponse StateSpaceModel StateSpaceRealization StateSpaceTransform StationaryDistribution StationaryWaveletPacketTransform StationaryWaveletTransform StatusArea StatusCentrality StepMonitor StieltjesGamma StirlingS1 StirlingS2 StopAsynchronousTask StopScheduledTask StrataVariables StratonovichProcess StreamColorFunction StreamColorFunctionScaling StreamDensityPlot StreamPlot StreamPoints StreamPosition Streams StreamScale StreamStyle String StringBreak StringByteCount StringCases StringCount StringDrop StringExpression StringForm StringFormat StringFreeQ StringInsert StringJoin StringLength StringMatchQ StringPosition StringQ StringReplace StringReplaceList StringReplacePart StringReverse StringRotateLeft StringRotateRight StringSkeleton StringSplit StringTake StringToStream StringTrim StripBoxes StripOnInput StripWrapperBoxes StrokeForm StructuralImportance StructuredArray StructuredSelection StruveH StruveL Stub StudentTDistribution Style StyleBox StyleBoxAutoDelete StyleBoxOptions StyleData StyleDefinitions StyleForm StyleKeyMapping StyleMenuListing StyleNameDialogSettings StyleNames StylePrint StyleSheetPath Subfactorial Subgraph SubMinus SubPlus SubresultantPolynomialRemainders ' +
          'SubresultantPolynomials Subresultants Subscript SubscriptBox SubscriptBoxOptions Subscripted Subset SubsetEqual Subsets SubStar Subsuperscript SubsuperscriptBox SubsuperscriptBoxOptions Subtract SubtractFrom SubValues Succeeds SucceedsEqual SucceedsSlantEqual SucceedsTilde SuchThat Sum SumConvergence Sunday SuperDagger SuperMinus SuperPlus Superscript SuperscriptBox SuperscriptBoxOptions Superset SupersetEqual SuperStar Surd SurdForm SurfaceColor SurfaceGraphics SurvivalDistribution SurvivalFunction SurvivalModel SurvivalModelFit SuspendPacket SuzukiDistribution SuzukiGroupSuz SwatchLegend Switch Symbol SymbolName SymletWavelet Symmetric SymmetricGroup SymmetricMatrixQ SymmetricPolynomial SymmetricReduction Symmetrize SymmetrizedArray SymmetrizedArrayRules SymmetrizedDependentComponents SymmetrizedIndependentComponents SymmetrizedReplacePart SynchronousInitialization SynchronousUpdating Syntax SyntaxForm SyntaxInformation SyntaxLength SyntaxPacket SyntaxQ SystemDialogInput SystemException SystemHelpPath SystemInformation SystemInformationData SystemOpen SystemOptions SystemsModelDelay SystemsModelDelayApproximate SystemsModelDelete SystemsModelDimensions SystemsModelExtract SystemsModelFeedbackConnect SystemsModelLabels SystemsModelOrder SystemsModelParallelConnect SystemsModelSeriesConnect SystemsModelStateFeedbackConnect SystemStub ' +
          'Tab TabFilling Table TableAlignments TableDepth TableDirections TableForm TableHeadings TableSpacing TableView TableViewBox TabSpacings TabView TabViewBox TabViewBoxOptions TagBox TagBoxNote TagBoxOptions TaggingRules TagSet TagSetDelayed TagStyle TagUnset Take TakeWhile Tally Tan Tanh TargetFunctions TargetUnits TautologyQ TelegraphProcess TemplateBox TemplateBoxOptions TemplateSlotSequence TemporalData Temporary TemporaryVariable TensorContract TensorDimensions TensorExpand TensorProduct TensorQ TensorRank TensorReduce TensorSymmetry TensorTranspose TensorWedge Tetrahedron TetrahedronBox TetrahedronBoxOptions TeXForm TeXSave Text Text3DBox Text3DBoxOptions TextAlignment TextBand TextBoundingBox TextBox TextCell TextClipboardType TextData TextForm TextJustification TextLine TextPacket TextParagraph TextRecognize TextRendering TextStyle Texture TextureCoordinateFunction TextureCoordinateScaling Therefore ThermometerGauge Thick Thickness Thin Thinning ThisLink ThompsonGroupTh Thread ThreeJSymbol Threshold Through Throw Thumbnail Thursday Ticks TicksStyle Tilde TildeEqual TildeFullEqual TildeTilde TimeConstrained TimeConstraint Times TimesBy TimeSeriesForecast TimeSeriesInvertibility TimeUsed TimeValue TimeZone Timing Tiny TitleGrouping TitsGroupT ToBoxes ToCharacterCode ToColor ToContinuousTimeModel ToDate ToDiscreteTimeModel ToeplitzMatrix ToExpression ToFileName Together Toggle ToggleFalse Toggler TogglerBar TogglerBox TogglerBoxOptions ToHeldExpression ToInvertibleTimeSeries TokenWords Tolerance ToLowerCase ToNumberField TooBig Tooltip TooltipBox TooltipBoxOptions TooltipDelay TooltipStyle Top TopHatTransform TopologicalSort ToRadicals ToRules ToString Total TotalHeight TotalVariationFilter TotalWidth TouchscreenAutoZoom TouchscreenControlPlacement ToUpperCase Tr Trace TraceAbove TraceAction TraceBackward TraceDepth TraceDialog TraceForward TraceInternal TraceLevel TraceOff TraceOn TraceOriginal TracePrint TraceScan TrackedSymbols TradingChart TraditionalForm TraditionalFunctionNotation TraditionalNotation TraditionalOrder TransferFunctionCancel TransferFunctionExpand TransferFunctionFactor TransferFunctionModel TransferFunctionPoles TransferFunctionTransform TransferFunctionZeros TransformationFunction TransformationFunctions TransformationMatrix TransformedDistribution TransformedField Translate TranslationTransform TransparentColor Transpose TreeForm TreeGraph TreeGraphQ TreePlot TrendStyle TriangleWave TriangularDistribution Trig TrigExpand TrigFactor TrigFactorList Trigger TrigReduce TrigToExp TrimmedMean True TrueQ TruncatedDistribution TsallisQExponentialDistribution TsallisQGaussianDistribution TTest Tube TubeBezierCurveBox TubeBezierCurveBoxOptions TubeBox TubeBSplineCurveBox TubeBSplineCurveBoxOptions Tuesday TukeyLambdaDistribution TukeyWindow Tuples TuranGraph TuringMachine ' +
          'Transparent ' +
          'UnateQ Uncompress Undefined UnderBar Underflow Underlined Underoverscript UnderoverscriptBox UnderoverscriptBoxOptions Underscript UnderscriptBox UnderscriptBoxOptions UndirectedEdge UndirectedGraph UndirectedGraphQ UndocumentedTestFEParserPacket UndocumentedTestGetSelectionPacket Unequal Unevaluated UniformDistribution UniformGraphDistribution UniformSumDistribution Uninstall Union UnionPlus Unique UnitBox UnitConvert UnitDimensions Unitize UnitRootTest UnitSimplify UnitStep UnitTriangle UnitVector Unprotect UnsameQ UnsavedVariables Unset UnsetShared UntrackedVariables Up UpArrow UpArrowBar UpArrowDownArrow Update UpdateDynamicObjects UpdateDynamicObjectsSynchronous UpdateInterval UpDownArrow UpEquilibrium UpperCaseQ UpperLeftArrow UpperRightArrow UpperTriangularize Upsample UpSet UpSetDelayed UpTee UpTeeArrow UpValues URL URLFetch URLFetchAsynchronous URLSave URLSaveAsynchronous UseGraphicsRange Using UsingFrontEnd ' +
          'V2Get ValidationLength Value ValueBox ValueBoxOptions ValueForm ValueQ ValuesData Variables Variance VarianceEquivalenceTest VarianceEstimatorFunction VarianceGammaDistribution VarianceTest VectorAngle VectorColorFunction VectorColorFunctionScaling VectorDensityPlot VectorGlyphData VectorPlot VectorPlot3D VectorPoints VectorQ Vectors VectorScale VectorStyle Vee Verbatim Verbose VerboseConvertToPostScriptPacket VerifyConvergence VerifySolutions VerifyTestAssumptions Version VersionNumber VertexAdd VertexCapacity VertexColors VertexComponent VertexConnectivity VertexCoordinateRules VertexCoordinates VertexCorrelationSimilarity VertexCosineSimilarity VertexCount VertexCoverQ VertexDataCoordinates VertexDegree VertexDelete VertexDiceSimilarity VertexEccentricity VertexInComponent VertexInDegree VertexIndex VertexJaccardSimilarity VertexLabeling VertexLabels VertexLabelStyle VertexList VertexNormals VertexOutComponent VertexOutDegree VertexQ VertexRenderingFunction VertexReplace VertexShape VertexShapeFunction VertexSize VertexStyle VertexTextureCoordinates VertexWeight Vertical VerticalBar VerticalForm VerticalGauge VerticalSeparator VerticalSlider VerticalTilde ViewAngle ViewCenter ViewMatrix ViewPoint ViewPointSelectorSettings ViewPort ViewRange ViewVector ViewVertical VirtualGroupData Visible VisibleCell VoigtDistribution VonMisesDistribution ' +
          'WaitAll WaitAsynchronousTask WaitNext WaitUntil WakebyDistribution WalleniusHypergeometricDistribution WaringYuleDistribution WatershedComponents WatsonUSquareTest WattsStrogatzGraphDistribution WaveletBestBasis WaveletFilterCoefficients WaveletImagePlot WaveletListPlot WaveletMapIndexed WaveletMatrixPlot WaveletPhi WaveletPsi WaveletScale WaveletScalogram WaveletThreshold WeaklyConnectedComponents WeaklyConnectedGraphQ WeakStationarity WeatherData WeberE Wedge Wednesday WeibullDistribution WeierstrassHalfPeriods WeierstrassInvariants WeierstrassP WeierstrassPPrime WeierstrassSigma WeierstrassZeta WeightedAdjacencyGraph WeightedAdjacencyMatrix WeightedData WeightedGraphQ Weights WelchWindow WheelGraph WhenEvent Which While White Whitespace WhitespaceCharacter WhittakerM WhittakerW WienerFilter WienerProcess WignerD WignerSemicircleDistribution WilksW WilksWTest WindowClickSelect WindowElements WindowFloating WindowFrame WindowFrameElements WindowMargins WindowMovable WindowOpacity WindowSelected WindowSize WindowStatusArea WindowTitle WindowToolbars WindowWidth With WolframAlpha WolframAlphaDate WolframAlphaQuantity WolframAlphaResult Word WordBoundary WordCharacter WordData WordSearch WordSeparators WorkingPrecision Write WriteString Wronskian ' +
          'XMLElement XMLObject Xnor Xor ' +
          'Yellow YuleDissimilarity ' +
          'ZernikeR ZeroSymmetric ZeroTest ZeroWidthTimes Zeta ZetaZero ZipfDistribution ZTest ZTransform ' +
          '$Aborted $ActivationGroupID $ActivationKey $ActivationUserRegistered $AddOnsDirectory $AssertFunction $Assumptions $AsynchronousTask $BaseDirectory $BatchInput $BatchOutput $BoxForms $ByteOrdering $Canceled $CharacterEncoding $CharacterEncodings $CommandLine $CompilationTarget $ConditionHold $ConfiguredKernels $Context $ContextPath $ControlActiveSetting $CreationDate $CurrentLink $DateStringFormat $DefaultFont $DefaultFrontEnd $DefaultImagingDevice $DefaultPath $Display $DisplayFunction $DistributedContexts $DynamicEvaluation $Echo $Epilog $ExportFormats $Failed $FinancialDataSource $FormatType $FrontEnd $FrontEndSession $GeoLocation $HistoryLength $HomeDirectory $HTTPCookies $IgnoreEOF $ImagingDevices $ImportFormats $InitialDirectory $Input $InputFileName $InputStreamMethods $Inspector $InstallationDate $InstallationDirectory $InterfaceEnvironment $IterationLimit $KernelCount $KernelID $Language $LaunchDirectory $LibraryPath $LicenseExpirationDate $LicenseID $LicenseProcesses $LicenseServer $LicenseSubprocesses $LicenseType $Line $Linked $LinkSupported $LoadedFiles $MachineAddresses $MachineDomain $MachineDomains $MachineEpsilon $MachineID $MachineName $MachinePrecision $MachineType $MaxExtraPrecision $MaxLicenseProcesses $MaxLicenseSubprocesses $MaxMachineNumber $MaxNumber $MaxPiecewiseCases $MaxPrecision $MaxRootDegree $MessageGroups $MessageList $MessagePrePrint $Messages $MinMachineNumber $MinNumber $MinorReleaseNumber $MinPrecision $ModuleNumber $NetworkLicense $NewMessage $NewSymbol $Notebooks $NumberMarks $Off $OperatingSystem $Output $OutputForms $OutputSizeLimit $OutputStreamMethods $Packages $ParentLink $ParentProcessID $PasswordFile $PatchLevelID $Path $PathnameSeparator $PerformanceGoal $PipeSupported $Post $Pre $PreferencesDirectory $PrePrint $PreRead $PrintForms $PrintLiteral $ProcessID $ProcessorCount $ProcessorType $ProductInformation $ProgramName $RandomState $RecursionLimit $ReleaseNumber $RootDirectory $ScheduledTask $ScriptCommandLine $SessionID $SetParentLink $SharedFunctions $SharedVariables $SoundDisplay $SoundDisplayFunction $SuppressInputFormHeads $SynchronousEvaluation $SyntaxHandler $System $SystemCharacterEncoding $SystemID $SystemWordLength $TemporaryDirectory $TemporaryPrefix $TextStyle $TimedOut $TimeUnit $TimeZone $TopDirectory $TraceOff $TraceOn $TracePattern $TracePostAction $TracePreAction $Urgent $UserAddOnsDirectory $UserBaseDirectory $UserDocumentsDirectory $UserName $Version $VersionNumber',
        contains: [
          {
            className: 'comment',
            begin: /\(\*/, end: /\*\)/
          },
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE,
          hljs.C_NUMBER_MODE,
          {
            begin: /\{/, end: /\}/,
            illegal: /:/
          }
        ]
      };
    };
    
    /***/ }),
    /* 502 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var COMMON_CONTAINS = [
        hljs.C_NUMBER_MODE,
        {
          className: 'string',
          begin: '\'', end: '\'',
          contains: [hljs.BACKSLASH_ESCAPE, {begin: '\'\''}]
        }
      ];
      var TRANSPOSE = {
        relevance: 0,
        contains: [
          {
            begin: /'['\.]*/
          }
        ]
      };
    
      return {
        keywords: {
          keyword:
            'break case catch classdef continue else elseif end enumerated events for function ' +
            'global if methods otherwise parfor persistent properties return spmd switch try while',
          built_in:
            'sin sind sinh asin asind asinh cos cosd cosh acos acosd acosh tan tand tanh atan ' +
            'atand atan2 atanh sec secd sech asec asecd asech csc cscd csch acsc acscd acsch cot ' +
            'cotd coth acot acotd acoth hypot exp expm1 log log1p log10 log2 pow2 realpow reallog ' +
            'realsqrt sqrt nthroot nextpow2 abs angle complex conj imag real unwrap isreal ' +
            'cplxpair fix floor ceil round mod rem sign airy besselj bessely besselh besseli ' +
            'besselk beta betainc betaln ellipj ellipke erf erfc erfcx erfinv expint gamma ' +
            'gammainc gammaln psi legendre cross dot factor isprime primes gcd lcm rat rats perms ' +
            'nchoosek factorial cart2sph cart2pol pol2cart sph2cart hsv2rgb rgb2hsv zeros ones ' +
            'eye repmat rand randn linspace logspace freqspace meshgrid accumarray size length ' +
            'ndims numel disp isempty isequal isequalwithequalnans cat reshape diag blkdiag tril ' +
            'triu fliplr flipud flipdim rot90 find sub2ind ind2sub bsxfun ndgrid permute ipermute ' +
            'shiftdim circshift squeeze isscalar isvector ans eps realmax realmin pi i inf nan ' +
            'isnan isinf isfinite j why compan gallery hadamard hankel hilb invhilb magic pascal ' +
            'rosser toeplitz vander wilkinson'
        },
        illegal: '(//|"|#|/\\*|\\s+/\\w+)',
        contains: [
          {
            className: 'function',
            beginKeywords: 'function', end: '$',
            contains: [
              hljs.UNDERSCORE_TITLE_MODE,
              {
                className: 'params',
                variants: [
                  {begin: '\\(', end: '\\)'},
                  {begin: '\\[', end: '\\]'}
                ]
              }
            ]
          },
          {
            begin: /[a-zA-Z_][a-zA-Z_0-9]*'['\.]*/,
            returnBegin: true,
            relevance: 0,
            contains: [
              {begin: /[a-zA-Z_][a-zA-Z_0-9]*/, relevance: 0},
              TRANSPOSE.contains[0]
            ]
          },
          {
            begin: '\\[', end: '\\]',
            contains: COMMON_CONTAINS,
            relevance: 0,
            starts: TRANSPOSE
          },
          {
            begin: '\\{', end: /}/,
            contains: COMMON_CONTAINS,
            relevance: 0,
            starts: TRANSPOSE
          },
          {
            // transpose operators at the end of a function call
            begin: /\)/,
            relevance: 0,
            starts: TRANSPOSE
          },
          hljs.COMMENT('^\\s*\\%\\{\\s*$', '^\\s*\\%\\}\\s*$'),
          hljs.COMMENT('\\%', '$')
        ].concat(COMMON_CONTAINS)
      };
    };
    
    /***/ }),
    /* 503 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var KEYWORDS = 'if then else elseif for thru do while unless step in and or not';
      var LITERALS = 'true false unknown inf minf ind und %e %i %pi %phi %gamma';
      var BUILTIN_FUNCTIONS =
            ' abasep abs absint absolute_real_time acos acosh acot acoth acsc acsch activate'
          + ' addcol add_edge add_edges addmatrices addrow add_vertex add_vertices adjacency_matrix'
          + ' adjoin adjoint af agd airy airy_ai airy_bi airy_dai airy_dbi algsys alg_type'
          + ' alias allroots alphacharp alphanumericp amortization %and annuity_fv'
          + ' annuity_pv antid antidiff AntiDifference append appendfile apply apply1 apply2'
          + ' applyb1 apropos args arit_amortization arithmetic arithsum array arrayapply'
          + ' arrayinfo arraymake arraysetapply ascii asec asech asin asinh askinteger'
          + ' asksign assoc assoc_legendre_p assoc_legendre_q assume assume_external_byte_order'
          + ' asympa at atan atan2 atanh atensimp atom atvalue augcoefmatrix augmented_lagrangian_method'
          + ' av average_degree backtrace bars barsplot barsplot_description base64 base64_decode'
          + ' bashindices batch batchload bc2 bdvac belln benefit_cost bern bernpoly bernstein_approx'
          + ' bernstein_expand bernstein_poly bessel bessel_i bessel_j bessel_k bessel_simplify'
          + ' bessel_y beta beta_incomplete beta_incomplete_generalized beta_incomplete_regularized'
          + ' bezout bfallroots bffac bf_find_root bf_fmin_cobyla bfhzeta bfloat bfloatp'
          + ' bfpsi bfpsi0 bfzeta biconnected_components bimetric binomial bipartition'
          + ' block blockmatrixp bode_gain bode_phase bothcoef box boxplot boxplot_description'
          + ' break bug_report build_info|10 buildq build_sample burn cabs canform canten'
          + ' cardinality carg cartan cartesian_product catch cauchy_matrix cbffac cdf_bernoulli'
          + ' cdf_beta cdf_binomial cdf_cauchy cdf_chi2 cdf_continuous_uniform cdf_discrete_uniform'
          + ' cdf_exp cdf_f cdf_gamma cdf_general_finite_discrete cdf_geometric cdf_gumbel'
          + ' cdf_hypergeometric cdf_laplace cdf_logistic cdf_lognormal cdf_negative_binomial'
          + ' cdf_noncentral_chi2 cdf_noncentral_student_t cdf_normal cdf_pareto cdf_poisson'
          + ' cdf_rank_sum cdf_rayleigh cdf_signed_rank cdf_student_t cdf_weibull cdisplay'
          + ' ceiling central_moment cequal cequalignore cf cfdisrep cfexpand cgeodesic'
          + ' cgreaterp cgreaterpignore changename changevar chaosgame charat charfun charfun2'
          + ' charlist charp charpoly chdir chebyshev_t chebyshev_u checkdiv check_overlaps'
          + ' chinese cholesky christof chromatic_index chromatic_number cint circulant_graph'
          + ' clear_edge_weight clear_rules clear_vertex_label clebsch_gordan clebsch_graph'
          + ' clessp clesspignore close closefile cmetric coeff coefmatrix cograd col collapse'
          + ' collectterms columnop columnspace columnswap columnvector combination combine'
          + ' comp2pui compare compfile compile compile_file complement_graph complete_bipartite_graph'
          + ' complete_graph complex_number_p components compose_functions concan concat'
          + ' conjugate conmetderiv connected_components connect_vertices cons constant'
          + ' constantp constituent constvalue cont2part content continuous_freq contortion'
          + ' contour_plot contract contract_edge contragrad contrib_ode convert coord'
          + ' copy copy_file copy_graph copylist copymatrix cor cos cosh cot coth cov cov1'
          + ' covdiff covect covers crc24sum create_graph create_list csc csch csetup cspline'
          + ' ctaylor ct_coordsys ctransform ctranspose cube_graph cuboctahedron_graph'
          + ' cunlisp cv cycle_digraph cycle_graph cylindrical days360 dblint deactivate'
          + ' declare declare_constvalue declare_dimensions declare_fundamental_dimensions'
          + ' declare_fundamental_units declare_qty declare_translated declare_unit_conversion'
          + ' declare_units declare_weights decsym defcon define define_alt_display define_variable'
          + ' defint defmatch defrule defstruct deftaylor degree_sequence del delete deleten'
          + ' delta demo demoivre denom depends derivdegree derivlist describe desolve'
          + ' determinant dfloat dgauss_a dgauss_b dgeev dgemm dgeqrf dgesv dgesvd diag'
          + ' diagmatrix diag_matrix diagmatrixp diameter diff digitcharp dimacs_export'
          + ' dimacs_import dimension dimensionless dimensions dimensions_as_list direct'
          + ' directory discrete_freq disjoin disjointp disolate disp dispcon dispform'
          + ' dispfun dispJordan display disprule dispterms distrib divide divisors divsum'
          + ' dkummer_m dkummer_u dlange dodecahedron_graph dotproduct dotsimp dpart'
          + ' draw draw2d draw3d drawdf draw_file draw_graph dscalar echelon edge_coloring'
          + ' edge_connectivity edges eigens_by_jacobi eigenvalues eigenvectors eighth'
          + ' einstein eivals eivects elapsed_real_time elapsed_run_time ele2comp ele2polynome'
          + ' ele2pui elem elementp elevation_grid elim elim_allbut eliminate eliminate_using'
          + ' ellipse elliptic_e elliptic_ec elliptic_eu elliptic_f elliptic_kc elliptic_pi'
          + ' ematrix empty_graph emptyp endcons entermatrix entertensor entier equal equalp'
          + ' equiv_classes erf erfc erf_generalized erfi errcatch error errormsg errors'
          + ' euler ev eval_string evenp every evolution evolution2d evundiff example exp'
          + ' expand expandwrt expandwrt_factored expint expintegral_chi expintegral_ci'
          + ' expintegral_e expintegral_e1 expintegral_ei expintegral_e_simplify expintegral_li'
          + ' expintegral_shi expintegral_si explicit explose exponentialize express expt'
          + ' exsec extdiff extract_linear_equations extremal_subset ezgcd %f f90 facsum'
          + ' factcomb factor factorfacsum factorial factorout factorsum facts fast_central_elements'
          + ' fast_linsolve fasttimes featurep fernfale fft fib fibtophi fifth filename_merge'
          + ' file_search file_type fillarray findde find_root find_root_abs find_root_error'
          + ' find_root_rel first fix flatten flength float floatnump floor flower_snark'
          + ' flush flush1deriv flushd flushnd flush_output fmin_cobyla forget fortran'
          + ' fourcos fourexpand fourier fourier_elim fourint fourintcos fourintsin foursimp'
          + ' foursin fourth fposition frame_bracket freeof freshline fresnel_c fresnel_s'
          + ' from_adjacency_matrix frucht_graph full_listify fullmap fullmapl fullratsimp'
          + ' fullratsubst fullsetify funcsolve fundamental_dimensions fundamental_units'
          + ' fundef funmake funp fv g0 g1 gamma gamma_greek gamma_incomplete gamma_incomplete_generalized'
          + ' gamma_incomplete_regularized gauss gauss_a gauss_b gaussprob gcd gcdex gcdivide'
          + ' gcfac gcfactor gd generalized_lambert_w genfact gen_laguerre genmatrix gensym'
          + ' geo_amortization geo_annuity_fv geo_annuity_pv geomap geometric geometric_mean'
          + ' geosum get getcurrentdirectory get_edge_weight getenv get_lu_factors get_output_stream_string'
          + ' get_pixel get_plot_option get_tex_environment get_tex_environment_default'
          + ' get_vertex_label gfactor gfactorsum ggf girth global_variances gn gnuplot_close'
          + ' gnuplot_replot gnuplot_reset gnuplot_restart gnuplot_start go Gosper GosperSum'
          + ' gr2d gr3d gradef gramschmidt graph6_decode graph6_encode graph6_export graph6_import'
          + ' graph_center graph_charpoly graph_eigenvalues graph_flow graph_order graph_periphery'
          + ' graph_product graph_size graph_union great_rhombicosidodecahedron_graph great_rhombicuboctahedron_graph'
          + ' grid_graph grind grobner_basis grotzch_graph hamilton_cycle hamilton_path'
          + ' hankel hankel_1 hankel_2 harmonic harmonic_mean hav heawood_graph hermite'
          + ' hessian hgfred hilbertmap hilbert_matrix hipow histogram histogram_description'
          + ' hodge horner hypergeometric i0 i1 %ibes ic1 ic2 ic_convert ichr1 ichr2 icosahedron_graph'
          + ' icosidodecahedron_graph icurvature ident identfor identity idiff idim idummy'
          + ' ieqn %if ifactors iframes ifs igcdex igeodesic_coords ilt image imagpart'
          + ' imetric implicit implicit_derivative implicit_plot indexed_tensor indices'
          + ' induced_subgraph inferencep inference_result infix info_display init_atensor'
          + ' init_ctensor in_neighbors innerproduct inpart inprod inrt integerp integer_partitions'
          + ' integrate intersect intersection intervalp intopois intosum invariant1 invariant2'
          + ' inverse_fft inverse_jacobi_cd inverse_jacobi_cn inverse_jacobi_cs inverse_jacobi_dc'
          + ' inverse_jacobi_dn inverse_jacobi_ds inverse_jacobi_nc inverse_jacobi_nd inverse_jacobi_ns'
          + ' inverse_jacobi_sc inverse_jacobi_sd inverse_jacobi_sn invert invert_by_adjoint'
          + ' invert_by_lu inv_mod irr is is_biconnected is_bipartite is_connected is_digraph'
          + ' is_edge_in_graph is_graph is_graph_or_digraph ishow is_isomorphic isolate'
          + ' isomorphism is_planar isqrt isreal_p is_sconnected is_tree is_vertex_in_graph'
          + ' items_inference %j j0 j1 jacobi jacobian jacobi_cd jacobi_cn jacobi_cs jacobi_dc'
          + ' jacobi_dn jacobi_ds jacobi_nc jacobi_nd jacobi_ns jacobi_p jacobi_sc jacobi_sd'
          + ' jacobi_sn JF jn join jordan julia julia_set julia_sin %k kdels kdelta kill'
          + ' killcontext kostka kron_delta kronecker_product kummer_m kummer_u kurtosis'
          + ' kurtosis_bernoulli kurtosis_beta kurtosis_binomial kurtosis_chi2 kurtosis_continuous_uniform'
          + ' kurtosis_discrete_uniform kurtosis_exp kurtosis_f kurtosis_gamma kurtosis_general_finite_discrete'
          + ' kurtosis_geometric kurtosis_gumbel kurtosis_hypergeometric kurtosis_laplace'
          + ' kurtosis_logistic kurtosis_lognormal kurtosis_negative_binomial kurtosis_noncentral_chi2'
          + ' kurtosis_noncentral_student_t kurtosis_normal kurtosis_pareto kurtosis_poisson'
          + ' kurtosis_rayleigh kurtosis_student_t kurtosis_weibull label labels lagrange'
          + ' laguerre lambda lambert_w laplace laplacian_matrix last lbfgs lc2kdt lcharp'
          + ' lc_l lcm lc_u ldefint ldisp ldisplay legendre_p legendre_q leinstein length'
          + ' let letrules letsimp levi_civita lfreeof lgtreillis lhs li liediff limit'
          + ' Lindstedt linear linearinterpol linear_program linear_regression line_graph'
          + ' linsolve listarray list_correlations listify list_matrix_entries list_nc_monomials'
          + ' listoftens listofvars listp lmax lmin load loadfile local locate_matrix_entry'
          + ' log logcontract log_gamma lopow lorentz_gauge lowercasep lpart lratsubst'
          + ' lreduce lriemann lsquares_estimates lsquares_estimates_approximate lsquares_estimates_exact'
          + ' lsquares_mse lsquares_residual_mse lsquares_residuals lsum ltreillis lu_backsub'
          + ' lucas lu_factor %m macroexpand macroexpand1 make_array makebox makefact makegamma'
          + ' make_graph make_level_picture makelist makeOrders make_poly_continent make_poly_country'
          + ' make_polygon make_random_state make_rgb_picture makeset make_string_input_stream'
          + ' make_string_output_stream make_transform mandelbrot mandelbrot_set map mapatom'
          + ' maplist matchdeclare matchfix mat_cond mat_fullunblocker mat_function mathml_display'
          + ' mat_norm matrix matrixmap matrixp matrix_size mattrace mat_trace mat_unblocker'
          + ' max max_clique max_degree max_flow maximize_lp max_independent_set max_matching'
          + ' maybe md5sum mean mean_bernoulli mean_beta mean_binomial mean_chi2 mean_continuous_uniform'
          + ' mean_deviation mean_discrete_uniform mean_exp mean_f mean_gamma mean_general_finite_discrete'
          + ' mean_geometric mean_gumbel mean_hypergeometric mean_laplace mean_logistic'
          + ' mean_lognormal mean_negative_binomial mean_noncentral_chi2 mean_noncentral_student_t'
          + ' mean_normal mean_pareto mean_poisson mean_rayleigh mean_student_t mean_weibull'
          + ' median median_deviation member mesh metricexpandall mgf1_sha1 min min_degree'
          + ' min_edge_cut minfactorial minimalPoly minimize_lp minimum_spanning_tree minor'
          + ' minpack_lsquares minpack_solve min_vertex_cover min_vertex_cut mkdir mnewton'
          + ' mod mode_declare mode_identity ModeMatrix moebius mon2schur mono monomial_dimensions'
          + ' multibernstein_poly multi_display_for_texinfo multi_elem multinomial multinomial_coeff'
          + ' multi_orbit multiplot_mode multi_pui multsym multthru mycielski_graph nary'
          + ' natural_unit nc_degree ncexpt ncharpoly negative_picture neighbors new newcontext'
          + ' newdet new_graph newline newton new_variable next_prime nicedummies niceindices'
          + ' ninth nofix nonarray noncentral_moment nonmetricity nonnegintegerp nonscalarp'
          + ' nonzeroandfreeof notequal nounify nptetrad npv nroots nterms ntermst'
          + ' nthroot nullity nullspace num numbered_boundaries numberp number_to_octets'
          + ' num_distinct_partitions numerval numfactor num_partitions nusum nzeta nzetai'
          + ' nzetar octets_to_number octets_to_oid odd_girth oddp ode2 ode_check odelin'
          + ' oid_to_octets op opena opena_binary openr openr_binary openw openw_binary'
          + ' operatorp opsubst optimize %or orbit orbits ordergreat ordergreatp orderless'
          + ' orderlessp orthogonal_complement orthopoly_recur orthopoly_weight outermap'
          + ' out_neighbors outofpois pade parabolic_cylinder_d parametric parametric_surface'
          + ' parg parGosper parse_string parse_timedate part part2cont partfrac partition'
          + ' partition_set partpol path_digraph path_graph pathname_directory pathname_name'
          + ' pathname_type pdf_bernoulli pdf_beta pdf_binomial pdf_cauchy pdf_chi2 pdf_continuous_uniform'
          + ' pdf_discrete_uniform pdf_exp pdf_f pdf_gamma pdf_general_finite_discrete'
          + ' pdf_geometric pdf_gumbel pdf_hypergeometric pdf_laplace pdf_logistic pdf_lognormal'
          + ' pdf_negative_binomial pdf_noncentral_chi2 pdf_noncentral_student_t pdf_normal'
          + ' pdf_pareto pdf_poisson pdf_rank_sum pdf_rayleigh pdf_signed_rank pdf_student_t'
          + ' pdf_weibull pearson_skewness permanent permut permutation permutations petersen_graph'
          + ' petrov pickapart picture_equalp picturep piechart piechart_description planar_embedding'
          + ' playback plog plot2d plot3d plotdf ploteq plsquares pochhammer points poisdiff'
          + ' poisexpt poisint poismap poisplus poissimp poissubst poistimes poistrim polar'
          + ' polarform polartorect polar_to_xy poly_add poly_buchberger poly_buchberger_criterion'
          + ' poly_colon_ideal poly_content polydecomp poly_depends_p poly_elimination_ideal'
          + ' poly_exact_divide poly_expand poly_expt poly_gcd polygon poly_grobner poly_grobner_equal'
          + ' poly_grobner_member poly_grobner_subsetp poly_ideal_intersection poly_ideal_polysaturation'
          + ' poly_ideal_polysaturation1 poly_ideal_saturation poly_ideal_saturation1 poly_lcm'
          + ' poly_minimization polymod poly_multiply polynome2ele polynomialp poly_normal_form'
          + ' poly_normalize poly_normalize_list poly_polysaturation_extension poly_primitive_part'
          + ' poly_pseudo_divide poly_reduced_grobner poly_reduction poly_saturation_extension'
          + ' poly_s_polynomial poly_subtract polytocompanion pop postfix potential power_mod'
          + ' powerseries powerset prefix prev_prime primep primes principal_components'
          + ' print printf printfile print_graph printpois printprops prodrac product properties'
          + ' propvars psi psubst ptriangularize pui pui2comp pui2ele pui2polynome pui_direct'
          + ' puireduc push put pv qput qrange qty quad_control quad_qag quad_qagi quad_qagp'
          + ' quad_qags quad_qawc quad_qawf quad_qawo quad_qaws quadrilateral quantile'
          + ' quantile_bernoulli quantile_beta quantile_binomial quantile_cauchy quantile_chi2'
          + ' quantile_continuous_uniform quantile_discrete_uniform quantile_exp quantile_f'
          + ' quantile_gamma quantile_general_finite_discrete quantile_geometric quantile_gumbel'
          + ' quantile_hypergeometric quantile_laplace quantile_logistic quantile_lognormal'
          + ' quantile_negative_binomial quantile_noncentral_chi2 quantile_noncentral_student_t'
          + ' quantile_normal quantile_pareto quantile_poisson quantile_rayleigh quantile_student_t'
          + ' quantile_weibull quartile_skewness quit qunit quotient racah_v racah_w radcan'
          + ' radius random random_bernoulli random_beta random_binomial random_bipartite_graph'
          + ' random_cauchy random_chi2 random_continuous_uniform random_digraph random_discrete_uniform'
          + ' random_exp random_f random_gamma random_general_finite_discrete random_geometric'
          + ' random_graph random_graph1 random_gumbel random_hypergeometric random_laplace'
          + ' random_logistic random_lognormal random_negative_binomial random_network'
          + ' random_noncentral_chi2 random_noncentral_student_t random_normal random_pareto'
          + ' random_permutation random_poisson random_rayleigh random_regular_graph random_student_t'
          + ' random_tournament random_tree random_weibull range rank rat ratcoef ratdenom'
          + ' ratdiff ratdisrep ratexpand ratinterpol rational rationalize ratnumer ratnump'
          + ' ratp ratsimp ratsubst ratvars ratweight read read_array read_binary_array'
          + ' read_binary_list read_binary_matrix readbyte readchar read_hashed_array readline'
          + ' read_list read_matrix read_nested_list readonly read_xpm real_imagpart_to_conjugate'
          + ' realpart realroots rearray rectangle rectform rectform_log_if_constant recttopolar'
          + ' rediff reduce_consts reduce_order region region_boundaries region_boundaries_plus'
          + ' rem remainder remarray rembox remcomps remcon remcoord remfun remfunction'
          + ' remlet remove remove_constvalue remove_dimensions remove_edge remove_fundamental_dimensions'
          + ' remove_fundamental_units remove_plot_option remove_vertex rempart remrule'
          + ' remsym remvalue rename rename_file reset reset_displays residue resolvante'
          + ' resolvante_alternee1 resolvante_bipartite resolvante_diedrale resolvante_klein'
          + ' resolvante_klein3 resolvante_produit_sym resolvante_unitaire resolvante_vierer'
          + ' rest resultant return reveal reverse revert revert2 rgb2level rhs ricci riemann'
          + ' rinvariant risch rk rmdir rncombine romberg room rootscontract round row'
          + ' rowop rowswap rreduce run_testsuite %s save saving scalarp scaled_bessel_i'
          + ' scaled_bessel_i0 scaled_bessel_i1 scalefactors scanmap scatterplot scatterplot_description'
          + ' scene schur2comp sconcat scopy scsimp scurvature sdowncase sec sech second'
          + ' sequal sequalignore set_alt_display setdifference set_draw_defaults set_edge_weight'
          + ' setelmx setequalp setify setp set_partitions set_plot_option set_prompt set_random_state'
          + ' set_tex_environment set_tex_environment_default setunits setup_autoload set_up_dot_simplifications'
          + ' set_vertex_label seventh sexplode sf sha1sum sha256sum shortest_path shortest_weighted_path'
          + ' show showcomps showratvars sierpinskiale sierpinskimap sign signum similaritytransform'
          + ' simp_inequality simplify_sum simplode simpmetderiv simtran sin sinh sinsert'
          + ' sinvertcase sixth skewness skewness_bernoulli skewness_beta skewness_binomial'
          + ' skewness_chi2 skewness_continuous_uniform skewness_discrete_uniform skewness_exp'
          + ' skewness_f skewness_gamma skewness_general_finite_discrete skewness_geometric'
          + ' skewness_gumbel skewness_hypergeometric skewness_laplace skewness_logistic'
          + ' skewness_lognormal skewness_negative_binomial skewness_noncentral_chi2 skewness_noncentral_student_t'
          + ' skewness_normal skewness_pareto skewness_poisson skewness_rayleigh skewness_student_t'
          + ' skewness_weibull slength smake small_rhombicosidodecahedron_graph small_rhombicuboctahedron_graph'
          + ' smax smin smismatch snowmap snub_cube_graph snub_dodecahedron_graph solve'
          + ' solve_rec solve_rec_rat some somrac sort sparse6_decode sparse6_encode sparse6_export'
          + ' sparse6_import specint spherical spherical_bessel_j spherical_bessel_y spherical_hankel1'
          + ' spherical_hankel2 spherical_harmonic spherical_to_xyz splice split sposition'
          + ' sprint sqfr sqrt sqrtdenest sremove sremovefirst sreverse ssearch ssort sstatus'
          + ' ssubst ssubstfirst staircase standardize standardize_inverse_trig starplot'
          + ' starplot_description status std std1 std_bernoulli std_beta std_binomial'
          + ' std_chi2 std_continuous_uniform std_discrete_uniform std_exp std_f std_gamma'
          + ' std_general_finite_discrete std_geometric std_gumbel std_hypergeometric std_laplace'
          + ' std_logistic std_lognormal std_negative_binomial std_noncentral_chi2 std_noncentral_student_t'
          + ' std_normal std_pareto std_poisson std_rayleigh std_student_t std_weibull'
          + ' stemplot stirling stirling1 stirling2 strim striml strimr string stringout'
          + ' stringp strong_components struve_h struve_l sublis sublist sublist_indices'
          + ' submatrix subsample subset subsetp subst substinpart subst_parallel substpart'
          + ' substring subvar subvarp sum sumcontract summand_to_rec supcase supcontext'
          + ' symbolp symmdifference symmetricp system take_channel take_inference tan'
          + ' tanh taylor taylorinfo taylorp taylor_simplifier taytorat tcl_output tcontract'
          + ' tellrat tellsimp tellsimpafter tentex tenth test_mean test_means_difference'
          + ' test_normality test_proportion test_proportions_difference test_rank_sum'
          + ' test_sign test_signed_rank test_variance test_variance_ratio tex tex1 tex_display'
          + ' texput %th third throw time timedate timer timer_info tldefint tlimit todd_coxeter'
          + ' toeplitz tokens to_lisp topological_sort to_poly to_poly_solve totaldisrep'
          + ' totalfourier totient tpartpol trace tracematrix trace_options transform_sample'
          + ' translate translate_file transpose treefale tree_reduce treillis treinat'
          + ' triangle triangularize trigexpand trigrat trigreduce trigsimp trunc truncate'
          + ' truncated_cube_graph truncated_dodecahedron_graph truncated_icosahedron_graph'
          + ' truncated_tetrahedron_graph tr_warnings_get tube tutte_graph ueivects uforget'
          + ' ultraspherical underlying_graph undiff union unique uniteigenvectors unitp'
          + ' units unit_step unitvector unorder unsum untellrat untimer'
          + ' untrace uppercasep uricci uriemann uvect vandermonde_matrix var var1 var_bernoulli'
          + ' var_beta var_binomial var_chi2 var_continuous_uniform var_discrete_uniform'
          + ' var_exp var_f var_gamma var_general_finite_discrete var_geometric var_gumbel'
          + ' var_hypergeometric var_laplace var_logistic var_lognormal var_negative_binomial'
          + ' var_noncentral_chi2 var_noncentral_student_t var_normal var_pareto var_poisson'
          + ' var_rayleigh var_student_t var_weibull vector vectorpotential vectorsimp'
          + ' verbify vers vertex_coloring vertex_connectivity vertex_degree vertex_distance'
          + ' vertex_eccentricity vertex_in_degree vertex_out_degree vertices vertices_to_cycle'
          + ' vertices_to_path %w weyl wheel_graph wiener_index wigner_3j wigner_6j'
          + ' wigner_9j with_stdout write_binary_data writebyte write_data writefile wronskian'
          + ' xreduce xthru %y Zeilberger zeroequiv zerofor zeromatrix zeromatrixp zeta'
          + ' zgeev zheev zlange zn_add_table zn_carmichael_lambda zn_characteristic_factors'
          + ' zn_determinant zn_factor_generators zn_invert_by_lu zn_log zn_mult_table'
          + ' absboxchar activecontexts adapt_depth additive adim aform algebraic'
          + ' algepsilon algexact aliases allbut all_dotsimp_denoms allocation allsym alphabetic'
          + ' animation antisymmetric arrays askexp assume_pos assume_pos_pred assumescalar'
          + ' asymbol atomgrad atrig1 axes axis_3d axis_bottom axis_left axis_right axis_top'
          + ' azimuth background background_color backsubst berlefact bernstein_explicit'
          + ' besselexpand beta_args_sum_to_integer beta_expand bftorat bftrunc bindtest'
          + ' border boundaries_array box boxchar breakup %c capping cauchysum cbrange'
          + ' cbtics center cflength cframe_flag cnonmet_flag color color_bar color_bar_tics'
          + ' colorbox columns commutative complex cone context contexts contour contour_levels'
          + ' cosnpiflag ctaypov ctaypt ctayswitch ctayvar ct_coords ctorsion_flag ctrgsimp'
          + ' cube current_let_rule_package cylinder data_file_name debugmode decreasing'
          + ' default_let_rule_package delay dependencies derivabbrev derivsubst detout'
          + ' diagmetric diff dim dimensions dispflag display2d|10 display_format_internal'
          + ' distribute_over doallmxops domain domxexpt domxmxops domxnctimes dontfactor'
          + ' doscmxops doscmxplus dot0nscsimp dot0simp dot1simp dotassoc dotconstrules'
          + ' dotdistrib dotexptsimp dotident dotscrules draw_graph_program draw_realpart'
          + ' edge_color edge_coloring edge_partition edge_type edge_width %edispflag'
          + ' elevation %emode endphi endtheta engineering_format_floats enhanced3d %enumer'
          + ' epsilon_lp erfflag erf_representation errormsg error_size error_syms error_type'
          + ' %e_to_numlog eval even evenfun evflag evfun ev_point expandwrt_denom expintexpand'
          + ' expintrep expon expop exptdispflag exptisolate exptsubst facexpand facsum_combine'
          + ' factlim factorflag factorial_expand factors_only fb feature features'
          + ' file_name file_output_append file_search_demo file_search_lisp file_search_maxima|10'
          + ' file_search_tests file_search_usage file_type_lisp file_type_maxima|10 fill_color'
          + ' fill_density filled_func fixed_vertices flipflag float2bf font font_size'
          + ' fortindent fortspaces fpprec fpprintprec functions gamma_expand gammalim'
          + ' gdet genindex gensumnum GGFCFMAX GGFINFINITY globalsolve gnuplot_command'
          + ' gnuplot_curve_styles gnuplot_curve_titles gnuplot_default_term_command gnuplot_dumb_term_command'
          + ' gnuplot_file_args gnuplot_file_name gnuplot_out_file gnuplot_pdf_term_command'
          + ' gnuplot_pm3d gnuplot_png_term_command gnuplot_postamble gnuplot_preamble'
          + ' gnuplot_ps_term_command gnuplot_svg_term_command gnuplot_term gnuplot_view_args'
          + ' Gosper_in_Zeilberger gradefs grid grid2d grind halfangles head_angle head_both'
          + ' head_length head_type height hypergeometric_representation %iargs ibase'
          + ' icc1 icc2 icounter idummyx ieqnprint ifb ifc1 ifc2 ifg ifgi ifr iframe_bracket_form'
          + ' ifri igeowedge_flag ikt1 ikt2 imaginary inchar increasing infeval'
          + ' infinity inflag infolists inm inmc1 inmc2 intanalysis integer integervalued'
          + ' integrate_use_rootsof integration_constant integration_constant_counter interpolate_color'
          + ' intfaclim ip_grid ip_grid_in irrational isolate_wrt_times iterations itr'
          + ' julia_parameter %k1 %k2 keepfloat key key_pos kinvariant kt label label_alignment'
          + ' label_orientation labels lassociative lbfgs_ncorrections lbfgs_nfeval_max'
          + ' leftjust legend letrat let_rule_packages lfg lg lhospitallim limsubst linear'
          + ' linear_solver linechar linel|10 linenum line_type linewidth line_width linsolve_params'
          + ' linsolvewarn lispdisp listarith listconstvars listdummyvars lmxchar load_pathname'
          + ' loadprint logabs logarc logcb logconcoeffp logexpand lognegint logsimp logx'
          + ' logx_secondary logy logy_secondary logz lriem m1pbranch macroexpansion macros'
          + ' mainvar manual_demo maperror mapprint matrix_element_add matrix_element_mult'
          + ' matrix_element_transpose maxapplydepth maxapplyheight maxima_tempdir|10 maxima_userdir|10'
          + ' maxnegex MAX_ORD maxposex maxpsifracdenom maxpsifracnum maxpsinegint maxpsiposint'
          + ' maxtayorder mesh_lines_color method mod_big_prime mode_check_errorp'
          + ' mode_checkp mode_check_warnp mod_test mod_threshold modular_linear_solver'
          + ' modulus multiplicative multiplicities myoptions nary negdistrib negsumdispflag'
          + ' newline newtonepsilon newtonmaxiter nextlayerfactor niceindicespref nm nmc'
          + ' noeval nolabels nonegative_lp noninteger nonscalar noun noundisp nouns np'
          + ' npi nticks ntrig numer numer_pbranch obase odd oddfun opacity opproperties'
          + ' opsubst optimprefix optionset orientation origin orthopoly_returns_intervals'
          + ' outative outchar packagefile palette partswitch pdf_file pfeformat phiresolution'
          + ' %piargs piece pivot_count_sx pivot_max_sx plot_format plot_options plot_realpart'
          + ' png_file pochhammer_max_index points pointsize point_size points_joined point_type'
          + ' poislim poisson poly_coefficient_ring poly_elimination_order polyfactor poly_grobner_algorithm'
          + ' poly_grobner_debug poly_monomial_order poly_primary_elimination_order poly_return_term_list'
          + ' poly_secondary_elimination_order poly_top_reduction_only posfun position'
          + ' powerdisp pred prederror primep_number_of_tests product_use_gamma program'
          + ' programmode promote_float_to_bigfloat prompt proportional_axes props psexpand'
          + ' ps_file radexpand radius radsubstflag rassociative ratalgdenom ratchristof'
          + ' ratdenomdivide rateinstein ratepsilon ratfac rational ratmx ratprint ratriemann'
          + ' ratsimpexpons ratvarswitch ratweights ratweyl ratwtlvl real realonly redraw'
          + ' refcheck resolution restart resultant ric riem rmxchar %rnum_list rombergabs'
          + ' rombergit rombergmin rombergtol rootsconmode rootsepsilon run_viewer same_xy'
          + ' same_xyz savedef savefactors scalar scalarmatrixp scale scale_lp setcheck'
          + ' setcheckbreak setval show_edge_color show_edges show_edge_type show_edge_width'
          + ' show_id show_label showtime show_vertex_color show_vertex_size show_vertex_type'
          + ' show_vertices show_weight simp simplified_output simplify_products simpproduct'
          + ' simpsum sinnpiflag solvedecomposes solveexplicit solvefactors solvenullwarn'
          + ' solveradcan solvetrigwarn space sparse sphere spring_embedding_depth sqrtdispflag'
          + ' stardisp startphi starttheta stats_numer stringdisp structures style sublis_apply_lambda'
          + ' subnumsimp sumexpand sumsplitfact surface surface_hide svg_file symmetric'
          + ' tab taylordepth taylor_logexpand taylor_order_coefficients taylor_truncate_polynomials'
          + ' tensorkill terminal testsuite_files thetaresolution timer_devalue title tlimswitch'
          + ' tr track transcompile transform transform_xy translate_fast_arrays transparent'
          + ' transrun tr_array_as_ref tr_bound_function_applyp tr_file_tty_messagesp tr_float_can_branch_complex'
          + ' tr_function_call_default trigexpandplus trigexpandtimes triginverses trigsign'
          + ' trivial_solutions tr_numer tr_optimize_max_loop tr_semicompile tr_state_vars'
          + ' tr_warn_bad_function_calls tr_warn_fexpr tr_warn_meval tr_warn_mode'
          + ' tr_warn_undeclared tr_warn_undefined_variable tstep ttyoff tube_extremes'
          + ' ufg ug %unitexpand unit_vectors uric uriem use_fast_arrays user_preamble'
          + ' usersetunits values vect_cross verbose vertex_color vertex_coloring vertex_partition'
          + ' vertex_size vertex_type view warnings weyl width windowname windowtitle wired_surface'
          + ' wireframe xaxis xaxis_color xaxis_secondary xaxis_type xaxis_width xlabel'
          + ' xlabel_secondary xlength xrange xrange_secondary xtics xtics_axis xtics_rotate'
          + ' xtics_rotate_secondary xtics_secondary xtics_secondary_axis xu_grid x_voxel'
          + ' xy_file xyplane xy_scale yaxis yaxis_color yaxis_secondary yaxis_type yaxis_width'
          + ' ylabel ylabel_secondary ylength yrange yrange_secondary ytics ytics_axis'
          + ' ytics_rotate ytics_rotate_secondary ytics_secondary ytics_secondary_axis'
          + ' yv_grid y_voxel yx_ratio zaxis zaxis_color zaxis_type zaxis_width zeroa zerob'
          + ' zerobern zeta%pi zlabel zlabel_rotate zlength zmin zn_primroot_limit zn_primroot_pretest';
      var SYMBOLS = '_ __ %|0 %%|0';
    
      return {
        lexemes: '[A-Za-z_%][0-9A-Za-z_%]*',
        keywords: {
          keyword: KEYWORDS,
          literal: LITERALS,
          built_in: BUILTIN_FUNCTIONS,
          symbol: SYMBOLS,
        },
        contains: [
          {
            className: 'comment',
            begin: '/\\*',
            end: '\\*/',
            contains: ['self']
          },
          hljs.QUOTE_STRING_MODE,
          {
            className: 'number',
            relevance: 0,
            variants: [
              {
                // float number w/ exponent
                // hmm, I wonder if we ought to include other exponent markers?
                begin: '\\b(\\d+|\\d+\\.|\\.\\d+|\\d+\\.\\d+)[Ee][-+]?\\d+\\b',
              },
              {
                // bigfloat number
                begin: '\\b(\\d+|\\d+\\.|\\.\\d+|\\d+\\.\\d+)[Bb][-+]?\\d+\\b',
                relevance: 10
              },
              {
                // float number w/out exponent
                // Doesn't seem to recognize floats which start with '.'
                begin: '\\b(\\.\\d+|\\d+\\.\\d+)\\b',
              },
              {
                // integer in base up to 36
                // Doesn't seem to recognize integers which end with '.'
                begin: '\\b(\\d+|0[0-9A-Za-z]+)\\.?\\b',
              }
            ]
          }
        ],
        illegal: /@/
      }
    };
    
    /***/ }),
    /* 504 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        keywords:
          'int float string vector matrix if else switch case default while do for in break ' +
          'continue global proc return about abs addAttr addAttributeEditorNodeHelp addDynamic ' +
          'addNewShelfTab addPP addPanelCategory addPrefixToName advanceToNextDrivenKey ' +
          'affectedNet affects aimConstraint air alias aliasAttr align alignCtx alignCurve ' +
          'alignSurface allViewFit ambientLight angle angleBetween animCone animCurveEditor ' +
          'animDisplay animView annotate appendStringArray applicationName applyAttrPreset ' +
          'applyTake arcLenDimContext arcLengthDimension arclen arrayMapper art3dPaintCtx ' +
          'artAttrCtx artAttrPaintVertexCtx artAttrSkinPaintCtx artAttrTool artBuildPaintMenu ' +
          'artFluidAttrCtx artPuttyCtx artSelectCtx artSetPaintCtx artUserPaintCtx assignCommand ' +
          'assignInputDevice assignViewportFactories attachCurve attachDeviceAttr attachSurface ' +
          'attrColorSliderGrp attrCompatibility attrControlGrp attrEnumOptionMenu ' +
          'attrEnumOptionMenuGrp attrFieldGrp attrFieldSliderGrp attrNavigationControlGrp ' +
          'attrPresetEditWin attributeExists attributeInfo attributeMenu attributeQuery ' +
          'autoKeyframe autoPlace bakeClip bakeFluidShading bakePartialHistory bakeResults ' +
          'bakeSimulation basename basenameEx batchRender bessel bevel bevelPlus binMembership ' +
          'bindSkin blend2 blendShape blendShapeEditor blendShapePanel blendTwoAttr blindDataType ' +
          'boneLattice boundary boxDollyCtx boxZoomCtx bufferCurve buildBookmarkMenu ' +
          'buildKeyframeMenu button buttonManip CBG cacheFile cacheFileCombine cacheFileMerge ' +
          'cacheFileTrack camera cameraView canCreateManip canvas capitalizeString catch ' +
          'catchQuiet ceil changeSubdivComponentDisplayLevel changeSubdivRegion channelBox ' +
          'character characterMap characterOutlineEditor characterize chdir checkBox checkBoxGrp ' +
          'checkDefaultRenderGlobals choice circle circularFillet clamp clear clearCache clip ' +
          'clipEditor clipEditorCurrentTimeCtx clipSchedule clipSchedulerOutliner clipTrimBefore ' +
          'closeCurve closeSurface cluster cmdFileOutput cmdScrollFieldExecuter ' +
          'cmdScrollFieldReporter cmdShell coarsenSubdivSelectionList collision color ' +
          'colorAtPoint colorEditor colorIndex colorIndexSliderGrp colorSliderButtonGrp ' +
          'colorSliderGrp columnLayout commandEcho commandLine commandPort compactHairSystem ' +
          'componentEditor compositingInterop computePolysetVolume condition cone confirmDialog ' +
          'connectAttr connectControl connectDynamic connectJoint connectionInfo constrain ' +
          'constrainValue constructionHistory container containsMultibyte contextInfo control ' +
          'convertFromOldLayers convertIffToPsd convertLightmap convertSolidTx convertTessellation ' +
          'convertUnit copyArray copyFlexor copyKey copySkinWeights cos cpButton cpCache ' +
          'cpClothSet cpCollision cpConstraint cpConvClothToMesh cpForces cpGetSolverAttr cpPanel ' +
          'cpProperty cpRigidCollisionFilter cpSeam cpSetEdit cpSetSolverAttr cpSolver ' +
          'cpSolverTypes cpTool cpUpdateClothUVs createDisplayLayer createDrawCtx createEditor ' +
          'createLayeredPsdFile createMotionField createNewShelf createNode createRenderLayer ' +
          'createSubdivRegion cross crossProduct ctxAbort ctxCompletion ctxEditMode ctxTraverse ' +
          'currentCtx currentTime currentTimeCtx currentUnit curve curveAddPtCtx ' +
          'curveCVCtx curveEPCtx curveEditorCtx curveIntersect curveMoveEPCtx curveOnSurface ' +
          'curveSketchCtx cutKey cycleCheck cylinder dagPose date defaultLightListCheckBox ' +
          'defaultNavigation defineDataServer defineVirtualDevice deformer deg_to_rad delete ' +
          'deleteAttr deleteShadingGroupsAndMaterials deleteShelfTab deleteUI deleteUnusedBrushes ' +
          'delrandstr detachCurve detachDeviceAttr detachSurface deviceEditor devicePanel dgInfo ' +
          'dgdirty dgeval dgtimer dimWhen directKeyCtx directionalLight dirmap dirname disable ' +
          'disconnectAttr disconnectJoint diskCache displacementToPoly displayAffected ' +
          'displayColor displayCull displayLevelOfDetail displayPref displayRGBColor ' +
          'displaySmoothness displayStats displayString displaySurface distanceDimContext ' +
          'distanceDimension doBlur dolly dollyCtx dopeSheetEditor dot dotProduct ' +
          'doubleProfileBirailSurface drag dragAttrContext draggerContext dropoffLocator ' +
          'duplicate duplicateCurve duplicateSurface dynCache dynControl dynExport dynExpression ' +
          'dynGlobals dynPaintEditor dynParticleCtx dynPref dynRelEdPanel dynRelEditor ' +
          'dynamicLoad editAttrLimits editDisplayLayerGlobals editDisplayLayerMembers ' +
          'editRenderLayerAdjustment editRenderLayerGlobals editRenderLayerMembers editor ' +
          'editorTemplate effector emit emitter enableDevice encodeString endString endsWith env ' +
          'equivalent equivalentTol erf error eval evalDeferred evalEcho event ' +
          'exactWorldBoundingBox exclusiveLightCheckBox exec executeForEachObject exists exp ' +
          'expression expressionEditorListen extendCurve extendSurface extrude fcheck fclose feof ' +
          'fflush fgetline fgetword file fileBrowserDialog fileDialog fileExtension fileInfo ' +
          'filetest filletCurve filter filterCurve filterExpand filterStudioImport ' +
          'findAllIntersections findAnimCurves findKeyframe findMenuItem findRelatedSkinCluster ' +
          'finder firstParentOf fitBspline flexor floatEq floatField floatFieldGrp floatScrollBar ' +
          'floatSlider floatSlider2 floatSliderButtonGrp floatSliderGrp floor flow fluidCacheInfo ' +
          'fluidEmitter fluidVoxelInfo flushUndo fmod fontDialog fopen formLayout format fprint ' +
          'frameLayout fread freeFormFillet frewind fromNativePath fwrite gamma gauss ' +
          'geometryConstraint getApplicationVersionAsFloat getAttr getClassification ' +
          'getDefaultBrush getFileList getFluidAttr getInputDeviceRange getMayaPanelTypes ' +
          'getModifiers getPanel getParticleAttr getPluginResource getenv getpid glRender ' +
          'glRenderEditor globalStitch gmatch goal gotoBindPose grabColor gradientControl ' +
          'gradientControlNoAttr graphDollyCtx graphSelectContext graphTrackCtx gravity grid ' +
          'gridLayout group groupObjectsByName HfAddAttractorToAS HfAssignAS HfBuildEqualMap ' +
          'HfBuildFurFiles HfBuildFurImages HfCancelAFR HfConnectASToHF HfCreateAttractor ' +
          'HfDeleteAS HfEditAS HfPerformCreateAS HfRemoveAttractorFromAS HfSelectAttached ' +
          'HfSelectAttractors HfUnAssignAS hardenPointCurve hardware hardwareRenderPanel ' +
          'headsUpDisplay headsUpMessage help helpLine hermite hide hilite hitTest hotBox hotkey ' +
          'hotkeyCheck hsv_to_rgb hudButton hudSlider hudSliderButton hwReflectionMap hwRender ' +
          'hwRenderLoad hyperGraph hyperPanel hyperShade hypot iconTextButton iconTextCheckBox ' +
          'iconTextRadioButton iconTextRadioCollection iconTextScrollList iconTextStaticLabel ' +
          'ikHandle ikHandleCtx ikHandleDisplayScale ikSolver ikSplineHandleCtx ikSystem ' +
          'ikSystemInfo ikfkDisplayMethod illustratorCurves image imfPlugins inheritTransform ' +
          'insertJoint insertJointCtx insertKeyCtx insertKnotCurve insertKnotSurface instance ' +
          'instanceable instancer intField intFieldGrp intScrollBar intSlider intSliderGrp ' +
          'interToUI internalVar intersect iprEngine isAnimCurve isConnected isDirty isParentOf ' +
          'isSameObject isTrue isValidObjectName isValidString isValidUiName isolateSelect ' +
          'itemFilter itemFilterAttr itemFilterRender itemFilterType joint jointCluster jointCtx ' +
          'jointDisplayScale jointLattice keyTangent keyframe keyframeOutliner ' +
          'keyframeRegionCurrentTimeCtx keyframeRegionDirectKeyCtx keyframeRegionDollyCtx ' +
          'keyframeRegionInsertKeyCtx keyframeRegionMoveKeyCtx keyframeRegionScaleKeyCtx ' +
          'keyframeRegionSelectKeyCtx keyframeRegionSetKeyCtx keyframeRegionTrackCtx ' +
          'keyframeStats lassoContext lattice latticeDeformKeyCtx launch launchImageEditor ' +
          'layerButton layeredShaderPort layeredTexturePort layout layoutDialog lightList ' +
          'lightListEditor lightListPanel lightlink lineIntersection linearPrecision linstep ' +
          'listAnimatable listAttr listCameras listConnections listDeviceAttachments listHistory ' +
          'listInputDeviceAxes listInputDeviceButtons listInputDevices listMenuAnnotation ' +
          'listNodeTypes listPanelCategories listRelatives listSets listTransforms ' +
          'listUnselected listerEditor loadFluid loadNewShelf loadPlugin ' +
          'loadPluginLanguageResources loadPrefObjects localizedPanelLabel lockNode loft log ' +
          'longNameOf lookThru ls lsThroughFilter lsType lsUI Mayatomr mag makeIdentity makeLive ' +
          'makePaintable makeRoll makeSingleSurface makeTubeOn makebot manipMoveContext ' +
          'manipMoveLimitsCtx manipOptions manipRotateContext manipRotateLimitsCtx ' +
          'manipScaleContext manipScaleLimitsCtx marker match max memory menu menuBarLayout ' +
          'menuEditor menuItem menuItemToShelf menuSet menuSetPref messageLine min minimizeApp ' +
          'mirrorJoint modelCurrentTimeCtx modelEditor modelPanel mouse movIn movOut move ' +
          'moveIKtoFK moveKeyCtx moveVertexAlongDirection multiProfileBirailSurface mute ' +
          'nParticle nameCommand nameField namespace namespaceInfo newPanelItems newton nodeCast ' +
          'nodeIconButton nodeOutliner nodePreset nodeType noise nonLinear normalConstraint ' +
          'normalize nurbsBoolean nurbsCopyUVSet nurbsCube nurbsEditUV nurbsPlane nurbsSelect ' +
          'nurbsSquare nurbsToPoly nurbsToPolygonsPref nurbsToSubdiv nurbsToSubdivPref ' +
          'nurbsUVSet nurbsViewDirectionVector objExists objectCenter objectLayer objectType ' +
          'objectTypeUI obsoleteProc oceanNurbsPreviewPlane offsetCurve offsetCurveOnSurface ' +
          'offsetSurface openGLExtension openMayaPref optionMenu optionMenuGrp optionVar orbit ' +
          'orbitCtx orientConstraint outlinerEditor outlinerPanel overrideModifier ' +
          'paintEffectsDisplay pairBlend palettePort paneLayout panel panelConfiguration ' +
          'panelHistory paramDimContext paramDimension paramLocator parent parentConstraint ' +
          'particle particleExists particleInstancer particleRenderInfo partition pasteKey ' +
          'pathAnimation pause pclose percent performanceOptions pfxstrokes pickWalk picture ' +
          'pixelMove planarSrf plane play playbackOptions playblast plugAttr plugNode pluginInfo ' +
          'pluginResourceUtil pointConstraint pointCurveConstraint pointLight pointMatrixMult ' +
          'pointOnCurve pointOnSurface pointPosition poleVectorConstraint polyAppend ' +
          'polyAppendFacetCtx polyAppendVertex polyAutoProjection polyAverageNormal ' +
          'polyAverageVertex polyBevel polyBlendColor polyBlindData polyBoolOp polyBridgeEdge ' +
          'polyCacheMonitor polyCheck polyChipOff polyClipboard polyCloseBorder polyCollapseEdge ' +
          'polyCollapseFacet polyColorBlindData polyColorDel polyColorPerVertex polyColorSet ' +
          'polyCompare polyCone polyCopyUV polyCrease polyCreaseCtx polyCreateFacet ' +
          'polyCreateFacetCtx polyCube polyCut polyCutCtx polyCylinder polyCylindricalProjection ' +
          'polyDelEdge polyDelFacet polyDelVertex polyDuplicateAndConnect polyDuplicateEdge ' +
          'polyEditUV polyEditUVShell polyEvaluate polyExtrudeEdge polyExtrudeFacet ' +
          'polyExtrudeVertex polyFlipEdge polyFlipUV polyForceUV polyGeoSampler polyHelix ' +
          'polyInfo polyInstallAction polyLayoutUV polyListComponentConversion polyMapCut ' +
          'polyMapDel polyMapSew polyMapSewMove polyMergeEdge polyMergeEdgeCtx polyMergeFacet ' +
          'polyMergeFacetCtx polyMergeUV polyMergeVertex polyMirrorFace polyMoveEdge ' +
          'polyMoveFacet polyMoveFacetUV polyMoveUV polyMoveVertex polyNormal polyNormalPerVertex ' +
          'polyNormalizeUV polyOptUvs polyOptions polyOutput polyPipe polyPlanarProjection ' +
          'polyPlane polyPlatonicSolid polyPoke polyPrimitive polyPrism polyProjection ' +
          'polyPyramid polyQuad polyQueryBlindData polyReduce polySelect polySelectConstraint ' +
          'polySelectConstraintMonitor polySelectCtx polySelectEditCtx polySeparate ' +
          'polySetToFaceNormal polySewEdge polyShortestPathCtx polySmooth polySoftEdge ' +
          'polySphere polySphericalProjection polySplit polySplitCtx polySplitEdge polySplitRing ' +
          'polySplitVertex polyStraightenUVBorder polySubdivideEdge polySubdivideFacet ' +
          'polyToSubdiv polyTorus polyTransfer polyTriangulate polyUVSet polyUnite polyWedgeFace ' +
          'popen popupMenu pose pow preloadRefEd print progressBar progressWindow projFileViewer ' +
          'projectCurve projectTangent projectionContext projectionManip promptDialog propModCtx ' +
          'propMove psdChannelOutliner psdEditTextureFile psdExport psdTextureFile putenv pwd ' +
          'python querySubdiv quit rad_to_deg radial radioButton radioButtonGrp radioCollection ' +
          'radioMenuItemCollection rampColorPort rand randomizeFollicles randstate rangeControl ' +
          'readTake rebuildCurve rebuildSurface recordAttr recordDevice redo reference ' +
          'referenceEdit referenceQuery refineSubdivSelectionList refresh refreshAE ' +
          'registerPluginResource rehash reloadImage removeJoint removeMultiInstance ' +
          'removePanelCategory rename renameAttr renameSelectionList renameUI render ' +
          'renderGlobalsNode renderInfo renderLayerButton renderLayerParent ' +
          'renderLayerPostProcess renderLayerUnparent renderManip renderPartition ' +
          'renderQualityNode renderSettings renderThumbnailUpdate renderWindowEditor ' +
          'renderWindowSelectContext renderer reorder reorderDeformers requires reroot ' +
          'resampleFluid resetAE resetPfxToPolyCamera resetTool resolutionNode retarget ' +
          'reverseCurve reverseSurface revolve rgb_to_hsv rigidBody rigidSolver roll rollCtx ' +
          'rootOf rot rotate rotationInterpolation roundConstantRadius rowColumnLayout rowLayout ' +
          'runTimeCommand runup sampleImage saveAllShelves saveAttrPreset saveFluid saveImage ' +
          'saveInitialState saveMenu savePrefObjects savePrefs saveShelf saveToolSettings scale ' +
          'scaleBrushBrightness scaleComponents scaleConstraint scaleKey scaleKeyCtx sceneEditor ' +
          'sceneUIReplacement scmh scriptCtx scriptEditorInfo scriptJob scriptNode scriptTable ' +
          'scriptToShelf scriptedPanel scriptedPanelType scrollField scrollLayout sculpt ' +
          'searchPathArray seed selLoadSettings select selectContext selectCurveCV selectKey ' +
          'selectKeyCtx selectKeyframeRegionCtx selectMode selectPref selectPriority selectType ' +
          'selectedNodes selectionConnection separator setAttr setAttrEnumResource ' +
          'setAttrMapping setAttrNiceNameResource setConstraintRestPosition ' +
          'setDefaultShadingGroup setDrivenKeyframe setDynamic setEditCtx setEditor setFluidAttr ' +
          'setFocus setInfinity setInputDeviceMapping setKeyCtx setKeyPath setKeyframe ' +
          'setKeyframeBlendshapeTargetWts setMenuMode setNodeNiceNameResource setNodeTypeFlag ' +
          'setParent setParticleAttr setPfxToPolyCamera setPluginResource setProject ' +
          'setStampDensity setStartupMessage setState setToolTo setUITemplate setXformManip sets ' +
          'shadingConnection shadingGeometryRelCtx shadingLightRelCtx shadingNetworkCompare ' +
          'shadingNode shapeCompare shelfButton shelfLayout shelfTabLayout shellField ' +
          'shortNameOf showHelp showHidden showManipCtx showSelectionInTitle ' +
          'showShadingGroupAttrEditor showWindow sign simplify sin singleProfileBirailSurface ' +
          'size sizeBytes skinCluster skinPercent smoothCurve smoothTangentSurface smoothstep ' +
          'snap2to2 snapKey snapMode snapTogetherCtx snapshot soft softMod softModCtx sort sound ' +
          'soundControl source spaceLocator sphere sphrand spotLight spotLightPreviewPort ' +
          'spreadSheetEditor spring sqrt squareSurface srtContext stackTrace startString ' +
          'startsWith stitchAndExplodeShell stitchSurface stitchSurfacePoints strcmp ' +
          'stringArrayCatenate stringArrayContains stringArrayCount stringArrayInsertAtIndex ' +
          'stringArrayIntersector stringArrayRemove stringArrayRemoveAtIndex ' +
          'stringArrayRemoveDuplicates stringArrayRemoveExact stringArrayToString ' +
          'stringToStringArray strip stripPrefixFromName stroke subdAutoProjection ' +
          'subdCleanTopology subdCollapse subdDuplicateAndConnect subdEditUV ' +
          'subdListComponentConversion subdMapCut subdMapSewMove subdMatchTopology subdMirror ' +
          'subdToBlind subdToPoly subdTransferUVsToCache subdiv subdivCrease ' +
          'subdivDisplaySmoothness substitute substituteAllString substituteGeometry substring ' +
          'surface surfaceSampler surfaceShaderList swatchDisplayPort switchTable symbolButton ' +
          'symbolCheckBox sysFile system tabLayout tan tangentConstraint texLatticeDeformContext ' +
          'texManipContext texMoveContext texMoveUVShellContext texRotateContext texScaleContext ' +
          'texSelectContext texSelectShortestPathCtx texSmudgeUVContext texWinToolCtx text ' +
          'textCurves textField textFieldButtonGrp textFieldGrp textManip textScrollList ' +
          'textToShelf textureDisplacePlane textureHairColor texturePlacementContext ' +
          'textureWindow threadCount threePointArcCtx timeControl timePort timerX toNativePath ' +
          'toggle toggleAxis toggleWindowVisibility tokenize tokenizeList tolerance tolower ' +
          'toolButton toolCollection toolDropped toolHasOptions toolPropertyWindow torus toupper ' +
          'trace track trackCtx transferAttributes transformCompare transformLimits translator ' +
          'trim trunc truncateFluidCache truncateHairCache tumble tumbleCtx turbulence ' +
          'twoPointArcCtx uiRes uiTemplate unassignInputDevice undo undoInfo ungroup uniform unit ' +
          'unloadPlugin untangleUV untitledFileName untrim upAxis updateAE userCtx uvLink ' +
          'uvSnapshot validateShelfName vectorize view2dToolCtx viewCamera viewClipPlane ' +
          'viewFit viewHeadOn viewLookAt viewManip viewPlace viewSet visor volumeAxis vortex ' +
          'waitCursor warning webBrowser webBrowserPrefs whatIs window windowPref wire ' +
          'wireContext workspace wrinkle wrinkleContext writeTake xbmLangPathList xform',
        illegal: '</',
        contains: [
          hljs.C_NUMBER_MODE,
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE,
          {
            className: 'string',
            begin: '`', end: '`',
            contains: [hljs.BACKSLASH_ESCAPE]
          },
          { // eats variables
            begin: '[\\$\\%\\@](\\^\\w\\b|#\\w+|[^\\s\\w{]|{\\w+}|\\w+)'
          },
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE
        ]
      };
    };
    
    /***/ }),
    /* 505 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var KEYWORDS = {
        keyword:
          'module use_module import_module include_module end_module initialise ' +
          'mutable initialize finalize finalise interface implementation pred ' +
          'mode func type inst solver any_pred any_func is semidet det nondet ' +
          'multi erroneous failure cc_nondet cc_multi typeclass instance where ' +
          'pragma promise external trace atomic or_else require_complete_switch ' +
          'require_det require_semidet require_multi require_nondet ' +
          'require_cc_multi require_cc_nondet require_erroneous require_failure',
        meta:
          // pragma
          'inline no_inline type_spec source_file fact_table obsolete memo ' +
          'loop_check minimal_model terminates does_not_terminate ' +
          'check_termination promise_equivalent_clauses ' +
          // preprocessor
          'foreign_proc foreign_decl foreign_code foreign_type ' +
          'foreign_import_module foreign_export_enum foreign_export ' +
          'foreign_enum may_call_mercury will_not_call_mercury thread_safe ' +
          'not_thread_safe maybe_thread_safe promise_pure promise_semipure ' +
          'tabled_for_io local untrailed trailed attach_to_io_state ' +
          'can_pass_as_mercury_type stable will_not_throw_exception ' +
          'may_modify_trail will_not_modify_trail may_duplicate ' +
          'may_not_duplicate affects_liveness does_not_affect_liveness ' +
          'doesnt_affect_liveness no_sharing unknown_sharing sharing',
        built_in:
          'some all not if then else true fail false try catch catch_any ' +
          'semidet_true semidet_false semidet_fail impure_true impure semipure'
      };
    
      var COMMENT = hljs.COMMENT('%', '$');
    
      var NUMCODE = {
        className: 'number',
        begin: "0'.\\|0[box][0-9a-fA-F]*"
      };
    
      var ATOM = hljs.inherit(hljs.APOS_STRING_MODE, {relevance: 0});
      var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {relevance: 0});
      var STRING_FMT = {
        className: 'subst',
        begin: '\\\\[abfnrtv]\\|\\\\x[0-9a-fA-F]*\\\\\\|%[-+# *.0-9]*[dioxXucsfeEgGp]',
        relevance: 0
      };
      STRING.contains.push(STRING_FMT);
    
      var IMPLICATION = {
        className: 'built_in',
        variants: [
          {begin: '<=>'},
          {begin: '<=', relevance: 0},
          {begin: '=>', relevance: 0},
          {begin: '/\\\\'},
          {begin: '\\\\/'}
        ]
      };
    
      var HEAD_BODY_CONJUNCTION = {
        className: 'built_in',
        variants: [
          {begin: ':-\\|-->'},
          {begin: '=', relevance: 0}
        ]
      };
    
      return {
        aliases: ['m', 'moo'],
        keywords: KEYWORDS,
        contains: [
          IMPLICATION,
          HEAD_BODY_CONJUNCTION,
          COMMENT,
          hljs.C_BLOCK_COMMENT_MODE,
          NUMCODE,
          hljs.NUMBER_MODE,
          ATOM,
          STRING,
          {begin: /:-/} // relevance booster
        ]
      };
    };
    
    /***/ }),
    /* 506 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
        //local labels: %?[FB]?[AT]?\d{1,2}\w+
      return {
        case_insensitive: true,
        aliases: ['mips'],
        lexemes: '\\.?' + hljs.IDENT_RE,
        keywords: {
          meta:
            //GNU preprocs
            '.2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .ltorg ',
          built_in:
            '$0 $1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12 $13 $14 $15 ' + // integer registers
            '$16 $17 $18 $19 $20 $21 $22 $23 $24 $25 $26 $27 $28 $29 $30 $31 ' + // integer registers
            'zero at v0 v1 a0 a1 a2 a3 a4 a5 a6 a7 ' + // integer register aliases
            't0 t1 t2 t3 t4 t5 t6 t7 t8 t9 s0 s1 s2 s3 s4 s5 s6 s7 s8 ' + // integer register aliases
            'k0 k1 gp sp fp ra ' + // integer register aliases
            '$f0 $f1 $f2 $f2 $f4 $f5 $f6 $f7 $f8 $f9 $f10 $f11 $f12 $f13 $f14 $f15 ' + // floating-point registers
            '$f16 $f17 $f18 $f19 $f20 $f21 $f22 $f23 $f24 $f25 $f26 $f27 $f28 $f29 $f30 $f31 ' + // floating-point registers
            'Context Random EntryLo0 EntryLo1 Context PageMask Wired EntryHi ' + // Coprocessor 0 registers
            'HWREna BadVAddr Count Compare SR IntCtl SRSCtl SRSMap Cause EPC PRId ' + // Coprocessor 0 registers
            'EBase Config Config1 Config2 Config3 LLAddr Debug DEPC DESAVE CacheErr ' + // Coprocessor 0 registers
            'ECC ErrorEPC TagLo DataLo TagHi DataHi WatchLo WatchHi PerfCtl PerfCnt ' // Coprocessor 0 registers
        },
        contains: [
          {
            className: 'keyword',
            begin: '\\b('+     //mnemonics
                // 32-bit integer instructions
                'addi?u?|andi?|b(al)?|beql?|bgez(al)?l?|bgtzl?|blezl?|bltz(al)?l?|' +
                'bnel?|cl[oz]|divu?|ext|ins|j(al)?|jalr(\.hb)?|jr(\.hb)?|lbu?|lhu?|' +
                'll|lui|lw[lr]?|maddu?|mfhi|mflo|movn|movz|move|msubu?|mthi|mtlo|mul|' +
                'multu?|nop|nor|ori?|rotrv?|sb|sc|se[bh]|sh|sllv?|slti?u?|srav?|' +
                'srlv?|subu?|sw[lr]?|xori?|wsbh|' +
                // floating-point instructions
                'abs\.[sd]|add\.[sd]|alnv.ps|bc1[ft]l?|' +
                'c\.(s?f|un|u?eq|[ou]lt|[ou]le|ngle?|seq|l[et]|ng[et])\.[sd]|' +
                '(ceil|floor|round|trunc)\.[lw]\.[sd]|cfc1|cvt\.d\.[lsw]|' +
                'cvt\.l\.[dsw]|cvt\.ps\.s|cvt\.s\.[dlw]|cvt\.s\.p[lu]|cvt\.w\.[dls]|' +
                'div\.[ds]|ldx?c1|luxc1|lwx?c1|madd\.[sd]|mfc1|mov[fntz]?\.[ds]|' +
                'msub\.[sd]|mth?c1|mul\.[ds]|neg\.[ds]|nmadd\.[ds]|nmsub\.[ds]|' +
                'p[lu][lu]\.ps|recip\.fmt|r?sqrt\.[ds]|sdx?c1|sub\.[ds]|suxc1|' +
                'swx?c1|' +
                // system control instructions
                'break|cache|d?eret|[de]i|ehb|mfc0|mtc0|pause|prefx?|rdhwr|' +
                'rdpgpr|sdbbp|ssnop|synci?|syscall|teqi?|tgei?u?|tlb(p|r|w[ir])|' +
                'tlti?u?|tnei?|wait|wrpgpr'+
            ')',
            end: '\\s'
          },
          hljs.COMMENT('[;#]', '$'),
          hljs.C_BLOCK_COMMENT_MODE,
          hljs.QUOTE_STRING_MODE,
          {
            className: 'string',
            begin: '\'',
            end: '[^\\\\]\'',
            relevance: 0
          },
          {
            className: 'title',
            begin: '\\|', end: '\\|',
            illegal: '\\n',
            relevance: 0
          },
          {
            className: 'number',
            variants: [
                {begin: '0x[0-9a-f]+'}, //hex
                {begin: '\\b-?\\d+'}           //bare number
            ],
            relevance: 0
          },
          {
            className: 'symbol',
            variants: [
                {begin: '^\\s*[a-z_\\.\\$][a-z0-9_\\.\\$]+:'}, //GNU MIPS syntax
                {begin: '^\\s*[0-9]+:'}, // numbered local labels
                {begin: '[0-9]+[bf]' }  // number local label reference (backwards, forwards)
            ],
            relevance: 0
          }
        ],
        illegal: '\/'
      };
    };
    
    /***/ }),
    /* 507 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        keywords:
          'environ vocabularies notations constructors definitions ' +
          'registrations theorems schemes requirements begin end definition ' +
          'registration cluster existence pred func defpred deffunc theorem ' +
          'proof let take assume then thus hence ex for st holds consider ' +
          'reconsider such that and in provided of as from be being by means ' +
          'equals implies iff redefine define now not or attr is mode ' +
          'suppose per cases set thesis contradiction scheme reserve struct ' +
          'correctness compatibility coherence symmetry assymetry ' +
          'reflexivity irreflexivity connectedness uniqueness commutativity ' +
          'idempotence involutiveness projectivity',
        contains: [
          hljs.COMMENT('::', '$')
        ]
      };
    };
    
    /***/ }),
    /* 508 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var PERL_KEYWORDS = 'getpwent getservent quotemeta msgrcv scalar kill dbmclose undef lc ' +
        'ma syswrite tr send umask sysopen shmwrite vec qx utime local oct semctl localtime ' +
        'readpipe do return format read sprintf dbmopen pop getpgrp not getpwnam rewinddir qq' +
        'fileno qw endprotoent wait sethostent bless s|0 opendir continue each sleep endgrent ' +
        'shutdown dump chomp connect getsockname die socketpair close flock exists index shmget' +
        'sub for endpwent redo lstat msgctl setpgrp abs exit select print ref gethostbyaddr ' +
        'unshift fcntl syscall goto getnetbyaddr join gmtime symlink semget splice x|0 ' +
        'getpeername recv log setsockopt cos last reverse gethostbyname getgrnam study formline ' +
        'endhostent times chop length gethostent getnetent pack getprotoent getservbyname rand ' +
        'mkdir pos chmod y|0 substr endnetent printf next open msgsnd readdir use unlink ' +
        'getsockopt getpriority rindex wantarray hex system getservbyport endservent int chr ' +
        'untie rmdir prototype tell listen fork shmread ucfirst setprotoent else sysseek link ' +
        'getgrgid shmctl waitpid unpack getnetbyname reset chdir grep split require caller ' +
        'lcfirst until warn while values shift telldir getpwuid my getprotobynumber delete and ' +
        'sort uc defined srand accept package seekdir getprotobyname semop our rename seek if q|0 ' +
        'chroot sysread setpwent no crypt getc chown sqrt write setnetent setpriority foreach ' +
        'tie sin msgget map stat getlogin unless elsif truncate exec keys glob tied closedir' +
        'ioctl socket readlink eval xor readline binmode setservent eof ord bind alarm pipe ' +
        'atan2 getgrent exp time push setgrent gt lt or ne m|0 break given say state when';
      var SUBST = {
        className: 'subst',
        begin: '[$@]\\{', end: '\\}',
        keywords: PERL_KEYWORDS
      };
      var METHOD = {
        begin: '->{', end: '}'
        // contains defined later
      };
      var VAR = {
        variants: [
          {begin: /\$\d/},
          {begin: /[\$%@](\^\w\b|#\w+(::\w+)*|{\w+}|\w+(::\w*)*)/},
          {begin: /[\$%@][^\s\w{]/, relevance: 0}
        ]
      };
      var STRING_CONTAINS = [hljs.BACKSLASH_ESCAPE, SUBST, VAR];
      var PERL_DEFAULT_CONTAINS = [
        VAR,
        hljs.HASH_COMMENT_MODE,
        hljs.COMMENT(
          '^\\=\\w',
          '\\=cut',
          {
            endsWithParent: true
          }
        ),
        METHOD,
        {
          className: 'string',
          contains: STRING_CONTAINS,
          variants: [
            {
              begin: 'q[qwxr]?\\s*\\(', end: '\\)',
              relevance: 5
            },
            {
              begin: 'q[qwxr]?\\s*\\[', end: '\\]',
              relevance: 5
            },
            {
              begin: 'q[qwxr]?\\s*\\{', end: '\\}',
              relevance: 5
            },
            {
              begin: 'q[qwxr]?\\s*\\|', end: '\\|',
              relevance: 5
            },
            {
              begin: 'q[qwxr]?\\s*\\<', end: '\\>',
              relevance: 5
            },
            {
              begin: 'qw\\s+q', end: 'q',
              relevance: 5
            },
            {
              begin: '\'', end: '\'',
              contains: [hljs.BACKSLASH_ESCAPE]
            },
            {
              begin: '"', end: '"'
            },
            {
              begin: '`', end: '`',
              contains: [hljs.BACKSLASH_ESCAPE]
            },
            {
              begin: '{\\w+}',
              contains: [],
              relevance: 0
            },
            {
              begin: '\-?\\w+\\s*\\=\\>',
              contains: [],
              relevance: 0
            }
          ]
        },
        {
          className: 'number',
          begin: '(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b',
          relevance: 0
        },
        { // regexp container
          begin: '(\\/\\/|' + hljs.RE_STARTERS_RE + '|\\b(split|return|print|reverse|grep)\\b)\\s*',
          keywords: 'split return print reverse grep',
          relevance: 0,
          contains: [
            hljs.HASH_COMMENT_MODE,
            {
              className: 'regexp',
              begin: '(s|tr|y)/(\\\\.|[^/])*/(\\\\.|[^/])*/[a-z]*',
              relevance: 10
            },
            {
              className: 'regexp',
              begin: '(m|qr)?/', end: '/[a-z]*',
              contains: [hljs.BACKSLASH_ESCAPE],
              relevance: 0 // allows empty "//" which is a common comment delimiter in other languages
            }
          ]
        },
        {
          className: 'function',
          beginKeywords: 'sub', end: '(\\s*\\(.*?\\))?[;{]', excludeEnd: true,
          relevance: 5,
          contains: [hljs.TITLE_MODE]
        },
        {
          begin: '-\\w\\b',
          relevance: 0
        },
        {
          begin: "^__DATA__$",
          end: "^__END__$",
          subLanguage: 'mojolicious',
          contains: [
            {
                begin: "^@@.*",
                end: "$",
                className: "comment"
            }
          ]
        }
      ];
      SUBST.contains = PERL_DEFAULT_CONTAINS;
      METHOD.contains = PERL_DEFAULT_CONTAINS;
    
      return {
        aliases: ['pl', 'pm'],
        lexemes: /[\w\.]+/,
        keywords: PERL_KEYWORDS,
        contains: PERL_DEFAULT_CONTAINS
      };
    };
    
    /***/ }),
    /* 509 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        subLanguage: 'xml',
        contains: [
          {
            className: 'meta',
            begin: '^__(END|DATA)__$'
          },
        // mojolicious line
          {
            begin: "^\\s*%{1,2}={0,2}", end: '$',
            subLanguage: 'perl'
          },
        // mojolicious block
          {
            begin: "<%{1,2}={0,2}",
            end: "={0,1}%>",
            subLanguage: 'perl',
            excludeBegin: true,
            excludeEnd: true
          }
        ]
      };
    };
    
    /***/ }),
    /* 510 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var NUMBER = {
        className: 'number', relevance: 0,
        variants: [
          {
            begin: '[$][a-fA-F0-9]+'
          },
          hljs.NUMBER_MODE
        ]
      };
    
      return {
        case_insensitive: true,
        keywords: {
          keyword: 'public private property continue exit extern new try catch ' +
            'eachin not abstract final select case default const local global field ' +
            'end if then else elseif endif while wend repeat until forever for ' +
            'to step next return module inline throw import',
    
          built_in: 'DebugLog DebugStop Error Print ACos ACosr ASin ASinr ATan ATan2 ATan2r ATanr Abs Abs Ceil ' +
            'Clamp Clamp Cos Cosr Exp Floor Log Max Max Min Min Pow Sgn Sgn Sin Sinr Sqrt Tan Tanr Seed PI HALFPI TWOPI',
    
          literal: 'true false null and or shl shr mod'
        },
        illegal: /\/\*/,
        contains: [
          hljs.COMMENT('#rem', '#end'),
          hljs.COMMENT(
            "'",
            '$',
            {
              relevance: 0
            }
          ),
          {
            className: 'function',
            beginKeywords: 'function method', end: '[(=:]|$',
            illegal: /\n/,
            contains: [
              hljs.UNDERSCORE_TITLE_MODE
            ]
          },
          {
            className: 'class',
            beginKeywords: 'class interface', end: '$',
            contains: [
              {
                beginKeywords: 'extends implements'
              },
              hljs.UNDERSCORE_TITLE_MODE
            ]
          },
          {
            className: 'built_in',
            begin: '\\b(self|super)\\b'
          },
          {
            className: 'meta',
            begin: '\\s*#', end: '$',
            keywords: {'meta-keyword': 'if else elseif endif end then'}
          },
          {
            className: 'meta',
            begin: '^\\s*strict\\b'
          },
          {
            beginKeywords: 'alias', end: '=',
            contains: [hljs.UNDERSCORE_TITLE_MODE]
          },
          hljs.QUOTE_STRING_MODE,
          NUMBER
        ]
      }
    };
    
    /***/ }),
    /* 511 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var KEYWORDS = {
        keyword:
          // Moonscript keywords
          'if then not for in while do return else elseif break continue switch and or ' +
          'unless when class extends super local import export from using',
        literal:
          'true false nil',
        built_in:
          '_G _VERSION assert collectgarbage dofile error getfenv getmetatable ipairs load ' +
          'loadfile loadstring module next pairs pcall print rawequal rawget rawset require ' +
          'select setfenv setmetatable tonumber tostring type unpack xpcall coroutine debug ' +
          'io math os package string table'
      };
      var JS_IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';
      var SUBST = {
        className: 'subst',
        begin: /#\{/, end: /}/,
        keywords: KEYWORDS
      };
      var EXPRESSIONS = [
        hljs.inherit(hljs.C_NUMBER_MODE,
          {starts: {end: '(\\s*/)?', relevance: 0}}), // a number tries to eat the following slash to prevent treating it as a regexp
        {
          className: 'string',
          variants: [
            {
              begin: /'/, end: /'/,
              contains: [hljs.BACKSLASH_ESCAPE]
            },
            {
              begin: /"/, end: /"/,
              contains: [hljs.BACKSLASH_ESCAPE, SUBST]
            }
          ]
        },
        {
          className: 'built_in',
          begin: '@__' + hljs.IDENT_RE
        },
        {
          begin: '@' + hljs.IDENT_RE // relevance booster on par with CoffeeScript
        },
        {
          begin: hljs.IDENT_RE + '\\\\' + hljs.IDENT_RE // inst\method
        }
      ];
      SUBST.contains = EXPRESSIONS;
    
      var TITLE = hljs.inherit(hljs.TITLE_MODE, {begin: JS_IDENT_RE});
      var PARAMS_RE = '(\\(.*\\))?\\s*\\B[-=]>';
      var PARAMS = {
        className: 'params',
        begin: '\\([^\\(]', returnBegin: true,
        /* We need another contained nameless mode to not have every nested
        pair of parens to be called "params" */
        contains: [{
          begin: /\(/, end: /\)/,
          keywords: KEYWORDS,
          contains: ['self'].concat(EXPRESSIONS)
        }]
      };
    
      return {
        aliases: ['moon'],
        keywords: KEYWORDS,
        illegal: /\/\*/,
        contains: EXPRESSIONS.concat([
          hljs.COMMENT('--', '$'),
          {
            className: 'function',  // function: -> =>
            begin: '^\\s*' + JS_IDENT_RE + '\\s*=\\s*' + PARAMS_RE, end: '[-=]>',
            returnBegin: true,
            contains: [TITLE, PARAMS]
          },
          {
            begin: /[\(,:=]\s*/, // anonymous function start
            relevance: 0,
            contains: [
              {
                className: 'function',
                begin: PARAMS_RE, end: '[-=]>',
                returnBegin: true,
                contains: [PARAMS]
              }
            ]
          },
          {
            className: 'class',
            beginKeywords: 'class',
            end: '$',
            illegal: /[:="\[\]]/,
            contains: [
              {
                beginKeywords: 'extends',
                endsWithParent: true,
                illegal: /[:="\[\]]/,
                contains: [TITLE]
              },
              TITLE
            ]
          },
          {
            className: 'name',    // table
            begin: JS_IDENT_RE + ':', end: ':',
            returnBegin: true, returnEnd: true,
            relevance: 0
          }
        ])
      };
    };
    
    /***/ }),
    /* 512 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        case_insensitive: true,
        contains: [
          {
            beginKeywords:
              'build create index delete drop explain infer|10 insert merge prepare select update upsert|10',
            end: /;/, endsWithParent: true,
            keywords: {
              // Taken from http://developer.couchbase.com/documentation/server/current/n1ql/n1ql-language-reference/reservedwords.html
              keyword:
                'all alter analyze and any array as asc begin between binary boolean break bucket build by call ' +
                'case cast cluster collate collection commit connect continue correlate cover create database ' +
                'dataset datastore declare decrement delete derived desc describe distinct do drop each element ' +
                'else end every except exclude execute exists explain fetch first flatten for force from ' +
                'function grant group gsi having if ignore ilike in include increment index infer inline inner ' +
                'insert intersect into is join key keys keyspace known last left let letting like limit lsm map ' +
                'mapping matched materialized merge minus namespace nest not number object offset on ' +
                'option or order outer over parse partition password path pool prepare primary private privilege ' +
                'procedure public raw realm reduce rename return returning revoke right role rollback satisfies ' +
                'schema select self semi set show some start statistics string system then to transaction trigger ' +
                'truncate under union unique unknown unnest unset update upsert use user using validate value ' +
                'valued values via view when where while with within work xor',
              // Taken from http://developer.couchbase.com/documentation/server/4.5/n1ql/n1ql-language-reference/literals.html
              literal:
                'true false null missing|5',
              // Taken from http://developer.couchbase.com/documentation/server/4.5/n1ql/n1ql-language-reference/functions.html
              built_in:
                'array_agg array_append array_concat array_contains array_count array_distinct array_ifnull array_length ' +
                'array_max array_min array_position array_prepend array_put array_range array_remove array_repeat array_replace ' +
                'array_reverse array_sort array_sum avg count max min sum greatest least ifmissing ifmissingornull ifnull ' +
                'missingif nullif ifinf ifnan ifnanorinf naninf neginfif posinfif clock_millis clock_str date_add_millis ' +
                'date_add_str date_diff_millis date_diff_str date_part_millis date_part_str date_trunc_millis date_trunc_str ' +
                'duration_to_str millis str_to_millis millis_to_str millis_to_utc millis_to_zone_name now_millis now_str ' +
                'str_to_duration str_to_utc str_to_zone_name decode_json encode_json encoded_size poly_length base64 base64_encode ' +
                'base64_decode meta uuid abs acos asin atan atan2 ceil cos degrees e exp ln log floor pi power radians random ' +
                'round sign sin sqrt tan trunc object_length object_names object_pairs object_inner_pairs object_values ' +
                'object_inner_values object_add object_put object_remove object_unwrap regexp_contains regexp_like regexp_position ' +
                'regexp_replace contains initcap length lower ltrim position repeat replace rtrim split substr title trim upper ' +
                'isarray isatom isboolean isnumber isobject isstring type toarray toatom toboolean tonumber toobject tostring'
            },
            contains: [
              {
                className: 'string',
                begin: '\'', end: '\'',
                contains: [hljs.BACKSLASH_ESCAPE],
                relevance: 0
              },
              {
                className: 'string',
                begin: '"', end: '"',
                contains: [hljs.BACKSLASH_ESCAPE],
                relevance: 0
              },
              {
                className: 'symbol',
                begin: '`', end: '`',
                contains: [hljs.BACKSLASH_ESCAPE],
                relevance: 2
              },
              hljs.C_NUMBER_MODE,
              hljs.C_BLOCK_COMMENT_MODE
            ]
          },
          hljs.C_BLOCK_COMMENT_MODE
        ]
      };
    };
    
    /***/ }),
    /* 513 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var VAR = {
        className: 'variable',
        variants: [
          {begin: /\$\d+/},
          {begin: /\$\{/, end: /}/},
          {begin: '[\\$\\@]' + hljs.UNDERSCORE_IDENT_RE}
        ]
      };
      var DEFAULT = {
        endsWithParent: true,
        lexemes: '[a-z/_]+',
        keywords: {
          literal:
            'on off yes no true false none blocked debug info notice warn error crit ' +
            'select break last permanent redirect kqueue rtsig epoll poll /dev/poll'
        },
        relevance: 0,
        illegal: '=>',
        contains: [
          hljs.HASH_COMMENT_MODE,
          {
            className: 'string',
            contains: [hljs.BACKSLASH_ESCAPE, VAR],
            variants: [
              {begin: /"/, end: /"/},
              {begin: /'/, end: /'/}
            ]
          },
          // this swallows entire URLs to avoid detecting numbers within
          {
            begin: '([a-z]+):/', end: '\\s', endsWithParent: true, excludeEnd: true,
            contains: [VAR]
          },
          {
            className: 'regexp',
            contains: [hljs.BACKSLASH_ESCAPE, VAR],
            variants: [
              {begin: "\\s\\^", end: "\\s|{|;", returnEnd: true},
              // regexp locations (~, ~*)
              {begin: "~\\*?\\s+", end: "\\s|{|;", returnEnd: true},
              // *.example.com
              {begin: "\\*(\\.[a-z\\-]+)+"},
              // sub.example.*
              {begin: "([a-z\\-]+\\.)+\\*"}
            ]
          },
          // IP
          {
            className: 'number',
            begin: '\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(:\\d{1,5})?\\b'
          },
          // units
          {
            className: 'number',
            begin: '\\b\\d+[kKmMgGdshdwy]*\\b',
            relevance: 0
          },
          VAR
        ]
      };
    
      return {
        aliases: ['nginxconf'],
        contains: [
          hljs.HASH_COMMENT_MODE,
          {
            begin: hljs.UNDERSCORE_IDENT_RE + '\\s+{', returnBegin: true,
            end: '{',
            contains: [
              {
                className: 'section',
                begin: hljs.UNDERSCORE_IDENT_RE
              }
            ],
            relevance: 0
          },
          {
            begin: hljs.UNDERSCORE_IDENT_RE + '\\s', end: ';|{', returnBegin: true,
            contains: [
              {
                className: 'attribute',
                begin: hljs.UNDERSCORE_IDENT_RE,
                starts: DEFAULT
              }
            ],
            relevance: 0
          }
        ],
        illegal: '[^\\s\\}]'
      };
    };
    
    /***/ }),
    /* 514 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        aliases: ['nim'],
        keywords: {
          keyword:
            'addr and as asm bind block break case cast const continue converter ' +
            'discard distinct div do elif else end enum except export finally ' +
            'for from generic if import in include interface is isnot iterator ' +
            'let macro method mixin mod nil not notin object of or out proc ptr ' +
            'raise ref return shl shr static template try tuple type using var ' +
            'when while with without xor yield',
          literal:
            'shared guarded stdin stdout stderr result true false',
          built_in:
            'int int8 int16 int32 int64 uint uint8 uint16 uint32 uint64 float ' +
            'float32 float64 bool char string cstring pointer expr stmt void ' +
            'auto any range array openarray varargs seq set clong culong cchar ' +
            'cschar cshort cint csize clonglong cfloat cdouble clongdouble ' +
            'cuchar cushort cuint culonglong cstringarray semistatic'
        },
        contains: [ {
            className: 'meta', // Actually pragma
            begin: /{\./,
            end: /\.}/,
            relevance: 10
          }, {
            className: 'string',
            begin: /[a-zA-Z]\w*"/,
            end: /"/,
            contains: [{begin: /""/}]
          }, {
            className: 'string',
            begin: /([a-zA-Z]\w*)?"""/,
            end: /"""/
          },
          hljs.QUOTE_STRING_MODE,
          {
            className: 'type',
            begin: /\b[A-Z]\w+\b/,
            relevance: 0
          }, {
            className: 'number',
            relevance: 0,
            variants: [
              {begin: /\b(0[xX][0-9a-fA-F][_0-9a-fA-F]*)('?[iIuU](8|16|32|64))?/},
              {begin: /\b(0o[0-7][_0-7]*)('?[iIuUfF](8|16|32|64))?/},
              {begin: /\b(0(b|B)[01][_01]*)('?[iIuUfF](8|16|32|64))?/},
              {begin: /\b(\d[_\d]*)('?[iIuUfF](8|16|32|64))?/}
            ]
          },
          hljs.HASH_COMMENT_MODE
        ]
      }
    };
    
    /***/ }),
    /* 515 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var NIX_KEYWORDS = {
        keyword:
          'rec with let in inherit assert if else then',
        literal:
          'true false or and null',
        built_in:
          'import abort baseNameOf dirOf isNull builtins map removeAttrs throw ' +
          'toString derivation'
      };
      var ANTIQUOTE = {
        className: 'subst',
        begin: /\$\{/,
        end: /}/,
        keywords: NIX_KEYWORDS
      };
      var ATTRS = {
        begin: /[a-zA-Z0-9-_]+(\s*=)/, returnBegin: true,
        relevance: 0,
        contains: [
          {
            className: 'attr',
            begin: /\S+/
          }
        ]
      };
      var STRING = {
        className: 'string',
        contains: [ANTIQUOTE],
        variants: [
          {begin: "''", end: "''"},
          {begin: '"', end: '"'}
        ]
      };
      var EXPRESSIONS = [
        hljs.NUMBER_MODE,
        hljs.HASH_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        STRING,
        ATTRS
      ];
      ANTIQUOTE.contains = EXPRESSIONS;
      return {
        aliases: ["nixos"],
        keywords: NIX_KEYWORDS,
        contains: EXPRESSIONS
      };
    };
    
    /***/ }),
    /* 516 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var CONSTANTS = {
        className: 'variable',
        begin: /\$(ADMINTOOLS|APPDATA|CDBURN_AREA|CMDLINE|COMMONFILES32|COMMONFILES64|COMMONFILES|COOKIES|DESKTOP|DOCUMENTS|EXEDIR|EXEFILE|EXEPATH|FAVORITES|FONTS|HISTORY|HWNDPARENT|INSTDIR|INTERNET_CACHE|LANGUAGE|LOCALAPPDATA|MUSIC|NETHOOD|OUTDIR|PICTURES|PLUGINSDIR|PRINTHOOD|PROFILE|PROGRAMFILES32|PROGRAMFILES64|PROGRAMFILES|QUICKLAUNCH|RECENT|RESOURCES_LOCALIZED|RESOURCES|SENDTO|SMPROGRAMS|SMSTARTUP|STARTMENU|SYSDIR|TEMP|TEMPLATES|VIDEOS|WINDIR)/
      };
    
      var DEFINES = {
        // ${defines}
        className: 'variable',
        begin: /\$+{[\w\.:-]+}/
      };
    
      var VARIABLES = {
        // $variables
        className: 'variable',
        begin: /\$+\w+/,
        illegal: /\(\){}/
      };
    
      var LANGUAGES = {
        // $(language_strings)
        className: 'variable',
        begin: /\$+\([\w\^\.:-]+\)/
      };
    
      var PARAMETERS = {
        // command parameters
        className: 'params',
        begin: '(ARCHIVE|FILE_ATTRIBUTE_ARCHIVE|FILE_ATTRIBUTE_NORMAL|FILE_ATTRIBUTE_OFFLINE|FILE_ATTRIBUTE_READONLY|FILE_ATTRIBUTE_SYSTEM|FILE_ATTRIBUTE_TEMPORARY|HKCR|HKCU|HKDD|HKEY_CLASSES_ROOT|HKEY_CURRENT_CONFIG|HKEY_CURRENT_USER|HKEY_DYN_DATA|HKEY_LOCAL_MACHINE|HKEY_PERFORMANCE_DATA|HKEY_USERS|HKLM|HKPD|HKU|IDABORT|IDCANCEL|IDIGNORE|IDNO|IDOK|IDRETRY|IDYES|MB_ABORTRETRYIGNORE|MB_DEFBUTTON1|MB_DEFBUTTON2|MB_DEFBUTTON3|MB_DEFBUTTON4|MB_ICONEXCLAMATION|MB_ICONINFORMATION|MB_ICONQUESTION|MB_ICONSTOP|MB_OK|MB_OKCANCEL|MB_RETRYCANCEL|MB_RIGHT|MB_RTLREADING|MB_SETFOREGROUND|MB_TOPMOST|MB_USERICON|MB_YESNO|NORMAL|OFFLINE|READONLY|SHCTX|SHELL_CONTEXT|SYSTEM|TEMPORARY)'
      };
    
      var COMPILER = {
        // !compiler_flags
        className: 'keyword',
        begin: /\!(addincludedir|addplugindir|appendfile|cd|define|delfile|echo|else|endif|error|execute|finalize|getdllversionsystem|ifdef|ifmacrodef|ifmacrondef|ifndef|if|include|insertmacro|macroend|macro|makensis|packhdr|searchparse|searchreplace|tempfile|undef|verbose|warning)/
      };
    
      var METACHARS = {
        // $\n, $\r, $\t, $$
        className: 'subst',
        begin: /\$(\\[nrt]|\$)/
      };
    
      var PLUGINS = {
        // plug::ins
        className: 'class',
        begin: /\w+\:\:\w+/
      };
    
        var STRING = {
          className: 'string',
          variants: [
            {
              begin: '"', end: '"'
            },
            {
              begin: '\'', end: '\''
            },
            {
              begin: '`', end: '`'
            }
          ],
          illegal: /\n/,
          contains: [
            METACHARS,
            CONSTANTS,
            DEFINES,
            VARIABLES,
            LANGUAGES
          ]
      };
    
      return {
        case_insensitive: false,
        keywords: {
          keyword:
          'Abort AddBrandingImage AddSize AllowRootDirInstall AllowSkipFiles AutoCloseWindow BGFont BGGradient BrandingText BringToFront Call CallInstDLL Caption ChangeUI CheckBitmap ClearErrors CompletedText ComponentText CopyFiles CRCCheck CreateDirectory CreateFont CreateShortCut Delete DeleteINISec DeleteINIStr DeleteRegKey DeleteRegValue DetailPrint DetailsButtonText DirText DirVar DirVerify EnableWindow EnumRegKey EnumRegValue Exch Exec ExecShell ExecWait ExpandEnvStrings File FileBufSize FileClose FileErrorText FileOpen FileRead FileReadByte FileReadUTF16LE FileReadWord FileSeek FileWrite FileWriteByte FileWriteUTF16LE FileWriteWord FindClose FindFirst FindNext FindWindow FlushINI FunctionEnd GetCurInstType GetCurrentAddress GetDlgItem GetDLLVersion GetDLLVersionLocal GetErrorLevel GetFileTime GetFileTimeLocal GetFullPathName GetFunctionAddress GetInstDirError GetLabelAddress GetTempFileName Goto HideWindow Icon IfAbort IfErrors IfFileExists IfRebootFlag IfSilent InitPluginsDir InstallButtonText InstallColors InstallDir InstallDirRegKey InstProgressFlags InstType InstTypeGetText InstTypeSetText IntCmp IntCmpU IntFmt IntOp IsWindow LangString LicenseBkColor LicenseData LicenseForceSelection LicenseLangString LicenseText LoadLanguageFile LockWindow LogSet LogText ManifestDPIAware ManifestSupportedOS MessageBox MiscButtonText Name Nop OutFile Page PageCallbacks PageExEnd Pop Push Quit ReadEnvStr ReadINIStr ReadRegDWORD ReadRegStr Reboot RegDLL Rename RequestExecutionLevel ReserveFile Return RMDir SearchPath SectionEnd SectionGetFlags SectionGetInstTypes SectionGetSize SectionGetText SectionGroupEnd SectionIn SectionSetFlags SectionSetInstTypes SectionSetSize SectionSetText SendMessage SetAutoClose SetBrandingImage SetCompress SetCompressor SetCompressorDictSize SetCtlColors SetCurInstType SetDatablockOptimize SetDateSave SetDetailsPrint SetDetailsView SetErrorLevel SetErrors SetFileAttributes SetFont SetOutPath SetOverwrite SetRebootFlag SetRegView SetShellVarContext SetSilent ShowInstDetails ShowUninstDetails ShowWindow SilentInstall SilentUnInstall Sleep SpaceTexts StrCmp StrCmpS StrCpy StrLen SubCaption Unicode UninstallButtonText UninstallCaption UninstallIcon UninstallSubCaption UninstallText UninstPage UnRegDLL Var VIAddVersionKey VIFileVersion VIProductVersion WindowIcon WriteINIStr WriteRegBin WriteRegDWORD WriteRegExpandStr WriteRegStr WriteUninstaller XPStyle',
          literal:
          'admin all auto both bottom bzip2 colored components current custom directory false force hide highest ifdiff ifnewer instfiles lastused leave left license listonly lzma nevershow none normal notset off on open print right show silent silentlog smooth textonly top true try un.components un.custom un.directory un.instfiles un.license uninstConfirm user Win10 Win7 Win8 WinVista zlib'
        },
        contains: [
          hljs.HASH_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          hljs.COMMENT(
            ';',
            '$',
            {
              relevance: 0
            }
          ),
          {
            className: 'function',
            beginKeywords: 'Function PageEx Section SectionGroup', end: '$'
          },
          STRING,
          COMPILER,
          DEFINES,
          VARIABLES,
          LANGUAGES,
          PARAMETERS,
          PLUGINS,
          hljs.NUMBER_MODE
        ]
      };
    };
    
    /***/ }),
    /* 517 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var API_CLASS = {
        className: 'built_in',
        begin: '\\b(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)\\w+',
      };
      var OBJC_KEYWORDS = {
        keyword:
          'int float while char export sizeof typedef const struct for union ' +
          'unsigned long volatile static bool mutable if do return goto void ' +
          'enum else break extern asm case short default double register explicit ' +
          'signed typename this switch continue wchar_t inline readonly assign ' +
          'readwrite self @synchronized id typeof ' +
          'nonatomic super unichar IBOutlet IBAction strong weak copy ' +
          'in out inout bycopy byref oneway __strong __weak __block __autoreleasing ' +
          '@private @protected @public @try @property @end @throw @catch @finally ' +
          '@autoreleasepool @synthesize @dynamic @selector @optional @required ' +
          '@encode @package @import @defs @compatibility_alias ' +
          '__bridge __bridge_transfer __bridge_retained __bridge_retain ' +
          '__covariant __contravariant __kindof ' +
          '_Nonnull _Nullable _Null_unspecified ' +
          '__FUNCTION__ __PRETTY_FUNCTION__ __attribute__ ' +
          'getter setter retain unsafe_unretained ' +
          'nonnull nullable null_unspecified null_resettable class instancetype ' +
          'NS_DESIGNATED_INITIALIZER NS_UNAVAILABLE NS_REQUIRES_SUPER ' +
          'NS_RETURNS_INNER_POINTER NS_INLINE NS_AVAILABLE NS_DEPRECATED ' +
          'NS_ENUM NS_OPTIONS NS_SWIFT_UNAVAILABLE ' +
          'NS_ASSUME_NONNULL_BEGIN NS_ASSUME_NONNULL_END ' +
          'NS_REFINED_FOR_SWIFT NS_SWIFT_NAME NS_SWIFT_NOTHROW ' +
          'NS_DURING NS_HANDLER NS_ENDHANDLER NS_VALUERETURN NS_VOIDRETURN',
        literal:
          'false true FALSE TRUE nil YES NO NULL',
        built_in:
          'BOOL dispatch_once_t dispatch_queue_t dispatch_sync dispatch_async dispatch_once'
      };
      var LEXEMES = /[a-zA-Z@][a-zA-Z0-9_]*/;
      var CLASS_KEYWORDS = '@interface @class @protocol @implementation';
      return {
        aliases: ['mm', 'objc', 'obj-c'],
        keywords: OBJC_KEYWORDS,
        lexemes: LEXEMES,
        illegal: '</',
        contains: [
          API_CLASS,
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          hljs.C_NUMBER_MODE,
          hljs.QUOTE_STRING_MODE,
          {
            className: 'string',
            variants: [
              {
                begin: '@"', end: '"',
                illegal: '\\n',
                contains: [hljs.BACKSLASH_ESCAPE]
              },
              {
                begin: '\'', end: '[^\\\\]\'',
                illegal: '[^\\\\][^\']'
              }
            ]
          },
          {
            className: 'meta',
            begin: '#',
            end: '$',
            contains: [
              {
                className: 'meta-string',
                variants: [
                  { begin: '\"', end: '\"' },
                  { begin: '<', end: '>' }
                ]
              }
            ]
          },
          {
            className: 'class',
            begin: '(' + CLASS_KEYWORDS.split(' ').join('|') + ')\\b', end: '({|$)', excludeEnd: true,
            keywords: CLASS_KEYWORDS, lexemes: LEXEMES,
            contains: [
              hljs.UNDERSCORE_TITLE_MODE
            ]
          },
          {
            begin: '\\.'+hljs.UNDERSCORE_IDENT_RE,
            relevance: 0
          }
        ]
      };
    };
    
    /***/ }),
    /* 518 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      /* missing support for heredoc-like string (OCaml 4.0.2+) */
      return {
        aliases: ['ml'],
        keywords: {
          keyword:
            'and as assert asr begin class constraint do done downto else end ' +
            'exception external for fun function functor if in include ' +
            'inherit! inherit initializer land lazy let lor lsl lsr lxor match method!|10 method ' +
            'mod module mutable new object of open! open or private rec sig struct ' +
            'then to try type val! val virtual when while with ' +
            /* camlp4 */
            'parser value',
          built_in:
            /* built-in types */
            'array bool bytes char exn|5 float int int32 int64 list lazy_t|5 nativeint|5 string unit ' +
            /* (some) types in Pervasives */
            'in_channel out_channel ref',
          literal:
            'true false'
        },
        illegal: /\/\/|>>/,
        lexemes: '[a-z_]\\w*!?',
        contains: [
          {
            className: 'literal',
            begin: '\\[(\\|\\|)?\\]|\\(\\)',
            relevance: 0
          },
          hljs.COMMENT(
            '\\(\\*',
            '\\*\\)',
            {
              contains: ['self']
            }
          ),
          { /* type variable */
            className: 'symbol',
            begin: '\'[A-Za-z_](?!\')[\\w\']*'
            /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */
          },
          { /* polymorphic variant */
            className: 'type',
            begin: '`[A-Z][\\w\']*'
          },
          { /* module or constructor */
            className: 'type',
            begin: '\\b[A-Z][\\w\']*',
            relevance: 0
          },
          { /* don't color identifiers, but safely catch all identifiers with '*/
            begin: '[a-z_]\\w*\'[\\w\']*', relevance: 0
          },
          hljs.inherit(hljs.APOS_STRING_MODE, {className: 'string', relevance: 0}),
          hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null}),
          {
            className: 'number',
            begin:
              '\\b(0[xX][a-fA-F0-9_]+[Lln]?|' +
              '0[oO][0-7_]+[Lln]?|' +
              '0[bB][01_]+[Lln]?|' +
              '[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)',
            relevance: 0
          },
          {
            begin: /[-=]>/ // relevance booster
          }
        ]
      }
    };
    
    /***/ }),
    /* 519 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
        var SPECIAL_VARS = {
            className: 'keyword',
            begin: '\\$(f[asn]|t|vp[rtd]|children)'
        },
        LITERALS = {
            className: 'literal',
            begin: 'false|true|PI|undef'
        },
        NUMBERS = {
            className: 'number',
            begin: '\\b\\d+(\\.\\d+)?(e-?\\d+)?', //adds 1e5, 1e-10
            relevance: 0
        },
        STRING = hljs.inherit(hljs.QUOTE_STRING_MODE,{illegal: null}),
        PREPRO = {
            className: 'meta',
            keywords: {'meta-keyword': 'include use'},
            begin: 'include|use <',
            end: '>'
        },
        PARAMS = {
            className: 'params',
            begin: '\\(', end: '\\)',
            contains: ['self', NUMBERS, STRING, SPECIAL_VARS, LITERALS]
        },
        MODIFIERS = {
            begin: '[*!#%]',
            relevance: 0
        },
        FUNCTIONS = {
            className: 'function',
            beginKeywords: 'module function',
            end: '\\=|\\{',
            contains: [PARAMS, hljs.UNDERSCORE_TITLE_MODE]
        };
    
        return {
            aliases: ['scad'],
            keywords: {
                keyword: 'function module include use for intersection_for if else \\%',
                literal: 'false true PI undef',
                built_in: 'circle square polygon text sphere cube cylinder polyhedron translate rotate scale resize mirror multmatrix color offset hull minkowski union difference intersection abs sign sin cos tan acos asin atan atan2 floor round ceil ln log pow sqrt exp rands min max concat lookup str chr search version version_num norm cross parent_module echo import import_dxf dxf_linear_extrude linear_extrude rotate_extrude surface projection render children dxf_cross dxf_dim let assign'
            },
            contains: [
                hljs.C_LINE_COMMENT_MODE,
                hljs.C_BLOCK_COMMENT_MODE,
                NUMBERS,
                PREPRO,
                STRING,
                SPECIAL_VARS,
                MODIFIERS,
                FUNCTIONS
            ]
        }
    };
    
    /***/ }),
    /* 520 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var OXYGENE_KEYWORDS = 'abstract add and array as asc aspect assembly async begin break block by case class concat const copy constructor continue '+
        'create default delegate desc distinct div do downto dynamic each else empty end ensure enum equals event except exit extension external false '+
        'final finalize finalizer finally flags for forward from function future global group has if implementation implements implies in index inherited '+
        'inline interface into invariants is iterator join locked locking loop matching method mod module namespace nested new nil not notify nullable of '+
        'old on operator or order out override parallel params partial pinned private procedure property protected public queryable raise read readonly '+
        'record reintroduce remove repeat require result reverse sealed select self sequence set shl shr skip static step soft take then to true try tuple '+
        'type union unit unsafe until uses using var virtual raises volatile where while with write xor yield await mapped deprecated stdcall cdecl pascal '+
        'register safecall overload library platform reference packed strict published autoreleasepool selector strong weak unretained';
      var CURLY_COMMENT =  hljs.COMMENT(
        '{',
        '}',
        {
          relevance: 0
        }
      );
      var PAREN_COMMENT = hljs.COMMENT(
        '\\(\\*',
        '\\*\\)',
        {
          relevance: 10
        }
      );
      var STRING = {
        className: 'string',
        begin: '\'', end: '\'',
        contains: [{begin: '\'\''}]
      };
      var CHAR_STRING = {
        className: 'string', begin: '(#\\d+)+'
      };
      var FUNCTION = {
        className: 'function',
        beginKeywords: 'function constructor destructor procedure method', end: '[:;]',
        keywords: 'function constructor|10 destructor|10 procedure|10 method|10',
        contains: [
          hljs.TITLE_MODE,
          {
            className: 'params',
            begin: '\\(', end: '\\)',
            keywords: OXYGENE_KEYWORDS,
            contains: [STRING, CHAR_STRING]
          },
          CURLY_COMMENT, PAREN_COMMENT
        ]
      };
      return {
        case_insensitive: true,
        lexemes: /\.?\w+/,
        keywords: OXYGENE_KEYWORDS,
        illegal: '("|\\$[G-Zg-z]|\\/\\*|</|=>|->)',
        contains: [
          CURLY_COMMENT, PAREN_COMMENT, hljs.C_LINE_COMMENT_MODE,
          STRING, CHAR_STRING,
          hljs.NUMBER_MODE,
          FUNCTION,
          {
            className: 'class',
            begin: '=\\bclass\\b', end: 'end;',
            keywords: OXYGENE_KEYWORDS,
            contains: [
              STRING, CHAR_STRING,
              CURLY_COMMENT, PAREN_COMMENT, hljs.C_LINE_COMMENT_MODE,
              FUNCTION
            ]
          }
        ]
      };
    };
    
    /***/ }),
    /* 521 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var CURLY_SUBCOMMENT = hljs.COMMENT(
        '{',
        '}',
        {
          contains: ['self']
        }
      );
      return {
        subLanguage: 'xml', relevance: 0,
        contains: [
          hljs.COMMENT('^#', '$'),
          hljs.COMMENT(
            '\\^rem{',
            '}',
            {
              relevance: 10,
              contains: [
                CURLY_SUBCOMMENT
              ]
            }
          ),
          {
            className: 'meta',
            begin: '^@(?:BASE|USE|CLASS|OPTIONS)$',
            relevance: 10
          },
          {
            className: 'title',
            begin: '@[\\w\\-]+\\[[\\w^;\\-]*\\](?:\\[[\\w^;\\-]*\\])?(?:.*)$'
          },
          {
            className: 'variable',
            begin: '\\$\\{?[\\w\\-\\.\\:]+\\}?'
          },
          {
            className: 'keyword',
            begin: '\\^[\\w\\-\\.\\:]+'
          },
          {
            className: 'number',
            begin: '\\^#[0-9a-fA-F]+'
          },
          hljs.C_NUMBER_MODE
        ]
      };
    };
    
    /***/ }),
    /* 522 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var MACRO = {
        className: 'variable',
        begin: /\$[\w\d#@][\w\d_]*/
      };
      var TABLE = {
        className: 'variable',
        begin: /<(?!\/)/, end: />/
      };
      var QUOTE_STRING = {
        className: 'string',
        begin: /"/, end: /"/
      };
    
      return {
        aliases: ['pf.conf'],
        lexemes: /[a-z0-9_<>-]+/,
        keywords: {
          built_in: /* block match pass are "actions" in pf.conf(5), the rest are
                     * lexically similar top-level commands.
                     */
            'block match pass load anchor|5 antispoof|10 set table',
          keyword:
            'in out log quick on rdomain inet inet6 proto from port os to route' +
            'allow-opts divert-packet divert-reply divert-to flags group icmp-type' +
            'icmp6-type label once probability recieved-on rtable prio queue' +
            'tos tag tagged user keep fragment for os drop' +
            'af-to|10 binat-to|10 nat-to|10 rdr-to|10 bitmask least-stats random round-robin' +
            'source-hash static-port' +
            'dup-to reply-to route-to' +
            'parent bandwidth default min max qlimit' +
            'block-policy debug fingerprints hostid limit loginterface optimization' +
            'reassemble ruleset-optimization basic none profile skip state-defaults' +
            'state-policy timeout' +
            'const counters persist' +
            'no modulate synproxy state|5 floating if-bound no-sync pflow|10 sloppy' +
            'source-track global rule max-src-nodes max-src-states max-src-conn' +
            'max-src-conn-rate overload flush' +
            'scrub|5 max-mss min-ttl no-df|10 random-id',
          literal:
            'all any no-route self urpf-failed egress|5 unknown'
        },
        contains: [
          hljs.HASH_COMMENT_MODE,
          hljs.NUMBER_MODE,
          hljs.QUOTE_STRING_MODE,
          MACRO,
          TABLE
        ]
      };
    };
    
    /***/ }),
    /* 523 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var VARIABLE = {
        begin: '\\$+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*'
      };
      var PREPROCESSOR = {
        className: 'meta', begin: /<\?(php)?|\?>/
      };
      var STRING = {
        className: 'string',
        contains: [hljs.BACKSLASH_ESCAPE, PREPROCESSOR],
        variants: [
          {
            begin: 'b"', end: '"'
          },
          {
            begin: 'b\'', end: '\''
          },
          hljs.inherit(hljs.APOS_STRING_MODE, {illegal: null}),
          hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null})
        ]
      };
      var NUMBER = {variants: [hljs.BINARY_NUMBER_MODE, hljs.C_NUMBER_MODE]};
      return {
        aliases: ['php3', 'php4', 'php5', 'php6'],
        case_insensitive: true,
        keywords:
          'and include_once list abstract global private echo interface as static endswitch ' +
          'array null if endwhile or const for endforeach self var while isset public ' +
          'protected exit foreach throw elseif include __FILE__ empty require_once do xor ' +
          'return parent clone use __CLASS__ __LINE__ else break print eval new ' +
          'catch __METHOD__ case exception default die require __FUNCTION__ ' +
          'enddeclare final try switch continue endfor endif declare unset true false ' +
          'trait goto instanceof insteadof __DIR__ __NAMESPACE__ ' +
          'yield finally',
        contains: [
          hljs.HASH_COMMENT_MODE,
          hljs.COMMENT('//', '$', {contains: [PREPROCESSOR]}),
          hljs.COMMENT(
            '/\\*',
            '\\*/',
            {
              contains: [
                {
                  className: 'doctag',
                  begin: '@[A-Za-z]+'
                }
              ]
            }
          ),
          hljs.COMMENT(
            '__halt_compiler.+?;',
            false,
            {
              endsWithParent: true,
              keywords: '__halt_compiler',
              lexemes: hljs.UNDERSCORE_IDENT_RE
            }
          ),
          {
            className: 'string',
            begin: /<<<['"]?\w+['"]?$/, end: /^\w+;?$/,
            contains: [
              hljs.BACKSLASH_ESCAPE,
              {
                className: 'subst',
                variants: [
                  {begin: /\$\w+/},
                  {begin: /\{\$/, end: /\}/}
                ]
              }
            ]
          },
          PREPROCESSOR,
          {
            className: 'keyword', begin: /\$this\b/
          },
          VARIABLE,
          {
            // swallow composed identifiers to avoid parsing them as keywords
            begin: /(::|->)+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/
          },
          {
            className: 'function',
            beginKeywords: 'function', end: /[;{]/, excludeEnd: true,
            illegal: '\\$|\\[|%',
            contains: [
              hljs.UNDERSCORE_TITLE_MODE,
              {
                className: 'params',
                begin: '\\(', end: '\\)',
                contains: [
                  'self',
                  VARIABLE,
                  hljs.C_BLOCK_COMMENT_MODE,
                  STRING,
                  NUMBER
                ]
              }
            ]
          },
          {
            className: 'class',
            beginKeywords: 'class interface', end: '{', excludeEnd: true,
            illegal: /[:\(\$"]/,
            contains: [
              {beginKeywords: 'extends implements'},
              hljs.UNDERSCORE_TITLE_MODE
            ]
          },
          {
            beginKeywords: 'namespace', end: ';',
            illegal: /[\.']/,
            contains: [hljs.UNDERSCORE_TITLE_MODE]
          },
          {
            beginKeywords: 'use', end: ';',
            contains: [hljs.UNDERSCORE_TITLE_MODE]
          },
          {
            begin: '=>' // No markup, just a relevance booster
          },
          STRING,
          NUMBER
        ]
      };
    };
    
    /***/ }),
    /* 524 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var KEYWORDS = {
        keyword:
          'actor addressof and as be break class compile_error compile_intrinsic' +
          'consume continue delegate digestof do else elseif embed end error' +
          'for fun if ifdef in interface is isnt lambda let match new not object' +
          'or primitive recover repeat return struct then trait try type until ' +
          'use var where while with xor',
        meta:
          'iso val tag trn box ref',
        literal:
          'this false true'
      };
    
      var TRIPLE_QUOTE_STRING_MODE = {
        className: 'string',
        begin: '"""', end: '"""',
        relevance: 10
      };
    
      var QUOTE_STRING_MODE = {
        className: 'string',
        begin: '"', end: '"',
        contains: [hljs.BACKSLASH_ESCAPE]
      };
    
      var SINGLE_QUOTE_CHAR_MODE = {
        className: 'string',
        begin: '\'', end: '\'',
        contains: [hljs.BACKSLASH_ESCAPE],
        relevance: 0
      };
    
      var TYPE_NAME = {
        className: 'type',
        begin: '\\b_?[A-Z][\\w]*',
        relevance: 0
      };
    
      var PRIMED_NAME = {
        begin: hljs.IDENT_RE + '\'', relevance: 0
      };
    
      var CLASS = {
        className: 'class',
        beginKeywords: 'class actor', end: '$',
        contains: [
          hljs.TITLE_MODE,
          hljs.C_LINE_COMMENT_MODE
        ]
      }
    
      var FUNCTION = {
        className: 'function',
        beginKeywords: 'new fun', end: '=>',
        contains: [
          hljs.TITLE_MODE,
          {
            begin: /\(/, end: /\)/,
            contains: [
              TYPE_NAME,
              PRIMED_NAME,
              hljs.C_NUMBER_MODE,
              hljs.C_BLOCK_COMMENT_MODE
            ]
          },
          {
            begin: /:/, endsWithParent: true,
            contains: [TYPE_NAME]
          },
          hljs.C_LINE_COMMENT_MODE
        ]
      }
    
      return {
        keywords: KEYWORDS,
        contains: [
          CLASS,
          FUNCTION,
          TYPE_NAME,
          TRIPLE_QUOTE_STRING_MODE,
          QUOTE_STRING_MODE,
          SINGLE_QUOTE_CHAR_MODE,
          PRIMED_NAME,
          hljs.C_NUMBER_MODE,
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE
        ]
      };
    };
    
    /***/ }),
    /* 525 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var BACKTICK_ESCAPE = {
        begin: '`[\\s\\S]',
        relevance: 0
      };
      var VAR = {
        className: 'variable',
        variants: [
          {begin: /\$[\w\d][\w\d_:]*/}
        ]
      };
      var LITERAL = {
        className: 'literal',
        begin: /\$(null|true|false)\b/
      };
      var QUOTE_STRING = {
        className: 'string',
        variants: [
          { begin: /"/, end: /"/ },
          { begin: /@"/, end: /^"@/ }
        ],
        contains: [
          BACKTICK_ESCAPE,
          VAR,
          {
            className: 'variable',
            begin: /\$[A-z]/, end: /[^A-z]/
          }
        ]
      };
      var APOS_STRING = {
        className: 'string',
        variants: [
          { begin: /'/, end: /'/ },
          { begin: /@'/, end: /^'@/ }
        ]
      };
    
      var PS_HELPTAGS = {
        className: 'doctag',
        variants: [
          /* no paramater help tags */ 
          { begin: /\.(synopsis|description|example|inputs|outputs|notes|link|component|role|functionality)/ },
          /* one parameter help tags */
          { begin: /\.(parameter|forwardhelptargetname|forwardhelpcategory|remotehelprunspace|externalhelp)\s+\S+/ }
        ]
      };
      var PS_COMMENT = hljs.inherit(
        hljs.COMMENT(null, null),
        {
          variants: [
            /* single-line comment */
            { begin: /#/, end: /$/ },
            /* multi-line comment */
            { begin: /<#/, end: /#>/ }
          ],
          contains: [PS_HELPTAGS]
        }
      );
    
      return {
        aliases: ['ps'],
        lexemes: /-?[A-z\.\-]+/,
        case_insensitive: true,
        keywords: {
          keyword: 'if else foreach return function do while until elseif begin for trap data dynamicparam end break throw param continue finally in switch exit filter try process catch',
          built_in: 'Add-Computer Add-Content Add-History Add-JobTrigger Add-Member Add-PSSnapin Add-Type Checkpoint-Computer Clear-Content Clear-EventLog Clear-History Clear-Host Clear-Item Clear-ItemProperty Clear-Variable Compare-Object Complete-Transaction Connect-PSSession Connect-WSMan Convert-Path ConvertFrom-Csv ConvertFrom-Json ConvertFrom-SecureString ConvertFrom-StringData ConvertTo-Csv ConvertTo-Html ConvertTo-Json ConvertTo-SecureString ConvertTo-Xml Copy-Item Copy-ItemProperty Debug-Process Disable-ComputerRestore Disable-JobTrigger Disable-PSBreakpoint Disable-PSRemoting Disable-PSSessionConfiguration Disable-WSManCredSSP Disconnect-PSSession Disconnect-WSMan Disable-ScheduledJob Enable-ComputerRestore Enable-JobTrigger Enable-PSBreakpoint Enable-PSRemoting Enable-PSSessionConfiguration Enable-ScheduledJob Enable-WSManCredSSP Enter-PSSession Exit-PSSession Export-Alias Export-Clixml Export-Console Export-Counter Export-Csv Export-FormatData Export-ModuleMember Export-PSSession ForEach-Object Format-Custom Format-List Format-Table Format-Wide Get-Acl Get-Alias Get-AuthenticodeSignature Get-ChildItem Get-Command Get-ComputerRestorePoint Get-Content Get-ControlPanelItem Get-Counter Get-Credential Get-Culture Get-Date Get-Event Get-EventLog Get-EventSubscriber Get-ExecutionPolicy Get-FormatData Get-Host Get-HotFix Get-Help Get-History Get-IseSnippet Get-Item Get-ItemProperty Get-Job Get-JobTrigger Get-Location Get-Member Get-Module Get-PfxCertificate Get-Process Get-PSBreakpoint Get-PSCallStack Get-PSDrive Get-PSProvider Get-PSSession Get-PSSessionConfiguration Get-PSSnapin Get-Random Get-ScheduledJob Get-ScheduledJobOption Get-Service Get-TraceSource Get-Transaction Get-TypeData Get-UICulture Get-Unique Get-Variable Get-Verb Get-WinEvent Get-WmiObject Get-WSManCredSSP Get-WSManInstance Group-Object Import-Alias Import-Clixml Import-Counter Import-Csv Import-IseSnippet Import-LocalizedData Import-PSSession Import-Module Invoke-AsWorkflow Invoke-Command Invoke-Expression Invoke-History Invoke-Item Invoke-RestMethod Invoke-WebRequest Invoke-WmiMethod Invoke-WSManAction Join-Path Limit-EventLog Measure-Command Measure-Object Move-Item Move-ItemProperty New-Alias New-Event New-EventLog New-IseSnippet New-Item New-ItemProperty New-JobTrigger New-Object New-Module New-ModuleManifest New-PSDrive New-PSSession New-PSSessionConfigurationFile New-PSSessionOption New-PSTransportOption New-PSWorkflowExecutionOption New-PSWorkflowSession New-ScheduledJobOption New-Service New-TimeSpan New-Variable New-WebServiceProxy New-WinEvent New-WSManInstance New-WSManSessionOption Out-Default Out-File Out-GridView Out-Host Out-Null Out-Printer Out-String Pop-Location Push-Location Read-Host Receive-Job Register-EngineEvent Register-ObjectEvent Register-PSSessionConfiguration Register-ScheduledJob Register-WmiEvent Remove-Computer Remove-Event Remove-EventLog Remove-Item Remove-ItemProperty Remove-Job Remove-JobTrigger Remove-Module Remove-PSBreakpoint Remove-PSDrive Remove-PSSession Remove-PSSnapin Remove-TypeData Remove-Variable Remove-WmiObject Remove-WSManInstance Rename-Computer Rename-Item Rename-ItemProperty Reset-ComputerMachinePassword Resolve-Path Restart-Computer Restart-Service Restore-Computer Resume-Job Resume-Service Save-Help Select-Object Select-String Select-Xml Send-MailMessage Set-Acl Set-Alias Set-AuthenticodeSignature Set-Content Set-Date Set-ExecutionPolicy Set-Item Set-ItemProperty Set-JobTrigger Set-Location Set-PSBreakpoint Set-PSDebug Set-PSSessionConfiguration Set-ScheduledJob Set-ScheduledJobOption Set-Service Set-StrictMode Set-TraceSource Set-Variable Set-WmiInstance Set-WSManInstance Set-WSManQuickConfig Show-Command Show-ControlPanelItem Show-EventLog Sort-Object Split-Path Start-Job Start-Process Start-Service Start-Sleep Start-Transaction Start-Transcript Stop-Computer Stop-Job Stop-Process Stop-Service Stop-Transcript Suspend-Job Suspend-Service Tee-Object Test-ComputerSecureChannel Test-Connection Test-ModuleManifest Test-Path Test-PSSessionConfigurationFile Trace-Command Unblock-File Undo-Transaction Unregister-Event Unregister-PSSessionConfiguration Unregister-ScheduledJob Update-FormatData Update-Help Update-List Update-TypeData Use-Transaction Wait-Event Wait-Job Wait-Process Where-Object Write-Debug Write-Error Write-EventLog Write-Host Write-Output Write-Progress Write-Verbose Write-Warning Add-MDTPersistentDrive Disable-MDTMonitorService Enable-MDTMonitorService Get-MDTDeploymentShareStatistics Get-MDTMonitorData Get-MDTOperatingSystemCatalog Get-MDTPersistentDrive Import-MDTApplication Import-MDTDriver Import-MDTOperatingSystem Import-MDTPackage Import-MDTTaskSequence New-MDTDatabase Remove-MDTMonitorData Remove-MDTPersistentDrive Restore-MDTPersistentDrive Set-MDTMonitorData Test-MDTDeploymentShare Test-MDTMonitorData Update-MDTDatabaseSchema Update-MDTDeploymentShare Update-MDTLinkedDS Update-MDTMedia Update-MDTMedia Add-VamtProductKey Export-VamtData Find-VamtManagedMachine Get-VamtConfirmationId Get-VamtProduct Get-VamtProductKey Import-VamtData Initialize-VamtData Install-VamtConfirmationId Install-VamtProductActivation Install-VamtProductKey Update-VamtProduct',
          nomarkup: '-ne -eq -lt -gt -ge -le -not -like -notlike -match -notmatch -contains -notcontains -in -notin -replace'
        },
        contains: [
          BACKTICK_ESCAPE,
          hljs.NUMBER_MODE,
          QUOTE_STRING,
          APOS_STRING,
          LITERAL,
          VAR,
          PS_COMMENT
        ]
      };
    };
    
    /***/ }),
    /* 526 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        keywords: {
          keyword: 'BufferedReader PVector PFont PImage PGraphics HashMap boolean byte char color ' +
            'double float int long String Array FloatDict FloatList IntDict IntList JSONArray JSONObject ' +
            'Object StringDict StringList Table TableRow XML ' +
            // Java keywords
            'false synchronized int abstract float private char boolean static null if const ' +
            'for true while long throw strictfp finally protected import native final return void ' +
            'enum else break transient new catch instanceof byte super volatile case assert short ' +
            'package default double public try this switch continue throws protected public private',
          literal: 'P2D P3D HALF_PI PI QUARTER_PI TAU TWO_PI',
          title: 'setup draw',
          built_in: 'displayHeight displayWidth mouseY mouseX mousePressed pmouseX pmouseY key ' +
            'keyCode pixels focused frameCount frameRate height width ' +
            'size createGraphics beginDraw createShape loadShape PShape arc ellipse line point ' +
            'quad rect triangle bezier bezierDetail bezierPoint bezierTangent curve curveDetail curvePoint ' +
            'curveTangent curveTightness shape shapeMode beginContour beginShape bezierVertex curveVertex ' +
            'endContour endShape quadraticVertex vertex ellipseMode noSmooth rectMode smooth strokeCap ' +
            'strokeJoin strokeWeight mouseClicked mouseDragged mouseMoved mousePressed mouseReleased ' +
            'mouseWheel keyPressed keyPressedkeyReleased keyTyped print println save saveFrame day hour ' +
            'millis minute month second year background clear colorMode fill noFill noStroke stroke alpha ' +
            'blue brightness color green hue lerpColor red saturation modelX modelY modelZ screenX screenY ' +
            'screenZ ambient emissive shininess specular add createImage beginCamera camera endCamera frustum ' +
            'ortho perspective printCamera printProjection cursor frameRate noCursor exit loop noLoop popStyle ' +
            'pushStyle redraw binary boolean byte char float hex int str unbinary unhex join match matchAll nf ' +
            'nfc nfp nfs split splitTokens trim append arrayCopy concat expand reverse shorten sort splice subset ' +
            'box sphere sphereDetail createInput createReader loadBytes loadJSONArray loadJSONObject loadStrings ' +
            'loadTable loadXML open parseXML saveTable selectFolder selectInput beginRaw beginRecord createOutput ' +
            'createWriter endRaw endRecord PrintWritersaveBytes saveJSONArray saveJSONObject saveStream saveStrings ' +
            'saveXML selectOutput popMatrix printMatrix pushMatrix resetMatrix rotate rotateX rotateY rotateZ scale ' +
            'shearX shearY translate ambientLight directionalLight lightFalloff lights lightSpecular noLights normal ' +
            'pointLight spotLight image imageMode loadImage noTint requestImage tint texture textureMode textureWrap ' +
            'blend copy filter get loadPixels set updatePixels blendMode loadShader PShaderresetShader shader createFont ' +
            'loadFont text textFont textAlign textLeading textMode textSize textWidth textAscent textDescent abs ceil ' +
            'constrain dist exp floor lerp log mag map max min norm pow round sq sqrt acos asin atan atan2 cos degrees ' +
            'radians sin tan noise noiseDetail noiseSeed random randomGaussian randomSeed'
        },
        contains: [
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE,
          hljs.C_NUMBER_MODE
        ]
      };
    };
    
    /***/ }),
    /* 527 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        contains: [
          hljs.C_NUMBER_MODE,
          {
            begin: '[a-zA-Z_][\\da-zA-Z_]+\\.[\\da-zA-Z_]{1,3}', end: ':',
            excludeEnd: true
          },
          {
            begin: '(ncalls|tottime|cumtime)', end: '$',
            keywords: 'ncalls tottime|10 cumtime|10 filename',
            relevance: 10
          },
          {
            begin: 'function calls', end: '$',
            contains: [hljs.C_NUMBER_MODE],
            relevance: 10
          },
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE,
          {
            className: 'string',
            begin: '\\(', end: '\\)$',
            excludeBegin: true, excludeEnd: true,
            relevance: 0
          }
        ]
      };
    };
    
    /***/ }),
    /* 528 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
    
      var ATOM = {
    
        begin: /[a-z][A-Za-z0-9_]*/,
        relevance: 0
      };
    
      var VAR = {
    
        className: 'symbol',
        variants: [
          {begin: /[A-Z][a-zA-Z0-9_]*/},
          {begin: /_[A-Za-z0-9_]*/},
        ],
        relevance: 0
      };
    
      var PARENTED = {
    
        begin: /\(/,
        end: /\)/,
        relevance: 0
      };
    
      var LIST = {
    
        begin: /\[/,
        end: /\]/
      };
    
      var LINE_COMMENT = {
    
        className: 'comment',
        begin: /%/, end: /$/,
        contains: [hljs.PHRASAL_WORDS_MODE]
      };
    
      var BACKTICK_STRING = {
    
        className: 'string',
        begin: /`/, end: /`/,
        contains: [hljs.BACKSLASH_ESCAPE]
      };
    
      var CHAR_CODE = {
    
        className: 'string', // 0'a etc.
        begin: /0\'(\\\'|.)/
      };
    
      var SPACE_CODE = {
    
        className: 'string',
        begin: /0\'\\s/ // 0'\s
      };
    
      var PRED_OP = { // relevance booster
        begin: /:-/
      };
    
      var inner = [
    
        ATOM,
        VAR,
        PARENTED,
        PRED_OP,
        LIST,
        LINE_COMMENT,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.APOS_STRING_MODE,
        BACKTICK_STRING,
        CHAR_CODE,
        SPACE_CODE,
        hljs.C_NUMBER_MODE
      ];
    
      PARENTED.contains = inner;
      LIST.contains = inner;
    
      return {
        contains: inner.concat([
          {begin: /\.$/} // relevance booster
        ])
      };
    };
    
    /***/ }),
    /* 529 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        keywords: {
          keyword: 'package import option optional required repeated group',
          built_in: 'double float int32 int64 uint32 uint64 sint32 sint64 ' +
            'fixed32 fixed64 sfixed32 sfixed64 bool string bytes',
          literal: 'true false'
        },
        contains: [
          hljs.QUOTE_STRING_MODE,
          hljs.NUMBER_MODE,
          hljs.C_LINE_COMMENT_MODE,
          {
            className: 'class',
            beginKeywords: 'message enum service', end: /\{/,
            illegal: /\n/,
            contains: [
              hljs.inherit(hljs.TITLE_MODE, {
                starts: {endsWithParent: true, excludeEnd: true} // hack: eating everything after the first title
              })
            ]
          },
          {
            className: 'function',
            beginKeywords: 'rpc',
            end: /;/, excludeEnd: true,
            keywords: 'rpc returns'
          },
          {
            begin: /^\s*[A-Z_]+/,
            end: /\s*=/, excludeEnd: true
          }
        ]
      };
    };
    
    /***/ }),
    /* 530 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
    
      var PUPPET_KEYWORDS = {
        keyword:
        /* language keywords */
          'and case default else elsif false if in import enherits node or true undef unless main settings $string ',
        literal:
        /* metaparameters */
          'alias audit before loglevel noop require subscribe tag ' +
        /* normal attributes */
          'owner ensure group mode name|0 changes context force incl lens load_path onlyif provider returns root show_diff type_check ' +
          'en_address ip_address realname command environment hour monute month monthday special target weekday '+
          'creates cwd ogoutput refresh refreshonly tries try_sleep umask backup checksum content ctime force ignore ' +
          'links mtime purge recurse recurselimit replace selinux_ignore_defaults selrange selrole seltype seluser source ' +
          'souirce_permissions sourceselect validate_cmd validate_replacement allowdupe attribute_membership auth_membership forcelocal gid '+
          'ia_load_module members system host_aliases ip allowed_trunk_vlans description device_url duplex encapsulation etherchannel ' +
          'native_vlan speed principals allow_root auth_class auth_type authenticate_user k_of_n mechanisms rule session_owner shared options ' +
          'device fstype enable hasrestart directory present absent link atboot blockdevice device dump pass remounts poller_tag use ' +
          'message withpath adminfile allow_virtual allowcdrom category configfiles flavor install_options instance package_settings platform ' +
          'responsefile status uninstall_options vendor unless_system_user unless_uid binary control flags hasstatus manifest pattern restart running ' +
          'start stop allowdupe auths expiry gid groups home iterations key_membership keys managehome membership password password_max_age ' +
          'password_min_age profile_membership profiles project purge_ssh_keys role_membership roles salt shell uid baseurl cost descr enabled ' +
          'enablegroups exclude failovermethod gpgcheck gpgkey http_caching include includepkgs keepalive metadata_expire metalink mirrorlist ' +
          'priority protect proxy proxy_password proxy_username repo_gpgcheck s3_enabled skip_if_unavailable sslcacert sslclientcert sslclientkey ' +
          'sslverify mounted',
        built_in:
        /* core facts */
          'architecture augeasversion blockdevices boardmanufacturer boardproductname boardserialnumber cfkey dhcp_servers ' +
          'domain ec2_ ec2_userdata facterversion filesystems ldom fqdn gid hardwareisa hardwaremodel hostname id|0 interfaces '+
          'ipaddress ipaddress_ ipaddress6 ipaddress6_ iphostnumber is_virtual kernel kernelmajversion kernelrelease kernelversion ' +
          'kernelrelease kernelversion lsbdistcodename lsbdistdescription lsbdistid lsbdistrelease lsbmajdistrelease lsbminordistrelease ' +
          'lsbrelease macaddress macaddress_ macosx_buildversion macosx_productname macosx_productversion macosx_productverson_major ' +
          'macosx_productversion_minor manufacturer memoryfree memorysize netmask metmask_ network_ operatingsystem operatingsystemmajrelease '+
          'operatingsystemrelease osfamily partitions path physicalprocessorcount processor processorcount productname ps puppetversion '+
          'rubysitedir rubyversion selinux selinux_config_mode selinux_config_policy selinux_current_mode selinux_current_mode selinux_enforced '+
          'selinux_policyversion serialnumber sp_ sshdsakey sshecdsakey sshrsakey swapencrypted swapfree swapsize timezone type uniqueid uptime '+
          'uptime_days uptime_hours uptime_seconds uuid virtual vlans xendomains zfs_version zonenae zones zpool_version'
      };
    
      var COMMENT = hljs.COMMENT('#', '$');
    
      var IDENT_RE = '([A-Za-z_]|::)(\\w|::)*';
    
      var TITLE = hljs.inherit(hljs.TITLE_MODE, {begin: IDENT_RE});
    
      var VARIABLE = {className: 'variable', begin: '\\$' + IDENT_RE};
    
      var STRING = {
        className: 'string',
        contains: [hljs.BACKSLASH_ESCAPE, VARIABLE],
        variants: [
          {begin: /'/, end: /'/},
          {begin: /"/, end: /"/}
        ]
      };
    
      return {
        aliases: ['pp'],
        contains: [
          COMMENT,
          VARIABLE,
          STRING,
          {
            beginKeywords: 'class', end: '\\{|;',
            illegal: /=/,
            contains: [TITLE, COMMENT]
          },
          {
            beginKeywords: 'define', end: /\{/,
            contains: [
              {
                className: 'section', begin: hljs.IDENT_RE, endsParent: true
              }
            ]
          },
          {
            begin: hljs.IDENT_RE + '\\s+\\{', returnBegin: true,
            end: /\S/,
            contains: [
              {
                className: 'keyword',
                begin: hljs.IDENT_RE
              },
              {
                begin: /\{/, end: /\}/,
                keywords: PUPPET_KEYWORDS,
                relevance: 0,
                contains: [
                  STRING,
                  COMMENT,
                  {
                    begin:'[a-zA-Z_]+\\s*=>',
                    returnBegin: true, end: '=>',
                    contains: [
                      {
                        className: 'attr',
                        begin: hljs.IDENT_RE,
                      }
                    ]
                  },
                  {
                    className: 'number',
                    begin: '(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b',
                    relevance: 0
                  },
                  VARIABLE
                ]
              }
            ],
            relevance: 0
          }
        ]
      }
    };
    
    /***/ }),
    /* 531 */
    /***/ (function(module, exports) {
    
    module.exports = // Base deafult colors in PB IDE: background: #FFFFDF; foreground: #000000;
    
    function(hljs) {
      var STRINGS = { // PB IDE color: #0080FF (Azure Radiance)
        className: 'string',
        begin: '(~)?"', end: '"',
        illegal: '\\n'
      };
      var CONSTANTS = { // PB IDE color: #924B72 (Cannon Pink)
        //  "#" + a letter or underscore + letters, digits or underscores + (optional) "$"
        className: 'symbol',
        begin: '#[a-zA-Z_]\\w*\\$?'
      };
    
      return {
        aliases: ['pb', 'pbi'],
        keywords: // PB IDE color: #006666 (Blue Stone) + Bold
          // The following keywords list was taken and adapted from GuShH's PureBasic language file for GeSHi...
          'And As Break CallDebugger Case CompilerCase CompilerDefault CompilerElse CompilerEndIf CompilerEndSelect ' +
          'CompilerError CompilerIf CompilerSelect Continue Data DataSection EndDataSection Debug DebugLevel ' +
          'Default Define Dim DisableASM DisableDebugger DisableExplicit Else ElseIf EnableASM ' +
          'EnableDebugger EnableExplicit End EndEnumeration EndIf EndImport EndInterface EndMacro EndProcedure ' +
          'EndSelect EndStructure EndStructureUnion EndWith Enumeration Extends FakeReturn For Next ForEach ' +
          'ForEver Global Gosub Goto If Import ImportC IncludeBinary IncludeFile IncludePath Interface Macro ' +
          'NewList Not Or ProcedureReturn Protected Prototype ' +
          'PrototypeC Read ReDim Repeat Until Restore Return Select Shared Static Step Structure StructureUnion ' +
          'Swap To Wend While With XIncludeFile XOr ' +
          'Procedure ProcedureC ProcedureCDLL ProcedureDLL Declare DeclareC DeclareCDLL DeclareDLL',
        contains: [
          // COMMENTS | PB IDE color: #00AAAA (Persian Green)
          hljs.COMMENT(';', '$', {relevance: 0}),
    
          { // PROCEDURES DEFINITIONS
            className: 'function',
            begin: '\\b(Procedure|Declare)(C|CDLL|DLL)?\\b',
            end: '\\(',
            excludeEnd: true,
            returnBegin: true,
            contains: [
              { // PROCEDURE KEYWORDS | PB IDE color: #006666 (Blue Stone) + Bold
                className: 'keyword',
                begin: '(Procedure|Declare)(C|CDLL|DLL)?',
                excludeEnd: true
              },
              { // PROCEDURE RETURN TYPE SETTING | PB IDE color: #000000 (Black)
                className: 'type',
                begin: '\\.\\w*'
                // end: ' ',
              },
              hljs.UNDERSCORE_TITLE_MODE // PROCEDURE NAME | PB IDE color: #006666 (Blue Stone)
            ]
          },
          STRINGS,
          CONSTANTS
        ]
      };
    };
    
    /***/ }),
    /* 532 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var KEYWORDS = {
        keyword:
          'and elif is global as in if from raise for except finally print import pass return ' +
          'exec else break not with class assert yield try while continue del or def lambda ' +
          'async await nonlocal|10 None True False',
        built_in:
          'Ellipsis NotImplemented'
      };
      var PROMPT = {
        className: 'meta',  begin: /^(>>>|\.\.\.) /
      };
      var SUBST = {
        className: 'subst',
        begin: /\{/, end: /\}/,
        keywords: KEYWORDS,
        illegal: /#/
      };
      var STRING = {
        className: 'string',
        contains: [hljs.BACKSLASH_ESCAPE],
        variants: [
          {
            begin: /(u|b)?r?'''/, end: /'''/,
            contains: [PROMPT],
            relevance: 10
          },
          {
            begin: /(u|b)?r?"""/, end: /"""/,
            contains: [PROMPT],
            relevance: 10
          },
          {
            begin: /(fr|rf|f)'''/, end: /'''/,
            contains: [PROMPT, SUBST]
          },
          {
            begin: /(fr|rf|f)"""/, end: /"""/,
            contains: [PROMPT, SUBST]
          },
          {
            begin: /(u|r|ur)'/, end: /'/,
            relevance: 10
          },
          {
            begin: /(u|r|ur)"/, end: /"/,
            relevance: 10
          },
          {
            begin: /(b|br)'/, end: /'/
          },
          {
            begin: /(b|br)"/, end: /"/
          },
          {
            begin: /(fr|rf|f)'/, end: /'/,
            contains: [SUBST]
          },
          {
            begin: /(fr|rf|f)"/, end: /"/,
            contains: [SUBST]
          },
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE
        ]
      };
      var NUMBER = {
        className: 'number', relevance: 0,
        variants: [
          {begin: hljs.BINARY_NUMBER_RE + '[lLjJ]?'},
          {begin: '\\b(0o[0-7]+)[lLjJ]?'},
          {begin: hljs.C_NUMBER_RE + '[lLjJ]?'}
        ]
      };
      var PARAMS = {
        className: 'params',
        begin: /\(/, end: /\)/,
        contains: ['self', PROMPT, NUMBER, STRING]
      };
      SUBST.contains = [STRING, NUMBER, PROMPT];
      return {
        aliases: ['py', 'gyp'],
        keywords: KEYWORDS,
        illegal: /(<\/|->|\?)|=>/,
        contains: [
          PROMPT,
          NUMBER,
          STRING,
          hljs.HASH_COMMENT_MODE,
          {
            variants: [
              {className: 'function', beginKeywords: 'def'},
              {className: 'class', beginKeywords: 'class'}
            ],
            end: /:/,
            illegal: /[${=;\n,]/,
            contains: [
              hljs.UNDERSCORE_TITLE_MODE,
              PARAMS,
              {
                begin: /->/, endsWithParent: true,
                keywords: 'None'
              }
            ]
          },
          {
            className: 'meta',
            begin: /^[\t ]*@/, end: /$/
          },
          {
            begin: /\b(print|exec)\(/ // don’t highlight keywords-turned-functions in Python 3
          }
        ]
      };
    };
    
    /***/ }),
    /* 533 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var Q_KEYWORDS = {
      keyword:
        'do while select delete by update from',
      literal:
        '0b 1b',
      built_in:
        'neg not null string reciprocal floor ceiling signum mod xbar xlog and or each scan over prior mmu lsq inv md5 ltime gtime count first var dev med cov cor all any rand sums prds mins maxs fills deltas ratios avgs differ prev next rank reverse iasc idesc asc desc msum mcount mavg mdev xrank mmin mmax xprev rotate distinct group where flip type key til get value attr cut set upsert raze union inter except cross sv vs sublist enlist read0 read1 hopen hclose hdel hsym hcount peach system ltrim rtrim trim lower upper ssr view tables views cols xcols keys xkey xcol xasc xdesc fkeys meta lj aj aj0 ij pj asof uj ww wj wj1 fby xgroup ungroup ej save load rsave rload show csv parse eval min max avg wavg wsum sin cos tan sum',
      type:
        '`float `double int `timestamp `timespan `datetime `time `boolean `symbol `char `byte `short `long `real `month `date `minute `second `guid'
      };
      return {
      aliases:['k', 'kdb'],
      keywords: Q_KEYWORDS,
      lexemes: /(`?)[A-Za-z0-9_]+\b/,
      contains: [
      hljs.C_LINE_COMMENT_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.C_NUMBER_MODE
         ]
      };
    };
    
    /***/ }),
    /* 534 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var KEYWORDS = {
          keyword:
            'in of on if for while finally var new function do return void else break catch ' +
            'instanceof with throw case default try this switch continue typeof delete ' +
            'let yield const export super debugger as async await import',
          literal:
            'true false null undefined NaN Infinity',
          built_in:
            'eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent ' +
            'encodeURI encodeURIComponent escape unescape Object Function Boolean Error ' +
            'EvalError InternalError RangeError ReferenceError StopIteration SyntaxError ' +
            'TypeError URIError Number Math Date String RegExp Array Float32Array ' +
            'Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array ' +
            'Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require ' +
            'module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect ' +
            'Behavior bool color coordinate date double enumeration font geocircle georectangle ' +
            'geoshape int list matrix4x4 parent point quaternion real rect ' +
            'size string url variant vector2d vector3d vector4d' +
            'Promise'
        };
    
      var QML_IDENT_RE = '[a-zA-Z_][a-zA-Z0-9\\._]*';
    
      // Isolate property statements. Ends at a :, =, ;, ,, a comment or end of line.
      // Use property class.
      var PROPERTY = {
          className: 'keyword',
          begin: '\\bproperty\\b',
          starts: {
            className: 'string',
            end: '(:|=|;|,|//|/\\*|$)',
            returnEnd: true
          }
      };
    
      // Isolate signal statements. Ends at a ) a comment or end of line.
      // Use property class.
      var SIGNAL = {
          className: 'keyword',
          begin: '\\bsignal\\b',
          starts: {
            className: 'string',
            end: '(\\(|:|=|;|,|//|/\\*|$)',
            returnEnd: true
          }
      };
    
      // id: is special in QML. When we see id: we want to mark the id: as attribute and
      // emphasize the token following.
      var ID_ID = {
          className: 'attribute',
          begin: '\\bid\\s*:',
          starts: {
            className: 'string',
            end: QML_IDENT_RE,
            returnEnd: false
          }
      };
    
      // Find QML object attribute. An attribute is a QML identifier followed by :.
      // Unfortunately it's hard to know where it ends, as it may contain scalars,
      // objects, object definitions, or javascript. The true end is either when the parent
      // ends or the next attribute is detected.
      var QML_ATTRIBUTE = {
        begin: QML_IDENT_RE + '\\s*:',
        returnBegin: true,
        contains: [
          {
            className: 'attribute',
            begin: QML_IDENT_RE,
            end: '\\s*:',
            excludeEnd: true,
            relevance: 0
          }
        ],
        relevance: 0
      };
    
      // Find QML object. A QML object is a QML identifier followed by { and ends at the matching }.
      // All we really care about is finding IDENT followed by { and just mark up the IDENT and ignore the {.
      var QML_OBJECT = {
        begin: QML_IDENT_RE + '\\s*{', end: '{',
        returnBegin: true,
        relevance: 0,
        contains: [
          hljs.inherit(hljs.TITLE_MODE, {begin: QML_IDENT_RE})
        ]
      };
    
      return {
        aliases: ['qt'],
        case_insensitive: false,
        keywords: KEYWORDS,
        contains: [
          {
            className: 'meta',
            begin: /^\s*['"]use (strict|asm)['"]/
          },
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE,
          { // template string
            className: 'string',
            begin: '`', end: '`',
            contains: [
              hljs.BACKSLASH_ESCAPE,
              {
                className: 'subst',
                begin: '\\$\\{', end: '\\}'
              }
            ]
          },
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          {
            className: 'number',
            variants: [
              { begin: '\\b(0[bB][01]+)' },
              { begin: '\\b(0[oO][0-7]+)' },
              { begin: hljs.C_NUMBER_RE }
            ],
            relevance: 0
          },
          { // "value" container
            begin: '(' + hljs.RE_STARTERS_RE + '|\\b(case|return|throw)\\b)\\s*',
            keywords: 'return throw case',
            contains: [
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              hljs.REGEXP_MODE,
              { // E4X / JSX
                begin: /</, end: />\s*[);\]]/,
                relevance: 0,
                subLanguage: 'xml'
              }
            ],
            relevance: 0
          },
          SIGNAL,
          PROPERTY,
          {
            className: 'function',
            beginKeywords: 'function', end: /\{/, excludeEnd: true,
            contains: [
              hljs.inherit(hljs.TITLE_MODE, {begin: /[A-Za-z$_][0-9A-Za-z$_]*/}),
              {
                className: 'params',
                begin: /\(/, end: /\)/,
                excludeBegin: true,
                excludeEnd: true,
                contains: [
                  hljs.C_LINE_COMMENT_MODE,
                  hljs.C_BLOCK_COMMENT_MODE
                ]
              }
            ],
            illegal: /\[|%/
          },
          {
            begin: '\\.' + hljs.IDENT_RE, relevance: 0 // hack: prevents detection of keywords after dots
          },
          ID_ID,
          QML_ATTRIBUTE,
          QML_OBJECT
        ],
        illegal: /#/
      };
    };
    
    /***/ }),
    /* 535 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var IDENT_RE = '([a-zA-Z]|\\.[a-zA-Z.])[a-zA-Z0-9._]*';
    
      return {
        contains: [
          hljs.HASH_COMMENT_MODE,
          {
            begin: IDENT_RE,
            lexemes: IDENT_RE,
            keywords: {
              keyword:
                'function if in break next repeat else for return switch while try tryCatch ' +
                'stop warning require library attach detach source setMethod setGeneric ' +
                'setGroupGeneric setClass ...',
              literal:
                'NULL NA TRUE FALSE T F Inf NaN NA_integer_|10 NA_real_|10 NA_character_|10 ' +
                'NA_complex_|10'
            },
            relevance: 0
          },
          {
            // hex value
            className: 'number',
            begin: "0[xX][0-9a-fA-F]+[Li]?\\b",
            relevance: 0
          },
          {
            // explicit integer
            className: 'number',
            begin: "\\d+(?:[eE][+\\-]?\\d*)?L\\b",
            relevance: 0
          },
          {
            // number with trailing decimal
            className: 'number',
            begin: "\\d+\\.(?!\\d)(?:i\\b)?",
            relevance: 0
          },
          {
            // number
            className: 'number',
            begin: "\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d*)?i?\\b",
            relevance: 0
          },
          {
            // number with leading decimal
            className: 'number',
            begin: "\\.\\d+(?:[eE][+\\-]?\\d*)?i?\\b",
            relevance: 0
          },
    
          {
            // escaped identifier
            begin: '`',
            end: '`',
            relevance: 0
          },
    
          {
            className: 'string',
            contains: [hljs.BACKSLASH_ESCAPE],
            variants: [
              {begin: '"', end: '"'},
              {begin: "'", end: "'"}
            ]
          }
        ]
      };
    };
    
    /***/ }),
    /* 536 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        keywords:
          'ArchiveRecord AreaLightSource Atmosphere Attribute AttributeBegin AttributeEnd Basis ' +
          'Begin Blobby Bound Clipping ClippingPlane Color ColorSamples ConcatTransform Cone ' +
          'CoordinateSystem CoordSysTransform CropWindow Curves Cylinder DepthOfField Detail ' +
          'DetailRange Disk Displacement Display End ErrorHandler Exposure Exterior Format ' +
          'FrameAspectRatio FrameBegin FrameEnd GeneralPolygon GeometricApproximation Geometry ' +
          'Hider Hyperboloid Identity Illuminate Imager Interior LightSource ' +
          'MakeCubeFaceEnvironment MakeLatLongEnvironment MakeShadow MakeTexture Matte ' +
          'MotionBegin MotionEnd NuPatch ObjectBegin ObjectEnd ObjectInstance Opacity Option ' +
          'Orientation Paraboloid Patch PatchMesh Perspective PixelFilter PixelSamples ' +
          'PixelVariance Points PointsGeneralPolygons PointsPolygons Polygon Procedural Projection ' +
          'Quantize ReadArchive RelativeDetail ReverseOrientation Rotate Scale ScreenWindow ' +
          'ShadingInterpolation ShadingRate Shutter Sides Skew SolidBegin SolidEnd Sphere ' +
          'SubdivisionMesh Surface TextureCoordinates Torus Transform TransformBegin TransformEnd ' +
          'TransformPoints Translate TrimCurve WorldBegin WorldEnd',
        illegal: '</',
        contains: [
          hljs.HASH_COMMENT_MODE,
          hljs.C_NUMBER_MODE,
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE
        ]
      };
    };
    
    /***/ }),
    /* 537 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var IDENTIFIER = '[a-zA-Z-_][^\\n{]+\\{';
    
      var PROPERTY = {
        className: 'attribute',
        begin: /[a-zA-Z-_]+/, end: /\s*:/, excludeEnd: true,
        starts: {
          end: ';',
          relevance: 0,
          contains: [
            {
              className: 'variable',
              begin: /\.[a-zA-Z-_]+/
            },
            {
              className: 'keyword',
              begin: /\(optional\)/
            }
          ]
        }
      };
    
      return {
        aliases: ['graph', 'instances'],
        case_insensitive: true,
        keywords: 'import',
        contains: [
          // Facet sections
          {
            begin: '^facet ' + IDENTIFIER,
            end: '}',
            keywords: 'facet',
            contains: [
              PROPERTY,
              hljs.HASH_COMMENT_MODE
            ]
          },
    
          // Instance sections
          {
            begin: '^\\s*instance of ' + IDENTIFIER,
            end: '}',
            keywords: 'name count channels instance-data instance-state instance of',
            illegal: /\S/,
            contains: [
              'self',
              PROPERTY,
              hljs.HASH_COMMENT_MODE
            ]
          },
    
          // Component sections
          {
            begin: '^' + IDENTIFIER,
            end: '}',
            contains: [
              PROPERTY,
              hljs.HASH_COMMENT_MODE
            ]
          },
    
          // Comments
          hljs.HASH_COMMENT_MODE
        ]
      };
    };
    
    /***/ }),
    /* 538 */
    /***/ (function(module, exports) {
    
    module.exports = // Colors from RouterOS terminal:
    //   green        - #0E9A00
    //   teal         - #0C9A9A
    //   purple       - #99069A
    //   light-brown  - #9A9900
    
    function(hljs) {
    
      var STATEMENTS = 'foreach do while for if from to step else on-error and or not in';
    
      // Global commands: Every global command should start with ":" token, otherwise it will be treated as variable.
      var GLOBAL_COMMANDS = 'global local beep delay put len typeof pick log time set find environment terminal error execute parse resolve toarray tobool toid toip toip6 tonum tostr totime';
    
      // Common commands: Following commands available from most sub-menus:
      var COMMON_COMMANDS = 'add remove enable disable set get print export edit find run debug error info warning';
    
      var LITERALS = 'true false yes no nothing nil null';
    
      var OBJECTS = 'traffic-flow traffic-generator firewall scheduler aaa accounting address-list address align area bandwidth-server bfd bgp bridge client clock community config connection console customer default dhcp-client dhcp-server discovery dns e-mail ethernet filter firewall firmware gps graphing group hardware health hotspot identity igmp-proxy incoming instance interface ip ipsec ipv6 irq l2tp-server lcd ldp logging mac-server mac-winbox mangle manual mirror mme mpls nat nd neighbor network note ntp ospf ospf-v3 ovpn-server page peer pim ping policy pool port ppp pppoe-client pptp-server prefix profile proposal proxy queue radius resource rip ripng route routing screen script security-profiles server service service-port settings shares smb sms sniffer snmp snooper socks sstp-server system tool tracking type upgrade upnp user-manager users user vlan secret vrrp watchdog web-access wireless pptp pppoe lan wan layer7-protocol lease simple raw';
    
      // print parameters
      // Several parameters are available for print command:
      // ToDo: var PARAMETERS_PRINT = 'append as-value brief detail count-only file follow follow-only from interval terse value-list without-paging where info';
      // ToDo: var OPERATORS = '&& and ! not || or in ~ ^ & << >> + - * /';
      // ToDo: var TYPES = 'num number bool boolean str string ip ip6-prefix id time array';
      // ToDo: The following tokens serve as delimiters in the grammar: ()  []  {}  :   ;   $   / 
    
      var VAR_PREFIX = 'global local set for foreach';
    
      var VAR = {
        className: 'variable',
        variants: [
          {begin: /\$[\w\d#@][\w\d_]*/},
          {begin: /\$\{(.*?)}/}
        ]
      };
      
      var QUOTE_STRING = {
        className: 'string',
        begin: /"/, end: /"/,
        contains: [
          hljs.BACKSLASH_ESCAPE,
          VAR,
          {
            className: 'variable',
            begin: /\$\(/, end: /\)/,
            contains: [hljs.BACKSLASH_ESCAPE]
          }
        ]
      };
      
      var APOS_STRING = {
        className: 'string',
        begin: /'/, end: /'/
      };
      
      var IPADDR = '((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\b';
      var IPADDR_wBITMASK =  IPADDR+'/(3[0-2]|[1-2][0-9]|\\d)';
      //////////////////////////////////////////////////////////////////////
      return {
        aliases: ['routeros', 'mikrotik'],
        case_insensitive: true,
        lexemes: /:?[\w-]+/,
        keywords: {
          literal: LITERALS,
          keyword: STATEMENTS + ' :' + STATEMENTS.split(' ').join(' :') + ' :' + GLOBAL_COMMANDS.split(' ').join(' :'),
        },
        contains: [
          { // недопустимые конструкции
            variants: [
              { begin: /^@/, end: /$/, },               // dns
              { begin: /\/\*/, end: /\*\//, },          // -- comment
              { begin: /%%/, end: /$/, },               // -- comment
              { begin: /^'/, end: /$/, },               // Monkey one line comment
              { begin: /^\s*\/[\w-]+=/, end: /$/, },    // jboss-cli
              { begin: /\/\//, end: /$/, },             // Stan comment
              { begin: /^\[\</, end: /\>\]$/, },        // F# class declaration?
              { begin: /<\//, end: />/, },              // HTML tags
              { begin: /^facet /, end: /\}/, },         // roboconf - лютый костыль )))
              { begin: '^1\\.\\.(\\d+)$', end: /$/, },  // tap  
            ],
            illegal: /./,
          },
          hljs.COMMENT('^#', '$'),
          QUOTE_STRING,
          APOS_STRING,
          VAR,
          { // attribute=value
            begin: /[\w-]+\=([^\s\{\}\[\]\(\)]+)/, 
            relevance: 0,
            returnBegin: true,
            contains: [
              {
                className: 'attribute',
                begin: /[^=]+/
              },
              {
                begin: /=/, 
                endsWithParent:  true,
                relevance: 0,
                contains: [
                  QUOTE_STRING,
                  APOS_STRING,
                  VAR,
                  {
                    className: 'literal',
                    begin: '\\b(' + LITERALS.split(' ').join('|') + ')\\b',
                  },
                  /*{
                    // IPv4 addresses and subnets
                    className: 'number',
                    variants: [
                      {begin: IPADDR_wBITMASK+'(,'+IPADDR_wBITMASK+')*'}, //192.168.0.0/24,1.2.3.0/24
                      {begin: IPADDR+'-'+IPADDR},       // 192.168.0.1-192.168.0.3
                      {begin: IPADDR+'(,'+IPADDR+')*'}, // 192.168.0.1,192.168.0.34,192.168.24.1,192.168.0.1
                    ]
                  }, // */
                  /*{
                    // MAC addresses and DHCP Client IDs
                    className: 'number',
                    begin: /\b(1:)?([0-9A-Fa-f]{1,2}[:-]){5}([0-9A-Fa-f]){1,2}\b/,
                  }, //*/
                  {
                    // Не форматировать не классифицированные значения. Необходимо для исключения подсветки значений как built_in.
                    // className: 'number',  
                    begin: /("[^"]*"|[^\s\{\}\[\]]+)/,
                  }, //*/
                ]
              } //*/
            ]
          },//*/
          {
            // HEX values
            className: 'number',
            begin: /\*[0-9a-fA-F]+/,
          }, //*/
    
          { 
            begin: '\\b(' + COMMON_COMMANDS.split(' ').join('|') + ')([\\s\[\(]|\])',
            returnBegin: true,
            contains: [
              {
                className: 'builtin-name', //'function',
                begin: /\w+/,
              },
            ],  
          },
          
          { 
            className: 'built_in',
            variants: [
              {begin: '(\\.\\./|/|\\s)((' + OBJECTS.split(' ').join('|') + ');?\\s)+',relevance: 10,},
              {begin: /\.\./,},
            ],
          },//*/
        ]
      };
    };
    
    /***/ }),
    /* 539 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        keywords: {
          keyword:
            'float color point normal vector matrix while for if do return else break extern continue',
          built_in:
            'abs acos ambient area asin atan atmosphere attribute calculatenormal ceil cellnoise ' +
            'clamp comp concat cos degrees depth Deriv diffuse distance Du Dv environment exp ' +
            'faceforward filterstep floor format fresnel incident length lightsource log match ' +
            'max min mod noise normalize ntransform opposite option phong pnoise pow printf ' +
            'ptlined radians random reflect refract renderinfo round setcomp setxcomp setycomp ' +
            'setzcomp shadow sign sin smoothstep specular specularbrdf spline sqrt step tan ' +
            'texture textureinfo trace transform vtransform xcomp ycomp zcomp'
        },
        illegal: '</',
        contains: [
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          hljs.QUOTE_STRING_MODE,
          hljs.APOS_STRING_MODE,
          hljs.C_NUMBER_MODE,
          {
            className: 'meta',
            begin: '#', end: '$'
          },
          {
            className: 'class',
            beginKeywords: 'surface displacement light volume imager', end: '\\('
          },
          {
            beginKeywords: 'illuminate illuminance gather', end: '\\('
          }
        ]
      };
    };
    
    /***/ }),
    /* 540 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        keywords: {
           keyword: 'BILL_PERIOD BILL_START BILL_STOP RS_EFFECTIVE_START RS_EFFECTIVE_STOP RS_JURIS_CODE RS_OPCO_CODE ' +
             'INTDADDATTRIBUTE|5 INTDADDVMSG|5 INTDBLOCKOP|5 INTDBLOCKOPNA|5 INTDCLOSE|5 INTDCOUNT|5 ' +
             'INTDCOUNTSTATUSCODE|5 INTDCREATEMASK|5 INTDCREATEDAYMASK|5 INTDCREATEFACTORMASK|5 ' +
             'INTDCREATEHANDLE|5 INTDCREATEOVERRIDEDAYMASK|5 INTDCREATEOVERRIDEMASK|5 ' +
             'INTDCREATESTATUSCODEMASK|5 INTDCREATETOUPERIOD|5 INTDDELETE|5 INTDDIPTEST|5 INTDEXPORT|5 ' +
             'INTDGETERRORCODE|5 INTDGETERRORMESSAGE|5 INTDISEQUAL|5 INTDJOIN|5 INTDLOAD|5 INTDLOADACTUALCUT|5 ' +
             'INTDLOADDATES|5 INTDLOADHIST|5 INTDLOADLIST|5 INTDLOADLISTDATES|5 INTDLOADLISTENERGY|5 ' +
             'INTDLOADLISTHIST|5 INTDLOADRELATEDCHANNEL|5 INTDLOADSP|5 INTDLOADSTAGING|5 INTDLOADUOM|5 ' +
             'INTDLOADUOMDATES|5 INTDLOADUOMHIST|5 INTDLOADVERSION|5 INTDOPEN|5 INTDREADFIRST|5 INTDREADNEXT|5 ' +
             'INTDRECCOUNT|5 INTDRELEASE|5 INTDREPLACE|5 INTDROLLAVG|5 INTDROLLPEAK|5 INTDSCALAROP|5 INTDSCALE|5 ' +
             'INTDSETATTRIBUTE|5 INTDSETDSTPARTICIPANT|5 INTDSETSTRING|5 INTDSETVALUE|5 INTDSETVALUESTATUS|5 ' +
             'INTDSHIFTSTARTTIME|5 INTDSMOOTH|5 INTDSORT|5 INTDSPIKETEST|5 INTDSUBSET|5 INTDTOU|5 ' +
             'INTDTOURELEASE|5 INTDTOUVALUE|5 INTDUPDATESTATS|5 INTDVALUE|5 STDEV INTDDELETEEX|5 ' +
             'INTDLOADEXACTUAL|5 INTDLOADEXCUT|5 INTDLOADEXDATES|5 INTDLOADEX|5 INTDLOADEXRELATEDCHANNEL|5 ' +
             'INTDSAVEEX|5 MVLOAD|5 MVLOADACCT|5 MVLOADACCTDATES|5 MVLOADACCTHIST|5 MVLOADDATES|5 MVLOADHIST|5 ' +
             'MVLOADLIST|5 MVLOADLISTDATES|5 MVLOADLISTHIST|5 IF FOR NEXT DONE SELECT END CALL ABORT CLEAR CHANNEL FACTOR LIST NUMBER ' +
             'OVERRIDE SET WEEK DISTRIBUTIONNODE ELSE WHEN THEN OTHERWISE IENUM CSV INCLUDE LEAVE RIDER SAVE DELETE ' +
             'NOVALUE SECTION WARN SAVE_UPDATE DETERMINANT LABEL REPORT REVENUE EACH ' +
             'IN FROM TOTAL CHARGE BLOCK AND OR CSV_FILE RATE_CODE AUXILIARY_DEMAND ' +
             'UIDACCOUNT RS BILL_PERIOD_SELECT HOURS_PER_MONTH INTD_ERROR_STOP SEASON_SCHEDULE_NAME ' +
             'ACCOUNTFACTOR ARRAYUPPERBOUND CALLSTOREDPROC GETADOCONNECTION GETCONNECT GETDATASOURCE ' +
             'GETQUALIFIER GETUSERID HASVALUE LISTCOUNT LISTOP LISTUPDATE LISTVALUE PRORATEFACTOR RSPRORATE ' +
             'SETBINPATH SETDBMONITOR WQ_OPEN BILLINGHOURS DATE DATEFROMFLOAT DATETIMEFROMSTRING ' +
             'DATETIMETOSTRING DATETOFLOAT DAY DAYDIFF DAYNAME DBDATETIME HOUR MINUTE MONTH MONTHDIFF ' +
             'MONTHHOURS MONTHNAME ROUNDDATE SAMEWEEKDAYLASTYEAR SECOND WEEKDAY WEEKDIFF YEAR YEARDAY ' +
             'YEARSTR COMPSUM HISTCOUNT HISTMAX HISTMIN HISTMINNZ HISTVALUE MAXNRANGE MAXRANGE MINRANGE ' +
             'COMPIKVA COMPKVA COMPKVARFROMKQKW COMPLF IDATTR FLAG LF2KW LF2KWH MAXKW POWERFACTOR ' +
             'READING2USAGE AVGSEASON MAXSEASON MONTHLYMERGE SEASONVALUE SUMSEASON ACCTREADDATES ' +
             'ACCTTABLELOAD CONFIGADD CONFIGGET CREATEOBJECT CREATEREPORT EMAILCLIENT EXPBLKMDMUSAGE ' +
             'EXPMDMUSAGE EXPORT_USAGE FACTORINEFFECT GETUSERSPECIFIEDSTOP INEFFECT ISHOLIDAY RUNRATE ' +
             'SAVE_PROFILE SETREPORTTITLE USEREXIT WATFORRUNRATE TO TABLE ACOS ASIN ATAN ATAN2 BITAND CEIL ' +
             'COS COSECANT COSH COTANGENT DIVQUOT DIVREM EXP FABS FLOOR FMOD FREPM FREXPN LOG LOG10 MAX MAXN ' +
             'MIN MINNZ MODF POW ROUND ROUND2VALUE ROUNDINT SECANT SIN SINH SQROOT TAN TANH FLOAT2STRING ' +
             'FLOAT2STRINGNC INSTR LEFT LEN LTRIM MID RIGHT RTRIM STRING STRINGNC TOLOWER TOUPPER TRIM ' +
             'NUMDAYS READ_DATE STAGING',
           built_in: 'IDENTIFIER OPTIONS XML_ELEMENT XML_OP XML_ELEMENT_OF DOMDOCCREATE DOMDOCLOADFILE DOMDOCLOADXML ' +
             'DOMDOCSAVEFILE DOMDOCGETROOT DOMDOCADDPI DOMNODEGETNAME DOMNODEGETTYPE DOMNODEGETVALUE DOMNODEGETCHILDCT ' +
             'DOMNODEGETFIRSTCHILD DOMNODEGETSIBLING DOMNODECREATECHILDELEMENT DOMNODESETATTRIBUTE ' +
             'DOMNODEGETCHILDELEMENTCT DOMNODEGETFIRSTCHILDELEMENT DOMNODEGETSIBLINGELEMENT DOMNODEGETATTRIBUTECT ' +
             'DOMNODEGETATTRIBUTEI DOMNODEGETATTRIBUTEBYNAME DOMNODEGETBYNAME'
        },
        contains: [
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE,
          hljs.C_NUMBER_MODE,
          {
            className: 'literal',
            variants: [
              {begin: '#\\s+[a-zA-Z\\ \\.]*', relevance: 0}, // looks like #-comment
              {begin: '#[a-zA-Z\\ \\.]+'}
            ]
          }
        ]
      };
    };
    
    /***/ }),
    /* 541 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var NUM_SUFFIX = '([ui](8|16|32|64|128|size)|f(32|64))\?';
      var KEYWORDS =
        'alignof as be box break const continue crate do else enum extern ' +
        'false fn for if impl in let loop match mod mut offsetof once priv ' +
        'proc pub pure ref return self Self sizeof static struct super trait true ' +
        'type typeof unsafe unsized use virtual while where yield move default';
      var BUILTINS =
        // functions
        'drop ' +
        // types
        'i8 i16 i32 i64 i128 isize ' +
        'u8 u16 u32 u64 u128 usize ' +
        'f32 f64 ' +
        'str char bool ' +
        'Box Option Result String Vec ' +
        // traits
        'Copy Send Sized Sync Drop Fn FnMut FnOnce ToOwned Clone Debug ' +
        'PartialEq PartialOrd Eq Ord AsRef AsMut Into From Default Iterator ' +
        'Extend IntoIterator DoubleEndedIterator ExactSizeIterator ' +
        'SliceConcatExt ToString ' +
        // macros
        'assert! assert_eq! bitflags! bytes! cfg! col! concat! concat_idents! ' +
        'debug_assert! debug_assert_eq! env! panic! file! format! format_args! ' +
        'include_bin! include_str! line! local_data_key! module_path! ' +
        'option_env! print! println! select! stringify! try! unimplemented! ' +
        'unreachable! vec! write! writeln! macro_rules! assert_ne! debug_assert_ne!';
      return {
        aliases: ['rs'],
        keywords: {
          keyword:
            KEYWORDS,
          literal:
            'true false Some None Ok Err',
          built_in:
            BUILTINS
        },
        lexemes: hljs.IDENT_RE + '!?',
        illegal: '</',
        contains: [
          hljs.C_LINE_COMMENT_MODE,
          hljs.COMMENT('/\\*', '\\*/', {contains: ['self']}),
          hljs.inherit(hljs.QUOTE_STRING_MODE, {begin: /b?"/, illegal: null}),
          {
            className: 'string',
            variants: [
               { begin: /r(#*)"(.|\n)*?"\1(?!#)/ },
               { begin: /b?'\\?(x\w{2}|u\w{4}|U\w{8}|.)'/ }
            ]
          },
          {
            className: 'symbol',
            begin: /'[a-zA-Z_][a-zA-Z0-9_]*/
          },
          {
            className: 'number',
            variants: [
              { begin: '\\b0b([01_]+)' + NUM_SUFFIX },
              { begin: '\\b0o([0-7_]+)' + NUM_SUFFIX },
              { begin: '\\b0x([A-Fa-f0-9_]+)' + NUM_SUFFIX },
              { begin: '\\b(\\d[\\d_]*(\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)' +
                       NUM_SUFFIX
              }
            ],
            relevance: 0
          },
          {
            className: 'function',
            beginKeywords: 'fn', end: '(\\(|<)', excludeEnd: true,
            contains: [hljs.UNDERSCORE_TITLE_MODE]
          },
          {
            className: 'meta',
            begin: '#\\!?\\[', end: '\\]',
            contains: [
              {
                className: 'meta-string',
                begin: /"/, end: /"/
              }
            ]
          },
          {
            className: 'class',
            beginKeywords: 'type', end: ';',
            contains: [
              hljs.inherit(hljs.UNDERSCORE_TITLE_MODE, {endsParent: true})
            ],
            illegal: '\\S'
          },
          {
            className: 'class',
            beginKeywords: 'trait enum struct union', end: '{',
            contains: [
              hljs.inherit(hljs.UNDERSCORE_TITLE_MODE, {endsParent: true})
            ],
            illegal: '[\\w\\d]'
          },
          {
            begin: hljs.IDENT_RE + '::',
            keywords: {built_in: BUILTINS}
          },
          {
            begin: '->'
          }
        ]
      };
    };
    
    /***/ }),
    /* 542 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
    
      var ANNOTATION = { className: 'meta', begin: '@[A-Za-z]+' };
    
      // used in strings for escaping/interpolation/substitution
      var SUBST = {
        className: 'subst',
        variants: [
          {begin: '\\$[A-Za-z0-9_]+'},
          {begin: '\\${', end: '}'}
        ]
      };
    
      var STRING = {
        className: 'string',
        variants: [
          {
            begin: '"', end: '"',
            illegal: '\\n',
            contains: [hljs.BACKSLASH_ESCAPE]
          },
          {
            begin: '"""', end: '"""',
            relevance: 10
          },
          {
            begin: '[a-z]+"', end: '"',
            illegal: '\\n',
            contains: [hljs.BACKSLASH_ESCAPE, SUBST]
          },
          {
            className: 'string',
            begin: '[a-z]+"""', end: '"""',
            contains: [SUBST],
            relevance: 10
          }
        ]
    
      };
    
      var SYMBOL = {
        className: 'symbol',
        begin: '\'\\w[\\w\\d_]*(?!\')'
      };
    
      var TYPE = {
        className: 'type',
        begin: '\\b[A-Z][A-Za-z0-9_]*',
        relevance: 0
      };
    
      var NAME = {
        className: 'title',
        begin: /[^0-9\n\t "'(),.`{}\[\]:;][^\n\t "'(),.`{}\[\]:;]+|[^0-9\n\t "'(),.`{}\[\]:;=]/,
        relevance: 0
      };
    
      var CLASS = {
        className: 'class',
        beginKeywords: 'class object trait type',
        end: /[:={\[\n;]/,
        excludeEnd: true,
        contains: [
          {
            beginKeywords: 'extends with',
            relevance: 10
          },
          {
            begin: /\[/,
            end: /\]/,
            excludeBegin: true,
            excludeEnd: true,
            relevance: 0,
            contains: [TYPE]
          },
          {
            className: 'params',
            begin: /\(/,
            end: /\)/,
            excludeBegin: true,
            excludeEnd: true,
            relevance: 0,
            contains: [TYPE]
          },
          NAME
        ]
      };
    
      var METHOD = {
        className: 'function',
        beginKeywords: 'def',
        end: /[:={\[(\n;]/,
        excludeEnd: true,
        contains: [NAME]
      };
    
      return {
        keywords: {
          literal: 'true false null',
          keyword: 'type yield lazy override def with val var sealed abstract private trait object if forSome for while throw finally protected extends import final return else break new catch super class case package default try this match continue throws implicit'
        },
        contains: [
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          STRING,
          SYMBOL,
          TYPE,
          METHOD,
          CLASS,
          hljs.C_NUMBER_MODE,
          ANNOTATION
        ]
      };
    };
    
    /***/ }),
    /* 543 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var SCHEME_IDENT_RE = '[^\\(\\)\\[\\]\\{\\}",\'`;#|\\\\\\s]+';
      var SCHEME_SIMPLE_NUMBER_RE = '(\\-|\\+)?\\d+([./]\\d+)?';
      var SCHEME_COMPLEX_NUMBER_RE = SCHEME_SIMPLE_NUMBER_RE + '[+\\-]' + SCHEME_SIMPLE_NUMBER_RE + 'i';
      var BUILTINS = {
        'builtin-name':
          'case-lambda call/cc class define-class exit-handler field import ' +
          'inherit init-field interface let*-values let-values let/ec mixin ' +
          'opt-lambda override protect provide public rename require ' +
          'require-for-syntax syntax syntax-case syntax-error unit/sig unless ' +
          'when with-syntax and begin call-with-current-continuation ' +
          'call-with-input-file call-with-output-file case cond define ' +
          'define-syntax delay do dynamic-wind else for-each if lambda let let* ' +
          'let-syntax letrec letrec-syntax map or syntax-rules \' * + , ,@ - ... / ' +
          '; < <= = => > >= ` abs acos angle append apply asin assoc assq assv atan ' +
          'boolean? caar cadr call-with-input-file call-with-output-file ' +
          'call-with-values car cdddar cddddr cdr ceiling char->integer ' +
          'char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? ' +
          'char-downcase char-lower-case? char-numeric? char-ready? char-upcase ' +
          'char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? ' +
          'char? close-input-port close-output-port complex? cons cos ' +
          'current-input-port current-output-port denominator display eof-object? ' +
          'eq? equal? eqv? eval even? exact->inexact exact? exp expt floor ' +
          'force gcd imag-part inexact->exact inexact? input-port? integer->char ' +
          'integer? interaction-environment lcm length list list->string ' +
          'list->vector list-ref list-tail list? load log magnitude make-polar ' +
          'make-rectangular make-string make-vector max member memq memv min ' +
          'modulo negative? newline not null-environment null? number->string ' +
          'number? numerator odd? open-input-file open-output-file output-port? ' +
          'pair? peek-char port? positive? procedure? quasiquote quote quotient ' +
          'rational? rationalize read read-char real-part real? remainder reverse ' +
          'round scheme-report-environment set! set-car! set-cdr! sin sqrt string ' +
          'string->list string->number string->symbol string-append string-ci<=? ' +
          'string-ci<? string-ci=? string-ci>=? string-ci>? string-copy ' +
          'string-fill! string-length string-ref string-set! string<=? string<? ' +
          'string=? string>=? string>? string? substring symbol->string symbol? ' +
          'tan transcript-off transcript-on truncate values vector ' +
          'vector->list vector-fill! vector-length vector-ref vector-set! ' +
          'with-input-from-file with-output-to-file write write-char zero?'
      };
    
      var SHEBANG = {
        className: 'meta',
        begin: '^#!',
        end: '$'
      };
    
      var LITERAL = {
        className: 'literal',
        begin: '(#t|#f|#\\\\' + SCHEME_IDENT_RE + '|#\\\\.)'
      };
    
      var NUMBER = {
        className: 'number',
        variants: [
          { begin: SCHEME_SIMPLE_NUMBER_RE, relevance: 0 },
          { begin: SCHEME_COMPLEX_NUMBER_RE, relevance: 0 },
          { begin: '#b[0-1]+(/[0-1]+)?' },
          { begin: '#o[0-7]+(/[0-7]+)?' },
          { begin: '#x[0-9a-f]+(/[0-9a-f]+)?' }
        ]
      };
    
      var STRING = hljs.QUOTE_STRING_MODE;
    
      var REGULAR_EXPRESSION = {
        className: 'regexp',
        begin: '#[pr]x"',
        end: '[^\\\\]"'
      };
    
      var COMMENT_MODES = [
        hljs.COMMENT(
          ';',
          '$',
          {
            relevance: 0
          }
        ),
        hljs.COMMENT('#\\|', '\\|#')
      ];
    
      var IDENT = {
        begin: SCHEME_IDENT_RE,
        relevance: 0
      };
    
      var QUOTED_IDENT = {
        className: 'symbol',
        begin: '\'' + SCHEME_IDENT_RE
      };
    
      var BODY = {
        endsWithParent: true,
        relevance: 0
      };
    
      var QUOTED_LIST = {
        variants: [
          { begin: /'/ },
          { begin: '`' }
        ],
        contains: [
          {
            begin: '\\(', end: '\\)',
            contains: ['self', LITERAL, STRING, NUMBER, IDENT, QUOTED_IDENT]
          }
        ]
      };
    
      var NAME = {
        className: 'name',
        begin: SCHEME_IDENT_RE,
        lexemes: SCHEME_IDENT_RE,
        keywords: BUILTINS
      };
    
      var LAMBDA = {
        begin: /lambda/, endsWithParent: true, returnBegin: true,
        contains: [
          NAME,
          {
            begin: /\(/, end: /\)/, endsParent: true,
            contains: [IDENT],
          }
        ]
      };
    
      var LIST = {
        variants: [
          { begin: '\\(', end: '\\)' },
          { begin: '\\[', end: '\\]' }
        ],
        contains: [LAMBDA, NAME, BODY]
      };
    
      BODY.contains = [LITERAL, NUMBER, STRING, IDENT, QUOTED_IDENT, QUOTED_LIST, LIST].concat(COMMENT_MODES);
    
      return {
        illegal: /\S/,
        contains: [SHEBANG, NUMBER, STRING, QUOTED_IDENT, QUOTED_LIST, LIST].concat(COMMENT_MODES)
      };
    };
    
    /***/ }),
    /* 544 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
    
      var COMMON_CONTAINS = [
        hljs.C_NUMBER_MODE,
        {
          className: 'string',
          begin: '\'|\"', end: '\'|\"',
          contains: [hljs.BACKSLASH_ESCAPE, {begin: '\'\''}]
        }
      ];
    
      return {
        aliases: ['sci'],
        lexemes: /%?\w+/,
        keywords: {
          keyword: 'abort break case clear catch continue do elseif else endfunction end for function '+
            'global if pause return resume select try then while',
          literal:
            '%f %F %t %T %pi %eps %inf %nan %e %i %z %s',
          built_in: // Scilab has more than 2000 functions. Just list the most commons
           'abs and acos asin atan ceil cd chdir clearglobal cosh cos cumprod deff disp error '+
           'exec execstr exists exp eye gettext floor fprintf fread fsolve imag isdef isempty '+
           'isinfisnan isvector lasterror length load linspace list listfiles log10 log2 log '+
           'max min msprintf mclose mopen ones or pathconvert poly printf prod pwd rand real '+
           'round sinh sin size gsort sprintf sqrt strcat strcmps tring sum system tanh tan '+
           'type typename warning zeros matrix'
        },
        illegal: '("|#|/\\*|\\s+/\\w+)',
        contains: [
          {
            className: 'function',
            beginKeywords: 'function', end: '$',
            contains: [
              hljs.UNDERSCORE_TITLE_MODE,
              {
                className: 'params',
                begin: '\\(', end: '\\)'
              }
            ]
          },
          {
            begin: '[a-zA-Z_][a-zA-Z_0-9]*(\'+[\\.\']*|[\\.\']+)', end: '',
            relevance: 0
          },
          {
            begin: '\\[', end: '\\]\'*[\\.\']*',
            relevance: 0,
            contains: COMMON_CONTAINS
          },
          hljs.COMMENT('//', '$')
        ].concat(COMMON_CONTAINS)
      };
    };
    
    /***/ }),
    /* 545 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var IDENT_RE = '[a-zA-Z-][a-zA-Z0-9_-]*';
      var VARIABLE = {
        className: 'variable',
        begin: '(\\$' + IDENT_RE + ')\\b'
      };
      var HEXCOLOR = {
        className: 'number', begin: '#[0-9A-Fa-f]+'
      };
      var DEF_INTERNALS = {
        className: 'attribute',
        begin: '[A-Z\\_\\.\\-]+', end: ':',
        excludeEnd: true,
        illegal: '[^\\s]',
        starts: {
          endsWithParent: true, excludeEnd: true,
          contains: [
            HEXCOLOR,
            hljs.CSS_NUMBER_MODE,
            hljs.QUOTE_STRING_MODE,
            hljs.APOS_STRING_MODE,
            hljs.C_BLOCK_COMMENT_MODE,
            {
              className: 'meta', begin: '!important'
            }
          ]
        }
      };
      return {
        case_insensitive: true,
        illegal: '[=/|\']',
        contains: [
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          {
            className: 'selector-id', begin: '\\#[A-Za-z0-9_-]+',
            relevance: 0
          },
          {
            className: 'selector-class', begin: '\\.[A-Za-z0-9_-]+',
            relevance: 0
          },
          {
            className: 'selector-attr', begin: '\\[', end: '\\]',
            illegal: '$'
          },
          {
            className: 'selector-tag', // begin: IDENT_RE, end: '[,|\\s]'
            begin: '\\b(a|abbr|acronym|address|area|article|aside|audio|b|base|big|blockquote|body|br|button|canvas|caption|cite|code|col|colgroup|command|datalist|dd|del|details|dfn|div|dl|dt|em|embed|fieldset|figcaption|figure|footer|form|frame|frameset|(h[1-6])|head|header|hgroup|hr|html|i|iframe|img|input|ins|kbd|keygen|label|legend|li|link|map|mark|meta|meter|nav|noframes|noscript|object|ol|optgroup|option|output|p|param|pre|progress|q|rp|rt|ruby|samp|script|section|select|small|span|strike|strong|style|sub|sup|table|tbody|td|textarea|tfoot|th|thead|time|title|tr|tt|ul|var|video)\\b',
            relevance: 0
          },
          {
            begin: ':(visited|valid|root|right|required|read-write|read-only|out-range|optional|only-of-type|only-child|nth-of-type|nth-last-of-type|nth-last-child|nth-child|not|link|left|last-of-type|last-child|lang|invalid|indeterminate|in-range|hover|focus|first-of-type|first-line|first-letter|first-child|first|enabled|empty|disabled|default|checked|before|after|active)'
          },
          {
            begin: '::(after|before|choices|first-letter|first-line|repeat-index|repeat-item|selection|value)'
          },
          VARIABLE,
          {
            className: 'attribute',
            begin: '\\b(z-index|word-wrap|word-spacing|word-break|width|widows|white-space|visibility|vertical-align|unicode-bidi|transition-timing-function|transition-property|transition-duration|transition-delay|transition|transform-style|transform-origin|transform|top|text-underline-position|text-transform|text-shadow|text-rendering|text-overflow|text-indent|text-decoration-style|text-decoration-line|text-decoration-color|text-decoration|text-align-last|text-align|tab-size|table-layout|right|resize|quotes|position|pointer-events|perspective-origin|perspective|page-break-inside|page-break-before|page-break-after|padding-top|padding-right|padding-left|padding-bottom|padding|overflow-y|overflow-x|overflow-wrap|overflow|outline-width|outline-style|outline-offset|outline-color|outline|orphans|order|opacity|object-position|object-fit|normal|none|nav-up|nav-right|nav-left|nav-index|nav-down|min-width|min-height|max-width|max-height|mask|marks|margin-top|margin-right|margin-left|margin-bottom|margin|list-style-type|list-style-position|list-style-image|list-style|line-height|letter-spacing|left|justify-content|initial|inherit|ime-mode|image-orientation|image-resolution|image-rendering|icon|hyphens|height|font-weight|font-variant-ligatures|font-variant|font-style|font-stretch|font-size-adjust|font-size|font-language-override|font-kerning|font-feature-settings|font-family|font|float|flex-wrap|flex-shrink|flex-grow|flex-flow|flex-direction|flex-basis|flex|filter|empty-cells|display|direction|cursor|counter-reset|counter-increment|content|column-width|column-span|column-rule-width|column-rule-style|column-rule-color|column-rule|column-gap|column-fill|column-count|columns|color|clip-path|clip|clear|caption-side|break-inside|break-before|break-after|box-sizing|box-shadow|box-decoration-break|bottom|border-width|border-top-width|border-top-style|border-top-right-radius|border-top-left-radius|border-top-color|border-top|border-style|border-spacing|border-right-width|border-right-style|border-right-color|border-right|border-radius|border-left-width|border-left-style|border-left-color|border-left|border-image-width|border-image-source|border-image-slice|border-image-repeat|border-image-outset|border-image|border-color|border-collapse|border-bottom-width|border-bottom-style|border-bottom-right-radius|border-bottom-left-radius|border-bottom-color|border-bottom|border|background-size|background-repeat|background-position|background-origin|background-image|background-color|background-clip|background-attachment|background-blend-mode|background|backface-visibility|auto|animation-timing-function|animation-play-state|animation-name|animation-iteration-count|animation-fill-mode|animation-duration|animation-direction|animation-delay|animation|align-self|align-items|align-content)\\b',
            illegal: '[^\\s]'
          },
          {
            begin: '\\b(whitespace|wait|w-resize|visible|vertical-text|vertical-ideographic|uppercase|upper-roman|upper-alpha|underline|transparent|top|thin|thick|text|text-top|text-bottom|tb-rl|table-header-group|table-footer-group|sw-resize|super|strict|static|square|solid|small-caps|separate|se-resize|scroll|s-resize|rtl|row-resize|ridge|right|repeat|repeat-y|repeat-x|relative|progress|pointer|overline|outside|outset|oblique|nowrap|not-allowed|normal|none|nw-resize|no-repeat|no-drop|newspaper|ne-resize|n-resize|move|middle|medium|ltr|lr-tb|lowercase|lower-roman|lower-alpha|loose|list-item|line|line-through|line-edge|lighter|left|keep-all|justify|italic|inter-word|inter-ideograph|inside|inset|inline|inline-block|inherit|inactive|ideograph-space|ideograph-parenthesis|ideograph-numeric|ideograph-alpha|horizontal|hidden|help|hand|groove|fixed|ellipsis|e-resize|double|dotted|distribute|distribute-space|distribute-letter|distribute-all-lines|disc|disabled|default|decimal|dashed|crosshair|collapse|col-resize|circle|char|center|capitalize|break-word|break-all|bottom|both|bolder|bold|block|bidi-override|below|baseline|auto|always|all-scroll|absolute|table|table-cell)\\b'
          },
          {
            begin: ':', end: ';',
            contains: [
              VARIABLE,
              HEXCOLOR,
              hljs.CSS_NUMBER_MODE,
              hljs.QUOTE_STRING_MODE,
              hljs.APOS_STRING_MODE,
              {
                className: 'meta', begin: '!important'
              }
            ]
          },
          {
            begin: '@', end: '[{;]',
            keywords: 'mixin include extend for if else each while charset import debug media page content font-face namespace warn',
            contains: [
              VARIABLE,
              hljs.QUOTE_STRING_MODE,
              hljs.APOS_STRING_MODE,
              HEXCOLOR,
              hljs.CSS_NUMBER_MODE,
              {
                begin: '\\s[A-Za-z0-9_.-]+',
                relevance: 0
              }
            ]
          }
        ]
      };
    };
    
    /***/ }),
    /* 546 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        aliases: ['console'],
        contains: [
          {
            className: 'meta',
            begin: '^\\s{0,3}[\\w\\d\\[\\]()@-]*[>%$#]',
            starts: {
              end: '$', subLanguage: 'bash'
            }
          },
        ]
      }
    };
    
    /***/ }),
    /* 547 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var smali_instr_low_prio = ['add', 'and', 'cmp', 'cmpg', 'cmpl', 'const', 'div', 'double', 'float', 'goto', 'if', 'int', 'long', 'move', 'mul', 'neg', 'new', 'nop', 'not', 'or', 'rem', 'return', 'shl', 'shr', 'sput', 'sub', 'throw', 'ushr', 'xor'];
      var smali_instr_high_prio = ['aget', 'aput', 'array', 'check', 'execute', 'fill', 'filled', 'goto/16', 'goto/32', 'iget', 'instance', 'invoke', 'iput', 'monitor', 'packed', 'sget', 'sparse'];
      var smali_keywords = ['transient', 'constructor', 'abstract', 'final', 'synthetic', 'public', 'private', 'protected', 'static', 'bridge', 'system'];
      return {
        aliases: ['smali'],
        contains: [
          {
            className: 'string',
            begin: '"', end: '"',
            relevance: 0
          },
          hljs.COMMENT(
            '#',
            '$',
            {
              relevance: 0
            }
          ),
          {
            className: 'keyword',
            variants: [
              {begin: '\\s*\\.end\\s[a-zA-Z0-9]*'},
              {begin: '^[ ]*\\.[a-zA-Z]*', relevance: 0},
              {begin: '\\s:[a-zA-Z_0-9]*', relevance: 0},
              {begin: '\\s(' + smali_keywords.join('|') + ')'}
            ]
          },
          {
            className: 'built_in',
            variants : [
              {
                begin: '\\s('+smali_instr_low_prio.join('|')+')\\s'
              },
              {
                begin: '\\s('+smali_instr_low_prio.join('|')+')((\\-|/)[a-zA-Z0-9]+)+\\s',
                relevance: 10
              },
              {
                begin: '\\s('+smali_instr_high_prio.join('|')+')((\\-|/)[a-zA-Z0-9]+)*\\s',
                relevance: 10
              },
            ]
          },
          {
            className: 'class',
            begin: 'L[^\(;:\n]*;',
            relevance: 0
          },
          {
            begin: '[vp][0-9]+',
          }
        ]
      };
    };
    
    /***/ }),
    /* 548 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var VAR_IDENT_RE = '[a-z][a-zA-Z0-9_]*';
      var CHAR = {
        className: 'string',
        begin: '\\$.{1}'
      };
      var SYMBOL = {
        className: 'symbol',
        begin: '#' + hljs.UNDERSCORE_IDENT_RE
      };
      return {
        aliases: ['st'],
        keywords: 'self super nil true false thisContext', // only 6
        contains: [
          hljs.COMMENT('"', '"'),
          hljs.APOS_STRING_MODE,
          {
            className: 'type',
            begin: '\\b[A-Z][A-Za-z0-9_]*',
            relevance: 0
          },
          {
            begin: VAR_IDENT_RE + ':',
            relevance: 0
          },
          hljs.C_NUMBER_MODE,
          SYMBOL,
          CHAR,
          {
            // This looks more complicated than needed to avoid combinatorial
            // explosion under V8. It effectively means `| var1 var2 ... |` with
            // whitespace adjacent to `|` being optional.
            begin: '\\|[ ]*' + VAR_IDENT_RE + '([ ]+' + VAR_IDENT_RE + ')*[ ]*\\|',
            returnBegin: true, end: /\|/,
            illegal: /\S/,
            contains: [{begin: '(\\|[ ]*)?' + VAR_IDENT_RE}]
          },
          {
            begin: '\\#\\(', end: '\\)',
            contains: [
              hljs.APOS_STRING_MODE,
              CHAR,
              hljs.C_NUMBER_MODE,
              SYMBOL
            ]
          }
        ]
      };
    };
    
    /***/ }),
    /* 549 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        aliases: ['ml'],
        keywords: {
          keyword:
            /* according to Definition of Standard ML 97  */
            'abstype and andalso as case datatype do else end eqtype ' +
            'exception fn fun functor handle if in include infix infixr ' +
            'let local nonfix of op open orelse raise rec sharing sig ' +
            'signature struct structure then type val with withtype where while',
          built_in:
            /* built-in types according to basis library */
            'array bool char exn int list option order real ref string substring vector unit word',
          literal:
            'true false NONE SOME LESS EQUAL GREATER nil'
        },
        illegal: /\/\/|>>/,
        lexemes: '[a-z_]\\w*!?',
        contains: [
          {
            className: 'literal',
            begin: /\[(\|\|)?\]|\(\)/,
            relevance: 0
          },
          hljs.COMMENT(
            '\\(\\*',
            '\\*\\)',
            {
              contains: ['self']
            }
          ),
          { /* type variable */
            className: 'symbol',
            begin: '\'[A-Za-z_](?!\')[\\w\']*'
            /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */
          },
          { /* polymorphic variant */
            className: 'type',
            begin: '`[A-Z][\\w\']*'
          },
          { /* module or constructor */
            className: 'type',
            begin: '\\b[A-Z][\\w\']*',
            relevance: 0
          },
          { /* don't color identifiers, but safely catch all identifiers with '*/
            begin: '[a-z_]\\w*\'[\\w\']*'
          },
          hljs.inherit(hljs.APOS_STRING_MODE, {className: 'string', relevance: 0}),
          hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null}),
          {
            className: 'number',
            begin:
              '\\b(0[xX][a-fA-F0-9_]+[Lln]?|' +
              '0[oO][0-7_]+[Lln]?|' +
              '0[bB][01_]+[Lln]?|' +
              '[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)',
            relevance: 0
          },
          {
            begin: /[-=]>/ // relevance booster
          }
        ]
      };
    };
    
    /***/ }),
    /* 550 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var CPP = hljs.getLanguage('cpp').exports;
    
      // In SQF, a variable start with _
      var VARIABLE = {
        className: 'variable',
        begin: /\b_+[a-zA-Z_]\w*/
      };
    
      // In SQF, a function should fit myTag_fnc_myFunction pattern
      // https://community.bistudio.com/wiki/Functions_Library_(Arma_3)#Adding_a_Function
      var FUNCTION = {
        className: 'title',
        begin: /[a-zA-Z][a-zA-Z0-9]+_fnc_\w*/
      };
    
      // In SQF strings, quotes matching the start are escaped by adding a consecutive.
      // Example of single escaped quotes: " "" " and  ' '' '.
      var STRINGS = {
        className: 'string',
        variants: [
          {
            begin: '"',
            end: '"',
            contains: [{begin: '""', relevance: 0}]
          },
          {
            begin: '\'',
            end: '\'',
            contains: [{begin: '\'\'', relevance: 0}]
          }
        ]
      };
    
      return {
        aliases: ['sqf'],
        case_insensitive: true,
        keywords: {
          keyword:
            'case catch default do else exit exitWith for forEach from if ' +
            'switch then throw to try waitUntil while with',
          built_in:
            'abs accTime acos action actionIDs actionKeys actionKeysImages actionKeysNames ' +
            'actionKeysNamesArray actionName actionParams activateAddons activatedAddons activateKey ' +
            'add3DENConnection add3DENEventHandler add3DENLayer addAction addBackpack addBackpackCargo ' +
            'addBackpackCargoGlobal addBackpackGlobal addCamShake addCuratorAddons addCuratorCameraArea ' +
            'addCuratorEditableObjects addCuratorEditingArea addCuratorPoints addEditorObject addEventHandler ' +
            'addGoggles addGroupIcon addHandgunItem addHeadgear addItem addItemCargo addItemCargoGlobal ' +
            'addItemPool addItemToBackpack addItemToUniform addItemToVest addLiveStats addMagazine ' +
            'addMagazineAmmoCargo addMagazineCargo addMagazineCargoGlobal addMagazineGlobal addMagazinePool ' +
            'addMagazines addMagazineTurret addMenu addMenuItem addMissionEventHandler addMPEventHandler ' +
            'addMusicEventHandler addOwnedMine addPlayerScores addPrimaryWeaponItem ' +
            'addPublicVariableEventHandler addRating addResources addScore addScoreSide addSecondaryWeaponItem ' +
            'addSwitchableUnit addTeamMember addToRemainsCollector addUniform addVehicle addVest addWaypoint ' +
            'addWeapon addWeaponCargo addWeaponCargoGlobal addWeaponGlobal addWeaponItem addWeaponPool ' +
            'addWeaponTurret agent agents AGLToASL aimedAtTarget aimPos airDensityRTD airportSide ' +
            'AISFinishHeal alive all3DENEntities allControls allCurators allCutLayers allDead allDeadMen ' +
            'allDisplays allGroups allMapMarkers allMines allMissionObjects allow3DMode allowCrewInImmobile ' +
            'allowCuratorLogicIgnoreAreas allowDamage allowDammage allowFileOperations allowFleeing allowGetIn ' +
            'allowSprint allPlayers allSites allTurrets allUnits allUnitsUAV allVariables ammo and animate ' +
            'animateDoor animateSource animationNames animationPhase animationSourcePhase animationState ' +
            'append apply armoryPoints arrayIntersect asin ASLToAGL ASLToATL assert assignAsCargo ' +
            'assignAsCargoIndex assignAsCommander assignAsDriver assignAsGunner assignAsTurret assignCurator ' +
            'assignedCargo assignedCommander assignedDriver assignedGunner assignedItems assignedTarget ' +
            'assignedTeam assignedVehicle assignedVehicleRole assignItem assignTeam assignToAirport atan atan2 ' +
            'atg ATLToASL attachedObject attachedObjects attachedTo attachObject attachTo attackEnabled ' +
            'backpack backpackCargo backpackContainer backpackItems backpackMagazines backpackSpaceFor ' +
            'behaviour benchmark binocular blufor boundingBox boundingBoxReal boundingCenter breakOut breakTo ' +
            'briefingName buildingExit buildingPos buttonAction buttonSetAction cadetMode call callExtension ' +
            'camCommand camCommit camCommitPrepared camCommitted camConstuctionSetParams camCreate camDestroy ' +
            'cameraEffect cameraEffectEnableHUD cameraInterest cameraOn cameraView campaignConfigFile ' +
            'camPreload camPreloaded camPrepareBank camPrepareDir camPrepareDive camPrepareFocus camPrepareFov ' +
            'camPrepareFovRange camPreparePos camPrepareRelPos camPrepareTarget camSetBank camSetDir ' +
            'camSetDive camSetFocus camSetFov camSetFovRange camSetPos camSetRelPos camSetTarget camTarget ' +
            'camUseNVG canAdd canAddItemToBackpack canAddItemToUniform canAddItemToVest ' +
            'cancelSimpleTaskDestination canFire canMove canSlingLoad canStand canSuspend canUnloadInCombat ' +
            'canVehicleCargo captive captiveNum cbChecked cbSetChecked ceil channelEnabled cheatsEnabled ' +
            'checkAIFeature checkVisibility civilian className clearAllItemsFromBackpack clearBackpackCargo ' +
            'clearBackpackCargoGlobal clearGroupIcons clearItemCargo clearItemCargoGlobal clearItemPool ' +
            'clearMagazineCargo clearMagazineCargoGlobal clearMagazinePool clearOverlay clearRadio ' +
            'clearWeaponCargo clearWeaponCargoGlobal clearWeaponPool clientOwner closeDialog closeDisplay ' +
            'closeOverlay collapseObjectTree collect3DENHistory combatMode commandArtilleryFire commandChat ' +
            'commander commandFire commandFollow commandFSM commandGetOut commandingMenu commandMove ' +
            'commandRadio commandStop commandSuppressiveFire commandTarget commandWatch comment commitOverlay ' +
            'compile compileFinal completedFSM composeText configClasses configFile configHierarchy configName ' +
            'configNull configProperties configSourceAddonList configSourceMod configSourceModList ' +
            'connectTerminalToUAV controlNull controlsGroupCtrl copyFromClipboard copyToClipboard ' +
            'copyWaypoints cos count countEnemy countFriendly countSide countType countUnknown ' +
            'create3DENComposition create3DENEntity createAgent createCenter createDialog createDiaryLink ' +
            'createDiaryRecord createDiarySubject createDisplay createGearDialog createGroup ' +
            'createGuardedPoint createLocation createMarker createMarkerLocal createMenu createMine ' +
            'createMissionDisplay createMPCampaignDisplay createSimpleObject createSimpleTask createSite ' +
            'createSoundSource createTask createTeam createTrigger createUnit createVehicle createVehicleCrew ' +
            'createVehicleLocal crew ctrlActivate ctrlAddEventHandler ctrlAngle ctrlAutoScrollDelay ' +
            'ctrlAutoScrollRewind ctrlAutoScrollSpeed ctrlChecked ctrlClassName ctrlCommit ctrlCommitted ' +
            'ctrlCreate ctrlDelete ctrlEnable ctrlEnabled ctrlFade ctrlHTMLLoaded ctrlIDC ctrlIDD ' +
            'ctrlMapAnimAdd ctrlMapAnimClear ctrlMapAnimCommit ctrlMapAnimDone ctrlMapCursor ctrlMapMouseOver ' +
            'ctrlMapScale ctrlMapScreenToWorld ctrlMapWorldToScreen ctrlModel ctrlModelDirAndUp ctrlModelScale ' +
            'ctrlParent ctrlParentControlsGroup ctrlPosition ctrlRemoveAllEventHandlers ctrlRemoveEventHandler ' +
            'ctrlScale ctrlSetActiveColor ctrlSetAngle ctrlSetAutoScrollDelay ctrlSetAutoScrollRewind ' +
            'ctrlSetAutoScrollSpeed ctrlSetBackgroundColor ctrlSetChecked ctrlSetEventHandler ctrlSetFade ' +
            'ctrlSetFocus ctrlSetFont ctrlSetFontH1 ctrlSetFontH1B ctrlSetFontH2 ctrlSetFontH2B ctrlSetFontH3 ' +
            'ctrlSetFontH3B ctrlSetFontH4 ctrlSetFontH4B ctrlSetFontH5 ctrlSetFontH5B ctrlSetFontH6 ' +
            'ctrlSetFontH6B ctrlSetFontHeight ctrlSetFontHeightH1 ctrlSetFontHeightH2 ctrlSetFontHeightH3 ' +
            'ctrlSetFontHeightH4 ctrlSetFontHeightH5 ctrlSetFontHeightH6 ctrlSetFontHeightSecondary ' +
            'ctrlSetFontP ctrlSetFontPB ctrlSetFontSecondary ctrlSetForegroundColor ctrlSetModel ' +
            'ctrlSetModelDirAndUp ctrlSetModelScale ctrlSetPosition ctrlSetScale ctrlSetStructuredText ' +
            'ctrlSetText ctrlSetTextColor ctrlSetTooltip ctrlSetTooltipColorBox ctrlSetTooltipColorShade ' +
            'ctrlSetTooltipColorText ctrlShow ctrlShown ctrlText ctrlTextHeight ctrlType ctrlVisible ' +
            'curatorAddons curatorCamera curatorCameraArea curatorCameraAreaCeiling curatorCoef ' +
            'curatorEditableObjects curatorEditingArea curatorEditingAreaType curatorMouseOver curatorPoints ' +
            'curatorRegisteredObjects curatorSelected curatorWaypointCost current3DENOperation currentChannel ' +
            'currentCommand currentMagazine currentMagazineDetail currentMagazineDetailTurret ' +
            'currentMagazineTurret currentMuzzle currentNamespace currentTask currentTasks currentThrowable ' +
            'currentVisionMode currentWaypoint currentWeapon currentWeaponMode currentWeaponTurret ' +
            'currentZeroing cursorObject cursorTarget customChat customRadio cutFadeOut cutObj cutRsc cutText ' +
            'damage date dateToNumber daytime deActivateKey debriefingText debugFSM debugLog deg ' +
            'delete3DENEntities deleteAt deleteCenter deleteCollection deleteEditorObject deleteGroup ' +
            'deleteIdentity deleteLocation deleteMarker deleteMarkerLocal deleteRange deleteResources ' +
            'deleteSite deleteStatus deleteTeam deleteVehicle deleteVehicleCrew deleteWaypoint detach ' +
            'detectedMines diag_activeMissionFSMs diag_activeScripts diag_activeSQFScripts ' +
            'diag_activeSQSScripts diag_captureFrame diag_captureSlowFrame diag_codePerformance diag_drawMode ' +
            'diag_enable diag_enabled diag_fps diag_fpsMin diag_frameNo diag_list diag_log diag_logSlowFrame ' +
            'diag_mergeConfigFile diag_recordTurretLimits diag_tickTime diag_toggle dialog diarySubjectExists ' +
            'didJIP didJIPOwner difficulty difficultyEnabled difficultyEnabledRTD difficultyOption direction ' +
            'directSay disableAI disableCollisionWith disableConversation disableDebriefingStats ' +
            'disableNVGEquipment disableRemoteSensors disableSerialization disableTIEquipment ' +
            'disableUAVConnectability disableUserInput displayAddEventHandler displayCtrl displayNull ' +
            'displayParent displayRemoveAllEventHandlers displayRemoveEventHandler displaySetEventHandler ' +
            'dissolveTeam distance distance2D distanceSqr distributionRegion do3DENAction doArtilleryFire ' +
            'doFire doFollow doFSM doGetOut doMove doorPhase doStop doSuppressiveFire doTarget doWatch ' +
            'drawArrow drawEllipse drawIcon drawIcon3D drawLine drawLine3D drawLink drawLocation drawPolygon ' +
            'drawRectangle driver drop east echo edit3DENMissionAttributes editObject editorSetEventHandler ' +
            'effectiveCommander emptyPositions enableAI enableAIFeature enableAimPrecision enableAttack ' +
            'enableAudioFeature enableCamShake enableCaustics enableChannel enableCollisionWith enableCopilot ' +
            'enableDebriefingStats enableDiagLegend enableEndDialog enableEngineArtillery enableEnvironment ' +
            'enableFatigue enableGunLights enableIRLasers enableMimics enablePersonTurret enableRadio ' +
            'enableReload enableRopeAttach enableSatNormalOnDetail enableSaving enableSentences ' +
            'enableSimulation enableSimulationGlobal enableStamina enableTeamSwitch enableUAVConnectability ' +
            'enableUAVWaypoints enableVehicleCargo endLoadingScreen endMission engineOn enginesIsOnRTD ' +
            'enginesRpmRTD enginesTorqueRTD entities estimatedEndServerTime estimatedTimeLeft ' +
            'evalObjectArgument everyBackpack everyContainer exec execEditorScript execFSM execVM exp ' +
            'expectedDestination exportJIPMessages eyeDirection eyePos face faction fadeMusic fadeRadio ' +
            'fadeSound fadeSpeech failMission fillWeaponsFromPool find findCover findDisplay findEditorObject ' +
            'findEmptyPosition findEmptyPositionReady findNearestEnemy finishMissionInit finite fire ' +
            'fireAtTarget firstBackpack flag flagOwner flagSide flagTexture fleeing floor flyInHeight ' +
            'flyInHeightASL fog fogForecast fogParams forceAddUniform forcedMap forceEnd forceMap forceRespawn ' +
            'forceSpeed forceWalk forceWeaponFire forceWeatherChange forEachMember forEachMemberAgent ' +
            'forEachMemberTeam format formation formationDirection formationLeader formationMembers ' +
            'formationPosition formationTask formatText formLeader freeLook fromEditor fuel fullCrew ' +
            'gearIDCAmmoCount gearSlotAmmoCount gearSlotData get3DENActionState get3DENAttribute get3DENCamera ' +
            'get3DENConnections get3DENEntity get3DENEntityID get3DENGrid get3DENIconsVisible ' +
            'get3DENLayerEntities get3DENLinesVisible get3DENMissionAttribute get3DENMouseOver get3DENSelected ' +
            'getAimingCoef getAllHitPointsDamage getAllOwnedMines getAmmoCargo getAnimAimPrecision ' +
            'getAnimSpeedCoef getArray getArtilleryAmmo getArtilleryComputerSettings getArtilleryETA ' +
            'getAssignedCuratorLogic getAssignedCuratorUnit getBackpackCargo getBleedingRemaining ' +
            'getBurningValue getCameraViewDirection getCargoIndex getCenterOfMass getClientState ' +
            'getClientStateNumber getConnectedUAV getCustomAimingCoef getDammage getDescription getDir ' +
            'getDirVisual getDLCs getEditorCamera getEditorMode getEditorObjectScope getElevationOffset ' +
            'getFatigue getFriend getFSMVariable getFuelCargo getGroupIcon getGroupIconParams getGroupIcons ' +
            'getHideFrom getHit getHitIndex getHitPointDamage getItemCargo getMagazineCargo getMarkerColor ' +
            'getMarkerPos getMarkerSize getMarkerType getMass getMissionConfig getMissionConfigValue ' +
            'getMissionDLCs getMissionLayerEntities getModelInfo getMousePosition getNumber getObjectArgument ' +
            'getObjectChildren getObjectDLC getObjectMaterials getObjectProxy getObjectTextures getObjectType ' +
            'getObjectViewDistance getOxygenRemaining getPersonUsedDLCs getPilotCameraDirection ' +
            'getPilotCameraPosition getPilotCameraRotation getPilotCameraTarget getPlayerChannel ' +
            'getPlayerScores getPlayerUID getPos getPosASL getPosASLVisual getPosASLW getPosATL ' +
            'getPosATLVisual getPosVisual getPosWorld getRelDir getRelPos getRemoteSensorsDisabled ' +
            'getRepairCargo getResolution getShadowDistance getShotParents getSlingLoad getSpeed getStamina ' +
            'getStatValue getSuppression getTerrainHeightASL getText getUnitLoadout getUnitTrait getVariable ' +
            'getVehicleCargo getWeaponCargo getWeaponSway getWPPos glanceAt globalChat globalRadio goggles ' +
            'goto group groupChat groupFromNetId groupIconSelectable groupIconsVisible groupId groupOwner ' +
            'groupRadio groupSelectedUnits groupSelectUnit grpNull gunner gusts halt handgunItems ' +
            'handgunMagazine handgunWeapon handsHit hasInterface hasPilotCamera hasWeapon hcAllGroups ' +
            'hcGroupParams hcLeader hcRemoveAllGroups hcRemoveGroup hcSelected hcSelectGroup hcSetGroup ' +
            'hcShowBar hcShownBar headgear hideBody hideObject hideObjectGlobal hideSelection hint hintC ' +
            'hintCadet hintSilent hmd hostMission htmlLoad HUDMovementLevels humidity image importAllGroups ' +
            'importance in inArea inAreaArray incapacitatedState independent inflame inflamed ' +
            'inGameUISetEventHandler inheritsFrom initAmbientLife inPolygon inputAction inRangeOfArtillery ' +
            'insertEditorObject intersect is3DEN is3DENMultiplayer isAbleToBreathe isAgent isArray ' +
            'isAutoHoverOn isAutonomous isAutotest isBleeding isBurning isClass isCollisionLightOn ' +
            'isCopilotEnabled isDedicated isDLCAvailable isEngineOn isEqualTo isEqualType isEqualTypeAll ' +
            'isEqualTypeAny isEqualTypeArray isEqualTypeParams isFilePatchingEnabled isFlashlightOn ' +
            'isFlatEmpty isForcedWalk isFormationLeader isHidden isInRemainsCollector ' +
            'isInstructorFigureEnabled isIRLaserOn isKeyActive isKindOf isLightOn isLocalized isManualFire ' +
            'isMarkedForCollection isMultiplayer isMultiplayerSolo isNil isNull isNumber isObjectHidden ' +
            'isObjectRTD isOnRoad isPipEnabled isPlayer isRealTime isRemoteExecuted isRemoteExecutedJIP ' +
            'isServer isShowing3DIcons isSprintAllowed isStaminaEnabled isSteamMission ' +
            'isStreamFriendlyUIEnabled isText isTouchingGround isTurnedOut isTutHintsEnabled isUAVConnectable ' +
            'isUAVConnected isUniformAllowed isVehicleCargo isWalking isWeaponDeployed isWeaponRested ' +
            'itemCargo items itemsWithMagazines join joinAs joinAsSilent joinSilent joinString kbAddDatabase ' +
            'kbAddDatabaseTargets kbAddTopic kbHasTopic kbReact kbRemoveTopic kbTell kbWasSaid keyImage ' +
            'keyName knowsAbout land landAt landResult language laserTarget lbAdd lbClear lbColor lbCurSel ' +
            'lbData lbDelete lbIsSelected lbPicture lbSelection lbSetColor lbSetCurSel lbSetData lbSetPicture ' +
            'lbSetPictureColor lbSetPictureColorDisabled lbSetPictureColorSelected lbSetSelectColor ' +
            'lbSetSelectColorRight lbSetSelected lbSetTooltip lbSetValue lbSize lbSort lbSortByValue lbText ' +
            'lbValue leader leaderboardDeInit leaderboardGetRows leaderboardInit leaveVehicle libraryCredits ' +
            'libraryDisclaimers lifeState lightAttachObject lightDetachObject lightIsOn lightnings limitSpeed ' +
            'linearConversion lineBreak lineIntersects lineIntersectsObjs lineIntersectsSurfaces ' +
            'lineIntersectsWith linkItem list listObjects ln lnbAddArray lnbAddColumn lnbAddRow lnbClear ' +
            'lnbColor lnbCurSelRow lnbData lnbDeleteColumn lnbDeleteRow lnbGetColumnsPosition lnbPicture ' +
            'lnbSetColor lnbSetColumnsPos lnbSetCurSelRow lnbSetData lnbSetPicture lnbSetText lnbSetValue ' +
            'lnbSize lnbText lnbValue load loadAbs loadBackpack loadFile loadGame loadIdentity loadMagazine ' +
            'loadOverlay loadStatus loadUniform loadVest local localize locationNull locationPosition lock ' +
            'lockCameraTo lockCargo lockDriver locked lockedCargo lockedDriver lockedTurret lockIdentity ' +
            'lockTurret lockWP log logEntities logNetwork logNetworkTerminate lookAt lookAtPos magazineCargo ' +
            'magazines magazinesAllTurrets magazinesAmmo magazinesAmmoCargo magazinesAmmoFull magazinesDetail ' +
            'magazinesDetailBackpack magazinesDetailUniform magazinesDetailVest magazinesTurret ' +
            'magazineTurretAmmo mapAnimAdd mapAnimClear mapAnimCommit mapAnimDone mapCenterOnCamera ' +
            'mapGridPosition markAsFinishedOnSteam markerAlpha markerBrush markerColor markerDir markerPos ' +
            'markerShape markerSize markerText markerType max members menuAction menuAdd menuChecked menuClear ' +
            'menuCollapse menuData menuDelete menuEnable menuEnabled menuExpand menuHover menuPicture ' +
            'menuSetAction menuSetCheck menuSetData menuSetPicture menuSetValue menuShortcut menuShortcutText ' +
            'menuSize menuSort menuText menuURL menuValue min mineActive mineDetectedBy missionConfigFile ' +
            'missionDifficulty missionName missionNamespace missionStart missionVersion mod modelToWorld ' +
            'modelToWorldVisual modParams moonIntensity moonPhase morale move move3DENCamera moveInAny ' +
            'moveInCargo moveInCommander moveInDriver moveInGunner moveInTurret moveObjectToEnd moveOut ' +
            'moveTime moveTo moveToCompleted moveToFailed musicVolume name nameSound nearEntities ' +
            'nearestBuilding nearestLocation nearestLocations nearestLocationWithDubbing nearestObject ' +
            'nearestObjects nearestTerrainObjects nearObjects nearObjectsReady nearRoads nearSupplies ' +
            'nearTargets needReload netId netObjNull newOverlay nextMenuItemIndex nextWeatherChange nMenuItems ' +
            'not numberToDate objectCurators objectFromNetId objectParent objNull objStatus onBriefingGroup ' +
            'onBriefingNotes onBriefingPlan onBriefingTeamSwitch onCommandModeChanged onDoubleClick ' +
            'onEachFrame onGroupIconClick onGroupIconOverEnter onGroupIconOverLeave onHCGroupSelectionChanged ' +
            'onMapSingleClick onPlayerConnected onPlayerDisconnected onPreloadFinished onPreloadStarted ' +
            'onShowNewObject onTeamSwitch openCuratorInterface openDLCPage openMap openYoutubeVideo opfor or ' +
            'orderGetIn overcast overcastForecast owner param params parseNumber parseText parsingNamespace ' +
            'particlesQuality pi pickWeaponPool pitch pixelGrid pixelGridBase pixelGridNoUIScale pixelH pixelW ' +
            'playableSlotsNumber playableUnits playAction playActionNow player playerRespawnTime playerSide ' +
            'playersNumber playGesture playMission playMove playMoveNow playMusic playScriptedMission ' +
            'playSound playSound3D position positionCameraToWorld posScreenToWorld posWorldToScreen ' +
            'ppEffectAdjust ppEffectCommit ppEffectCommitted ppEffectCreate ppEffectDestroy ppEffectEnable ' +
            'ppEffectEnabled ppEffectForceInNVG precision preloadCamera preloadObject preloadSound ' +
            'preloadTitleObj preloadTitleRsc preprocessFile preprocessFileLineNumbers primaryWeapon ' +
            'primaryWeaponItems primaryWeaponMagazine priority private processDiaryLink productVersion ' +
            'profileName profileNamespace profileNameSteam progressLoadingScreen progressPosition ' +
            'progressSetPosition publicVariable publicVariableClient publicVariableServer pushBack ' +
            'pushBackUnique putWeaponPool queryItemsPool queryMagazinePool queryWeaponPool rad radioChannelAdd ' +
            'radioChannelCreate radioChannelRemove radioChannelSetCallSign radioChannelSetLabel radioVolume ' +
            'rain rainbow random rank rankId rating rectangular registeredTasks registerTask reload ' +
            'reloadEnabled remoteControl remoteExec remoteExecCall remove3DENConnection remove3DENEventHandler ' +
            'remove3DENLayer removeAction removeAll3DENEventHandlers removeAllActions removeAllAssignedItems ' +
            'removeAllContainers removeAllCuratorAddons removeAllCuratorCameraAreas ' +
            'removeAllCuratorEditingAreas removeAllEventHandlers removeAllHandgunItems removeAllItems ' +
            'removeAllItemsWithMagazines removeAllMissionEventHandlers removeAllMPEventHandlers ' +
            'removeAllMusicEventHandlers removeAllOwnedMines removeAllPrimaryWeaponItems removeAllWeapons ' +
            'removeBackpack removeBackpackGlobal removeCuratorAddons removeCuratorCameraArea ' +
            'removeCuratorEditableObjects removeCuratorEditingArea removeDrawIcon removeDrawLinks ' +
            'removeEventHandler removeFromRemainsCollector removeGoggles removeGroupIcon removeHandgunItem ' +
            'removeHeadgear removeItem removeItemFromBackpack removeItemFromUniform removeItemFromVest ' +
            'removeItems removeMagazine removeMagazineGlobal removeMagazines removeMagazinesTurret ' +
            'removeMagazineTurret removeMenuItem removeMissionEventHandler removeMPEventHandler ' +
            'removeMusicEventHandler removeOwnedMine removePrimaryWeaponItem removeSecondaryWeaponItem ' +
            'removeSimpleTask removeSwitchableUnit removeTeamMember removeUniform removeVest removeWeapon ' +
            'removeWeaponGlobal removeWeaponTurret requiredVersion resetCamShake resetSubgroupDirection ' +
            'resistance resize resources respawnVehicle restartEditorCamera reveal revealMine reverse ' +
            'reversedMouseY roadAt roadsConnectedTo roleDescription ropeAttachedObjects ropeAttachedTo ' +
            'ropeAttachEnabled ropeAttachTo ropeCreate ropeCut ropeDestroy ropeDetach ropeEndPosition ' +
            'ropeLength ropes ropeUnwind ropeUnwound rotorsForcesRTD rotorsRpmRTD round runInitScript ' +
            'safeZoneH safeZoneW safeZoneWAbs safeZoneX safeZoneXAbs safeZoneY save3DENInventory saveGame ' +
            'saveIdentity saveJoysticks saveOverlay saveProfileNamespace saveStatus saveVar savingEnabled say ' +
            'say2D say3D scopeName score scoreSide screenshot screenToWorld scriptDone scriptName scriptNull ' +
            'scudState secondaryWeapon secondaryWeaponItems secondaryWeaponMagazine select selectBestPlaces ' +
            'selectDiarySubject selectedEditorObjects selectEditorObject selectionNames selectionPosition ' +
            'selectLeader selectMax selectMin selectNoPlayer selectPlayer selectRandom selectWeapon ' +
            'selectWeaponTurret sendAUMessage sendSimpleCommand sendTask sendTaskResult sendUDPMessage ' +
            'serverCommand serverCommandAvailable serverCommandExecutable serverName serverTime set ' +
            'set3DENAttribute set3DENAttributes set3DENGrid set3DENIconsVisible set3DENLayer ' +
            'set3DENLinesVisible set3DENMissionAttributes set3DENModelsVisible set3DENObjectType ' +
            'set3DENSelected setAccTime setAirportSide setAmmo setAmmoCargo setAnimSpeedCoef setAperture ' +
            'setApertureNew setArmoryPoints setAttributes setAutonomous setBehaviour setBleedingRemaining ' +
            'setCameraInterest setCamShakeDefParams setCamShakeParams setCamUseTi setCaptive setCenterOfMass ' +
            'setCollisionLight setCombatMode setCompassOscillation setCuratorCameraAreaCeiling setCuratorCoef ' +
            'setCuratorEditingAreaType setCuratorWaypointCost setCurrentChannel setCurrentTask ' +
            'setCurrentWaypoint setCustomAimCoef setDamage setDammage setDate setDebriefingText ' +
            'setDefaultCamera setDestination setDetailMapBlendPars setDir setDirection setDrawIcon ' +
            'setDropInterval setEditorMode setEditorObjectScope setEffectCondition setFace setFaceAnimation ' +
            'setFatigue setFlagOwner setFlagSide setFlagTexture setFog setFormation setFormationTask ' +
            'setFormDir setFriend setFromEditor setFSMVariable setFuel setFuelCargo setGroupIcon ' +
            'setGroupIconParams setGroupIconsSelectable setGroupIconsVisible setGroupId setGroupIdGlobal ' +
            'setGroupOwner setGusts setHideBehind setHit setHitIndex setHitPointDamage setHorizonParallaxCoef ' +
            'setHUDMovementLevels setIdentity setImportance setLeader setLightAmbient setLightAttenuation ' +
            'setLightBrightness setLightColor setLightDayLight setLightFlareMaxDistance setLightFlareSize ' +
            'setLightIntensity setLightnings setLightUseFlare setLocalWindParams setMagazineTurretAmmo ' +
            'setMarkerAlpha setMarkerAlphaLocal setMarkerBrush setMarkerBrushLocal setMarkerColor ' +
            'setMarkerColorLocal setMarkerDir setMarkerDirLocal setMarkerPos setMarkerPosLocal setMarkerShape ' +
            'setMarkerShapeLocal setMarkerSize setMarkerSizeLocal setMarkerText setMarkerTextLocal ' +
            'setMarkerType setMarkerTypeLocal setMass setMimic setMousePosition setMusicEffect ' +
            'setMusicEventHandler setName setNameSound setObjectArguments setObjectMaterial ' +
            'setObjectMaterialGlobal setObjectProxy setObjectTexture setObjectTextureGlobal ' +
            'setObjectViewDistance setOvercast setOwner setOxygenRemaining setParticleCircle setParticleClass ' +
            'setParticleFire setParticleParams setParticleRandom setPilotCameraDirection ' +
            'setPilotCameraRotation setPilotCameraTarget setPilotLight setPiPEffect setPitch setPlayable ' +
            'setPlayerRespawnTime setPos setPosASL setPosASL2 setPosASLW setPosATL setPosition setPosWorld ' +
            'setRadioMsg setRain setRainbow setRandomLip setRank setRectangular setRepairCargo ' +
            'setShadowDistance setShotParents setSide setSimpleTaskAlwaysVisible setSimpleTaskCustomData ' +
            'setSimpleTaskDescription setSimpleTaskDestination setSimpleTaskTarget setSimpleTaskType ' +
            'setSimulWeatherLayers setSize setSkill setSlingLoad setSoundEffect setSpeaker setSpeech ' +
            'setSpeedMode setStamina setStaminaScheme setStatValue setSuppression setSystemOfUnits ' +
            'setTargetAge setTaskResult setTaskState setTerrainGrid setText setTimeMultiplier setTitleEffect ' +
            'setTriggerActivation setTriggerArea setTriggerStatements setTriggerText setTriggerTimeout ' +
            'setTriggerType setType setUnconscious setUnitAbility setUnitLoadout setUnitPos setUnitPosWeak ' +
            'setUnitRank setUnitRecoilCoefficient setUnitTrait setUnloadInCombat setUserActionText setVariable ' +
            'setVectorDir setVectorDirAndUp setVectorUp setVehicleAmmo setVehicleAmmoDef setVehicleArmor ' +
            'setVehicleCargo setVehicleId setVehicleLock setVehiclePosition setVehicleTiPars setVehicleVarName ' +
            'setVelocity setVelocityTransformation setViewDistance setVisibleIfTreeCollapsed setWaves ' +
            'setWaypointBehaviour setWaypointCombatMode setWaypointCompletionRadius setWaypointDescription ' +
            'setWaypointForceBehaviour setWaypointFormation setWaypointHousePosition setWaypointLoiterRadius ' +
            'setWaypointLoiterType setWaypointName setWaypointPosition setWaypointScript setWaypointSpeed ' +
            'setWaypointStatements setWaypointTimeout setWaypointType setWaypointVisible ' +
            'setWeaponReloadingTime setWind setWindDir setWindForce setWindStr setWPPos show3DIcons showChat ' +
            'showCinemaBorder showCommandingMenu showCompass showCuratorCompass showGPS showHUD showLegend ' +
            'showMap shownArtilleryComputer shownChat shownCompass shownCuratorCompass showNewEditorObject ' +
            'shownGPS shownHUD shownMap shownPad shownRadio shownScoretable shownUAVFeed shownWarrant ' +
            'shownWatch showPad showRadio showScoretable showSubtitles showUAVFeed showWarrant showWatch ' +
            'showWaypoint showWaypoints side sideAmbientLife sideChat sideEmpty sideEnemy sideFriendly ' +
            'sideLogic sideRadio sideUnknown simpleTasks simulationEnabled simulCloudDensity ' +
            'simulCloudOcclusion simulInClouds simulWeatherSync sin size sizeOf skill skillFinal skipTime ' +
            'sleep sliderPosition sliderRange sliderSetPosition sliderSetRange sliderSetSpeed sliderSpeed ' +
            'slingLoadAssistantShown soldierMagazines someAmmo sort soundVolume spawn speaker speed speedMode ' +
            'splitString sqrt squadParams stance startLoadingScreen step stop stopEngineRTD stopped str ' +
            'sunOrMoon supportInfo suppressFor surfaceIsWater surfaceNormal surfaceType swimInDepth ' +
            'switchableUnits switchAction switchCamera switchGesture switchLight switchMove ' +
            'synchronizedObjects synchronizedTriggers synchronizedWaypoints synchronizeObjectsAdd ' +
            'synchronizeObjectsRemove synchronizeTrigger synchronizeWaypoint systemChat systemOfUnits tan ' +
            'targetKnowledge targetsAggregate targetsQuery taskAlwaysVisible taskChildren taskCompleted ' +
            'taskCustomData taskDescription taskDestination taskHint taskMarkerOffset taskNull taskParent ' +
            'taskResult taskState taskType teamMember teamMemberNull teamName teams teamSwitch ' +
            'teamSwitchEnabled teamType terminate terrainIntersect terrainIntersectASL text textLog ' +
            'textLogFormat tg time timeMultiplier titleCut titleFadeOut titleObj titleRsc titleText toArray ' +
            'toFixed toLower toString toUpper triggerActivated triggerActivation triggerArea ' +
            'triggerAttachedVehicle triggerAttachObject triggerAttachVehicle triggerStatements triggerText ' +
            'triggerTimeout triggerTimeoutCurrent triggerType turretLocal turretOwner turretUnit tvAdd tvClear ' +
            'tvCollapse tvCount tvCurSel tvData tvDelete tvExpand tvPicture tvSetCurSel tvSetData tvSetPicture ' +
            'tvSetPictureColor tvSetPictureColorDisabled tvSetPictureColorSelected tvSetPictureRight ' +
            'tvSetPictureRightColor tvSetPictureRightColorDisabled tvSetPictureRightColorSelected tvSetText ' +
            'tvSetTooltip tvSetValue tvSort tvSortByValue tvText tvTooltip tvValue type typeName typeOf ' +
            'UAVControl uiNamespace uiSleep unassignCurator unassignItem unassignTeam unassignVehicle ' +
            'underwater uniform uniformContainer uniformItems uniformMagazines unitAddons unitAimPosition ' +
            'unitAimPositionVisual unitBackpack unitIsUAV unitPos unitReady unitRecoilCoefficient units ' +
            'unitsBelowHeight unlinkItem unlockAchievement unregisterTask updateDrawIcon updateMenuItem ' +
            'updateObjectTree useAISteeringComponent useAudioTimeForMoves vectorAdd vectorCos ' +
            'vectorCrossProduct vectorDiff vectorDir vectorDirVisual vectorDistance vectorDistanceSqr ' +
            'vectorDotProduct vectorFromTo vectorMagnitude vectorMagnitudeSqr vectorMultiply vectorNormalized ' +
            'vectorUp vectorUpVisual vehicle vehicleCargoEnabled vehicleChat vehicleRadio vehicles ' +
            'vehicleVarName velocity velocityModelSpace verifySignature vest vestContainer vestItems ' +
            'vestMagazines viewDistance visibleCompass visibleGPS visibleMap visiblePosition ' +
            'visiblePositionASL visibleScoretable visibleWatch waves waypointAttachedObject ' +
            'waypointAttachedVehicle waypointAttachObject waypointAttachVehicle waypointBehaviour ' +
            'waypointCombatMode waypointCompletionRadius waypointDescription waypointForceBehaviour ' +
            'waypointFormation waypointHousePosition waypointLoiterRadius waypointLoiterType waypointName ' +
            'waypointPosition waypoints waypointScript waypointsEnabledUAV waypointShow waypointSpeed ' +
            'waypointStatements waypointTimeout waypointTimeoutCurrent waypointType waypointVisible ' +
            'weaponAccessories weaponAccessoriesCargo weaponCargo weaponDirection weaponInertia weaponLowered ' +
            'weapons weaponsItems weaponsItemsCargo weaponState weaponsTurret weightRTD west WFSideText wind',
          literal:
            'true false nil'
        },
        contains: [
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          hljs.NUMBER_MODE,
          VARIABLE,
          FUNCTION,
          STRINGS,
          CPP.preprocessor
        ],
        illegal: /#/
      };
    };
    
    /***/ }),
    /* 551 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var COMMENT_MODE = hljs.COMMENT('--', '$');
      return {
        case_insensitive: true,
        illegal: /[<>{}*#]/,
        contains: [
          {
            beginKeywords:
              'begin end start commit rollback savepoint lock alter create drop rename call ' +
              'delete do handler insert load replace select truncate update set show pragma grant ' +
              'merge describe use explain help declare prepare execute deallocate release ' +
              'unlock purge reset change stop analyze cache flush optimize repair kill ' +
              'install uninstall checksum restore check backup revoke comment',
            end: /;/, endsWithParent: true,
            lexemes: /[\w\.]+/,
            keywords: {
              keyword:
                'abort abs absolute acc acce accep accept access accessed accessible account acos action activate add ' +
                'addtime admin administer advanced advise aes_decrypt aes_encrypt after agent aggregate ali alia alias ' +
                'allocate allow alter always analyze ancillary and any anydata anydataset anyschema anytype apply ' +
                'archive archived archivelog are as asc ascii asin assembly assertion associate asynchronous at atan ' +
                'atn2 attr attri attrib attribu attribut attribute attributes audit authenticated authentication authid ' +
                'authors auto autoallocate autodblink autoextend automatic availability avg backup badfile basicfile ' +
                'before begin beginning benchmark between bfile bfile_base big bigfile bin binary_double binary_float ' +
                'binlog bit_and bit_count bit_length bit_or bit_xor bitmap blob_base block blocksize body both bound ' +
                'buffer_cache buffer_pool build bulk by byte byteordermark bytes cache caching call calling cancel ' +
                'capacity cascade cascaded case cast catalog category ceil ceiling chain change changed char_base ' +
                'char_length character_length characters characterset charindex charset charsetform charsetid check ' +
                'checksum checksum_agg child choose chr chunk class cleanup clear client clob clob_base clone close ' +
                'cluster_id cluster_probability cluster_set clustering coalesce coercibility col collate collation ' +
                'collect colu colum column column_value columns columns_updated comment commit compact compatibility ' +
                'compiled complete composite_limit compound compress compute concat concat_ws concurrent confirm conn ' +
                'connec connect connect_by_iscycle connect_by_isleaf connect_by_root connect_time connection ' +
                'consider consistent constant constraint constraints constructor container content contents context ' +
                'contributors controlfile conv convert convert_tz corr corr_k corr_s corresponding corruption cos cost ' +
                'count count_big counted covar_pop covar_samp cpu_per_call cpu_per_session crc32 create creation ' +
                'critical cross cube cume_dist curdate current current_date current_time current_timestamp current_user ' +
                'cursor curtime customdatum cycle data database databases datafile datafiles datalength date_add ' +
                'date_cache date_format date_sub dateadd datediff datefromparts datename datepart datetime2fromparts ' +
                'day day_to_second dayname dayofmonth dayofweek dayofyear days db_role_change dbtimezone ddl deallocate ' +
                'declare decode decompose decrement decrypt deduplicate def defa defau defaul default defaults ' +
                'deferred defi defin define degrees delayed delegate delete delete_all delimited demand dense_rank ' +
                'depth dequeue des_decrypt des_encrypt des_key_file desc descr descri describ describe descriptor ' +
                'deterministic diagnostics difference dimension direct_load directory disable disable_all ' +
                'disallow disassociate discardfile disconnect diskgroup distinct distinctrow distribute distributed div ' +
                'do document domain dotnet double downgrade drop dumpfile duplicate duration each edition editionable ' +
                'editions element ellipsis else elsif elt empty enable enable_all enclosed encode encoding encrypt ' +
                'end end-exec endian enforced engine engines enqueue enterprise entityescaping eomonth error errors ' +
                'escaped evalname evaluate event eventdata events except exception exceptions exchange exclude excluding ' +
                'execu execut execute exempt exists exit exp expire explain export export_set extended extent external ' +
                'external_1 external_2 externally extract failed failed_login_attempts failover failure far fast ' +
                'feature_set feature_value fetch field fields file file_name_convert filesystem_like_logging final ' +
                'finish first first_value fixed flash_cache flashback floor flush following follows for forall force ' +
                'form forma format found found_rows freelist freelists freepools fresh from from_base64 from_days ' +
                'ftp full function general generated get get_format get_lock getdate getutcdate global global_name ' +
                'globally go goto grant grants greatest group group_concat group_id grouping grouping_id groups ' +
                'gtid_subtract guarantee guard handler hash hashkeys having hea head headi headin heading heap help hex ' +
                'hierarchy high high_priority hosts hour http id ident_current ident_incr ident_seed identified ' +
                'identity idle_time if ifnull ignore iif ilike ilm immediate import in include including increment ' +
                'index indexes indexing indextype indicator indices inet6_aton inet6_ntoa inet_aton inet_ntoa infile ' +
                'initial initialized initially initrans inmemory inner innodb input insert install instance instantiable ' +
                'instr interface interleaved intersect into invalidate invisible is is_free_lock is_ipv4 is_ipv4_compat ' +
                'is_not is_not_null is_used_lock isdate isnull isolation iterate java join json json_exists ' +
                'keep keep_duplicates key keys kill language large last last_day last_insert_id last_value lax lcase ' +
                'lead leading least leaves left len lenght length less level levels library like like2 like4 likec limit ' +
                'lines link list listagg little ln load load_file lob lobs local localtime localtimestamp locate ' +
                'locator lock locked log log10 log2 logfile logfiles logging logical logical_reads_per_call ' +
                'logoff logon logs long loop low low_priority lower lpad lrtrim ltrim main make_set makedate maketime ' +
                'managed management manual map mapping mask master master_pos_wait match matched materialized max ' +
                'maxextents maximize maxinstances maxlen maxlogfiles maxloghistory maxlogmembers maxsize maxtrans ' +
                'md5 measures median medium member memcompress memory merge microsecond mid migration min minextents ' +
                'minimum mining minus minute minvalue missing mod mode model modification modify module monitoring month ' +
                'months mount move movement multiset mutex name name_const names nan national native natural nav nchar ' +
                'nclob nested never new newline next nextval no no_write_to_binlog noarchivelog noaudit nobadfile ' +
                'nocheck nocompress nocopy nocycle nodelay nodiscardfile noentityescaping noguarantee nokeep nologfile ' +
                'nomapping nomaxvalue nominimize nominvalue nomonitoring none noneditionable nonschema noorder ' +
                'nopr nopro noprom nopromp noprompt norely noresetlogs noreverse normal norowdependencies noschemacheck ' +
                'noswitch not nothing notice notrim novalidate now nowait nth_value nullif nulls num numb numbe ' +
                'nvarchar nvarchar2 object ocicoll ocidate ocidatetime ociduration ociinterval ociloblocator ocinumber ' +
                'ociref ocirefcursor ocirowid ocistring ocitype oct octet_length of off offline offset oid oidindex old ' +
                'on online only opaque open operations operator optimal optimize option optionally or oracle oracle_date ' +
                'oradata ord ordaudio orddicom orddoc order ordimage ordinality ordvideo organization orlany orlvary ' +
                'out outer outfile outline output over overflow overriding package pad parallel parallel_enable ' +
                'parameters parent parse partial partition partitions pascal passing password password_grace_time ' +
                'password_lock_time password_reuse_max password_reuse_time password_verify_function patch path patindex ' +
                'pctincrease pctthreshold pctused pctversion percent percent_rank percentile_cont percentile_disc ' +
                'performance period period_add period_diff permanent physical pi pipe pipelined pivot pluggable plugin ' +
                'policy position post_transaction pow power pragma prebuilt precedes preceding precision prediction ' +
                'prediction_cost prediction_details prediction_probability prediction_set prepare present preserve ' +
                'prior priority private private_sga privileges procedural procedure procedure_analyze processlist ' +
                'profiles project prompt protection public publishingservername purge quarter query quick quiesce quota ' +
                'quotename radians raise rand range rank raw read reads readsize rebuild record records ' +
                'recover recovery recursive recycle redo reduced ref reference referenced references referencing refresh ' +
                'regexp_like register regr_avgx regr_avgy regr_count regr_intercept regr_r2 regr_slope regr_sxx regr_sxy ' +
                'reject rekey relational relative relaylog release release_lock relies_on relocate rely rem remainder rename ' +
                'repair repeat replace replicate replication required reset resetlogs resize resource respect restore ' +
                'restricted result result_cache resumable resume retention return returning returns reuse reverse revoke ' +
                'right rlike role roles rollback rolling rollup round row row_count rowdependencies rowid rownum rows ' +
                'rtrim rules safe salt sample save savepoint sb1 sb2 sb4 scan schema schemacheck scn scope scroll ' +
                'sdo_georaster sdo_topo_geometry search sec_to_time second section securefile security seed segment select ' +
                'self sequence sequential serializable server servererror session session_user sessions_per_user set ' +
                'sets settings sha sha1 sha2 share shared shared_pool short show shrink shutdown si_averagecolor ' +
                'si_colorhistogram si_featurelist si_positionalcolor si_stillimage si_texture siblings sid sign sin ' +
                'size size_t sizes skip slave sleep smalldatetimefromparts smallfile snapshot some soname sort soundex ' +
                'source space sparse spfile split sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows ' +
                'sql_small_result sql_variant_property sqlcode sqldata sqlerror sqlname sqlstate sqrt square standalone ' +
                'standby start starting startup statement static statistics stats_binomial_test stats_crosstab ' +
                'stats_ks_test stats_mode stats_mw_test stats_one_way_anova stats_t_test_ stats_t_test_indep ' +
                'stats_t_test_one stats_t_test_paired stats_wsr_test status std stddev stddev_pop stddev_samp stdev ' +
                'stop storage store stored str str_to_date straight_join strcmp strict string struct stuff style subdate ' +
                'subpartition subpartitions substitutable substr substring subtime subtring_index subtype success sum ' +
                'suspend switch switchoffset switchover sync synchronous synonym sys sys_xmlagg sysasm sysaux sysdate ' +
                'sysdatetimeoffset sysdba sysoper system system_user sysutcdatetime table tables tablespace tan tdo ' +
                'template temporary terminated tertiary_weights test than then thread through tier ties time time_format ' +
                'time_zone timediff timefromparts timeout timestamp timestampadd timestampdiff timezone_abbr ' +
                'timezone_minute timezone_region to to_base64 to_date to_days to_seconds todatetimeoffset trace tracking ' +
                'transaction transactional translate translation treat trigger trigger_nestlevel triggers trim truncate ' +
                'try_cast try_convert try_parse type ub1 ub2 ub4 ucase unarchived unbounded uncompress ' +
                'under undo unhex unicode uniform uninstall union unique unix_timestamp unknown unlimited unlock unpivot ' +
                'unrecoverable unsafe unsigned until untrusted unusable unused update updated upgrade upped upper upsert ' +
                'url urowid usable usage use use_stored_outlines user user_data user_resources users using utc_date ' +
                'utc_timestamp uuid uuid_short validate validate_password_strength validation valist value values var ' +
                'var_samp varcharc vari varia variab variabl variable variables variance varp varraw varrawc varray ' +
                'verify version versions view virtual visible void wait wallet warning warnings week weekday weekofyear ' +
                'wellformed when whene whenev wheneve whenever where while whitespace with within without work wrapped ' +
                'xdb xml xmlagg xmlattributes xmlcast xmlcolattval xmlelement xmlexists xmlforest xmlindex xmlnamespaces ' +
                'xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltype xor year year_to_month years yearweek',
              literal:
                'true false null',
              built_in:
                'array bigint binary bit blob boolean char character date dec decimal float int int8 integer interval number ' +
                'numeric real record serial serial8 smallint text varchar varying void'
            },
            contains: [
              {
                className: 'string',
                begin: '\'', end: '\'',
                contains: [hljs.BACKSLASH_ESCAPE, {begin: '\'\''}]
              },
              {
                className: 'string',
                begin: '"', end: '"',
                contains: [hljs.BACKSLASH_ESCAPE, {begin: '""'}]
              },
              {
                className: 'string',
                begin: '`', end: '`',
                contains: [hljs.BACKSLASH_ESCAPE]
              },
              hljs.C_NUMBER_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              COMMENT_MODE
            ]
          },
          hljs.C_BLOCK_COMMENT_MODE,
          COMMENT_MODE
        ]
      };
    };
    
    /***/ }),
    /* 552 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        contains: [
          hljs.HASH_COMMENT_MODE,
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          {
            begin: hljs.UNDERSCORE_IDENT_RE,
            lexemes: hljs.UNDERSCORE_IDENT_RE,
            keywords: {
              // Stan's keywords
              name:
                'for in while repeat until if then else',
              // Stan's probablity distributions (less beta and gamma, as commonly
              // used for parameter names). So far, _log and _rng variants are not
              // included
              symbol:
                'bernoulli bernoulli_logit binomial binomial_logit '               +
                'beta_binomial hypergeometric categorical categorical_logit '      +
                'ordered_logistic neg_binomial neg_binomial_2 '                    +
                'neg_binomial_2_log poisson poisson_log multinomial normal '       +
                'exp_mod_normal skew_normal student_t cauchy double_exponential '  +
                'logistic gumbel lognormal chi_square inv_chi_square '             +
                'scaled_inv_chi_square exponential inv_gamma weibull frechet '     +
                'rayleigh wiener pareto pareto_type_2 von_mises uniform '          +
                'multi_normal multi_normal_prec multi_normal_cholesky multi_gp '   +
                'multi_gp_cholesky multi_student_t gaussian_dlm_obs dirichlet '    +
                'lkj_corr lkj_corr_cholesky wishart inv_wishart',
              // Stan's data types
              'selector-tag':
                'int real vector simplex unit_vector ordered positive_ordered '    +
                'row_vector matrix cholesky_factor_corr cholesky_factor_cov '      +
                'corr_matrix cov_matrix',
              // Stan's model blocks
              title:
                'functions model data parameters quantities transformed '          +
                'generated',
              literal:
                'true false'
            },
            relevance: 0
          },
          // The below is all taken from the R language definition
          {
            // hex value
            className: 'number',
            begin: "0[xX][0-9a-fA-F]+[Li]?\\b",
            relevance: 0
          },
          {
            // hex value
            className: 'number',
            begin: "0[xX][0-9a-fA-F]+[Li]?\\b",
            relevance: 0
          },
          {
            // explicit integer
            className: 'number',
            begin: "\\d+(?:[eE][+\\-]?\\d*)?L\\b",
            relevance: 0
          },
          {
            // number with trailing decimal
            className: 'number',
            begin: "\\d+\\.(?!\\d)(?:i\\b)?",
            relevance: 0
          },
          {
            // number
            className: 'number',
            begin: "\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d*)?i?\\b",
            relevance: 0
          },
          {
            // number with leading decimal
            className: 'number',
            begin: "\\.\\d+(?:[eE][+\\-]?\\d*)?i?\\b",
            relevance: 0
          }
        ]
      };
    };
    
    /***/ }),
    /* 553 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        aliases: ['do', 'ado'],
        case_insensitive: true,
        keywords: 'if else in foreach for forv forva forval forvalu forvalue forvalues by bys bysort xi quietly qui capture about ac ac_7 acprplot acprplot_7 adjust ado adopath adoupdate alpha ameans an ano anov anova anova_estat anova_terms anovadef aorder ap app appe appen append arch arch_dr arch_estat arch_p archlm areg areg_p args arima arima_dr arima_estat arima_p as asmprobit asmprobit_estat asmprobit_lf asmprobit_mfx__dlg asmprobit_p ass asse asser assert avplot avplot_7 avplots avplots_7 bcskew0 bgodfrey binreg bip0_lf biplot bipp_lf bipr_lf bipr_p biprobit bitest bitesti bitowt blogit bmemsize boot bootsamp bootstrap bootstrap_8 boxco_l boxco_p boxcox boxcox_6 boxcox_p bprobit br break brier bro brow brows browse brr brrstat bs bs_7 bsampl_w bsample bsample_7 bsqreg bstat bstat_7 bstat_8 bstrap bstrap_7 ca ca_estat ca_p cabiplot camat canon canon_8 canon_8_p canon_estat canon_p cap caprojection capt captu captur capture cat cc cchart cchart_7 cci cd censobs_table centile cf char chdir checkdlgfiles checkestimationsample checkhlpfiles checksum chelp ci cii cl class classutil clear cli clis clist clo clog clog_lf clog_p clogi clogi_sw clogit clogit_lf clogit_p clogitp clogl_sw cloglog clonevar clslistarray cluster cluster_measures cluster_stop cluster_tree cluster_tree_8 clustermat cmdlog cnr cnre cnreg cnreg_p cnreg_sw cnsreg codebook collaps4 collapse colormult_nb colormult_nw compare compress conf confi confir confirm conren cons const constr constra constrai constrain constraint continue contract copy copyright copysource cor corc corr corr2data corr_anti corr_kmo corr_smc corre correl correla correlat correlate corrgram cou coun count cox cox_p cox_sw coxbase coxhaz coxvar cprplot cprplot_7 crc cret cretu cretur creturn cross cs cscript cscript_log csi ct ct_is ctset ctst_5 ctst_st cttost cumsp cumsp_7 cumul cusum cusum_7 cutil d|0 datasig datasign datasigna datasignat datasignatu datasignatur datasignature datetof db dbeta de dec deco decod decode deff des desc descr descri describ describe destring dfbeta dfgls dfuller di di_g dir dirstats dis discard disp disp_res disp_s displ displa display distinct do doe doed doedi doedit dotplot dotplot_7 dprobit drawnorm drop ds ds_util dstdize duplicates durbina dwstat dydx e|0 ed edi edit egen eivreg emdef en enc enco encod encode eq erase ereg ereg_lf ereg_p ereg_sw ereghet ereghet_glf ereghet_glf_sh ereghet_gp ereghet_ilf ereghet_ilf_sh ereghet_ip eret eretu eretur ereturn err erro error est est_cfexist est_cfname est_clickable est_expand est_hold est_table est_unhold est_unholdok estat estat_default estat_summ estat_vce_only esti estimates etodow etof etomdy ex exi exit expand expandcl fac fact facto factor factor_estat factor_p factor_pca_rotated factor_rotate factormat fcast fcast_compute fcast_graph fdades fdadesc fdadescr fdadescri fdadescrib fdadescribe fdasav fdasave fdause fh_st file open file read file close file filefilter fillin find_hlp_file findfile findit findit_7 fit fl fli flis flist for5_0 form forma format fpredict frac_154 frac_adj frac_chk frac_cox frac_ddp frac_dis frac_dv frac_in frac_mun frac_pp frac_pq frac_pv frac_wgt frac_xo fracgen fracplot fracplot_7 fracpoly fracpred fron_ex fron_hn fron_p fron_tn fron_tn2 frontier ftodate ftoe ftomdy ftowdate g|0 gamhet_glf gamhet_gp gamhet_ilf gamhet_ip gamma gamma_d2 gamma_p gamma_sw gammahet gdi_hexagon gdi_spokes ge gen gene gener genera generat generate genrank genstd genvmean gettoken gl gladder gladder_7 glim_l01 glim_l02 glim_l03 glim_l04 glim_l05 glim_l06 glim_l07 glim_l08 glim_l09 glim_l10 glim_l11 glim_l12 glim_lf glim_mu glim_nw1 glim_nw2 glim_nw3 glim_p glim_v1 glim_v2 glim_v3 glim_v4 glim_v5 glim_v6 glim_v7 glm glm_6 glm_p glm_sw glmpred glo glob globa global glogit glogit_8 glogit_p gmeans gnbre_lf gnbreg gnbreg_5 gnbreg_p gomp_lf gompe_sw gomper_p gompertz gompertzhet gomphet_glf gomphet_glf_sh gomphet_gp gomphet_ilf gomphet_ilf_sh gomphet_ip gphdot gphpen gphprint gprefs gprobi_p gprobit gprobit_8 gr gr7 gr_copy gr_current gr_db gr_describe gr_dir gr_draw gr_draw_replay gr_drop gr_edit gr_editviewopts gr_example gr_example2 gr_export gr_print gr_qscheme gr_query gr_read gr_rename gr_replay gr_save gr_set gr_setscheme gr_table gr_undo gr_use graph graph7 grebar greigen greigen_7 greigen_8 grmeanby grmeanby_7 gs_fileinfo gs_filetype gs_graphinfo gs_stat gsort gwood h|0 hadimvo hareg hausman haver he heck_d2 heckma_p heckman heckp_lf heckpr_p heckprob hel help hereg hetpr_lf hetpr_p hetprob hettest hexdump hilite hist hist_7 histogram hlogit hlu hmeans hotel hotelling hprobit hreg hsearch icd9 icd9_ff icd9p iis impute imtest inbase include inf infi infil infile infix inp inpu input ins insheet insp inspe inspec inspect integ inten intreg intreg_7 intreg_p intrg2_ll intrg_ll intrg_ll2 ipolate iqreg ir irf irf_create irfm iri is_svy is_svysum isid istdize ivprob_1_lf ivprob_lf ivprobit ivprobit_p ivreg ivreg_footnote ivtob_1_lf ivtob_lf ivtobit ivtobit_p jackknife jacknife jknife jknife_6 jknife_8 jkstat joinby kalarma1 kap kap_3 kapmeier kappa kapwgt kdensity kdensity_7 keep ksm ksmirnov ktau kwallis l|0 la lab labe label labelbook ladder levels levelsof leverage lfit lfit_p li lincom line linktest lis list lloghet_glf lloghet_glf_sh lloghet_gp lloghet_ilf lloghet_ilf_sh lloghet_ip llogi_sw llogis_p llogist llogistic llogistichet lnorm_lf lnorm_sw lnorma_p lnormal lnormalhet lnormhet_glf lnormhet_glf_sh lnormhet_gp lnormhet_ilf lnormhet_ilf_sh lnormhet_ip lnskew0 loadingplot loc loca local log logi logis_lf logistic logistic_p logit logit_estat logit_p loglogs logrank loneway lookfor lookup lowess lowess_7 lpredict lrecomp lroc lroc_7 lrtest ls lsens lsens_7 lsens_x lstat ltable ltable_7 ltriang lv lvr2plot lvr2plot_7 m|0 ma mac macr macro makecns man manova manova_estat manova_p manovatest mantel mark markin markout marksample mat mat_capp mat_order mat_put_rr mat_rapp mata mata_clear mata_describe mata_drop mata_matdescribe mata_matsave mata_matuse mata_memory mata_mlib mata_mosave mata_rename mata_which matalabel matcproc matlist matname matr matri matrix matrix_input__dlg matstrik mcc mcci md0_ md1_ md1debug_ md2_ md2debug_ mds mds_estat mds_p mdsconfig mdslong mdsmat mdsshepard mdytoe mdytof me_derd mean means median memory memsize meqparse mer merg merge mfp mfx mhelp mhodds minbound mixed_ll mixed_ll_reparm mkassert mkdir mkmat mkspline ml ml_5 ml_adjs ml_bhhhs ml_c_d ml_check ml_clear ml_cnt ml_debug ml_defd ml_e0 ml_e0_bfgs ml_e0_cycle ml_e0_dfp ml_e0i ml_e1 ml_e1_bfgs ml_e1_bhhh ml_e1_cycle ml_e1_dfp ml_e2 ml_e2_cycle ml_ebfg0 ml_ebfr0 ml_ebfr1 ml_ebh0q ml_ebhh0 ml_ebhr0 ml_ebr0i ml_ecr0i ml_edfp0 ml_edfr0 ml_edfr1 ml_edr0i ml_eds ml_eer0i ml_egr0i ml_elf ml_elf_bfgs ml_elf_bhhh ml_elf_cycle ml_elf_dfp ml_elfi ml_elfs ml_enr0i ml_enrr0 ml_erdu0 ml_erdu0_bfgs ml_erdu0_bhhh ml_erdu0_bhhhq ml_erdu0_cycle ml_erdu0_dfp ml_erdu0_nrbfgs ml_exde ml_footnote ml_geqnr ml_grad0 ml_graph ml_hbhhh ml_hd0 ml_hold ml_init ml_inv ml_log ml_max ml_mlout ml_mlout_8 ml_model ml_nb0 ml_opt ml_p ml_plot ml_query ml_rdgrd ml_repor ml_s_e ml_score ml_searc ml_technique ml_unhold mleval mlf_ mlmatbysum mlmatsum mlog mlogi mlogit mlogit_footnote mlogit_p mlopts mlsum mlvecsum mnl0_ mor more mov move mprobit mprobit_lf mprobit_p mrdu0_ mrdu1_ mvdecode mvencode mvreg mvreg_estat n|0 nbreg nbreg_al nbreg_lf nbreg_p nbreg_sw nestreg net newey newey_7 newey_p news nl nl_7 nl_9 nl_9_p nl_p nl_p_7 nlcom nlcom_p nlexp2 nlexp2_7 nlexp2a nlexp2a_7 nlexp3 nlexp3_7 nlgom3 nlgom3_7 nlgom4 nlgom4_7 nlinit nllog3 nllog3_7 nllog4 nllog4_7 nlog_rd nlogit nlogit_p nlogitgen nlogittree nlpred no nobreak noi nois noisi noisil noisily note notes notes_dlg nptrend numlabel numlist odbc old_ver olo olog ologi ologi_sw ologit ologit_p ologitp on one onew onewa oneway op_colnm op_comp op_diff op_inv op_str opr opro oprob oprob_sw oprobi oprobi_p oprobit oprobitp opts_exclusive order orthog orthpoly ou out outf outfi outfil outfile outs outsh outshe outshee outsheet ovtest pac pac_7 palette parse parse_dissim pause pca pca_8 pca_display pca_estat pca_p pca_rotate pcamat pchart pchart_7 pchi pchi_7 pcorr pctile pentium pergram pergram_7 permute permute_8 personal peto_st pkcollapse pkcross pkequiv pkexamine pkexamine_7 pkshape pksumm pksumm_7 pl plo plot plugin pnorm pnorm_7 poisgof poiss_lf poiss_sw poisso_p poisson poisson_estat post postclose postfile postutil pperron pr prais prais_e prais_e2 prais_p predict predictnl preserve print pro prob probi probit probit_estat probit_p proc_time procoverlay procrustes procrustes_estat procrustes_p profiler prog progr progra program prop proportion prtest prtesti pwcorr pwd q\\s qby qbys qchi qchi_7 qladder qladder_7 qnorm qnorm_7 qqplot qqplot_7 qreg qreg_c qreg_p qreg_sw qu quadchk quantile quantile_7 que quer query range ranksum ratio rchart rchart_7 rcof recast reclink recode reg reg3 reg3_p regdw regr regre regre_p2 regres regres_p regress regress_estat regriv_p remap ren rena renam rename renpfix repeat replace report reshape restore ret retu retur return rm rmdir robvar roccomp roccomp_7 roccomp_8 rocf_lf rocfit rocfit_8 rocgold rocplot rocplot_7 roctab roctab_7 rolling rologit rologit_p rot rota rotat rotate rotatemat rreg rreg_p ru run runtest rvfplot rvfplot_7 rvpplot rvpplot_7 sa safesum sample sampsi sav save savedresults saveold sc sca scal scala scalar scatter scm_mine sco scob_lf scob_p scobi_sw scobit scor score scoreplot scoreplot_help scree screeplot screeplot_help sdtest sdtesti se search separate seperate serrbar serrbar_7 serset set set_defaults sfrancia sh she shel shell shewhart shewhart_7 signestimationsample signrank signtest simul simul_7 simulate simulate_8 sktest sleep slogit slogit_d2 slogit_p smooth snapspan so sor sort spearman spikeplot spikeplot_7 spikeplt spline_x split sqreg sqreg_p sret sretu sretur sreturn ssc st st_ct st_hc st_hcd st_hcd_sh st_is st_issys st_note st_promo st_set st_show st_smpl st_subid stack statsby statsby_8 stbase stci stci_7 stcox stcox_estat stcox_fr stcox_fr_ll stcox_p stcox_sw stcoxkm stcoxkm_7 stcstat stcurv stcurve stcurve_7 stdes stem stepwise stereg stfill stgen stir stjoin stmc stmh stphplot stphplot_7 stphtest stphtest_7 stptime strate strate_7 streg streg_sw streset sts sts_7 stset stsplit stsum sttocc sttoct stvary stweib su suest suest_8 sum summ summa summar summari summariz summarize sunflower sureg survcurv survsum svar svar_p svmat svy svy_disp svy_dreg svy_est svy_est_7 svy_estat svy_get svy_gnbreg_p svy_head svy_header svy_heckman_p svy_heckprob_p svy_intreg_p svy_ivreg_p svy_logistic_p svy_logit_p svy_mlogit_p svy_nbreg_p svy_ologit_p svy_oprobit_p svy_poisson_p svy_probit_p svy_regress_p svy_sub svy_sub_7 svy_x svy_x_7 svy_x_p svydes svydes_8 svygen svygnbreg svyheckman svyheckprob svyintreg svyintreg_7 svyintrg svyivreg svylc svylog_p svylogit svymarkout svymarkout_8 svymean svymlog svymlogit svynbreg svyolog svyologit svyoprob svyoprobit svyopts svypois svypois_7 svypoisson svyprobit svyprobt svyprop svyprop_7 svyratio svyreg svyreg_p svyregress svyset svyset_7 svyset_8 svytab svytab_7 svytest svytotal sw sw_8 swcnreg swcox swereg swilk swlogis swlogit swologit swoprbt swpois swprobit swqreg swtobit swweib symmetry symmi symplot symplot_7 syntax sysdescribe sysdir sysuse szroeter ta tab tab1 tab2 tab_or tabd tabdi tabdis tabdisp tabi table tabodds tabodds_7 tabstat tabu tabul tabula tabulat tabulate te tempfile tempname tempvar tes test testnl testparm teststd tetrachoric time_it timer tis tob tobi tobit tobit_p tobit_sw token tokeni tokeniz tokenize tostring total translate translator transmap treat_ll treatr_p treatreg trim trnb_cons trnb_mean trpoiss_d2 trunc_ll truncr_p truncreg tsappend tset tsfill tsline tsline_ex tsreport tsrevar tsrline tsset tssmooth tsunab ttest ttesti tut_chk tut_wait tutorial tw tware_st two twoway twoway__fpfit_serset twoway__function_gen twoway__histogram_gen twoway__ipoint_serset twoway__ipoints_serset twoway__kdensity_gen twoway__lfit_serset twoway__normgen_gen twoway__pci_serset twoway__qfit_serset twoway__scatteri_serset twoway__sunflower_gen twoway_ksm_serset ty typ type typeof u|0 unab unabbrev unabcmd update us use uselabel var var_mkcompanion var_p varbasic varfcast vargranger varirf varirf_add varirf_cgraph varirf_create varirf_ctable varirf_describe varirf_dir varirf_drop varirf_erase varirf_graph varirf_ograph varirf_rename varirf_set varirf_table varlist varlmar varnorm varsoc varstable varstable_w varstable_w2 varwle vce vec vec_fevd vec_mkphi vec_p vec_p_w vecirf_create veclmar veclmar_w vecnorm vecnorm_w vecrank vecstable verinst vers versi versio version view viewsource vif vwls wdatetof webdescribe webseek webuse weib1_lf weib2_lf weib_lf weib_lf0 weibhet_glf weibhet_glf_sh weibhet_glfa weibhet_glfa_sh weibhet_gp weibhet_ilf weibhet_ilf_sh weibhet_ilfa weibhet_ilfa_sh weibhet_ip weibu_sw weibul_p weibull weibull_c weibull_s weibullhet wh whelp whi which whil while wilc_st wilcoxon win wind windo window winexec wntestb wntestb_7 wntestq xchart xchart_7 xcorr xcorr_7 xi xi_6 xmlsav xmlsave xmluse xpose xsh xshe xshel xshell xt_iis xt_tis xtab_p xtabond xtbin_p xtclog xtcloglog xtcloglog_8 xtcloglog_d2 xtcloglog_pa_p xtcloglog_re_p xtcnt_p xtcorr xtdata xtdes xtfront_p xtfrontier xtgee xtgee_elink xtgee_estat xtgee_makeivar xtgee_p xtgee_plink xtgls xtgls_p xthaus xthausman xtht_p xthtaylor xtile xtint_p xtintreg xtintreg_8 xtintreg_d2 xtintreg_p xtivp_1 xtivp_2 xtivreg xtline xtline_ex xtlogit xtlogit_8 xtlogit_d2 xtlogit_fe_p xtlogit_pa_p xtlogit_re_p xtmixed xtmixed_estat xtmixed_p xtnb_fe xtnb_lf xtnbreg xtnbreg_pa_p xtnbreg_refe_p xtpcse xtpcse_p xtpois xtpoisson xtpoisson_d2 xtpoisson_pa_p xtpoisson_refe_p xtpred xtprobit xtprobit_8 xtprobit_d2 xtprobit_re_p xtps_fe xtps_lf xtps_ren xtps_ren_8 xtrar_p xtrc xtrc_p xtrchh xtrefe_p xtreg xtreg_be xtreg_fe xtreg_ml xtreg_pa_p xtreg_re xtregar xtrere_p xtset xtsf_ll xtsf_llti xtsum xttab xttest0 xttobit xttobit_8 xttobit_p xttrans yx yxview__barlike_draw yxview_area_draw yxview_bar_draw yxview_dot_draw yxview_dropline_draw yxview_function_draw yxview_iarrow_draw yxview_ilabels_draw yxview_normal_draw yxview_pcarrow_draw yxview_pcbarrow_draw yxview_pccapsym_draw yxview_pcscatter_draw yxview_pcspike_draw yxview_rarea_draw yxview_rbar_draw yxview_rbarm_draw yxview_rcap_draw yxview_rcapsym_draw yxview_rconnected_draw yxview_rline_draw yxview_rscatter_draw yxview_rspike_draw yxview_spike_draw yxview_sunflower_draw zap_s zinb zinb_llf zinb_plf zip zip_llf zip_p zip_plf zt_ct_5 zt_hc_5 zt_hcd_5 zt_is_5 zt_iss_5 zt_sho_5 zt_smp_5 ztbase_5 ztcox_5 ztdes_5 ztereg_5 ztfill_5 ztgen_5 ztir_5 ztjoin_5 ztnb ztnb_p ztp ztp_p zts_5 ztset_5 ztspli_5 ztsum_5 zttoct_5 ztvary_5 ztweib_5',
            contains: [
          {
            className: 'symbol',
            begin: /`[a-zA-Z0-9_]+'/
          },
          {
            className: 'variable',
            begin: /\$\{?[a-zA-Z0-9_]+\}?/
          },
          {
            className: 'string',
            variants: [
              {begin: '`"[^\r\n]*?"\''},
              {begin: '"[^\r\n"]*"'}
            ]
          },
    
          {
            className: 'built_in',
            variants: [
              {
                begin: '\\b(abs|acos|asin|atan|atan2|atanh|ceil|cloglog|comb|cos|digamma|exp|floor|invcloglog|invlogit|ln|lnfact|lnfactorial|lngamma|log|log10|max|min|mod|reldif|round|sign|sin|sqrt|sum|tan|tanh|trigamma|trunc|betaden|Binomial|binorm|binormal|chi2|chi2tail|dgammapda|dgammapdada|dgammapdadx|dgammapdx|dgammapdxdx|F|Fden|Ftail|gammaden|gammap|ibeta|invbinomial|invchi2|invchi2tail|invF|invFtail|invgammap|invibeta|invnchi2|invnFtail|invnibeta|invnorm|invnormal|invttail|nbetaden|nchi2|nFden|nFtail|nibeta|norm|normal|normalden|normd|npnchi2|tden|ttail|uniform|abbrev|char|index|indexnot|length|lower|ltrim|match|plural|proper|real|regexm|regexr|regexs|reverse|rtrim|string|strlen|strlower|strltrim|strmatch|strofreal|strpos|strproper|strreverse|strrtrim|strtrim|strupper|subinstr|subinword|substr|trim|upper|word|wordcount|_caller|autocode|byteorder|chop|clip|cond|e|epsdouble|epsfloat|group|inlist|inrange|irecode|matrix|maxbyte|maxdouble|maxfloat|maxint|maxlong|mi|minbyte|mindouble|minfloat|minint|minlong|missing|r|recode|replay|return|s|scalar|d|date|day|dow|doy|halfyear|mdy|month|quarter|week|year|d|daily|dofd|dofh|dofm|dofq|dofw|dofy|h|halfyearly|hofd|m|mofd|monthly|q|qofd|quarterly|tin|twithin|w|weekly|wofd|y|yearly|yh|ym|yofd|yq|yw|cholesky|colnumb|colsof|corr|det|diag|diag0cnt|el|get|hadamard|I|inv|invsym|issym|issymmetric|J|matmissing|matuniform|mreldif|nullmat|rownumb|rowsof|sweep|syminv|trace|vec|vecdiag)(?=\\(|$)'
              }
            ]
          },
    
          hljs.COMMENT('^[ \t]*\\*.*$', false),
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE
        ]
      };
    };
    
    /***/ }),
    /* 554 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var STEP21_IDENT_RE = '[A-Z_][A-Z0-9_.]*';
      var STEP21_KEYWORDS = {
        keyword: 'HEADER ENDSEC DATA'
      };
      var STEP21_START = {
        className: 'meta',
        begin: 'ISO-10303-21;',
        relevance: 10
      };
      var STEP21_CLOSE = {
        className: 'meta',
        begin: 'END-ISO-10303-21;',
        relevance: 10
      };
    
      return {
        aliases: ['p21', 'step', 'stp'],
        case_insensitive: true, // STEP 21 is case insensitive in theory, in practice all non-comments are capitalized.
        lexemes: STEP21_IDENT_RE,
        keywords: STEP21_KEYWORDS,
        contains: [
          STEP21_START,
          STEP21_CLOSE,
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          hljs.COMMENT('/\\*\\*!', '\\*/'),
          hljs.C_NUMBER_MODE,
          hljs.inherit(hljs.APOS_STRING_MODE, {illegal: null}),
          hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null}),
          {
            className: 'string',
            begin: "'", end: "'"
          },
          {
            className: 'symbol',
            variants: [
              {
                begin: '#', end: '\\d+',
                illegal: '\\W'
              }
            ]
          }
        ]
      };
    };
    
    /***/ }),
    /* 555 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
    
      var VARIABLE = {
        className: 'variable',
        begin: '\\$' + hljs.IDENT_RE
      };
    
      var HEX_COLOR = {
        className: 'number',
        begin: '#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})'
      };
    
      var AT_KEYWORDS = [
        'charset',
        'css',
        'debug',
        'extend',
        'font-face',
        'for',
        'import',
        'include',
        'media',
        'mixin',
        'page',
        'warn',
        'while'
      ];
    
      var PSEUDO_SELECTORS = [
        'after',
        'before',
        'first-letter',
        'first-line',
        'active',
        'first-child',
        'focus',
        'hover',
        'lang',
        'link',
        'visited'
      ];
    
      var TAGS = [
        'a',
        'abbr',
        'address',
        'article',
        'aside',
        'audio',
        'b',
        'blockquote',
        'body',
        'button',
        'canvas',
        'caption',
        'cite',
        'code',
        'dd',
        'del',
        'details',
        'dfn',
        'div',
        'dl',
        'dt',
        'em',
        'fieldset',
        'figcaption',
        'figure',
        'footer',
        'form',
        'h1',
        'h2',
        'h3',
        'h4',
        'h5',
        'h6',
        'header',
        'hgroup',
        'html',
        'i',
        'iframe',
        'img',
        'input',
        'ins',
        'kbd',
        'label',
        'legend',
        'li',
        'mark',
        'menu',
        'nav',
        'object',
        'ol',
        'p',
        'q',
        'quote',
        'samp',
        'section',
        'span',
        'strong',
        'summary',
        'sup',
        'table',
        'tbody',
        'td',
        'textarea',
        'tfoot',
        'th',
        'thead',
        'time',
        'tr',
        'ul',
        'var',
        'video'
      ];
    
      var TAG_END = '[\\.\\s\\n\\[\\:,]';
    
      var ATTRIBUTES = [
        'align-content',
        'align-items',
        'align-self',
        'animation',
        'animation-delay',
        'animation-direction',
        'animation-duration',
        'animation-fill-mode',
        'animation-iteration-count',
        'animation-name',
        'animation-play-state',
        'animation-timing-function',
        'auto',
        'backface-visibility',
        'background',
        'background-attachment',
        'background-clip',
        'background-color',
        'background-image',
        'background-origin',
        'background-position',
        'background-repeat',
        'background-size',
        'border',
        'border-bottom',
        'border-bottom-color',
        'border-bottom-left-radius',
        'border-bottom-right-radius',
        'border-bottom-style',
        'border-bottom-width',
        'border-collapse',
        'border-color',
        'border-image',
        'border-image-outset',
        'border-image-repeat',
        'border-image-slice',
        'border-image-source',
        'border-image-width',
        'border-left',
        'border-left-color',
        'border-left-style',
        'border-left-width',
        'border-radius',
        'border-right',
        'border-right-color',
        'border-right-style',
        'border-right-width',
        'border-spacing',
        'border-style',
        'border-top',
        'border-top-color',
        'border-top-left-radius',
        'border-top-right-radius',
        'border-top-style',
        'border-top-width',
        'border-width',
        'bottom',
        'box-decoration-break',
        'box-shadow',
        'box-sizing',
        'break-after',
        'break-before',
        'break-inside',
        'caption-side',
        'clear',
        'clip',
        'clip-path',
        'color',
        'column-count',
        'column-fill',
        'column-gap',
        'column-rule',
        'column-rule-color',
        'column-rule-style',
        'column-rule-width',
        'column-span',
        'column-width',
        'columns',
        'content',
        'counter-increment',
        'counter-reset',
        'cursor',
        'direction',
        'display',
        'empty-cells',
        'filter',
        'flex',
        'flex-basis',
        'flex-direction',
        'flex-flow',
        'flex-grow',
        'flex-shrink',
        'flex-wrap',
        'float',
        'font',
        'font-family',
        'font-feature-settings',
        'font-kerning',
        'font-language-override',
        'font-size',
        'font-size-adjust',
        'font-stretch',
        'font-style',
        'font-variant',
        'font-variant-ligatures',
        'font-weight',
        'height',
        'hyphens',
        'icon',
        'image-orientation',
        'image-rendering',
        'image-resolution',
        'ime-mode',
        'inherit',
        'initial',
        'justify-content',
        'left',
        'letter-spacing',
        'line-height',
        'list-style',
        'list-style-image',
        'list-style-position',
        'list-style-type',
        'margin',
        'margin-bottom',
        'margin-left',
        'margin-right',
        'margin-top',
        'marks',
        'mask',
        'max-height',
        'max-width',
        'min-height',
        'min-width',
        'nav-down',
        'nav-index',
        'nav-left',
        'nav-right',
        'nav-up',
        'none',
        'normal',
        'object-fit',
        'object-position',
        'opacity',
        'order',
        'orphans',
        'outline',
        'outline-color',
        'outline-offset',
        'outline-style',
        'outline-width',
        'overflow',
        'overflow-wrap',
        'overflow-x',
        'overflow-y',
        'padding',
        'padding-bottom',
        'padding-left',
        'padding-right',
        'padding-top',
        'page-break-after',
        'page-break-before',
        'page-break-inside',
        'perspective',
        'perspective-origin',
        'pointer-events',
        'position',
        'quotes',
        'resize',
        'right',
        'tab-size',
        'table-layout',
        'text-align',
        'text-align-last',
        'text-decoration',
        'text-decoration-color',
        'text-decoration-line',
        'text-decoration-style',
        'text-indent',
        'text-overflow',
        'text-rendering',
        'text-shadow',
        'text-transform',
        'text-underline-position',
        'top',
        'transform',
        'transform-origin',
        'transform-style',
        'transition',
        'transition-delay',
        'transition-duration',
        'transition-property',
        'transition-timing-function',
        'unicode-bidi',
        'vertical-align',
        'visibility',
        'white-space',
        'widows',
        'width',
        'word-break',
        'word-spacing',
        'word-wrap',
        'z-index'
      ];
    
      // illegals
      var ILLEGAL = [
        '\\?',
        '(\\bReturn\\b)', // monkey
        '(\\bEnd\\b)', // monkey
        '(\\bend\\b)', // vbscript
        '(\\bdef\\b)', // gradle
        ';', // a whole lot of languages
        '#\\s', // markdown
        '\\*\\s', // markdown
        '===\\s', // markdown
        '\\|',
        '%', // prolog
      ];
    
      return {
        aliases: ['styl'],
        case_insensitive: false,
        keywords: 'if else for in',
        illegal: '(' + ILLEGAL.join('|') + ')',
        contains: [
    
          // strings
          hljs.QUOTE_STRING_MODE,
          hljs.APOS_STRING_MODE,
    
          // comments
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
    
          // hex colors
          HEX_COLOR,
    
          // class tag
          {
            begin: '\\.[a-zA-Z][a-zA-Z0-9_-]*' + TAG_END,
            returnBegin: true,
            contains: [
              {className: 'selector-class', begin: '\\.[a-zA-Z][a-zA-Z0-9_-]*'}
            ]
          },
    
          // id tag
          {
            begin: '\\#[a-zA-Z][a-zA-Z0-9_-]*' + TAG_END,
            returnBegin: true,
            contains: [
              {className: 'selector-id', begin: '\\#[a-zA-Z][a-zA-Z0-9_-]*'}
            ]
          },
    
          // tags
          {
            begin: '\\b(' + TAGS.join('|') + ')' + TAG_END,
            returnBegin: true,
            contains: [
              {className: 'selector-tag', begin: '\\b[a-zA-Z][a-zA-Z0-9_-]*'}
            ]
          },
    
          // psuedo selectors
          {
            begin: '&?:?:\\b(' + PSEUDO_SELECTORS.join('|') + ')' + TAG_END
          },
    
          // @ keywords
          {
            begin: '\@(' + AT_KEYWORDS.join('|') + ')\\b'
          },
    
          // variables
          VARIABLE,
    
          // dimension
          hljs.CSS_NUMBER_MODE,
    
          // number
          hljs.NUMBER_MODE,
    
          // functions
          //  - only from beginning of line + whitespace
          {
            className: 'function',
            begin: '^[a-zA-Z][a-zA-Z0-9_\-]*\\(.*\\)',
            illegal: '[\\n]',
            returnBegin: true,
            contains: [
              {className: 'title', begin: '\\b[a-zA-Z][a-zA-Z0-9_\-]*'},
              {
                className: 'params',
                begin: /\(/,
                end: /\)/,
                contains: [
                  HEX_COLOR,
                  VARIABLE,
                  hljs.APOS_STRING_MODE,
                  hljs.CSS_NUMBER_MODE,
                  hljs.NUMBER_MODE,
                  hljs.QUOTE_STRING_MODE
                ]
              }
            ]
          },
    
          // attributes
          //  - only from beginning of line + whitespace
          //  - must have whitespace after it
          {
            className: 'attribute',
            begin: '\\b(' + ATTRIBUTES.reverse().join('|') + ')\\b',
            starts: {
              // value container
              end: /;|$/,
              contains: [
                HEX_COLOR,
                VARIABLE,
                hljs.APOS_STRING_MODE,
                hljs.QUOTE_STRING_MODE,
                hljs.CSS_NUMBER_MODE,
                hljs.NUMBER_MODE,
                hljs.C_BLOCK_COMMENT_MODE
              ],
              illegal: /\./,
              relevance: 0
            }
          }
        ]
      };
    };
    
    /***/ }),
    /* 556 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var DETAILS = {
        className: 'string',
        begin: '\\[\n(multipart)?', end: '\\]\n'
      };
      var TIME = {
        className: 'string',
        begin: '\\d{4}-\\d{2}-\\d{2}(\\s+)\\d{2}:\\d{2}:\\d{2}\.\\d+Z'
      };
      var PROGRESSVALUE = {
        className: 'string',
        begin: '(\\+|-)\\d+'
      };
      var KEYWORDS = {
        className: 'keyword',
        relevance: 10,
        variants: [
          { begin: '^(test|testing|success|successful|failure|error|skip|xfail|uxsuccess)(:?)\\s+(test)?' },
          { begin: '^progress(:?)(\\s+)?(pop|push)?' },
          { begin: '^tags:' },
          { begin: '^time:' }
        ],
      };
      return {
        case_insensitive: true,
        contains: [
          DETAILS,
          TIME,
          PROGRESSVALUE,
          KEYWORDS
        ]
      };
    };
    
    /***/ }),
    /* 557 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var SWIFT_KEYWORDS = {
          keyword: '__COLUMN__ __FILE__ __FUNCTION__ __LINE__ as as! as? associativity ' +
            'break case catch class continue convenience default defer deinit didSet do ' +
            'dynamic dynamicType else enum extension fallthrough false fileprivate final for func ' +
            'get guard if import in indirect infix init inout internal is lazy left let ' +
            'mutating nil none nonmutating open operator optional override postfix precedence ' +
            'prefix private protocol Protocol public repeat required rethrows return ' +
            'right self Self set static struct subscript super switch throw throws true ' +
            'try try! try? Type typealias unowned var weak where while willSet',
          literal: 'true false nil',
          built_in: 'abs advance alignof alignofValue anyGenerator assert assertionFailure ' +
            'bridgeFromObjectiveC bridgeFromObjectiveCUnconditional bridgeToObjectiveC ' +
            'bridgeToObjectiveCUnconditional c contains count countElements countLeadingZeros ' +
            'debugPrint debugPrintln distance dropFirst dropLast dump encodeBitsAsWords ' +
            'enumerate equal fatalError filter find getBridgedObjectiveCType getVaList ' +
            'indices insertionSort isBridgedToObjectiveC isBridgedVerbatimToObjectiveC ' +
            'isUniquelyReferenced isUniquelyReferencedNonObjC join lazy lexicographicalCompare ' +
            'map max maxElement min minElement numericCast overlaps partition posix ' +
            'precondition preconditionFailure print println quickSort readLine reduce reflect ' +
            'reinterpretCast reverse roundUpToAlignment sizeof sizeofValue sort split ' +
            'startsWith stride strideof strideofValue swap toString transcode ' +
            'underestimateCount unsafeAddressOf unsafeBitCast unsafeDowncast unsafeUnwrap ' +
            'unsafeReflect withExtendedLifetime withObjectAtPlusZero withUnsafePointer ' +
            'withUnsafePointerToObject withUnsafeMutablePointer withUnsafeMutablePointers ' +
            'withUnsafePointer withUnsafePointers withVaList zip'
        };
    
      var TYPE = {
        className: 'type',
        begin: '\\b[A-Z][\\w\u00C0-\u02B8\']*',
        relevance: 0
      };
      var BLOCK_COMMENT = hljs.COMMENT(
        '/\\*',
        '\\*/',
        {
          contains: ['self']
        }
      );
      var SUBST = {
        className: 'subst',
        begin: /\\\(/, end: '\\)',
        keywords: SWIFT_KEYWORDS,
        contains: [] // assigned later
      };
      var NUMBERS = {
          className: 'number',
          begin: '\\b([\\d_]+(\\.[\\deE_]+)?|0x[a-fA-F0-9_]+(\\.[a-fA-F0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b',
          relevance: 0
      };
      var QUOTE_STRING_MODE = hljs.inherit(hljs.QUOTE_STRING_MODE, {
        contains: [SUBST, hljs.BACKSLASH_ESCAPE]
      });
      SUBST.contains = [NUMBERS];
    
      return {
        keywords: SWIFT_KEYWORDS,
        contains: [
          QUOTE_STRING_MODE,
          hljs.C_LINE_COMMENT_MODE,
          BLOCK_COMMENT,
          TYPE,
          NUMBERS,
          {
            className: 'function',
            beginKeywords: 'func', end: '{', excludeEnd: true,
            contains: [
              hljs.inherit(hljs.TITLE_MODE, {
                begin: /[A-Za-z$_][0-9A-Za-z$_]*/
              }),
              {
                begin: /</, end: />/
              },
              {
                className: 'params',
                begin: /\(/, end: /\)/, endsParent: true,
                keywords: SWIFT_KEYWORDS,
                contains: [
                  'self',
                  NUMBERS,
                  QUOTE_STRING_MODE,
                  hljs.C_BLOCK_COMMENT_MODE,
                  {begin: ':'} // relevance booster
                ],
                illegal: /["']/
              }
            ],
            illegal: /\[|%/
          },
          {
            className: 'class',
            beginKeywords: 'struct protocol class extension enum',
            keywords: SWIFT_KEYWORDS,
            end: '\\{',
            excludeEnd: true,
            contains: [
              hljs.inherit(hljs.TITLE_MODE, {begin: /[A-Za-z$_][\u00C0-\u02B80-9A-Za-z$_]*/})
            ]
          },
          {
            className: 'meta', // @attributes
            begin: '(@warn_unused_result|@exported|@lazy|@noescape|' +
                      '@NSCopying|@NSManaged|@objc|@convention|@required|' +
                      '@noreturn|@IBAction|@IBDesignable|@IBInspectable|@IBOutlet|' +
                      '@infix|@prefix|@postfix|@autoclosure|@testable|@available|' +
                      '@nonobjc|@NSApplicationMain|@UIApplicationMain)'
    
          },
          {
            beginKeywords: 'import', end: /$/,
            contains: [hljs.C_LINE_COMMENT_MODE, BLOCK_COMMENT]
          }
        ]
      };
    };
    
    /***/ }),
    /* 558 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
    
      var COMMENT = {
        className: 'comment',
        begin: /\$noop\(/,
        end: /\)/,
        contains: [{
          begin: /\(/,
          end: /\)/,
          contains: ['self', {
            begin: /\\./
          }]
        }],
        relevance: 10
      };
    
      var FUNCTION = {
        className: 'keyword',
        begin: /\$(?!noop)[a-zA-Z][_a-zA-Z0-9]*/,
        end: /\(/,
        excludeEnd: true
      };
    
      var VARIABLE = {
        className: 'variable',
        begin: /%[_a-zA-Z0-9:]*/,
        end: '%'
      };
    
      var ESCAPE_SEQUENCE = {
        className: 'symbol',
        begin: /\\./
      };
    
      return {
        contains: [
          COMMENT,
          FUNCTION,
          VARIABLE,
          ESCAPE_SEQUENCE
        ]
      };
    };
    
    /***/ }),
    /* 559 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var LITERALS = 'true false yes no null';
    
      var keyPrefix = '^[ \\-]*';
      var keyName =  '[a-zA-Z_][\\w\\-]*';
      var KEY = {
        className: 'attr',
        variants: [
          { begin: keyPrefix + keyName + ":"},
          { begin: keyPrefix + '"' + keyName + '"' + ":"},
          { begin: keyPrefix + "'" + keyName + "'" + ":"}
        ]
      };
    
      var TEMPLATE_VARIABLES = {
        className: 'template-variable',
        variants: [
          { begin: '\{\{', end: '\}\}' }, // jinja templates Ansible
          { begin: '%\{', end: '\}' } // Ruby i18n
        ]
      };
      var STRING = {
        className: 'string',
        relevance: 0,
        variants: [
          {begin: /'/, end: /'/},
          {begin: /"/, end: /"/},
          {begin: /\S+/}
        ],
        contains: [
          hljs.BACKSLASH_ESCAPE,
          TEMPLATE_VARIABLES
        ]
      };
    
      return {
        case_insensitive: true,
        aliases: ['yml', 'YAML', 'yaml'],
        contains: [
          KEY,
          {
            className: 'meta',
            begin: '^---\s*$',
            relevance: 10
          },
          { // multi line string
            className: 'string',
            begin: '[\\|>] *$',
            returnEnd: true,
            contains: STRING.contains,
            // very simple termination: next hash key
            end: KEY.variants[0].begin
          },
          { // Ruby/Rails erb
            begin: '<%[%=-]?', end: '[%-]?%>',
            subLanguage: 'ruby',
            excludeBegin: true,
            excludeEnd: true,
            relevance: 0
          },
          { // data type
            className: 'type',
            begin: '!!' + hljs.UNDERSCORE_IDENT_RE,
          },
          { // fragment id &ref
            className: 'meta',
            begin: '&' + hljs.UNDERSCORE_IDENT_RE + '$',
          },
          { // fragment reference *ref
            className: 'meta',
            begin: '\\*' + hljs.UNDERSCORE_IDENT_RE + '$'
          },
          { // array listing
            className: 'bullet',
            begin: '^ *-',
            relevance: 0
          },
          hljs.HASH_COMMENT_MODE,
          {
            beginKeywords: LITERALS,
            keywords: {literal: LITERALS}
          },
          hljs.C_NUMBER_MODE,
          STRING
        ]
      };
    };
    
    /***/ }),
    /* 560 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        case_insensitive: true,
        contains: [
          hljs.HASH_COMMENT_MODE,
          // version of format and total amount of testcases
          {
            className: 'meta',
            variants: [
              { begin: '^TAP version (\\d+)$' },
              { begin: '^1\\.\\.(\\d+)$' }
            ],
          },
          // YAML block
          {
            begin: '(\s+)?---$', end: '\\.\\.\\.$',
            subLanguage: 'yaml',
            relevance: 0
          },
          // testcase number
          {
            className: 'number',
            begin: ' (\\d+) '
          },
          // testcase status and description
          {
            className: 'symbol',
            variants: [
              { begin: '^ok' },
              { begin: '^not ok' }
            ],
          },
        ]
      };
    };
    
    /***/ }),
    /* 561 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        aliases: ['tk'],
        keywords: 'after append apply array auto_execok auto_import auto_load auto_mkindex ' +
          'auto_mkindex_old auto_qualify auto_reset bgerror binary break catch cd chan clock ' +
          'close concat continue dde dict encoding eof error eval exec exit expr fblocked ' +
          'fconfigure fcopy file fileevent filename flush for foreach format gets glob global ' +
          'history http if incr info interp join lappend|10 lassign|10 lindex|10 linsert|10 list ' +
          'llength|10 load lrange|10 lrepeat|10 lreplace|10 lreverse|10 lsearch|10 lset|10 lsort|10 '+
          'mathfunc mathop memory msgcat namespace open package parray pid pkg::create pkg_mkIndex '+
          'platform platform::shell proc puts pwd read refchan regexp registry regsub|10 rename '+
          'return safe scan seek set socket source split string subst switch tcl_endOfWord '+
          'tcl_findLibrary tcl_startOfNextWord tcl_startOfPreviousWord tcl_wordBreakAfter '+
          'tcl_wordBreakBefore tcltest tclvars tell time tm trace unknown unload unset update '+
          'uplevel upvar variable vwait while',
        contains: [
          hljs.COMMENT(';[ \\t]*#', '$'),
          hljs.COMMENT('^[ \\t]*#', '$'),
          {
            beginKeywords: 'proc',
            end: '[\\{]',
            excludeEnd: true,
            contains: [
              {
                className: 'title',
                begin: '[ \\t\\n\\r]+(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*',
                end: '[ \\t\\n\\r]',
                endsWithParent: true,
                excludeEnd: true
              }
            ]
          },
          {
            excludeEnd: true,
            variants: [
              {
                begin: '\\$(\\{)?(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*\\(([a-zA-Z0-9_])*\\)',
                end: '[^a-zA-Z0-9_\\}\\$]'
              },
              {
                begin: '\\$(\\{)?(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*',
                end: '(\\))?[^a-zA-Z0-9_\\}\\$]'
              }
            ]
          },
          {
            className: 'string',
            contains: [hljs.BACKSLASH_ESCAPE],
            variants: [
              hljs.inherit(hljs.APOS_STRING_MODE, {illegal: null}),
              hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null})
            ]
          },
          {
            className: 'number',
            variants: [hljs.BINARY_NUMBER_MODE, hljs.C_NUMBER_MODE]
          }
        ]
      }
    };
    
    /***/ }),
    /* 562 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var COMMAND = {
        className: 'tag',
        begin: /\\/,
        relevance: 0,
        contains: [
          {
            className: 'name',
            variants: [
              {begin: /[a-zA-Zа-яА-я]+[*]?/},
              {begin: /[^a-zA-Zа-яА-я0-9]/}
            ],
            starts: {
              endsWithParent: true,
              relevance: 0,
              contains: [
                {
                  className: 'string', // because it looks like attributes in HTML tags
                  variants: [
                    {begin: /\[/, end: /\]/},
                    {begin: /\{/, end: /\}/}
                  ]
                },
                {
                  begin: /\s*=\s*/, endsWithParent: true,
                  relevance: 0,
                  contains: [
                    {
                      className: 'number',
                      begin: /-?\d*\.?\d+(pt|pc|mm|cm|in|dd|cc|ex|em)?/
                    }
                  ]
                }
              ]
            }
          }
        ]
      };
    
      return {
        contains: [
          COMMAND,
          {
            className: 'formula',
            contains: [COMMAND],
            relevance: 0,
            variants: [
              {begin: /\$\$/, end: /\$\$/},
              {begin: /\$/, end: /\$/}
            ]
          },
          hljs.COMMENT(
            '%',
            '$',
            {
              relevance: 0
            }
          )
        ]
      };
    };
    
    /***/ }),
    /* 563 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var BUILT_IN_TYPES = 'bool byte i16 i32 i64 double string binary';
      return {
        keywords: {
          keyword:
            'namespace const typedef struct enum service exception void oneway set list map required optional',
          built_in:
            BUILT_IN_TYPES,
          literal:
            'true false'
        },
        contains: [
          hljs.QUOTE_STRING_MODE,
          hljs.NUMBER_MODE,
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          {
            className: 'class',
            beginKeywords: 'struct enum service exception', end: /\{/,
            illegal: /\n/,
            contains: [
              hljs.inherit(hljs.TITLE_MODE, {
                starts: {endsWithParent: true, excludeEnd: true} // hack: eating everything after the first title
              })
            ]
          },
          {
            begin: '\\b(set|list|map)\\s*<', end: '>',
            keywords: BUILT_IN_TYPES,
            contains: ['self']
          }
        ]
      };
    };
    
    /***/ }),
    /* 564 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var TPID = {
        className: 'number',
        begin: '[1-9][0-9]*', /* no leading zeros */
        relevance: 0
      };
      var TPLABEL = {
        className: 'symbol',
        begin: ':[^\\]]+'
      };
      var TPDATA = {
        className: 'built_in',
        begin: '(AR|P|PAYLOAD|PR|R|SR|RSR|LBL|VR|UALM|MESSAGE|UTOOL|UFRAME|TIMER|\
        TIMER_OVERFLOW|JOINT_MAX_SPEED|RESUME_PROG|DIAG_REC)\\[', end: '\\]',
        contains: [
          'self',
          TPID,
          TPLABEL
        ]
      };
      var TPIO = {
        className: 'built_in',
        begin: '(AI|AO|DI|DO|F|RI|RO|UI|UO|GI|GO|SI|SO)\\[', end: '\\]',
        contains: [
          'self',
          TPID,
          hljs.QUOTE_STRING_MODE, /* for pos section at bottom */
          TPLABEL
        ]
      };
    
      return {
        keywords: {
          keyword:
            'ABORT ACC ADJUST AND AP_LD BREAK CALL CNT COL CONDITION CONFIG DA DB ' +
            'DIV DETECT ELSE END ENDFOR ERR_NUM ERROR_PROG FINE FOR GP GUARD INC ' +
            'IF JMP LINEAR_MAX_SPEED LOCK MOD MONITOR OFFSET Offset OR OVERRIDE ' +
            'PAUSE PREG PTH RT_LD RUN SELECT SKIP Skip TA TB TO TOOL_OFFSET ' +
            'Tool_Offset UF UT UFRAME_NUM UTOOL_NUM UNLOCK WAIT X Y Z W P R STRLEN ' +
            'SUBSTR FINDSTR VOFFSET PROG ATTR MN POS',
          literal:
            'ON OFF max_speed LPOS JPOS ENABLE DISABLE START STOP RESET'
        },
        contains: [
          TPDATA,
          TPIO,
          {
            className: 'keyword',
            begin: '/(PROG|ATTR|MN|POS|END)\\b'
          },
          {
            /* this is for cases like ,CALL */
            className: 'keyword',
            begin: '(CALL|RUN|POINT_LOGIC|LBL)\\b'
          },
          {
            /* this is for cases like CNT100 where the default lexemes do not
             * separate the keyword and the number */
            className: 'keyword',
            begin: '\\b(ACC|CNT|Skip|Offset|PSPD|RT_LD|AP_LD|Tool_Offset)'
          },
          {
            /* to catch numbers that do not have a word boundary on the left */
            className: 'number',
            begin: '\\d+(sec|msec|mm/sec|cm/min|inch/min|deg/sec|mm|in|cm)?\\b',
            relevance: 0
          },
          hljs.COMMENT('//', '[;$]'),
          hljs.COMMENT('!', '[;$]'),
          hljs.COMMENT('--eg:', '$'),
          hljs.QUOTE_STRING_MODE,
          {
            className: 'string',
            begin: '\'', end: '\''
          },
          hljs.C_NUMBER_MODE,
          {
            className: 'variable',
            begin: '\\$[A-Za-z0-9_]+'
          }
        ]
      };
    };
    
    /***/ }),
    /* 565 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var PARAMS = {
        className: 'params',
        begin: '\\(', end: '\\)'
      };
    
      var FUNCTION_NAMES = 'attribute block constant cycle date dump include ' +
                      'max min parent random range source template_from_string';
    
      var FUNCTIONS = {
        beginKeywords: FUNCTION_NAMES,
        keywords: {name: FUNCTION_NAMES},
        relevance: 0,
        contains: [
          PARAMS
        ]
      };
    
      var FILTER = {
        begin: /\|[A-Za-z_]+:?/,
        keywords:
          'abs batch capitalize convert_encoding date date_modify default ' +
          'escape first format join json_encode keys last length lower ' +
          'merge nl2br number_format raw replace reverse round slice sort split ' +
          'striptags title trim upper url_encode',
        contains: [
          FUNCTIONS
        ]
      };
    
      var TAGS = 'autoescape block do embed extends filter flush for ' +
        'if import include macro sandbox set spaceless use verbatim';
    
      TAGS = TAGS + ' ' + TAGS.split(' ').map(function(t){return 'end' + t}).join(' ');
    
      return {
        aliases: ['craftcms'],
        case_insensitive: true,
        subLanguage: 'xml',
        contains: [
          hljs.COMMENT(/\{#/, /#}/),
          {
            className: 'template-tag',
            begin: /\{%/, end: /%}/,
            contains: [
              {
                className: 'name',
                begin: /\w+/,
                keywords: TAGS,
                starts: {
                  endsWithParent: true,
                  contains: [FILTER, FUNCTIONS],
                  relevance: 0
                }
              }
            ]
          },
          {
            className: 'template-variable',
            begin: /\{\{/, end: /}}/,
            contains: ['self', FILTER, FUNCTIONS]
          }
        ]
      };
    };
    
    /***/ }),
    /* 566 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var KEYWORDS = {
        keyword:
          'in if for while finally var new function do return void else break catch ' +
          'instanceof with throw case default try this switch continue typeof delete ' +
          'let yield const class public private protected get set super ' +
          'static implements enum export import declare type namespace abstract ' +
          'as from extends async await',
        literal:
          'true false null undefined NaN Infinity',
        built_in:
          'eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent ' +
          'encodeURI encodeURIComponent escape unescape Object Function Boolean Error ' +
          'EvalError InternalError RangeError ReferenceError StopIteration SyntaxError ' +
          'TypeError URIError Number Math Date String RegExp Array Float32Array ' +
          'Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array ' +
          'Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require ' +
          'module console window document any number boolean string void Promise'
      };
    
      return {
        aliases: ['ts'],
        keywords: KEYWORDS,
        contains: [
          {
            className: 'meta',
            begin: /^\s*['"]use strict['"]/
          },
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE,
          { // template string
            className: 'string',
            begin: '`', end: '`',
            contains: [
              hljs.BACKSLASH_ESCAPE,
              {
                className: 'subst',
                begin: '\\$\\{', end: '\\}'
              }
            ]
          },
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          {
            className: 'number',
            variants: [
              { begin: '\\b(0[bB][01]+)' },
              { begin: '\\b(0[oO][0-7]+)' },
              { begin: hljs.C_NUMBER_RE }
            ],
            relevance: 0
          },
          { // "value" container
            begin: '(' + hljs.RE_STARTERS_RE + '|\\b(case|return|throw)\\b)\\s*',
            keywords: 'return throw case',
            contains: [
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              hljs.REGEXP_MODE,
              {
                className: 'function',
                begin: '(\\(.*?\\)|' + hljs.IDENT_RE + ')\\s*=>', returnBegin: true,
                end: '\\s*=>',
                contains: [
                  {
                    className: 'params',
                    variants: [
                      {
                        begin: hljs.IDENT_RE
                      },
                      {
                        begin: /\(\s*\)/,
                      },
                      {
                        begin: /\(/, end: /\)/,
                        excludeBegin: true, excludeEnd: true,
                        keywords: KEYWORDS,
                        contains: [
                          'self',
                          hljs.C_LINE_COMMENT_MODE,
                          hljs.C_BLOCK_COMMENT_MODE
                        ]
                      }
                    ]
                  }
                ]
              }
            ],
            relevance: 0
          },
          {
            className: 'function',
            begin: 'function', end: /[\{;]/, excludeEnd: true,
            keywords: KEYWORDS,
            contains: [
              'self',
              hljs.inherit(hljs.TITLE_MODE, {begin: /[A-Za-z$_][0-9A-Za-z$_]*/}),
              {
                className: 'params',
                begin: /\(/, end: /\)/,
                excludeBegin: true,
                excludeEnd: true,
                keywords: KEYWORDS,
                contains: [
                  hljs.C_LINE_COMMENT_MODE,
                  hljs.C_BLOCK_COMMENT_MODE
                ],
                illegal: /["'\(]/
              }
            ],
            illegal: /%/,
            relevance: 0 // () => {} is more typical in TypeScript
          },
          {
            beginKeywords: 'constructor', end: /\{/, excludeEnd: true,
            contains: [
              'self',
              {
                className: 'params',
                begin: /\(/, end: /\)/,
                excludeBegin: true,
                excludeEnd: true,
                keywords: KEYWORDS,
                contains: [
                  hljs.C_LINE_COMMENT_MODE,
                  hljs.C_BLOCK_COMMENT_MODE
                ],
                illegal: /["'\(]/
              }
            ]
          },
          { // prevent references like module.id from being higlighted as module definitions
            begin: /module\./,
            keywords: {built_in: 'module'},
            relevance: 0
          },
          {
            beginKeywords: 'module', end: /\{/, excludeEnd: true
          },
          {
            beginKeywords: 'interface', end: /\{/, excludeEnd: true,
            keywords: 'interface extends'
          },
          {
            begin: /\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
          },
          {
            begin: '\\.' + hljs.IDENT_RE, relevance: 0 // hack: prevents detection of keywords after dots
          },
          {
            className: 'meta', begin: '@[A-Za-z]+'
          }
        ]
      };
    };
    
    /***/ }),
    /* 567 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        keywords: {
          keyword:
            // Value types
            'char uchar unichar int uint long ulong short ushort int8 int16 int32 int64 uint8 ' +
            'uint16 uint32 uint64 float double bool struct enum string void ' +
            // Reference types
            'weak unowned owned ' +
            // Modifiers
            'async signal static abstract interface override virtual delegate ' +
            // Control Structures
            'if while do for foreach else switch case break default return try catch ' +
            // Visibility
            'public private protected internal ' +
            // Other
            'using new this get set const stdout stdin stderr var',
          built_in:
            'DBus GLib CCode Gee Object Gtk Posix',
          literal:
            'false true null'
        },
        contains: [
          {
            className: 'class',
            beginKeywords: 'class interface namespace', end: '{', excludeEnd: true,
            illegal: '[^,:\\n\\s\\.]',
            contains: [
              hljs.UNDERSCORE_TITLE_MODE
            ]
          },
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          {
            className: 'string',
            begin: '"""', end: '"""',
            relevance: 5
          },
          hljs.APOS_STRING_MODE,
          hljs.QUOTE_STRING_MODE,
          hljs.C_NUMBER_MODE,
          {
            className: 'meta',
            begin: '^#', end: '$',
            relevance: 2
          }
        ]
      };
    };
    
    /***/ }),
    /* 568 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        aliases: ['vb'],
        case_insensitive: true,
        keywords: {
          keyword:
            'addhandler addressof alias and andalso aggregate ansi as assembly auto binary by byref byval ' + /* a-b */
            'call case catch class compare const continue custom declare default delegate dim distinct do ' + /* c-d */
            'each equals else elseif end enum erase error event exit explicit finally for friend from function ' + /* e-f */
            'get global goto group handles if implements imports in inherits interface into is isfalse isnot istrue ' + /* g-i */
            'join key let lib like loop me mid mod module mustinherit mustoverride mybase myclass ' + /* j-m */
            'namespace narrowing new next not notinheritable notoverridable ' + /* n */
            'of off on operator option optional or order orelse overloads overridable overrides ' + /* o */
            'paramarray partial preserve private property protected public ' + /* p */
            'raiseevent readonly redim rem removehandler resume return ' + /* r */
            'select set shadows shared skip static step stop structure strict sub synclock ' + /* s */
            'take text then throw to try unicode until using when where while widening with withevents writeonly xor', /* t-x */
          built_in:
            'boolean byte cbool cbyte cchar cdate cdec cdbl char cint clng cobj csbyte cshort csng cstr ctype ' +  /* b-c */
            'date decimal directcast double gettype getxmlnamespace iif integer long object ' + /* d-o */
            'sbyte short single string trycast typeof uinteger ulong ushort', /* s-u */
          literal:
            'true false nothing'
        },
        illegal: '//|{|}|endif|gosub|variant|wend', /* reserved deprecated keywords */
        contains: [
          hljs.inherit(hljs.QUOTE_STRING_MODE, {contains: [{begin: '""'}]}),
          hljs.COMMENT(
            '\'',
            '$',
            {
              returnBegin: true,
              contains: [
                {
                  className: 'doctag',
                  begin: '\'\'\'|<!--|-->',
                  contains: [hljs.PHRASAL_WORDS_MODE]
                },
                {
                  className: 'doctag',
                  begin: '</?', end: '>',
                  contains: [hljs.PHRASAL_WORDS_MODE]
                }
              ]
            }
          ),
          hljs.C_NUMBER_MODE,
          {
            className: 'meta',
            begin: '#', end: '$',
            keywords: {'meta-keyword': 'if else elseif end region externalsource'}
          }
        ]
      };
    };
    
    /***/ }),
    /* 569 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        aliases: ['vbs'],
        case_insensitive: true,
        keywords: {
          keyword:
            'call class const dim do loop erase execute executeglobal exit for each next function ' +
            'if then else on error option explicit new private property let get public randomize ' +
            'redim rem select case set stop sub while wend with end to elseif is or xor and not ' +
            'class_initialize class_terminate default preserve in me byval byref step resume goto',
          built_in:
            'lcase month vartype instrrev ubound setlocale getobject rgb getref string ' +
            'weekdayname rnd dateadd monthname now day minute isarray cbool round formatcurrency ' +
            'conversions csng timevalue second year space abs clng timeserial fixs len asc ' +
            'isempty maths dateserial atn timer isobject filter weekday datevalue ccur isdate ' +
            'instr datediff formatdatetime replace isnull right sgn array snumeric log cdbl hex ' +
            'chr lbound msgbox ucase getlocale cos cdate cbyte rtrim join hour oct typename trim ' +
            'strcomp int createobject loadpicture tan formatnumber mid scriptenginebuildversion ' +
            'scriptengine split scriptengineminorversion cint sin datepart ltrim sqr ' +
            'scriptenginemajorversion time derived eval date formatpercent exp inputbox left ascw ' +
            'chrw regexp server response request cstr err',
          literal:
            'true false null nothing empty'
        },
        illegal: '//',
        contains: [
          hljs.inherit(hljs.QUOTE_STRING_MODE, {contains: [{begin: '""'}]}),
          hljs.COMMENT(
            /'/,
            /$/,
            {
              relevance: 0
            }
          ),
          hljs.C_NUMBER_MODE
        ]
      };
    };
    
    /***/ }),
    /* 570 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        subLanguage: 'xml',
        contains: [
          {
            begin: '<%', end: '%>',
            subLanguage: 'vbscript'
          }
        ]
      };
    };
    
    /***/ }),
    /* 571 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var SV_KEYWORDS = {
        keyword:
          'accept_on alias always always_comb always_ff always_latch and assert assign ' +
          'assume automatic before begin bind bins binsof bit break buf|0 bufif0 bufif1 ' +
          'byte case casex casez cell chandle checker class clocking cmos config const ' +
          'constraint context continue cover covergroup coverpoint cross deassign default ' +
          'defparam design disable dist do edge else end endcase endchecker endclass ' +
          'endclocking endconfig endfunction endgenerate endgroup endinterface endmodule ' +
          'endpackage endprimitive endprogram endproperty endspecify endsequence endtable ' +
          'endtask enum event eventually expect export extends extern final first_match for ' +
          'force foreach forever fork forkjoin function generate|5 genvar global highz0 highz1 ' +
          'if iff ifnone ignore_bins illegal_bins implements implies import incdir include ' +
          'initial inout input inside instance int integer interconnect interface intersect ' +
          'join join_any join_none large let liblist library local localparam logic longint ' +
          'macromodule matches medium modport module nand negedge nettype new nexttime nmos ' +
          'nor noshowcancelled not notif0 notif1 or output package packed parameter pmos ' +
          'posedge primitive priority program property protected pull0 pull1 pulldown pullup ' +
          'pulsestyle_ondetect pulsestyle_onevent pure rand randc randcase randsequence rcmos ' +
          'real realtime ref reg reject_on release repeat restrict return rnmos rpmos rtran ' +
          'rtranif0 rtranif1 s_always s_eventually s_nexttime s_until s_until_with scalared ' +
          'sequence shortint shortreal showcancelled signed small soft solve specify specparam ' +
          'static string strong strong0 strong1 struct super supply0 supply1 sync_accept_on ' +
          'sync_reject_on table tagged task this throughout time timeprecision timeunit tran ' +
          'tranif0 tranif1 tri tri0 tri1 triand trior trireg type typedef union unique unique0 ' +
          'unsigned until until_with untyped use uwire var vectored virtual void wait wait_order ' +
          'wand weak weak0 weak1 while wildcard wire with within wor xnor xor',
        literal:
          'null',
        built_in:
          '$finish $stop $exit $fatal $error $warning $info $realtime $time $printtimescale ' +
          '$bitstoreal $bitstoshortreal $itor $signed $cast $bits $stime $timeformat ' +
          '$realtobits $shortrealtobits $rtoi $unsigned $asserton $assertkill $assertpasson ' +
          '$assertfailon $assertnonvacuouson $assertoff $assertcontrol $assertpassoff ' +
          '$assertfailoff $assertvacuousoff $isunbounded $sampled $fell $changed $past_gclk ' +
          '$fell_gclk $changed_gclk $rising_gclk $steady_gclk $coverage_control ' +
          '$coverage_get $coverage_save $set_coverage_db_name $rose $stable $past ' +
          '$rose_gclk $stable_gclk $future_gclk $falling_gclk $changing_gclk $display ' +
          '$coverage_get_max $coverage_merge $get_coverage $load_coverage_db $typename ' +
          '$unpacked_dimensions $left $low $increment $clog2 $ln $log10 $exp $sqrt $pow ' +
          '$floor $ceil $sin $cos $tan $countbits $onehot $isunknown $fatal $warning ' +
          '$dimensions $right $high $size $asin $acos $atan $atan2 $hypot $sinh $cosh ' +
          '$tanh $asinh $acosh $atanh $countones $onehot0 $error $info $random ' +
          '$dist_chi_square $dist_erlang $dist_exponential $dist_normal $dist_poisson ' +
          '$dist_t $dist_uniform $q_initialize $q_remove $q_exam $async$and$array ' +
          '$async$nand$array $async$or$array $async$nor$array $sync$and$array ' +
          '$sync$nand$array $sync$or$array $sync$nor$array $q_add $q_full $psprintf ' +
          '$async$and$plane $async$nand$plane $async$or$plane $async$nor$plane ' +
          '$sync$and$plane $sync$nand$plane $sync$or$plane $sync$nor$plane $system ' +
          '$display $displayb $displayh $displayo $strobe $strobeb $strobeh $strobeo ' +
          '$write $readmemb $readmemh $writememh $value$plusargs ' +
          '$dumpvars $dumpon $dumplimit $dumpports $dumpportson $dumpportslimit ' +
          '$writeb $writeh $writeo $monitor $monitorb $monitorh $monitoro $writememb ' +
          '$dumpfile $dumpoff $dumpall $dumpflush $dumpportsoff $dumpportsall ' +
          '$dumpportsflush $fclose $fdisplay $fdisplayb $fdisplayh $fdisplayo ' +
          '$fstrobe $fstrobeb $fstrobeh $fstrobeo $swrite $swriteb $swriteh ' +
          '$swriteo $fscanf $fread $fseek $fflush $feof $fopen $fwrite $fwriteb ' +
          '$fwriteh $fwriteo $fmonitor $fmonitorb $fmonitorh $fmonitoro $sformat ' +
          '$sformatf $fgetc $ungetc $fgets $sscanf $rewind $ftell $ferror'
        };
      return {
        aliases: ['v', 'sv', 'svh'],
        case_insensitive: false,
        keywords: SV_KEYWORDS, lexemes: /[\w\$]+/,
        contains: [
          hljs.C_BLOCK_COMMENT_MODE,
          hljs.C_LINE_COMMENT_MODE,
          hljs.QUOTE_STRING_MODE,
          {
            className: 'number',
            contains: [hljs.BACKSLASH_ESCAPE],
            variants: [
              {begin: '\\b((\\d+\'(b|h|o|d|B|H|O|D))[0-9xzXZa-fA-F_]+)'},
              {begin: '\\B((\'(b|h|o|d|B|H|O|D))[0-9xzXZa-fA-F_]+)'},
              {begin: '\\b([0-9_])+', relevance: 0}
            ]
          },
          /* parameters to instances */
          {
            className: 'variable',
            variants: [
              {begin: '#\\((?!parameter).+\\)'},
              {begin: '\\.\\w+', relevance: 0},
            ]
          },
          {
            className: 'meta',
            begin: '`', end: '$',
            keywords: {'meta-keyword': 'define __FILE__ ' +
              '__LINE__ begin_keywords celldefine default_nettype define ' +
              'else elsif end_keywords endcelldefine endif ifdef ifndef ' +
              'include line nounconnected_drive pragma resetall timescale ' +
              'unconnected_drive undef undefineall'},
            relevance: 0
          }
        ]
      }; // return
    };
    
    /***/ }),
    /* 572 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      // Regular expression for VHDL numeric literals.
    
      // Decimal literal:
      var INTEGER_RE = '\\d(_|\\d)*';
      var EXPONENT_RE = '[eE][-+]?' + INTEGER_RE;
      var DECIMAL_LITERAL_RE = INTEGER_RE + '(\\.' + INTEGER_RE + ')?' + '(' + EXPONENT_RE + ')?';
      // Based literal:
      var BASED_INTEGER_RE = '\\w+';
      var BASED_LITERAL_RE = INTEGER_RE + '#' + BASED_INTEGER_RE + '(\\.' + BASED_INTEGER_RE + ')?' + '#' + '(' + EXPONENT_RE + ')?';
    
      var NUMBER_RE = '\\b(' + BASED_LITERAL_RE + '|' + DECIMAL_LITERAL_RE + ')';
    
      return {
        case_insensitive: true,
        keywords: {
          keyword:
            'abs access after alias all and architecture array assert assume assume_guarantee attribute ' +
            'begin block body buffer bus case component configuration constant context cover disconnect ' +
            'downto default else elsif end entity exit fairness file for force function generate ' +
            'generic group guarded if impure in inertial inout is label library linkage literal ' +
            'loop map mod nand new next nor not null of on open or others out package port ' +
            'postponed procedure process property protected pure range record register reject ' +
            'release rem report restrict restrict_guarantee return rol ror select sequence ' +
            'severity shared signal sla sll sra srl strong subtype then to transport type ' +
            'unaffected units until use variable vmode vprop vunit wait when while with xnor xor',
          built_in:
            'boolean bit character ' +
            'integer time delay_length natural positive ' +
            'string bit_vector file_open_kind file_open_status ' +
            'std_logic std_logic_vector unsigned signed boolean_vector integer_vector ' +
            'std_ulogic std_ulogic_vector unresolved_unsigned u_unsigned unresolved_signed u_signed' +
            'real_vector time_vector',
          literal:
            'false true note warning error failure ' +  // severity_level
            'line text side width'                      // textio
        },
        illegal: '{',
        contains: [
          hljs.C_BLOCK_COMMENT_MODE,      // VHDL-2008 block commenting.
          hljs.COMMENT('--', '$'),
          hljs.QUOTE_STRING_MODE,
          {
            className: 'number',
            begin: NUMBER_RE,
            relevance: 0
          },
          {
            className: 'string',
            begin: '\'(U|X|0|1|Z|W|L|H|-)\'',
            contains: [hljs.BACKSLASH_ESCAPE]
          },
          {
            className: 'symbol',
            begin: '\'[A-Za-z](_?[A-Za-z0-9])*',
            contains: [hljs.BACKSLASH_ESCAPE]
          }
        ]
      };
    };
    
    /***/ }),
    /* 573 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        lexemes: /[!#@\w]+/,
        keywords: {
          keyword:
            // express version except: ! & * < = > !! # @ @@
            'N|0 P|0 X|0 a|0 ab abc abo al am an|0 ar arga argd arge argdo argg argl argu as au aug aun b|0 bN ba bad bd be bel bf bl bm bn bo bp br brea breaka breakd breakl bro bufdo buffers bun bw c|0 cN cNf ca cabc caddb cad caddf cal cat cb cc ccl cd ce cex cf cfir cgetb cgete cg changes chd che checkt cl cla clo cm cmapc cme cn cnew cnf cno cnorea cnoreme co col colo com comc comp con conf cope '+
            'cp cpf cq cr cs cst cu cuna cunme cw delm deb debugg delc delf dif diffg diffo diffp diffpu diffs diffthis dig di dl dell dj dli do doautoa dp dr ds dsp e|0 ea ec echoe echoh echom echon el elsei em en endfo endf endt endw ene ex exe exi exu f|0 files filet fin fina fini fir fix fo foldc foldd folddoc foldo for fu go gr grepa gu gv ha helpf helpg helpt hi hid his ia iabc if ij il im imapc '+
            'ime ino inorea inoreme int is isp iu iuna iunme j|0 ju k|0 keepa kee keepj lN lNf l|0 lad laddb laddf la lan lat lb lc lch lcl lcs le lefta let lex lf lfir lgetb lgete lg lgr lgrepa lh ll lla lli lmak lm lmapc lne lnew lnf ln loadk lo loc lockv lol lope lp lpf lr ls lt lu lua luad luaf lv lvimgrepa lw m|0 ma mak map mapc marks mat me menut mes mk mks mksp mkv mkvie mod mz mzf nbc nb nbs new nm nmapc nme nn nnoreme noa no noh norea noreme norm nu nun nunme ol o|0 om omapc ome on ono onoreme opt ou ounme ow p|0 '+
            'profd prof pro promptr pc ped pe perld po popu pp pre prev ps pt ptN ptf ptj ptl ptn ptp ptr pts pu pw py3 python3 py3d py3f py pyd pyf quita qa rec red redi redr redraws reg res ret retu rew ri rightb rub rubyd rubyf rund ru rv sN san sa sal sav sb sbN sba sbf sbl sbm sbn sbp sbr scrip scripte scs se setf setg setl sf sfir sh sim sig sil sl sla sm smap smapc sme sn sni sno snor snoreme sor '+
            'so spelld spe spelli spellr spellu spellw sp spr sre st sta startg startr star stopi stj sts sun sunm sunme sus sv sw sy synti sync tN tabN tabc tabdo tabe tabf tabfir tabl tabm tabnew '+
            'tabn tabo tabp tabr tabs tab ta tags tc tcld tclf te tf th tj tl tm tn to tp tr try ts tu u|0 undoj undol una unh unl unlo unm unme uns up ve verb vert vim vimgrepa vi viu vie vm vmapc vme vne vn vnoreme vs vu vunme windo w|0 wN wa wh wi winc winp wn wp wq wqa ws wu wv x|0 xa xmapc xm xme xn xnoreme xu xunme y|0 z|0 ~ '+
            // full version
            'Next Print append abbreviate abclear aboveleft all amenu anoremenu args argadd argdelete argedit argglobal arglocal argument ascii autocmd augroup aunmenu buffer bNext ball badd bdelete behave belowright bfirst blast bmodified bnext botright bprevious brewind break breakadd breakdel breaklist browse bunload '+
            'bwipeout change cNext cNfile cabbrev cabclear caddbuffer caddexpr caddfile call catch cbuffer cclose center cexpr cfile cfirst cgetbuffer cgetexpr cgetfile chdir checkpath checktime clist clast close cmap cmapclear cmenu cnext cnewer cnfile cnoremap cnoreabbrev cnoremenu copy colder colorscheme command comclear compiler continue confirm copen cprevious cpfile cquit crewind cscope cstag cunmap '+
            'cunabbrev cunmenu cwindow delete delmarks debug debuggreedy delcommand delfunction diffupdate diffget diffoff diffpatch diffput diffsplit digraphs display deletel djump dlist doautocmd doautoall deletep drop dsearch dsplit edit earlier echo echoerr echohl echomsg else elseif emenu endif endfor '+
            'endfunction endtry endwhile enew execute exit exusage file filetype find finally finish first fixdel fold foldclose folddoopen folddoclosed foldopen function global goto grep grepadd gui gvim hardcopy help helpfind helpgrep helptags highlight hide history insert iabbrev iabclear ijump ilist imap '+
            'imapclear imenu inoremap inoreabbrev inoremenu intro isearch isplit iunmap iunabbrev iunmenu join jumps keepalt keepmarks keepjumps lNext lNfile list laddexpr laddbuffer laddfile last language later lbuffer lcd lchdir lclose lcscope left leftabove lexpr lfile lfirst lgetbuffer lgetexpr lgetfile lgrep lgrepadd lhelpgrep llast llist lmake lmap lmapclear lnext lnewer lnfile lnoremap loadkeymap loadview '+
            'lockmarks lockvar lolder lopen lprevious lpfile lrewind ltag lunmap luado luafile lvimgrep lvimgrepadd lwindow move mark make mapclear match menu menutranslate messages mkexrc mksession mkspell mkvimrc mkview mode mzscheme mzfile nbclose nbkey nbsart next nmap nmapclear nmenu nnoremap '+
            'nnoremenu noautocmd noremap nohlsearch noreabbrev noremenu normal number nunmap nunmenu oldfiles open omap omapclear omenu only onoremap onoremenu options ounmap ounmenu ownsyntax print profdel profile promptfind promptrepl pclose pedit perl perldo pop popup ppop preserve previous psearch ptag ptNext '+
            'ptfirst ptjump ptlast ptnext ptprevious ptrewind ptselect put pwd py3do py3file python pydo pyfile quit quitall qall read recover redo redir redraw redrawstatus registers resize retab return rewind right rightbelow ruby rubydo rubyfile rundo runtime rviminfo substitute sNext sandbox sargument sall saveas sbuffer sbNext sball sbfirst sblast sbmodified sbnext sbprevious sbrewind scriptnames scriptencoding '+
            'scscope set setfiletype setglobal setlocal sfind sfirst shell simalt sign silent sleep slast smagic smapclear smenu snext sniff snomagic snoremap snoremenu sort source spelldump spellgood spellinfo spellrepall spellundo spellwrong split sprevious srewind stop stag startgreplace startreplace '+
            'startinsert stopinsert stjump stselect sunhide sunmap sunmenu suspend sview swapname syntax syntime syncbind tNext tabNext tabclose tabedit tabfind tabfirst tablast tabmove tabnext tabonly tabprevious tabrewind tag tcl tcldo tclfile tearoff tfirst throw tjump tlast tmenu tnext topleft tprevious '+'trewind tselect tunmenu undo undojoin undolist unabbreviate unhide unlet unlockvar unmap unmenu unsilent update vglobal version verbose vertical vimgrep vimgrepadd visual viusage view vmap vmapclear vmenu vnew '+
            'vnoremap vnoremenu vsplit vunmap vunmenu write wNext wall while winsize wincmd winpos wnext wprevious wqall wsverb wundo wviminfo xit xall xmapclear xmap xmenu xnoremap xnoremenu xunmap xunmenu yank',
          built_in: //built in func
            'synIDtrans atan2 range matcharg did_filetype asin feedkeys xor argv ' +
            'complete_check add getwinposx getqflist getwinposy screencol ' +
            'clearmatches empty extend getcmdpos mzeval garbagecollect setreg ' +
            'ceil sqrt diff_hlID inputsecret get getfperm getpid filewritable ' +
            'shiftwidth max sinh isdirectory synID system inputrestore winline ' +
            'atan visualmode inputlist tabpagewinnr round getregtype mapcheck ' +
            'hasmapto histdel argidx findfile sha256 exists toupper getcmdline ' +
            'taglist string getmatches bufnr strftime winwidth bufexists ' +
            'strtrans tabpagebuflist setcmdpos remote_read printf setloclist ' +
            'getpos getline bufwinnr float2nr len getcmdtype diff_filler luaeval ' +
            'resolve libcallnr foldclosedend reverse filter has_key bufname ' +
            'str2float strlen setline getcharmod setbufvar index searchpos ' +
            'shellescape undofile foldclosed setqflist buflisted strchars str2nr ' +
            'virtcol floor remove undotree remote_expr winheight gettabwinvar ' +
            'reltime cursor tabpagenr finddir localtime acos getloclist search ' +
            'tanh matchend rename gettabvar strdisplaywidth type abs py3eval ' +
            'setwinvar tolower wildmenumode log10 spellsuggest bufloaded ' +
            'synconcealed nextnonblank server2client complete settabwinvar ' +
            'executable input wincol setmatches getftype hlID inputsave ' +
            'searchpair or screenrow line settabvar histadd deepcopy strpart ' +
            'remote_peek and eval getftime submatch screenchar winsaveview ' +
            'matchadd mkdir screenattr getfontname libcall reltimestr getfsize ' +
            'winnr invert pow getbufline byte2line soundfold repeat fnameescape ' +
            'tagfiles sin strwidth spellbadword trunc maparg log lispindent ' +
            'hostname setpos globpath remote_foreground getchar synIDattr ' +
            'fnamemodify cscope_connection stridx winbufnr indent min ' +
            'complete_add nr2char searchpairpos inputdialog values matchlist ' +
            'items hlexists strridx browsedir expand fmod pathshorten line2byte ' +
            'argc count getwinvar glob foldtextresult getreg foreground cosh ' +
            'matchdelete has char2nr simplify histget searchdecl iconv ' +
            'winrestcmd pumvisible writefile foldlevel haslocaldir keys cos ' +
            'matchstr foldtext histnr tan tempname getcwd byteidx getbufvar ' +
            'islocked escape eventhandler remote_send serverlist winrestview ' +
            'synstack pyeval prevnonblank readfile cindent filereadable changenr ' +
            'exp'
        },
        illegal: /;/,
        contains: [
          hljs.NUMBER_MODE,
          hljs.APOS_STRING_MODE,
    
          /*
          A double quote can start either a string or a line comment. Strings are
          ended before the end of a line by another double quote and can contain
          escaped double-quotes and post-escaped line breaks.
    
          Also, any double quote at the beginning of a line is a comment but we
          don't handle that properly at the moment: any double quote inside will
          turn them into a string. Handling it properly will require a smarter
          parser.
          */
          {
            className: 'string',
            begin: /"(\\"|\n\\|[^"\n])*"/
          },
          hljs.COMMENT('"', '$'),
    
          {
            className: 'variable',
            begin: /[bwtglsav]:[\w\d_]*/
          },
          {
            className: 'function',
            beginKeywords: 'function function!', end: '$',
            relevance: 0,
            contains: [
              hljs.TITLE_MODE,
              {
                className: 'params',
                begin: '\\(', end: '\\)'
              }
            ]
          },
          {
            className: 'symbol',
            begin: /<[\w-]+>/
          }
        ]
      };
    };
    
    /***/ }),
    /* 574 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      return {
        case_insensitive: true,
        lexemes: '[.%]?' + hljs.IDENT_RE,
        keywords: {
          keyword:
            'lock rep repe repz repne repnz xaquire xrelease bnd nobnd ' +
            'aaa aad aam aas adc add and arpl bb0_reset bb1_reset bound bsf bsr bswap bt btc btr bts call cbw cdq cdqe clc cld cli clts cmc cmp cmpsb cmpsd cmpsq cmpsw cmpxchg cmpxchg486 cmpxchg8b cmpxchg16b cpuid cpu_read cpu_write cqo cwd cwde daa das dec div dmint emms enter equ f2xm1 fabs fadd faddp fbld fbstp fchs fclex fcmovb fcmovbe fcmove fcmovnb fcmovnbe fcmovne fcmovnu fcmovu fcom fcomi fcomip fcomp fcompp fcos fdecstp fdisi fdiv fdivp fdivr fdivrp femms feni ffree ffreep fiadd ficom ficomp fidiv fidivr fild fimul fincstp finit fist fistp fisttp fisub fisubr fld fld1 fldcw fldenv fldl2e fldl2t fldlg2 fldln2 fldpi fldz fmul fmulp fnclex fndisi fneni fninit fnop fnsave fnstcw fnstenv fnstsw fpatan fprem fprem1 fptan frndint frstor fsave fscale fsetpm fsin fsincos fsqrt fst fstcw fstenv fstp fstsw fsub fsubp fsubr fsubrp ftst fucom fucomi fucomip fucomp fucompp fxam fxch fxtract fyl2x fyl2xp1 hlt ibts icebp idiv imul in inc incbin insb insd insw int int01 int1 int03 int3 into invd invpcid invlpg invlpga iret iretd iretq iretw jcxz jecxz jrcxz jmp jmpe lahf lar lds lea leave les lfence lfs lgdt lgs lidt lldt lmsw loadall loadall286 lodsb lodsd lodsq lodsw loop loope loopne loopnz loopz lsl lss ltr mfence monitor mov movd movq movsb movsd movsq movsw movsx movsxd movzx mul mwait neg nop not or out outsb outsd outsw packssdw packsswb packuswb paddb paddd paddsb paddsiw paddsw paddusb paddusw paddw pand pandn pause paveb pavgusb pcmpeqb pcmpeqd pcmpeqw pcmpgtb pcmpgtd pcmpgtw pdistib pf2id pfacc pfadd pfcmpeq pfcmpge pfcmpgt pfmax pfmin pfmul pfrcp pfrcpit1 pfrcpit2 pfrsqit1 pfrsqrt pfsub pfsubr pi2fd pmachriw pmaddwd pmagw pmulhriw pmulhrwa pmulhrwc pmulhw pmullw pmvgezb pmvlzb pmvnzb pmvzb pop popa popad popaw popf popfd popfq popfw por prefetch prefetchw pslld psllq psllw psrad psraw psrld psrlq psrlw psubb psubd psubsb psubsiw psubsw psubusb psubusw psubw punpckhbw punpckhdq punpckhwd punpcklbw punpckldq punpcklwd push pusha pushad pushaw pushf pushfd pushfq pushfw pxor rcl rcr rdshr rdmsr rdpmc rdtsc rdtscp ret retf retn rol ror rdm rsdc rsldt rsm rsts sahf sal salc sar sbb scasb scasd scasq scasw sfence sgdt shl shld shr shrd sidt sldt skinit smi smint smintold smsw stc std sti stosb stosd stosq stosw str sub svdc svldt svts swapgs syscall sysenter sysexit sysret test ud0 ud1 ud2b ud2 ud2a umov verr verw fwait wbinvd wrshr wrmsr xadd xbts xchg xlatb xlat xor cmove cmovz cmovne cmovnz cmova cmovnbe cmovae cmovnb cmovb cmovnae cmovbe cmovna cmovg cmovnle cmovge cmovnl cmovl cmovnge cmovle cmovng cmovc cmovnc cmovo cmovno cmovs cmovns cmovp cmovpe cmovnp cmovpo je jz jne jnz ja jnbe jae jnb jb jnae jbe jna jg jnle jge jnl jl jnge jle jng jc jnc jo jno js jns jpo jnp jpe jp sete setz setne setnz seta setnbe setae setnb setnc setb setnae setcset setbe setna setg setnle setge setnl setl setnge setle setng sets setns seto setno setpe setp setpo setnp addps addss andnps andps cmpeqps cmpeqss cmpleps cmpless cmpltps cmpltss cmpneqps cmpneqss cmpnleps cmpnless cmpnltps cmpnltss cmpordps cmpordss cmpunordps cmpunordss cmpps cmpss comiss cvtpi2ps cvtps2pi cvtsi2ss cvtss2si cvttps2pi cvttss2si divps divss ldmxcsr maxps maxss minps minss movaps movhps movlhps movlps movhlps movmskps movntps movss movups mulps mulss orps rcpps rcpss rsqrtps rsqrtss shufps sqrtps sqrtss stmxcsr subps subss ucomiss unpckhps unpcklps xorps fxrstor fxrstor64 fxsave fxsave64 xgetbv xsetbv xsave xsave64 xsaveopt xsaveopt64 xrstor xrstor64 prefetchnta prefetcht0 prefetcht1 prefetcht2 maskmovq movntq pavgb pavgw pextrw pinsrw pmaxsw pmaxub pminsw pminub pmovmskb pmulhuw psadbw pshufw pf2iw pfnacc pfpnacc pi2fw pswapd maskmovdqu clflush movntdq movnti movntpd movdqa movdqu movdq2q movq2dq paddq pmuludq pshufd pshufhw pshuflw pslldq psrldq psubq punpckhqdq punpcklqdq addpd addsd andnpd andpd cmpeqpd cmpeqsd cmplepd cmplesd cmpltpd cmpltsd cmpneqpd cmpneqsd cmpnlepd cmpnlesd cmpnltpd cmpnltsd cmpordpd cmpordsd cmpunordpd cmpunordsd cmppd comisd cvtdq2pd cvtdq2ps cvtpd2dq cvtpd2pi cvtpd2ps cvtpi2pd cvtps2dq cvtps2pd cvtsd2si cvtsd2ss cvtsi2sd cvtss2sd cvttpd2pi cvttpd2dq cvttps2dq cvttsd2si divpd divsd maxpd maxsd minpd minsd movapd movhpd movlpd movmskpd movupd mulpd mulsd orpd shufpd sqrtpd sqrtsd subpd subsd ucomisd unpckhpd unpcklpd xorpd addsubpd addsubps haddpd haddps hsubpd hsubps lddqu movddup movshdup movsldup clgi stgi vmcall vmclear vmfunc vmlaunch vmload vmmcall vmptrld vmptrst vmread vmresume vmrun vmsave vmwrite vmxoff vmxon invept invvpid pabsb pabsw pabsd palignr phaddw phaddd phaddsw phsubw phsubd phsubsw pmaddubsw pmulhrsw pshufb psignb psignw psignd extrq insertq movntsd movntss lzcnt blendpd blendps blendvpd blendvps dppd dpps extractps insertps movntdqa mpsadbw packusdw pblendvb pblendw pcmpeqq pextrb pextrd pextrq phminposuw pinsrb pinsrd pinsrq pmaxsb pmaxsd pmaxud pmaxuw pminsb pminsd pminud pminuw pmovsxbw pmovsxbd pmovsxbq pmovsxwd pmovsxwq pmovsxdq pmovzxbw pmovzxbd pmovzxbq pmovzxwd pmovzxwq pmovzxdq pmuldq pmulld ptest roundpd roundps roundsd roundss crc32 pcmpestri pcmpestrm pcmpistri pcmpistrm pcmpgtq popcnt getsec pfrcpv pfrsqrtv movbe aesenc aesenclast aesdec aesdeclast aesimc aeskeygenassist vaesenc vaesenclast vaesdec vaesdeclast vaesimc vaeskeygenassist vaddpd vaddps vaddsd vaddss vaddsubpd vaddsubps vandpd vandps vandnpd vandnps vblendpd vblendps vblendvpd vblendvps vbroadcastss vbroadcastsd vbroadcastf128 vcmpeq_ospd vcmpeqpd vcmplt_ospd vcmpltpd vcmple_ospd vcmplepd vcmpunord_qpd vcmpunordpd vcmpneq_uqpd vcmpneqpd vcmpnlt_uspd vcmpnltpd vcmpnle_uspd vcmpnlepd vcmpord_qpd vcmpordpd vcmpeq_uqpd vcmpnge_uspd vcmpngepd vcmpngt_uspd vcmpngtpd vcmpfalse_oqpd vcmpfalsepd vcmpneq_oqpd vcmpge_ospd vcmpgepd vcmpgt_ospd vcmpgtpd vcmptrue_uqpd vcmptruepd vcmplt_oqpd vcmple_oqpd vcmpunord_spd vcmpneq_uspd vcmpnlt_uqpd vcmpnle_uqpd vcmpord_spd vcmpeq_uspd vcmpnge_uqpd vcmpngt_uqpd vcmpfalse_ospd vcmpneq_ospd vcmpge_oqpd vcmpgt_oqpd vcmptrue_uspd vcmppd vcmpeq_osps vcmpeqps vcmplt_osps vcmpltps vcmple_osps vcmpleps vcmpunord_qps vcmpunordps vcmpneq_uqps vcmpneqps vcmpnlt_usps vcmpnltps vcmpnle_usps vcmpnleps vcmpord_qps vcmpordps vcmpeq_uqps vcmpnge_usps vcmpngeps vcmpngt_usps vcmpngtps vcmpfalse_oqps vcmpfalseps vcmpneq_oqps vcmpge_osps vcmpgeps vcmpgt_osps vcmpgtps vcmptrue_uqps vcmptrueps vcmplt_oqps vcmple_oqps vcmpunord_sps vcmpneq_usps vcmpnlt_uqps vcmpnle_uqps vcmpord_sps vcmpeq_usps vcmpnge_uqps vcmpngt_uqps vcmpfalse_osps vcmpneq_osps vcmpge_oqps vcmpgt_oqps vcmptrue_usps vcmpps vcmpeq_ossd vcmpeqsd vcmplt_ossd vcmpltsd vcmple_ossd vcmplesd vcmpunord_qsd vcmpunordsd vcmpneq_uqsd vcmpneqsd vcmpnlt_ussd vcmpnltsd vcmpnle_ussd vcmpnlesd vcmpord_qsd vcmpordsd vcmpeq_uqsd vcmpnge_ussd vcmpngesd vcmpngt_ussd vcmpngtsd vcmpfalse_oqsd vcmpfalsesd vcmpneq_oqsd vcmpge_ossd vcmpgesd vcmpgt_ossd vcmpgtsd vcmptrue_uqsd vcmptruesd vcmplt_oqsd vcmple_oqsd vcmpunord_ssd vcmpneq_ussd vcmpnlt_uqsd vcmpnle_uqsd vcmpord_ssd vcmpeq_ussd vcmpnge_uqsd vcmpngt_uqsd vcmpfalse_ossd vcmpneq_ossd vcmpge_oqsd vcmpgt_oqsd vcmptrue_ussd vcmpsd vcmpeq_osss vcmpeqss vcmplt_osss vcmpltss vcmple_osss vcmpless vcmpunord_qss vcmpunordss vcmpneq_uqss vcmpneqss vcmpnlt_usss vcmpnltss vcmpnle_usss vcmpnless vcmpord_qss vcmpordss vcmpeq_uqss vcmpnge_usss vcmpngess vcmpngt_usss vcmpngtss vcmpfalse_oqss vcmpfalsess vcmpneq_oqss vcmpge_osss vcmpgess vcmpgt_osss vcmpgtss vcmptrue_uqss vcmptruess vcmplt_oqss vcmple_oqss vcmpunord_sss vcmpneq_usss vcmpnlt_uqss vcmpnle_uqss vcmpord_sss vcmpeq_usss vcmpnge_uqss vcmpngt_uqss vcmpfalse_osss vcmpneq_osss vcmpge_oqss vcmpgt_oqss vcmptrue_usss vcmpss vcomisd vcomiss vcvtdq2pd vcvtdq2ps vcvtpd2dq vcvtpd2ps vcvtps2dq vcvtps2pd vcvtsd2si vcvtsd2ss vcvtsi2sd vcvtsi2ss vcvtss2sd vcvtss2si vcvttpd2dq vcvttps2dq vcvttsd2si vcvttss2si vdivpd vdivps vdivsd vdivss vdppd vdpps vextractf128 vextractps vhaddpd vhaddps vhsubpd vhsubps vinsertf128 vinsertps vlddqu vldqqu vldmxcsr vmaskmovdqu vmaskmovps vmaskmovpd vmaxpd vmaxps vmaxsd vmaxss vminpd vminps vminsd vminss vmovapd vmovaps vmovd vmovq vmovddup vmovdqa vmovqqa vmovdqu vmovqqu vmovhlps vmovhpd vmovhps vmovlhps vmovlpd vmovlps vmovmskpd vmovmskps vmovntdq vmovntqq vmovntdqa vmovntpd vmovntps vmovsd vmovshdup vmovsldup vmovss vmovupd vmovups vmpsadbw vmulpd vmulps vmulsd vmulss vorpd vorps vpabsb vpabsw vpabsd vpacksswb vpackssdw vpackuswb vpackusdw vpaddb vpaddw vpaddd vpaddq vpaddsb vpaddsw vpaddusb vpaddusw vpalignr vpand vpandn vpavgb vpavgw vpblendvb vpblendw vpcmpestri vpcmpestrm vpcmpistri vpcmpistrm vpcmpeqb vpcmpeqw vpcmpeqd vpcmpeqq vpcmpgtb vpcmpgtw vpcmpgtd vpcmpgtq vpermilpd vpermilps vperm2f128 vpextrb vpextrw vpextrd vpextrq vphaddw vphaddd vphaddsw vphminposuw vphsubw vphsubd vphsubsw vpinsrb vpinsrw vpinsrd vpinsrq vpmaddwd vpmaddubsw vpmaxsb vpmaxsw vpmaxsd vpmaxub vpmaxuw vpmaxud vpminsb vpminsw vpminsd vpminub vpminuw vpminud vpmovmskb vpmovsxbw vpmovsxbd vpmovsxbq vpmovsxwd vpmovsxwq vpmovsxdq vpmovzxbw vpmovzxbd vpmovzxbq vpmovzxwd vpmovzxwq vpmovzxdq vpmulhuw vpmulhrsw vpmulhw vpmullw vpmulld vpmuludq vpmuldq vpor vpsadbw vpshufb vpshufd vpshufhw vpshuflw vpsignb vpsignw vpsignd vpslldq vpsrldq vpsllw vpslld vpsllq vpsraw vpsrad vpsrlw vpsrld vpsrlq vptest vpsubb vpsubw vpsubd vpsubq vpsubsb vpsubsw vpsubusb vpsubusw vpunpckhbw vpunpckhwd vpunpckhdq vpunpckhqdq vpunpcklbw vpunpcklwd vpunpckldq vpunpcklqdq vpxor vrcpps vrcpss vrsqrtps vrsqrtss vroundpd vroundps vroundsd vroundss vshufpd vshufps vsqrtpd vsqrtps vsqrtsd vsqrtss vstmxcsr vsubpd vsubps vsubsd vsubss vtestps vtestpd vucomisd vucomiss vunpckhpd vunpckhps vunpcklpd vunpcklps vxorpd vxorps vzeroall vzeroupper pclmullqlqdq pclmulhqlqdq pclmullqhqdq pclmulhqhqdq pclmulqdq vpclmullqlqdq vpclmulhqlqdq vpclmullqhqdq vpclmulhqhqdq vpclmulqdq vfmadd132ps vfmadd132pd vfmadd312ps vfmadd312pd vfmadd213ps vfmadd213pd vfmadd123ps vfmadd123pd vfmadd231ps vfmadd231pd vfmadd321ps vfmadd321pd vfmaddsub132ps vfmaddsub132pd vfmaddsub312ps vfmaddsub312pd vfmaddsub213ps vfmaddsub213pd vfmaddsub123ps vfmaddsub123pd vfmaddsub231ps vfmaddsub231pd vfmaddsub321ps vfmaddsub321pd vfmsub132ps vfmsub132pd vfmsub312ps vfmsub312pd vfmsub213ps vfmsub213pd vfmsub123ps vfmsub123pd vfmsub231ps vfmsub231pd vfmsub321ps vfmsub321pd vfmsubadd132ps vfmsubadd132pd vfmsubadd312ps vfmsubadd312pd vfmsubadd213ps vfmsubadd213pd vfmsubadd123ps vfmsubadd123pd vfmsubadd231ps vfmsubadd231pd vfmsubadd321ps vfmsubadd321pd vfnmadd132ps vfnmadd132pd vfnmadd312ps vfnmadd312pd vfnmadd213ps vfnmadd213pd vfnmadd123ps vfnmadd123pd vfnmadd231ps vfnmadd231pd vfnmadd321ps vfnmadd321pd vfnmsub132ps vfnmsub132pd vfnmsub312ps vfnmsub312pd vfnmsub213ps vfnmsub213pd vfnmsub123ps vfnmsub123pd vfnmsub231ps vfnmsub231pd vfnmsub321ps vfnmsub321pd vfmadd132ss vfmadd132sd vfmadd312ss vfmadd312sd vfmadd213ss vfmadd213sd vfmadd123ss vfmadd123sd vfmadd231ss vfmadd231sd vfmadd321ss vfmadd321sd vfmsub132ss vfmsub132sd vfmsub312ss vfmsub312sd vfmsub213ss vfmsub213sd vfmsub123ss vfmsub123sd vfmsub231ss vfmsub231sd vfmsub321ss vfmsub321sd vfnmadd132ss vfnmadd132sd vfnmadd312ss vfnmadd312sd vfnmadd213ss vfnmadd213sd vfnmadd123ss vfnmadd123sd vfnmadd231ss vfnmadd231sd vfnmadd321ss vfnmadd321sd vfnmsub132ss vfnmsub132sd vfnmsub312ss vfnmsub312sd vfnmsub213ss vfnmsub213sd vfnmsub123ss vfnmsub123sd vfnmsub231ss vfnmsub231sd vfnmsub321ss vfnmsub321sd rdfsbase rdgsbase rdrand wrfsbase wrgsbase vcvtph2ps vcvtps2ph adcx adox rdseed clac stac xstore xcryptecb xcryptcbc xcryptctr xcryptcfb xcryptofb montmul xsha1 xsha256 llwpcb slwpcb lwpval lwpins vfmaddpd vfmaddps vfmaddsd vfmaddss vfmaddsubpd vfmaddsubps vfmsubaddpd vfmsubaddps vfmsubpd vfmsubps vfmsubsd vfmsubss vfnmaddpd vfnmaddps vfnmaddsd vfnmaddss vfnmsubpd vfnmsubps vfnmsubsd vfnmsubss vfrczpd vfrczps vfrczsd vfrczss vpcmov vpcomb vpcomd vpcomq vpcomub vpcomud vpcomuq vpcomuw vpcomw vphaddbd vphaddbq vphaddbw vphadddq vphaddubd vphaddubq vphaddubw vphaddudq vphadduwd vphadduwq vphaddwd vphaddwq vphsubbw vphsubdq vphsubwd vpmacsdd vpmacsdqh vpmacsdql vpmacssdd vpmacssdqh vpmacssdql vpmacsswd vpmacssww vpmacswd vpmacsww vpmadcsswd vpmadcswd vpperm vprotb vprotd vprotq vprotw vpshab vpshad vpshaq vpshaw vpshlb vpshld vpshlq vpshlw vbroadcasti128 vpblendd vpbroadcastb vpbroadcastw vpbroadcastd vpbroadcastq vpermd vpermpd vpermps vpermq vperm2i128 vextracti128 vinserti128 vpmaskmovd vpmaskmovq vpsllvd vpsllvq vpsravd vpsrlvd vpsrlvq vgatherdpd vgatherqpd vgatherdps vgatherqps vpgatherdd vpgatherqd vpgatherdq vpgatherqq xabort xbegin xend xtest andn bextr blci blcic blsi blsic blcfill blsfill blcmsk blsmsk blsr blcs bzhi mulx pdep pext rorx sarx shlx shrx tzcnt tzmsk t1mskc valignd valignq vblendmpd vblendmps vbroadcastf32x4 vbroadcastf64x4 vbroadcasti32x4 vbroadcasti64x4 vcompresspd vcompressps vcvtpd2udq vcvtps2udq vcvtsd2usi vcvtss2usi vcvttpd2udq vcvttps2udq vcvttsd2usi vcvttss2usi vcvtudq2pd vcvtudq2ps vcvtusi2sd vcvtusi2ss vexpandpd vexpandps vextractf32x4 vextractf64x4 vextracti32x4 vextracti64x4 vfixupimmpd vfixupimmps vfixupimmsd vfixupimmss vgetexppd vgetexpps vgetexpsd vgetexpss vgetmantpd vgetmantps vgetmantsd vgetmantss vinsertf32x4 vinsertf64x4 vinserti32x4 vinserti64x4 vmovdqa32 vmovdqa64 vmovdqu32 vmovdqu64 vpabsq vpandd vpandnd vpandnq vpandq vpblendmd vpblendmq vpcmpltd vpcmpled vpcmpneqd vpcmpnltd vpcmpnled vpcmpd vpcmpltq vpcmpleq vpcmpneqq vpcmpnltq vpcmpnleq vpcmpq vpcmpequd vpcmpltud vpcmpleud vpcmpnequd vpcmpnltud vpcmpnleud vpcmpud vpcmpequq vpcmpltuq vpcmpleuq vpcmpnequq vpcmpnltuq vpcmpnleuq vpcmpuq vpcompressd vpcompressq vpermi2d vpermi2pd vpermi2ps vpermi2q vpermt2d vpermt2pd vpermt2ps vpermt2q vpexpandd vpexpandq vpmaxsq vpmaxuq vpminsq vpminuq vpmovdb vpmovdw vpmovqb vpmovqd vpmovqw vpmovsdb vpmovsdw vpmovsqb vpmovsqd vpmovsqw vpmovusdb vpmovusdw vpmovusqb vpmovusqd vpmovusqw vpord vporq vprold vprolq vprolvd vprolvq vprord vprorq vprorvd vprorvq vpscatterdd vpscatterdq vpscatterqd vpscatterqq vpsraq vpsravq vpternlogd vpternlogq vptestmd vptestmq vptestnmd vptestnmq vpxord vpxorq vrcp14pd vrcp14ps vrcp14sd vrcp14ss vrndscalepd vrndscaleps vrndscalesd vrndscaless vrsqrt14pd vrsqrt14ps vrsqrt14sd vrsqrt14ss vscalefpd vscalefps vscalefsd vscalefss vscatterdpd vscatterdps vscatterqpd vscatterqps vshuff32x4 vshuff64x2 vshufi32x4 vshufi64x2 kandnw kandw kmovw knotw kortestw korw kshiftlw kshiftrw kunpckbw kxnorw kxorw vpbroadcastmb2q vpbroadcastmw2d vpconflictd vpconflictq vplzcntd vplzcntq vexp2pd vexp2ps vrcp28pd vrcp28ps vrcp28sd vrcp28ss vrsqrt28pd vrsqrt28ps vrsqrt28sd vrsqrt28ss vgatherpf0dpd vgatherpf0dps vgatherpf0qpd vgatherpf0qps vgatherpf1dpd vgatherpf1dps vgatherpf1qpd vgatherpf1qps vscatterpf0dpd vscatterpf0dps vscatterpf0qpd vscatterpf0qps vscatterpf1dpd vscatterpf1dps vscatterpf1qpd vscatterpf1qps prefetchwt1 bndmk bndcl bndcu bndcn bndmov bndldx bndstx sha1rnds4 sha1nexte sha1msg1 sha1msg2 sha256rnds2 sha256msg1 sha256msg2 hint_nop0 hint_nop1 hint_nop2 hint_nop3 hint_nop4 hint_nop5 hint_nop6 hint_nop7 hint_nop8 hint_nop9 hint_nop10 hint_nop11 hint_nop12 hint_nop13 hint_nop14 hint_nop15 hint_nop16 hint_nop17 hint_nop18 hint_nop19 hint_nop20 hint_nop21 hint_nop22 hint_nop23 hint_nop24 hint_nop25 hint_nop26 hint_nop27 hint_nop28 hint_nop29 hint_nop30 hint_nop31 hint_nop32 hint_nop33 hint_nop34 hint_nop35 hint_nop36 hint_nop37 hint_nop38 hint_nop39 hint_nop40 hint_nop41 hint_nop42 hint_nop43 hint_nop44 hint_nop45 hint_nop46 hint_nop47 hint_nop48 hint_nop49 hint_nop50 hint_nop51 hint_nop52 hint_nop53 hint_nop54 hint_nop55 hint_nop56 hint_nop57 hint_nop58 hint_nop59 hint_nop60 hint_nop61 hint_nop62 hint_nop63',
          built_in:
            // Instruction pointer
            'ip eip rip ' +
            // 8-bit registers
            'al ah bl bh cl ch dl dh sil dil bpl spl r8b r9b r10b r11b r12b r13b r14b r15b ' +
            // 16-bit registers
            'ax bx cx dx si di bp sp r8w r9w r10w r11w r12w r13w r14w r15w ' +
            // 32-bit registers
            'eax ebx ecx edx esi edi ebp esp eip r8d r9d r10d r11d r12d r13d r14d r15d ' +
            // 64-bit registers
            'rax rbx rcx rdx rsi rdi rbp rsp r8 r9 r10 r11 r12 r13 r14 r15 ' +
            // Segment registers
            'cs ds es fs gs ss ' +
            // Floating point stack registers
            'st st0 st1 st2 st3 st4 st5 st6 st7 ' +
            // MMX Registers
            'mm0 mm1 mm2 mm3 mm4 mm5 mm6 mm7 ' +
            // SSE registers
            'xmm0  xmm1  xmm2  xmm3  xmm4  xmm5  xmm6  xmm7  xmm8  xmm9 xmm10  xmm11 xmm12 xmm13 xmm14 xmm15 ' +
            'xmm16 xmm17 xmm18 xmm19 xmm20 xmm21 xmm22 xmm23 xmm24 xmm25 xmm26 xmm27 xmm28 xmm29 xmm30 xmm31 ' +
            // AVX registers
            'ymm0  ymm1  ymm2  ymm3  ymm4  ymm5  ymm6  ymm7  ymm8  ymm9 ymm10  ymm11 ymm12 ymm13 ymm14 ymm15 ' +
            'ymm16 ymm17 ymm18 ymm19 ymm20 ymm21 ymm22 ymm23 ymm24 ymm25 ymm26 ymm27 ymm28 ymm29 ymm30 ymm31 ' +
            // AVX-512F registers
            'zmm0  zmm1  zmm2  zmm3  zmm4  zmm5  zmm6  zmm7  zmm8  zmm9 zmm10  zmm11 zmm12 zmm13 zmm14 zmm15 ' +
            'zmm16 zmm17 zmm18 zmm19 zmm20 zmm21 zmm22 zmm23 zmm24 zmm25 zmm26 zmm27 zmm28 zmm29 zmm30 zmm31 ' +
            // AVX-512F mask registers
            'k0 k1 k2 k3 k4 k5 k6 k7 ' +
            // Bound (MPX) register
            'bnd0 bnd1 bnd2 bnd3 ' +
            // Special register
            'cr0 cr1 cr2 cr3 cr4 cr8 dr0 dr1 dr2 dr3 dr8 tr3 tr4 tr5 tr6 tr7 ' +
            // NASM altreg package
            'r0 r1 r2 r3 r4 r5 r6 r7 r0b r1b r2b r3b r4b r5b r6b r7b ' +
            'r0w r1w r2w r3w r4w r5w r6w r7w r0d r1d r2d r3d r4d r5d r6d r7d ' +
            'r0h r1h r2h r3h ' +
            'r0l r1l r2l r3l r4l r5l r6l r7l r8l r9l r10l r11l r12l r13l r14l r15l ' +
    
            'db dw dd dq dt ddq do dy dz ' +
            'resb resw resd resq rest resdq reso resy resz ' +
            'incbin equ times ' +
            'byte word dword qword nosplit rel abs seg wrt strict near far a32 ptr',
    
          meta:
            '%define %xdefine %+ %undef %defstr %deftok %assign %strcat %strlen %substr %rotate %elif %else %endif ' +
            '%if %ifmacro %ifctx %ifidn %ifidni %ifid %ifnum %ifstr %iftoken %ifempty %ifenv %error %warning %fatal %rep ' +
            '%endrep %include %push %pop %repl %pathsearch %depend %use %arg %stacksize %local %line %comment %endcomment ' +
            '.nolist ' +
            '__FILE__ __LINE__ __SECT__  __BITS__ __OUTPUT_FORMAT__ __DATE__ __TIME__ __DATE_NUM__ __TIME_NUM__ ' +
            '__UTC_DATE__ __UTC_TIME__ __UTC_DATE_NUM__ __UTC_TIME_NUM__  __PASS__ struc endstruc istruc at iend ' +
            'align alignb sectalign daz nodaz up down zero default option assume public ' +
    
            'bits use16 use32 use64 default section segment absolute extern global common cpu float ' +
            '__utf16__ __utf16le__ __utf16be__ __utf32__ __utf32le__ __utf32be__ ' +
            '__float8__ __float16__ __float32__ __float64__ __float80m__ __float80e__ __float128l__ __float128h__ ' +
            '__Infinity__ __QNaN__ __SNaN__ Inf NaN QNaN SNaN float8 float16 float32 float64 float80m float80e ' +
            'float128l float128h __FLOAT_DAZ__ __FLOAT_ROUND__ __FLOAT__'
        },
        contains: [
          hljs.COMMENT(
            ';',
            '$',
            {
              relevance: 0
            }
          ),
          {
            className: 'number',
            variants: [
              // Float number and x87 BCD
              {
                begin: '\\b(?:([0-9][0-9_]*)?\\.[0-9_]*(?:[eE][+-]?[0-9_]+)?|' +
                       '(0[Xx])?[0-9][0-9_]*\\.?[0-9_]*(?:[pP](?:[+-]?[0-9_]+)?)?)\\b',
                relevance: 0
              },
    
              // Hex number in $
              { begin: '\\$[0-9][0-9A-Fa-f]*', relevance: 0 },
    
              // Number in H,D,T,Q,O,B,Y suffix
              { begin: '\\b(?:[0-9A-Fa-f][0-9A-Fa-f_]*[Hh]|[0-9][0-9_]*[DdTt]?|[0-7][0-7_]*[QqOo]|[0-1][0-1_]*[BbYy])\\b' },
    
              // Number in X,D,T,Q,O,B,Y prefix
              { begin: '\\b(?:0[Xx][0-9A-Fa-f_]+|0[DdTt][0-9_]+|0[QqOo][0-7_]+|0[BbYy][0-1_]+)\\b'}
            ]
          },
          // Double quote string
          hljs.QUOTE_STRING_MODE,
          {
            className: 'string',
            variants: [
              // Single-quoted string
              { begin: '\'', end: '[^\\\\]\'' },
              // Backquoted string
              { begin: '`', end: '[^\\\\]`' }
            ],
            relevance: 0
          },
          {
            className: 'symbol',
            variants: [
              // Global label and local label
              { begin: '^\\s*[A-Za-z._?][A-Za-z0-9_$#@~.?]*(:|\\s+label)' },
              // Macro-local label
              { begin: '^\\s*%%[A-Za-z0-9_$#@~.?]*:' }
            ],
            relevance: 0
          },
          // Macro parameter
          {
            className: 'subst',
            begin: '%[0-9]+',
            relevance: 0
          },
          // Macro parameter
          {
            className: 'subst',
            begin: '%!\S+',
            relevance: 0
          },
          {
            className: 'meta',
            begin: /^\s*\.[\w_-]+/
          }
        ]
      };
    };
    
    /***/ }),
    /* 575 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var BUILTIN_MODULES =
        'ObjectLoader Animate MovieCredits Slides Filters Shading Materials LensFlare Mapping VLCAudioVideo ' +
        'StereoDecoder PointCloud NetworkAccess RemoteControl RegExp ChromaKey Snowfall NodeJS Speech Charts';
    
      var XL_KEYWORDS = {
        keyword:
          'if then else do while until for loop import with is as where when by data constant ' +
          'integer real text name boolean symbol infix prefix postfix block tree',
        literal:
          'true false nil',
        built_in:
          'in mod rem and or xor not abs sign floor ceil sqrt sin cos tan asin ' +
          'acos atan exp expm1 log log2 log10 log1p pi at text_length text_range ' +
          'text_find text_replace contains page slide basic_slide title_slide ' +
          'title subtitle fade_in fade_out fade_at clear_color color line_color ' +
          'line_width texture_wrap texture_transform texture scale_?x scale_?y ' +
          'scale_?z? translate_?x translate_?y translate_?z? rotate_?x rotate_?y ' +
          'rotate_?z? rectangle circle ellipse sphere path line_to move_to ' +
          'quad_to curve_to theme background contents locally time mouse_?x ' +
          'mouse_?y mouse_buttons ' +
          BUILTIN_MODULES
      };
    
      var DOUBLE_QUOTE_TEXT = {
        className: 'string',
        begin: '"', end: '"', illegal: '\\n'
      };
      var SINGLE_QUOTE_TEXT = {
        className: 'string',
        begin: '\'', end: '\'', illegal: '\\n'
      };
      var LONG_TEXT = {
        className: 'string',
        begin: '<<', end: '>>'
      };
      var BASED_NUMBER = {
        className: 'number',
        begin: '[0-9]+#[0-9A-Z_]+(\\.[0-9-A-Z_]+)?#?([Ee][+-]?[0-9]+)?'
      };
      var IMPORT = {
        beginKeywords: 'import', end: '$',
        keywords: XL_KEYWORDS,
        contains: [DOUBLE_QUOTE_TEXT]
      };
      var FUNCTION_DEFINITION = {
        className: 'function',
        begin: /[a-z][^\n]*->/, returnBegin: true, end: /->/,
        contains: [
          hljs.inherit(hljs.TITLE_MODE, {starts: {
            endsWithParent: true,
            keywords: XL_KEYWORDS
          }})
        ]
      };
      return {
        aliases: ['tao'],
        lexemes: /[a-zA-Z][a-zA-Z0-9_?]*/,
        keywords: XL_KEYWORDS,
        contains: [
        hljs.C_LINE_COMMENT_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        DOUBLE_QUOTE_TEXT,
        SINGLE_QUOTE_TEXT,
        LONG_TEXT,
        FUNCTION_DEFINITION,
        IMPORT,
        BASED_NUMBER,
        hljs.NUMBER_MODE
        ]
      };
    };
    
    /***/ }),
    /* 576 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var KEYWORDS = 'for let if while then else return where group by xquery encoding version' +
        'module namespace boundary-space preserve strip default collation base-uri ordering' +
        'copy-namespaces order declare import schema namespace function option in allowing empty' +
        'at tumbling window sliding window start when only end when previous next stable ascending' +
        'descending empty greatest least some every satisfies switch case typeswitch try catch and' +
        'or to union intersect instance of treat as castable cast map array delete insert into' +
        'replace value rename copy modify update';
      var LITERAL = 'false true xs:string xs:integer element item xs:date xs:datetime xs:float xs:double xs:decimal QName xs:anyURI xs:long xs:int xs:short xs:byte attribute';
      var VAR = {
        begin: /\$[a-zA-Z0-9\-]+/
      };
    
      var NUMBER = {
        className: 'number',
        begin: '(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b',
        relevance: 0
      };
    
      var STRING = {
        className: 'string',
        variants: [
          {begin: /"/, end: /"/, contains: [{begin: /""/, relevance: 0}]},
          {begin: /'/, end: /'/, contains: [{begin: /''/, relevance: 0}]}
        ]
      };
    
      var ANNOTATION = {
        className: 'meta',
        begin: '%\\w+'
      };
    
      var COMMENT = {
        className: 'comment',
        begin: '\\(:', end: ':\\)',
        relevance: 10,
        contains: [
          {
            className: 'doctag', begin: '@\\w+'
          }
        ]
      };
    
      var METHOD = {
        begin: '{', end: '}'
      };
    
      var CONTAINS = [
        VAR,
        STRING,
        NUMBER,
        COMMENT,
        ANNOTATION,
        METHOD
      ];
      METHOD.contains = CONTAINS;
    
    
      return {
        aliases: ['xpath', 'xq'],
        case_insensitive: false,
        lexemes: /[a-zA-Z\$][a-zA-Z0-9_:\-]*/,
        illegal: /(proc)|(abstract)|(extends)|(until)|(#)/,
        keywords: {
          keyword: KEYWORDS,
          literal: LITERAL
        },
        contains: CONTAINS
      };
    };
    
    /***/ }),
    /* 577 */
    /***/ (function(module, exports) {
    
    module.exports = function(hljs) {
      var STRING = {
        className: 'string',
        contains: [hljs.BACKSLASH_ESCAPE],
        variants: [
          {
            begin: 'b"', end: '"'
          },
          {
            begin: 'b\'', end: '\''
          },
          hljs.inherit(hljs.APOS_STRING_MODE, {illegal: null}),
          hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null})
        ]
      };
      var NUMBER = {variants: [hljs.BINARY_NUMBER_MODE, hljs.C_NUMBER_MODE]};
      return {
        aliases: ['zep'],
        case_insensitive: true,
        keywords:
          'and include_once list abstract global private echo interface as static endswitch ' +
          'array null if endwhile or const for endforeach self var let while isset public ' +
          'protected exit foreach throw elseif include __FILE__ empty require_once do xor ' +
          'return parent clone use __CLASS__ __LINE__ else break print eval new ' +
          'catch __METHOD__ case exception default die require __FUNCTION__ ' +
          'enddeclare final try switch continue endfor endif declare unset true false ' +
          'trait goto instanceof insteadof __DIR__ __NAMESPACE__ ' +
          'yield finally int uint long ulong char uchar double float bool boolean string' +
          'likely unlikely',
        contains: [
          hljs.C_LINE_COMMENT_MODE,
          hljs.HASH_COMMENT_MODE,
          hljs.COMMENT(
            '/\\*',
            '\\*/',
            {
              contains: [
                {
                  className: 'doctag',
                  begin: '@[A-Za-z]+'
                }
              ]
            }
          ),
          hljs.COMMENT(
            '__halt_compiler.+?;',
            false,
            {
              endsWithParent: true,
              keywords: '__halt_compiler',
              lexemes: hljs.UNDERSCORE_IDENT_RE
            }
          ),
          {
            className: 'string',
            begin: '<<<[\'"]?\\w+[\'"]?$', end: '^\\w+;',
            contains: [hljs.BACKSLASH_ESCAPE]
          },
          {
            // swallow composed identifiers to avoid parsing them as keywords
            begin: /(::|->)+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/
          },
          {
            className: 'function',
            beginKeywords: 'function', end: /[;{]/, excludeEnd: true,
            illegal: '\\$|\\[|%',
            contains: [
              hljs.UNDERSCORE_TITLE_MODE,
              {
                className: 'params',
                begin: '\\(', end: '\\)',
                contains: [
                  'self',
                  hljs.C_BLOCK_COMMENT_MODE,
                  STRING,
                  NUMBER
                ]
              }
            ]
          },
          {
            className: 'class',
            beginKeywords: 'class interface', end: '{', excludeEnd: true,
            illegal: /[:\(\$"]/,
            contains: [
              {beginKeywords: 'extends implements'},
              hljs.UNDERSCORE_TITLE_MODE
            ]
          },
          {
            beginKeywords: 'namespace', end: ';',
            illegal: /[\.']/,
            contains: [hljs.UNDERSCORE_TITLE_MODE]
          },
          {
            beginKeywords: 'use', end: ';',
            contains: [hljs.UNDERSCORE_TITLE_MODE]
          },
          {
            begin: '=>' // No markup, just a relevance booster
          },
          STRING,
          NUMBER
        ]
      };
    };
    
    /***/ }),
    /* 578 */
    /***/ (function(module, exports) {
    
    (function (w, d) {
        'use strict';
    
        var TABLE_NAME = 'hljs-ln',
            LINE_NAME = 'hljs-ln-line',
            CODE_BLOCK_NAME = 'hljs-ln-code',
            NUMBERS_BLOCK_NAME = 'hljs-ln-numbers',
            NUMBER_LINE_NAME = 'hljs-ln-n',
            DATA_ATTR_NAME = 'data-line-number';
    
        // string format
        // https://wcoder.github.io/notes/string-format-for-string-formating-in-javascript
        var format = function (str, args) {
            return str.replace(/\{(\d+)\}/g, function(m, n){
                return args[n] ? args[n] : m;
            });
        };
    
        if (w.hljs) {
            w.hljs.initLineNumbersOnLoad = initLineNumbersOnLoad;
            w.hljs.lineNumbersBlock = lineNumbersBlock;
    
            addStyles();
        } else {
            w.console.error('highlight.js not detected!');
        }
    
        function addStyles () {
            var css = d.createElement('style');
            css.type = 'text/css';
            css.innerHTML = format(
                '.{0}{border-collapse:collapse}\
                .{0} td{padding:0}\
                .{1}:before{content:attr({2})}',
            [
                TABLE_NAME,
                NUMBER_LINE_NAME,
                DATA_ATTR_NAME
            ]);
            d.getElementsByTagName('head')[0].appendChild(css);
        }
    
        function initLineNumbersOnLoad (options) {
            if (d.readyState === 'complete') {
                documentReady(options);
            } else {
                w.addEventListener('DOMContentLoaded', function () {
                    documentReady(options);
                });
            }
        }
    
        function documentReady (options) {
            try {
                var blocks = d.querySelectorAll('code.hljs');
    
                for (var i in blocks) {
                    if (blocks.hasOwnProperty(i)) {
                        lineNumbersBlock(blocks[i], options);
                    }
                }
            } catch (e) {
                w.console.error('LineNumbers error: ', e);
            }
        }
    
        function lineNumbersBlock (element, options) {
            if (typeof element !== 'object') return;
    
            // define options or set default
            options = options || {
                singleLine: false
            };
    
            // convert options
            var firstLineIndex = !!options.singleLine ? 0 : 1;
    
            var lines = getLines(element.innerHTML);
    
            if (lines.length > firstLineIndex) {
                var html = '';
    
                for (var i = 0, l = lines.length; i < l; i++) {
                    html += format(
                        '<tr><td class="{0}"><div class="{1} {2}" {3}="{5}"></div></td><td class="{4}"><div class="{1}">{6}</div></td></tr>',
                    [
                        NUMBERS_BLOCK_NAME,
                        LINE_NAME,
                        NUMBER_LINE_NAME,
                        DATA_ATTR_NAME,
                        CODE_BLOCK_NAME,
                        i + 1,
                        lines[i].length > 0 ? lines[i] : ' '
                    ]);
                }
    
                element.innerHTML = format('<table class="{0}">{1}</table>', [ TABLE_NAME, html ]);
            }
        }
    
        function getLines(text) {
            if (text.length === 0) return [];
            return text.split(/\r\n|\r|\n/g);
        }
    
    }(window, document));
    
    /***/ }),
    /* 579 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _perfectScrollbar = __webpack_require__(108);
    
    var _perfectScrollbar2 = _interopRequireDefault(_perfectScrollbar);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var InitPS = function () {
        function InitPS() {
            _classCallCheck(this, InitPS);
    
            this.$perfectScrollbar = $('.ps-init');
            this.init();
        }
    
        _createClass(InitPS, [{
            key: 'init',
            value: function init() {
                if (this.$perfectScrollbar.length) {
                    this.initPerfectScrollbar();
                }
            }
        }, {
            key: 'initPerfectScrollbar',
            value: function initPerfectScrollbar() {
                var scrollContainer = this.$perfectScrollbar;
    
                if (scrollContainer.length !== 0) {
                    this.$perfectScrollbar.each(function () {
                        var $containerScroll = $(this),
                            height = $containerScroll.outerHeight(),
                            maxHeight = Number($containerScroll.css('max-height').slice(0, -2));
    
                        if (height >= maxHeight) {
                            _perfectScrollbar2.default.initialize($containerScroll.get(0));
                        }
                    });
                }
                return this;
            }
        }]);
    
        return InitPS;
    }();
    
    exports.default = new InitPS();
    
    /***/ }),
    /* 580 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.PageResize = undefined;
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _helpers = __webpack_require__(3);
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var PageResize = exports.PageResize = function () {
        function PageResize() {
            _classCallCheck(this, PageResize);
        }
    
        _createClass(PageResize, [{
            key: 'getResp',
            value: function getResp() {
                if (_helpers.Resp.isDesk) {
                    this.resp = 'desk';
                } else if (_helpers.Resp.isTablet) {
                    this.resp = 'tablet';
                } else if (_helpers.Resp.isMobile) {
                    this.resp = 'mobile';
                }
            }
        }, {
            key: 'init',
            value: function init() {
                var _this = this;
    
                this.getResp();
    
                //refresh page
                var refreshPage = (0, _helpers.throttle)(function () {
                    setTimeout(function () {
                        //check current Resp
                        if (_helpers.Resp.isDesk) {
                            _this.currentResp = 'desk';
                        } else if (_helpers.Resp.isTablet) {
                            _this.currentResp = 'tablet';
                        } else if (_helpers.Resp.isMobile) {
                            _this.currentResp = 'mobile';
                        }
    
                        //compare Resp
                        if (_this.resp !== _this.currentResp) {
                            _this.resp = _this.currentResp;
                            location.reload();
                        }
                    }, 250);
                }, 250, this);
    
                //refresh page on resize
                _helpers.$window.on('resize', refreshPage);
            }
        }]);
    
        return PageResize;
    }();
    
    exports.default = new PageResize();
    
    /***/ }),
    /* 581 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var require;var require;/*!
     * Select2 4.0.3
     * https://select2.github.io
     *
     * Released under the MIT license
     * https://github.com/select2/select2/blob/master/LICENSE.md
     */
    (function (factory) {
      if (true) {
        // AMD. Register as an anonymous module.
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(110)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
                    __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
                    (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
                    __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
      } else if (typeof exports === 'object') {
        // Node/CommonJS
        factory(require('jquery'));
      } else {
        // Browser globals
        factory(jQuery);
      }
    }(function (jQuery) {
      // This is needed so we can catch the AMD loader configuration and use it
      // The inner file should be wrapped (by `banner.start.js`) in a function that
      // returns the AMD loader references.
      var S2 =
    (function () {
      // Restore the Select2 AMD loader so it can be used
      // Needed mostly in the language files, where the loader is not inserted
      if (jQuery && jQuery.fn && jQuery.fn.select2 && jQuery.fn.select2.amd) {
        var S2 = jQuery.fn.select2.amd;
      }
    var S2;(function () { if (!S2 || !S2.requirejs) {
    if (!S2) { S2 = {}; } else { require = S2; }
    /**
     * @license almond 0.3.1 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.
     * Available via the MIT or new BSD license.
     * see: http://github.com/jrburke/almond for details
     */
    //Going sloppy to avoid 'use strict' string cost, but strict practices should
    //be followed.
    /*jslint sloppy: true */
    /*global setTimeout: false */
    
    var requirejs, require, define;
    (function (undef) {
        var main, req, makeMap, handlers,
            defined = {},
            waiting = {},
            config = {},
            defining = {},
            hasOwn = Object.prototype.hasOwnProperty,
            aps = [].slice,
            jsSuffixRegExp = /\.js$/;
    
        function hasProp(obj, prop) {
            return hasOwn.call(obj, prop);
        }
    
        /**
         * Given a relative module name, like ./something, normalize it to
         * a real name that can be mapped to a path.
         * @param {String} name the relative name
         * @param {String} baseName a real name that the name arg is relative
         * to.
         * @returns {String} normalized name
         */
        function normalize(name, baseName) {
            var nameParts, nameSegment, mapValue, foundMap, lastIndex,
                foundI, foundStarMap, starI, i, j, part,
                baseParts = baseName && baseName.split("/"),
                map = config.map,
                starMap = (map && map['*']) || {};
    
            //Adjust any relative paths.
            if (name && name.charAt(0) === ".") {
                //If have a base name, try to normalize against it,
                //otherwise, assume it is a top-level require that will
                //be relative to baseUrl in the end.
                if (baseName) {
                    name = name.split('/');
                    lastIndex = name.length - 1;
    
                    // Node .js allowance:
                    if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                        name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
                    }
    
                    //Lop off the last part of baseParts, so that . matches the
                    //"directory" and not name of the baseName's module. For instance,
                    //baseName of "one/two/three", maps to "one/two/three.js", but we
                    //want the directory, "one/two" for this normalization.
                    name = baseParts.slice(0, baseParts.length - 1).concat(name);
    
                    //start trimDots
                    for (i = 0; i < name.length; i += 1) {
                        part = name[i];
                        if (part === ".") {
                            name.splice(i, 1);
                            i -= 1;
                        } else if (part === "..") {
                            if (i === 1 && (name[2] === '..' || name[0] === '..')) {
                                //End of the line. Keep at least one non-dot
                                //path segment at the front so it can be mapped
                                //correctly to disk. Otherwise, there is likely
                                //no path mapping for a path starting with '..'.
                                //This can still fail, but catches the most reasonable
                                //uses of ..
                                break;
                            } else if (i > 0) {
                                name.splice(i - 1, 2);
                                i -= 2;
                            }
                        }
                    }
                    //end trimDots
    
                    name = name.join("/");
                } else if (name.indexOf('./') === 0) {
                    // No baseName, so this is ID is resolved relative
                    // to baseUrl, pull off the leading dot.
                    name = name.substring(2);
                }
            }
    
            //Apply map config if available.
            if ((baseParts || starMap) && map) {
                nameParts = name.split('/');
    
                for (i = nameParts.length; i > 0; i -= 1) {
                    nameSegment = nameParts.slice(0, i).join("/");
    
                    if (baseParts) {
                        //Find the longest baseName segment match in the config.
                        //So, do joins on the biggest to smallest lengths of baseParts.
                        for (j = baseParts.length; j > 0; j -= 1) {
                            mapValue = map[baseParts.slice(0, j).join('/')];
    
                            //baseName segment has  config, find if it has one for
                            //this name.
                            if (mapValue) {
                                mapValue = mapValue[nameSegment];
                                if (mapValue) {
                                    //Match, update name to the new value.
                                    foundMap = mapValue;
                                    foundI = i;
                                    break;
                                }
                            }
                        }
                    }
    
                    if (foundMap) {
                        break;
                    }
    
                    //Check for a star map match, but just hold on to it,
                    //if there is a shorter segment match later in a matching
                    //config, then favor over this star map.
                    if (!foundStarMap && starMap && starMap[nameSegment]) {
                        foundStarMap = starMap[nameSegment];
                        starI = i;
                    }
                }
    
                if (!foundMap && foundStarMap) {
                    foundMap = foundStarMap;
                    foundI = starI;
                }
    
                if (foundMap) {
                    nameParts.splice(0, foundI, foundMap);
                    name = nameParts.join('/');
                }
            }
    
            return name;
        }
    
        function makeRequire(relName, forceSync) {
            return function () {
                //A version of a require function that passes a moduleName
                //value for items that may need to
                //look up paths relative to the moduleName
                var args = aps.call(arguments, 0);
    
                //If first arg is not require('string'), and there is only
                //one arg, it is the array form without a callback. Insert
                //a null so that the following concat is correct.
                if (typeof args[0] !== 'string' && args.length === 1) {
                    args.push(null);
                }
                return req.apply(undef, args.concat([relName, forceSync]));
            };
        }
    
        function makeNormalize(relName) {
            return function (name) {
                return normalize(name, relName);
            };
        }
    
        function makeLoad(depName) {
            return function (value) {
                defined[depName] = value;
            };
        }
    
        function callDep(name) {
            if (hasProp(waiting, name)) {
                var args = waiting[name];
                delete waiting[name];
                defining[name] = true;
                main.apply(undef, args);
            }
    
            if (!hasProp(defined, name) && !hasProp(defining, name)) {
                throw new Error('No ' + name);
            }
            return defined[name];
        }
    
        //Turns a plugin!resource to [plugin, resource]
        //with the plugin being undefined if the name
        //did not have a plugin prefix.
        function splitPrefix(name) {
            var prefix,
                index = name ? name.indexOf('!') : -1;
            if (index > -1) {
                prefix = name.substring(0, index);
                name = name.substring(index + 1, name.length);
            }
            return [prefix, name];
        }
    
        /**
         * Makes a name map, normalizing the name, and using a plugin
         * for normalization if necessary. Grabs a ref to plugin
         * too, as an optimization.
         */
        makeMap = function (name, relName) {
            var plugin,
                parts = splitPrefix(name),
                prefix = parts[0];
    
            name = parts[1];
    
            if (prefix) {
                prefix = normalize(prefix, relName);
                plugin = callDep(prefix);
            }
    
            //Normalize according
            if (prefix) {
                if (plugin && plugin.normalize) {
                    name = plugin.normalize(name, makeNormalize(relName));
                } else {
                    name = normalize(name, relName);
                }
            } else {
                name = normalize(name, relName);
                parts = splitPrefix(name);
                prefix = parts[0];
                name = parts[1];
                if (prefix) {
                    plugin = callDep(prefix);
                }
            }
    
            //Using ridiculous property names for space reasons
            return {
                f: prefix ? prefix + '!' + name : name, //fullName
                n: name,
                pr: prefix,
                p: plugin
            };
        };
    
        function makeConfig(name) {
            return function () {
                return (config && config.config && config.config[name]) || {};
            };
        }
    
        handlers = {
            require: function (name) {
                return makeRequire(name);
            },
            exports: function (name) {
                var e = defined[name];
                if (typeof e !== 'undefined') {
                    return e;
                } else {
                    return (defined[name] = {});
                }
            },
            module: function (name) {
                return {
                    id: name,
                    uri: '',
                    exports: defined[name],
                    config: makeConfig(name)
                };
            }
        };
    
        main = function (name, deps, callback, relName) {
            var cjsModule, depName, ret, map, i,
                args = [],
                callbackType = typeof callback,
                usingExports;
    
            //Use name if no relName
            relName = relName || name;
    
            //Call the callback to define the module, if necessary.
            if (callbackType === 'undefined' || callbackType === 'function') {
                //Pull out the defined dependencies and pass the ordered
                //values to the callback.
                //Default to [require, exports, module] if no deps
                deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
                for (i = 0; i < deps.length; i += 1) {
                    map = makeMap(deps[i], relName);
                    depName = map.f;
    
                    //Fast path CommonJS standard dependencies.
                    if (depName === "require") {
                        args[i] = handlers.require(name);
                    } else if (depName === "exports") {
                        //CommonJS module spec 1.1
                        args[i] = handlers.exports(name);
                        usingExports = true;
                    } else if (depName === "module") {
                        //CommonJS module spec 1.1
                        cjsModule = args[i] = handlers.module(name);
                    } else if (hasProp(defined, depName) ||
                               hasProp(waiting, depName) ||
                               hasProp(defining, depName)) {
                        args[i] = callDep(depName);
                    } else if (map.p) {
                        map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                        args[i] = defined[depName];
                    } else {
                        throw new Error(name + ' missing ' + depName);
                    }
                }
    
                ret = callback ? callback.apply(defined[name], args) : undefined;
    
                if (name) {
                    //If setting exports via "module" is in play,
                    //favor that over return value and exports. After that,
                    //favor a non-undefined return value over exports use.
                    if (cjsModule && cjsModule.exports !== undef &&
                            cjsModule.exports !== defined[name]) {
                        defined[name] = cjsModule.exports;
                    } else if (ret !== undef || !usingExports) {
                        //Use the return value from the function.
                        defined[name] = ret;
                    }
                }
            } else if (name) {
                //May just be an object definition for the module. Only
                //worry about defining if have a module name.
                defined[name] = callback;
            }
        };
    
        requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
            if (typeof deps === "string") {
                if (handlers[deps]) {
                    //callback in this case is really relName
                    return handlers[deps](callback);
                }
                //Just return the module wanted. In this scenario, the
                //deps arg is the module name, and second arg (if passed)
                //is just the relName.
                //Normalize module name, if it contains . or ..
                return callDep(makeMap(deps, callback).f);
            } else if (!deps.splice) {
                //deps is a config object, not an array.
                config = deps;
                if (config.deps) {
                    req(config.deps, config.callback);
                }
                if (!callback) {
                    return;
                }
    
                if (callback.splice) {
                    //callback is an array, which means it is a dependency list.
                    //Adjust args if there are dependencies
                    deps = callback;
                    callback = relName;
                    relName = null;
                } else {
                    deps = undef;
                }
            }
    
            //Support require(['a'])
            callback = callback || function () {};
    
            //If relName is a function, it is an errback handler,
            //so remove it.
            if (typeof relName === 'function') {
                relName = forceSync;
                forceSync = alt;
            }
    
            //Simulate async callback;
            if (forceSync) {
                main(undef, deps, callback, relName);
            } else {
                //Using a non-zero value because of concern for what old browsers
                //do, and latest browsers "upgrade" to 4 if lower value is used:
                //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
                //If want a value immediately, use require('id') instead -- something
                //that works in almond on the global level, but not guaranteed and
                //unlikely to work in other AMD implementations.
                setTimeout(function () {
                    main(undef, deps, callback, relName);
                }, 4);
            }
    
            return req;
        };
    
        /**
         * Just drops the config on the floor, but returns req in case
         * the config return value is used.
         */
        req.config = function (cfg) {
            return req(cfg);
        };
    
        /**
         * Expose module registry for debugging and tooling
         */
        requirejs._defined = defined;
    
        define = function (name, deps, callback) {
            if (typeof name !== 'string') {
                throw new Error('See almond README: incorrect module build, no module name');
            }
    
            //This module may not have dependencies
            if (!deps.splice) {
                //deps is not an array, so probably means
                //an object literal or factory function for
                //the value. Adjust args.
                callback = deps;
                deps = [];
            }
    
            if (!hasProp(defined, name) && !hasProp(waiting, name)) {
                waiting[name] = [name, deps, callback];
            }
        };
    
        define.amd = {
            jQuery: true
        };
    }());
    
    S2.requirejs = requirejs;S2.require = require;S2.define = define;
    }
    }());
    S2.define("almond", function(){});
    
    /* global jQuery:false, $:false */
    S2.define('jquery',[],function () {
      var _$ = jQuery || $;
    
      if (_$ == null && console && console.error) {
        console.error(
          'Select2: An instance of jQuery or a jQuery-compatible library was not ' +
          'found. Make sure that you are including jQuery before Select2 on your ' +
          'web page.'
        );
      }
    
      return _$;
    });
    
    S2.define('select2/utils',[
      'jquery'
    ], function ($) {
      var Utils = {};
    
      Utils.Extend = function (ChildClass, SuperClass) {
        var __hasProp = {}.hasOwnProperty;
    
        function BaseConstructor () {
          this.constructor = ChildClass;
        }
    
        for (var key in SuperClass) {
          if (__hasProp.call(SuperClass, key)) {
            ChildClass[key] = SuperClass[key];
          }
        }
    
        BaseConstructor.prototype = SuperClass.prototype;
        ChildClass.prototype = new BaseConstructor();
        ChildClass.__super__ = SuperClass.prototype;
    
        return ChildClass;
      };
    
      function getMethods (theClass) {
        var proto = theClass.prototype;
    
        var methods = [];
    
        for (var methodName in proto) {
          var m = proto[methodName];
    
          if (typeof m !== 'function') {
            continue;
          }
    
          if (methodName === 'constructor') {
            continue;
          }
    
          methods.push(methodName);
        }
    
        return methods;
      }
    
      Utils.Decorate = function (SuperClass, DecoratorClass) {
        var decoratedMethods = getMethods(DecoratorClass);
        var superMethods = getMethods(SuperClass);
    
        function DecoratedClass () {
          var unshift = Array.prototype.unshift;
    
          var argCount = DecoratorClass.prototype.constructor.length;
    
          var calledConstructor = SuperClass.prototype.constructor;
    
          if (argCount > 0) {
            unshift.call(arguments, SuperClass.prototype.constructor);
    
            calledConstructor = DecoratorClass.prototype.constructor;
          }
    
          calledConstructor.apply(this, arguments);
        }
    
        DecoratorClass.displayName = SuperClass.displayName;
    
        function ctr () {
          this.constructor = DecoratedClass;
        }
    
        DecoratedClass.prototype = new ctr();
    
        for (var m = 0; m < superMethods.length; m++) {
            var superMethod = superMethods[m];
    
            DecoratedClass.prototype[superMethod] =
              SuperClass.prototype[superMethod];
        }
    
        var calledMethod = function (methodName) {
          // Stub out the original method if it's not decorating an actual method
          var originalMethod = function () {};
    
          if (methodName in DecoratedClass.prototype) {
            originalMethod = DecoratedClass.prototype[methodName];
          }
    
          var decoratedMethod = DecoratorClass.prototype[methodName];
    
          return function () {
            var unshift = Array.prototype.unshift;
    
            unshift.call(arguments, originalMethod);
    
            return decoratedMethod.apply(this, arguments);
          };
        };
    
        for (var d = 0; d < decoratedMethods.length; d++) {
          var decoratedMethod = decoratedMethods[d];
    
          DecoratedClass.prototype[decoratedMethod] = calledMethod(decoratedMethod);
        }
    
        return DecoratedClass;
      };
    
      var Observable = function () {
        this.listeners = {};
      };
    
      Observable.prototype.on = function (event, callback) {
        this.listeners = this.listeners || {};
    
        if (event in this.listeners) {
          this.listeners[event].push(callback);
        } else {
          this.listeners[event] = [callback];
        }
      };
    
      Observable.prototype.trigger = function (event) {
        var slice = Array.prototype.slice;
        var params = slice.call(arguments, 1);
    
        this.listeners = this.listeners || {};
    
        // Params should always come in as an array
        if (params == null) {
          params = [];
        }
    
        // If there are no arguments to the event, use a temporary object
        if (params.length === 0) {
          params.push({});
        }
    
        // Set the `_type` of the first object to the event
        params[0]._type = event;
    
        if (event in this.listeners) {
          this.invoke(this.listeners[event], slice.call(arguments, 1));
        }
    
        if ('*' in this.listeners) {
          this.invoke(this.listeners['*'], arguments);
        }
      };
    
      Observable.prototype.invoke = function (listeners, params) {
        for (var i = 0, len = listeners.length; i < len; i++) {
          listeners[i].apply(this, params);
        }
      };
    
      Utils.Observable = Observable;
    
      Utils.generateChars = function (length) {
        var chars = '';
    
        for (var i = 0; i < length; i++) {
          var randomChar = Math.floor(Math.random() * 36);
          chars += randomChar.toString(36);
        }
    
        return chars;
      };
    
      Utils.bind = function (func, context) {
        return function () {
          func.apply(context, arguments);
        };
      };
    
      Utils._convertData = function (data) {
        for (var originalKey in data) {
          var keys = originalKey.split('-');
    
          var dataLevel = data;
    
          if (keys.length === 1) {
            continue;
          }
    
          for (var k = 0; k < keys.length; k++) {
            var key = keys[k];
    
            // Lowercase the first letter
            // By default, dash-separated becomes camelCase
            key = key.substring(0, 1).toLowerCase() + key.substring(1);
    
            if (!(key in dataLevel)) {
              dataLevel[key] = {};
            }
    
            if (k == keys.length - 1) {
              dataLevel[key] = data[originalKey];
            }
    
            dataLevel = dataLevel[key];
          }
    
          delete data[originalKey];
        }
    
        return data;
      };
    
      Utils.hasScroll = function (index, el) {
        // Adapted from the function created by @ShadowScripter
        // and adapted by @BillBarry on the Stack Exchange Code Review website.
        // The original code can be found at
        // http://codereview.stackexchange.com/q/13338
        // and was designed to be used with the Sizzle selector engine.
    
        var $el = $(el);
        var overflowX = el.style.overflowX;
        var overflowY = el.style.overflowY;
    
        //Check both x and y declarations
        if (overflowX === overflowY &&
            (overflowY === 'hidden' || overflowY === 'visible')) {
          return false;
        }
    
        if (overflowX === 'scroll' || overflowY === 'scroll') {
          return true;
        }
    
        return ($el.innerHeight() < el.scrollHeight ||
          $el.innerWidth() < el.scrollWidth);
      };
    
      Utils.escapeMarkup = function (markup) {
        var replaceMap = {
          '\\': '&#92;',
          '&': '&amp;',
          '<': '&lt;',
          '>': '&gt;',
          '"': '&quot;',
          '\'': '&#39;',
          '/': '&#47;'
        };
    
        // Do not try to escape the markup if it's not a string
        if (typeof markup !== 'string') {
          return markup;
        }
    
        return String(markup).replace(/[&<>"'\/\\]/g, function (match) {
          return replaceMap[match];
        });
      };
    
      // Append an array of jQuery nodes to a given element.
      Utils.appendMany = function ($element, $nodes) {
        // jQuery 1.7.x does not support $.fn.append() with an array
        // Fall back to a jQuery object collection using $.fn.add()
        if ($.fn.jquery.substr(0, 3) === '1.7') {
          var $jqNodes = $();
    
          $.map($nodes, function (node) {
            $jqNodes = $jqNodes.add(node);
          });
    
          $nodes = $jqNodes;
        }
    
        $element.append($nodes);
      };
    
      return Utils;
    });
    
    S2.define('select2/results',[
      'jquery',
      './utils'
    ], function ($, Utils) {
      function Results ($element, options, dataAdapter) {
        this.$element = $element;
        this.data = dataAdapter;
        this.options = options;
    
        Results.__super__.constructor.call(this);
      }
    
      Utils.Extend(Results, Utils.Observable);
    
      Results.prototype.render = function () {
        var $results = $(
          '<ul class="select2-results__options" role="tree"></ul>'
        );
    
        if (this.options.get('multiple')) {
          $results.attr('aria-multiselectable', 'true');
        }
    
        this.$results = $results;
    
        return $results;
      };
    
      Results.prototype.clear = function () {
        this.$results.empty();
      };
    
      Results.prototype.displayMessage = function (params) {
        var escapeMarkup = this.options.get('escapeMarkup');
    
        this.clear();
        this.hideLoading();
    
        var $message = $(
          '<li role="treeitem" aria-live="assertive"' +
          ' class="select2-results__option"></li>'
        );
    
        var message = this.options.get('translations').get(params.message);
    
        $message.append(
          escapeMarkup(
            message(params.args)
          )
        );
    
        $message[0].className += ' select2-results__message';
    
        this.$results.append($message);
      };
    
      Results.prototype.hideMessages = function () {
        this.$results.find('.select2-results__message').remove();
      };
    
      Results.prototype.append = function (data) {
        this.hideLoading();
    
        var $options = [];
    
        if (data.results == null || data.results.length === 0) {
          if (this.$results.children().length === 0) {
            this.trigger('results:message', {
              message: 'noResults'
            });
          }
    
          return;
        }
    
        data.results = this.sort(data.results);
    
        for (var d = 0; d < data.results.length; d++) {
          var item = data.results[d];
    
          var $option = this.option(item);
    
          $options.push($option);
        }
    
        this.$results.append($options);
      };
    
      Results.prototype.position = function ($results, $dropdown) {
        var $resultsContainer = $dropdown.find('.select2-results');
        $resultsContainer.append($results);
      };
    
      Results.prototype.sort = function (data) {
        var sorter = this.options.get('sorter');
    
        return sorter(data);
      };
    
      Results.prototype.highlightFirstItem = function () {
        var $options = this.$results
          .find('.select2-results__option[aria-selected]');
    
        var $selected = $options.filter('[aria-selected=true]');
    
        // Check if there are any selected options
        if ($selected.length > 0) {
          // If there are selected options, highlight the first
          $selected.first().trigger('mouseenter');
        } else {
          // If there are no selected options, highlight the first option
          // in the dropdown
          $options.first().trigger('mouseenter');
        }
    
        this.ensureHighlightVisible();
      };
    
      Results.prototype.setClasses = function () {
        var self = this;
    
        this.data.current(function (selected) {
          var selectedIds = $.map(selected, function (s) {
            return s.id.toString();
          });
    
          var $options = self.$results
            .find('.select2-results__option[aria-selected]');
    
          $options.each(function () {
            var $option = $(this);
    
            var item = $.data(this, 'data');
    
            // id needs to be converted to a string when comparing
            var id = '' + item.id;
    
            if ((item.element != null && item.element.selected) ||
                (item.element == null && $.inArray(id, selectedIds) > -1)) {
              $option.attr('aria-selected', 'true');
            } else {
              $option.attr('aria-selected', 'false');
            }
          });
    
        });
      };
    
      Results.prototype.showLoading = function (params) {
        this.hideLoading();
    
        var loadingMore = this.options.get('translations').get('searching');
    
        var loading = {
          disabled: true,
          loading: true,
          text: loadingMore(params)
        };
        var $loading = this.option(loading);
        $loading.className += ' loading-results';
    
        this.$results.prepend($loading);
      };
    
      Results.prototype.hideLoading = function () {
        this.$results.find('.loading-results').remove();
      };
    
      Results.prototype.option = function (data) {
        var option = document.createElement('li');
        option.className = 'select2-results__option';
    
        var attrs = {
          'role': 'treeitem',
          'aria-selected': 'false'
        };
    
        if (data.disabled) {
          delete attrs['aria-selected'];
          attrs['aria-disabled'] = 'true';
        }
    
        if (data.id == null) {
          delete attrs['aria-selected'];
        }
    
        if (data._resultId != null) {
          option.id = data._resultId;
        }
    
        if (data.title) {
          option.title = data.title;
        }
    
        if (data.children) {
          attrs.role = 'group';
          attrs['aria-label'] = data.text;
          delete attrs['aria-selected'];
        }
    
        for (var attr in attrs) {
          var val = attrs[attr];
    
          option.setAttribute(attr, val);
        }
    
        if (data.children) {
          var $option = $(option);
    
          var label = document.createElement('strong');
          label.className = 'select2-results__group';
    
          var $label = $(label);
          this.template(data, label);
    
          var $children = [];
    
          for (var c = 0; c < data.children.length; c++) {
            var child = data.children[c];
    
            var $child = this.option(child);
    
            $children.push($child);
          }
    
          var $childrenContainer = $('<ul></ul>', {
            'class': 'select2-results__options select2-results__options--nested'
          });
    
          $childrenContainer.append($children);
    
          $option.append(label);
          $option.append($childrenContainer);
        } else {
          this.template(data, option);
        }
    
        $.data(option, 'data', data);
    
        return option;
      };
    
      Results.prototype.bind = function (container, $container) {
        var self = this;
    
        var id = container.id + '-results';
    
        this.$results.attr('id', id);
    
        container.on('results:all', function (params) {
          self.clear();
          self.append(params.data);
    
          if (container.isOpen()) {
            self.setClasses();
            self.highlightFirstItem();
          }
        });
    
        container.on('results:append', function (params) {
          self.append(params.data);
    
          if (container.isOpen()) {
            self.setClasses();
          }
        });
    
        container.on('query', function (params) {
          self.hideMessages();
          self.showLoading(params);
        });
    
        container.on('select', function () {
          if (!container.isOpen()) {
            return;
          }
    
          self.setClasses();
          self.highlightFirstItem();
        });
    
        container.on('unselect', function () {
          if (!container.isOpen()) {
            return;
          }
    
          self.setClasses();
          self.highlightFirstItem();
        });
    
        container.on('open', function () {
          // When the dropdown is open, aria-expended="true"
          self.$results.attr('aria-expanded', 'true');
          self.$results.attr('aria-hidden', 'false');
    
          self.setClasses();
          self.ensureHighlightVisible();
        });
    
        container.on('close', function () {
          // When the dropdown is closed, aria-expended="false"
          self.$results.attr('aria-expanded', 'false');
          self.$results.attr('aria-hidden', 'true');
          self.$results.removeAttr('aria-activedescendant');
        });
    
        container.on('results:toggle', function () {
          var $highlighted = self.getHighlightedResults();
    
          if ($highlighted.length === 0) {
            return;
          }
    
          $highlighted.trigger('mouseup');
        });
    
        container.on('results:select', function () {
          var $highlighted = self.getHighlightedResults();
    
          if ($highlighted.length === 0) {
            return;
          }
    
          var data = $highlighted.data('data');
    
          if ($highlighted.attr('aria-selected') == 'true') {
            self.trigger('close', {});
          } else {
            self.trigger('select', {
              data: data
            });
          }
        });
    
        container.on('results:previous', function () {
          var $highlighted = self.getHighlightedResults();
    
          var $options = self.$results.find('[aria-selected]');
    
          var currentIndex = $options.index($highlighted);
    
          // If we are already at te top, don't move further
          if (currentIndex === 0) {
            return;
          }
    
          var nextIndex = currentIndex - 1;
    
          // If none are highlighted, highlight the first
          if ($highlighted.length === 0) {
            nextIndex = 0;
          }
    
          var $next = $options.eq(nextIndex);
    
          $next.trigger('mouseenter');
    
          var currentOffset = self.$results.offset().top;
          var nextTop = $next.offset().top;
          var nextOffset = self.$results.scrollTop() + (nextTop - currentOffset);
    
          if (nextIndex === 0) {
            self.$results.scrollTop(0);
          } else if (nextTop - currentOffset < 0) {
            self.$results.scrollTop(nextOffset);
          }
        });
    
        container.on('results:next', function () {
          var $highlighted = self.getHighlightedResults();
    
          var $options = self.$results.find('[aria-selected]');
    
          var currentIndex = $options.index($highlighted);
    
          var nextIndex = currentIndex + 1;
    
          // If we are at the last option, stay there
          if (nextIndex >= $options.length) {
            return;
          }
    
          var $next = $options.eq(nextIndex);
    
          $next.trigger('mouseenter');
    
          var currentOffset = self.$results.offset().top +
            self.$results.outerHeight(false);
          var nextBottom = $next.offset().top + $next.outerHeight(false);
          var nextOffset = self.$results.scrollTop() + nextBottom - currentOffset;
    
          if (nextIndex === 0) {
            self.$results.scrollTop(0);
          } else if (nextBottom > currentOffset) {
            self.$results.scrollTop(nextOffset);
          }
        });
    
        container.on('results:focus', function (params) {
          params.element.addClass('select2-results__option--highlighted');
        });
    
        container.on('results:message', function (params) {
          self.displayMessage(params);
        });
    
        if ($.fn.mousewheel) {
          this.$results.on('mousewheel', function (e) {
            var top = self.$results.scrollTop();
    
            var bottom = self.$results.get(0).scrollHeight - top + e.deltaY;
    
            var isAtTop = e.deltaY > 0 && top - e.deltaY <= 0;
            var isAtBottom = e.deltaY < 0 && bottom <= self.$results.height();
    
            if (isAtTop) {
              self.$results.scrollTop(0);
    
              e.preventDefault();
              e.stopPropagation();
            } else if (isAtBottom) {
              self.$results.scrollTop(
                self.$results.get(0).scrollHeight - self.$results.height()
              );
    
              e.preventDefault();
              e.stopPropagation();
            }
          });
        }
    
        this.$results.on('mouseup', '.select2-results__option[aria-selected]',
          function (evt) {
          var $this = $(this);
    
          var data = $this.data('data');
    
          if ($this.attr('aria-selected') === 'true') {
            if (self.options.get('multiple')) {
              self.trigger('unselect', {
                originalEvent: evt,
                data: data
              });
            } else {
              self.trigger('close', {});
            }
    
            return;
          }
    
          self.trigger('select', {
            originalEvent: evt,
            data: data
          });
        });
    
        this.$results.on('mouseenter', '.select2-results__option[aria-selected]',
          function (evt) {
          var data = $(this).data('data');
    
          self.getHighlightedResults()
              .removeClass('select2-results__option--highlighted');
    
          self.trigger('results:focus', {
            data: data,
            element: $(this)
          });
        });
      };
    
      Results.prototype.getHighlightedResults = function () {
        var $highlighted = this.$results
        .find('.select2-results__option--highlighted');
    
        return $highlighted;
      };
    
      Results.prototype.destroy = function () {
        this.$results.remove();
      };
    
      Results.prototype.ensureHighlightVisible = function () {
        var $highlighted = this.getHighlightedResults();
    
        if ($highlighted.length === 0) {
          return;
        }
    
        var $options = this.$results.find('[aria-selected]');
    
        var currentIndex = $options.index($highlighted);
    
        var currentOffset = this.$results.offset().top;
        var nextTop = $highlighted.offset().top;
        var nextOffset = this.$results.scrollTop() + (nextTop - currentOffset);
    
        var offsetDelta = nextTop - currentOffset;
        nextOffset -= $highlighted.outerHeight(false) * 2;
    
        if (currentIndex <= 2) {
          this.$results.scrollTop(0);
        } else if (offsetDelta > this.$results.outerHeight() || offsetDelta < 0) {
          this.$results.scrollTop(nextOffset);
        }
      };
    
      Results.prototype.template = function (result, container) {
        var template = this.options.get('templateResult');
        var escapeMarkup = this.options.get('escapeMarkup');
    
        var content = template(result, container);
    
        if (content == null) {
          container.style.display = 'none';
        } else if (typeof content === 'string') {
          container.innerHTML = escapeMarkup(content);
        } else {
          $(container).append(content);
        }
      };
    
      return Results;
    });
    
    S2.define('select2/keys',[
    
    ], function () {
      var KEYS = {
        BACKSPACE: 8,
        TAB: 9,
        ENTER: 13,
        SHIFT: 16,
        CTRL: 17,
        ALT: 18,
        ESC: 27,
        SPACE: 32,
        PAGE_UP: 33,
        PAGE_DOWN: 34,
        END: 35,
        HOME: 36,
        LEFT: 37,
        UP: 38,
        RIGHT: 39,
        DOWN: 40,
        DELETE: 46
      };
    
      return KEYS;
    });
    
    S2.define('select2/selection/base',[
      'jquery',
      '../utils',
      '../keys'
    ], function ($, Utils, KEYS) {
      function BaseSelection ($element, options) {
        this.$element = $element;
        this.options = options;
    
        BaseSelection.__super__.constructor.call(this);
      }
    
      Utils.Extend(BaseSelection, Utils.Observable);
    
      BaseSelection.prototype.render = function () {
        var $selection = $(
          '<span class="select2-selection" role="combobox" ' +
          ' aria-haspopup="true" aria-expanded="false">' +
          '</span>'
        );
    
        this._tabindex = 0;
    
        if (this.$element.data('old-tabindex') != null) {
          this._tabindex = this.$element.data('old-tabindex');
        } else if (this.$element.attr('tabindex') != null) {
          this._tabindex = this.$element.attr('tabindex');
        }
    
        $selection.attr('title', this.$element.attr('title'));
        $selection.attr('tabindex', this._tabindex);
    
        this.$selection = $selection;
    
        return $selection;
      };
    
      BaseSelection.prototype.bind = function (container, $container) {
        var self = this;
    
        var id = container.id + '-container';
        var resultsId = container.id + '-results';
    
        this.container = container;
    
        this.$selection.on('focus', function (evt) {
          self.trigger('focus', evt);
        });
    
        this.$selection.on('blur', function (evt) {
          self._handleBlur(evt);
        });
    
        this.$selection.on('keydown', function (evt) {
          self.trigger('keypress', evt);
    
          if (evt.which === KEYS.SPACE) {
            evt.preventDefault();
          }
        });
    
        container.on('results:focus', function (params) {
          self.$selection.attr('aria-activedescendant', params.data._resultId);
        });
    
        container.on('selection:update', function (params) {
          self.update(params.data);
        });
    
        container.on('open', function () {
          // When the dropdown is open, aria-expanded="true"
          self.$selection.attr('aria-expanded', 'true');
          self.$selection.attr('aria-owns', resultsId);
    
          self._attachCloseHandler(container);
        });
    
        container.on('close', function () {
          // When the dropdown is closed, aria-expanded="false"
          self.$selection.attr('aria-expanded', 'false');
          self.$selection.removeAttr('aria-activedescendant');
          self.$selection.removeAttr('aria-owns');
    
          self.$selection.focus();
    
          self._detachCloseHandler(container);
        });
    
        container.on('enable', function () {
          self.$selection.attr('tabindex', self._tabindex);
        });
    
        container.on('disable', function () {
          self.$selection.attr('tabindex', '-1');
        });
      };
    
      BaseSelection.prototype._handleBlur = function (evt) {
        var self = this;
    
        // This needs to be delayed as the active element is the body when the tab
        // key is pressed, possibly along with others.
        window.setTimeout(function () {
          // Don't trigger `blur` if the focus is still in the selection
          if (
            (document.activeElement == self.$selection[0]) ||
            ($.contains(self.$selection[0], document.activeElement))
          ) {
            return;
          }
    
          self.trigger('blur', evt);
        }, 1);
      };
    
      BaseSelection.prototype._attachCloseHandler = function (container) {
        var self = this;
    
        $(document.body).on('mousedown.select2.' + container.id, function (e) {
          var $target = $(e.target);
    
          var $select = $target.closest('.select2');
    
          var $all = $('.select2.select2-container--open');
    
          $all.each(function () {
            var $this = $(this);
    
            if (this == $select[0]) {
              return;
            }
    
            var $element = $this.data('element');
    
            $element.select2('close');
          });
        });
      };
    
      BaseSelection.prototype._detachCloseHandler = function (container) {
        $(document.body).off('mousedown.select2.' + container.id);
      };
    
      BaseSelection.prototype.position = function ($selection, $container) {
        var $selectionContainer = $container.find('.selection');
        $selectionContainer.append($selection);
      };
    
      BaseSelection.prototype.destroy = function () {
        this._detachCloseHandler(this.container);
      };
    
      BaseSelection.prototype.update = function (data) {
        throw new Error('The `update` method must be defined in child classes.');
      };
    
      return BaseSelection;
    });
    
    S2.define('select2/selection/single',[
      'jquery',
      './base',
      '../utils',
      '../keys'
    ], function ($, BaseSelection, Utils, KEYS) {
      function SingleSelection () {
        SingleSelection.__super__.constructor.apply(this, arguments);
      }
    
      Utils.Extend(SingleSelection, BaseSelection);
    
      SingleSelection.prototype.render = function () {
        var $selection = SingleSelection.__super__.render.call(this);
    
        $selection.addClass('select2-selection--single');
    
        $selection.html(
          '<span class="select2-selection__rendered"></span>' +
          '<span class="select2-selection__arrow" role="presentation">' +
            '<b role="presentation"></b>' +
          '</span>'
        );
    
        return $selection;
      };
    
      SingleSelection.prototype.bind = function (container, $container) {
        var self = this;
    
        SingleSelection.__super__.bind.apply(this, arguments);
    
        var id = container.id + '-container';
    
        this.$selection.find('.select2-selection__rendered').attr('id', id);
        this.$selection.attr('aria-labelledby', id);
    
        this.$selection.on('mousedown', function (evt) {
          // Only respond to left clicks
          if (evt.which !== 1) {
            return;
          }
    
          self.trigger('toggle', {
            originalEvent: evt
          });
        });
    
        this.$selection.on('focus', function (evt) {
          // User focuses on the container
        });
    
        this.$selection.on('blur', function (evt) {
          // User exits the container
        });
    
        container.on('focus', function (evt) {
          if (!container.isOpen()) {
            self.$selection.focus();
          }
        });
    
        container.on('selection:update', function (params) {
          self.update(params.data);
        });
      };
    
      SingleSelection.prototype.clear = function () {
        this.$selection.find('.select2-selection__rendered').empty();
      };
    
      SingleSelection.prototype.display = function (data, container) {
        var template = this.options.get('templateSelection');
        var escapeMarkup = this.options.get('escapeMarkup');
    
        return escapeMarkup(template(data, container));
      };
    
      SingleSelection.prototype.selectionContainer = function () {
        return $('<span></span>');
      };
    
      SingleSelection.prototype.update = function (data) {
        if (data.length === 0) {
          this.clear();
          return;
        }
    
        var selection = data[0];
    
        var $rendered = this.$selection.find('.select2-selection__rendered');
        var formatted = this.display(selection, $rendered);
    
        $rendered.empty().append(formatted);
        $rendered.prop('title', selection.title || selection.text);
      };
    
      return SingleSelection;
    });
    
    S2.define('select2/selection/multiple',[
      'jquery',
      './base',
      '../utils'
    ], function ($, BaseSelection, Utils) {
      function MultipleSelection ($element, options) {
        MultipleSelection.__super__.constructor.apply(this, arguments);
      }
    
      Utils.Extend(MultipleSelection, BaseSelection);
    
      MultipleSelection.prototype.render = function () {
        var $selection = MultipleSelection.__super__.render.call(this);
    
        $selection.addClass('select2-selection--multiple');
    
        $selection.html(
          '<ul class="select2-selection__rendered"></ul>'
        );
    
        return $selection;
      };
    
      MultipleSelection.prototype.bind = function (container, $container) {
        var self = this;
    
        MultipleSelection.__super__.bind.apply(this, arguments);
    
        this.$selection.on('click', function (evt) {
          self.trigger('toggle', {
            originalEvent: evt
          });
        });
    
        this.$selection.on(
          'click',
          '.select2-selection__choice__remove',
          function (evt) {
            // Ignore the event if it is disabled
            if (self.options.get('disabled')) {
              return;
            }
    
            var $remove = $(this);
            var $selection = $remove.parent();
    
            var data = $selection.data('data');
    
            self.trigger('unselect', {
              originalEvent: evt,
              data: data
            });
          }
        );
      };
    
      MultipleSelection.prototype.clear = function () {
        this.$selection.find('.select2-selection__rendered').empty();
      };
    
      MultipleSelection.prototype.display = function (data, container) {
        var template = this.options.get('templateSelection');
        var escapeMarkup = this.options.get('escapeMarkup');
    
        return escapeMarkup(template(data, container));
      };
    
      MultipleSelection.prototype.selectionContainer = function () {
        var $container = $(
          '<li class="select2-selection__choice">' +
            '<span class="select2-selection__choice__remove" role="presentation">' +
              '&times;' +
            '</span>' +
          '</li>'
        );
    
        return $container;
      };
    
      MultipleSelection.prototype.update = function (data) {
        this.clear();
    
        if (data.length === 0) {
          return;
        }
    
        var $selections = [];
    
        for (var d = 0; d < data.length; d++) {
          var selection = data[d];
    
          var $selection = this.selectionContainer();
          var formatted = this.display(selection, $selection);
    
          $selection.append(formatted);
          $selection.prop('title', selection.title || selection.text);
    
          $selection.data('data', selection);
    
          $selections.push($selection);
        }
    
        var $rendered = this.$selection.find('.select2-selection__rendered');
    
        Utils.appendMany($rendered, $selections);
      };
    
      return MultipleSelection;
    });
    
    S2.define('select2/selection/placeholder',[
      '../utils'
    ], function (Utils) {
      function Placeholder (decorated, $element, options) {
        this.placeholder = this.normalizePlaceholder(options.get('placeholder'));
    
        decorated.call(this, $element, options);
      }
    
      Placeholder.prototype.normalizePlaceholder = function (_, placeholder) {
        if (typeof placeholder === 'string') {
          placeholder = {
            id: '',
            text: placeholder
          };
        }
    
        return placeholder;
      };
    
      Placeholder.prototype.createPlaceholder = function (decorated, placeholder) {
        var $placeholder = this.selectionContainer();
    
        $placeholder.html(this.display(placeholder));
        $placeholder.addClass('select2-selection__placeholder')
                    .removeClass('select2-selection__choice');
    
        return $placeholder;
      };
    
      Placeholder.prototype.update = function (decorated, data) {
        var singlePlaceholder = (
          data.length == 1 && data[0].id != this.placeholder.id
        );
        var multipleSelections = data.length > 1;
    
        if (multipleSelections || singlePlaceholder) {
          return decorated.call(this, data);
        }
    
        this.clear();
    
        var $placeholder = this.createPlaceholder(this.placeholder);
    
        this.$selection.find('.select2-selection__rendered').append($placeholder);
      };
    
      return Placeholder;
    });
    
    S2.define('select2/selection/allowClear',[
      'jquery',
      '../keys'
    ], function ($, KEYS) {
      function AllowClear () { }
    
      AllowClear.prototype.bind = function (decorated, container, $container) {
        var self = this;
    
        decorated.call(this, container, $container);
    
        if (this.placeholder == null) {
          if (this.options.get('debug') && window.console && console.error) {
            console.error(
              'Select2: The `allowClear` option should be used in combination ' +
              'with the `placeholder` option.'
            );
          }
        }
    
        this.$selection.on('mousedown', '.select2-selection__clear',
          function (evt) {
            self._handleClear(evt);
        });
    
        container.on('keypress', function (evt) {
          self._handleKeyboardClear(evt, container);
        });
      };
    
      AllowClear.prototype._handleClear = function (_, evt) {
        // Ignore the event if it is disabled
        if (this.options.get('disabled')) {
          return;
        }
    
        var $clear = this.$selection.find('.select2-selection__clear');
    
        // Ignore the event if nothing has been selected
        if ($clear.length === 0) {
          return;
        }
    
        evt.stopPropagation();
    
        var data = $clear.data('data');
    
        for (var d = 0; d < data.length; d++) {
          var unselectData = {
            data: data[d]
          };
    
          // Trigger the `unselect` event, so people can prevent it from being
          // cleared.
          this.trigger('unselect', unselectData);
    
          // If the event was prevented, don't clear it out.
          if (unselectData.prevented) {
            return;
          }
        }
    
        this.$element.val(this.placeholder.id).trigger('change');
    
        this.trigger('toggle', {});
      };
    
      AllowClear.prototype._handleKeyboardClear = function (_, evt, container) {
        if (container.isOpen()) {
          return;
        }
    
        if (evt.which == KEYS.DELETE || evt.which == KEYS.BACKSPACE) {
          this._handleClear(evt);
        }
      };
    
      AllowClear.prototype.update = function (decorated, data) {
        decorated.call(this, data);
    
        if (this.$selection.find('.select2-selection__placeholder').length > 0 ||
            data.length === 0) {
          return;
        }
    
        var $remove = $(
          '<span class="select2-selection__clear">' +
            '&times;' +
          '</span>'
        );
        $remove.data('data', data);
    
        this.$selection.find('.select2-selection__rendered').prepend($remove);
      };
    
      return AllowClear;
    });
    
    S2.define('select2/selection/search',[
      'jquery',
      '../utils',
      '../keys'
    ], function ($, Utils, KEYS) {
      function Search (decorated, $element, options) {
        decorated.call(this, $element, options);
      }
    
      Search.prototype.render = function (decorated) {
        var $search = $(
          '<li class="select2-search select2-search--inline">' +
            '<input class="select2-search__field" type="search" tabindex="-1"' +
            ' autocomplete="off" autocorrect="off" autocapitalize="off"' +
            ' spellcheck="false" role="textbox" aria-autocomplete="list" />' +
          '</li>'
        );
    
        this.$searchContainer = $search;
        this.$search = $search.find('input');
    
        var $rendered = decorated.call(this);
    
        this._transferTabIndex();
    
        return $rendered;
      };
    
      Search.prototype.bind = function (decorated, container, $container) {
        var self = this;
    
        decorated.call(this, container, $container);
    
        container.on('open', function () {
          self.$search.trigger('focus');
        });
    
        container.on('close', function () {
          self.$search.val('');
          self.$search.removeAttr('aria-activedescendant');
          self.$search.trigger('focus');
        });
    
        container.on('enable', function () {
          self.$search.prop('disabled', false);
    
          self._transferTabIndex();
        });
    
        container.on('disable', function () {
          self.$search.prop('disabled', true);
        });
    
        container.on('focus', function (evt) {
          self.$search.trigger('focus');
        });
    
        container.on('results:focus', function (params) {
          self.$search.attr('aria-activedescendant', params.id);
        });
    
        this.$selection.on('focusin', '.select2-search--inline', function (evt) {
          self.trigger('focus', evt);
        });
    
        this.$selection.on('focusout', '.select2-search--inline', function (evt) {
          self._handleBlur(evt);
        });
    
        this.$selection.on('keydown', '.select2-search--inline', function (evt) {
          evt.stopPropagation();
    
          self.trigger('keypress', evt);
    
          self._keyUpPrevented = evt.isDefaultPrevented();
    
          var key = evt.which;
    
          if (key === KEYS.BACKSPACE && self.$search.val() === '') {
            var $previousChoice = self.$searchContainer
              .prev('.select2-selection__choice');
    
            if ($previousChoice.length > 0) {
              var item = $previousChoice.data('data');
    
              self.searchRemoveChoice(item);
    
              evt.preventDefault();
            }
          }
        });
    
        // Try to detect the IE version should the `documentMode` property that
        // is stored on the document. This is only implemented in IE and is
        // slightly cleaner than doing a user agent check.
        // This property is not available in Edge, but Edge also doesn't have
        // this bug.
        var msie = document.documentMode;
        var disableInputEvents = msie && msie <= 11;
    
        // Workaround for browsers which do not support the `input` event
        // This will prevent double-triggering of events for browsers which support
        // both the `keyup` and `input` events.
        this.$selection.on(
          'input.searchcheck',
          '.select2-search--inline',
          function (evt) {
            // IE will trigger the `input` event when a placeholder is used on a
            // search box. To get around this issue, we are forced to ignore all
            // `input` events in IE and keep using `keyup`.
            if (disableInputEvents) {
              self.$selection.off('input.search input.searchcheck');
              return;
            }
    
            // Unbind the duplicated `keyup` event
            self.$selection.off('keyup.search');
          }
        );
    
        this.$selection.on(
          'keyup.search input.search',
          '.select2-search--inline',
          function (evt) {
            // IE will trigger the `input` event when a placeholder is used on a
            // search box. To get around this issue, we are forced to ignore all
            // `input` events in IE and keep using `keyup`.
            if (disableInputEvents && evt.type === 'input') {
              self.$selection.off('input.search input.searchcheck');
              return;
            }
    
            var key = evt.which;
    
            // We can freely ignore events from modifier keys
            if (key == KEYS.SHIFT || key == KEYS.CTRL || key == KEYS.ALT) {
              return;
            }
    
            // Tabbing will be handled during the `keydown` phase
            if (key == KEYS.TAB) {
              return;
            }
    
            self.handleSearch(evt);
          }
        );
      };
    
      /**
       * This method will transfer the tabindex attribute from the rendered
       * selection to the search box. This allows for the search box to be used as
       * the primary focus instead of the selection container.
       *
       * @private
       */
      Search.prototype._transferTabIndex = function (decorated) {
        this.$search.attr('tabindex', this.$selection.attr('tabindex'));
        this.$selection.attr('tabindex', '-1');
      };
    
      Search.prototype.createPlaceholder = function (decorated, placeholder) {
        this.$search.attr('placeholder', placeholder.text);
      };
    
      Search.prototype.update = function (decorated, data) {
        var searchHadFocus = this.$search[0] == document.activeElement;
    
        this.$search.attr('placeholder', '');
    
        decorated.call(this, data);
    
        this.$selection.find('.select2-selection__rendered')
                       .append(this.$searchContainer);
    
        this.resizeSearch();
        if (searchHadFocus) {
          this.$search.focus();
        }
      };
    
      Search.prototype.handleSearch = function () {
        this.resizeSearch();
    
        if (!this._keyUpPrevented) {
          var input = this.$search.val();
    
          this.trigger('query', {
            term: input
          });
        }
    
        this._keyUpPrevented = false;
      };
    
      Search.prototype.searchRemoveChoice = function (decorated, item) {
        this.trigger('unselect', {
          data: item
        });
    
        this.$search.val(item.text);
        this.handleSearch();
      };
    
      Search.prototype.resizeSearch = function () {
        this.$search.css('width', '25px');
    
        var width = '';
    
        if (this.$search.attr('placeholder') !== '') {
          width = this.$selection.find('.select2-selection__rendered').innerWidth();
        } else {
          var minimumWidth = this.$search.val().length + 1;
    
          width = (minimumWidth * 0.75) + 'em';
        }
    
        this.$search.css('width', width);
      };
    
      return Search;
    });
    
    S2.define('select2/selection/eventRelay',[
      'jquery'
    ], function ($) {
      function EventRelay () { }
    
      EventRelay.prototype.bind = function (decorated, container, $container) {
        var self = this;
        var relayEvents = [
          'open', 'opening',
          'close', 'closing',
          'select', 'selecting',
          'unselect', 'unselecting'
        ];
    
        var preventableEvents = ['opening', 'closing', 'selecting', 'unselecting'];
    
        decorated.call(this, container, $container);
    
        container.on('*', function (name, params) {
          // Ignore events that should not be relayed
          if ($.inArray(name, relayEvents) === -1) {
            return;
          }
    
          // The parameters should always be an object
          params = params || {};
    
          // Generate the jQuery event for the Select2 event
          var evt = $.Event('select2:' + name, {
            params: params
          });
    
          self.$element.trigger(evt);
    
          // Only handle preventable events if it was one
          if ($.inArray(name, preventableEvents) === -1) {
            return;
          }
    
          params.prevented = evt.isDefaultPrevented();
        });
      };
    
      return EventRelay;
    });
    
    S2.define('select2/translation',[
      'jquery',
      'require'
    ], function ($, require) {
      function Translation (dict) {
        this.dict = dict || {};
      }
    
      Translation.prototype.all = function () {
        return this.dict;
      };
    
      Translation.prototype.get = function (key) {
        return this.dict[key];
      };
    
      Translation.prototype.extend = function (translation) {
        this.dict = $.extend({}, translation.all(), this.dict);
      };
    
      // Static functions
    
      Translation._cache = {};
    
      Translation.loadPath = function (path) {
        if (!(path in Translation._cache)) {
          var translations = require(path);
    
          Translation._cache[path] = translations;
        }
    
        return new Translation(Translation._cache[path]);
      };
    
      return Translation;
    });
    
    S2.define('select2/diacritics',[
    
    ], function () {
      var diacritics = {
        '\u24B6': 'A',
        '\uFF21': 'A',
        '\u00C0': 'A',
        '\u00C1': 'A',
        '\u00C2': 'A',
        '\u1EA6': 'A',
        '\u1EA4': 'A',
        '\u1EAA': 'A',
        '\u1EA8': 'A',
        '\u00C3': 'A',
        '\u0100': 'A',
        '\u0102': 'A',
        '\u1EB0': 'A',
        '\u1EAE': 'A',
        '\u1EB4': 'A',
        '\u1EB2': 'A',
        '\u0226': 'A',
        '\u01E0': 'A',
        '\u00C4': 'A',
        '\u01DE': 'A',
        '\u1EA2': 'A',
        '\u00C5': 'A',
        '\u01FA': 'A',
        '\u01CD': 'A',
        '\u0200': 'A',
        '\u0202': 'A',
        '\u1EA0': 'A',
        '\u1EAC': 'A',
        '\u1EB6': 'A',
        '\u1E00': 'A',
        '\u0104': 'A',
        '\u023A': 'A',
        '\u2C6F': 'A',
        '\uA732': 'AA',
        '\u00C6': 'AE',
        '\u01FC': 'AE',
        '\u01E2': 'AE',
        '\uA734': 'AO',
        '\uA736': 'AU',
        '\uA738': 'AV',
        '\uA73A': 'AV',
        '\uA73C': 'AY',
        '\u24B7': 'B',
        '\uFF22': 'B',
        '\u1E02': 'B',
        '\u1E04': 'B',
        '\u1E06': 'B',
        '\u0243': 'B',
        '\u0182': 'B',
        '\u0181': 'B',
        '\u24B8': 'C',
        '\uFF23': 'C',
        '\u0106': 'C',
        '\u0108': 'C',
        '\u010A': 'C',
        '\u010C': 'C',
        '\u00C7': 'C',
        '\u1E08': 'C',
        '\u0187': 'C',
        '\u023B': 'C',
        '\uA73E': 'C',
        '\u24B9': 'D',
        '\uFF24': 'D',
        '\u1E0A': 'D',
        '\u010E': 'D',
        '\u1E0C': 'D',
        '\u1E10': 'D',
        '\u1E12': 'D',
        '\u1E0E': 'D',
        '\u0110': 'D',
        '\u018B': 'D',
        '\u018A': 'D',
        '\u0189': 'D',
        '\uA779': 'D',
        '\u01F1': 'DZ',
        '\u01C4': 'DZ',
        '\u01F2': 'Dz',
        '\u01C5': 'Dz',
        '\u24BA': 'E',
        '\uFF25': 'E',
        '\u00C8': 'E',
        '\u00C9': 'E',
        '\u00CA': 'E',
        '\u1EC0': 'E',
        '\u1EBE': 'E',
        '\u1EC4': 'E',
        '\u1EC2': 'E',
        '\u1EBC': 'E',
        '\u0112': 'E',
        '\u1E14': 'E',
        '\u1E16': 'E',
        '\u0114': 'E',
        '\u0116': 'E',
        '\u00CB': 'E',
        '\u1EBA': 'E',
        '\u011A': 'E',
        '\u0204': 'E',
        '\u0206': 'E',
        '\u1EB8': 'E',
        '\u1EC6': 'E',
        '\u0228': 'E',
        '\u1E1C': 'E',
        '\u0118': 'E',
        '\u1E18': 'E',
        '\u1E1A': 'E',
        '\u0190': 'E',
        '\u018E': 'E',
        '\u24BB': 'F',
        '\uFF26': 'F',
        '\u1E1E': 'F',
        '\u0191': 'F',
        '\uA77B': 'F',
        '\u24BC': 'G',
        '\uFF27': 'G',
        '\u01F4': 'G',
        '\u011C': 'G',
        '\u1E20': 'G',
        '\u011E': 'G',
        '\u0120': 'G',
        '\u01E6': 'G',
        '\u0122': 'G',
        '\u01E4': 'G',
        '\u0193': 'G',
        '\uA7A0': 'G',
        '\uA77D': 'G',
        '\uA77E': 'G',
        '\u24BD': 'H',
        '\uFF28': 'H',
        '\u0124': 'H',
        '\u1E22': 'H',
        '\u1E26': 'H',
        '\u021E': 'H',
        '\u1E24': 'H',
        '\u1E28': 'H',
        '\u1E2A': 'H',
        '\u0126': 'H',
        '\u2C67': 'H',
        '\u2C75': 'H',
        '\uA78D': 'H',
        '\u24BE': 'I',
        '\uFF29': 'I',
        '\u00CC': 'I',
        '\u00CD': 'I',
        '\u00CE': 'I',
        '\u0128': 'I',
        '\u012A': 'I',
        '\u012C': 'I',
        '\u0130': 'I',
        '\u00CF': 'I',
        '\u1E2E': 'I',
        '\u1EC8': 'I',
        '\u01CF': 'I',
        '\u0208': 'I',
        '\u020A': 'I',
        '\u1ECA': 'I',
        '\u012E': 'I',
        '\u1E2C': 'I',
        '\u0197': 'I',
        '\u24BF': 'J',
        '\uFF2A': 'J',
        '\u0134': 'J',
        '\u0248': 'J',
        '\u24C0': 'K',
        '\uFF2B': 'K',
        '\u1E30': 'K',
        '\u01E8': 'K',
        '\u1E32': 'K',
        '\u0136': 'K',
        '\u1E34': 'K',
        '\u0198': 'K',
        '\u2C69': 'K',
        '\uA740': 'K',
        '\uA742': 'K',
        '\uA744': 'K',
        '\uA7A2': 'K',
        '\u24C1': 'L',
        '\uFF2C': 'L',
        '\u013F': 'L',
        '\u0139': 'L',
        '\u013D': 'L',
        '\u1E36': 'L',
        '\u1E38': 'L',
        '\u013B': 'L',
        '\u1E3C': 'L',
        '\u1E3A': 'L',
        '\u0141': 'L',
        '\u023D': 'L',
        '\u2C62': 'L',
        '\u2C60': 'L',
        '\uA748': 'L',
        '\uA746': 'L',
        '\uA780': 'L',
        '\u01C7': 'LJ',
        '\u01C8': 'Lj',
        '\u24C2': 'M',
        '\uFF2D': 'M',
        '\u1E3E': 'M',
        '\u1E40': 'M',
        '\u1E42': 'M',
        '\u2C6E': 'M',
        '\u019C': 'M',
        '\u24C3': 'N',
        '\uFF2E': 'N',
        '\u01F8': 'N',
        '\u0143': 'N',
        '\u00D1': 'N',
        '\u1E44': 'N',
        '\u0147': 'N',
        '\u1E46': 'N',
        '\u0145': 'N',
        '\u1E4A': 'N',
        '\u1E48': 'N',
        '\u0220': 'N',
        '\u019D': 'N',
        '\uA790': 'N',
        '\uA7A4': 'N',
        '\u01CA': 'NJ',
        '\u01CB': 'Nj',
        '\u24C4': 'O',
        '\uFF2F': 'O',
        '\u00D2': 'O',
        '\u00D3': 'O',
        '\u00D4': 'O',
        '\u1ED2': 'O',
        '\u1ED0': 'O',
        '\u1ED6': 'O',
        '\u1ED4': 'O',
        '\u00D5': 'O',
        '\u1E4C': 'O',
        '\u022C': 'O',
        '\u1E4E': 'O',
        '\u014C': 'O',
        '\u1E50': 'O',
        '\u1E52': 'O',
        '\u014E': 'O',
        '\u022E': 'O',
        '\u0230': 'O',
        '\u00D6': 'O',
        '\u022A': 'O',
        '\u1ECE': 'O',
        '\u0150': 'O',
        '\u01D1': 'O',
        '\u020C': 'O',
        '\u020E': 'O',
        '\u01A0': 'O',
        '\u1EDC': 'O',
        '\u1EDA': 'O',
        '\u1EE0': 'O',
        '\u1EDE': 'O',
        '\u1EE2': 'O',
        '\u1ECC': 'O',
        '\u1ED8': 'O',
        '\u01EA': 'O',
        '\u01EC': 'O',
        '\u00D8': 'O',
        '\u01FE': 'O',
        '\u0186': 'O',
        '\u019F': 'O',
        '\uA74A': 'O',
        '\uA74C': 'O',
        '\u01A2': 'OI',
        '\uA74E': 'OO',
        '\u0222': 'OU',
        '\u24C5': 'P',
        '\uFF30': 'P',
        '\u1E54': 'P',
        '\u1E56': 'P',
        '\u01A4': 'P',
        '\u2C63': 'P',
        '\uA750': 'P',
        '\uA752': 'P',
        '\uA754': 'P',
        '\u24C6': 'Q',
        '\uFF31': 'Q',
        '\uA756': 'Q',
        '\uA758': 'Q',
        '\u024A': 'Q',
        '\u24C7': 'R',
        '\uFF32': 'R',
        '\u0154': 'R',
        '\u1E58': 'R',
        '\u0158': 'R',
        '\u0210': 'R',
        '\u0212': 'R',
        '\u1E5A': 'R',
        '\u1E5C': 'R',
        '\u0156': 'R',
        '\u1E5E': 'R',
        '\u024C': 'R',
        '\u2C64': 'R',
        '\uA75A': 'R',
        '\uA7A6': 'R',
        '\uA782': 'R',
        '\u24C8': 'S',
        '\uFF33': 'S',
        '\u1E9E': 'S',
        '\u015A': 'S',
        '\u1E64': 'S',
        '\u015C': 'S',
        '\u1E60': 'S',
        '\u0160': 'S',
        '\u1E66': 'S',
        '\u1E62': 'S',
        '\u1E68': 'S',
        '\u0218': 'S',
        '\u015E': 'S',
        '\u2C7E': 'S',
        '\uA7A8': 'S',
        '\uA784': 'S',
        '\u24C9': 'T',
        '\uFF34': 'T',
        '\u1E6A': 'T',
        '\u0164': 'T',
        '\u1E6C': 'T',
        '\u021A': 'T',
        '\u0162': 'T',
        '\u1E70': 'T',
        '\u1E6E': 'T',
        '\u0166': 'T',
        '\u01AC': 'T',
        '\u01AE': 'T',
        '\u023E': 'T',
        '\uA786': 'T',
        '\uA728': 'TZ',
        '\u24CA': 'U',
        '\uFF35': 'U',
        '\u00D9': 'U',
        '\u00DA': 'U',
        '\u00DB': 'U',
        '\u0168': 'U',
        '\u1E78': 'U',
        '\u016A': 'U',
        '\u1E7A': 'U',
        '\u016C': 'U',
        '\u00DC': 'U',
        '\u01DB': 'U',
        '\u01D7': 'U',
        '\u01D5': 'U',
        '\u01D9': 'U',
        '\u1EE6': 'U',
        '\u016E': 'U',
        '\u0170': 'U',
        '\u01D3': 'U',
        '\u0214': 'U',
        '\u0216': 'U',
        '\u01AF': 'U',
        '\u1EEA': 'U',
        '\u1EE8': 'U',
        '\u1EEE': 'U',
        '\u1EEC': 'U',
        '\u1EF0': 'U',
        '\u1EE4': 'U',
        '\u1E72': 'U',
        '\u0172': 'U',
        '\u1E76': 'U',
        '\u1E74': 'U',
        '\u0244': 'U',
        '\u24CB': 'V',
        '\uFF36': 'V',
        '\u1E7C': 'V',
        '\u1E7E': 'V',
        '\u01B2': 'V',
        '\uA75E': 'V',
        '\u0245': 'V',
        '\uA760': 'VY',
        '\u24CC': 'W',
        '\uFF37': 'W',
        '\u1E80': 'W',
        '\u1E82': 'W',
        '\u0174': 'W',
        '\u1E86': 'W',
        '\u1E84': 'W',
        '\u1E88': 'W',
        '\u2C72': 'W',
        '\u24CD': 'X',
        '\uFF38': 'X',
        '\u1E8A': 'X',
        '\u1E8C': 'X',
        '\u24CE': 'Y',
        '\uFF39': 'Y',
        '\u1EF2': 'Y',
        '\u00DD': 'Y',
        '\u0176': 'Y',
        '\u1EF8': 'Y',
        '\u0232': 'Y',
        '\u1E8E': 'Y',
        '\u0178': 'Y',
        '\u1EF6': 'Y',
        '\u1EF4': 'Y',
        '\u01B3': 'Y',
        '\u024E': 'Y',
        '\u1EFE': 'Y',
        '\u24CF': 'Z',
        '\uFF3A': 'Z',
        '\u0179': 'Z',
        '\u1E90': 'Z',
        '\u017B': 'Z',
        '\u017D': 'Z',
        '\u1E92': 'Z',
        '\u1E94': 'Z',
        '\u01B5': 'Z',
        '\u0224': 'Z',
        '\u2C7F': 'Z',
        '\u2C6B': 'Z',
        '\uA762': 'Z',
        '\u24D0': 'a',
        '\uFF41': 'a',
        '\u1E9A': 'a',
        '\u00E0': 'a',
        '\u00E1': 'a',
        '\u00E2': 'a',
        '\u1EA7': 'a',
        '\u1EA5': 'a',
        '\u1EAB': 'a',
        '\u1EA9': 'a',
        '\u00E3': 'a',
        '\u0101': 'a',
        '\u0103': 'a',
        '\u1EB1': 'a',
        '\u1EAF': 'a',
        '\u1EB5': 'a',
        '\u1EB3': 'a',
        '\u0227': 'a',
        '\u01E1': 'a',
        '\u00E4': 'a',
        '\u01DF': 'a',
        '\u1EA3': 'a',
        '\u00E5': 'a',
        '\u01FB': 'a',
        '\u01CE': 'a',
        '\u0201': 'a',
        '\u0203': 'a',
        '\u1EA1': 'a',
        '\u1EAD': 'a',
        '\u1EB7': 'a',
        '\u1E01': 'a',
        '\u0105': 'a',
        '\u2C65': 'a',
        '\u0250': 'a',
        '\uA733': 'aa',
        '\u00E6': 'ae',
        '\u01FD': 'ae',
        '\u01E3': 'ae',
        '\uA735': 'ao',
        '\uA737': 'au',
        '\uA739': 'av',
        '\uA73B': 'av',
        '\uA73D': 'ay',
        '\u24D1': 'b',
        '\uFF42': 'b',
        '\u1E03': 'b',
        '\u1E05': 'b',
        '\u1E07': 'b',
        '\u0180': 'b',
        '\u0183': 'b',
        '\u0253': 'b',
        '\u24D2': 'c',
        '\uFF43': 'c',
        '\u0107': 'c',
        '\u0109': 'c',
        '\u010B': 'c',
        '\u010D': 'c',
        '\u00E7': 'c',
        '\u1E09': 'c',
        '\u0188': 'c',
        '\u023C': 'c',
        '\uA73F': 'c',
        '\u2184': 'c',
        '\u24D3': 'd',
        '\uFF44': 'd',
        '\u1E0B': 'd',
        '\u010F': 'd',
        '\u1E0D': 'd',
        '\u1E11': 'd',
        '\u1E13': 'd',
        '\u1E0F': 'd',
        '\u0111': 'd',
        '\u018C': 'd',
        '\u0256': 'd',
        '\u0257': 'd',
        '\uA77A': 'd',
        '\u01F3': 'dz',
        '\u01C6': 'dz',
        '\u24D4': 'e',
        '\uFF45': 'e',
        '\u00E8': 'e',
        '\u00E9': 'e',
        '\u00EA': 'e',
        '\u1EC1': 'e',
        '\u1EBF': 'e',
        '\u1EC5': 'e',
        '\u1EC3': 'e',
        '\u1EBD': 'e',
        '\u0113': 'e',
        '\u1E15': 'e',
        '\u1E17': 'e',
        '\u0115': 'e',
        '\u0117': 'e',
        '\u00EB': 'e',
        '\u1EBB': 'e',
        '\u011B': 'e',
        '\u0205': 'e',
        '\u0207': 'e',
        '\u1EB9': 'e',
        '\u1EC7': 'e',
        '\u0229': 'e',
        '\u1E1D': 'e',
        '\u0119': 'e',
        '\u1E19': 'e',
        '\u1E1B': 'e',
        '\u0247': 'e',
        '\u025B': 'e',
        '\u01DD': 'e',
        '\u24D5': 'f',
        '\uFF46': 'f',
        '\u1E1F': 'f',
        '\u0192': 'f',
        '\uA77C': 'f',
        '\u24D6': 'g',
        '\uFF47': 'g',
        '\u01F5': 'g',
        '\u011D': 'g',
        '\u1E21': 'g',
        '\u011F': 'g',
        '\u0121': 'g',
        '\u01E7': 'g',
        '\u0123': 'g',
        '\u01E5': 'g',
        '\u0260': 'g',
        '\uA7A1': 'g',
        '\u1D79': 'g',
        '\uA77F': 'g',
        '\u24D7': 'h',
        '\uFF48': 'h',
        '\u0125': 'h',
        '\u1E23': 'h',
        '\u1E27': 'h',
        '\u021F': 'h',
        '\u1E25': 'h',
        '\u1E29': 'h',
        '\u1E2B': 'h',
        '\u1E96': 'h',
        '\u0127': 'h',
        '\u2C68': 'h',
        '\u2C76': 'h',
        '\u0265': 'h',
        '\u0195': 'hv',
        '\u24D8': 'i',
        '\uFF49': 'i',
        '\u00EC': 'i',
        '\u00ED': 'i',
        '\u00EE': 'i',
        '\u0129': 'i',
        '\u012B': 'i',
        '\u012D': 'i',
        '\u00EF': 'i',
        '\u1E2F': 'i',
        '\u1EC9': 'i',
        '\u01D0': 'i',
        '\u0209': 'i',
        '\u020B': 'i',
        '\u1ECB': 'i',
        '\u012F': 'i',
        '\u1E2D': 'i',
        '\u0268': 'i',
        '\u0131': 'i',
        '\u24D9': 'j',
        '\uFF4A': 'j',
        '\u0135': 'j',
        '\u01F0': 'j',
        '\u0249': 'j',
        '\u24DA': 'k',
        '\uFF4B': 'k',
        '\u1E31': 'k',
        '\u01E9': 'k',
        '\u1E33': 'k',
        '\u0137': 'k',
        '\u1E35': 'k',
        '\u0199': 'k',
        '\u2C6A': 'k',
        '\uA741': 'k',
        '\uA743': 'k',
        '\uA745': 'k',
        '\uA7A3': 'k',
        '\u24DB': 'l',
        '\uFF4C': 'l',
        '\u0140': 'l',
        '\u013A': 'l',
        '\u013E': 'l',
        '\u1E37': 'l',
        '\u1E39': 'l',
        '\u013C': 'l',
        '\u1E3D': 'l',
        '\u1E3B': 'l',
        '\u017F': 'l',
        '\u0142': 'l',
        '\u019A': 'l',
        '\u026B': 'l',
        '\u2C61': 'l',
        '\uA749': 'l',
        '\uA781': 'l',
        '\uA747': 'l',
        '\u01C9': 'lj',
        '\u24DC': 'm',
        '\uFF4D': 'm',
        '\u1E3F': 'm',
        '\u1E41': 'm',
        '\u1E43': 'm',
        '\u0271': 'm',
        '\u026F': 'm',
        '\u24DD': 'n',
        '\uFF4E': 'n',
        '\u01F9': 'n',
        '\u0144': 'n',
        '\u00F1': 'n',
        '\u1E45': 'n',
        '\u0148': 'n',
        '\u1E47': 'n',
        '\u0146': 'n',
        '\u1E4B': 'n',
        '\u1E49': 'n',
        '\u019E': 'n',
        '\u0272': 'n',
        '\u0149': 'n',
        '\uA791': 'n',
        '\uA7A5': 'n',
        '\u01CC': 'nj',
        '\u24DE': 'o',
        '\uFF4F': 'o',
        '\u00F2': 'o',
        '\u00F3': 'o',
        '\u00F4': 'o',
        '\u1ED3': 'o',
        '\u1ED1': 'o',
        '\u1ED7': 'o',
        '\u1ED5': 'o',
        '\u00F5': 'o',
        '\u1E4D': 'o',
        '\u022D': 'o',
        '\u1E4F': 'o',
        '\u014D': 'o',
        '\u1E51': 'o',
        '\u1E53': 'o',
        '\u014F': 'o',
        '\u022F': 'o',
        '\u0231': 'o',
        '\u00F6': 'o',
        '\u022B': 'o',
        '\u1ECF': 'o',
        '\u0151': 'o',
        '\u01D2': 'o',
        '\u020D': 'o',
        '\u020F': 'o',
        '\u01A1': 'o',
        '\u1EDD': 'o',
        '\u1EDB': 'o',
        '\u1EE1': 'o',
        '\u1EDF': 'o',
        '\u1EE3': 'o',
        '\u1ECD': 'o',
        '\u1ED9': 'o',
        '\u01EB': 'o',
        '\u01ED': 'o',
        '\u00F8': 'o',
        '\u01FF': 'o',
        '\u0254': 'o',
        '\uA74B': 'o',
        '\uA74D': 'o',
        '\u0275': 'o',
        '\u01A3': 'oi',
        '\u0223': 'ou',
        '\uA74F': 'oo',
        '\u24DF': 'p',
        '\uFF50': 'p',
        '\u1E55': 'p',
        '\u1E57': 'p',
        '\u01A5': 'p',
        '\u1D7D': 'p',
        '\uA751': 'p',
        '\uA753': 'p',
        '\uA755': 'p',
        '\u24E0': 'q',
        '\uFF51': 'q',
        '\u024B': 'q',
        '\uA757': 'q',
        '\uA759': 'q',
        '\u24E1': 'r',
        '\uFF52': 'r',
        '\u0155': 'r',
        '\u1E59': 'r',
        '\u0159': 'r',
        '\u0211': 'r',
        '\u0213': 'r',
        '\u1E5B': 'r',
        '\u1E5D': 'r',
        '\u0157': 'r',
        '\u1E5F': 'r',
        '\u024D': 'r',
        '\u027D': 'r',
        '\uA75B': 'r',
        '\uA7A7': 'r',
        '\uA783': 'r',
        '\u24E2': 's',
        '\uFF53': 's',
        '\u00DF': 's',
        '\u015B': 's',
        '\u1E65': 's',
        '\u015D': 's',
        '\u1E61': 's',
        '\u0161': 's',
        '\u1E67': 's',
        '\u1E63': 's',
        '\u1E69': 's',
        '\u0219': 's',
        '\u015F': 's',
        '\u023F': 's',
        '\uA7A9': 's',
        '\uA785': 's',
        '\u1E9B': 's',
        '\u24E3': 't',
        '\uFF54': 't',
        '\u1E6B': 't',
        '\u1E97': 't',
        '\u0165': 't',
        '\u1E6D': 't',
        '\u021B': 't',
        '\u0163': 't',
        '\u1E71': 't',
        '\u1E6F': 't',
        '\u0167': 't',
        '\u01AD': 't',
        '\u0288': 't',
        '\u2C66': 't',
        '\uA787': 't',
        '\uA729': 'tz',
        '\u24E4': 'u',
        '\uFF55': 'u',
        '\u00F9': 'u',
        '\u00FA': 'u',
        '\u00FB': 'u',
        '\u0169': 'u',
        '\u1E79': 'u',
        '\u016B': 'u',
        '\u1E7B': 'u',
        '\u016D': 'u',
        '\u00FC': 'u',
        '\u01DC': 'u',
        '\u01D8': 'u',
        '\u01D6': 'u',
        '\u01DA': 'u',
        '\u1EE7': 'u',
        '\u016F': 'u',
        '\u0171': 'u',
        '\u01D4': 'u',
        '\u0215': 'u',
        '\u0217': 'u',
        '\u01B0': 'u',
        '\u1EEB': 'u',
        '\u1EE9': 'u',
        '\u1EEF': 'u',
        '\u1EED': 'u',
        '\u1EF1': 'u',
        '\u1EE5': 'u',
        '\u1E73': 'u',
        '\u0173': 'u',
        '\u1E77': 'u',
        '\u1E75': 'u',
        '\u0289': 'u',
        '\u24E5': 'v',
        '\uFF56': 'v',
        '\u1E7D': 'v',
        '\u1E7F': 'v',
        '\u028B': 'v',
        '\uA75F': 'v',
        '\u028C': 'v',
        '\uA761': 'vy',
        '\u24E6': 'w',
        '\uFF57': 'w',
        '\u1E81': 'w',
        '\u1E83': 'w',
        '\u0175': 'w',
        '\u1E87': 'w',
        '\u1E85': 'w',
        '\u1E98': 'w',
        '\u1E89': 'w',
        '\u2C73': 'w',
        '\u24E7': 'x',
        '\uFF58': 'x',
        '\u1E8B': 'x',
        '\u1E8D': 'x',
        '\u24E8': 'y',
        '\uFF59': 'y',
        '\u1EF3': 'y',
        '\u00FD': 'y',
        '\u0177': 'y',
        '\u1EF9': 'y',
        '\u0233': 'y',
        '\u1E8F': 'y',
        '\u00FF': 'y',
        '\u1EF7': 'y',
        '\u1E99': 'y',
        '\u1EF5': 'y',
        '\u01B4': 'y',
        '\u024F': 'y',
        '\u1EFF': 'y',
        '\u24E9': 'z',
        '\uFF5A': 'z',
        '\u017A': 'z',
        '\u1E91': 'z',
        '\u017C': 'z',
        '\u017E': 'z',
        '\u1E93': 'z',
        '\u1E95': 'z',
        '\u01B6': 'z',
        '\u0225': 'z',
        '\u0240': 'z',
        '\u2C6C': 'z',
        '\uA763': 'z',
        '\u0386': '\u0391',
        '\u0388': '\u0395',
        '\u0389': '\u0397',
        '\u038A': '\u0399',
        '\u03AA': '\u0399',
        '\u038C': '\u039F',
        '\u038E': '\u03A5',
        '\u03AB': '\u03A5',
        '\u038F': '\u03A9',
        '\u03AC': '\u03B1',
        '\u03AD': '\u03B5',
        '\u03AE': '\u03B7',
        '\u03AF': '\u03B9',
        '\u03CA': '\u03B9',
        '\u0390': '\u03B9',
        '\u03CC': '\u03BF',
        '\u03CD': '\u03C5',
        '\u03CB': '\u03C5',
        '\u03B0': '\u03C5',
        '\u03C9': '\u03C9',
        '\u03C2': '\u03C3'
      };
    
      return diacritics;
    });
    
    S2.define('select2/data/base',[
      '../utils'
    ], function (Utils) {
      function BaseAdapter ($element, options) {
        BaseAdapter.__super__.constructor.call(this);
      }
    
      Utils.Extend(BaseAdapter, Utils.Observable);
    
      BaseAdapter.prototype.current = function (callback) {
        throw new Error('The `current` method must be defined in child classes.');
      };
    
      BaseAdapter.prototype.query = function (params, callback) {
        throw new Error('The `query` method must be defined in child classes.');
      };
    
      BaseAdapter.prototype.bind = function (container, $container) {
        // Can be implemented in subclasses
      };
    
      BaseAdapter.prototype.destroy = function () {
        // Can be implemented in subclasses
      };
    
      BaseAdapter.prototype.generateResultId = function (container, data) {
        var id = container.id + '-result-';
    
        id += Utils.generateChars(4);
    
        if (data.id != null) {
          id += '-' + data.id.toString();
        } else {
          id += '-' + Utils.generateChars(4);
        }
        return id;
      };
    
      return BaseAdapter;
    });
    
    S2.define('select2/data/select',[
      './base',
      '../utils',
      'jquery'
    ], function (BaseAdapter, Utils, $) {
      function SelectAdapter ($element, options) {
        this.$element = $element;
        this.options = options;
    
        SelectAdapter.__super__.constructor.call(this);
      }
    
      Utils.Extend(SelectAdapter, BaseAdapter);
    
      SelectAdapter.prototype.current = function (callback) {
        var data = [];
        var self = this;
    
        this.$element.find(':selected').each(function () {
          var $option = $(this);
    
          var option = self.item($option);
    
          data.push(option);
        });
    
        callback(data);
      };
    
      SelectAdapter.prototype.select = function (data) {
        var self = this;
    
        data.selected = true;
    
        // If data.element is a DOM node, use it instead
        if ($(data.element).is('option')) {
          data.element.selected = true;
    
          this.$element.trigger('change');
    
          return;
        }
    
        if (this.$element.prop('multiple')) {
          this.current(function (currentData) {
            var val = [];
    
            data = [data];
            data.push.apply(data, currentData);
    
            for (var d = 0; d < data.length; d++) {
              var id = data[d].id;
    
              if ($.inArray(id, val) === -1) {
                val.push(id);
              }
            }
    
            self.$element.val(val);
            self.$element.trigger('change');
          });
        } else {
          var val = data.id;
    
          this.$element.val(val);
          this.$element.trigger('change');
        }
      };
    
      SelectAdapter.prototype.unselect = function (data) {
        var self = this;
    
        if (!this.$element.prop('multiple')) {
          return;
        }
    
        data.selected = false;
    
        if ($(data.element).is('option')) {
          data.element.selected = false;
    
          this.$element.trigger('change');
    
          return;
        }
    
        this.current(function (currentData) {
          var val = [];
    
          for (var d = 0; d < currentData.length; d++) {
            var id = currentData[d].id;
    
            if (id !== data.id && $.inArray(id, val) === -1) {
              val.push(id);
            }
          }
    
          self.$element.val(val);
    
          self.$element.trigger('change');
        });
      };
    
      SelectAdapter.prototype.bind = function (container, $container) {
        var self = this;
    
        this.container = container;
    
        container.on('select', function (params) {
          self.select(params.data);
        });
    
        container.on('unselect', function (params) {
          self.unselect(params.data);
        });
      };
    
      SelectAdapter.prototype.destroy = function () {
        // Remove anything added to child elements
        this.$element.find('*').each(function () {
          // Remove any custom data set by Select2
          $.removeData(this, 'data');
        });
      };
    
      SelectAdapter.prototype.query = function (params, callback) {
        var data = [];
        var self = this;
    
        var $options = this.$element.children();
    
        $options.each(function () {
          var $option = $(this);
    
          if (!$option.is('option') && !$option.is('optgroup')) {
            return;
          }
    
          var option = self.item($option);
    
          var matches = self.matches(params, option);
    
          if (matches !== null) {
            data.push(matches);
          }
        });
    
        callback({
          results: data
        });
      };
    
      SelectAdapter.prototype.addOptions = function ($options) {
        Utils.appendMany(this.$element, $options);
      };
    
      SelectAdapter.prototype.option = function (data) {
        var option;
    
        if (data.children) {
          option = document.createElement('optgroup');
          option.label = data.text;
        } else {
          option = document.createElement('option');
    
          if (option.textContent !== undefined) {
            option.textContent = data.text;
          } else {
            option.innerText = data.text;
          }
        }
    
        if (data.id) {
          option.value = data.id;
        }
    
        if (data.disabled) {
          option.disabled = true;
        }
    
        if (data.selected) {
          option.selected = true;
        }
    
        if (data.title) {
          option.title = data.title;
        }
    
        var $option = $(option);
    
        var normalizedData = this._normalizeItem(data);
        normalizedData.element = option;
    
        // Override the option's data with the combined data
        $.data(option, 'data', normalizedData);
    
        return $option;
      };
    
      SelectAdapter.prototype.item = function ($option) {
        var data = {};
    
        data = $.data($option[0], 'data');
    
        if (data != null) {
          return data;
        }
    
        if ($option.is('option')) {
          data = {
            id: $option.val(),
            text: $option.text(),
            disabled: $option.prop('disabled'),
            selected: $option.prop('selected'),
            title: $option.prop('title')
          };
        } else if ($option.is('optgroup')) {
          data = {
            text: $option.prop('label'),
            children: [],
            title: $option.prop('title')
          };
    
          var $children = $option.children('option');
          var children = [];
    
          for (var c = 0; c < $children.length; c++) {
            var $child = $($children[c]);
    
            var child = this.item($child);
    
            children.push(child);
          }
    
          data.children = children;
        }
    
        data = this._normalizeItem(data);
        data.element = $option[0];
    
        $.data($option[0], 'data', data);
    
        return data;
      };
    
      SelectAdapter.prototype._normalizeItem = function (item) {
        if (!$.isPlainObject(item)) {
          item = {
            id: item,
            text: item
          };
        }
    
        item = $.extend({}, {
          text: ''
        }, item);
    
        var defaults = {
          selected: false,
          disabled: false
        };
    
        if (item.id != null) {
          item.id = item.id.toString();
        }
    
        if (item.text != null) {
          item.text = item.text.toString();
        }
    
        if (item._resultId == null && item.id && this.container != null) {
          item._resultId = this.generateResultId(this.container, item);
        }
    
        return $.extend({}, defaults, item);
      };
    
      SelectAdapter.prototype.matches = function (params, data) {
        var matcher = this.options.get('matcher');
    
        return matcher(params, data);
      };
    
      return SelectAdapter;
    });
    
    S2.define('select2/data/array',[
      './select',
      '../utils',
      'jquery'
    ], function (SelectAdapter, Utils, $) {
      function ArrayAdapter ($element, options) {
        var data = options.get('data') || [];
    
        ArrayAdapter.__super__.constructor.call(this, $element, options);
    
        this.addOptions(this.convertToOptions(data));
      }
    
      Utils.Extend(ArrayAdapter, SelectAdapter);
    
      ArrayAdapter.prototype.select = function (data) {
        var $option = this.$element.find('option').filter(function (i, elm) {
          return elm.value == data.id.toString();
        });
    
        if ($option.length === 0) {
          $option = this.option(data);
    
          this.addOptions($option);
        }
    
        ArrayAdapter.__super__.select.call(this, data);
      };
    
      ArrayAdapter.prototype.convertToOptions = function (data) {
        var self = this;
    
        var $existing = this.$element.find('option');
        var existingIds = $existing.map(function () {
          return self.item($(this)).id;
        }).get();
    
        var $options = [];
    
        // Filter out all items except for the one passed in the argument
        function onlyItem (item) {
          return function () {
            return $(this).val() == item.id;
          };
        }
    
        for (var d = 0; d < data.length; d++) {
          var item = this._normalizeItem(data[d]);
    
          // Skip items which were pre-loaded, only merge the data
          if ($.inArray(item.id, existingIds) >= 0) {
            var $existingOption = $existing.filter(onlyItem(item));
    
            var existingData = this.item($existingOption);
            var newData = $.extend(true, {}, item, existingData);
    
            var $newOption = this.option(newData);
    
            $existingOption.replaceWith($newOption);
    
            continue;
          }
    
          var $option = this.option(item);
    
          if (item.children) {
            var $children = this.convertToOptions(item.children);
    
            Utils.appendMany($option, $children);
          }
    
          $options.push($option);
        }
    
        return $options;
      };
    
      return ArrayAdapter;
    });
    
    S2.define('select2/data/ajax',[
      './array',
      '../utils',
      'jquery'
    ], function (ArrayAdapter, Utils, $) {
      function AjaxAdapter ($element, options) {
        this.ajaxOptions = this._applyDefaults(options.get('ajax'));
    
        if (this.ajaxOptions.processResults != null) {
          this.processResults = this.ajaxOptions.processResults;
        }
    
        AjaxAdapter.__super__.constructor.call(this, $element, options);
      }
    
      Utils.Extend(AjaxAdapter, ArrayAdapter);
    
      AjaxAdapter.prototype._applyDefaults = function (options) {
        var defaults = {
          data: function (params) {
            return $.extend({}, params, {
              q: params.term
            });
          },
          transport: function (params, success, failure) {
            var $request = $.ajax(params);
    
            $request.then(success);
            $request.fail(failure);
    
            return $request;
          }
        };
    
        return $.extend({}, defaults, options, true);
      };
    
      AjaxAdapter.prototype.processResults = function (results) {
        return results;
      };
    
      AjaxAdapter.prototype.query = function (params, callback) {
        var matches = [];
        var self = this;
    
        if (this._request != null) {
          // JSONP requests cannot always be aborted
          if ($.isFunction(this._request.abort)) {
            this._request.abort();
          }
    
          this._request = null;
        }
    
        var options = $.extend({
          type: 'GET'
        }, this.ajaxOptions);
    
        if (typeof options.url === 'function') {
          options.url = options.url.call(this.$element, params);
        }
    
        if (typeof options.data === 'function') {
          options.data = options.data.call(this.$element, params);
        }
    
        function request () {
          var $request = options.transport(options, function (data) {
            var results = self.processResults(data, params);
    
            if (self.options.get('debug') && window.console && console.error) {
              // Check to make sure that the response included a `results` key.
              if (!results || !results.results || !$.isArray(results.results)) {
                console.error(
                  'Select2: The AJAX results did not return an array in the ' +
                  '`results` key of the response.'
                );
              }
            }
    
            callback(results);
          }, function () {
            // Attempt to detect if a request was aborted
            // Only works if the transport exposes a status property
            if ($request.status && $request.status === '0') {
              return;
            }
    
            self.trigger('results:message', {
              message: 'errorLoading'
            });
          });
    
          self._request = $request;
        }
    
        if (this.ajaxOptions.delay && params.term != null) {
          if (this._queryTimeout) {
            window.clearTimeout(this._queryTimeout);
          }
    
          this._queryTimeout = window.setTimeout(request, this.ajaxOptions.delay);
        } else {
          request();
        }
      };
    
      return AjaxAdapter;
    });
    
    S2.define('select2/data/tags',[
      'jquery'
    ], function ($) {
      function Tags (decorated, $element, options) {
        var tags = options.get('tags');
    
        var createTag = options.get('createTag');
    
        if (createTag !== undefined) {
          this.createTag = createTag;
        }
    
        var insertTag = options.get('insertTag');
    
        if (insertTag !== undefined) {
            this.insertTag = insertTag;
        }
    
        decorated.call(this, $element, options);
    
        if ($.isArray(tags)) {
          for (var t = 0; t < tags.length; t++) {
            var tag = tags[t];
            var item = this._normalizeItem(tag);
    
            var $option = this.option(item);
    
            this.$element.append($option);
          }
        }
      }
    
      Tags.prototype.query = function (decorated, params, callback) {
        var self = this;
    
        this._removeOldTags();
    
        if (params.term == null || params.page != null) {
          decorated.call(this, params, callback);
          return;
        }
    
        function wrapper (obj, child) {
          var data = obj.results;
    
          for (var i = 0; i < data.length; i++) {
            var option = data[i];
    
            var checkChildren = (
              option.children != null &&
              !wrapper({
                results: option.children
              }, true)
            );
    
            var checkText = option.text === params.term;
    
            if (checkText || checkChildren) {
              if (child) {
                return false;
              }
    
              obj.data = data;
              callback(obj);
    
              return;
            }
          }
    
          if (child) {
            return true;
          }
    
          var tag = self.createTag(params);
    
          if (tag != null) {
            var $option = self.option(tag);
            $option.attr('data-select2-tag', true);
    
            self.addOptions([$option]);
    
            self.insertTag(data, tag);
          }
    
          obj.results = data;
    
          callback(obj);
        }
    
        decorated.call(this, params, wrapper);
      };
    
      Tags.prototype.createTag = function (decorated, params) {
        var term = $.trim(params.term);
    
        if (term === '') {
          return null;
        }
    
        return {
          id: term,
          text: term
        };
      };
    
      Tags.prototype.insertTag = function (_, data, tag) {
        data.unshift(tag);
      };
    
      Tags.prototype._removeOldTags = function (_) {
        var tag = this._lastTag;
    
        var $options = this.$element.find('option[data-select2-tag]');
    
        $options.each(function () {
          if (this.selected) {
            return;
          }
    
          $(this).remove();
        });
      };
    
      return Tags;
    });
    
    S2.define('select2/data/tokenizer',[
      'jquery'
    ], function ($) {
      function Tokenizer (decorated, $element, options) {
        var tokenizer = options.get('tokenizer');
    
        if (tokenizer !== undefined) {
          this.tokenizer = tokenizer;
        }
    
        decorated.call(this, $element, options);
      }
    
      Tokenizer.prototype.bind = function (decorated, container, $container) {
        decorated.call(this, container, $container);
    
        this.$search =  container.dropdown.$search || container.selection.$search ||
          $container.find('.select2-search__field');
      };
    
      Tokenizer.prototype.query = function (decorated, params, callback) {
        var self = this;
    
        function createAndSelect (data) {
          // Normalize the data object so we can use it for checks
          var item = self._normalizeItem(data);
    
          // Check if the data object already exists as a tag
          // Select it if it doesn't
          var $existingOptions = self.$element.find('option').filter(function () {
            return $(this).val() === item.id;
          });
    
          // If an existing option wasn't found for it, create the option
          if (!$existingOptions.length) {
            var $option = self.option(item);
            $option.attr('data-select2-tag', true);
    
            self._removeOldTags();
            self.addOptions([$option]);
          }
    
          // Select the item, now that we know there is an option for it
          select(item);
        }
    
        function select (data) {
          self.trigger('select', {
            data: data
          });
        }
    
        params.term = params.term || '';
    
        var tokenData = this.tokenizer(params, this.options, createAndSelect);
    
        if (tokenData.term !== params.term) {
          // Replace the search term if we have the search box
          if (this.$search.length) {
            this.$search.val(tokenData.term);
            this.$search.focus();
          }
    
          params.term = tokenData.term;
        }
    
        decorated.call(this, params, callback);
      };
    
      Tokenizer.prototype.tokenizer = function (_, params, options, callback) {
        var separators = options.get('tokenSeparators') || [];
        var term = params.term;
        var i = 0;
    
        var createTag = this.createTag || function (params) {
          return {
            id: params.term,
            text: params.term
          };
        };
    
        while (i < term.length) {
          var termChar = term[i];
    
          if ($.inArray(termChar, separators) === -1) {
            i++;
    
            continue;
          }
    
          var part = term.substr(0, i);
          var partParams = $.extend({}, params, {
            term: part
          });
    
          var data = createTag(partParams);
    
          if (data == null) {
            i++;
            continue;
          }
    
          callback(data);
    
          // Reset the term to not include the tokenized portion
          term = term.substr(i + 1) || '';
          i = 0;
        }
    
        return {
          term: term
        };
      };
    
      return Tokenizer;
    });
    
    S2.define('select2/data/minimumInputLength',[
    
    ], function () {
      function MinimumInputLength (decorated, $e, options) {
        this.minimumInputLength = options.get('minimumInputLength');
    
        decorated.call(this, $e, options);
      }
    
      MinimumInputLength.prototype.query = function (decorated, params, callback) {
        params.term = params.term || '';
    
        if (params.term.length < this.minimumInputLength) {
          this.trigger('results:message', {
            message: 'inputTooShort',
            args: {
              minimum: this.minimumInputLength,
              input: params.term,
              params: params
            }
          });
    
          return;
        }
    
        decorated.call(this, params, callback);
      };
    
      return MinimumInputLength;
    });
    
    S2.define('select2/data/maximumInputLength',[
    
    ], function () {
      function MaximumInputLength (decorated, $e, options) {
        this.maximumInputLength = options.get('maximumInputLength');
    
        decorated.call(this, $e, options);
      }
    
      MaximumInputLength.prototype.query = function (decorated, params, callback) {
        params.term = params.term || '';
    
        if (this.maximumInputLength > 0 &&
            params.term.length > this.maximumInputLength) {
          this.trigger('results:message', {
            message: 'inputTooLong',
            args: {
              maximum: this.maximumInputLength,
              input: params.term,
              params: params
            }
          });
    
          return;
        }
    
        decorated.call(this, params, callback);
      };
    
      return MaximumInputLength;
    });
    
    S2.define('select2/data/maximumSelectionLength',[
    
    ], function (){
      function MaximumSelectionLength (decorated, $e, options) {
        this.maximumSelectionLength = options.get('maximumSelectionLength');
    
        decorated.call(this, $e, options);
      }
    
      MaximumSelectionLength.prototype.query =
        function (decorated, params, callback) {
          var self = this;
    
          this.current(function (currentData) {
            var count = currentData != null ? currentData.length : 0;
            if (self.maximumSelectionLength > 0 &&
              count >= self.maximumSelectionLength) {
              self.trigger('results:message', {
                message: 'maximumSelected',
                args: {
                  maximum: self.maximumSelectionLength
                }
              });
              return;
            }
            decorated.call(self, params, callback);
          });
      };
    
      return MaximumSelectionLength;
    });
    
    S2.define('select2/dropdown',[
      'jquery',
      './utils'
    ], function ($, Utils) {
      function Dropdown ($element, options) {
        this.$element = $element;
        this.options = options;
    
        Dropdown.__super__.constructor.call(this);
      }
    
      Utils.Extend(Dropdown, Utils.Observable);
    
      Dropdown.prototype.render = function () {
        var $dropdown = $(
          '<span class="select2-dropdown">' +
            '<span class="select2-results"></span>' +
          '</span>'
        );
    
        $dropdown.attr('dir', this.options.get('dir'));
    
        this.$dropdown = $dropdown;
    
        return $dropdown;
      };
    
      Dropdown.prototype.bind = function () {
        // Should be implemented in subclasses
      };
    
      Dropdown.prototype.position = function ($dropdown, $container) {
        // Should be implmented in subclasses
      };
    
      Dropdown.prototype.destroy = function () {
        // Remove the dropdown from the DOM
        this.$dropdown.remove();
      };
    
      return Dropdown;
    });
    
    S2.define('select2/dropdown/search',[
      'jquery',
      '../utils'
    ], function ($, Utils) {
      function Search () { }
    
      Search.prototype.render = function (decorated) {
        var $rendered = decorated.call(this);
    
        var $search = $(
          '<span class="select2-search select2-search--dropdown">' +
            '<input class="select2-search__field" type="search" tabindex="-1"' +
            ' autocomplete="off" autocorrect="off" autocapitalize="off"' +
            ' spellcheck="false" role="textbox" />' +
          '</span>'
        );
    
        this.$searchContainer = $search;
        this.$search = $search.find('input');
    
        $rendered.prepend($search);
    
        return $rendered;
      };
    
      Search.prototype.bind = function (decorated, container, $container) {
        var self = this;
    
        decorated.call(this, container, $container);
    
        this.$search.on('keydown', function (evt) {
          self.trigger('keypress', evt);
    
          self._keyUpPrevented = evt.isDefaultPrevented();
        });
    
        // Workaround for browsers which do not support the `input` event
        // This will prevent double-triggering of events for browsers which support
        // both the `keyup` and `input` events.
        this.$search.on('input', function (evt) {
          // Unbind the duplicated `keyup` event
          $(this).off('keyup');
        });
    
        this.$search.on('keyup input', function (evt) {
          self.handleSearch(evt);
        });
    
        container.on('open', function () {
          self.$search.attr('tabindex', 0);
    
          self.$search.focus();
    
          window.setTimeout(function () {
            self.$search.focus();
          }, 0);
        });
    
        container.on('close', function () {
          self.$search.attr('tabindex', -1);
    
          self.$search.val('');
        });
    
        container.on('focus', function () {
          if (container.isOpen()) {
            self.$search.focus();
          }
        });
    
        container.on('results:all', function (params) {
          if (params.query.term == null || params.query.term === '') {
            var showSearch = self.showSearch(params);
    
            if (showSearch) {
              self.$searchContainer.removeClass('select2-search--hide');
            } else {
              self.$searchContainer.addClass('select2-search--hide');
            }
          }
        });
      };
    
      Search.prototype.handleSearch = function (evt) {
        if (!this._keyUpPrevented) {
          var input = this.$search.val();
    
          this.trigger('query', {
            term: input
          });
        }
    
        this._keyUpPrevented = false;
      };
    
      Search.prototype.showSearch = function (_, params) {
        return true;
      };
    
      return Search;
    });
    
    S2.define('select2/dropdown/hidePlaceholder',[
    
    ], function () {
      function HidePlaceholder (decorated, $element, options, dataAdapter) {
        this.placeholder = this.normalizePlaceholder(options.get('placeholder'));
    
        decorated.call(this, $element, options, dataAdapter);
      }
    
      HidePlaceholder.prototype.append = function (decorated, data) {
        data.results = this.removePlaceholder(data.results);
    
        decorated.call(this, data);
      };
    
      HidePlaceholder.prototype.normalizePlaceholder = function (_, placeholder) {
        if (typeof placeholder === 'string') {
          placeholder = {
            id: '',
            text: placeholder
          };
        }
    
        return placeholder;
      };
    
      HidePlaceholder.prototype.removePlaceholder = function (_, data) {
        var modifiedData = data.slice(0);
    
        for (var d = data.length - 1; d >= 0; d--) {
          var item = data[d];
    
          if (this.placeholder.id === item.id) {
            modifiedData.splice(d, 1);
          }
        }
    
        return modifiedData;
      };
    
      return HidePlaceholder;
    });
    
    S2.define('select2/dropdown/infiniteScroll',[
      'jquery'
    ], function ($) {
      function InfiniteScroll (decorated, $element, options, dataAdapter) {
        this.lastParams = {};
    
        decorated.call(this, $element, options, dataAdapter);
    
        this.$loadingMore = this.createLoadingMore();
        this.loading = false;
      }
    
      InfiniteScroll.prototype.append = function (decorated, data) {
        this.$loadingMore.remove();
        this.loading = false;
    
        decorated.call(this, data);
    
        if (this.showLoadingMore(data)) {
          this.$results.append(this.$loadingMore);
        }
      };
    
      InfiniteScroll.prototype.bind = function (decorated, container, $container) {
        var self = this;
    
        decorated.call(this, container, $container);
    
        container.on('query', function (params) {
          self.lastParams = params;
          self.loading = true;
        });
    
        container.on('query:append', function (params) {
          self.lastParams = params;
          self.loading = true;
        });
    
        this.$results.on('scroll', function () {
          var isLoadMoreVisible = $.contains(
            document.documentElement,
            self.$loadingMore[0]
          );
    
          if (self.loading || !isLoadMoreVisible) {
            return;
          }
    
          var currentOffset = self.$results.offset().top +
            self.$results.outerHeight(false);
          var loadingMoreOffset = self.$loadingMore.offset().top +
            self.$loadingMore.outerHeight(false);
    
          if (currentOffset + 50 >= loadingMoreOffset) {
            self.loadMore();
          }
        });
      };
    
      InfiniteScroll.prototype.loadMore = function () {
        this.loading = true;
    
        var params = $.extend({}, {page: 1}, this.lastParams);
    
        params.page++;
    
        this.trigger('query:append', params);
      };
    
      InfiniteScroll.prototype.showLoadingMore = function (_, data) {
        return data.pagination && data.pagination.more;
      };
    
      InfiniteScroll.prototype.createLoadingMore = function () {
        var $option = $(
          '<li ' +
          'class="select2-results__option select2-results__option--load-more"' +
          'role="treeitem" aria-disabled="true"></li>'
        );
    
        var message = this.options.get('translations').get('loadingMore');
    
        $option.html(message(this.lastParams));
    
        return $option;
      };
    
      return InfiniteScroll;
    });
    
    S2.define('select2/dropdown/attachBody',[
      'jquery',
      '../utils'
    ], function ($, Utils) {
      function AttachBody (decorated, $element, options) {
        this.$dropdownParent = options.get('dropdownParent') || $(document.body);
    
        decorated.call(this, $element, options);
      }
    
      AttachBody.prototype.bind = function (decorated, container, $container) {
        var self = this;
    
        var setupResultsEvents = false;
    
        decorated.call(this, container, $container);
    
        container.on('open', function () {
          self._showDropdown();
          self._attachPositioningHandler(container);
    
          if (!setupResultsEvents) {
            setupResultsEvents = true;
    
            container.on('results:all', function () {
              self._positionDropdown();
              self._resizeDropdown();
            });
    
            container.on('results:append', function () {
              self._positionDropdown();
              self._resizeDropdown();
            });
          }
        });
    
        container.on('close', function () {
          self._hideDropdown();
          self._detachPositioningHandler(container);
        });
    
        this.$dropdownContainer.on('mousedown', function (evt) {
          evt.stopPropagation();
        });
      };
    
      AttachBody.prototype.destroy = function (decorated) {
        decorated.call(this);
    
        this.$dropdownContainer.remove();
      };
    
      AttachBody.prototype.position = function (decorated, $dropdown, $container) {
        // Clone all of the container classes
        $dropdown.attr('class', $container.attr('class'));
    
        $dropdown.removeClass('select2');
        $dropdown.addClass('select2-container--open');
    
        $dropdown.css({
          position: 'absolute',
          top: -999999
        });
    
        this.$container = $container;
      };
    
      AttachBody.prototype.render = function (decorated) {
        var $container = $('<span></span>');
    
        var $dropdown = decorated.call(this);
        $container.append($dropdown);
    
        this.$dropdownContainer = $container;
    
        return $container;
      };
    
      AttachBody.prototype._hideDropdown = function (decorated) {
        this.$dropdownContainer.detach();
      };
    
      AttachBody.prototype._attachPositioningHandler =
          function (decorated, container) {
        var self = this;
    
        var scrollEvent = 'scroll.select2.' + container.id;
        var resizeEvent = 'resize.select2.' + container.id;
        var orientationEvent = 'orientationchange.select2.' + container.id;
    
        var $watchers = this.$container.parents().filter(Utils.hasScroll);
        $watchers.each(function () {
          $(this).data('select2-scroll-position', {
            x: $(this).scrollLeft(),
            y: $(this).scrollTop()
          });
        });
    
        $watchers.on(scrollEvent, function (ev) {
          var position = $(this).data('select2-scroll-position');
          $(this).scrollTop(position.y);
        });
    
        $(window).on(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent,
          function (e) {
          self._positionDropdown();
          self._resizeDropdown();
        });
      };
    
      AttachBody.prototype._detachPositioningHandler =
          function (decorated, container) {
        var scrollEvent = 'scroll.select2.' + container.id;
        var resizeEvent = 'resize.select2.' + container.id;
        var orientationEvent = 'orientationchange.select2.' + container.id;
    
        var $watchers = this.$container.parents().filter(Utils.hasScroll);
        $watchers.off(scrollEvent);
    
        $(window).off(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent);
      };
    
      AttachBody.prototype._positionDropdown = function () {
        var $window = $(window);
    
        var isCurrentlyAbove = this.$dropdown.hasClass('select2-dropdown--above');
        var isCurrentlyBelow = this.$dropdown.hasClass('select2-dropdown--below');
    
        var newDirection = null;
    
        var offset = this.$container.offset();
    
        offset.bottom = offset.top + this.$container.outerHeight(false);
    
        var container = {
          height: this.$container.outerHeight(false)
        };
    
        container.top = offset.top;
        container.bottom = offset.top + container.height;
    
        var dropdown = {
          height: this.$dropdown.outerHeight(false)
        };
    
        var viewport = {
          top: $window.scrollTop(),
          bottom: $window.scrollTop() + $window.height()
        };
    
        var enoughRoomAbove = viewport.top < (offset.top - dropdown.height);
        var enoughRoomBelow = viewport.bottom > (offset.bottom + dropdown.height);
    
        var css = {
          left: offset.left,
          top: container.bottom
        };
    
        // Determine what the parent element is to use for calciulating the offset
        var $offsetParent = this.$dropdownParent;
    
        // For statically positoned elements, we need to get the element
        // that is determining the offset
        if ($offsetParent.css('position') === 'static') {
          $offsetParent = $offsetParent.offsetParent();
        }
    
        var parentOffset = $offsetParent.offset();
    
        css.top -= parentOffset.top;
        css.left -= parentOffset.left;
    
        if (!isCurrentlyAbove && !isCurrentlyBelow) {
          newDirection = 'below';
        }
    
        if (!enoughRoomBelow && enoughRoomAbove && !isCurrentlyAbove) {
          newDirection = 'above';
        } else if (!enoughRoomAbove && enoughRoomBelow && isCurrentlyAbove) {
          newDirection = 'below';
        }
    
        if (newDirection == 'above' ||
          (isCurrentlyAbove && newDirection !== 'below')) {
          css.top = container.top - parentOffset.top - dropdown.height;
        }
    
        if (newDirection != null) {
          this.$dropdown
            .removeClass('select2-dropdown--below select2-dropdown--above')
            .addClass('select2-dropdown--' + newDirection);
          this.$container
            .removeClass('select2-container--below select2-container--above')
            .addClass('select2-container--' + newDirection);
        }
    
        this.$dropdownContainer.css(css);
      };
    
      AttachBody.prototype._resizeDropdown = function () {
        var css = {
          width: this.$container.outerWidth(false) + 'px'
        };
    
        if (this.options.get('dropdownAutoWidth')) {
          css.minWidth = css.width;
          css.position = 'relative';
          css.width = 'auto';
        }
    
        this.$dropdown.css(css);
      };
    
      AttachBody.prototype._showDropdown = function (decorated) {
        this.$dropdownContainer.appendTo(this.$dropdownParent);
    
        this._positionDropdown();
        this._resizeDropdown();
      };
    
      return AttachBody;
    });
    
    S2.define('select2/dropdown/minimumResultsForSearch',[
    
    ], function () {
      function countResults (data) {
        var count = 0;
    
        for (var d = 0; d < data.length; d++) {
          var item = data[d];
    
          if (item.children) {
            count += countResults(item.children);
          } else {
            count++;
          }
        }
    
        return count;
      }
    
      function MinimumResultsForSearch (decorated, $element, options, dataAdapter) {
        this.minimumResultsForSearch = options.get('minimumResultsForSearch');
    
        if (this.minimumResultsForSearch < 0) {
          this.minimumResultsForSearch = Infinity;
        }
    
        decorated.call(this, $element, options, dataAdapter);
      }
    
      MinimumResultsForSearch.prototype.showSearch = function (decorated, params) {
        if (countResults(params.data.results) < this.minimumResultsForSearch) {
          return false;
        }
    
        return decorated.call(this, params);
      };
    
      return MinimumResultsForSearch;
    });
    
    S2.define('select2/dropdown/selectOnClose',[
    
    ], function () {
      function SelectOnClose () { }
    
      SelectOnClose.prototype.bind = function (decorated, container, $container) {
        var self = this;
    
        decorated.call(this, container, $container);
    
        container.on('close', function (params) {
          self._handleSelectOnClose(params);
        });
      };
    
      SelectOnClose.prototype._handleSelectOnClose = function (_, params) {
        if (params && params.originalSelect2Event != null) {
          var event = params.originalSelect2Event;
    
          // Don't select an item if the close event was triggered from a select or
          // unselect event
          if (event._type === 'select' || event._type === 'unselect') {
            return;
          }
        }
    
        var $highlightedResults = this.getHighlightedResults();
    
        // Only select highlighted results
        if ($highlightedResults.length < 1) {
          return;
        }
    
        var data = $highlightedResults.data('data');
    
        // Don't re-select already selected resulte
        if (
          (data.element != null && data.element.selected) ||
          (data.element == null && data.selected)
        ) {
          return;
        }
    
        this.trigger('select', {
            data: data
        });
      };
    
      return SelectOnClose;
    });
    
    S2.define('select2/dropdown/closeOnSelect',[
    
    ], function () {
      function CloseOnSelect () { }
    
      CloseOnSelect.prototype.bind = function (decorated, container, $container) {
        var self = this;
    
        decorated.call(this, container, $container);
    
        container.on('select', function (evt) {
          self._selectTriggered(evt);
        });
    
        container.on('unselect', function (evt) {
          self._selectTriggered(evt);
        });
      };
    
      CloseOnSelect.prototype._selectTriggered = function (_, evt) {
        var originalEvent = evt.originalEvent;
    
        // Don't close if the control key is being held
        if (originalEvent && originalEvent.ctrlKey) {
          return;
        }
    
        this.trigger('close', {
          originalEvent: originalEvent,
          originalSelect2Event: evt
        });
      };
    
      return CloseOnSelect;
    });
    
    S2.define('select2/i18n/en',[],function () {
      // English
      return {
        errorLoading: function () {
          return 'The results could not be loaded.';
        },
        inputTooLong: function (args) {
          var overChars = args.input.length - args.maximum;
    
          var message = 'Please delete ' + overChars + ' character';
    
          if (overChars != 1) {
            message += 's';
          }
    
          return message;
        },
        inputTooShort: function (args) {
          var remainingChars = args.minimum - args.input.length;
    
          var message = 'Please enter ' + remainingChars + ' or more characters';
    
          return message;
        },
        loadingMore: function () {
          return 'Loading more results…';
        },
        maximumSelected: function (args) {
          var message = 'You can only select ' + args.maximum + ' item';
    
          if (args.maximum != 1) {
            message += 's';
          }
    
          return message;
        },
        noResults: function () {
          return 'No results found';
        },
        searching: function () {
          return 'Searching…';
        }
      };
    });
    
    S2.define('select2/defaults',[
      'jquery',
      'require',
    
      './results',
    
      './selection/single',
      './selection/multiple',
      './selection/placeholder',
      './selection/allowClear',
      './selection/search',
      './selection/eventRelay',
    
      './utils',
      './translation',
      './diacritics',
    
      './data/select',
      './data/array',
      './data/ajax',
      './data/tags',
      './data/tokenizer',
      './data/minimumInputLength',
      './data/maximumInputLength',
      './data/maximumSelectionLength',
    
      './dropdown',
      './dropdown/search',
      './dropdown/hidePlaceholder',
      './dropdown/infiniteScroll',
      './dropdown/attachBody',
      './dropdown/minimumResultsForSearch',
      './dropdown/selectOnClose',
      './dropdown/closeOnSelect',
    
      './i18n/en'
    ], function ($, require,
    
                 ResultsList,
    
                 SingleSelection, MultipleSelection, Placeholder, AllowClear,
                 SelectionSearch, EventRelay,
    
                 Utils, Translation, DIACRITICS,
    
                 SelectData, ArrayData, AjaxData, Tags, Tokenizer,
                 MinimumInputLength, MaximumInputLength, MaximumSelectionLength,
    
                 Dropdown, DropdownSearch, HidePlaceholder, InfiniteScroll,
                 AttachBody, MinimumResultsForSearch, SelectOnClose, CloseOnSelect,
    
                 EnglishTranslation) {
      function Defaults () {
        this.reset();
      }
    
      Defaults.prototype.apply = function (options) {
        options = $.extend(true, {}, this.defaults, options);
    
        if (options.dataAdapter == null) {
          if (options.ajax != null) {
            options.dataAdapter = AjaxData;
          } else if (options.data != null) {
            options.dataAdapter = ArrayData;
          } else {
            options.dataAdapter = SelectData;
          }
    
          if (options.minimumInputLength > 0) {
            options.dataAdapter = Utils.Decorate(
              options.dataAdapter,
              MinimumInputLength
            );
          }
    
          if (options.maximumInputLength > 0) {
            options.dataAdapter = Utils.Decorate(
              options.dataAdapter,
              MaximumInputLength
            );
          }
    
          if (options.maximumSelectionLength > 0) {
            options.dataAdapter = Utils.Decorate(
              options.dataAdapter,
              MaximumSelectionLength
            );
          }
    
          if (options.tags) {
            options.dataAdapter = Utils.Decorate(options.dataAdapter, Tags);
          }
    
          if (options.tokenSeparators != null || options.tokenizer != null) {
            options.dataAdapter = Utils.Decorate(
              options.dataAdapter,
              Tokenizer
            );
          }
    
          if (options.query != null) {
            var Query = require(options.amdBase + 'compat/query');
    
            options.dataAdapter = Utils.Decorate(
              options.dataAdapter,
              Query
            );
          }
    
          if (options.initSelection != null) {
            var InitSelection = require(options.amdBase + 'compat/initSelection');
    
            options.dataAdapter = Utils.Decorate(
              options.dataAdapter,
              InitSelection
            );
          }
        }
    
        if (options.resultsAdapter == null) {
          options.resultsAdapter = ResultsList;
    
          if (options.ajax != null) {
            options.resultsAdapter = Utils.Decorate(
              options.resultsAdapter,
              InfiniteScroll
            );
          }
    
          if (options.placeholder != null) {
            options.resultsAdapter = Utils.Decorate(
              options.resultsAdapter,
              HidePlaceholder
            );
          }
    
          if (options.selectOnClose) {
            options.resultsAdapter = Utils.Decorate(
              options.resultsAdapter,
              SelectOnClose
            );
          }
        }
    
        if (options.dropdownAdapter == null) {
          if (options.multiple) {
            options.dropdownAdapter = Dropdown;
          } else {
            var SearchableDropdown = Utils.Decorate(Dropdown, DropdownSearch);
    
            options.dropdownAdapter = SearchableDropdown;
          }
    
          if (options.minimumResultsForSearch !== 0) {
            options.dropdownAdapter = Utils.Decorate(
              options.dropdownAdapter,
              MinimumResultsForSearch
            );
          }
    
          if (options.closeOnSelect) {
            options.dropdownAdapter = Utils.Decorate(
              options.dropdownAdapter,
              CloseOnSelect
            );
          }
    
          if (
            options.dropdownCssClass != null ||
            options.dropdownCss != null ||
            options.adaptDropdownCssClass != null
          ) {
            var DropdownCSS = require(options.amdBase + 'compat/dropdownCss');
    
            options.dropdownAdapter = Utils.Decorate(
              options.dropdownAdapter,
              DropdownCSS
            );
          }
    
          options.dropdownAdapter = Utils.Decorate(
            options.dropdownAdapter,
            AttachBody
          );
        }
    
        if (options.selectionAdapter == null) {
          if (options.multiple) {
            options.selectionAdapter = MultipleSelection;
          } else {
            options.selectionAdapter = SingleSelection;
          }
    
          // Add the placeholder mixin if a placeholder was specified
          if (options.placeholder != null) {
            options.selectionAdapter = Utils.Decorate(
              options.selectionAdapter,
              Placeholder
            );
          }
    
          if (options.allowClear) {
            options.selectionAdapter = Utils.Decorate(
              options.selectionAdapter,
              AllowClear
            );
          }
    
          if (options.multiple) {
            options.selectionAdapter = Utils.Decorate(
              options.selectionAdapter,
              SelectionSearch
            );
          }
    
          if (
            options.containerCssClass != null ||
            options.containerCss != null ||
            options.adaptContainerCssClass != null
          ) {
            var ContainerCSS = require(options.amdBase + 'compat/containerCss');
    
            options.selectionAdapter = Utils.Decorate(
              options.selectionAdapter,
              ContainerCSS
            );
          }
    
          options.selectionAdapter = Utils.Decorate(
            options.selectionAdapter,
            EventRelay
          );
        }
    
        if (typeof options.language === 'string') {
          // Check if the language is specified with a region
          if (options.language.indexOf('-') > 0) {
            // Extract the region information if it is included
            var languageParts = options.language.split('-');
            var baseLanguage = languageParts[0];
    
            options.language = [options.language, baseLanguage];
          } else {
            options.language = [options.language];
          }
        }
    
        if ($.isArray(options.language)) {
          var languages = new Translation();
          options.language.push('en');
    
          var languageNames = options.language;
    
          for (var l = 0; l < languageNames.length; l++) {
            var name = languageNames[l];
            var language = {};
    
            try {
              // Try to load it with the original name
              language = Translation.loadPath(name);
            } catch (e) {
              try {
                // If we couldn't load it, check if it wasn't the full path
                name = this.defaults.amdLanguageBase + name;
                language = Translation.loadPath(name);
              } catch (ex) {
                // The translation could not be loaded at all. Sometimes this is
                // because of a configuration problem, other times this can be
                // because of how Select2 helps load all possible translation files.
                if (options.debug && window.console && console.warn) {
                  console.warn(
                    'Select2: The language file for "' + name + '" could not be ' +
                    'automatically loaded. A fallback will be used instead.'
                  );
                }
    
                continue;
              }
            }
    
            languages.extend(language);
          }
    
          options.translations = languages;
        } else {
          var baseTranslation = Translation.loadPath(
            this.defaults.amdLanguageBase + 'en'
          );
          var customTranslation = new Translation(options.language);
    
          customTranslation.extend(baseTranslation);
    
          options.translations = customTranslation;
        }
    
        return options;
      };
    
      Defaults.prototype.reset = function () {
        function stripDiacritics (text) {
          // Used 'uni range + named function' from http://jsperf.com/diacritics/18
          function match(a) {
            return DIACRITICS[a] || a;
          }
    
          return text.replace(/[^\u0000-\u007E]/g, match);
        }
    
        function matcher (params, data) {
          // Always return the object if there is nothing to compare
          if ($.trim(params.term) === '') {
            return data;
          }
    
          // Do a recursive check for options with children
          if (data.children && data.children.length > 0) {
            // Clone the data object if there are children
            // This is required as we modify the object to remove any non-matches
            var match = $.extend(true, {}, data);
    
            // Check each child of the option
            for (var c = data.children.length - 1; c >= 0; c--) {
              var child = data.children[c];
    
              var matches = matcher(params, child);
    
              // If there wasn't a match, remove the object in the array
              if (matches == null) {
                match.children.splice(c, 1);
              }
            }
    
            // If any children matched, return the new object
            if (match.children.length > 0) {
              return match;
            }
    
            // If there were no matching children, check just the plain object
            return matcher(params, match);
          }
    
          var original = stripDiacritics(data.text).toUpperCase();
          var term = stripDiacritics(params.term).toUpperCase();
    
          // Check if the text contains the term
          if (original.indexOf(term) > -1) {
            return data;
          }
    
          // If it doesn't contain the term, don't return anything
          return null;
        }
    
        this.defaults = {
          amdBase: './',
          amdLanguageBase: './i18n/',
          closeOnSelect: true,
          debug: false,
          dropdownAutoWidth: false,
          escapeMarkup: Utils.escapeMarkup,
          language: EnglishTranslation,
          matcher: matcher,
          minimumInputLength: 0,
          maximumInputLength: 0,
          maximumSelectionLength: 0,
          minimumResultsForSearch: 0,
          selectOnClose: false,
          sorter: function (data) {
            return data;
          },
          templateResult: function (result) {
            return result.text;
          },
          templateSelection: function (selection) {
            return selection.text;
          },
          theme: 'default',
          width: 'resolve'
        };
      };
    
      Defaults.prototype.set = function (key, value) {
        var camelKey = $.camelCase(key);
    
        var data = {};
        data[camelKey] = value;
    
        var convertedData = Utils._convertData(data);
    
        $.extend(this.defaults, convertedData);
      };
    
      var defaults = new Defaults();
    
      return defaults;
    });
    
    S2.define('select2/options',[
      'require',
      'jquery',
      './defaults',
      './utils'
    ], function (require, $, Defaults, Utils) {
      function Options (options, $element) {
        this.options = options;
    
        if ($element != null) {
          this.fromElement($element);
        }
    
        this.options = Defaults.apply(this.options);
    
        if ($element && $element.is('input')) {
          var InputCompat = require(this.get('amdBase') + 'compat/inputData');
    
          this.options.dataAdapter = Utils.Decorate(
            this.options.dataAdapter,
            InputCompat
          );
        }
      }
    
      Options.prototype.fromElement = function ($e) {
        var excludedData = ['select2'];
    
        if (this.options.multiple == null) {
          this.options.multiple = $e.prop('multiple');
        }
    
        if (this.options.disabled == null) {
          this.options.disabled = $e.prop('disabled');
        }
    
        if (this.options.language == null) {
          if ($e.prop('lang')) {
            this.options.language = $e.prop('lang').toLowerCase();
          } else if ($e.closest('[lang]').prop('lang')) {
            this.options.language = $e.closest('[lang]').prop('lang');
          }
        }
    
        if (this.options.dir == null) {
          if ($e.prop('dir')) {
            this.options.dir = $e.prop('dir');
          } else if ($e.closest('[dir]').prop('dir')) {
            this.options.dir = $e.closest('[dir]').prop('dir');
          } else {
            this.options.dir = 'ltr';
          }
        }
    
        $e.prop('disabled', this.options.disabled);
        $e.prop('multiple', this.options.multiple);
    
        if ($e.data('select2Tags')) {
          if (this.options.debug && window.console && console.warn) {
            console.warn(
              'Select2: The `data-select2-tags` attribute has been changed to ' +
              'use the `data-data` and `data-tags="true"` attributes and will be ' +
              'removed in future versions of Select2.'
            );
          }
    
          $e.data('data', $e.data('select2Tags'));
          $e.data('tags', true);
        }
    
        if ($e.data('ajaxUrl')) {
          if (this.options.debug && window.console && console.warn) {
            console.warn(
              'Select2: The `data-ajax-url` attribute has been changed to ' +
              '`data-ajax--url` and support for the old attribute will be removed' +
              ' in future versions of Select2.'
            );
          }
    
          $e.attr('ajax--url', $e.data('ajaxUrl'));
          $e.data('ajax--url', $e.data('ajaxUrl'));
        }
    
        var dataset = {};
    
        // Prefer the element's `dataset` attribute if it exists
        // jQuery 1.x does not correctly handle data attributes with multiple dashes
        if ($.fn.jquery && $.fn.jquery.substr(0, 2) == '1.' && $e[0].dataset) {
          dataset = $.extend(true, {}, $e[0].dataset, $e.data());
        } else {
          dataset = $e.data();
        }
    
        var data = $.extend(true, {}, dataset);
    
        data = Utils._convertData(data);
    
        for (var key in data) {
          if ($.inArray(key, excludedData) > -1) {
            continue;
          }
    
          if ($.isPlainObject(this.options[key])) {
            $.extend(this.options[key], data[key]);
          } else {
            this.options[key] = data[key];
          }
        }
    
        return this;
      };
    
      Options.prototype.get = function (key) {
        return this.options[key];
      };
    
      Options.prototype.set = function (key, val) {
        this.options[key] = val;
      };
    
      return Options;
    });
    
    S2.define('select2/core',[
      'jquery',
      './options',
      './utils',
      './keys'
    ], function ($, Options, Utils, KEYS) {
      var Select2 = function ($element, options) {
        if ($element.data('select2') != null) {
          $element.data('select2').destroy();
        }
    
        this.$element = $element;
    
        this.id = this._generateId($element);
    
        options = options || {};
    
        this.options = new Options(options, $element);
    
        Select2.__super__.constructor.call(this);
    
        // Set up the tabindex
    
        var tabindex = $element.attr('tabindex') || 0;
        $element.data('old-tabindex', tabindex);
        $element.attr('tabindex', '-1');
    
        // Set up containers and adapters
    
        var DataAdapter = this.options.get('dataAdapter');
        this.dataAdapter = new DataAdapter($element, this.options);
    
        var $container = this.render();
    
        this._placeContainer($container);
    
        var SelectionAdapter = this.options.get('selectionAdapter');
        this.selection = new SelectionAdapter($element, this.options);
        this.$selection = this.selection.render();
    
        this.selection.position(this.$selection, $container);
    
        var DropdownAdapter = this.options.get('dropdownAdapter');
        this.dropdown = new DropdownAdapter($element, this.options);
        this.$dropdown = this.dropdown.render();
    
        this.dropdown.position(this.$dropdown, $container);
    
        var ResultsAdapter = this.options.get('resultsAdapter');
        this.results = new ResultsAdapter($element, this.options, this.dataAdapter);
        this.$results = this.results.render();
    
        this.results.position(this.$results, this.$dropdown);
    
        // Bind events
    
        var self = this;
    
        // Bind the container to all of the adapters
        this._bindAdapters();
    
        // Register any DOM event handlers
        this._registerDomEvents();
    
        // Register any internal event handlers
        this._registerDataEvents();
        this._registerSelectionEvents();
        this._registerDropdownEvents();
        this._registerResultsEvents();
        this._registerEvents();
    
        // Set the initial state
        this.dataAdapter.current(function (initialData) {
          self.trigger('selection:update', {
            data: initialData
          });
        });
    
        // Hide the original select
        $element.addClass('select2-hidden-accessible');
        $element.attr('aria-hidden', 'true');
    
        // Synchronize any monitored attributes
        this._syncAttributes();
    
        $element.data('select2', this);
      };
    
      Utils.Extend(Select2, Utils.Observable);
    
      Select2.prototype._generateId = function ($element) {
        var id = '';
    
        if ($element.attr('id') != null) {
          id = $element.attr('id');
        } else if ($element.attr('name') != null) {
          id = $element.attr('name') + '-' + Utils.generateChars(2);
        } else {
          id = Utils.generateChars(4);
        }
    
        id = id.replace(/(:|\.|\[|\]|,)/g, '');
        id = 'select2-' + id;
    
        return id;
      };
    
      Select2.prototype._placeContainer = function ($container) {
        $container.insertAfter(this.$element);
    
        var width = this._resolveWidth(this.$element, this.options.get('width'));
    
        if (width != null) {
          $container.css('width', width);
        }
      };
    
      Select2.prototype._resolveWidth = function ($element, method) {
        var WIDTH = /^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;
    
        if (method == 'resolve') {
          var styleWidth = this._resolveWidth($element, 'style');
    
          if (styleWidth != null) {
            return styleWidth;
          }
    
          return this._resolveWidth($element, 'element');
        }
    
        if (method == 'element') {
          var elementWidth = $element.outerWidth(false);
    
          if (elementWidth <= 0) {
            return 'auto';
          }
    
          return elementWidth + 'px';
        }
    
        if (method == 'style') {
          var style = $element.attr('style');
    
          if (typeof(style) !== 'string') {
            return null;
          }
    
          var attrs = style.split(';');
    
          for (var i = 0, l = attrs.length; i < l; i = i + 1) {
            var attr = attrs[i].replace(/\s/g, '');
            var matches = attr.match(WIDTH);
    
            if (matches !== null && matches.length >= 1) {
              return matches[1];
            }
          }
    
          return null;
        }
    
        return method;
      };
    
      Select2.prototype._bindAdapters = function () {
        this.dataAdapter.bind(this, this.$container);
        this.selection.bind(this, this.$container);
    
        this.dropdown.bind(this, this.$container);
        this.results.bind(this, this.$container);
      };
    
      Select2.prototype._registerDomEvents = function () {
        var self = this;
    
        this.$element.on('change.select2', function () {
          self.dataAdapter.current(function (data) {
            self.trigger('selection:update', {
              data: data
            });
          });
        });
    
        this.$element.on('focus.select2', function (evt) {
          self.trigger('focus', evt);
        });
    
        this._syncA = Utils.bind(this._syncAttributes, this);
        this._syncS = Utils.bind(this._syncSubtree, this);
    
        if (this.$element[0].attachEvent) {
          this.$element[0].attachEvent('onpropertychange', this._syncA);
        }
    
        var observer = window.MutationObserver ||
          window.WebKitMutationObserver ||
          window.MozMutationObserver
        ;
    
        if (observer != null) {
          this._observer = new observer(function (mutations) {
            $.each(mutations, self._syncA);
            $.each(mutations, self._syncS);
          });
          this._observer.observe(this.$element[0], {
            attributes: true,
            childList: true,
            subtree: false
          });
        } else if (this.$element[0].addEventListener) {
          this.$element[0].addEventListener(
            'DOMAttrModified',
            self._syncA,
            false
          );
          this.$element[0].addEventListener(
            'DOMNodeInserted',
            self._syncS,
            false
          );
          this.$element[0].addEventListener(
            'DOMNodeRemoved',
            self._syncS,
            false
          );
        }
      };
    
      Select2.prototype._registerDataEvents = function () {
        var self = this;
    
        this.dataAdapter.on('*', function (name, params) {
          self.trigger(name, params);
        });
      };
    
      Select2.prototype._registerSelectionEvents = function () {
        var self = this;
        var nonRelayEvents = ['toggle', 'focus'];
    
        this.selection.on('toggle', function () {
          self.toggleDropdown();
        });
    
        this.selection.on('focus', function (params) {
          self.focus(params);
        });
    
        this.selection.on('*', function (name, params) {
          if ($.inArray(name, nonRelayEvents) !== -1) {
            return;
          }
    
          self.trigger(name, params);
        });
      };
    
      Select2.prototype._registerDropdownEvents = function () {
        var self = this;
    
        this.dropdown.on('*', function (name, params) {
          self.trigger(name, params);
        });
      };
    
      Select2.prototype._registerResultsEvents = function () {
        var self = this;
    
        this.results.on('*', function (name, params) {
          self.trigger(name, params);
        });
      };
    
      Select2.prototype._registerEvents = function () {
        var self = this;
    
        this.on('open', function () {
          self.$container.addClass('select2-container--open');
        });
    
        this.on('close', function () {
          self.$container.removeClass('select2-container--open');
        });
    
        this.on('enable', function () {
          self.$container.removeClass('select2-container--disabled');
        });
    
        this.on('disable', function () {
          self.$container.addClass('select2-container--disabled');
        });
    
        this.on('blur', function () {
          self.$container.removeClass('select2-container--focus');
        });
    
        this.on('query', function (params) {
          if (!self.isOpen()) {
            self.trigger('open', {});
          }
    
          this.dataAdapter.query(params, function (data) {
            self.trigger('results:all', {
              data: data,
              query: params
            });
          });
        });
    
        this.on('query:append', function (params) {
          this.dataAdapter.query(params, function (data) {
            self.trigger('results:append', {
              data: data,
              query: params
            });
          });
        });
    
        this.on('keypress', function (evt) {
          var key = evt.which;
    
          if (self.isOpen()) {
            if (key === KEYS.ESC || key === KEYS.TAB ||
                (key === KEYS.UP && evt.altKey)) {
              self.close();
    
              evt.preventDefault();
            } else if (key === KEYS.ENTER) {
              self.trigger('results:select', {});
    
              evt.preventDefault();
            } else if ((key === KEYS.SPACE && evt.ctrlKey)) {
              self.trigger('results:toggle', {});
    
              evt.preventDefault();
            } else if (key === KEYS.UP) {
              self.trigger('results:previous', {});
    
              evt.preventDefault();
            } else if (key === KEYS.DOWN) {
              self.trigger('results:next', {});
    
              evt.preventDefault();
            }
          } else {
            if (key === KEYS.ENTER || key === KEYS.SPACE ||
                (key === KEYS.DOWN && evt.altKey)) {
              self.open();
    
              evt.preventDefault();
            }
          }
        });
      };
    
      Select2.prototype._syncAttributes = function () {
        this.options.set('disabled', this.$element.prop('disabled'));
    
        if (this.options.get('disabled')) {
          if (this.isOpen()) {
            this.close();
          }
    
          this.trigger('disable', {});
        } else {
          this.trigger('enable', {});
        }
      };
    
      Select2.prototype._syncSubtree = function (evt, mutations) {
        var changed = false;
        var self = this;
    
        // Ignore any mutation events raised for elements that aren't options or
        // optgroups. This handles the case when the select element is destroyed
        if (
          evt && evt.target && (
            evt.target.nodeName !== 'OPTION' && evt.target.nodeName !== 'OPTGROUP'
          )
        ) {
          return;
        }
    
        if (!mutations) {
          // If mutation events aren't supported, then we can only assume that the
          // change affected the selections
          changed = true;
        } else if (mutations.addedNodes && mutations.addedNodes.length > 0) {
          for (var n = 0; n < mutations.addedNodes.length; n++) {
            var node = mutations.addedNodes[n];
    
            if (node.selected) {
              changed = true;
            }
          }
        } else if (mutations.removedNodes && mutations.removedNodes.length > 0) {
          changed = true;
        }
    
        // Only re-pull the data if we think there is a change
        if (changed) {
          this.dataAdapter.current(function (currentData) {
            self.trigger('selection:update', {
              data: currentData
            });
          });
        }
      };
    
      /**
       * Override the trigger method to automatically trigger pre-events when
       * there are events that can be prevented.
       */
      Select2.prototype.trigger = function (name, args) {
        var actualTrigger = Select2.__super__.trigger;
        var preTriggerMap = {
          'open': 'opening',
          'close': 'closing',
          'select': 'selecting',
          'unselect': 'unselecting'
        };
    
        if (args === undefined) {
          args = {};
        }
    
        if (name in preTriggerMap) {
          var preTriggerName = preTriggerMap[name];
          var preTriggerArgs = {
            prevented: false,
            name: name,
            args: args
          };
    
          actualTrigger.call(this, preTriggerName, preTriggerArgs);
    
          if (preTriggerArgs.prevented) {
            args.prevented = true;
    
            return;
          }
        }
    
        actualTrigger.call(this, name, args);
      };
    
      Select2.prototype.toggleDropdown = function () {
        if (this.options.get('disabled')) {
          return;
        }
    
        if (this.isOpen()) {
          this.close();
        } else {
          this.open();
        }
      };
    
      Select2.prototype.open = function () {
        if (this.isOpen()) {
          return;
        }
    
        this.trigger('query', {});
      };
    
      Select2.prototype.close = function () {
        if (!this.isOpen()) {
          return;
        }
    
        this.trigger('close', {});
      };
    
      Select2.prototype.isOpen = function () {
        return this.$container.hasClass('select2-container--open');
      };
    
      Select2.prototype.hasFocus = function () {
        return this.$container.hasClass('select2-container--focus');
      };
    
      Select2.prototype.focus = function (data) {
        // No need to re-trigger focus events if we are already focused
        if (this.hasFocus()) {
          return;
        }
    
        this.$container.addClass('select2-container--focus');
        this.trigger('focus', {});
      };
    
      Select2.prototype.enable = function (args) {
        if (this.options.get('debug') && window.console && console.warn) {
          console.warn(
            'Select2: The `select2("enable")` method has been deprecated and will' +
            ' be removed in later Select2 versions. Use $element.prop("disabled")' +
            ' instead.'
          );
        }
    
        if (args == null || args.length === 0) {
          args = [true];
        }
    
        var disabled = !args[0];
    
        this.$element.prop('disabled', disabled);
      };
    
      Select2.prototype.data = function () {
        if (this.options.get('debug') &&
            arguments.length > 0 && window.console && console.warn) {
          console.warn(
            'Select2: Data can no longer be set using `select2("data")`. You ' +
            'should consider setting the value instead using `$element.val()`.'
          );
        }
    
        var data = [];
    
        this.dataAdapter.current(function (currentData) {
          data = currentData;
        });
    
        return data;
      };
    
      Select2.prototype.val = function (args) {
        if (this.options.get('debug') && window.console && console.warn) {
          console.warn(
            'Select2: The `select2("val")` method has been deprecated and will be' +
            ' removed in later Select2 versions. Use $element.val() instead.'
          );
        }
    
        if (args == null || args.length === 0) {
          return this.$element.val();
        }
    
        var newVal = args[0];
    
        if ($.isArray(newVal)) {
          newVal = $.map(newVal, function (obj) {
            return obj.toString();
          });
        }
    
        this.$element.val(newVal).trigger('change');
      };
    
      Select2.prototype.destroy = function () {
        this.$container.remove();
    
        if (this.$element[0].detachEvent) {
          this.$element[0].detachEvent('onpropertychange', this._syncA);
        }
    
        if (this._observer != null) {
          this._observer.disconnect();
          this._observer = null;
        } else if (this.$element[0].removeEventListener) {
          this.$element[0]
            .removeEventListener('DOMAttrModified', this._syncA, false);
          this.$element[0]
            .removeEventListener('DOMNodeInserted', this._syncS, false);
          this.$element[0]
            .removeEventListener('DOMNodeRemoved', this._syncS, false);
        }
    
        this._syncA = null;
        this._syncS = null;
    
        this.$element.off('.select2');
        this.$element.attr('tabindex', this.$element.data('old-tabindex'));
    
        this.$element.removeClass('select2-hidden-accessible');
        this.$element.attr('aria-hidden', 'false');
        this.$element.removeData('select2');
    
        this.dataAdapter.destroy();
        this.selection.destroy();
        this.dropdown.destroy();
        this.results.destroy();
    
        this.dataAdapter = null;
        this.selection = null;
        this.dropdown = null;
        this.results = null;
      };
    
      Select2.prototype.render = function () {
        var $container = $(
          '<span class="select2 select2-container">' +
            '<span class="selection"></span>' +
            '<span class="dropdown-wrapper" aria-hidden="true"></span>' +
          '</span>'
        );
    
        $container.attr('dir', this.options.get('dir'));
    
        this.$container = $container;
    
        this.$container.addClass('select2-container--' + this.options.get('theme'));
    
        $container.data('element', this.$element);
    
        return $container;
      };
    
      return Select2;
    });
    
    S2.define('jquery-mousewheel',[
      'jquery'
    ], function ($) {
      // Used to shim jQuery.mousewheel for non-full builds.
      return $;
    });
    
    S2.define('jquery.select2',[
      'jquery',
      'jquery-mousewheel',
    
      './select2/core',
      './select2/defaults'
    ], function ($, _, Select2, Defaults) {
      if ($.fn.select2 == null) {
        // All methods that should return the element
        var thisMethods = ['open', 'close', 'destroy'];
    
        $.fn.select2 = function (options) {
          options = options || {};
    
          if (typeof options === 'object') {
            this.each(function () {
              var instanceOptions = $.extend(true, {}, options);
    
              var instance = new Select2($(this), instanceOptions);
            });
    
            return this;
          } else if (typeof options === 'string') {
            var ret;
            var args = Array.prototype.slice.call(arguments, 1);
    
            this.each(function () {
              var instance = $(this).data('select2');
    
              if (instance == null && window.console && console.error) {
                console.error(
                  'The select2(\'' + options + '\') method was called on an ' +
                  'element that is not using Select2.'
                );
              }
    
              ret = instance[options].apply(instance, args);
            });
    
            // Check if we should be returning `this`
            if ($.inArray(options, thisMethods) > -1) {
              return this;
            }
    
            return ret;
          } else {
            throw new Error('Invalid arguments for Select2: ' + options);
          }
        };
      }
    
      if ($.fn.select2.defaults == null) {
        $.fn.select2.defaults = Defaults;
      }
    
      return Select2;
    });
    
      // Return the AMD loader configuration so it can be used outside of this file
      return {
        define: S2.define,
        require: S2.require
      };
    }());
    
      // Autoload the jQuery bindings
      // We know that all of the modules exist above this, so we're safe
      var select2 = S2.require('jquery.select2');
    
      // Hold the AMD module references on the jQuery function that was just loaded
      // This allows Select2 to use the internal loader outside of this file, such
      // as in the language files.
      jQuery.fn.select2.amd = S2;
    
      // Return the Select2 instance for anyone who is importing it.
      return select2;
    }));
    
    
    /***/ }),
    /* 582 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    $(function () {
      $('.agree-popup__btn').click(function () {
        $('.agree-popup').hide();
      });
    });
    
    /***/ }),
    /* 583 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    // $(".open_fancybox").click(function() {
    //   console.log('12321312');
    //    $.fancybox.open([])
    // });
    
    
    // console.log($slideImages);
    
    // $(".fancybox-button").fancybox({
    // 	prevEffect		: 'none',
    // 	nextEffect		: 'none',
    // 	closeBtn		: false,
    // 	helpers		: {
    // 		title	: { type : 'inside' },
    // 		buttons	: {}
    // 	}
    // });
    
    //   $(".open_fancybox").fancybox({
    //     console.log('12321321');
    //     afterClose : function() {
    //         location.reload();
    //         return;
    //     }
    // });
    
    
    /***/ }),
    /* 584 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    __webpack_require__(585);
    
    var _gsap = __webpack_require__(12);
    
    var _ScrollMagic = __webpack_require__(35);
    
    var _ScrollMagic2 = _interopRequireDefault(_ScrollMagic);
    
    var _helpers = __webpack_require__(3);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
    
    function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
    
    var detectPage = function detectPage() {
      return $('body').find('main').data('page');
    };
    detectPage();
    if (detectPage() == 'home') {
      if (window.matchMedia('(min-width: 1200px)').matches) {
    
        var controller = new _ScrollMagic2.default.Controller();
    
        // $('.anonce-block__part').each(function() {
        var currentElem = [].concat(_toConsumableArray(document.querySelectorAll('.anonce-block__part')));
        var currentElemLength = currentElem.length;
        // console.log(currentElem);
    
        var currentCicle = [].concat(_toConsumableArray(document.querySelectorAll('.anonce-block__cicle')));
        var currentCicleLength = currentCicle.length;
    
        var tweenPart = new TimelineMax();
        // tweenPart.from(currentElem, 1, {delay: 0.5, x: -50, opacity: 0, ease: Power2.easeInOut } );
    
    
        tweenPart.call(function () {
          if (document.querySelector('.anonce-block__cicles') < 1) {
            return;
          } else {
            document.querySelector('.anonce-block__cicles').classList.add('anim');
          }
        });
    
        tweenPart.staggerFrom(currentCicle, 1, { scale: 0 }, .5);
    
        tweenPart.staggerTo(currentElem, 1, { cycle: { x: [20, 40, 60] } }, .3);
    
        if (currentElemLength > 0 && currentCicleLength > 0) {
          var _ref;
    
          var scene = new _ScrollMagic2.default.Scene((_ref = {
            triggerElement: currentElem
          }, _defineProperty(_ref, 'triggerElement', currentCicle), _defineProperty(_ref, 'triggerHook', 1), _ref)).setTween(tweenPart).addTo(controller);
        }
        // });
      }
    }
    
    /***/ }),
    /* 585 */
    /***/ (function(module, exports, __webpack_require__) {
    
    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! ScrollMagic v2.0.5 | (c) 2015 Jan Paepke (@janpaepke) | license & info: http://scrollmagic.io */
    
    !function(e,n){ true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(35),__webpack_require__(12),__webpack_require__(586)], __WEBPACK_AMD_DEFINE_FACTORY__ = (n),
                    __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
                    (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
                    __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):"object"==typeof exports?(require("gsap"),n(require("scrollmagic"),TweenMax,TimelineMax)):n(e.ScrollMagic||e.jQuery&&e.jQuery.ScrollMagic,e.TweenMax||e.TweenLite,e.TimelineMax||e.TimelineLite)}(this,function(e,n,r){"use strict";e.Scene.addOption("tweenChanges",!1,function(e){return!!e}),e.Scene.extend(function(){var e,t=this;t.on("progress.plugin_gsap",function(){i()}),t.on("destroy.plugin_gsap",function(e){t.removeTween(e.reset)});var i=function(){if(e){var n=t.progress(),r=t.state();e.repeat&&-1===e.repeat()?"DURING"===r&&e.paused()?e.play():"DURING"===r||e.paused()||e.pause():n!=e.progress()&&(0===t.duration()?n>0?e.play():e.reverse():t.tweenChanges()&&e.tweenTo?e.tweenTo(n*e.duration()):e.progress(n).pause())}};t.setTween=function(o,a,s){var u;arguments.length>1&&(arguments.length<3&&(s=a,a=1),o=n.to(o,a,s));try{u=r?new r({smoothChildTiming:!0}).add(o):o,u.pause()}catch(e){return t}return e&&t.removeTween(),e=u,o.repeat&&-1===o.repeat()&&(e.repeat(-1),e.yoyo(o.yoyo())),i(),t},t.removeTween=function(n){return e&&(n&&e.progress(0).pause(),e.kill(),e=void 0),t}})});
    
    /***/ }),
    /* 586 */
    /***/ (function(module, exports, __webpack_require__) {
    
    /* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
     * VERSION: 1.20.2
     * DATE: 2017-06-30
     * UPDATES AND DOCS AT: http://greensock.com
     *
     * @license Copyright (c) 2008-2017, GreenSock. All rights reserved.
     * This work is subject to the terms at http://greensock.com/standard-license or for
     * Club GreenSock members, the software agreement that was issued with your membership.
     * 
     * @author: Jack Doyle, jack@greensock.com
     */
    var _gsScope = (typeof(module) !== "undefined" && module.exports && typeof(global) !== "undefined") ? global : this || window; //helps ensure compatibility with AMD/RequireJS and CommonJS/Node
    (_gsScope._gsQueue || (_gsScope._gsQueue = [])).push( function() {
    
        "use strict";
    
        _gsScope._gsDefine("TimelineMax", ["TimelineLite","TweenLite","easing.Ease"], function(TimelineLite, TweenLite, Ease) {
            
            var TimelineMax = function(vars) {
                    TimelineLite.call(this, vars);
                    this._repeat = this.vars.repeat || 0;
                    this._repeatDelay = this.vars.repeatDelay || 0;
                    this._cycle = 0;
                    this._yoyo = (this.vars.yoyo === true);
                    this._dirty = true;
                },
                _tinyNum = 0.0000000001,
                TweenLiteInternals = TweenLite._internals,
                _lazyTweens = TweenLiteInternals.lazyTweens,
                _lazyRender = TweenLiteInternals.lazyRender,
                _globals = _gsScope._gsDefine.globals,
                _easeNone = new Ease(null, null, 1, 0),
                p = TimelineMax.prototype = new TimelineLite();
                
            p.constructor = TimelineMax;
            p.kill()._gc = false;
            TimelineMax.version = "1.20.2";
            
            p.invalidate = function() {
                this._yoyo = (this.vars.yoyo === true);
                this._repeat = this.vars.repeat || 0;
                this._repeatDelay = this.vars.repeatDelay || 0;
                this._uncache(true);
                return TimelineLite.prototype.invalidate.call(this);
            };
            
            p.addCallback = function(callback, position, params, scope) {
                return this.add( TweenLite.delayedCall(0, callback, params, scope), position);
            };
            
            p.removeCallback = function(callback, position) {
                if (callback) {
                    if (position == null) {
                        this._kill(null, callback);
                    } else {
                        var a = this.getTweensOf(callback, false),
                            i = a.length,
                            time = this._parseTimeOrLabel(position);
                        while (--i > -1) {
                            if (a[i]._startTime === time) {
                                a[i]._enabled(false, false);
                            }
                        }
                    }
                }
                return this;
            };
    
            p.removePause = function(position) {
                return this.removeCallback(TimelineLite._internals.pauseCallback, position);
            };
            
            p.tweenTo = function(position, vars) {
                vars = vars || {};
                var copy = {ease:_easeNone, useFrames:this.usesFrames(), immediateRender:false},
                    Engine = (vars.repeat && _globals.TweenMax) || TweenLite,
                    duration, p, t;
                for (p in vars) {
                    copy[p] = vars[p];
                }
                copy.time = this._parseTimeOrLabel(position);
                duration = (Math.abs(Number(copy.time) - this._time) / this._timeScale) || 0.001;
                t = new Engine(this, duration, copy);
                copy.onStart = function() {
                    t.target.paused(true);
                    if (t.vars.time !== t.target.time() && duration === t.duration()) { //don't make the duration zero - if it's supposed to be zero, don't worry because it's already initting the tween and will complete immediately, effectively making the duration zero anyway. If we make duration zero, the tween won't run at all.
                        t.duration( Math.abs( t.vars.time - t.target.time()) / t.target._timeScale );
                    }
                    if (vars.onStart) { //in case the user had an onStart in the vars - we don't want to overwrite it.
                        vars.onStart.apply(vars.onStartScope || vars.callbackScope || t, vars.onStartParams || []); //don't use t._callback("onStart") or it'll point to the copy.onStart and we'll get a recursion error.
                    }
                };
                return t;
            };
            
            p.tweenFromTo = function(fromPosition, toPosition, vars) {
                vars = vars || {};
                fromPosition = this._parseTimeOrLabel(fromPosition);
                vars.startAt = {onComplete:this.seek, onCompleteParams:[fromPosition], callbackScope:this};
                vars.immediateRender = (vars.immediateRender !== false);
                var t = this.tweenTo(toPosition, vars);
                return t.duration((Math.abs( t.vars.time - fromPosition) / this._timeScale) || 0.001);
            };
            
            p.render = function(time, suppressEvents, force) {
                if (this._gc) {
                    this._enabled(true, false);
                }
                var totalDur = (!this._dirty) ? this._totalDuration : this.totalDuration(),
                    dur = this._duration,
                    prevTime = this._time, 
                    prevTotalTime = this._totalTime, 
                    prevStart = this._startTime, 
                    prevTimeScale = this._timeScale, 
                    prevRawPrevTime = this._rawPrevTime,
                    prevPaused = this._paused, 
                    prevCycle = this._cycle, 
                    tween, isComplete, next, callback, internalForce, cycleDuration, pauseTween, curTime;
                if (time >= totalDur - 0.0000001 && time >= 0) { //to work around occasional floating point math artifacts.
                    if (!this._locked) {
                        this._totalTime = totalDur;
                        this._cycle = this._repeat;
                    }
                    if (!this._reversed) if (!this._hasPausedChild()) {
                        isComplete = true;
                        callback = "onComplete";
                        internalForce = !!this._timeline.autoRemoveChildren; //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.
                        if (this._duration === 0) if ((time <= 0 && time >= -0.0000001) || prevRawPrevTime < 0 || prevRawPrevTime === _tinyNum) if (prevRawPrevTime !== time && this._first) {
                            internalForce = true;
                            if (prevRawPrevTime > _tinyNum) {
                                callback = "onReverseComplete";
                            }
                        }
                    }
                    this._rawPrevTime = (this._duration || !suppressEvents || time || this._rawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                    if (this._yoyo && (this._cycle & 1) !== 0) {
                        this._time = time = 0;
                    } else {
                        this._time = dur;
                        time = dur + 0.0001; //to avoid occasional floating point rounding errors - sometimes child tweens/timelines were not being fully completed (their progress might be 0.999999999999998 instead of 1 because when _time - tween._startTime is performed, floating point errors would return a value that was SLIGHTLY off). Try (999999999999.7 - 999999999999) * 1 = 0.699951171875 instead of 0.7. We cannot do less then 0.0001 because the same issue can occur when the duration is extremely large like 999999999999 in which case adding 0.00000001, for example, causes it to act like nothing was added.
                    }
                    
                } else if (time < 0.0000001) { //to work around occasional floating point math artifacts, round super small values to 0.
                    if (!this._locked) {
                        this._totalTime = this._cycle = 0;
                    }
                    this._time = 0;
                    if (prevTime !== 0 || (dur === 0 && prevRawPrevTime !== _tinyNum && (prevRawPrevTime > 0 || (time < 0 && prevRawPrevTime >= 0)) && !this._locked)) { //edge case for checking time < 0 && prevRawPrevTime >= 0: a zero-duration fromTo() tween inside a zero-duration timeline (yeah, very rare)
                        callback = "onReverseComplete";
                        isComplete = this._reversed;
                    }
                    if (time < 0) {
                        this._active = false;
                        if (this._timeline.autoRemoveChildren && this._reversed) {
                            internalForce = isComplete = true;
                            callback = "onReverseComplete";
                        } else if (prevRawPrevTime >= 0 && this._first) { //when going back beyond the start, force a render so that zero-duration tweens that sit at the very beginning render their start values properly. Otherwise, if the parent timeline's playhead lands exactly at this timeline's startTime, and then moves backwards, the zero-duration tweens at the beginning would still be at their end state.
                            internalForce = true;
                        }
                        this._rawPrevTime = time;
                    } else {
                        this._rawPrevTime = (dur || !suppressEvents || time || this._rawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                        if (time === 0 && isComplete) { //if there's a zero-duration tween at the very beginning of a timeline and the playhead lands EXACTLY at time 0, that tween will correctly render its end values, but we need to keep the timeline alive for one more render so that the beginning values render properly as the parent's playhead keeps moving beyond the begining. Imagine obj.x starts at 0 and then we do tl.set(obj, {x:100}).to(obj, 1, {x:200}) and then later we tl.reverse()...the goal is to have obj.x revert to 0. If the playhead happens to land on exactly 0, without this chunk of code, it'd complete the timeline and remove it from the rendering queue (not good).
                            tween = this._first;
                            while (tween && tween._startTime === 0) {
                                if (!tween._duration) {
                                    isComplete = false;
                                }
                                tween = tween._next;
                            }
                        }
                        time = 0; //to avoid occasional floating point rounding errors (could cause problems especially with zero-duration tweens at the very beginning of the timeline)
                        if (!this._initted) {
                            internalForce = true;
                        }
                    }
                    
                } else {
                    if (dur === 0 && prevRawPrevTime < 0) { //without this, zero-duration repeating timelines (like with a simple callback nested at the very beginning and a repeatDelay) wouldn't render the first time through.
                        internalForce = true;
                    }
                    this._time = this._rawPrevTime = time;
                    if (!this._locked) {
                        this._totalTime = time;
                        if (this._repeat !== 0) {
                            cycleDuration = dur + this._repeatDelay;
                            this._cycle = (this._totalTime / cycleDuration) >> 0; //originally _totalTime % cycleDuration but floating point errors caused problems, so I normalized it. (4 % 0.8 should be 0 but it gets reported as 0.79999999!)
                            if (this._cycle !== 0) if (this._cycle === this._totalTime / cycleDuration && prevTotalTime <= time) {
                                this._cycle--; //otherwise when rendered exactly at the end time, it will act as though it is repeating (at the beginning)
                            }
                            this._time = this._totalTime - (this._cycle * cycleDuration);
                            if (this._yoyo) if ((this._cycle & 1) !== 0) {
                                this._time = dur - this._time;
                            }
                            if (this._time > dur) {
                                this._time = dur;
                                time = dur + 0.0001; //to avoid occasional floating point rounding error
                            } else if (this._time < 0) {
                                this._time = time = 0;
                            } else {
                                time = this._time;
                            }
                        }
                    }
    
                    if (this._hasPause && !this._forcingPlayhead && !suppressEvents) {
                        time = this._time;
                        if (time >= prevTime || (this._repeat && prevCycle !== this._cycle)) {
                            tween = this._first;
                            while (tween && tween._startTime <= time && !pauseTween) {
                                if (!tween._duration) if (tween.data === "isPause" && !tween.ratio && !(tween._startTime === 0 && this._rawPrevTime === 0)) {
                                    pauseTween = tween;
                                }
                                tween = tween._next;
                            }
                        } else {
                            tween = this._last;
                            while (tween && tween._startTime >= time && !pauseTween) {
                                if (!tween._duration) if (tween.data === "isPause" && tween._rawPrevTime > 0) {
                                    pauseTween = tween;
                                }
                                tween = tween._prev;
                            }
                        }
                        if (pauseTween && pauseTween._startTime < dur) {
                            this._time = time = pauseTween._startTime;
                            this._totalTime = time + (this._cycle * (this._totalDuration + this._repeatDelay));
                        }
                    }
    
                }
                
                if (this._cycle !== prevCycle) if (!this._locked) {
                    /*
                    make sure children at the end/beginning of the timeline are rendered properly. If, for example, 
                    a 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which
                    would get transated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there
                    could be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So 
                    we need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must
                    ensure that zero-duration tweens at the very beginning or end of the TimelineMax work. 
                    */
                    var backwards = (this._yoyo && (prevCycle & 1) !== 0),
                        wrap = (backwards === (this._yoyo && (this._cycle & 1) !== 0)),
                        recTotalTime = this._totalTime,
                        recCycle = this._cycle,
                        recRawPrevTime = this._rawPrevTime,
                        recTime = this._time;
                    
                    this._totalTime = prevCycle * dur;
                    if (this._cycle < prevCycle) {
                        backwards = !backwards;
                    } else {
                        this._totalTime += dur;
                    }
                    this._time = prevTime; //temporarily revert _time so that render() renders the children in the correct order. Without this, tweens won't rewind correctly. We could arhictect things in a "cleaner" way by splitting out the rendering queue into a separate method but for performance reasons, we kept it all inside this method.
                    
                    this._rawPrevTime = (dur === 0) ? prevRawPrevTime - 0.0001 : prevRawPrevTime;
                    this._cycle = prevCycle;
                    this._locked = true; //prevents changes to totalTime and skips repeat/yoyo behavior when we recursively call render()
                    prevTime = (backwards) ? 0 : dur;
                    this.render(prevTime, suppressEvents, (dur === 0));
                    if (!suppressEvents) if (!this._gc) {
                        if (this.vars.onRepeat) {
                            this._cycle = recCycle; //in case the onRepeat alters the playhead or invalidates(), we shouldn't stay locked or use the previous cycle.
                            this._locked = false;
                            this._callback("onRepeat");
                        }
                    }
                    if (prevTime !== this._time) { //in case there's a callback like onComplete in a nested tween/timeline that changes the playhead position, like via seek(), we should just abort.
                        return;
                    }
                    if (wrap) {
                        this._cycle = prevCycle; //if there's an onRepeat, we reverted this above, so make sure it's set properly again. We also unlocked in that scenario, so reset that too.
                        this._locked = true;
                        prevTime = (backwards) ? dur + 0.0001 : -0.0001;
                        this.render(prevTime, true, false);
                    }
                    this._locked = false;
                    if (this._paused && !prevPaused) { //if the render() triggered callback that paused this timeline, we should abort (very rare, but possible)
                        return;
                    }
                    this._time = recTime;
                    this._totalTime = recTotalTime;
                    this._cycle = recCycle;
                    this._rawPrevTime = recRawPrevTime;
                }
    
                if ((this._time === prevTime || !this._first) && !force && !internalForce && !pauseTween) {
                    if (prevTotalTime !== this._totalTime) if (this._onUpdate) if (!suppressEvents) { //so that onUpdate fires even during the repeatDelay - as long as the totalTime changed, we should trigger onUpdate.
                        this._callback("onUpdate");
                    }
                    return;
                } else if (!this._initted) {
                    this._initted = true;
                }
    
                if (!this._active) if (!this._paused && this._totalTime !== prevTotalTime && time > 0) {
                    this._active = true;  //so that if the user renders the timeline (as opposed to the parent timeline rendering it), it is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the timeline already finished but the user manually re-renders it as halfway done, for example.
                }
                
                if (prevTotalTime === 0) if (this.vars.onStart) if (this._totalTime !== 0 || !this._totalDuration) if (!suppressEvents) {
                    this._callback("onStart");
                }
    
                curTime = this._time;
                if (curTime >= prevTime) {
                    tween = this._first;
                    while (tween) {
                        next = tween._next; //record it here because the value could change after rendering...
                        if (curTime !== this._time || (this._paused && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
                            break;
                        } else if (tween._active || (tween._startTime <= this._time && !tween._paused && !tween._gc)) {
                            if (pauseTween === tween) {
                                this.pause();
                            }
                            if (!tween._reversed) {
                                tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
                            } else {
                                tween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);
                            }
                        }
                        tween = next;
                    }
                } else {
                    tween = this._last;
                    while (tween) {
                        next = tween._prev; //record it here because the value could change after rendering...
                        if (curTime !== this._time || (this._paused && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
                            break;
                        } else if (tween._active || (tween._startTime <= prevTime && !tween._paused && !tween._gc)) {
                            if (pauseTween === tween) {
                                pauseTween = tween._prev; //the linked list is organized by _startTime, thus it's possible that a tween could start BEFORE the pause and end after it, in which case it would be positioned before the pause tween in the linked list, but we should render it before we pause() the timeline and cease rendering. This is only a concern when going in reverse.
                                while (pauseTween && pauseTween.endTime() > this._time) {
                                    pauseTween.render( (pauseTween._reversed ? pauseTween.totalDuration() - ((time - pauseTween._startTime) * pauseTween._timeScale) : (time - pauseTween._startTime) * pauseTween._timeScale), suppressEvents, force);
                                    pauseTween = pauseTween._prev;
                                }
                                pauseTween = null;
                                this.pause();
                            }
                            if (!tween._reversed) {
                                tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
                            } else {
                                tween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);
                            }
                        }
                        tween = next;
                    }
                }
                
                if (this._onUpdate) if (!suppressEvents) {
                    if (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.
                        _lazyRender();
                    }
                    this._callback("onUpdate");
                }
                if (callback) if (!this._locked) if (!this._gc) if (prevStart === this._startTime || prevTimeScale !== this._timeScale) if (this._time === 0 || totalDur >= this.totalDuration()) { //if one of the tweens that was rendered altered this timeline's startTime (like if an onComplete reversed the timeline), it probably isn't complete. If it is, don't worry, because whatever call altered the startTime would complete if it was necessary at the new time. The only exception is the timeScale property. Also check _gc because there's a chance that kill() could be called in an onUpdate
                    if (isComplete) {
                        if (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onComplete on a timeline that reports/checks tweened values.
                            _lazyRender();
                        }
                        if (this._timeline.autoRemoveChildren) {
                            this._enabled(false, false);
                        }
                        this._active = false;
                    }
                    if (!suppressEvents && this.vars[callback]) {
                        this._callback(callback);
                    }
                }
            };
            
            p.getActive = function(nested, tweens, timelines) {
                if (nested == null) {
                    nested = true;
                }
                if (tweens == null) {
                    tweens = true;
                }
                if (timelines == null) {
                    timelines = false;
                }
                var a = [], 
                    all = this.getChildren(nested, tweens, timelines), 
                    cnt = 0, 
                    l = all.length,
                    i, tween;
                for (i = 0; i < l; i++) {
                    tween = all[i];
                    if (tween.isActive()) {
                        a[cnt++] = tween;
                    }
                }
                return a;
            };
            
            
            p.getLabelAfter = function(time) {
                if (!time) if (time !== 0) { //faster than isNan()
                    time = this._time;
                }
                var labels = this.getLabelsArray(),
                    l = labels.length,
                    i;
                for (i = 0; i < l; i++) {
                    if (labels[i].time > time) {
                        return labels[i].name;
                    }
                }
                return null;
            };
            
            p.getLabelBefore = function(time) {
                if (time == null) {
                    time = this._time;
                }
                var labels = this.getLabelsArray(),
                    i = labels.length;
                while (--i > -1) {
                    if (labels[i].time < time) {
                        return labels[i].name;
                    }
                }
                return null;
            };
            
            p.getLabelsArray = function() {
                var a = [],
                    cnt = 0,
                    p;
                for (p in this._labels) {
                    a[cnt++] = {time:this._labels[p], name:p};
                }
                a.sort(function(a,b) {
                    return a.time - b.time;
                });
                return a;
            };
    
            p.invalidate = function() {
                this._locked = false; //unlock and set cycle in case invalidate() is called from inside an onRepeat
                return TimelineLite.prototype.invalidate.call(this);
            };
    
            
    //---- GETTERS / SETTERS -------------------------------------------------------------------------------------------------------
            
            p.progress = function(value, suppressEvents) {
                return (!arguments.length) ? (this._time / this.duration()) || 0 : this.totalTime( this.duration() * ((this._yoyo && (this._cycle & 1) !== 0) ? 1 - value : value) + (this._cycle * (this._duration + this._repeatDelay)), suppressEvents);
            };
            
            p.totalProgress = function(value, suppressEvents) {
                return (!arguments.length) ? (this._totalTime / this.totalDuration()) || 0 : this.totalTime( this.totalDuration() * value, suppressEvents);
            };
    
            p.totalDuration = function(value) {
                if (!arguments.length) {
                    if (this._dirty) {
                        TimelineLite.prototype.totalDuration.call(this); //just forces refresh
                        //Instead of Infinity, we use 999999999999 so that we can accommodate reverses.
                        this._totalDuration = (this._repeat === -1) ? 999999999999 : this._duration * (this._repeat + 1) + (this._repeatDelay * this._repeat);
                    }
                    return this._totalDuration;
                }
                return (this._repeat === -1 || !value) ? this : this.timeScale( this.totalDuration() / value );
            };
            
            p.time = function(value, suppressEvents) {
                if (!arguments.length) {
                    return this._time;
                }
                if (this._dirty) {
                    this.totalDuration();
                }
                if (value > this._duration) {
                    value = this._duration;
                }
                if (this._yoyo && (this._cycle & 1) !== 0) {
                    value = (this._duration - value) + (this._cycle * (this._duration + this._repeatDelay));
                } else if (this._repeat !== 0) {
                    value += this._cycle * (this._duration + this._repeatDelay);
                }
                return this.totalTime(value, suppressEvents);
            };
            
            p.repeat = function(value) {
                if (!arguments.length) {
                    return this._repeat;
                }
                this._repeat = value;
                return this._uncache(true);
            };
            
            p.repeatDelay = function(value) {
                if (!arguments.length) {
                    return this._repeatDelay;
                }
                this._repeatDelay = value;
                return this._uncache(true);
            };
            
            p.yoyo = function(value) {
                if (!arguments.length) {
                    return this._yoyo;
                }
                this._yoyo = value;
                return this;
            };
            
            p.currentLabel = function(value) {
                if (!arguments.length) {
                    return this.getLabelBefore(this._time + 0.00000001);
                }
                return this.seek(value, true);
            };
            
            return TimelineMax;
            
        }, true);
    
    
    
    
    
    
    
    /*
     * ----------------------------------------------------------------
     * TimelineLite
     * ----------------------------------------------------------------
     */
    
        _gsScope._gsDefine("TimelineLite", ["core.Animation","core.SimpleTimeline","TweenLite"], function(Animation, SimpleTimeline, TweenLite) {
    
            var TimelineLite = function(vars) {
                    SimpleTimeline.call(this, vars);
                    this._labels = {};
                    this.autoRemoveChildren = (this.vars.autoRemoveChildren === true);
                    this.smoothChildTiming = (this.vars.smoothChildTiming === true);
                    this._sortChildren = true;
                    this._onUpdate = this.vars.onUpdate;
                    var v = this.vars,
                        val, p;
                    for (p in v) {
                        val = v[p];
                        if (_isArray(val)) if (val.join("").indexOf("{self}") !== -1) {
                            v[p] = this._swapSelfInParams(val);
                        }
                    }
                    if (_isArray(v.tweens)) {
                        this.add(v.tweens, 0, v.align, v.stagger);
                    }
                },
                _tinyNum = 0.0000000001,
                TweenLiteInternals = TweenLite._internals,
                _internals = TimelineLite._internals = {},
                _isSelector = TweenLiteInternals.isSelector,
                _isArray = TweenLiteInternals.isArray,
                _lazyTweens = TweenLiteInternals.lazyTweens,
                _lazyRender = TweenLiteInternals.lazyRender,
                _globals = _gsScope._gsDefine.globals,
                _copy = function(vars) {
                    var copy = {}, p;
                    for (p in vars) {
                        copy[p] = vars[p];
                    }
                    return copy;
                },
                _applyCycle = function(vars, targets, i) {
                    var alt = vars.cycle,
                        p, val;
                    for (p in alt) {
                        val = alt[p];
                        vars[p] = (typeof(val) === "function") ? val(i, targets[i]) : val[i % val.length];
                    }
                    delete vars.cycle;
                },
                _pauseCallback = _internals.pauseCallback = function() {},
                _slice = function(a) { //don't use [].slice because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()
                    var b = [],
                        l = a.length,
                        i;
                    for (i = 0; i !== l; b.push(a[i++]));
                    return b;
                },
                p = TimelineLite.prototype = new SimpleTimeline();
    
            TimelineLite.version = "1.20.2";
            p.constructor = TimelineLite;
            p.kill()._gc = p._forcingPlayhead = p._hasPause = false;
    
            /* might use later...
            //translates a local time inside an animation to the corresponding time on the root/global timeline, factoring in all nesting and timeScales.
            function localToGlobal(time, animation) {
                while (animation) {
                    time = (time / animation._timeScale) + animation._startTime;
                    animation = animation.timeline;
                }
                return time;
            }
    
            //translates the supplied time on the root/global timeline into the corresponding local time inside a particular animation, factoring in all nesting and timeScales
            function globalToLocal(time, animation) {
                var scale = 1;
                time -= localToGlobal(0, animation);
                while (animation) {
                    scale *= animation._timeScale;
                    animation = animation.timeline;
                }
                return time * scale;
            }
            */
    
            p.to = function(target, duration, vars, position) {
                var Engine = (vars.repeat && _globals.TweenMax) || TweenLite;
                return duration ? this.add( new Engine(target, duration, vars), position) : this.set(target, vars, position);
            };
    
            p.from = function(target, duration, vars, position) {
                return this.add( ((vars.repeat && _globals.TweenMax) || TweenLite).from(target, duration, vars), position);
            };
    
            p.fromTo = function(target, duration, fromVars, toVars, position) {
                var Engine = (toVars.repeat && _globals.TweenMax) || TweenLite;
                return duration ? this.add( Engine.fromTo(target, duration, fromVars, toVars), position) : this.set(target, toVars, position);
            };
    
            p.staggerTo = function(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
                var tl = new TimelineLite({onComplete:onCompleteAll, onCompleteParams:onCompleteAllParams, callbackScope:onCompleteAllScope, smoothChildTiming:this.smoothChildTiming}),
                    cycle = vars.cycle,
                    copy, i;
                if (typeof(targets) === "string") {
                    targets = TweenLite.selector(targets) || targets;
                }
                targets = targets || [];
                if (_isSelector(targets)) { //senses if the targets object is a selector. If it is, we should translate it into an array.
                    targets = _slice(targets);
                }
                stagger = stagger || 0;
                if (stagger < 0) {
                    targets = _slice(targets);
                    targets.reverse();
                    stagger *= -1;
                }
                for (i = 0; i < targets.length; i++) {
                    copy = _copy(vars);
                    if (copy.startAt) {
                        copy.startAt = _copy(copy.startAt);
                        if (copy.startAt.cycle) {
                            _applyCycle(copy.startAt, targets, i);
                        }
                    }
                    if (cycle) {
                        _applyCycle(copy, targets, i);
                        if (copy.duration != null) {
                            duration = copy.duration;
                            delete copy.duration;
                        }
                    }
                    tl.to(targets[i], duration, copy, i * stagger);
                }
                return this.add(tl, position);
            };
    
            p.staggerFrom = function(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
                vars.immediateRender = (vars.immediateRender != false);
                vars.runBackwards = true;
                return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope);
            };
    
            p.staggerFromTo = function(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {
                toVars.startAt = fromVars;
                toVars.immediateRender = (toVars.immediateRender != false && fromVars.immediateRender != false);
                return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope);
            };
    
            p.call = function(callback, params, scope, position) {
                return this.add( TweenLite.delayedCall(0, callback, params, scope), position);
            };
    
            p.set = function(target, vars, position) {
                position = this._parseTimeOrLabel(position, 0, true);
                if (vars.immediateRender == null) {
                    vars.immediateRender = (position === this._time && !this._paused);
                }
                return this.add( new TweenLite(target, 0, vars), position);
            };
    
            TimelineLite.exportRoot = function(vars, ignoreDelayedCalls) {
                vars = vars || {};
                if (vars.smoothChildTiming == null) {
                    vars.smoothChildTiming = true;
                }
                var tl = new TimelineLite(vars),
                    root = tl._timeline,
                    tween, next;
                if (ignoreDelayedCalls == null) {
                    ignoreDelayedCalls = true;
                }
                root._remove(tl, true);
                tl._startTime = 0;
                tl._rawPrevTime = tl._time = tl._totalTime = root._time;
                tween = root._first;
                while (tween) {
                    next = tween._next;
                    if (!ignoreDelayedCalls || !(tween instanceof TweenLite && tween.target === tween.vars.onComplete)) {
                        tl.add(tween, tween._startTime - tween._delay);
                    }
                    tween = next;
                }
                root.add(tl, 0);
                return tl;
            };
    
            p.add = function(value, position, align, stagger) {
                var curTime, l, i, child, tl, beforeRawTime;
                if (typeof(position) !== "number") {
                    position = this._parseTimeOrLabel(position, 0, true, value);
                }
                if (!(value instanceof Animation)) {
                    if ((value instanceof Array) || (value && value.push && _isArray(value))) {
                        align = align || "normal";
                        stagger = stagger || 0;
                        curTime = position;
                        l = value.length;
                        for (i = 0; i < l; i++) {
                            if (_isArray(child = value[i])) {
                                child = new TimelineLite({tweens:child});
                            }
                            this.add(child, curTime);
                            if (typeof(child) !== "string" && typeof(child) !== "function") {
                                if (align === "sequence") {
                                    curTime = child._startTime + (child.totalDuration() / child._timeScale);
                                } else if (align === "start") {
                                    child._startTime -= child.delay();
                                }
                            }
                            curTime += stagger;
                        }
                        return this._uncache(true);
                    } else if (typeof(value) === "string") {
                        return this.addLabel(value, position);
                    } else if (typeof(value) === "function") {
                        value = TweenLite.delayedCall(0, value);
                    } else {
                        throw("Cannot add " + value + " into the timeline; it is not a tween, timeline, function, or string.");
                    }
                }
    
                SimpleTimeline.prototype.add.call(this, value, position);
    
                if (value._time) { //in case, for example, the _startTime is moved on a tween that has already rendered. Imagine it's at its end state, then the startTime is moved WAY later (after the end of this timeline), it should render at its beginning.
                    value.render((this.rawTime() - value._startTime) * value._timeScale, false, false);
                }
    
                //if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.
                if (this._gc || this._time === this._duration) if (!this._paused) if (this._duration < this.duration()) {
                    //in case any of the ancestors had completed but should now be enabled...
                    tl = this;
                    beforeRawTime = (tl.rawTime() > value._startTime); //if the tween is placed on the timeline so that it starts BEFORE the current rawTime, we should align the playhead (move the timeline). This is because sometimes users will create a timeline, let it finish, and much later append a tween and expect it to run instead of jumping to its end state. While technically one could argue that it should jump to its end state, that's not what users intuitively expect.
                    while (tl._timeline) {
                        if (beforeRawTime && tl._timeline.smoothChildTiming) {
                            tl.totalTime(tl._totalTime, true); //moves the timeline (shifts its startTime) if necessary, and also enables it.
                        } else if (tl._gc) {
                            tl._enabled(true, false);
                        }
                        tl = tl._timeline;
                    }
                }
    
                return this;
            };
    
            p.remove = function(value) {
                if (value instanceof Animation) {
                    this._remove(value, false);
                    var tl = value._timeline = value.vars.useFrames ? Animation._rootFramesTimeline : Animation._rootTimeline; //now that it's removed, default it to the root timeline so that if it gets played again, it doesn't jump back into this timeline.
                    value._startTime = (value._paused ? value._pauseTime : tl._time) - ((!value._reversed ? value._totalTime : value.totalDuration() - value._totalTime) / value._timeScale); //ensure that if it gets played again, the timing is correct.
                    return this;
                } else if (value instanceof Array || (value && value.push && _isArray(value))) {
                    var i = value.length;
                    while (--i > -1) {
                        this.remove(value[i]);
                    }
                    return this;
                } else if (typeof(value) === "string") {
                    return this.removeLabel(value);
                }
                return this.kill(null, value);
            };
    
            p._remove = function(tween, skipDisable) {
                SimpleTimeline.prototype._remove.call(this, tween, skipDisable);
                var last = this._last;
                if (!last) {
                    this._time = this._totalTime = this._duration = this._totalDuration = 0;
                } else if (this._time > this.duration()) {
                    this._time = this._duration;
                    this._totalTime = this._totalDuration;
                }
                return this;
            };
    
            p.append = function(value, offsetOrLabel) {
                return this.add(value, this._parseTimeOrLabel(null, offsetOrLabel, true, value));
            };
    
            p.insert = p.insertMultiple = function(value, position, align, stagger) {
                return this.add(value, position || 0, align, stagger);
            };
    
            p.appendMultiple = function(tweens, offsetOrLabel, align, stagger) {
                return this.add(tweens, this._parseTimeOrLabel(null, offsetOrLabel, true, tweens), align, stagger);
            };
    
            p.addLabel = function(label, position) {
                this._labels[label] = this._parseTimeOrLabel(position);
                return this;
            };
    
            p.addPause = function(position, callback, params, scope) {
                var t = TweenLite.delayedCall(0, _pauseCallback, params, scope || this);
                t.vars.onComplete = t.vars.onReverseComplete = callback;
                t.data = "isPause";
                this._hasPause = true;
                return this.add(t, position);
            };
    
            p.removeLabel = function(label) {
                delete this._labels[label];
                return this;
            };
    
            p.getLabelTime = function(label) {
                return (this._labels[label] != null) ? this._labels[label] : -1;
            };
    
            p._parseTimeOrLabel = function(timeOrLabel, offsetOrLabel, appendIfAbsent, ignore) {
                var clippedDuration, i;
                //if we're about to add a tween/timeline (or an array of them) that's already a child of this timeline, we should remove it first so that it doesn't contaminate the duration().
                if (ignore instanceof Animation && ignore.timeline === this) {
                    this.remove(ignore);
                } else if (ignore && ((ignore instanceof Array) || (ignore.push && _isArray(ignore)))) {
                    i = ignore.length;
                    while (--i > -1) {
                        if (ignore[i] instanceof Animation && ignore[i].timeline === this) {
                            this.remove(ignore[i]);
                        }
                    }
                }
                clippedDuration = (this.duration() > 99999999999) ? this.recent().endTime(false) : this._duration; //in case there's a child that infinitely repeats, users almost never intend for the insertion point of a new child to be based on a SUPER long value like that so we clip it and assume the most recently-added child's endTime should be used instead.
                if (typeof(offsetOrLabel) === "string") {
                    return this._parseTimeOrLabel(offsetOrLabel, (appendIfAbsent && typeof(timeOrLabel) === "number" && this._labels[offsetOrLabel] == null) ? timeOrLabel - clippedDuration : 0, appendIfAbsent);
                }
                offsetOrLabel = offsetOrLabel || 0;
                if (typeof(timeOrLabel) === "string" && (isNaN(timeOrLabel) || this._labels[timeOrLabel] != null)) { //if the string is a number like "1", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).
                    i = timeOrLabel.indexOf("=");
                    if (i === -1) {
                        if (this._labels[timeOrLabel] == null) {
                            return appendIfAbsent ? (this._labels[timeOrLabel] = clippedDuration + offsetOrLabel) : offsetOrLabel;
                        }
                        return this._labels[timeOrLabel] + offsetOrLabel;
                    }
                    offsetOrLabel = parseInt(timeOrLabel.charAt(i-1) + "1", 10) * Number(timeOrLabel.substr(i+1));
                    timeOrLabel = (i > 1) ? this._parseTimeOrLabel(timeOrLabel.substr(0, i-1), 0, appendIfAbsent) : clippedDuration;
                } else if (timeOrLabel == null) {
                    timeOrLabel = clippedDuration;
                }
                return Number(timeOrLabel) + offsetOrLabel;
            };
    
            p.seek = function(position, suppressEvents) {
                return this.totalTime((typeof(position) === "number") ? position : this._parseTimeOrLabel(position), (suppressEvents !== false));
            };
    
            p.stop = function() {
                return this.paused(true);
            };
    
            p.gotoAndPlay = function(position, suppressEvents) {
                return this.play(position, suppressEvents);
            };
    
            p.gotoAndStop = function(position, suppressEvents) {
                return this.pause(position, suppressEvents);
            };
    
            p.render = function(time, suppressEvents, force) {
                if (this._gc) {
                    this._enabled(true, false);
                }
                var totalDur = (!this._dirty) ? this._totalDuration : this.totalDuration(),
                    prevTime = this._time,
                    prevStart = this._startTime,
                    prevTimeScale = this._timeScale,
                    prevPaused = this._paused,
                    tween, isComplete, next, callback, internalForce, pauseTween, curTime;
                if (time >= totalDur - 0.0000001 && time >= 0) { //to work around occasional floating point math artifacts.
                    this._totalTime = this._time = totalDur;
                    if (!this._reversed) if (!this._hasPausedChild()) {
                        isComplete = true;
                        callback = "onComplete";
                        internalForce = !!this._timeline.autoRemoveChildren; //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.
                        if (this._duration === 0) if ((time <= 0 && time >= -0.0000001) || this._rawPrevTime < 0 || this._rawPrevTime === _tinyNum) if (this._rawPrevTime !== time && this._first) {
                            internalForce = true;
                            if (this._rawPrevTime > _tinyNum) {
                                callback = "onReverseComplete";
                            }
                        }
                    }
                    this._rawPrevTime = (this._duration || !suppressEvents || time || this._rawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                    time = totalDur + 0.0001; //to avoid occasional floating point rounding errors - sometimes child tweens/timelines were not being fully completed (their progress might be 0.999999999999998 instead of 1 because when _time - tween._startTime is performed, floating point errors would return a value that was SLIGHTLY off). Try (999999999999.7 - 999999999999) * 1 = 0.699951171875 instead of 0.7.
    
                } else if (time < 0.0000001) { //to work around occasional floating point math artifacts, round super small values to 0.
                    this._totalTime = this._time = 0;
                    if (prevTime !== 0 || (this._duration === 0 && this._rawPrevTime !== _tinyNum && (this._rawPrevTime > 0 || (time < 0 && this._rawPrevTime >= 0)))) {
                        callback = "onReverseComplete";
                        isComplete = this._reversed;
                    }
                    if (time < 0) {
                        this._active = false;
                        if (this._timeline.autoRemoveChildren && this._reversed) { //ensures proper GC if a timeline is resumed after it's finished reversing.
                            internalForce = isComplete = true;
                            callback = "onReverseComplete";
                        } else if (this._rawPrevTime >= 0 && this._first) { //when going back beyond the start, force a render so that zero-duration tweens that sit at the very beginning render their start values properly. Otherwise, if the parent timeline's playhead lands exactly at this timeline's startTime, and then moves backwards, the zero-duration tweens at the beginning would still be at their end state.
                            internalForce = true;
                        }
                        this._rawPrevTime = time;
                    } else {
                        this._rawPrevTime = (this._duration || !suppressEvents || time || this._rawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.
                        if (time === 0 && isComplete) { //if there's a zero-duration tween at the very beginning of a timeline and the playhead lands EXACTLY at time 0, that tween will correctly render its end values, but we need to keep the timeline alive for one more render so that the beginning values render properly as the parent's playhead keeps moving beyond the begining. Imagine obj.x starts at 0 and then we do tl.set(obj, {x:100}).to(obj, 1, {x:200}) and then later we tl.reverse()...the goal is to have obj.x revert to 0. If the playhead happens to land on exactly 0, without this chunk of code, it'd complete the timeline and remove it from the rendering queue (not good).
                            tween = this._first;
                            while (tween && tween._startTime === 0) {
                                if (!tween._duration) {
                                    isComplete = false;
                                }
                                tween = tween._next;
                            }
                        }
                        time = 0; //to avoid occasional floating point rounding errors (could cause problems especially with zero-duration tweens at the very beginning of the timeline)
                        if (!this._initted) {
                            internalForce = true;
                        }
                    }
    
                } else {
    
                    if (this._hasPause && !this._forcingPlayhead && !suppressEvents) {
                        if (time >= prevTime) {
                            tween = this._first;
                            while (tween && tween._startTime <= time && !pauseTween) {
                                if (!tween._duration) if (tween.data === "isPause" && !tween.ratio && !(tween._startTime === 0 && this._rawPrevTime === 0)) {
                                    pauseTween = tween;
                                }
                                tween = tween._next;
                            }
                        } else {
                            tween = this._last;
                            while (tween && tween._startTime >= time && !pauseTween) {
                                if (!tween._duration) if (tween.data === "isPause" && tween._rawPrevTime > 0) {
                                    pauseTween = tween;
                                }
                                tween = tween._prev;
                            }
                        }
                        if (pauseTween) {
                            this._time = time = pauseTween._startTime;
                            this._totalTime = time + (this._cycle * (this._totalDuration + this._repeatDelay));
                        }
                    }
    
                    this._totalTime = this._time = this._rawPrevTime = time;
                }
                if ((this._time === prevTime || !this._first) && !force && !internalForce && !pauseTween) {
                    return;
                } else if (!this._initted) {
                    this._initted = true;
                }
    
                if (!this._active) if (!this._paused && this._time !== prevTime && time > 0) {
                    this._active = true;  //so that if the user renders the timeline (as opposed to the parent timeline rendering it), it is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the timeline already finished but the user manually re-renders it as halfway done, for example.
                }
    
                if (prevTime === 0) if (this.vars.onStart) if (this._time !== 0 || !this._duration) if (!suppressEvents) {
                    this._callback("onStart");
                }
    
                curTime = this._time;
                if (curTime >= prevTime) {
                    tween = this._first;
                    while (tween) {
                        next = tween._next; //record it here because the value could change after rendering...
                        if (curTime !== this._time || (this._paused && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
                            break;
                        } else if (tween._active || (tween._startTime <= curTime && !tween._paused && !tween._gc)) {
                            if (pauseTween === tween) {
                                this.pause();
                            }
                            if (!tween._reversed) {
                                tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
                            } else {
                                tween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);
                            }
                        }
                        tween = next;
                    }
                } else {
                    tween = this._last;
                    while (tween) {
                        next = tween._prev; //record it here because the value could change after rendering...
                        if (curTime !== this._time || (this._paused && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
                            break;
                        } else if (tween._active || (tween._startTime <= prevTime && !tween._paused && !tween._gc)) {
                            if (pauseTween === tween) {
                                pauseTween = tween._prev; //the linked list is organized by _startTime, thus it's possible that a tween could start BEFORE the pause and end after it, in which case it would be positioned before the pause tween in the linked list, but we should render it before we pause() the timeline and cease rendering. This is only a concern when going in reverse.
                                while (pauseTween && pauseTween.endTime() > this._time) {
                                    pauseTween.render( (pauseTween._reversed ? pauseTween.totalDuration() - ((time - pauseTween._startTime) * pauseTween._timeScale) : (time - pauseTween._startTime) * pauseTween._timeScale), suppressEvents, force);
                                    pauseTween = pauseTween._prev;
                                }
                                pauseTween = null;
                                this.pause();
                            }
                            if (!tween._reversed) {
                                tween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);
                            } else {
                                tween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);
                            }
                        }
                        tween = next;
                    }
                }
    
                if (this._onUpdate) if (!suppressEvents) {
                    if (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.
                        _lazyRender();
                    }
                    this._callback("onUpdate");
                }
    
                if (callback) if (!this._gc) if (prevStart === this._startTime || prevTimeScale !== this._timeScale) if (this._time === 0 || totalDur >= this.totalDuration()) { //if one of the tweens that was rendered altered this timeline's startTime (like if an onComplete reversed the timeline), it probably isn't complete. If it is, don't worry, because whatever call altered the startTime would complete if it was necessary at the new time. The only exception is the timeScale property. Also check _gc because there's a chance that kill() could be called in an onUpdate
                    if (isComplete) {
                        if (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onComplete on a timeline that reports/checks tweened values.
                            _lazyRender();
                        }
                        if (this._timeline.autoRemoveChildren) {
                            this._enabled(false, false);
                        }
                        this._active = false;
                    }
                    if (!suppressEvents && this.vars[callback]) {
                        this._callback(callback);
                    }
                }
            };
    
            p._hasPausedChild = function() {
                var tween = this._first;
                while (tween) {
                    if (tween._paused || ((tween instanceof TimelineLite) && tween._hasPausedChild())) {
                        return true;
                    }
                    tween = tween._next;
                }
                return false;
            };
    
            p.getChildren = function(nested, tweens, timelines, ignoreBeforeTime) {
                ignoreBeforeTime = ignoreBeforeTime || -9999999999;
                var a = [],
                    tween = this._first,
                    cnt = 0;
                while (tween) {
                    if (tween._startTime < ignoreBeforeTime) {
                        //do nothing
                    } else if (tween instanceof TweenLite) {
                        if (tweens !== false) {
                            a[cnt++] = tween;
                        }
                    } else {
                        if (timelines !== false) {
                            a[cnt++] = tween;
                        }
                        if (nested !== false) {
                            a = a.concat(tween.getChildren(true, tweens, timelines));
                            cnt = a.length;
                        }
                    }
                    tween = tween._next;
                }
                return a;
            };
    
            p.getTweensOf = function(target, nested) {
                var disabled = this._gc,
                    a = [],
                    cnt = 0,
                    tweens, i;
                if (disabled) {
                    this._enabled(true, true); //getTweensOf() filters out disabled tweens, and we have to mark them as _gc = true when the timeline completes in order to allow clean garbage collection, so temporarily re-enable the timeline here.
                }
                tweens = TweenLite.getTweensOf(target);
                i = tweens.length;
                while (--i > -1) {
                    if (tweens[i].timeline === this || (nested && this._contains(tweens[i]))) {
                        a[cnt++] = tweens[i];
                    }
                }
                if (disabled) {
                    this._enabled(false, true);
                }
                return a;
            };
    
            p.recent = function() {
                return this._recent;
            };
    
            p._contains = function(tween) {
                var tl = tween.timeline;
                while (tl) {
                    if (tl === this) {
                        return true;
                    }
                    tl = tl.timeline;
                }
                return false;
            };
    
            p.shiftChildren = function(amount, adjustLabels, ignoreBeforeTime) {
                ignoreBeforeTime = ignoreBeforeTime || 0;
                var tween = this._first,
                    labels = this._labels,
                    p;
                while (tween) {
                    if (tween._startTime >= ignoreBeforeTime) {
                        tween._startTime += amount;
                    }
                    tween = tween._next;
                }
                if (adjustLabels) {
                    for (p in labels) {
                        if (labels[p] >= ignoreBeforeTime) {
                            labels[p] += amount;
                        }
                    }
                }
                return this._uncache(true);
            };
    
            p._kill = function(vars, target) {
                if (!vars && !target) {
                    return this._enabled(false, false);
                }
                var tweens = (!target) ? this.getChildren(true, true, false) : this.getTweensOf(target),
                    i = tweens.length,
                    changed = false;
                while (--i > -1) {
                    if (tweens[i]._kill(vars, target)) {
                        changed = true;
                    }
                }
                return changed;
            };
    
            p.clear = function(labels) {
                var tweens = this.getChildren(false, true, true),
                    i = tweens.length;
                this._time = this._totalTime = 0;
                while (--i > -1) {
                    tweens[i]._enabled(false, false);
                }
                if (labels !== false) {
                    this._labels = {};
                }
                return this._uncache(true);
            };
    
            p.invalidate = function() {
                var tween = this._first;
                while (tween) {
                    tween.invalidate();
                    tween = tween._next;
                }
                return Animation.prototype.invalidate.call(this);;
            };
    
            p._enabled = function(enabled, ignoreTimeline) {
                if (enabled === this._gc) {
                    var tween = this._first;
                    while (tween) {
                        tween._enabled(enabled, true);
                        tween = tween._next;
                    }
                }
                return SimpleTimeline.prototype._enabled.call(this, enabled, ignoreTimeline);
            };
    
            p.totalTime = function(time, suppressEvents, uncapped) {
                this._forcingPlayhead = true;
                var val = Animation.prototype.totalTime.apply(this, arguments);
                this._forcingPlayhead = false;
                return val;
            };
    
            p.duration = function(value) {
                if (!arguments.length) {
                    if (this._dirty) {
                        this.totalDuration(); //just triggers recalculation
                    }
                    return this._duration;
                }
                if (this.duration() !== 0 && value !== 0) {
                    this.timeScale(this._duration / value);
                }
                return this;
            };
    
            p.totalDuration = function(value) {
                if (!arguments.length) {
                    if (this._dirty) {
                        var max = 0,
                            tween = this._last,
                            prevStart = 999999999999,
                            prev, end;
                        while (tween) {
                            prev = tween._prev; //record it here in case the tween changes position in the sequence...
                            if (tween._dirty) {
                                tween.totalDuration(); //could change the tween._startTime, so make sure the tween's cache is clean before analyzing it.
                            }
                            if (tween._startTime > prevStart && this._sortChildren && !tween._paused) { //in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence
                                this.add(tween, tween._startTime - tween._delay);
                            } else {
                                prevStart = tween._startTime;
                            }
                            if (tween._startTime < 0 && !tween._paused) { //children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.
                                max -= tween._startTime;
                                if (this._timeline.smoothChildTiming) {
                                    this._startTime += tween._startTime / this._timeScale;
                                }
                                this.shiftChildren(-tween._startTime, false, -9999999999);
                                prevStart = 0;
                            }
                            end = tween._startTime + (tween._totalDuration / tween._timeScale);
                            if (end > max) {
                                max = end;
                            }
                            tween = prev;
                        }
                        this._duration = this._totalDuration = max;
                        this._dirty = false;
                    }
                    return this._totalDuration;
                }
                return (value && this.totalDuration()) ? this.timeScale(this._totalDuration / value) : this;
            };
    
            p.paused = function(value) {
                if (!value) { //if there's a pause directly at the spot from where we're unpausing, skip it.
                    var tween = this._first,
                        time = this._time;
                    while (tween) {
                        if (tween._startTime === time && tween.data === "isPause") {
                            tween._rawPrevTime = 0; //remember, _rawPrevTime is how zero-duration tweens/callbacks sense directionality and determine whether or not to fire. If _rawPrevTime is the same as _startTime on the next render, it won't fire.
                        }
                        tween = tween._next;
                    }
                }
                return Animation.prototype.paused.apply(this, arguments);
            };
    
            p.usesFrames = function() {
                var tl = this._timeline;
                while (tl._timeline) {
                    tl = tl._timeline;
                }
                return (tl === Animation._rootFramesTimeline);
            };
    
            p.rawTime = function(wrapRepeats) {
                return (wrapRepeats && (this._paused || (this._repeat && this.time() > 0 && this.totalProgress() < 1))) ? this._totalTime % (this._duration + this._repeatDelay) : this._paused ? this._totalTime : (this._timeline.rawTime(wrapRepeats) - this._startTime) * this._timeScale;
            };
    
            return TimelineLite;
    
        }, true);
    
    }); if (_gsScope._gsDefine) { _gsScope._gsQueue.pop()(); }
    
    //export to AMD/RequireJS and CommonJS/Node (precursor to full modular build system coming at a later date)
    (function(name) {
        "use strict";
        var getGlobal = function() {
            return (_gsScope.GreenSockGlobals || _gsScope)[name];
        };
        if (typeof(module) !== "undefined" && module.exports) { //node
            __webpack_require__(57); //dependency
            module.exports = getGlobal();
        } else if (true) { //AMD
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(57)], __WEBPACK_AMD_DEFINE_FACTORY__ = (getGlobal),
                    __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
                    (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
                    __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        }
    }("TimelineMax"));
    /* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(22)))
    
    /***/ }),
    /* 587 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    // $(function () {
    //   $(".preview_body").mousemove(function (e) {
    //     $(".preview_body-cursor").show().css({
    //       "left": e.clientX ,
    //       "top": e.clientY
    //     });
    //   }).mouseout(function () {
    //     $(".preview_body-cursor").hide();
    //   });
    // });
    
    
    /***/ }),
    /* 588 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    var _helpers = __webpack_require__(3);
    
    // import { TimelineMax, TweenMax } from 'gsap';
    
    var perkBlock = $('.perks-item');
    var isIE = window.navigator.userAgent.indexOf("MSIE ");
    if (isIE > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./)) {
      $('body').addClass('IE');
    }
    
    // if (resp.desk) {
    
    
    //   perkBlock.on('mouseenter', function() {
    //     $(this).removeClass('mouseleave');
    //     $(this).addClass('mouseenter')
    //   });
    //   perkBlock.on('mouseleave', function() {
    //     $(this).removeClass('mouseenter');
    //     $(this).addClass('mouseleave');
    //     setTimeout(function() { perkBlock.removeClass('mouseleave'); }, 1500);
    //   });
    // }
    
    /***/ }),
    /* 589 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.PublicAPI = undefined;
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _bTags = __webpack_require__(150);
    
    var _bTestimonals = __webpack_require__(590);
    
    var _bPagination = __webpack_require__(153);
    
    var _bMeet = __webpack_require__(148);
    
    var _animLines = __webpack_require__(80);
    
    var _link = __webpack_require__(21);
    
    var _link2 = _interopRequireDefault(_link);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    /**
     * Website's public API.
     *
     * @module PublicAPI
     */
    
    var PublicAPI = exports.PublicAPI = function () {
        function PublicAPI() {
            _classCallCheck(this, PublicAPI);
        }
    
        _createClass(PublicAPI, [{
            key: 'formSuccess',
    
            /**
       * Trigger MeetBlock's Form to success statement
       */
            value: function formSuccess() {
                _bMeet.MeetBlockAPI.initSuccess();
                return this;
            }
        }, {
            key: 'tagsRefresh',
            value: function tagsRefresh() {
                _bTags.TagsAPI.init();
                return this;
            }
        }, {
            key: 'linkRefresh',
            value: function linkRefresh() {
                new _link2.default($('.js-link-circle'));
                new _link2.default($('.js-link-single-circle'), {
                    type: 'single'
                });
                new _link2.default($('.js-link-multiple-circle'), {
                    type: 'multiple'
                });
                return this;
            }
        }, {
            key: 'paginationRefresh',
            value: function paginationRefresh() {
                _bPagination.PaginationAPI.init();
                return this;
            }
        }, {
            key: 'testimonialsDeleteController',
            value: function testimonialsDeleteController() {
                _bTestimonals.TestimonalsAPI.destroyScrollTrigger();
                return this;
            }
        }, {
            key: 'testimonialsVideoRefresh',
            value: function testimonialsVideoRefresh() {
                _bTestimonals.TestimonalsAPI.initVideoButton();
                return this;
            }
        }, {
            key: 'animLineRefresh',
            value: function animLineRefresh() {
                _animLines.AnimLinesAPI.init();
                return this;
            }
        }]);
    
        return PublicAPI;
    }();
    
    /** Expose Public API */
    
    
    exports.default = window.PublicAPI = new PublicAPI();
    
    /***/ }),
    /* 590 */
    /***/ (function(module, exports, __webpack_require__) {
    
    "use strict";
    
    
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.TestimonalsAPI = undefined;
    
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
    
    var _gsap = __webpack_require__(12);
    
    __webpack_require__(61);
    
    __webpack_require__(81);
    
    __webpack_require__(52);
    
    var _scrollTriggerAnimations = __webpack_require__(79);
    
    var _scrollTriggerAnimations2 = _interopRequireDefault(_scrollTriggerAnimations);
    
    var _helpers = __webpack_require__(3);
    
    var _link = __webpack_require__(21);
    
    var _link2 = _interopRequireDefault(_link);
    
    var _video = __webpack_require__(109);
    
    var _video2 = _interopRequireDefault(_video);
    
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    
    var TestimonalsBlock = function () {
        function TestimonalsBlock() {
            var _this2 = this;
    
            _classCallCheck(this, TestimonalsBlock);
    
            this.container = 'testimonals';
            this.$container = function () {
                return $('.' + _this2.container);
            };
            this.inner = this.container + '__inner';
            this.item = this.container + '__item';
            this.text = this.container + '__text';
            this.videoBlock = '_video';
            this.$bgItem = function () {
                return $('.' + _this2.container + '__bg-item');
            };
            this.scrollMagicController = [];
            this.video = [];
    
            if (this.$container().length) {
                this.init();
            }
        }
    
        _createClass(TestimonalsBlock, [{
            key: 'init',
            value: function init() {
                var _this3 = this;
    
                _helpers.$window.on('load', function () {
                    if (_this3.$container().length) {
                        _this3.initVideoButton();
                    }
                });
            }
        }, {
            key: 'destroyScrollTrigger',
            value: function destroyScrollTrigger() {
                this.scrollMagicController.forEach(function (el) {
                    el.destroyScroll();
                });
            }
        }, {
            key: 'initVideoButton',
            value: function initVideoButton() {
                var _this4 = this;
    
                var videoIncrement = 0;
    
                if (this.video.length > 0) {
                    this.video.forEach(function (el) {
                        el.dispose();
                    });
                    _helpers.$body.unbind('closeVideo');
                }
    
                this.$container().each(function (index, el) {
                    var $this = $(el);
    
                    if (!$this.hasClass(_this4.container + _this4.videoBlock)) return true;
    
                    var _this = _this4,
                        $picture = $this.find('img'),
                        $video = $this.find('video'),
                        $videoItem = $this.find('.testimonals__bg-item'),
                        windowScrollTop = _helpers.$window.scrollTop,
                        video = [];
    
                    $videoItem.eq(0).addClass(_helpers.css.active).nextAll().hide();
    
                    $video.each(function (index, el) {
                        var $el = $(el);
    
                        $el.children().attr('src', $el.children().data('load-src'));
                        var bufferVideo = new _video2.default().init($el.get(0), videoIncrement);
                        video.push(bufferVideo);
                        _this4.video.push(bufferVideo);
                        videoIncrement++;
                    });
    
                    var $thisHeight = $this.height();
    
                    // Create close btn:
                    var $closeBtn = $(createCloseBtn($this));
    
                    // Create play-button and append this at half-container with video:
                    var $icon = $('\n\t\t\t\t<div class="' + _this4.container + '__play-btn">\n\t\t\t\t\t<svg class="play-btn" viewBox="0 0 294 294">\n\t\t\t\t\t\t<path class="play-btn__triangle" d="M132.5,165V129l29,18Z"/>\n\t\t\t\t\t\t<line class="play-btn__line-top" x1="275.5" y1="216.5" x2="27.5" y2="63.5"/>\n\t\t\t\t\t\t<line class="play-btn__line-left" x1="27.5" y1="231.5" x2="275.5" y2="76.5"/>\n\t\t\t\t\t\t<line class="play-btn__line-right" x1="132.5" y1="1.5" x2="132.5" y2="292.5"/>\n\t\t\t\t\t\t<circle class="play-btn__circle-lg" cx="147" cy="147" r="146"/> \n\t\t\t\t\t</svg>\n\t\t\t\t</div>\n\t\t\t'),
                        $iconCircleLg = $icon.find('.play-btn__circle-lg'),
                        $iconTriangle = $icon.find('.play-btn__triangle'),
                        $iconLineTop = $icon.find('.play-btn__line-top'),
                        $iconLineLeft = $icon.find('.play-btn__line-left'),
                        $iconLineRight = $icon.find('.play-btn__line-right');
    
                    var tl = new _gsap.TimelineMax({ paused: true });
                    $icon = $icon.appendTo($this.find('.' + _this4.inner));
    
                    setStartState();
                    createStartAnim.call(_this4);
                    createScrollAnim(_this4);
    
                    // Drawing svg icon at play-button:
                    function setStartState() {
                        _gsap.TweenMax.set($iconTriangle, { alpha: 0 });
                        _gsap.TweenMax.set($iconCircleLg, {
                            drawSVG: '0%', rotation: -90, transformOrigin: 'center center'
                        });
                        _gsap.TweenMax.set([$iconLineTop, $iconLineLeft, $iconLineRight], { drawSVG: '0%' });
                    }
    
                    // Add mouse move listener at play btn svg icon:
                    function createScrollAnim(that) {
                        var scene = new _scrollTriggerAnimations2.default({
                            container: el,
                            onStart: function onStart() {
                                setTimeout(function () {
                                    tl.play();
                                }, 750);
                            }
                        });
                        that.scrollMagicController.push(scene);
                    }
    
                    // resize section height on orientationChange
                    function resizeSectionOnOrientationChange() {
                        if (!$this.find('.testimonals__bg-w').hasClass(_helpers.css.play)) return;
    
                        var $videoHeight = $this.find('video').height();
    
                        _gsap.TweenMax.to($this, 0.2, {
                            height: $videoHeight,
                            ease: Power1.easeInOut
                        });
                    }
    
                    _helpers.$window.on('orientationchange', (0, _helpers.debounce)(resizeSectionOnOrientationChange, _this4, 250));
    
                    // Add close btn:
                    function createCloseBtn($videoContainer) {
                        var $container = $videoContainer.find('.testimonals__bg-video'),
                            $btn = $('<div></div>', { class: 'testimonals__video-close' }).append($('<span>Close</span>')),
                            $newBtn = [];
    
                        $container.each(function (index, el) {
                            $newBtn.push($btn.clone());
                            $newBtn[index].prependTo($videoContainer);
                            new _link2.default($newBtn[index], { type: 'close' });
                        });
    
                        return $newBtn;
                    }
    
                    function createStartAnim() {
                        var _this5 = this;
    
                        var speed = 1;
                        tl.add('start').to($iconCircleLg, speed * 2 / 3, { drawSVG: '100%', ease: Power1.easeInOut }, 'start').to([$iconLineTop, $iconLineLeft, $iconLineRight], speed / 2, {
                            drawSVG: '25% 75%', ease: Power4.easeIn
                        }, 'start').to([$iconLineTop, $iconLineLeft, $iconLineRight], speed / 3, {
                            drawSVG: '100% 100%', ease: Power2.easeOut
                        }, 'start+=' + speed / 2).to($iconTriangle, speed / 4, { alpha: 1 }, 'start+=' + speed / 2);
    
                        if (_helpers.Resp.isDesk) {
                            tl.vars.onComplete = function () {
                                bindPlayEvent.call(_this5);
                            };
                        } else {
                            tl.vars.onComplete = function () {
                                bindPlayEvent.call(_this5);
                            };
                        }
                    }
    
                    function bindPlayEvent() {
                        var _this6 = this;
    
                        var fadeSpeed = 0.4;
                        var $videoHeight = $(video[_this.$bgItem().filter('.' + _helpers.css.active).index()].el_).height();
    
                        if (!_helpers.Resp.isDesk) {
                            fadeSpeed /= 2;
                        }
    
                        $video.each(function (index, el) {
                            el.addEventListener('ended', function () {
                                _helpers.$body.trigger('closeVideo');
                            });
                        });
    
                        $closeBtn.each(function (index, el) {
                            $(el).on('click', function () {
                                _helpers.$body.trigger('closeVideo');
                            });
                        });
    
                        _helpers.$body.bind('closeVideo', function () {
                            video[_this.$bgItem().filter('.' + _helpers.css.active).index()].pause();
                            $this.addClass(_helpers.css.noEvents);
                            _gsap.TweenMax.to($closeBtn[_this.$bgItem().filter('.' + _helpers.css.active).index()], fadeSpeed, {
                                y: 20,
                                alpha: 0,
                                ease: Power1.easeInOut
                            });
                            _gsap.TweenMax.to($this, fadeSpeed, {
                                height: $thisHeight,
                                ease: Power1.easeInOut
                            });
                            _gsap.TweenMax.to(video[_this.$bgItem().filter('.' + _helpers.css.active).index()].el_, fadeSpeed, {
                                alpha: 0,
                                onComplete: function onComplete() {
                                    $this.find('.testimonals__bg-w').removeClass(_helpers.css.play);
                                    _gsap.TweenMax.to($picture.eq(_this.$bgItem().filter('.' + _helpers.css.active).index()).parent(), 1.5 * fadeSpeed, {
                                        y: '0%',
                                        alpha: 1,
                                        ease: Power1.easeOut,
                                        onComplete: function onComplete() {
                                            _gsap.TweenMax.to([$this.find('.testimonals__item')], fadeSpeed, {
                                                y: 0,
                                                alpha: 1,
                                                ease: Power1.easeOut,
                                                onComplete: function onComplete() {
                                                    _gsap.TweenMax.to($icon, fadeSpeed, {
                                                        alpha: 1,
                                                        scale: 1,
                                                        onComplete: function onComplete() {
                                                            $this.removeClass(_helpers.css.noEvents);
                                                        }
                                                    });
                                                }
                                            });
                                        }
                                    });
                                }
                            });
                        });
    
                        $icon.on('click tap', function () {
                            var activeItem = _this.$bgItem().filter('.' + _helpers.css.active);
                            var activeIndex = activeItem.index();
    
                            _helpers.$body.trigger('closeVideo');
                            video[activeIndex].load();
    
                            if (!_helpers.Resp.isDesk) {
                                video[activeIndex].play();
                            }
    
                            var thisTl = new _gsap.TimelineMax();
                            windowScrollTop = _helpers.$window.scrollTop();
                            $this.addClass(_helpers.css.noEvents);
                            thisTl.to($icon, fadeSpeed, {
                                alpha: 0,
                                scale: 0.8
                            }).to([$this.find('.' + _this6.container + '__item')], fadeSpeed, {
                                y: 200,
                                alpha: 0,
                                ease: Power1.easeIn
                            }).to($picture.eq(activeIndex).parent(), 1.5 * fadeSpeed, {
                                y: '100%',
                                alpha: 0,
                                ease: Power1.easeIn,
                                onComplete: function onComplete() {
                                    $this.find('.testimonals__bg-w').addClass(_helpers.css.play);
                                    $videoHeight = _helpers.Resp.isDesk ? false : $this.width() * 0.5625;
                                    if ($videoHeight && $this.closest('.testimonals__small').length === 0) {
                                        _gsap.TweenMax.to($this, fadeSpeed, {
                                            height: $videoHeight,
                                            ease: Power1.easeInOut
                                        });
                                    }
                                    _gsap.TweenMax.to(video[activeIndex].el_, fadeSpeed, {
                                        alpha: 1,
                                        onComplete: function onComplete() {
                                            _gsap.TweenMax.to($closeBtn[activeIndex], fadeSpeed, {
                                                y: 0,
                                                alpha: 1,
                                                ease: Power1.easeInOut
                                            });
                                            $this.removeClass(_helpers.css.noEvents);
                                            video[activeIndex].play();
                                            $('.header').addClass(_helpers.css.hide);
                                        }
                                    });
                                }
                            });
                        });
                    }
                });
            }
        }]);
    
        return TestimonalsBlock;
    }();
    
    var TestimonalsAPI = exports.TestimonalsAPI = new TestimonalsBlock();
    
    /***/ })
    ],[154]);
    //# sourceMappingURL=index.js.map